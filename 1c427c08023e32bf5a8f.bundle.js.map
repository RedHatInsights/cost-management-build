{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/components/state/loadingState/loadingState.tsx","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardBase.tsx","webpack://koku-ui/./src/pages/views/overview/components/chartComparison.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidgetBase.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/overview.styles.ts","webpack://koku-ui/./src/pages/views/overview/overview.tsx","webpack://koku-ui/./src/pages/views/overview/index.ts","webpack://koku-ui/./src/utils/format.ts","webpack://koku-ui/./src/utils/userAccess.ts"],"names":["getUserAccessQuery","query","stringify","encode","indices","LoadingState","intl","title","formatMessage","subTitle","EmptyState","variant","EmptyStateVariant","className","Spinner","size","Title","headingLevel","EmptyStateBody","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","constructor","super","arguments","this","defaultState","isPerspectiveOpen","state","Object","assign","getDropDownItems","options","props","map","option","DropdownItem","component","key","value","onClick","handleClick","label","getCurrentLabel","currentItem","getDropDown","isDisabled","dropdownItems","length","style","Dropdown","onSelect","handleSelect","toggle","DropdownToggle","onToggle","handleToggle","isOpen","onItemClicked","setState","render","messages","Perspective","injectIntl","DashboardBase","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","isChartComparisonOpen","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","tabs","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showInfrastructureLabel","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getFormattedUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","currentInfrastructureData","previousInfrastructureData","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","forecastInfrastructureData","computedForecastInfrastructureItem","ReportSummaryComponent","currentInfrastructureCostData","forecastConeData","forecastInfrastructureConeData","formatOptions","formatter","format","previousInfrastructureCostData","showForecast","undefined","currentData","previousData","showUsageLegendLabel","getUnits","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","push","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","Link","to","getDetailsLinkTitle","count","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","id","toString","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","event","tabIndex","updateTab","componentDidMount","fetchForecasts","fetchReports","mapStateToProps","widget","awsDashboard","queries","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsDashboardWidget","connect","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","alignSelf","flexGrow","textAlign","costType","header","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_lg","headerContent","justifyContent","headerContentLeft","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","main","paddingBottom","paddingTop","ocpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpCloudOptions","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOcpCloudAvailable","getCostType","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","aws","azure","gcp","ibm","ocp","ocpCloud","getDefaultInfrastructurePerspective","insights","chrome","isBeta","getDefaultOcpPerspective","ocpProviders","ocpProvidersFetchStatus","userAccess","getPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","awsProvidersFetchStatus","azureProvidersFetchStatus","gcpProvidersFetchStatus","ibmProvidersFetchStatus","ibmUserAccess","resetState","componentDidUpdate","prevProps","userAccessFetchStatus","isLoading","noAwsProviders","noAzureProviders","noGcpProviders","noIbmProviders","noOcpProviders","noProviders","TitleSizes","Popover","enableFlip","bodyContent","Button","ButtonVariant","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","userAccessQueryString","userAccessError","ibmUserAccessQueryString","ibmUserAccessError","ibmUserAccessFetchStatus","ui","countDecimals","useLocale","decimalSeparator","Number","toLocaleString","substring","decimals","split","unitsLookupKey","lookup","replace","toLowerCase","formatCurrency","fValue","currency","toUpperCase","formatCurrencyAbbreviation","abbreviationFormats","symbol","find","f","minimumFractionDigits","maximumFractionDigits","formatRate","formatRaw","locale","search","formatUnits","formatUsageHrs","formatUsageGb","unknownTypeFormatter","formatPercentage","hasAccess","userAccessType","result","Array","isArray","d","access","hasProviders","providers","providersFetchStatus","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","gcpsProvidersFetchStatus","hasIbmAccess","hasOcpAccess"],"mappings":"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","file":"1c427c08023e32bf5a8f.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title } from '@patternfly/react-core';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n// defaultIntl required for testing\nconst LoadingStateBase = ({ intl = defaultIntl }) => {\n    const title = intl.formatMessage(messages.LoadingStateTitle);\n    const subTitle = intl.formatMessage(messages.LoadingStateDesc);\n    return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n        React.createElement(Spinner, { size: \"lg\" }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, title),\n        React.createElement(EmptyStateBody, null, subTitle)));\n};\nconst LoadingState = injectIntl(LoadingStateBase);\nexport { LoadingState };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { intl, options } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, intl.formatMessage(option.label, { value: option.value }))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, intl, options } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = intl.formatMessage(option.label, { value: option.value });\n                    break;\n                }\n            }\n            return label;\n        };\n        this.getDropDown = () => {\n            const { intl, isDisabled, options } = this.props;\n            const { isPerspectiveOpen } = this.state;\n            const dropdownItems = this.getDropDownItems();\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems }));\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.Perspective)),\n            this.getDropDown()));\n    }\n}\nconst Perspective = injectIntl(PerspectiveBase);\nexport { Perspective };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isChartComparisonOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, option.label)));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = option.label;\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isChartComparisonOpen: !this.state.isChartComparisonOpen,\n            });\n        };\n        this.handleToggle = isChartComparisonOpen => {\n            this.setState({\n                isChartComparisonOpen,\n            });\n        };\n    }\n    render() {\n        const { isChartComparisonOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isChartComparisonOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformForecast, transformForecastCone, transformReport, } from 'components/charts/common/chartDatumUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* cumulative */ },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, type, 'date', 'infrastructure', computedReportItemValue);\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const forecastInfrastructureData = this.getForecastData(currentReport, trend.computedForecastInfrastructureItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, forecastInfrastructureConeData: forecastInfrastructureData.forecastConeData, forecastInfrastructureData: forecastInfrastructureData.forecastData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    const units = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.units\n                        : 'USD';\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === 0 /* rolling */) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === \"usage\" /* usage */) {\n                return intl.formatMessage(messages.Units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.CurrencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import AwsDashboard from './awsDashboard';\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import AwsOcpDashboard from './awsOcpDashboard';\nexport default AwsOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import AzureDashboard from './azureDashboard';\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import AzureOcpDashboard from './azureOcpDashboard';\nexport default AzureOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import GcpDashboard from './gcpDashboard';\nexport default GcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import GcpOcpDashboard from './gcpOcpDashboard';\nexport default GcpOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import IbmDashboard from './ibmDashboard';\nexport default IbmDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","import OcpCloudDashboard from './ocpCloudDashboard';\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","import OcpDashboard from './ocpDashboard';\nexport default OcpDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { CostType } from 'components/costType/costType';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport AwsDashboard from 'pages/views/overview/awsDashboard';\nimport AwsOcpDashboard from 'pages/views/overview/awsOcpDashboard';\nimport AzureDashboard from 'pages/views/overview/azureDashboard';\nimport AzureOcpDashboard from 'pages/views/overview/azureOcpDashboard';\nimport GcpDashboard from 'pages/views/overview/gcpDashboard';\nimport GcpOcpDashboard from 'pages/views/overview/gcpOcpDashboard';\nimport IbmDashboard from 'pages/views/overview/ibmDashboard';\nimport OcpCloudDashboard from 'pages/views/overview/ocpCloudDashboard';\nimport OcpDashboard from 'pages/views/overview/ocpDashboard';\nimport { hasCloudCurrentMonthData, hasCloudPreviousMonthData, hasCurrentMonthData, hasPreviousMonthData, } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [{ label: messages.PerspectiveValues, value: 'ocp' }];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.PerspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.PerspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.PerspectiveValues, value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.PerspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\n//\n// Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n//\n// const infrastructureGcpOcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.PerspectiveValues, value: 'ibm' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.PerspectiveValues, value: 'ocp_cloud' }];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === \"aws\" /* aws */) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, null)));\n            }\n            return null;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            const ocpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = ocp && !(aws || azure || gcp || ibm || ocpCloud);\n            const showInfrastructureOnly = !ocp && (aws || azure || gcp || ibm || ocpCloud);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            if (this.isOcpAvailable()) {\n                // Todo: Show new features in beta environment only\n                if (insights.chrome.isBeta()) {\n                    return \"ocp_cloud\" /* ocpCloud */;\n                }\n            }\n            if (this.isAwsAvailable()) {\n                return \"aws\" /* aws */;\n            }\n            if (this.isAzureAvailable()) {\n                return \"azure\" /* azure */;\n            }\n            if (this.isGcpAvailable()) {\n                return \"gcp\" /* gcp */;\n            }\n            if (this.isIbmAvailable()) {\n                return \"ibm\" /* ibm */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            if (isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus)) {\n                return \"ocp\" /* ocp */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            if (!(aws || azure || gcp || ibm || ocp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (ocp) {\n                    // Todo: Show new features in beta environment only\n                    if (insights.chrome.isBeta()) {\n                        options.push(...infrastructureOcpCloudOptions);\n                    }\n                }\n                if (aws) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (aws && ocp) {\n                    options.push(...infrastructureAwsOcpOptions);\n                }\n                if (gcp) {\n                    options.push(...infrastructureGcpOptions);\n                }\n                // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n                //\n                // if (gcp && ocp) {\n                //   options.push(...infrastructureGcpOcpOptions);\n                // }\n                if (ibm) {\n                    options.push(...infrastructureIbmOptions);\n                }\n                if (azure) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (azure && ocp) {\n                    options.push(...infrastructureAzureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"ocp_cloud\" /* ocpCloud */) {\n                    const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_ocp\" /* awsOcp */) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* gcp */) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp_ocp\" /* gcpOcp */) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ibm\" /* ibm */) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_ocp\" /* azureOcp */) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === \"ocp\" /* ocp */) {\n                    return hasData ? React.createElement(OcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return intl.formatMessage(messages.Infrastructure);\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return intl.formatMessage(messages.OpenShift);\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, awsProvidersFetchStatus, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, azureProvidersFetchStatus, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, gcpProvidersFetchStatus, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, ibmProvidersFetchStatus, ibmUserAccess } = this.props;\n            return isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus);\n        };\n        this.isOcpCloudAvailable = () => {\n            return this.isAwsAvailable() && this.isOcpAvailable();\n        };\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.setState({\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, userAccess } = this.props;\n        // Note: User access and providers are fetched via the Permissions and InactiveSources components used by all routes\n        if (prevProps.userAccess !== userAccess ||\n            prevProps.awsProviders !== awsProviders ||\n            prevProps.azureProviders !== azureProviders ||\n            prevProps.gcpProviders !== gcpProviders ||\n            prevProps.ibmProviders !== ibmProviders ||\n            prevProps.ocpProviders !== ocpProviders) {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ibmProvidersFetchStatus, intl, ocpProvidersFetchStatus, userAccessFetchStatus, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */;\n        // Test for no providers\n        const noAwsProviders = !this.isAwsAvailable() && awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && azureProvidersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && gcpProvidersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && ibmProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const title = intl.formatMessage(messages.OverviewTitle);\n        if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.OverviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.GCP)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.GCPDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.IBM)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.IBMDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.AWS)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.AWSDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.Azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.AzureDesc))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(Currency, null)),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    resetState: uiActions.resetState,\n};\nconst Overview = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n","import { getLocale, intl } from 'components/i18n';\nimport messages from 'locales/messages';\n// Returns the number of decimals for given string\nexport const countDecimals = (value, useLocale = false) => {\n    const decimalSeparator = useLocale ? Number('1.1').toLocaleString(getLocale(), {}).substring(1, 2) : '.';\n    const decimals = value.split(decimalSeparator);\n    return decimals[1] ? decimals[1].length : 0;\n};\n// Returns i18n key for given units\nexport const unitsLookupKey = (units) => {\n    const lookup = units ? units.replace(/[- ]/g, '_').toLowerCase() : '';\n    switch (lookup) {\n        case 'core_hours':\n        case 'gb':\n        case 'gb_hours':\n        case 'gb_mo':\n        case 'gibibyte_month':\n        case 'hour':\n        case 'hrs':\n        case 'tag_mo':\n        case 'vm_hours':\n            return lookup;\n        default:\n            return undefined;\n    }\n};\n// Some currencies do not have decimals, such as JPY, and some have 3 decimals such as IQD.\n// See https://docs.adyen.com/development-resources/currency-codes\nexport const formatCurrency = (value, units, options = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Don't specify default fraction digits here, rely on react-intl instead\n    return intl.formatNumber(fValue, Object.assign({ style: 'currency', currency: units ? units.toUpperCase() : 'USD' }, options));\n};\nexport const formatCurrencyAbbreviation = (value, units = 'USD') => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Derived from https://stackoverflow.com/questions/37799955/how-can-i-format-big-numbers-with-tolocalestring\n    const abbreviationFormats = [\n        { val: 1e15, symbol: 'quadrillion' },\n        { val: 1e12, symbol: 'trillion' },\n        { val: 1e9, symbol: 'billion' },\n        { val: 1e6, symbol: 'million' },\n        { val: 1e3, symbol: 'thousand' },\n    ];\n    // Find the proper format to use\n    let format;\n    if (abbreviationFormats != null) {\n        format = abbreviationFormats.find(f => fValue >= f.val);\n    }\n    // Apply format and insert symbol next to the numeric portion of the formatted string\n    if (format != null) {\n        const { val, symbol } = format;\n        return intl.formatMessage(messages.CurrencyAbbreviations, {\n            symbol,\n            value: formatCurrency(fValue / val, units, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 0,\n            }),\n        });\n    }\n    // If no format was found, format value without abbreviation\n    return formatCurrency(value, units, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n    });\n};\n// Cost model rates may contain 0 to 10 decimals\n// https://issues.redhat.com/browse/COST-1884\nexport const formatRate = (value, units, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 10,\n}) => {\n    return formatCurrency(value, units, options);\n};\n// Some locales have a comma decimal separator (e.g., \"1.234,56\" in German is \"1,234.56\" USD).\n// This function formats a given rate using the current browser locale, but without a currency symbol.\n//\n// It does not replace the thousands separator or other special characters, so we don't hide errors from text inputs.\n// This is expected to be used in conjunction with a validator, ensuring thousands separators are not accepted.\n// For example, if the user enters \"1,234,56\" or \"1.234.56\", a validator should generate an isNaN error.\n//\n// Note: Use locale='en' to format as USD when submitting API values.\nexport const formatRaw = (value, locale = getLocale()) => {\n    // Get decimal separator used by current browser locale\n    const decimalSeparator = Number('1.1').toLocaleString(locale, {}).substring(1, 2);\n    const search = decimalSeparator === ',' ? /\\./g : /,/g;\n    return value.replace(search, decimalSeparator);\n};\n// Returns formatted units or currency with given currency-code\nexport const formatUnits = (value, units, options) => {\n    const lookup = unitsLookupKey(units);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'core_hours':\n        case 'hour':\n        case 'hrs':\n            return formatUsageHrs(fValue, options);\n        case 'gb':\n        case 'gb_hours':\n        case 'gb_mo':\n        case 'gibibyte_month':\n        case 'tag_mo':\n        case 'vm_hours':\n            return formatUsageGb(fValue, options);\n    }\n    return unknownTypeFormatter(fValue, options);\n};\nexport const formatPercentage = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\nconst formatUsageGb = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\nconst formatUsageHrs = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\nconst unknownTypeFormatter = (value, options) => {\n    return value.toLocaleString(getLocale(), options);\n};\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers, providersFetchStatus) => {\n    let result = false;\n    if (providersFetchStatus === 2 /* complete */) {\n        // providers API returns empty data array for no sources\n        result = providers !== undefined && providers.meta !== undefined && providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders, awsProvidersFetchStatus) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders, awsProvidersFetchStatus);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders, azureProvidersFetchStatus) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders, azureProvidersFetchStatus);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders, gcpsProvidersFetchStatus) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders, gcpsProvidersFetchStatus);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders, ibmProvidersFetchStatus) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders, ibmProvidersFetchStatus);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders, ocpProvidersFetchStatus) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders, ocpProvidersFetchStatus);\n};\n"],"sourceRoot":""}