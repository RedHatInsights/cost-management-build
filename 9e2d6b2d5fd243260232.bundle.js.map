{"version":3,"sources":["webpack:///./src/pages/ocpDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/utils/equal.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/details/detailsDataToolbar.styles.ts","webpack:///./src/components/details/detailsDataToolbar.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsTagView.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpDetails/exportModal.styles.ts","webpack:///./src/pages/ocpDetails/exportModal.tsx","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/pages/ocpDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpDetails/historicalChart.tsx","webpack:///./src/pages/ocpDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpDetails/historicalModal.tsx","webpack:///./src/pages/ocpDetails/noRatesState.styles.ts","webpack:///./src/pages/ocpDetails/noRatesState.tsx","webpack:///./src/pages/ocpDetails/priceListTable.tsx","webpack:///./src/pages/ocpDetails/priceListModal.tsx","webpack:///./src/pages/ocpDetails/detailsActions.tsx","webpack:///./src/pages/ocpDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.tsx","webpack:///./src/pages/ocpDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidget.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpDetails/detailsTable.tsx","webpack:///./src/pages/ocpDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpDetails/ocpDetails.styles.ts","webpack:///./src/pages/ocpDetails/ocpDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","tags","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","getNoDataForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getForDateRangeString","getSinceDateRangeString","isEqual","obj1","obj2","JSON","stringify","split","join","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","currentRequestData","fill","stroke","strokeDasharray","currentUsageData","itemsPerRow","labels","fontFamily","esm","minWidth","legendColorScale","previousRequestData","previousUsageData","currentColorScale","previousColorScale","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","usageChart_UsageChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","legendItemsPerRow","ChartLegend","colorScale","getLegendData","gutter","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","maxValue","Math","ceil","currentRequestDate","get_date_default","currentUsageDate","previousRequestDate","previousUsageDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","marginRight","toolbarContainer","backgroundColor","paddingBottom","paddingTop","paddingLeft","paddingRight","marginLeft","tagKey","defaultFilters","tag","DetailsDataToolbar","defaultState","categoryInput","filters","lodash","isCategoryDropdownOpen","isTagKeyDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","option","indexOf","getActiveFilters","query","filter_by","keys","isArray","substring","onDelete","filterType","prevState","filter","_filterType","onFilterRemoved","onCategoryClick","currentCategory","onCategorySelect","event","currentTagKey","onCategoryToggle","isOpen","getCategoryInput","categoryOption","DataToolbarFilter","categoryName","chips","deleteChip","showToolbarItem","InputGroup","TextInput","aria-label","onChange","onCategoryInputChange","placeholder","onKeyDown","evt","onCategoryInput","Button","variant","control","onClick","search_icon","prevFilters","includes","onFilterAdded","getTagKeySelect","selectOptions","getTagKeyOptions","selectOption","SelectOption","Select","selectConstants","typeahead","onClear","onTagKeyClear","onToggle","onTagKeyToggle","onSelect","onTagKeySelect","isExpanded","placeholderText","selections","selection","isPlaceholder","getTagValueSelect","tagKeyOption","getTagValueOptions","checkbox","onTagValueToggle","onTagValueSelect","checked","target","prevSelections","getExportButton","isExportDisabled","DataToolbarItem","isDisabled","handleExportClicked","external_link_square_alt_icon","onExportClicked","equal","Dropdown","position","dropdownConstants","left","toggle","DropdownToggle","filter_icon","dropdownItems","DropdownItem","val","pagination","DataToolbar","clearAllFilters","collapseListedFiltersBreakpoint","DataToolbarContent","DataToolbarToggleGroup","toggleIcon","breakpoint","DataToolbarGroup","getCategoryDropdown","breakpointMods","modifier","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpReportSummaryAlt_styles_styles","flexGrow","minHeight","tops","OcpReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","lineHeight","valueContainer","wordWrap","OcpReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","Tooltip","content","enableFlip","getCostLayout","ocpReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","skeleton","OcpReportSummaryItems","nextProps","otherIndex","findIndex","slice","getItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","costKey","responsive","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","historicalUsageChart_HistoricalUsageChart","maxCurrentLimit","maxPreviousLimit","xAxisLabel","yAxisLabel","costValue","costLabelUnit","costLabelDate","header","info","verticalAlign","infoIcon","infoTitle","fontWeight","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","queryString","ocpQuery","resolution","time_scope_units","time_scope_value","key_only","ocpReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","currentItem","isGroupByOpen","handleGroupByClick","onItemClicked","getDropDownItems","component","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","handleGroupBySelect","handleGroupByToggle","bind","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","showPopover","handlePopoverClick","show","onGroupByClicked","showContent","sizes","Popover","bodyContent","info_circle_icon","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","ocpReportSummary","_item","DetailsWidgetModal","parentGroupBy","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","secondary","primary","Form","FormGroup","fieldId","Radio","isValid","groupItem","historicalCostChart_styles_styles","historicalCostChart_HistoricalCostChart","historicalChart_styles_chartStyles","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpReportsActions","HistoricalChart","getSkeleton","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpDashboard","selectCurrentWidgets","HistoricalModal","noRatesState_styles_styles","NoRatesState","money_check_alt_icon","metric","priceListTable","rates","notAvailableText","Table","cells","rows","range_unit","value_unit","range_value","period","Header","Body","priceListModal","priceListProvider","find","p","providerUuid","uuid","priceList","store_priceList","ratesPerProvider","priceListError","priceListStatus","fetch","fetchPriceList","errorState","priceListRates","close","renderContent","detailsActions_tagKey","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isPriceListModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getPriceListModal","handlePriceListModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handlePriceListModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","freeSpace","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","hasTotal","hasLimit","trunc","limitUnits","hasRequest","requestUnits","hasUsage","hasCapacity","capacityUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","TextContent","TextList","dl","TextListItem","dt","dd","percentage","cpuDatum","getChartDatumWithCapacity","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","maxDomain","minDomain","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","getFreeSpace","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","summary","viewAllContainer","detailsWidget_reportType","detailsWidget_mapStateToProps","detailsWidget_mapDispatchToProps","DetailsWidget","isDetailsChartModalOpen","currentTab","getSummary","getViewAll","handleDetailsChartModalOpen","button","handleDetailsChartModalClose","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getDerivedCost","getTotalCost","getActions","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","abs","showPercentage","showValue","iconOverride","getSortBy","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","detailsToolbar_reportType","detailsToolbar_mapStateToProps","detailsToolbar_mapDispatchToProps","DetailsToolbar","exportText","detailsDataToolbar","ocpDetails_styles_styles","ocpDetails","paginationContainer","tableContainer","ocpDetails_reportType","ocpDetails_tagKey","ocpDetails_baseQuery","ocpDetails_mapStateToProps","ocpDetails_mapDispatchToProps","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","handleFilterAdded","handleFilterRemoved","filterValue","history","found","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","noProvidersState","loadingState"],"mappings":"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","file":"9e2d6b2d5fd243260232.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpDetails from './ocpDetails';\nexport default hot(module)(OcpDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getNoDataForDateRangeString(key = 'no_data_for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarGroup, DataToolbarItem, DataToolbarToggleGroup, } from '@patternfly/react-core/dist/esm/experimental';\nimport { ExternalLinkSquareAltIcon, FilterIcon, SearchIcon, } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsDataToolbar.styles';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nconst defaultFilters = {\n    tag: {},\n};\nexport class DetailsDataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isCategoryDropdownOpen: false,\n            isTagKeyDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy } = this.props;\n            for (const option of categoryOptions) {\n                if (groupBy === option.value ||\n                    (groupBy.indexOf(tagKey) !== -1 && option.value === 'tag')) {\n                    return option.value;\n                }\n            }\n            return undefined;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key])\n                        ? [...query.filter_by[key]]\n                        : [query.filter_by[key]];\n                    if (key.indexOf(tagKey) !== -1) {\n                        filters.tag[key.substring(tagKey.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, id) => {\n            if (type) {\n                // Workaround for https://github.com/patternfly/patternfly-react/issues/3552\n                // This prevents us from using an ID\n                const filterType = type.toLowerCase();\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType]\n                        ? `${tagKey}${filterType}`\n                        : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        this.onCategoryClick = value => {\n            this.setState({\n                currentCategory: value,\n            });\n        };\n        this.onCategorySelect = event => {\n            this.setState({\n                categoryInput: '',\n                currentTagKey: undefined,\n                isCategoryDropdownOpen: !this.state.isCategoryDropdownOpen,\n            });\n        };\n        this.onCategoryToggle = isOpen => {\n            this.setState({\n                isCategoryDropdownOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = categoryOption => {\n            const { t } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            return (React.createElement(DataToolbarFilter, { categoryName: t(`filter_by.values.${categoryOption.label}`), chips: filters[categoryOption.value], deleteChip: this.onDelete, key: categoryOption.value, showToolbarItem: currentCategory !== 'tag' && currentCategory === categoryOption.value },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { name: `${categoryOption.value}-input`, id: `${categoryOption.value}-input`, type: \"search\", \"aria-label\": t(`filter_by.${categoryOption.value}_input_aria_label`), onChange: this.onCategoryInputChange, value: categoryInput, placeholder: t(`filter_by.${categoryOption.value}_placeholder`), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.value) }),\n                    React.createElement(Button, { variant: ButtonVariant.control, \"aria-label\": t(`filter_by.${categoryOption.value}_button_aria_label`), onClick: evt => this.onCategoryInput(evt, categoryOption.value) },\n                        React.createElement(SearchIcon, null)))));\n        };\n        this.onCategoryInputChange = value => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if (event.key && event.key !== 'Enter') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign({}, prevState.filters, { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, categoryInput]\n                                : [categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded, } = this.state;\n            if (currentCategory !== 'tag') {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(Select, { variant: SelectVariant.typeahead, \"aria-label\": t('filter_by.tag_key_aria_label'), onClear: this.onTagKeyClear, onToggle: this.onTagKeyToggle, onSelect: this.onTagKeySelect, isExpanded: isTagKeySelectExpanded, placeholderText: t('filter_by.tag_key_placeholder'), selections: currentTagKey }, selectOptions));\n        };\n        this.onTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.onTagKeySelect = (event, selection, isPlaceholder) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.onTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = tagKeyOption => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, filters, isTagValueSelectExpanded, } = this.state;\n            const selectOptions = this.getTagValueOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            // Width prop is a workaround for https://github.com/patternfly/patternfly-react/issues/3574\n            return (React.createElement(DataToolbarFilter, { categoryName: tagKeyOption.value, chips: filters.tag[tagKeyOption.value], deleteChip: this.onDelete, key: tagKeyOption.value, showToolbarItem: currentCategory === 'tag' && currentTagKey === tagKeyOption.value },\n                React.createElement(Select, { variant: SelectVariant.checkbox, \"aria-label\": t('filter_by.tag_value_aria_label'), onToggle: this.onTagValueToggle, onSelect: this.onTagValueSelect, selections: filters.tag[tagKeyOption.value]\n                        ? filters.tag[tagKeyOption.value]\n                        : [], isExpanded: isTagValueSelectExpanded, placeholderText: t('filter_by.tag_value_placeholder'), width: 200 }, selectOptions)));\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey]\n                    ? prevState.filters.tag[currentTagKey]\n                    : [];\n                return {\n                    filters: Object.assign({}, prevState.filters, { tag: Object.assign({}, prevState.filters.tag, { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagKey}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueSelectExpanded: isOpen,\n            });\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isExportDisabled, t } = this.props;\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                    React.createElement(\"span\", { className: css(styles.export) }, t('export.export')),\n                    React.createElement(ExternalLinkSquareAltIcon, null))));\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (report && !isEqual(report, prevProps.report))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return prevProps.groupBy !== groupBy\n                    ? {\n                        currentCategory: this.getDefaultCategory(),\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category dropdown\n    getCategoryDropdown() {\n        const { categoryOptions, t } = this.props;\n        const { currentCategory, isCategoryDropdownOpen } = this.state;\n        const index = currentCategory ? currentCategory.indexOf('tag') : -1;\n        const label = index !== -1\n            ? t('filter_by.values.tag')\n            : t(`filter_by.values.${currentCategory}`);\n        return (React.createElement(DataToolbarItem, null,\n            React.createElement(Dropdown, { onSelect: this.onCategorySelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { onToggle: this.onCategoryToggle, style: { width: '100%' } },\n                    React.createElement(FilterIcon, null),\n                    \" \",\n                    label), isOpen: isCategoryDropdownOpen, dropdownItems: categoryOptions &&\n                    categoryOptions.map(option => (React.createElement(DropdownItem, { key: option.value, onClick: () => this.onCategoryClick(option.value) }, t(`filter_by.values.${option.label}`)))), style: { width: '100%' } })));\n    }\n    getTagKeyOptions() {\n        const { report } = this.props;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            options = data.map(tag => {\n                return {\n                    value: tag.key,\n                };\n            });\n        }\n        return options;\n    }\n    getTagValueOptions() {\n        const { report } = this.props;\n        const { currentTagKey } = this.state;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (currentTagKey === tag.key) {\n                    options = tag.values.map(val => {\n                        return {\n                            value: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, pagination } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(DataToolbar, { id: \"details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(DataToolbarContent, null,\n                    React.createElement(DataToolbarToggleGroup, { toggleIcon: React.createElement(FilterIcon, null), breakpoint: \"xl\" },\n                        React.createElement(DataToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategoryDropdown(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            categoryOptions &&\n                                categoryOptions\n                                    .filter(option => option.value !== 'tag')\n                                    .map(option => this.getCategoryInput(option))),\n                        React.createElement(DataToolbarGroup, null, this.getExportButton())),\n                    React.createElement(DataToolbarItem, { variant: \"pagination\", breakpointMods: [{ modifier: 'align-right' }] }, pagination)))));\n    }\n}\nconst DetailsDataToolbar = translate()(connect()(DetailsDataToolbarBase));\nexport { DetailsDataToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                derivedCost,\n                infrastructureCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        childName: 'previousInfrastructureCost',\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        childName: 'currentInfrastructureCost',\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", responsive: false, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                    {\n                        childName: 'previousLimit',\n                        data: previousLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(previousLimitData, limitKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousLimitData,\n                    },\n                    {\n                        childName: 'currentLimit',\n                        data: currentLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(currentLimitData, limitKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentLimitData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_md, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { parseQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            currentItem: this.props.groupBy || 'project',\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag_key', { value: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, groupBy, queryString } = this.props;\n        if (prevProps.queryString !== queryString ||\n            prevProps.groupBy !== groupBy) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag_key', { value: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Popover, Title, TitleSize, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let derivedCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            cost = formatValue(report.meta.total.derived_cost ? report.meta.total.cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            derivedCost = formatValue(report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0, report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.units\n                : 'USD');\n        }\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_details.title')),\n                Boolean(showContent) && (React.createElement(GroupBy, { groupBy: groupBy, onItemClicked: onGroupByClicked }))),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('ocp_details.total_cost_tooltip', {\n                            derivedCost,\n                            infrastructureCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) },\n                        t('ocp_details.total_cost'),\n                        React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_details.derived_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_details.derived_cost_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_details.infrastructure_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_details.infrastructure_cost_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetView } from './detailsWidgetView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.widget_modal_title', {\n                parentGroupBy,\n                name: item.label,\n                groupBy,\n            }) },\n            React.createElement(DetailsWidgetView, { groupBy: parentGroupBy, item: item })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpExportActions, ocpExportSelectors } from 'store/ocpExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpExportSelectors.selectExportError(state),\n        export: ocpExportSelectors.selectExport(state),\n        fetchStatus: ocpExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport { getCostRangeString, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        childName: 'previousInfrastructureCost',\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        childName: 'currentInfrastructureCost',\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 700\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !==\n                this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxCurrentRequest = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxPreviousLimit = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxPreviousRequest = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxPreviousLimit, maxPreviousRequest);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData, } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0\n            ? Math.max(currentRequestDate, previousRequestDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalCostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalCostChart } from 'components/charts/historicalCostChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpReportsActions from 'store/ocpReports/ocpReportsActions';\nimport * as ocpReportsSelectors from 'store/ocpReports/ocpReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const currentInfrastructureCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        const previousCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousInfrastructureCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { containerHeight: chartStyles.chartContainerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureCostData, title: t('ocp_details.historical.cost_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_details.historical.cpu_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_details.historical.memory_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '50vh',\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, TitleSize, } from '@patternfly/react-core';\nimport { MoneyCheckAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './noRatesState.styles';\nconst NoRatesStateBase = ({ t, cluster }) => {\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: MoneyCheckAltIcon }),\n            React.createElement(Title, { size: TitleSize.lg }, t('no_rates_state.title')),\n            React.createElement(EmptyStateBody, null, t('no_rates_state.desc', { cluster })))));\n};\nexport const NoRatesState = translate()(NoRatesStateBase);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport React from 'react';\nimport { formatCurrency } from 'utils/formatValue';\nfunction getUsageRangeText(metric, t) {\n    return metric.range_value[0] === null && metric.range_value[1] === null\n        ? t('ocp_details.price_list.modal.no_range_set')\n        : `${metric.range_value[0] || ' '} - ${metric.range_value[2] || ' '} ${metric.range_unit}`;\n}\nconst PriceListTable = ({ rates, t }) => {\n    const notAvailableText = t('ocp_details.price_list.modal.not_available');\n    return (React.createElement(Table, { \"aria-label\": \"price-list-table\", cells: [\n            t('ocp_details.price_list.modal.metric'),\n            t('ocp_details.price_list.modal.value'),\n            t('ocp_details.price_list.modal.applied_usage_range'),\n            t('ocp_details.price_list.modal.applied_usage_date_range'),\n        ], rows: rates.map(metric => [\n            t(`ocp_details.price_list.modal.${metric.display}`, {\n                index: metric.index + 1,\n                unit: metric.range_unit,\n            }),\n            metric.value\n                ? formatCurrency(metric.value, metric.value_unit)\n                : notAvailableText,\n            getUsageRangeText(metric, t),\n            t(`ocp_details.price_list.modal.${metric.period}`),\n        ]) },\n        React.createElement(TableHeader, null),\n        React.createElement(TableBody, null)));\n};\nexport default PriceListTable;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { priceListActions, priceListSelectors } from 'store/priceList';\nimport { providersSelectors } from 'store/providers';\nimport { styles as chartStyles } from './historicalChart.styles';\nimport { modalOverride, styles } from './historicalModal.styles';\nimport { NoRatesState } from './noRatesState';\nimport PriceListTable from './priceListTable';\nclass PriceListModalBase extends React.Component {\n    componentDidUpdate() {\n        const { fetch, isOpen, providers, priceListStatus: status, name, } = this.props;\n        if (isOpen && status !== 1 /* inProgress */) {\n            const priceListProvider = providers.data.find(p => p.name === name);\n            fetch(priceListProvider ? priceListProvider.uuid : null);\n        }\n    }\n    renderContent() {\n        const { t, providers, name, priceListStatus, priceListError, priceList, } = this.props;\n        if (priceListStatus !== 2 /* complete */) {\n            return (React.createElement(Skeleton, { className: css(chartStyles.chartSkeleton), size: SkeletonSize.md }));\n        }\n        if (priceListError !== null) {\n            return React.createElement(ErrorState, { error: priceListError });\n        }\n        const priceListProvider = providers.data.find(p => p.name === name);\n        const priceListRates = priceListProvider && priceList[priceListProvider.uuid];\n        return priceListRates ? (React.createElement(PriceListTable, { t: t, rates: priceListRates })) : (React.createElement(NoRatesState, { cluster: name.toString() }));\n    }\n    render() {\n        const { t, isOpen, close, name } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: () => close(false), title: t('ocp_details.price_list.modal.title', { name }) }, this.renderContent()));\n    }\n}\nconst PriceListModal = connect(createMapStateToProps((state, props) => {\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, 'type=OCP');\n    const priceListProvider = providers.data.find(p => p.name === props.name);\n    const providerUuid = priceListProvider ? priceListProvider.uuid : null;\n    return {\n        priceList: priceListSelectors.ratesPerProvider(state, providerUuid),\n        priceListError: priceListSelectors.error(state, providerUuid),\n        priceListStatus: priceListSelectors.status(state, providerUuid),\n        providers,\n    };\n}), {\n    fetch: priceListActions.fetchPriceList,\n})(translate()(PriceListModalBase));\nexport default PriceListModal;\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nimport PriceListModal from './priceListModal';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isPriceListModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getPriceListModal = () => {\n            const { item: { label }, } = this.props;\n            return (React.createElement(PriceListModal, { name: label, isOpen: this.state.isPriceListModalOpen, close: this.handlePriceListModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handlePriceListModalClose = (isOpen) => {\n            this.setState({ isPriceListModalOpen: isOpen });\n        };\n        this.handlePriceListModalOpen = () => {\n            this.setState({ isPriceListModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handlePriceListModalClose = this.handlePriceListModalClose.bind(this);\n        this.handlePriceListModalOpen = this.handlePriceListModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: groupBy.includes(tagKey), onClick: this.handlePriceListModalOpen }, t('ocp_details.actions.price_list')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal(),\n            this.getPriceListModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    freeSpace: {\n        marginBottom: global_spacer_lg.value,\n        marginLeft: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { TextContent, TextList, TextListItem, TextListItemVariants, TextListVariants, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n        ];\n        return datum;\n    }\n    getChartDatumWithCapacity(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const capacityUnits = t(`units.${unitLookupKey(hasCapacity ? report.meta.total.capacity.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                value: Math.trunc(capacity),\n            },\n        ];\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace(report, labelKey) {\n        const { t } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(TextContent, { className: css(styles.freeSpace) },\n            React.createElement(TextList, { component: TextListVariants.dl },\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_details.bullet.${labelKey}_usage_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_details.bullet.${labelKey}_usage_unused`, {\n                    percentage: formatValue(unusedUsageCapacityPercentage, usageUnits),\n                    value: unusedUsageCapacity,\n                    units: usageUnits,\n                })),\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_details.bullet.${labelKey}_requests_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_details.bullet.${labelKey}_requests_unused`, {\n                    percentage: formatValue(unusedRequestCapacityPercentage, requestUnits),\n                    value: unusedRequestCapacity,\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, groupBy, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = groupBy === 'cluster'\n            ? this.getChartDatumWithCapacity(cpuReport, 'cpu')\n            : this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = groupBy === 'cluster'\n            ? this.getChartDatumWithCapacity(memoryReport, 'memory')\n            : this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                        ? [\n                            {\n                                tooltip: cpuDatum.limit.tooltip,\n                                y: cpuDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value\n                        ? [{ name: cpuDatum.limit.legend }]\n                        : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, maxDomain: !cpuReport ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: cpuDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: cpuDatum.ranges[0].tooltip,\n                                y: cpuDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                        ? [{ name: cpuDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(cpuReport, 'cpu'))))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                        ? [\n                            {\n                                tooltip: memoryDatum.limit.tooltip,\n                                y: memoryDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                        ? [{ name: memoryDatum.limit.legend }]\n                        : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, maxDomain: !memoryReport ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: memoryDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: memoryDatum.ranges[0].tooltip,\n                                y: memoryDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                        ? [{ name: memoryDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(memoryReport, 'memory')))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    summary: {\n        paddingTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpReportItems } from 'utils/getComputedOcpReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isDetailsChartModalOpen: false,\n        };\n        this.getItems = (currentTab) => {\n            const { report } = this.props;\n            const computedItems = getComputedOcpReportItems({\n                report,\n                idKey: currentTab,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportFetchStatus, t } = this.props;\n            return (React.createElement(React.Fragment, null,\n                t('group_by.details', { groupBy: 'project' }),\n                React.createElement(\"div\", { className: css(styles.summary) },\n                    React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(OcpReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label.toString(), totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost })))),\n                    this.getViewAll())));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, t } = this.props;\n            const { isDetailsChartModalOpen } = this.state;\n            const currentTab = 'project';\n            const computedItems = this.getItems(currentTab);\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleDetailsChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_details.view_all', { value: currentTab })),\n                    React.createElement(DetailsWidgetModal, { groupBy: currentTab, isOpen: isDetailsChartModalOpen, item: item, onClose: this.handleDetailsChartModalClose, parentGroupBy: groupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleDetailsChartModalClose = (isOpen) => {\n            this.setState({ isDetailsChartModalOpen: isOpen });\n        };\n        this.handleDetailsChartModalOpen = event => {\n            this.setState({ isDetailsChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { reportFetchStatus } = this.props;\n        return (React.createElement(\"div\", null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (this.getSummary())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        Boolean(groupBy === 'cluster') && (React.createElement(DetailsWidget, { groupBy: groupBy, item: item })))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst DetailsTableItem = translate()(connect()(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString, getNoDataForDateRangeString, } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'infrastructure_cost',\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'derived_cost',\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const derivedCost = this.getDerivedCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, InfrastructureCost) },\n                        { title: React.createElement(\"div\", null, derivedCost) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getDerivedCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.derivedCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.derivedCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructureCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.infrastructureCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.deltaPercent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/ocpQuery';\nimport { DetailsDataToolbar } from 'components/details/detailsDataToolbar';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { isEqual } from 'utils/equal';\nconst categoryOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n    { label: 'tag', value: 'tag' },\n];\nconst reportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { fetchReport, query, queryString } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { exportText, groupBy, isExportDisabled, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, report, } = this.props;\n        return (React.createElement(DetailsDataToolbar, { categoryOptions: categoryOptions, exportText: exportText, groupBy: groupBy, isExportDisabled: isExportDisabled, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, report: report }));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsToolbar = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase));\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_details.export_link'), groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[filterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[filterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[filterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[filterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[filterType] = [\n                        newQuery.filter_by[filterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            if (filterType === null) {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (filterValue === null) {\n                newQuery.filter_by[filterType] = undefined; // Clear all values\n            }\n            else if (Array.isArray(newQuery.filter_by[filterType])) {\n                const index = newQuery.filter_by[filterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[filterType] = [\n                        ...query.filter_by[filterType].slice(0, index),\n                        ...query.filter_by[filterType].slice(index + 1),\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = undefined;\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpDetails) },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n"],"sourceRoot":""}