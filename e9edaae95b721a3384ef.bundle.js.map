{"version":3,"file":"e9edaae95b721a3384ef.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/routes/components/currency/currency.styles.ts","webpack://koku-ui/./src/routes/components/currency/currency.tsx","webpack://koku-ui/./src/routes/state/noData/noDataState.tsx","webpack://koku-ui/./src/routes/state/noData/noData.tsx","webpack://koku-ui/./src/routes/components/icons/costIcon/costIcon.tsx","webpack://koku-ui/./src/routes/components/icons/costIcon/index.ts","webpack://koku-ui/./src/routes/state/noProviders/noProvidersState.styles.ts","webpack://koku-ui/./src/routes/state/noProviders/noProvidersState.tsx","webpack://koku-ui/./src/routes/state/noProviders/index.ts","webpack://koku-ui/./src/routes/state/noProviders/noProviders.tsx","webpack://koku-ui/./src/routes/views/components/charts/chartTheme/theme-koku.ts","webpack://koku-ui/./src/routes/views/components/charts/chartTheme/index.ts","webpack://koku-ui/./src/routes/views/components/charts/chartTheme/theme-utils.ts","webpack://koku-ui/./src/utils/computedForecast/getComputedForecastItems.ts","webpack://koku-ui/./src/routes/views/components/charts/common/chartDatum.ts","webpack://koku-ui/./src/routes/views/components/charts/common/chartUtils.ts","webpack://koku-ui/./src/routes/views/components/costType/costType.styles.ts","webpack://koku-ui/./src/routes/views/components/costType/costType.tsx","webpack://koku-ui/./src/routes/views/utils/providers.ts","webpack://koku-ui/./src/utils/computedReport/getComputedReportItems.ts","webpack://koku-ui/./src/utils/computedReport/getItemLabel.ts","webpack://koku-ui/./src/utils/dateRange.ts","webpack://koku-ui/./src/utils/skeleton.ts","webpack://koku-ui/./src/utils/sort.ts","webpack://koku-ui/./src/utils/userAccess.ts"],"sourcesContent":["import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    currencySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    currencyLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './currency.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getCurrency, invalidateSession, restoreCurrency, setCurrency } from 'utils/localStorage';\nimport { styles } from './currency.styles';\nexport const currencyOptions = [\n    { label: messages.currencyOptions, value: 'AUD' },\n    { label: messages.currencyOptions, value: 'CAD' },\n    { label: messages.currencyOptions, value: 'CHF' },\n    { label: messages.currencyOptions, value: 'CNY' },\n    { label: messages.currencyOptions, value: 'DKK' },\n    { label: messages.currencyOptions, value: 'EUR' },\n    { label: messages.currencyOptions, value: 'GBP' },\n    { label: messages.currencyOptions, value: 'HKD' },\n    { label: messages.currencyOptions, value: 'JPY' },\n    { label: messages.currencyOptions, value: 'NOK' },\n    { label: messages.currencyOptions, value: 'NZD' },\n    { label: messages.currencyOptions, value: 'SEK' },\n    { label: messages.currencyOptions, value: 'SGD' },\n    { label: messages.currencyOptions, value: 'USD' },\n    { label: messages.currencyOptions, value: 'ZAR' },\n];\nclass CurrencyBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            // Restore from query param if available\n            restoreCurrency();\n            const currency = getCurrency(); // Get currency from local storage\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currency);\n            return (React.createElement(Select, { className: \"currencyOverride\", id: \"currencySelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            currencyOptions.map(option => {\n                options.push({\n                    toString: () => intl.formatMessage(option.label, { units: option.value }),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCurrency(selection.value); // Set currency units via local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.currencySelector },\n            React.createElement(Title, { headingLevel: \"h2\", size: \"md\", style: styles.currencyLabel }, intl.formatMessage(messages.currency)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CurrencyConnect = connect(mapStateToProps, mapDispatchToProps)(CurrencyBase);\nconst Currency = injectIntl(CurrencyConnect);\nexport { Currency };\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { FileInvoiceDollarIcon } from '@patternfly/react-icons/dist/esm/icons/file-invoice-dollar-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router-dom';\nclass NoDataStateBase extends React.Component {\n    render() {\n        const { intl, showReload = true } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: FileInvoiceDollarIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, intl.formatMessage(messages.noDataStateTitle)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(messages.noDataStateDesc)),\n            showReload && (React.createElement(Button, { variant: \"primary\", onClick: () => window.location.reload() }, intl.formatMessage(messages.noDataStateRefresh)))));\n    }\n}\nconst NoDataState = injectIntl(withRouter(NoDataStateBase));\nexport { NoDataState };\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { NoDataState } from './noDataState';\nconst NoData = ({ showReload, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(NoDataState, { showReload: showReload }))));\n};\nexport default withRouter(NoData);\n","import './costIcon.scss';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst icon = require('./Cost-icon.svg');\nconst CostIcon = ({ className, intl }) => {\n    return (React.createElement(\"img\", { className: `cost-icon ${className}`, src: icon, alt: intl.formatMessage(messages.costManagement), \"aria-hidden\": \"true\" }));\n};\nexport default injectIntl(CostIcon);\n","import CostIcon from './costIcon';\nexport default CostIcon;\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    iconSpacer: {\n        marginLeft: global_spacer_xs.value,\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router-dom';\nimport CostIcon from 'routes/components/icons/costIcon';\nimport { getReleasePath } from 'utils/paths';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDocLink = (textKey, urlKey) => {\n            const { intl } = this.props;\n            return (React.createElement(\"a\", { href: intl.formatMessage(urlKey), rel: \"noreferrer\", target: \"_blank\" },\n                intl.formatMessage(textKey),\n                React.createElement(\"span\", { style: styles.iconSpacer },\n                    React.createElement(ExternalLinkAltIcon, null))));\n        };\n        this.getRouteToSources = () => {\n            const release = getReleasePath();\n            return `${release}/settings/sources`;\n        };\n    }\n    render() {\n        const { intl, providerType } = this.props;\n        let descKey = messages.noProvidersStateOverviewDesc;\n        let titleKey = messages.noProvidersStateOverviewTitle;\n        let docUrlKey;\n        let icon;\n        let textKey;\n        switch (providerType) {\n            case \"aws\" /* ProviderType.aws */:\n                descKey = messages.noProvidersStateAwsDesc;\n                titleKey = messages.noProvidersStateAwsTitle;\n                break;\n            case \"azure\" /* ProviderType.azure */:\n                descKey = messages.noProvidersStateAzureDesc;\n                titleKey = messages.noProvidersStateAzureTitle;\n                break;\n            case \"gcp\" /* ProviderType.gcp */:\n                descKey = messages.noProvidersStateGcpDesc;\n                titleKey = messages.noProvidersStateGcpTitle;\n                break;\n            case \"ibm\" /* ProviderType.ibm */:\n                descKey = messages.noProvidersStateIbmDesc;\n                titleKey = messages.noProvidersStateIbmTitle;\n                break;\n            case \"ocp\" /* ProviderType.ocp */:\n                descKey = messages.noProvidersStateOcpDesc;\n                docUrlKey = messages.docsAddOcpSources;\n                textKey = messages.noProvidersStateOcpAddSources;\n                titleKey = messages.noProvidersStateOcpTitle;\n                break;\n            default:\n                icon = CostIcon;\n        }\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: icon ? icon : PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h1\", size: \"lg\" }, intl.formatMessage(titleKey)),\n            React.createElement(EmptyStateBody, null, intl.formatMessage(descKey)),\n            docUrlKey && textKey ? (React.createElement(\"div\", { style: styles.viewSources }, this.getDocLink(textKey, docUrlKey))) : (React.createElement(Button, { variant: \"primary\", component: \"a\", href: this.getRouteToSources() }, intl.formatMessage(messages.noProvidersStateGetStarted)))));\n    }\n}\nconst NoProvidersState = injectIntl(withRouter(NoProvidersStateBase));\nexport { NoProvidersState };\n","import NoProviders from './noProviders';\nexport default NoProviders;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { NoProvidersState } from './noProvidersState';\nconst NoProviders = ({ providerType, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(NoProvidersState, { providerType: providerType }))));\n};\nexport default withRouter(NoProviders);\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, mergeTheme } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => mergeTheme(ChartThemeColor.default, ChartTheme);\nexport default getTheme;\n","import { sort } from 'utils/sort';\nexport function getComputedForecastItems({ forecast, sortDirection = 0 /* SortDirection.asc */, sortKey = 'date', }) {\n    return sort(getUnsortedComputedForecastItems({\n        forecast,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nfunction getCostData(val, key, item) {\n    return {\n        confidence_max: {\n            value: item\n                ? item[key].confidence_max.value\n                : 0 + val[key] && val[key].confidence_max\n                    ? val[key].confidence_max.value\n                    : 0,\n            units: val[key] && val[key].confidence_max ? val[key].confidence_max.units : 'USD',\n        },\n        confidence_min: {\n            value: item\n                ? item[key].confidence_min.value\n                : 0 + val[key] && val[key].confidence_min\n                    ? val[key].confidence_min.value\n                    : 0,\n            units: val[key] && val[key].confidence_min ? val[key].confidence_min.units : 'USD',\n        },\n        pvalues: {\n            value: val[key] && val[key].pvalues ? Number(val[key].pvalues.value) : 0,\n            units: val[key] && val[key].pvalues ? val[key].pvalues.units : null,\n        },\n        rsquared: {\n            value: val[key] && val[key].rsquared ? Number(val[key].rsquared.value) : 0,\n            units: val[key] && val[key].rsquared ? val[key].rsquared.units : null,\n        },\n        total: {\n            value: item ? item[key].total.value : 0 + val[key] && val[key].total ? val[key].total.value : 0,\n            units: val[key] && val[key].total ? val[key].total.units : 'USD',\n        },\n    };\n}\nexport function getUnsortedComputedForecastItems({ forecast, }) {\n    if (!forecast) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint && dataPoint.values) {\n            dataPoint.values.forEach((val) => {\n                const date = val.date;\n                const item = itemMap.get(date);\n                if (item) {\n                    // This code block is typically entered with filter[resolution]=monthly\n                    itemMap.set(date, Object.assign(Object.assign({}, item), { date, cost: getCostData(val, 'cost', item), infrastructure: getCostData(val, 'infrastructure', item), supplementary: getCostData(val, 'supplementary', item) }));\n                }\n                else {\n                    // This code block is typically entered with filter[resolution]=daily\n                    itemMap.set(date, {\n                        date,\n                        cost: getCostData(val, 'cost'),\n                        infrastructure: getCostData(val, 'infrastructure'),\n                        supplementary: getCostData(val, 'supplementary'),\n                    });\n                }\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (forecast && forecast.data) {\n        forecast.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\n","import { intl } from 'components/i18n';\nimport { endOfMonth, format, getDate, getYear, startOfMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getComputedForecastItems } from 'utils/computedForecast/getComputedForecastItems';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency, unitsLookupKey } from 'utils/format';\nexport function transformForecast(forecast, datumType, forecastItem = 'cost', forecastItemValue = 'total') {\n    if (!forecast) {\n        return [];\n    }\n    const items = {\n        forecast,\n        sortKey: 'date',\n        sortDirection: 1 /* SortDirection.desc */,\n    };\n    const computedItems = getComputedForecastItems(items);\n    let chartDatums;\n    if (datumType === 0 /* DatumType.cumulative */) {\n        chartDatums = computedItems.reduce((acc, d) => {\n            const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n            return [...acc, createForecastDatum(prevValue + d[forecastItem][forecastItemValue].value, d)];\n        }, []);\n    }\n    else {\n        chartDatums = computedItems.map(i => createForecastDatum(i[forecastItem][forecastItemValue].value, i));\n    }\n    return padChartDatums(chartDatums, datumType);\n}\nexport function transformForecastCone(forecast, datumType, forecastItem = 'cost', forecastItemValue = 'total') {\n    if (!forecast) {\n        return [];\n    }\n    const items = {\n        forecast,\n        sortKey: 'date',\n        sortDirection: 1 /* SortDirection.desc */,\n    };\n    const computedItems = getComputedForecastItems(items);\n    let chartDatums;\n    if (datumType === 0 /* DatumType.cumulative */) {\n        chartDatums = computedItems.reduce((acc, d) => {\n            const prevMaxValue = acc.length ? acc[acc.length - 1].y : d[forecastItem][forecastItemValue].value;\n            const prevMinValue = acc.length ? acc[acc.length - 1].y0 : d[forecastItem][forecastItemValue].value;\n            return [\n                ...acc,\n                createForecastConeDatum(prevMaxValue + d[forecastItem].confidence_max.value, prevMinValue + d[forecastItem].confidence_min.value, d),\n            ];\n        }, []);\n    }\n    else {\n        chartDatums = computedItems.map(i => createForecastConeDatum(i[forecastItem].confidence_max.value, i[forecastItem].confidence_min.value, i));\n    }\n    return padChartDatums(chartDatums, datumType);\n}\nexport function transformReport(report, datumType, idKey = 'date', reportItem = 'cost', reportItemValue = 'total' // useful for infrastructure.usage values\n) {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        idKey,\n        report,\n        sortKey: 'id',\n        sortDirection: 1 /* SortDirection.desc */,\n    };\n    const computedItems = getComputedReportItems(items);\n    let chartDatums;\n    if (datumType === 0 /* DatumType.cumulative */) {\n        chartDatums = computedItems.reduce((acc, d) => {\n            const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n            const val = d[reportItem][reportItemValue] ? d[reportItem][reportItemValue].value : d[reportItem].value;\n            return [...acc, createReportDatum(prevValue + val, d, idKey, reportItem, reportItemValue)];\n        }, []);\n    }\n    else {\n        chartDatums = computedItems.map(i => {\n            const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n            return createReportDatum(val, i, idKey, reportItem, reportItemValue);\n        });\n    }\n    return idKey === 'date' ? padChartDatums(chartDatums, datumType) : chartDatums;\n}\nexport function createForecastDatum(value, computedItem, forecastItem = 'cost', forecastItemValue = 'total') {\n    const xVal = getDate(new Date(computedItem.date + 'T00:00:00'));\n    const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n    return {\n        x: xVal,\n        y: value === null ? null : yVal,\n        key: computedItem.date,\n        units: computedItem[forecastItem] && computedItem[forecastItem][forecastItemValue]\n            ? computedItem[forecastItem][forecastItemValue].units\n            : undefined,\n    };\n}\nexport function createForecastConeDatum(maxValue, minValue, computedItem, forecastItem = 'cost', forecastItemValue = 'total') {\n    const xVal = getDate(new Date(computedItem.date + 'T00:00:00'));\n    const yVal = isFloat(maxValue) ? parseFloat(maxValue.toFixed(2)) : isInt(maxValue) ? maxValue : 0;\n    const y0Val = isFloat(minValue) ? parseFloat(minValue.toFixed(2)) : isInt(minValue) ? minValue : 0;\n    return {\n        x: xVal,\n        y: maxValue === null ? null : yVal,\n        y0: minValue === null ? null : y0Val,\n        key: computedItem.date,\n        units: computedItem[forecastItem] && computedItem[forecastItem][forecastItemValue]\n            ? computedItem[forecastItem][forecastItemValue].units\n            : undefined,\n    };\n}\nexport function createReportDatum(value, computedItem, idKey = 'date', reportItem = 'cost', reportItemValue = 'total' // useful for infrastructure.usage values\n) {\n    const xVal = idKey === 'date' ? getDate(new Date(computedItem.id + 'T00:00:00')) : computedItem.label;\n    const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n    return {\n        x: xVal,\n        y: value === null ? null : yVal,\n        key: computedItem.id,\n        name: computedItem.label ? computedItem.label : computedItem.id,\n        units: computedItem[reportItem]\n            ? computedItem[reportItem][reportItemValue]\n                ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                : computedItem[reportItem].units // capacity, limit, request, usage\n            : undefined,\n    };\n}\n// Fill in missing data with previous value to represent cumulative daily cost\nexport function fillChartDatums(datums, datumType) {\n    const result = [];\n    if (!datums || datums.length === 0) {\n        return result;\n    }\n    const firstDate = new Date(datums[0].key + 'T00:00:00');\n    const lastDate = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    const padDate = startOfMonth(firstDate);\n    let prevChartDatum;\n    for (let i = padDate.getDate(); i <= endOfMonth(lastDate).getDate(); i++) {\n        padDate.setDate(i);\n        const id = format(padDate, 'yyyy-MM-dd');\n        const chartDatum = datums.find(val => val.key === id);\n        if (chartDatum) {\n            result.push(chartDatum);\n        }\n        else if (prevChartDatum) {\n            result.push(Object.assign(Object.assign({}, prevChartDatum), { key: id, x: getDate(new Date(id + 'T00:00:00')) }));\n        }\n        if (chartDatum) {\n            // Note: We want to identify missing data, but charts won't extrapolate (connect data points) if we return null here\n            // for missing daily values. For example, if there is only data for the first and last day of the month, charts would\n            // typically draw a line between two points by default. However, showing \"no data\" is more obvious there was a problem.\n            if (datumType === 0 /* DatumType.cumulative */) {\n                prevChartDatum = chartDatum;\n            }\n            else {\n                prevChartDatum = {\n                    key: id,\n                    x: getDate(new Date(id + 'T00:00:00')),\n                    y: null,\n                };\n            }\n        }\n    }\n    return result;\n}\n// This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n// data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n// message in the tooltip, which helps distinguish between zero values and when there is no data available.\nexport function padChartDatums(datums, datumType) {\n    const result = [];\n    if (!datums || datums.length === 0) {\n        return result;\n    }\n    const firstDate = new Date(datums[0].key + 'T00:00:00');\n    const lastDate = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    // Pad start for missing data\n    let padDate = startOfMonth(firstDate);\n    for (let i = padDate.getDate(); i < firstDate.getDate(); i++) {\n        padDate.setDate(i);\n        const id = format(padDate, 'yyyy-MM-dd');\n        result.push(createReportDatum(null, { id }, 'date', null));\n    }\n    // Fill middle with existing data\n    result.push(...datums);\n    // Pad end for missing data\n    padDate = new Date(lastDate);\n    for (let i = padDate.getDate() + 1; i <= endOfMonth(lastDate).getDate(); i++) {\n        padDate.setDate(i);\n        const id = format(padDate, 'yyyy-MM-dd');\n        result.push(createReportDatum(null, { id }, 'date', null));\n    }\n    return fillChartDatums(result, datumType);\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setDate(1); // Required to obtain correct month\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    // Find the first populated (non-null) day\n    let firstDay = 0;\n    for (let i = firstDay; i < datums.length; i++) {\n        if (datums[i].y && datums[i].y !== null) {\n            firstDay = i;\n            break;\n        }\n    }\n    // Find the last populated (non-null) day\n    let lastDay = datums.length - 1;\n    for (let i = lastDay; i >= 0; i--) {\n        if (datums[i].y && datums[i].y !== null) {\n            lastDay = i;\n            break;\n        }\n    }\n    const start = new Date(datums[firstDay].key + 'T00:00:00');\n    const end = new Date(datums[lastDay].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\n// TODO: remove? this doesn't appear to be used anywhere\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const count = getDate(end);\n    const endDate = format(end, 'dd');\n    const month = Number(format(start, 'M')) - 1; // Required to obtain correct month message\n    const startDate = format(start, 'dd');\n    const year = getYear(end);\n    return intl.formatMessage(messages.chartDateRange, { count, startDate, endDate, month, year });\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getMaxMinValues(datums) {\n    let max = -1;\n    let min = -1;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            const maxY = datum.y0 !== undefined ? Math.max(datum.y, datum.y0) : datum.y;\n            const minY = datum.y0 !== undefined ? Math.min(datum.y, datum.y0) : datum.y;\n            if (maxY > max) {\n                max = maxY;\n            }\n            if ((min === -1 || minY < min) && minY !== null) {\n                min = minY;\n            }\n        });\n    }\n    return { max, min };\n}\nexport function getTooltipContent(formatter) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitsLookupKey(unit);\n        if (lookup) {\n            return intl.formatMessage(messages.unitTooltips, {\n                units: lookup,\n                value: formatter(value, unit, options),\n            });\n        }\n        return formatCurrency(value, unit, options);\n    };\n}\nexport function getCostRangeString(datums, key = messages.chartCostLegendLabel, firstOfMonth = false, lastOfMonth = false, offset = 0, noDataKey = messages.chartNoData) {\n    if (!(datums && datums.length)) {\n        return intl.formatMessage(noDataKey);\n    }\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const month = Number(format(start, 'M')) - 1; // Required to obtain correct month message\n    const year = getYear(end);\n    return intl.formatMessage(key, {\n        count: getDate(end),\n        startDate: format(start, 'd'),\n        endDate: format(end, 'd'),\n        month,\n        year,\n    });\n}\nexport function getUsageRangeString(datums, key = messages.chartUsageLegendLabel, firstOfMonth = false, lastOfMonth = false, offset = 0, noDataKey = messages.chartNoData) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset, noDataKey);\n}\n// Returns true if non negative integer\nexport function isInt(n) {\n    const result = Number(n) === n && n % 1 === 0;\n    return result && n >= 0;\n}\n// Returns true if non negative float\nexport function isFloat(n) {\n    const result = Number(n) === n && n % 1 !== 0;\n    return result && n >= 0;\n}\n","import { getInteractiveLegendItemStyles } from '@patternfly/react-charts';\nimport { intl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport { getMaxMinValues, getTooltipContent } from './chartDatum';\n// Returns groups of chart names associated with each data series\nexport const getChartNames = (series) => {\n    const result = [];\n    if (series) {\n        series.map(serie => {\n            // Each group of chart names are hidden / shown together\n            result.push(serie.childName);\n        });\n    }\n    return result;\n};\nexport const getDomain = (series, hiddenSeries) => {\n    const domain = { x: [1, 31] };\n    let maxValue = -1;\n    let minValue = -1;\n    if (series) {\n        series.forEach((s, index) => {\n            if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                const { max, min } = getMaxMinValues(s.data);\n                maxValue = Math.max(maxValue, max);\n                if (minValue === -1) {\n                    minValue = min;\n                }\n                else {\n                    minValue = Math.min(minValue, min);\n                }\n            }\n        });\n    }\n    const threshold = maxValue * 0.1;\n    const max = maxValue > 0 ? Math.ceil(maxValue + threshold) : 0;\n    const _min = minValue > 0 ? Math.max(0, Math.floor(minValue - threshold)) : 0;\n    const min = _min > 0 ? _min : 0;\n    if (max > 0) {\n        domain.y = [min, max];\n    }\n    return domain;\n};\n// Returns legend data styled per hiddenSeries\nexport const getLegendData = (series, hiddenSeries, tooltip = false) => {\n    if (!series) {\n        return undefined;\n    }\n    const result = series.map((s, index) => {\n        const data = Object.assign(Object.assign(Object.assign({ childName: s.childName }, s.legendItem), (tooltip && { name: s.legendItem.tooltip })), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n        return data;\n    });\n    return result;\n};\n// Note: Forecast is expected to use both datum.y and datum.y0\nexport const getTooltipLabel = (datum, formatter, formatOptions) => {\n    const tooltipFormatter = getTooltipContent(formatter);\n    const dy = datum.y !== undefined && datum.y !== null ? tooltipFormatter(datum.y, datum.units, formatOptions) : undefined;\n    const dy0 = datum.y0 !== undefined && datum.y0 !== null ? tooltipFormatter(datum.y0, datum.units, formatOptions) : undefined;\n    if (dy !== undefined && dy0 !== undefined) {\n        return intl.formatMessage(messages.chartCostForecastConeTooltip, { value0: dy0, value1: dy });\n    }\n    return dy !== undefined ? dy : intl.formatMessage(messages.chartNoData);\n};\nexport const getResizeObserver = (containerRef, handleResize) => {\n    const containerElement = containerRef;\n    const { ResizeObserver } = window;\n    let _navToggle;\n    let _resizeObserver;\n    if (containerElement && ResizeObserver) {\n        const resizeObserver = new ResizeObserver(entries => {\n            // We wrap it in requestAnimationFrame to avoid this error - ResizeObserver loop limit exceeded\n            window.requestAnimationFrame(() => {\n                if (!Array.isArray(entries) || !entries.length) {\n                    return;\n                }\n                handleResize();\n            });\n        });\n        resizeObserver.observe(containerElement);\n        _resizeObserver = () => resizeObserver.unobserve(containerElement);\n    }\n    else {\n        handleResize();\n        window.addEventListener('resize', handleResize);\n        _resizeObserver = () => window.removeEventListener('resize', handleResize);\n        _navToggle = insights.chrome.on('NAVIGATION_TOGGLE', setTimeout(handleResize, 500));\n    }\n    return () => {\n        if (_resizeObserver) {\n            _resizeObserver();\n        }\n        if (_navToggle) {\n            _navToggle();\n        }\n    };\n};\nexport const initHiddenSeries = (series, hiddenSeries, index) => {\n    const result = new Set(hiddenSeries);\n    if (!result.delete(index)) {\n        result.add(index);\n    }\n    return result;\n};\n// Returns true if at least one data series is available\nexport const isDataAvailable = (series, hiddenSeries) => {\n    const unavailable = []; // API data may not be available (e.g., on 1st of month)\n    if (series) {\n        series.forEach((s, index) => {\n            if (isSeriesHidden(hiddenSeries, index) || (s.data && s.data.length === 0)) {\n                unavailable.push(index);\n            }\n        });\n    }\n    return unavailable.length !== (series ? series.length : 0);\n};\n// Returns true if data series is hidden\nexport const isDataHidden = (series, hiddenSeries, data) => {\n    if (data && data.length) {\n        for (let keys = hiddenSeries.keys(), key; !(key = keys.next()).done;) {\n            let dataChildName;\n            let serieChildName;\n            for (const item of data) {\n                if (item.childName) {\n                    dataChildName = item.childName;\n                    break;\n                }\n            }\n            for (const item of series[key.value].data) {\n                if (item.childName) {\n                    serieChildName = item.childName;\n                    break;\n                }\n            }\n            if (serieChildName && dataChildName && serieChildName === dataChildName) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n// Returns true if data series is hidden\nexport const isSeriesHidden = (hiddenSeries, index) => {\n    return hiddenSeries.has(index);\n};\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    costSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import './costType.scss';\nimport { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { invalidateSession, restoreCostType, setCostType } from 'utils/localStorage';\nimport { styles } from './costType.styles';\nconst costTypeOptions = [\n    { desc: messages.costTypeAmortizedDesc, label: messages.costTypeAmortized, value: \"savingsplan_effective_cost\" /* CostTypes.amortized */ },\n    { desc: messages.costTypeBlendedDesc, label: messages.costTypeBlended, value: \"blended_cost\" /* CostTypes.blended */ },\n    { desc: messages.costTypeUnblendedDesc, label: messages.costTypeUnblended, value: \"unblended_cost\" /* CostTypes.unblended */ },\n];\nclass CostTypeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { costType, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            // Restore from query param if available\n            restoreCostType();\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === costType);\n            return (React.createElement(Select, { className: \"selectOverride\", id: \"costTypeSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { description: option.desc, key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl } = this.props;\n            const options = [];\n            costTypeOptions.map(option => {\n                options.push({\n                    desc: intl.formatMessage(option.desc),\n                    toString: () => intl.formatMessage(option.label),\n                    value: option.value,\n                });\n            });\n            return options;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelect } = this.props;\n            setCostType(selection.value); // Set cost type in local storage\n            this.setState({\n                isSelectOpen: false,\n            }, () => {\n                if (onSelect) {\n                    onSelect(selection.value);\n                }\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        // Clear local storage value if current session is not valid\n        invalidateSession();\n        return (React.createElement(\"div\", { style: styles.costSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.costLabel }, intl.formatMessage(messages.costTypeLabel)),\n            this.getSelect()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst CostTypeConnect = connect(mapStateToProps, mapDispatchToProps)(CostTypeBase);\nconst CostType = injectIntl(CostTypeConnect);\nexport { CostType };\n","// Returns the OCP provider matching the given infrastructure uuid\nconst _getOcpProvider = (ocpProviders, uuid) => {\n    let result;\n    if (ocpProviders && ocpProviders.data) {\n        for (const provider of ocpProviders.data) {\n            if (provider.infrastructure && provider.infrastructure.uuid === uuid) {\n                result = provider;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Returns new Provider matching the given provider type\n//\n// See https://issues.redhat.com/browse/COST-2202\nexport const filterProviders = (providers, sourceType) => {\n    if (!providers) {\n        return providers;\n    }\n    const data = providers.data.filter(provider => provider.source_type.toLowerCase() === sourceType);\n    const meta = Object.assign(Object.assign({}, providers.meta), { count: data.length });\n    return Object.assign(Object.assign({}, providers), { meta,\n        data });\n};\n// Ensure at least one source provider has data available\nconst _hasData = (providers, datumType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            if (provider[datumType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available\nconst _hasCloudData = (providers, ocpProviders, dataType) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift and has OCP data\n            if (ocpProvider && ocpProvider[dataType]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider\nconst _hasCloudProvider = (providers, ocpProviders) => {\n    let result = false;\n    if (providers && providers.data) {\n        for (const provider of providers.data) {\n            const ocpProvider = _getOcpProvider(ocpProviders, provider.uuid);\n            // Ensure AWS provider is filtered by OpenShift\n            if (ocpProvider) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n};\n// Ensure at least one cloud source provider has data available for the current month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudCurrentMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, \"current_month_data\" /* DataType.currentMonthData */);\n};\n// Ensure at least one cloud source provider has data available (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, \"has_data\" /* DataType.hasData */);\n};\n// Ensure at least one cloud source provider has data available for the previous month (e.g., \"AWS filtered by OpenShift\")\nexport const hasCloudPreviousMonthData = (providers, ocpProviders) => {\n    return _hasCloudData(providers, ocpProviders, \"previous_month_data\" /* DataType.previousMonthData */);\n};\n// Ensure at least one cloud source provider (e.g., \"AWS filtered by OpenShift\"), regardless if there is OCP data\nexport const hasCloudProvider = (providers, ocpProviders) => {\n    return _hasCloudProvider(providers, ocpProviders);\n};\n// Ensure at least one source provider has data available for the current month\nexport const hasCurrentMonthData = (providers) => {\n    return _hasData(providers, \"current_month_data\" /* DataType.currentMonthData */);\n};\n// Ensure at least one source provider has data available\nexport const hasData = (providers) => {\n    return _hasData(providers, \"has_data\" /* DataType.hasData */);\n};\n// Ensure at least one source provider has data available for the previous month\nexport const hasPreviousMonthData = (providers) => {\n    return _hasData(providers, \"previous_month_data\" /* DataType.previousMonthData */);\n};\n","import { intl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedReportItems({ idKey, isDateMap, report, sortDirection = 0 /* SortDirection.asc */, sortKey = 'date', }) {\n    return sort(getUnsortedComputedReportItems({\n        idKey,\n        isDateMap,\n        report,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nfunction getCostData(val, key, item) {\n    return {\n        markup: {\n            value: (item && item[key] && item[key].markup ? item[key].markup.value : 0) +\n                (val[key] && val[key].markup ? val[key].markup.value : 0),\n            units: val && val[key] && val[key].markup ? val[key].markup.units : 'USD',\n        },\n        raw: {\n            value: (item && item[key] && item[key].raw ? item[key].raw.value : 0) +\n                (val[key] && val[key].raw ? val[key].raw.value : 0),\n            units: val && val[key] && val[key].raw ? val[key].raw.units : 'USD',\n        },\n        total: {\n            value: (item && item[key] && item[key].total ? item[key].total.value : 0) +\n                (val[key] && val[key].total ? Number(val[key].total.value) : 0),\n            units: val && val[key] && val[key].total ? val[key].total.units : null,\n        },\n        usage: {\n            value: (item && item[key] && item[key].usage ? item[key].usage.value : 0) +\n                (val[key] && val[key].usage ? Number(val[key].usage.value) : 0),\n            units: val && val[key] && val[key].usage ? val[key].usage.units : null,\n        },\n    };\n}\nfunction getUsageData(val, item) {\n    return {\n        capacity: {\n            value: (item && item.capacity ? item.capacity.value : 0) + (val.capacity ? val.capacity.value : 0),\n            units: val && val.capacity ? val.capacity.units : 'Core-Hours',\n        },\n        limit: {\n            value: (item && item.limit ? item.limit.value : 0) + (val.limit ? val.limit.value : 0),\n            units: val && val.limit ? val.limit.units : 'Core-Hours',\n        },\n        request: {\n            value: (item && item.request ? item.request.value : 0) + (val.request ? val.request.value : 0),\n            units: val && val.request ? val.request.units : 'Core-Hours',\n        },\n        usage: {\n            value: (item && item.usage ? item.usage.value : 0) + (val.usage ? val.usage.value : 0),\n            units: val && val.usage ? val.usage.units : 'Core-Hours',\n        },\n    };\n}\n// Details pages typically use this function with filter[resolution]=monthly\nexport function getUnsortedComputedReportItems({ isDateMap = false, report, idKey, // Note: The idKey must use org_entities for reports, while group_by uses org_unit_id\n }) {\n    if (!report) {\n        return [];\n    }\n    // Map<string | number, ComputedReportItem | Map<string | number, ComputedReportItem>\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        const type = dataPoint.type; // Org unit type\n        if (dataPoint && dataPoint.values) {\n            dataPoint.values.forEach((val) => {\n                let id = val.id ? val.id : val[idKey];\n                if (!id) {\n                    id = val.date;\n                }\n                // Ensure unique map IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && val.cluster ? `-${val.cluster}` : '';\n                const mapId = `${id}${idSuffix}`;\n                // 'clusters' will contain either the cluster alias or default cluster ID\n                const cluster_alias = val.clusters && val.clusters.length > 0 ? val.clusters[0] : undefined;\n                const cluster = cluster_alias || val.cluster;\n                const clusters = val.clusters ? val.clusters : [];\n                const date = val.date;\n                const delta_percent = val.delta_percent ? val.delta_percent : 0;\n                const delta_value = val.delta_value ? val.delta_value : 0;\n                const source_uuid = val.source_uuid ? val.source_uuid : [];\n                let label;\n                if (report.meta && report.meta.others && (id === 'Other' || id === 'Others')) {\n                    // Add count to \"Others\" label\n                    label = intl.formatMessage(messages.chartOthers, { count: report.meta.others });\n                }\n                else {\n                    const itemLabelKey = getItemLabel({ report, idKey, value: val });\n                    if (itemLabelKey === 'org_entities' && val.alias) {\n                        label = val.alias;\n                    }\n                    else if (itemLabelKey === 'account' && val.account_alias) {\n                        label = val.account_alias;\n                    }\n                    else if (itemLabelKey === 'cluster' && cluster_alias) {\n                        label = cluster_alias;\n                    }\n                    else if (val[itemLabelKey] instanceof Object) {\n                        label = val[itemLabelKey].value;\n                    }\n                    else {\n                        label = val[itemLabelKey];\n                    }\n                    if (label === undefined || label.trim().length === 0) {\n                        label = val.alias && val.alias.trim().length > 0 ? val.alias : val[idKey];\n                    }\n                }\n                if (isDateMap) {\n                    const data = Object.assign(Object.assign({}, getUsageData(val)), { // capacity, limit, request, & usage\n                        cluster,\n                        clusters, cost: getCostData(val, 'cost'), date,\n                        delta_percent,\n                        delta_value,\n                        id, infrastructure: getCostData(val, 'infrastructure'), label,\n                        source_uuid, supplementary: getCostData(val, 'supplementary'), type });\n                    const item = itemMap.get(mapId);\n                    if (item) {\n                        item.set(date, data);\n                    }\n                    else {\n                        const dateMap = new Map();\n                        dateMap.set(date, data);\n                        itemMap.set(mapId, dateMap);\n                    }\n                }\n                else {\n                    const item = itemMap.get(mapId);\n                    if (item) {\n                        // When applying multiple group_by params, costs may be split between regions. We need to sum those costs\n                        // See https://issues.redhat.com/browse/COST-1131\n                        itemMap.set(mapId, Object.assign(Object.assign(Object.assign({}, item), getUsageData(val, item)), { // capacity, limit, request, & usage\n                            cluster,\n                            clusters,\n                            date,\n                            delta_percent,\n                            delta_value, cost: getCostData(val, 'cost', item), id, infrastructure: getCostData(val, 'infrastructure', item), label,\n                            source_uuid, supplementary: getCostData(val, 'supplementary', item), type }));\n                    }\n                    else {\n                        itemMap.set(mapId, Object.assign(Object.assign({}, getUsageData(val)), { // capacity, limit, request, & usage\n                            cluster,\n                            clusters, cost: getCostData(val, 'cost'), date,\n                            delta_percent,\n                            delta_value,\n                            id, infrastructure: getCostData(val, 'infrastructure'), label,\n                            source_uuid, supplementary: getCostData(val, 'supplementary'), type }));\n                    }\n                }\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\n","import { tagPrefix } from 'api/queries/query';\nexport function getItemLabel({ idKey, report, value }) {\n    let itemLabelKey = String(idKey);\n    if (report.meta && report.meta.group_by) {\n        const group_by = report.meta.group_by;\n        for (const key of Object.keys(group_by)) {\n            if (key.indexOf(tagPrefix)) {\n                const tagPrefixKey = tagPrefix + idKey;\n                if (value.hasOwnProperty(tagPrefixKey)) {\n                    itemLabelKey = tagPrefixKey;\n                }\n            }\n        }\n    }\n    return itemLabelKey;\n}\n","import { intl } from 'components/i18n';\nimport { endOfMonth, format, getDate, getMonth, startOfMonth } from 'date-fns';\nimport messages from 'locales/messages';\nexport function getToday(hrs = 0, min = 0, sec = 0) {\n    const today = new Date();\n    today.setHours(hrs);\n    today.setMinutes(min);\n    today.setSeconds(sec);\n    return today;\n}\nexport function getNoDataForDateRangeString(message = messages.noDataForDate, offset = 1) {\n    const today = getToday();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = format(today, 'd');\n    const startDate = format(startOfMonth(today), 'd');\n    return intl.formatMessage(message, { count: getDate(today), startDate, endDate, month });\n}\nexport function getForDateRangeString(value, message = messages.forDate, offset = 1) {\n    const today = getToday();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = format(today, 'd');\n    const startDate = format(startOfMonth(today), 'd');\n    return intl.formatMessage(message, {\n        value,\n        count: getDate(today),\n        startDate,\n        endDate,\n        month,\n    });\n}\nexport function getSinceDateRangeString(message = messages.sinceDate) {\n    const today = getToday();\n    const month = getMonth(today);\n    const endDate = format(today, 'd');\n    const startDate = format(startOfMonth(today), 'd');\n    return intl.formatMessage(message, { count: getDate(today), startDate, endDate, month });\n}\nexport function getMonthDate(offset) {\n    const today = getToday();\n    if (offset) {\n        today.setDate(1); // Required to obtain correct month\n        today.setMonth(today.getMonth() - offset);\n    }\n    const start_date = format(startOfMonth(today), 'yyyy-MM-dd');\n    const end_date = format(offset ? endOfMonth(today) : today, 'yyyy-MM-dd');\n    return { start_date, end_date };\n}\nexport function getCurrentMonthDate() {\n    return getMonthDate(0);\n}\nexport function getPreviousMonthDate() {\n    return getMonthDate(1);\n}\n// Returns offset + 1 days, including today's date. See https://issues.redhat.com/browse/COST-1117\nexport function getLastDaysDate(offset) {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - offset);\n    return {\n        end_date: format(endDate, 'yyyy-MM-dd'),\n        start_date: format(startDate, 'yyyy-MM-dd'),\n    };\n}\n// Returns 31 days, including today's date\nexport function getLast30DaysDate() {\n    return getLastDaysDate(30);\n}\n// Returns 61 days, including today's date\nexport function getLast60DaysDate() {\n    return getLastDaysDate(60);\n}\n// Returns 91 days, including today's date\nexport function getLast90DaysDate() {\n    return getLastDaysDate(90);\n}\n","export const skeletonWidth = {\n    xs: '16%',\n    sm: '33%',\n    md: '66%',\n    lg: '100%',\n};\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* SortDirection.asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* SortDirection.asc */ ? getValueForItem(a, options) : getValueForItem(b, options);\n        const bVal = direction === 0 /* SortDirection.asc */ ? getValueForItem(b, options) : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* UserAccessType.aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* UserAccessType.azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to Oci\nexport const hasOciAccess = (userAccess) => {\n    return hasAccess(userAccess, \"oci\" /* UserAccessType.oci */);\n};\n// Returns true if user has access to Oci and at least one source provider\nexport const isOciAvailable = (userAccess, ociProviders) => {\n    return hasOciAccess(userAccess) && hasProviders(ociProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* UserAccessType.cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* UserAccessType.gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, \"gcp\" /* UserAccessType.gcp */) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* UserAccessType.ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n"],"names":["styles","currencySelector","display","alignItems","currencyLabel","marginBottom","marginRight","whiteSpace","currencyOptions","label","messages","value","CurrencyBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelect","isDisabled","props","currency","selectOptions","getSelectOptions","selection","find","option","Select","className","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","selections","variant","SelectVariant","map","SelectOption","key","intl","options","push","toString","formatMessage","units","event","setState","render","style","Title","headingLevel","size","mapStateToProps","CurrencyConnect","connect","Currency","injectIntl","NoDataStateBase","showReload","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","Button","onClick","window","location","reload","NoDataState","title","PageHeader","PageHeaderTitle","Main","src","alt","iconSpacer","marginLeft","viewSources","marginTop","global_spacer_lg","NoProvidersStateBase","getDocLink","textKey","urlKey","href","rel","target","getRouteToSources","providerType","docUrlKey","descKey","titleKey","component","NoProvidersState","LAYOUT_PROPS","padding","area","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","ChartTheme","getComputedForecastItems","forecast","sortDirection","sortKey","sort","itemMap","Map","visitDataPoint","dataPoint","values","forEach","val","date","item","get","set","cost","getCostData","infrastructure","supplementary","Array","data","from","getUnsortedComputedForecastItems","direction","confidence_max","confidence_min","pvalues","Number","rsquared","total","transformForecast","datumType","forecastItem","forecastItemValue","computedItems","chartDatums","reduce","acc","d","prevValue","length","y","createForecastDatum","i","padChartDatums","transformForecastCone","prevMaxValue","prevMinValue","y0","createForecastConeDatum","transformReport","report","idKey","reportItem","reportItemValue","items","getComputedReportItems","createReportDatum","computedItem","xVal","Date","yVal","isFloat","parseFloat","toFixed","isInt","x","undefined","maxValue","minValue","y0Val","name","datums","result","firstDate","lastDate","padDate","startOfMonth","getDate","setDate","endOfMonth","prevChartDatum","chartDatum","fillChartDatums","getDateRange","firstOfMonth","lastOfMonth","offset","start","end","today","setMonth","getMonth","firstDay","lastDay","getDatumDateRange","getMaxValue","max","datum","getMaxMinValues","min","maxY","Math","minY","getTooltipContent","formatter","unit","lookup","getCostRangeString","noDataKey","month","year","count","startDate","endDate","getUsageRangeString","n","getChartNames","series","serie","childName","getDomain","hiddenSeries","domain","s","index","isSeriesHidden","threshold","ceil","_min","floor","getLegendData","legendItem","has","getTooltipLabel","formatOptions","tooltipFormatter","dy","dy0","value0","value1","getResizeObserver","containerRef","handleResize","containerElement","ResizeObserver","_navToggle","_resizeObserver","resizeObserver","entries","requestAnimationFrame","isArray","observe","unobserve","addEventListener","removeEventListener","insights","chrome","on","setTimeout","initHiddenSeries","Set","delete","add","isDataAvailable","unavailable","isDataHidden","keys","next","done","dataChildName","serieChildName","costSelector","costLabel","costTypeOptions","desc","CostTypeBase","costType","description","CostTypeConnect","CostType","_getOcpProvider","ocpProviders","uuid","provider","filterProviders","providers","sourceType","filter","source_type","toLowerCase","meta","_hasData","_hasCloudData","dataType","ocpProvider","hasCloudCurrentMonthData","hasCloudData","hasCloudPreviousMonthData","hasCloudProvider","_hasCloudProvider","hasCurrentMonthData","hasData","hasPreviousMonthData","isDateMap","getUnsortedComputedReportItems","markup","raw","usage","getUsageData","capacity","limit","request","type","mapId","cluster","cluster_alias","clusters","delta_percent","delta_value","source_uuid","others","itemLabelKey","String","group_by","indexOf","tagPrefixKey","hasOwnProperty","getItemLabel","alias","account_alias","trim","dateMap","getToday","hrs","sec","setHours","setMinutes","setSeconds","getNoDataForDateRangeString","message","getForDateRangeString","getSinceDateRangeString","getCurrentMonthDate","start_date","end_date","getMonthDate","getLastDaysDate","getLast30DaysDate","getLast60DaysDate","getLast90DaysDate","skeletonWidth","xs","sm","md","lg","getValueForItem","array","a","b","aVal","bVal","hasAccess","userAccess","userAccessType","access","hasProviders","hasAwsAccess","isAwsAvailable","awsProviders","hasAzureAccess","isAzureAvailable","azureProviders","hasOciAccess","isOciAvailable","ociProviders","hasCostModelAccess","hasGcpAccess","isGcpAvailable","gcpProviders","hasIbmAccess","isIbmAvailable","ibmProviders","hasOcpAccess","isOcpAvailable"],"sourceRoot":""}