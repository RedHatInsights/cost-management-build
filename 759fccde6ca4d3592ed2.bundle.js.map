{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/utils/getComputedReportItems.ts","webpack:///./src/components/commonChart/chartUtils.ts","webpack:///./src/testIds.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/textInput/textInput.styles.ts","webpack:///./src/components/textInput/textInput.tsx","webpack:///./src/components/randomId/randomId.tsx","webpack:///./src/components/formGroup/formGroup.styles.ts","webpack:///./src/components/formGroup/formGroup.tsx","webpack:///./src/components/commonChart/chartLegend.tsx","webpack:///./src/components/commonChart/chart.styles.ts","webpack:///./src/components/commonChart/chartLegendItem.styles.ts","webpack:///./src/components/commonChart/chartLegendItem.tsx","webpack:///./src/components/commonChart/chartTitle.tsx","webpack:///./src/pages/costDetails/costDetails.styles.ts","webpack:///./src/components/pieChart/pieChart.styles.ts","webpack:///./src/components/pieChart/pieChart.tsx","webpack:///./src/pages/costDetails/detailChart.tsx","webpack:///./src/pages/costDetails/detailItem.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/pages/costDetails/detailsToolbar.styles.ts","webpack:///./src/pages/costDetails/detailsToolbar.tsx","webpack:///./src/pages/costDetails/exportModal.styles.ts","webpack:///./src/pages/costDetails/exportModal.tsx","webpack:///./src/pages/costDetails/costDetails.tsx","webpack:///./src/pages/costDetails/index.ts"],"names":["formatValue","value","unit","options","lookup","split","toLowerCase","fValue","formatCurrency","formatStorage","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","groups","getComputedReportItems","report","idKey","labelKey","sortKey","sortDirection","Object","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedReportItems","key","direction","itemMap","visitDataPoint","dataPoint","values","forEach","total","id","label","account_alias","assign","units","group","data","getIdKeyForGroupBy","groupBy","account","instance_type","region","service","transformReport","type","computedItems","utils_getComputedReportItems__WEBPACK_IMPORTED_MODULE_3__","map","i","createDatum","reduce","acc","d","prevValue","length","y","computedItem","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","parseFloat","name","getDateRangeString","datums","start","end","today","Date","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_2___default","getDatumDateRange","monthName","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","startDate","endDate","getTooltipLabel","datum","formatOptions","toString","getTestProps","data-testid","testIds","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","providers","add_btn","bucket_input","name_input","resource_name_input","type_input","sidebar","nav","link","backdrop","getValueForItem","item","sort","array","a","b","aVal","bVal","__webpack_require__","__webpack_exports__","styles","StyleSheet","create","textInput","width","fontSize","esm","paddingTop","paddingRight","paddingBottom","paddingLeft","lineHeight","outline","border",":focus","borderColor","flat","borderBottom","join","error","__rest","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","textInput_TextInput","react_default","Component","[object Object]","super","arguments","this","handleChange","evt","props","onChange","currentTarget","handleKeyPressed","onKeyPress","preventDefault","_a","className","isFlat","isError","createElement","currentId","randomId_RandomId","prefix","children","defaultProps","formGroup","marginBottom","display","fontWeight","FormGroup","htmlFor","cloneElement","Children","only","legend","alignItems","ChartLegend","styling","Boolean","chartStyles","padding","strokeWidth","fillOpacity","tooltipText","fill","tooltipFlyout","previousMonth","stroke","currentMonth","chartLegendItem_styles_styles","reportSummaryTrend",":not(foo) svg","overflow",":not(foo) text","legendItem","color","var","marginRight","height","borderWidth","borderStyle","currentColor","backgroundColor","previousColor","ChartLegendItem","isCurrent","index","chartUtils","chartTitle_styles","chartTitle","ChartTitle","content","costDetailsPage","minHeight","header","justifyContent","headerLeft","flex","headerRight","totalLabel","totalValue","marginTop","totalLabelUnit","totalLabelDate","groupBySelector","groupBySelectorLabel","innerGroupBySelector","innerGroupBySelectorLabel","toolbarContainer","listViewOverride","index_esm","toolbarOverride","top","bottom","pie","pieChart_styles_styles","pieGroup","float","position","marginLeft","left","pieChart_PieChart","containerRef","createRef","state","formatDatumValue","formatDatumOptions","handleResize","setState","current","clientWidth","nextProps","setTimeout","window","addEventListener","removeEventListener","title","currentData","legendData","symbol","ref","victory_pie","colorScale","labels","labelComponent","victory_tooltip","cornerRadius","flyoutStyle","victory_legend","standalone","gutter","commonChart","reportType","mapStateToProps","common","queryString","reports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","DetailsChart","es","react_redux_es","prevProps","currentGroupBy","groupByOptions","DetailsItem","expanded","handleExpand","getQueryString","handleExpandClose","handleCheckboxChange","event","onCheckboxChange","checked","handleSelectChange","groupByKey","parentQuery","newQuery","filter","time_scope_units","time_scope_value","resolution","limit","group_by","api_query","parentGroupBy","defaultGroupBy","getDefaultGroupBy","selected","ListView","Item","heading","checkboxInput","actions","InfoItem","stacked","onExpand","onExpandClose","Row","Col","option","isEqual","obj1","obj2","JSON","stringify","btnOverride","detailsToolbar_DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentSortType","sortField","isSortNumeric","isNumeric","isSortAscending","query","order_by","currentViewType","filterCategory","undefined","addQuery","keys","Array","isArray","field","getFilter","push","clearFilters","onFilterRemoved","filterAdded","filterValue","getAccountId","onFilterAdded","getAccountAlias","accounts","alias","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","slice","handleExportClicked","onExportClicked","onValueKeyPress","stopPropagation","removeFilter","updated","selectFilterType","filterType","toggleCurrentSortDirection","onSortChanged","updateCurrentSortType","sortType","updateCurrentValue","prevState","cacheReport","placeholder","isExportDisabled","Toolbar","Filter","TypeSelector","filterTypes","onFilterTypeSelected","renderInput","Sort","sortTypes","sortFields","onSortTypeSelected","DirectionSelector","isAscending","onClick","Button","isDisabled","variant","Icon","Results","resultsTotal","ActiveLabel","List","onRemove","filterData","href","onActionPerformed","helpers","exportModal_styles_styles","modal","h2","input","ul","resolutionOptions","exportModal","store_export","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","isExportModalOpen","ui","selectIsExportModalOpen","exportReport","closeExportModal","defaultState","groupById","isAllItems","items","handleCancel","handleFetchReport","handleResolutionChange","_","file_download_default","Modal","isLarge","isOpen","onClose","secondary","primary","Fragment","Radio","isValid","aria-label","groupItem","costDetails_reportType","baseQuery","costDetails_groupByOptions","costDetails_mapStateToProps","queryFromRoute","location","search","costDetails_mapDispatchToProps","openExportModal","stateProps","dispatchProps","selectedItems","history","replace","getRouteForQuery","onCheckboxAllChange","updateReport","getFilterFields","getSortTypes","isSelected","selectedItem","bind","includes","filteredQuery","Title","size","month","getMonth","date","exportText","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_costDetails__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"0JAAA,MAAAA,EAAA,CAAAC,EAAAC,EAAAC,QACA,MAAAC,EAAAF,KAAAG,MAAA,QAAAC,cACAC,EAAAN,GAAA,EACA,OAAAG,GACA,UACA,OAAAI,EAAAD,EAAAH,EAAAD,GACA,SACA,OAAAM,EAAAF,EAAAH,EAAAD,GACA,QACA,OAAAO,EAAAH,EAAAH,EAAAD,KAGAO,EAAA,CAAAT,EAAAU,GAA6CC,uBAC7CX,EAAAY,QAAAD,GAEAJ,EAAA,CAAAP,EAAAU,GAA8CC,iBAAA,SAC9C,IAAAL,EAAAN,EAIA,OAHAA,IACAM,EAAA,GAEAA,EAAAO,eAAA,MACAC,MAAA,WACAC,SAAA,MACAC,sBAAAL,EACAM,sBAAAN,KAGAH,EAAA,CAAAR,EAAAU,GAA6CC,iBAAA,QAC7CX,EAAAY,QAAAD,kJC3BA,MAAAO,GAAA,kDACA,SAAAC,GAAAC,OAAwCA,EAAAC,QAAAC,WAAAD,EAAAE,UAAA,QAAAC,gBAAA,IACxC,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,GACAP,SACAC,QACAC,WACAE,gBACAD,aAEAK,IAAAL,EACAM,UAAAL,IAGA,SAAAG,GAAAP,OAAgDA,EAAAC,QAAAC,WAAAD,IAChD,IAAAD,EACA,SAEA,MAAAU,KACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAC,QAAAlC,IACA,MAAAmC,EAAAnC,EAAAmC,MACAC,EAAApC,EAAAqB,GACA,IAAAgB,EAAArC,EAAAsB,GACA,YAAAA,GAAAtB,EAAAsC,gBACAD,EAAArC,EAAAsC,eAEAR,EAAAM,GASAN,EAAAM,GAAAX,OAAAc,UAA8CT,EAAAM,IAAgBD,MAAAL,EAAAM,GAAAD,UAR9DL,EAAAM,IACAA,KACAD,QACAE,QACAG,MAAAxC,EAAAwC,SAOAtB,EAAAgB,QAAAO,IACA,GAAAT,EAAAS,GACA,OAAAT,EAAAS,GAAAP,QAAAH,MAKA,OADAX,EAAAsB,KAAAR,QAAAH,GACAN,OAAAQ,OAAAH,GAEA,SAAAa,EAAAC,MACA,OAAAA,EAAAC,QACA,UAEAD,EAAAE,cACA,gBAEAF,EAAAG,OACA,SAEAH,EAAAI,QACA,UAEA,6MC1DA,SAAAC,EAAA7B,EAAA8B,EAAA,EAAAtB,EAAA,QACA,IAAAR,EACA,SAEA,MAAA+B,EAAA1B,OAAA2B,EAAA,EAAA3B,EACAL,SACAC,MAAAO,EACAL,QAAA,KACAC,cAAA,IAEA,WAAA0B,EACAC,EAAAE,IAAAC,GAAAC,EAAAD,EAAAnB,MAAAmB,EAAA1B,IAEA,IAAAsB,EACAC,EAAAE,IAAAC,GAAAC,EAAAD,EAAAnB,MAAAmB,EAAA1B,IAEAuB,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAvB,MAAAuB,EAAA9B,SAGA,SAAA2B,EAAAvD,EAAA8D,EAAAzC,EAAA,QAEA,OACA0C,EAFA,SAAA1C,EAAA2C,IAAAF,EAAA1B,IAAA0B,EAAAzB,MAGAwB,EAAAI,WAAAjE,EAAAY,QAAA,IACAgB,IAAAkC,EAAA1B,GACA8B,KAAAJ,EAAA1B,GACAI,MAAAsB,EAAAtB,OAaA,SAAA2B,EAAAC,GACA,MAAAC,EAAAC,GAXA,SAAAF,GACA,IAAAA,EAAAR,OAAA,CACA,MAAAW,EAAA,IAAAC,KAEA,OADAC,IAAAF,GACAA,GAIA,OAFA,IAAAC,KAAAJ,EAAA,GAAAxC,IAAA,aACA,IAAA4C,KAAAJ,IAAAR,OAAA,GAAAhC,IAAA,cAIA8C,CAAAN,GACAO,EAAAC,IAAAP,EAAA,OACAQ,EAAAb,IAAAK,GACAS,EAAAd,IAAAM,GACA,SAAcK,KAAaX,IAAAK,KAAiBQ,IAAAC,QAA8BA,IAAQ,KAElF,SAAAC,EAAAC,EAAAjF,EAAAkF,EAAA5D,EAAA,QACA,IAAA2D,EAAApD,IACA,SAEA,YAAAP,EAAA,CAEA,SADAuD,IAAAI,EAAApD,IAAA,kBAC2B7B,EAAAiF,EAAAnB,EAAAmB,EAAAxC,MAAAyC,KAE3B,OAAAD,EAAApD,IAAAsD,8GC5DA,MACAC,EAAA/C,KAAsCgD,cAAAhD,IACtCiD,GACAC,QACAC,WAAA,aACAC,WAAA,cAEAC,OACAC,MAAA,QACAC,KAAA,aACAC,eAAA,iBACAC,eAAA,iBACAC,OAAA,UAEAC,UACAA,SAAA,WACAC,SAAA,WACAC,cAAA,iBACAC,OAAA,UAEAC,WACAC,QAAA,UACAC,aAAA,eACAd,WAAA,aACAe,WAAA,sBACAC,oBAAA,+BACAf,WAAA,aACAgB,WAAA,uBAEAC,SACAC,IAAA,eACAC,KAAA,oBACAC,SAAA,uDChCA,SAAAC,EAAAC,EAAA5G,GACA,oBAAA4G,EACA,OAAAA,EAGA,OAAAA,EADA5G,EAAA0B,KAGA,SAAAmF,EAAAC,EAAA9G,GACA,MAAA2B,UAAWA,EAAA,GAA0B3B,MACrC,UAAA8G,GAAAD,KAAA,CAAAE,EAAAC,KACA,MAAAC,EACAN,EADA,IAAAhF,EACAoF,EACAC,EADAhH,GAEAkH,EACAP,EADA,IAAAhF,EACAqF,EACAD,EADA/G,GAEA,OAAAiH,EAAAC,GACA,EAEAD,EAAAC,EACA,EAEA,IAtBAC,EAAA3D,EAAA4D,EAAA,sBAAAP,4ECEA,MAAAQ,EAAAC,EAAA,EAAAC,QACAC,WACAC,MAAA,OACAC,SAAAC,EAAA,EAAA7H,MACA8H,WAAAD,EAAA,EAAA7H,MACA+H,aAAAF,EAAA,EAAA7H,MACAgI,cAAAH,EAAA,EAAA7H,MACAiI,YAAAJ,EAAA,EAAA7H,MACAkI,WAAA,OACAC,QAAA,EACAC,UAAmBP,EAAA,EAAA7H,eAAqC6H,EAAA,EAAA7H,QACxDqI,UACAC,YAAAT,EAAA,EAAA7H,QAGAuI,MACAH,OAAA,OACAI,cACAX,EAAA,EAAA7H,MACA,QACA6H,EAAA,EAAA7H,OACAyI,KAAA,KACAJ,UACAG,cACAX,EAAA,EAAA7H,MACA,QACA6H,EAAA,EAAA7H,OACAyI,KAAA,OAGAC,OACAJ,YAAAT,EAAA,EAAA7H,MACAqI,UACAC,YAAAT,EAAA,EAAA7H,UCnCA,IAAA2I,EAAA,SAAAC,EAAAC,GACA,IAAAC,KACA,QAAAC,KAAAH,EAAAnH,OAAAuH,UAAAC,eAAAC,KAAAN,EAAAG,IAAAF,EAAAM,QAAAJ,GAAA,IACAD,EAAAC,GAAAH,EAAAG,IACA,SAAAH,GAAA,mBAAAnH,OAAA2H,sBACA,KAAA9F,EAAA,MAAAyF,EAAAtH,OAAA2H,sBAAAR,GAA4DtF,EAAAyF,EAAAnF,OAAcN,IAAAuF,EAAAM,QAAAJ,EAAAzF,IAAA,IAC1EwF,EAAAC,EAAAzF,IAAAsF,EAAAG,EAAAzF,KACA,OAAAwF,SAKAO,UAAAC,EAAArC,EAAAsC,UACAC,cACAC,SAAAC,WACAC,KAAAC,aAAA,CAAAC,IACAF,KAAAG,MAAAC,SAAAF,EAAAG,cAAAhK,MAAA6J,KAEAF,KAAAM,iBAAA,CAAAJ,IACAF,KAAAG,MAAAI,YAAA,UAAAL,EAAAjI,MACAiI,EAAAM,iBACAR,KAAAG,MAAAI,WAAAL,MAIAL,SACA,MAAAY,EAAAT,KAAAG,OAAAO,UAAgCA,EAAAC,SAAAC,WAA6BH,EAAAN,EAAAnB,EAAAyB,GAAA,iCAC7D,OAAAd,EAAArC,EAAAuD,cAAA,QAAA/I,OAAAc,UAA6DuH,GAAUO,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA4I,EAAA9C,EAAAG,UAAA4C,GAAA/C,EAAAgB,KAAAgC,GAAAhD,EAAAmB,OAAAqB,SAAAJ,KAAAC,aAAAM,WAAAP,KAAAM,oHC1BvE,IAAAQ,EAAA,QACAC,UAAApB,EAAArC,EAAAsC,UACAC,cACAC,SAAAC,WACAC,KAAAvH,MAAqBuH,KAAAG,MAAAa,SAAoBF,MAEzCjB,SACA,OAAAG,KAAAG,MAAAc,UAAoCxI,GAAAuH,KAAAvH,MAGpCsI,EAAAG,cACAF,OAAA,2BCVA,MAAApD,EAAAC,EAAA,EAAAC,QACAqD,WACAC,aAAAlD,EAAA,EAAA7H,OAEAqC,OACA2I,QAAA,QACAC,WAAApD,EAAA,EAAA7H,MACAgI,cAAAH,EAAA,EAAA7H,SCLAkL,EAAA,EAA2B7I,QAAAuI,cAAkBtB,EAAArC,EAAAuD,cAAAE,GAAqCC,OAAAtI,GAAgB,EAAID,QAAKkH,EAAArC,EAAAuD,cAAA,OAAkCH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAAuD,YAC7IxB,EAAArC,EAAAuD,cAAA,SAAkCH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAAlF,OAAA8I,QAAA/I,GAA4CC,GAC9EiH,EAAArC,EAAAuD,cAAA,WAAAlB,EAAArC,EAAAmE,aAAA9B,EAAArC,EAAAoE,SAAAC,KAAAV,IAAwFxI,yGCHxF,MAAAmF,EAAAC,EAAA,EAAAC,QACA8D,QACAP,QAAA,OACAQ,WAAA,YAGAC,EAAA,EAAsBb,WAAA9J,YACtB,MAAA4K,EAAAC,QAAA7K,IAAA6K,QAAA7K,EAAAyK,QAAAzK,EAAAyK,OAAAhE,EAAAgE,OACA,OAAAjC,EAAArC,EAAAuD,cAAA,OAAuCH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAAiK,IAA0Bd,iBCTjE,MAAAgB,GACAC,QAAA,EACApJ,OACAC,MAAeoJ,YAAA,EAAAC,YAAA,KAEfC,aACApE,SAAA,OACAqE,KAAApE,EAAA,EAAA7H,OAEAkM,eAAoBD,KAAApE,EAAA,EAAA7H,OACpBmM,eACAzJ,MACAuJ,KAAApE,EAAA,EAAA7H,MACAoM,OAAAvE,EAAA,EAAA7H,QAGAqM,cACA3J,MACAuJ,KAAApE,EAAA,EAAA7H,MACAoM,OAAAvE,EAAA,EAAA7H,SClBAsM,GDsBA9E,EAAA,EAAAC,QACA8E,oBACAC,iBACAC,SAAA,WAEAC,kBACA9E,SAAA,OACAhE,OAAA,WC7BA4D,EAAA,EAAAC,QACAkF,YACA3B,QAAA,OACAQ,WAAA,SACA5D,SAAAC,EAAA,EAAA7H,MACA4M,MAAA/E,EAAA,EAAAgF,IACAC,YAAAjF,EAAA,EAAA7H,OAEA4M,OACAG,OAAA,GACApF,MAAA,GACAmF,YAAAjF,EAAA,EAAA7H,MACAgN,YAAAnF,EAAA,EAAA7H,MACAiN,YAAA,SAEAC,cACAC,gBAAAvB,EAAAS,aAAA3J,KAAAuJ,KACA3D,YAAAsD,EAAAS,aAAA3J,KAAA0J,QAEAgB,eACAD,gBAAAvB,EAAAO,cAAAzJ,KAAAuJ,KACA3D,YAAAsD,EAAAO,cAAAzJ,KAAA0J,wBCpBA,MAAAiB,EAAA,EAA0B3K,OAAA4K,YAAAjM,QAAA,OAAAkM,QAAAzM,YAC1B,IAAA4B,GAAA,IAAAA,EAAAkB,OACA,OAAA0F,EAAArC,EAAAuD,cAAA,YAEA,MAAAkB,EAAAC,QAAA7K,IAAA6K,QAAA7K,EAAA6L,YACA7L,EAAA6L,WACAL,EAAAK,WACA,YAAAtL,EAAA,CACA,MAAAgB,EAAAZ,OAAA+L,EAAA,EAAA/L,CAAAiB,GACA,OAAA4G,EAAArC,EAAAuD,cAAA,OAA4CH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAAiK,IAC5CpC,EAAArC,EAAAuD,cAAA,OAAwCH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA6K,EAAAM,MAAAU,EAAAhB,EAAAY,aAAAZ,EAAAc,iBACxC/K,GAGA,OAAAiH,EAAArC,EAAAuD,cAAA,OAA4C5I,IAAAc,EAAA6K,GAAA3L,IAAAyI,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAAiK,IAC5CpC,EAAArC,EAAAuD,cAAA,OAAwCH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA6K,EAAAM,MAAAU,EAAAhB,EAAAY,aAAAZ,EAAAc,iBACxC1K,EAAA6K,GAAA3L,MChBA6L,EAAAjG,EAAA,EAAAC,QACAiG,YACA9F,SAAAC,EAAA,EAAA7H,MACA+K,aAAAlD,EAAA,EAAA7H,SAGA2N,EAAA,EAAqB/C,cAAWtB,EAAArC,EAAAuD,cAAA,OAAkCH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAAgM,EAAAC,aAAoC9C,uQCPtG,MAAArD,EAAAC,EAAA,EAAAC,QACAmG,SACAT,gBAAAtF,EAAA,EAAAgF,IACA/E,WAAAD,EAAA,EAAA7H,MACA+M,OAAA,QAEAc,iBACAV,gBAAAtF,EAAA,EAAAgF,IACAiB,UAAA,QAEAC,QACA/C,QAAA,OACAgD,eAAA,gBACAnC,QAAAhE,EAAA,EAAAgF,IACAM,gBAAAtF,EAAA,EAAAgF,KAEAoB,YACAC,KAAA,GAEAC,aACAnD,QAAA,OACAgD,eAAA,YAEA7L,OACA6I,QAAA,OACAQ,WAAA,UAEA4C,cACAC,YACAC,UAAA,EACAvD,aAAA,EACA+B,YAAAjF,EAAA,EAAAgF,KAEA0B,gBACA3G,SAAAC,EAAA,EAAA7H,MACA4M,MAAA/E,EAAA,EAAAgF,KAEA2B,gBACA5G,SAAAC,EAAA,EAAA7H,MACA4M,MAAA/E,EAAA,EAAAgF,KAEA4B,iBACAzD,QAAA,OACAQ,WAAA,UAEAkD,sBACA3D,aAAA,EACA+B,YAAAjF,EAAA,EAAAgF,KAEA8B,sBACA3D,QAAA,OACAQ,WAAA,SACA5D,SAAAC,EAAA,EAAA7H,OAEA4O,2BACA7D,aAAA,EACA+B,YAAAjF,EAAA,EAAAgF,KAEAgC,kBACA1B,gBAAAtF,EAAA,EAAA7H,SAGA8O,EAAAC,EAAA;;eAEelH,EAAA,EAAA7H;sBACO6H,EAAA,EAAA7H;IAClB6H,EAAA,EAAA3D,SAA0B2D,EAAA,EAAA7H;IAC1B6H,EAAA,EAAA3D,SAA0B2D,EAAA,EAAA7H;;;;;;;kBAOZ6H,EAAA,EAAA7H;;;;;;;;;;mBAUC6H,EAAA,EAAA7H;;;;;iBAKF6H,EAAA,EAAA7H;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBAsEI6H,EAAA,EAAA7H;iBACJ6H,EAAA,EAAA7H;;;;iBAIA6H,EAAA,EAAA7H;aACJ6H,EAAA,EAAA7H;;;;eAIE6H,EAAA,EAAA7H,SAA0B6H,EAAA,EAAA7H;;;;;;uBAMlB6H,EAAA,EAAA7H,SAA0B6H,EAAA,EAAA7H;;;;;mBAK9B6H,EAAA,EAAA7H;qBACE6H,EAAA,EAAA7H;;;;;;;;;;;;;eAaN6H,EAAA,EAAA7H,SAA0B6H,EAAA,EAAA7H;QACjC6H,EAAA,EAAA7H,SAA0B6H,EAAA,EAAA7H;cACpB6H,EAAA,EAAA7H,UAA2B6H,EAAA,EAAA7H,UAA2B6H,EAAA,EAAA7H,UAA2B6H,EAAA,EAAA7H;;;QAGvF6H,EAAA,EAAA7H;QACA6H,EAAA,EAAA7H;;;;;;;;;;kBAUU6H,EAAA,EAAA7H;;;;QAIV6H,EAAA,EAAA7H;QACA6H,EAAA,EAAA7H;;;;EAKRgP,EAAAD,EAAA;iBACiBlH,EAAA,EAAA7H;kBACC6H,EAAA,EAAA7H;sBACI6H,EAAA,EAAA7H;eACP6H,EAAA,EAAA7H;;;;;;;;;;;aAWF6H,EAAA,EAAA7H;oBACO6H,EAAA,EAAA7H;;;;;;mBAMD6H,EAAA,EAAA7H;sBACG6H,EAAA,EAAA7H;;;;;;;;;;;;aAYT6H,EAAA,EAAA7H;mBACM6H,EAAA,EAAA7H;;;;iBAIF6H,EAAA,EAAA7H;aACJ6H,EAAA,EAAA7H;;;;;;;;;;qBAUQ6H,EAAA,EAAA7H;;;;iBAIJ6H,EAAA,EAAA7H;;oBAEG6H,EAAA,EAAA7H;qBACC6H,EAAA,EAAA7H;;;;;;uBAME6H,EAAA,EAAA7H;QACf6H,EAAA,EAAA7H;;;;;;iBAMS6H,EAAA,EAAA7H;eACF6H,EAAA,EAAA7H;kBACG6H,EAAA,EAAA7H;mBACC6H,EAAA,EAAA7H;;;;;;;;mBAQA6H,EAAA,EAAA7H;qBACE6H,EAAA,EAAA7H;qBACA6H,EAAA,EAAA7H;;;;qBAIA6H,EAAA,EAAA7H;;;;qBAIA6H,EAAA,EAAA7H;;;;mBAIF6H,EAAA,EAAA7H;uBACI6H,EAAA,EAAA7H;;;;;;;qBAOF6H,EAAA,EAAA7H;;;mECrUrB,MAAA4L,GACAC,SAAcoD,IAAA,EAAAC,OAAA,GACdC,KACAzM,MACAoJ,YAAA,EACAC,YAAA,GACAK,OAAAvE,EAAA,EAAA7H,QAGAgM,aACApE,SAAAC,EAAA,EAAA7H,MACAiM,KAAApE,EAAA,EAAA7H,OAEAkM,eAAoBE,OAAAvE,EAAA,EAAA7H,QAEpBoP,EAAA5H,EAAA,EAAAC,QACA4H,UACArE,QAAA,OACAsE,MAAA,OACAC,SAAA,WACAzH,WAAA,OACA0H,WAAA,OACAC,KAAA,WAGAjI,EAAA,EAAAC,QACA8D,QACAP,QAAA,QACAQ,WAAA,UAEAmB,YACA3B,QAAA,OACAQ,WAAA,SACA5D,SAAAC,EAAA,EAAA7H,MACA4M,MAAA/E,EAAA,EAAAgF,IACAC,YAAAjF,EAAA,EAAA7H,eC9BA0P,UAAApG,EAAArC,EAAAsC,UACAC,cACAC,SAAAC,WACAC,KAAAgG,aAAArG,EAAArC,EAAA2I,YACAjG,KAAAkG,OACAlI,MAAA,GAEAgC,KAAA5E,gBAAA,CAAAC,IACA,MAAA8K,iBAAmBA,EAAAC,qBAAAnN,WAAgD+G,KAAAG,MAEnE,OADArI,OAAA+L,EAAA,EAAA/L,CAAAuD,EAAA8K,EAAAC,EAAAnN,KAGA+G,KAAAqG,aAAA,MACArG,KAAAsG,UAA2BtI,MAAAgC,KAAAgG,aAAAO,QAAAC,gBAG3B3G,sBAAA4G,GACA,QAAAA,EAAA1N,KAKA8G,oBACA6G,WAAA,KACA1G,KAAAsG,UAA2BtI,MAAAgC,KAAAgG,aAAAO,QAAAC,cAC3BG,OAAAC,iBAAA,SAAA5G,KAAAqG,gBAGAxG,uBACA8G,OAAAE,oBAAA,SAAA7G,KAAAqG,cAEAxG,SACA,MAAAiH,MAAeA,EAAA1D,SAAApF,QAAAjF,OAAAE,WAAsC+G,KAAAG,MACrD4G,EAAAjP,OAAA+L,EAAA,EAAA/L,CAAAiB,EAAA,EAAAE,GACA+N,EAAAD,EAAArN,IAAAyD,KACA5C,KAAA4C,EAAA5C,KAAAgB,WAAA,KAAAzD,OAAA1B,EAAA,EAAA0B,CAAAqF,EAAAjD,GAAA,IACA+M,QAAqB1N,KAAA,aAGrB,OAAAoG,EAAArC,EAAAuD,cAAA,OAA4CH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA2N,EAAAC,UAAAwB,IAAAlH,KAAAgG,cAC5ChE,QAAA+E,EAAA9M,SAAA0F,EAAArC,EAAAuD,cAAAsG,EAAA,GAA6EjF,QAAAD,EAAAC,QAAAkB,SAAApF,QAAAoJ,WAF7E,OAE6EjQ,MAAA8K,EAAAuD,IAAAzM,KAAAgO,EAAAM,OAAArH,KAAA5E,gBAAAkM,eAAA3H,EAAArC,EAAAuD,cAAA0G,EAAA,GAA+MC,aAAA,EAAAC,YAAAxF,EAAAM,kBAC5R5C,EAAArC,EAAAuD,cAAA,OAAwC7C,MAAA,IAAAoF,OAAA,KAA0BpB,QAAA+E,EAAA9M,SAAA0F,EAAArC,EAAAuD,cAAA6G,EAAA,GAAsEzP,IAAA6O,EAAAa,YAAA,EAAAP,WAHxI,OAGwIhN,EAAA,EAAAF,EAAA,EAAA0N,OAAA,GAAA7O,KAAAiO,KACxIrH,EAAArC,EAAAuD,cAAAgH,EAAA,OAAAf,KC1CA,MAAAgB,EAAA,OAkBA,MAAAC,EAAAjQ,OAAAkQ,EAAA,EAAAlQ,CAAA,CAAAoO,GAAuD+B,kBAGvD,OAAYxQ,OAFZyQ,EAAA,EAAAC,aAAAjC,EAAA,OAAA+B,GAEYG,kBADZF,EAAA,EAAAG,wBAAAnC,EAAA,OAAA+B,MAGAK,GACAC,YAAAL,EAAA,EAAAK,aAEAC,EAAA1Q,OAAA2Q,EAAA,EAAA3Q,UAAA4Q,EAAA,EAAA5Q,CAAAiQ,EAAAO,EAAAxQ,eAzBA6H,EAAArC,EAAAsC,UACAC,oBACA,MAAApI,OAAeA,EAAAwQ,eAAsBjI,KAAAG,MACrC1I,GACAuI,KAAAG,MAAAoI,YAAAT,EAAAG,GAGApI,mBAAA8I,GACAA,EAAAV,cAAAjI,KAAAG,MAAA8H,aACAjI,KAAAG,MAAAoI,YAAAT,EAAA9H,KAAAG,MAAA8H,aAGApI,SACA,MAAA+I,eAAeA,EAAAnR,UAAyBuI,KAAAG,MACxC,OAAAR,EAAArC,EAAAuD,cAAAkF,GAA+C3C,OAAA,IAAApF,MAAA,IAAAjF,KAAAtB,EAAA0O,iBAAA/P,EAAA,EAAA6C,QAAA2P,QCZ/CC,IACKnQ,MAAA,UAAArC,MAAA,YACAqC,MAAA,UAAArC,MAAA,YACAqC,MAAA,SAAArC,MAAA,WA8FL,MAAAyS,EAAAhR,OAAA2Q,EAAA,EAAA3Q,UAAA4Q,EAAA,EAAA5Q,iBA5FA6H,EAAArC,EAAAsC,UACAC,cACAC,SAAAC,WACAC,KAAAkG,OACA6C,UAAA,GAEA/I,KAAAgJ,aAAA,MACA,MAAAJ,eAAmBA,GAAiB5I,KAAAkG,MACpC+B,EAAAjI,KAAAiJ,eAAAL,GACA5I,KAAAsG,UAA2ByC,UAAA,EAAAd,kBAE3BjI,KAAAkJ,kBAAA,MACAlJ,KAAAsG,UAA2ByC,UAAA,MAE3B/I,KAAAmJ,qBAAAC,KACA,MAAAjM,KAAmBA,EAAAkM,oBAAyBrJ,KAAAG,MAC5CkJ,EAAAD,EAAA/I,cAAAiJ,QAAAnM,KAEA6C,KAAAuJ,mBAAA,CAAAH,IACA,MAAAI,EAAAJ,EAAA/I,cACAhK,MACA4R,EAAAjI,KAAAiJ,eAAAO,GACAxJ,KAAAsG,UAA2BsC,eAAAY,EAAAvB,kBAG3BpI,eAAA5G,GACA,MAAAwQ,YAAeA,EAAAtM,QAAoB6C,KAAAG,MAEnCuJ,GACAC,QACAC,iBAAA,QACAC,kBAAA,EACAC,WAAA,UACAC,MAAA,GAEAC,UAAuBnK,CARvB/H,OAAAN,EAAA,EAAAM,CAAA2R,EAAAO,WAQuB7M,EAAA1E,GAAAoH,CAAA5G,GAAA,MAEvB,OAAAnB,OAAAmS,EAAA,EAAAnS,CAAA4R,GAEA7J,oBACA,MAAAqK,cAAeA,GAAgBlK,KAAAG,MAC/B,IAAAlH,EAAA,GACA,OAAAiR,GACA,cACAjR,EAAA,UACA,MACA,cAGA,aACAA,EAAA,UAGA,OAAAA,EAEA4G,oBACA,MAAAsK,EAAAnK,KAAAoK,oBACAnC,EAAAjI,KAAAiJ,eAAAkB,GACAnK,KAAAsG,UAAuBsC,eAAAuB,EAAAlC,gBAEvBpI,mBAAA8I,GACA,GAAA3I,KAAAG,MAAA+J,gBAAAvB,EAAAuB,cAAA,CACA,MAAAC,EAAAnK,KAAAoK,oBACApK,KAAAsG,UAA2BsC,eAAAuB,KAG3BtK,SACA,MAAAV,EAAeA,EAAAhC,OAAA+M,gBAAAG,WAAA7R,SAA0CwH,KAAAG,OACzDyI,eAAeA,EAAAX,eAA8BjI,KAAAkG,MAC7C,OAAAvG,EAAArC,EAAAuD,cAAAyJ,EAAA,EAAAC,MAAoDtS,IAAAkF,EAAAzE,MAAA8R,QAAArN,EAAAzE,MAAA+R,cAAA9K,EAAArC,EAAAuD,cAAA,SAAoFtH,KAAA,WAAA+P,QAAAe,EAAAjK,SAAAJ,KAAAmJ,uBAA2EuB,SACnN/K,EAAArC,EAAAuD,cAAAyJ,EAAA,EAAAK,UAAwD1S,IAAA,IAAA2S,SAAA,GACxDjL,EAAArC,EAAAuD,cAAA,cAAA/I,OAAA1B,EAAA,EAAA0B,CAAAqF,EAAA3E,QACAmH,EAAArC,EAAAuD,cAAA,aACA1D,EAAA3E,QAAA,KAAAvB,QAAA,GACAkI,EAAA,sBACA0L,SAAA7K,KAAAgJ,aAAA8B,cAAA9K,KAAAkJ,mBACAvJ,EAAArC,EAAAuD,cAAAkK,EAAA,OACApL,EAAArC,EAAAuD,cAAAmK,EAAA,OACArL,EAAArC,EAAAuD,cAAA,WACAlB,EAAArC,EAAAuD,cAAA,OAAoDH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAAoH,uBACpDrF,EAAArC,EAAAuD,cAAA,SAA0DH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAAqH,4BAC1D9F,EAAA,kBACA,KACAQ,EAAArC,EAAAuD,cAAA,UAA2DpI,GAAA0E,EAAAzE,MAAAyE,EAAAzE,MAAA6C,WAAA,GAAA6E,SAAAJ,KAAAuJ,oBAAiFV,EAAAnP,IAAAuR,IAC5I,GAAAA,EAAA5U,QAAA6T,EACA,OAAAvK,EAAArC,EAAAuD,cAAA,UAA2E5I,IAAAgT,EAAA5U,YAAA4U,EAAA5U,OAAyC8I,qBAAuB8L,EAAAvS,cAG3IsJ,QAAA4G,IACA5G,QAAAiG,IAAAtI,EAAArC,EAAAuD,cAAA2H,GAAwFP,cAAAW,4FCxGxF,SAAAsC,EAAAC,EAAAC,GACA,IAAA9N,EAAA+N,KAAAC,UAAAH,GACA5N,EAAA8N,KAAAC,UAAAF,GAOA,OANA9N,IACAA,EAAA,IAEAC,IACAA,EAAA,IAEAD,EACA7G,MAAA,IACA2G,OACA0B,KAAA,MACAvB,EACA9G,MAAA,IACA2G,OACA0B,KAAA,ICfA,MAAAyM,EAAAnG,EAAA;;;;QCKAoG,UAAA7L,EAAArC,EAAAsC,UACAC,cACAC,SAAAC,WACAC,KAAAkG,OACAuF,iBACAC,kBAAA1L,KAAAG,MAAAwL,aAAA,GACAC,aAAA,GACAC,gBAAA7L,KAAAG,MAAA2L,UACAC,cAAA/L,KAAAG,MAAA2L,UAAAE,UACAC,kBAAAjM,KAAAG,MAAA+L,OACA,SAAAlM,KAAAG,MAAA+L,MAAAC,SAAAnM,KAAAG,MAAA2L,UAAArT,KACA2T,gBAAA,OACAC,oBAAAC,EACA7U,YAAA6U,GAEAtM,KAAAuM,SAAA,CAAAL,IACA,MAAAT,KACA3T,OAAA0U,KAAAN,EAAAlC,UAAAzR,QAAAN,IACA,SAAAiU,EAAAlC,SAAA/R,GACA,GAAAwU,MAAAC,QAAAR,EAAAlC,SAAA/R,IACAiU,EAAAlC,SAAA/R,GAAAM,QAAAlC,IACA,MAAAsW,EAAA1U,EAAAQ,IAAAR,EACA0R,EAAA3J,KAAA4M,UAAAD,EAAAtW,GACAoV,EAAAoB,KAAAlD,SAGA,CACA,MAAAgD,EAAA1U,EAAAQ,IAAAR,EACA0R,EAAA3J,KAAA4M,UAAAD,EAAAT,EAAAlC,SAAA/R,IACAwT,EAAAoB,KAAAlD,MAIA3J,KAAAsG,UAA2BmF,oBAE3BzL,KAAA8M,aAAA,CAAA1D,IACA,MAAAsC,kBAAmBA,GAAoB1L,KAAAkG,MACvClG,KAAAsG,UAA2BmF,mBAC3BzL,KAAAG,MAAA4M,gBAAArB,EAAAjT,GAAA,IACA2Q,EAAA5I,mBAGAR,KAAAgN,YAAA,EAAAL,EAAAtW,KACA,MAAAqV,kBAAmBA,GAAoB1L,KAAAkG,MACvC+G,EAAAjN,KAAAkN,aAAAP,EAAAlU,GAAApC,GACA2J,KAAAG,MAAAgN,cAAAzB,EAAAjT,GAAAwU,KAGAjN,KAAAoN,gBAAA,EAAAT,EAAAtW,KACA,MAAAoB,OAAmBA,GAASuI,KAAAkG,MAC5B,IAAA+G,EAAA5W,EAaA,OAZAoB,KAAAsB,MAAA,YAAA4T,GACAlV,EAAAsB,KAAAR,QAAAQ,IACAA,EAAAsU,SAAA9U,QAAA8U,IACAA,EAAA/U,OAAAC,QAAAD,IACA,GAAAA,EAAAY,UAAA7C,GAAAiC,EAAAK,cAEA,OADAsU,EAAA3U,EAAAK,eACA,QAMAsU,IAGAjN,KAAAkN,aAAA,EAAAP,EAAAtW,KACA,MAAAoB,OAAmBA,GAASuI,KAAAkG,MAC5B,IAAA+G,EAAA5W,EAaA,OAZAoB,KAAAsB,MAAA,YAAA4T,GACAlV,EAAAsB,KAAAR,QAAAQ,IACAA,EAAAsU,SAAA9U,QAAA8U,IACAA,EAAA/U,OAAAC,QAAAD,IACA,GAAAA,EAAAK,gBAAAtC,GAAAiC,EAAAY,QAEA,OADA+T,EAAA3U,EAAAY,SACA,QAMA+T,IAEAjN,KAAA4M,UAAA,EAAAD,EAAAtW,KACA,MAAAqV,kBAAmBA,GAAoB1L,KAAAkG,MACvCoH,EAAAtN,KAAAoN,gBAAAT,EAAAtW,GACAkX,EAAAvN,KAAAwN,eAAAb,EAAAW,GACA,OACAX,MAAAjB,EAAAjT,GACAC,MAAA6U,EACAlX,WAGA2J,KAAAwN,eAAA,EAAAb,EAAAtW,KACA,IAAAoX,EAAA,GAmBA,OAZAA,GALAA,EADAd,EAAA7F,MACA6F,EAAA7F,MAGA6F,GAGAe,OAAA,GAAAC,cAAAF,EAAAG,MAAA,QACAvX,EAAAgW,eACAoB,MAAiCpX,EAAAgW,eAAAvF,OACjCzQ,EAAAgW,kBAA4ChW,EAAA4W,YAAAnG,OAAAzQ,EAAA4W,cAE5C5W,EAAAyQ,MACA2G,GAAApX,EAAAyQ,MAGA2G,GAAApX,EAEAoX,IAEAzN,KAAA6N,oBAAA,MACA7N,KAAAG,MAAA2N,oBAEA9N,KAAA+N,gBAAA,CAAA7O,IACA,MAAA0M,aAAmBA,EAAAF,qBAAkC1L,KAAAkG,MACrD,UAAAhH,EAAAjH,KAAA2T,KAAA3R,OAAA,IACA+F,KAAAsG,UAA+BsF,aAAA,KAC/B5L,KAAAgN,YAAAtB,EAAAE,GACA1M,EAAA8O,kBACA9O,EAAAsB,oBAGAR,KAAAiO,aAAAtE,KACA,MAAA8B,cAAmBA,GAAgBzL,KAAAkG,MACnCtC,EAAA6H,EAAAjM,QAAAmK,GACA,GAAA/F,GAAA,GACA,MAAAsK,MACAzC,EAAAmC,MAAA,EAAAhK,MACA6H,EAAAmC,MAAAhK,EAAA,IAEA5D,KAAAsG,UAA+BmF,cAAAyC,IAC/BlO,KAAAG,MAAA4M,gBAAApD,EAAAgD,MAAAhD,EAAAtT,UAGA2J,KAAAmO,iBAAAC,KACA,MAAA1C,kBAAmBA,GAAoB1L,KAAAkG,MACvCwF,IAAA0C,GACApO,KAAAsG,UACAsF,aAAA,GACAF,kBAAA0C,MAIApO,KAAAqO,2BAAA,MACA,MAAAxC,gBAAmBA,EAAAI,mBAAmCjM,KAAAkG,MACtDlG,KAAAsG,UAA2B2F,qBAC3BjM,KAAAG,MAAAmO,cAAAzC,EAAApT,IAAAwT,KAEAjM,KAAAuO,sBAAAC,KAEAxO,KAAAsG,UACAuF,gBAAA2C,EACAzC,cAAAyC,EAAAxC,UACAC,iBAJA,IAMAjM,KAAAG,MAAAmO,cAAAE,EAAA/V,IANA,KAQAuH,KAAAyO,mBAAA,CAAA7C,IACA5L,KAAAsG,UAA2BsF,mBAG3B/L,mBAAA8I,EAAA+F,GACA,MAAA/C,aAAeA,EAAAO,QAAAzU,SAAAqU,aAAyC9L,KAAAG,MACxDwO,EAAA,OAAA3O,KAAAkG,MAAAzO,QAAAyU,EAAAlC,SAAA9Q,SACAzB,GAAAyT,EAAAzT,EAAAkR,EAAAlR,UAAAkX,IAGAA,EACA3O,KAAAsG,UACA7O,UACiB,KACjBuI,KAAAuM,SAAAL,KAIAlM,KAAAuM,SAAAL,GAEAhB,EAAAS,EAAAhD,EAAAgD,eACA3L,KAAAsG,UACAoF,kBAAA1L,KAAAG,MAAAwL,aAAA,KAGAT,EAAAY,EAAAnD,EAAAmD,YACA9L,KAAAsG,UACAuF,gBAAAC,EACAG,kBAAAC,GAAA,SAAAA,EAAAC,SAAAL,EAAArT,QAKAoH,cACA,MAAA6L,kBAAeA,EAAAE,gBAAkC5L,KAAAkG,MACjD,OAAAwF,EAGA/L,EAAArC,EAAAuD,cAAA9C,EAAA,GAAgDqC,SAAAJ,KAAAyO,mBAAAlO,WAAAP,KAAA+N,gBAAAa,YAAAlD,EAAAkD,YAAArV,KAAA,OAAAlD,MAAAuV,IAFhD,KAIA/L,SACA,MAAAgP,iBAAeA,GAAmB7O,KAAAG,OAClCsL,cAAeA,EAAAC,oBAAAG,kBAAAE,gBAAAE,mBAAqFjM,KAAAkG,MACpG,OAAAvG,EAAArC,EAAAuD,cAAAiO,EAAA,OACAnP,EAAArC,EAAAuD,cAAAkO,EAAA,OACApP,EAAArC,EAAAuD,cAAAkO,EAAA,EAAAC,cAA0DC,YAAAjP,KAAAG,MAAAwL,aAAAD,oBAAAwD,qBAAAlP,KAAAmO,mBAC1DnO,KAAAmP,eACAxP,EAAArC,EAAAuD,cAAAuO,EAAA,OACAzP,EAAArC,EAAAuD,cAAAuO,EAAA,EAAAJ,cAAwDK,UAAArP,KAAAG,MAAAmP,WAAAzD,kBAAA0D,mBAAAvP,KAAAuO,wBACxD5O,EAAArC,EAAAuD,cAAAuO,EAAA,EAAAI,mBAA6DxD,UAAAD,EAAA0D,YAAAxD,EAAAyD,QAAA1P,KAAAqO,8BAC7D1O,EAAArC,EAAAuD,cAAA,OAAwCH,UAAA,cACxCf,EAAArC,EAAAuD,cAAA8O,EAAA,GAA6CjP,UAAA6K,EAAAqE,WAAAf,EAAAa,QAAA1P,KAAA6N,oBAAAgC,QAAAF,EAAA,EAAA3S,MAC7C2C,EAAArC,EAAAuD,cAAAiP,EAAA,GAA+CvV,KAAA,aAC/C,YACAkR,GACA,IAAAA,EAAAxR,QAAA0F,EAAArC,EAAAuD,cAAAiO,EAAA,EAAAiB,QAAA,KACApQ,EAAArC,EAAAuD,cAAA,UACAb,KAAAG,MAAA6P,aACA,aACAvE,GACAA,EAAAxR,OAAA,GAAA0F,EAAArC,EAAAuD,cAAAiO,EAAA,EAAAiB,QAAA,KACApQ,EAAArC,EAAAuD,cAAA,UACAb,KAAAG,MAAA6P,aACA,YACArQ,EAAArC,EAAAuD,cAAAkO,EAAA,EAAAkB,YAAA,wBACAtQ,EAAArC,EAAAuD,cAAAkO,EAAA,EAAAmB,KAAA,KAAAzE,EAAA/R,IAAA,CAAAyD,EAAAyG,IAAAjE,EAAArC,EAAAuD,cAAAkO,EAAA,EAAAxE,MAA6HtS,IAAA2L,EAAAuM,SAAAnQ,KAAAiO,aAAAmC,WAAAjT,GAA4DA,EAAAzE,SACzLiH,EAAArC,EAAAuD,cAAA,KAA0CwP,KAAA,IAAAX,QAAA1P,KAAA8M,cAAwC,wBAGlFtB,EAAAtK,cAA+BoP,kBAAAC,EAAA,8EC3O/B,MAAAC,GAAA3S,EAAA,EAAAC,QACA2S,OACAC,IACAtP,aAAAlD,EAAA,EAAA7H,OAEAsa,OACAxN,YAAAjF,EAAA,EAAAgF,KAEA0N,IACA/K,WAAA3H,EAAA,EAAAgF,QCGA2N,KACKnY,MAAA,QAAArC,MAAA,UACAqC,MAAA,UAAArC,MAAA,YAuEL,IAAAya,GAAAhZ,OAAA4Q,EAAA,EAAA5Q,QAAAkQ,EAAA,EAAAlQ,CAAAoO,KACAnH,MAAAgS,EAAA,EAAAC,kBAAA9K,GACAvK,OAAAoV,EAAA,EAAAE,aAAA/K,GACAgL,YAAAH,EAAA,EAAAI,wBAAAjL,GACAkL,kBAAAC,EAAA,EAAAC,wBAAApL,OAEAqL,aAAAR,EAAA,EAAAQ,aACAC,iBAAAH,EAAA,EAAAG,kBAPA,CAQC1Z,OAAA2Q,EAAA,EAAA3Q,iBA7ED6H,EAAArC,EAAAsC,UACAC,cACAC,SAAAC,WACAC,KAAAyR,cACA3H,WAAA,SAEA9J,KAAAkG,MAAApO,OAAAc,UAAqCoH,KAAAyR,cACrCzR,KAAAiJ,eAAA,MACA,MAAAyI,UAAmBA,EAAAC,aAAAC,QAAA1F,SAAsClM,KAAAG,OACzD2J,WAAmBA,GAAa9J,KAAAkG,MAChCwD,EAAA5R,OAAAc,UAA6CsT,GAAUlC,cAAAsC,EAAAH,cAAAG,IACvD5C,EAAAC,OAAAG,aACA,IAAA7B,EAAAnQ,OAAAmS,EAAA,EAAAnS,CAAA4R,GACA,GAAAiI,EACA1J,gBAA4CyJ,YAG5C,UAAAvU,KAAAyU,EACA3J,gBAAgDyJ,MAAUvU,EAAAzE,MAG1D,OAAAuP,IAEAjI,KAAA6R,aAAA,MACA7R,KAAAG,MAAAqR,qBAEAxR,KAAA8R,kBAAA,MACA,MAAAP,aAAmBA,GAAevR,KAAAG,MAClCoR,EAAA,OAAAvR,KAAAiJ,oBAEAjJ,KAAA+R,uBAAA,EAAAC,EAAA5I,KACApJ,KAAAsG,UAA2BwD,WAAAV,EAAA/I,cAAAhK,UAG3BwJ,mBAAA8I,GACA,MAAA6I,iBAAeA,EAAAN,cAAAE,qBAAmDpR,KAAAG,MAClEiR,IAAAzI,EAAAyI,mBACApR,KAAAsG,SAAAxO,OAAAc,UAA0CoH,KAAAyR,eAE1CzR,KAAAG,MAAAxE,SAAAgN,EAAAhN,QACA,IAAAuV,IACAe,IAAAjS,KAAAG,MAAAxE,OAAA,yBACA6V,KAGA3R,SACA,MAAAqR,YAAeA,EAAAQ,YAAAE,QAAAzS,KAAmCa,KAAAG,OAClD2J,WAAeA,GAAa9J,KAAAkG,MAO5B,OANAlG,KAAAG,MAAAiR,mBACAtZ,OAAAsF,GAAA,EAAAtF,CAAA8Z,GACA3Z,IAAA,KACAC,UAAA,IAGAyH,EAAArC,EAAAuD,cAAAqR,EAAA,GAA4CxR,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA0Y,GAAAC,OAAA0B,SAAA,EAAAC,OAAApS,KAAAG,MAAAiR,kBAAAiB,QAAArS,KAAA6R,aAAA/K,MAAA3H,EAAA,gBAAAuL,SAC5C/K,EAAArC,EAAAuD,cAAA8O,EAAA,EAAA7X,OAAAc,UAA4Dd,OAAA4D,EAAA,EAAA5D,CAAA4D,EAAA,EAAAC,OAAAC,aAA4C3D,IAAA,SAAAyX,QAAA1P,KAAA6R,aAAAhC,QAAAF,EAAA,EAAA2C,YAA8EnT,EAAA,kBACtLQ,EAAArC,EAAAuD,cAAA8O,EAAA,EAAA7X,OAAAc,UAA4Dd,OAAA4D,EAAA,EAAA5D,CAAA4D,EAAA,EAAAC,OAAAE,aAA4C+T,WAAA,IAAAsB,EAAAjZ,IAAA,UAAAyX,QAAA1P,KAAA8R,kBAAAjC,QAAAF,EAAA,EAAA4C,UAAkIpT,EAAA,qBAE1OQ,EAAArC,EAAAuD,cAAA,UAAA1B,EAAA,kBAAiElG,QAAAyY,KACjE/R,EAAArC,EAAAuD,cAAAM,EAAA,GAA4CzI,MAAAyG,EAAA,0BAC5CQ,EAAArC,EAAAuD,cAAAlB,EAAArC,EAAAkV,SAAA,KAAA3B,GAAAnX,IAAA,CAAAuR,EAAArH,IAAAjE,EAAArC,EAAAuD,cAAA,WACAlB,EAAArC,EAAAuD,cAAA4R,EAAA,GAAgD7C,YAAA,EAAA8C,aAAApG,IAAArB,EAAA5U,MAAA4B,IAAA2L,EAAAvN,MAAA4U,EAAA5U,MAAAiT,QAAAQ,IAAAmB,EAAA5U,MAAAkE,KAAA,aAAA6F,SAAAJ,KAAA+R,uBAAAY,aAAAxT,EAAA8L,EAAAvS,SAChDiH,EAAArC,EAAAuD,cAAA,YAAA1B,EAAA8L,EAAAvS,YACAiH,EAAArC,EAAAuD,cAAAM,EAAA,GAA4CzI,MAAAyG,EAAA,mBAA8BlG,QAAAyY,KAC1E/R,EAAArC,EAAAuD,cAAA,UAAA+Q,EAAAlY,IAAA,CAAAkZ,EAAAhP,IACAjE,EAAArC,EAAAuD,cAAA,MAAsD5I,IAAA2L,GAAagP,EAAAla,eCnEnE,MAAAma,GAAA,OACAC,IACAnJ,QACAC,iBAAA,QACAC,kBAAA,EACAC,WAAA,WAEAE,UACA9Q,QAAA,KAEAiT,UACA3T,MAAA,SAGAua,KACKra,MAAA,UAAArC,MAAA,YACAqC,MAAA,UAAArC,MAAA,YACAqC,MAAA,SAAArC,MAAA,WAkRL,MAAA2c,GAAAlb,OAAAkQ,EAAA,EAAAlQ,CAAA,CAAAoO,EAAA/F,KACA,MAAA8S,EAAAnb,OAAAmS,EAAA,EAAAnS,CAAAqI,EAAA+S,SAAAC,QACAjH,GACAvC,OAAA7R,OAAAc,UAAgCka,GAAAnJ,OAAAsJ,EAAAtJ,QAChCK,SAAAiJ,EAAAjJ,UAAA8I,GAAA9I,SACAmC,SAAA8G,EAAA9G,UAAA2G,GAAA3G,UAEAlE,EAAAnQ,OAAAmS,EAAA,EAAAnS,CAAAoU,GAGA,OACAzU,OAHAyQ,EAAA,EAAAC,aAAAjC,EAAA,OAAA+B,GAIAG,kBAHAF,EAAA,EAAAG,wBAAAnC,EAAA,OAAA+B,GAIAA,cACAiE,WAGAkH,IACA7K,YAAAL,EAAA,EAAAK,YACA8K,gBAAAhC,EAAA,EAAAgC,iBAEA1V,EAAA,EAAA7F,OAAA2Q,EAAA,EAAA3Q,EAAA,CAAAA,OAAA4Q,EAAA,EAAA5Q,CAAAkb,GAAAI,GAAAtb,eArSA6H,EAAArC,EAAAsC,UACAC,YAAAyT,EAAAC,GACAzT,MAAAwT,EAAAC,GACAvT,KAAAyR,cACA+B,kBAEAxT,KAAAkG,MAAApO,OAAAc,UAAqCoH,KAAAyR,cACrCzR,KAAAuJ,mBAAA,CAAAH,IACA,MAAAqK,QAAmBA,GAAUzT,KAAAG,MAG7BuJ,GACAM,UACAnK,CAJAuJ,EAAA/I,cACAhK,OAGA,KAEA8V,UAA2B3T,MAAA,SAE3Bib,EAAAC,QAAA1T,KAAA2T,iBAAAjK,IACA1J,KAAAsG,UAA2BkN,qBAE3BxT,KAAAqJ,iBAAA,EAAAC,EAAAnM,KACA,MAAAqW,cAAmBA,GAAgBxT,KAAAkG,MACnC,IAAAgI,MAAAsF,EAAArW,GACA,IAAAmM,EAAA,CACA,IAAA1F,GAAA,EACA,QAAAjK,EAAA,EAA+BA,EAAA6Z,EAAAvZ,OAA0BN,IACzD,GAAA6Z,EAAA7Z,GAAAjB,QAAAyE,EAAAzE,MAAA,CACAkL,EAAAjK,EACA,MAGAiK,GAAA,IACAsK,MACAsF,EAAA5F,MAAA,EAAAhK,MACA4P,EAAA5F,MAAAhK,EAAA,KAIA5D,KAAAsG,UAA2BkN,cAAAtF,MAE3BlO,KAAA4T,oBAAAxK,KACA,MAAA8C,MAAmBA,EAAAzU,UAAgBuI,KAAAG,MACnC,IAAA3G,KACA,GAAA4P,EAAA/I,cAAAiJ,QAAA,CACA,MAAAoI,EAAA5Z,OAAAN,EAAA,EAAAM,CAAAoU,EAAAlC,UACAxQ,EAAA1B,OAAAN,EAAA,EAAAM,EACAL,SACAC,MAAAga,IAGA1R,KAAAsG,UAA2BkN,cAAAha,MAE3BwG,KAAA6T,aAAA,MACA,MAAA3H,MAAmBA,EAAAgH,WAAA3K,cAAAkL,UAAAxL,eAAqDjI,KAAAG,MACxE+S,EAAAC,OAOA5K,EAAAsK,GAAA5K,GANAwL,EAAAC,QAAA1T,KAAA2T,kBACA3J,SAAAkC,EAAAlC,SACAmC,UAA+B3T,MAAA,aAO/BwH,KAAA8T,gBAAA,CAAApC,IACA,MAAAvS,EAAmBA,GAAIa,KAAAG,MACvB,kBAAAuR,IAGAjZ,GAAA,UACAqO,MAAA3H,EAAA,sCACAyP,YAAAzP,EAAA,2CACAiP,WAAA,SAIA,YAAAsD,IAGAjZ,GAAA,UACAqO,MAAA3H,EAAA,sCACAyP,YAAAzP,EAAA,2CACAiP,WAAA,SAIA,WAAAsD,IAGAjZ,GAAA,SACAqO,MAAA3H,EAAA,qCACAyP,YAAAzP,EAAA,0CACAiP,WAAA,cAMApO,KAAA+T,aAAA,CAAArC,IACA,MAAAvS,EAAmBA,GAAIa,KAAAG,MACvB,kBAAAuR,IAGAjZ,GAAA,gBACAuT,WAAA,EACAlF,MAAA3H,EAAA,6BAGA1G,GAAA,QACAuT,WAAA,EACAlF,MAAA3H,EAAA,6BAIA,YAAAuS,IAGAjZ,GAAA,UACAuT,WAAA,EACAlF,MAAA3H,EAAA,6BAGA1G,GAAA,QACAuT,WAAA,EACAlF,MAAA3H,EAAA,6BAIA,WAAAuS,IAGAjZ,GAAA,SACAuT,WAAA,EACAlF,MAAA3H,EAAA,6BAGA1G,GAAA,QACAuT,WAAA,EACAlF,MAAA3H,EAAA,kCAMAa,KAAAgU,WAAA,CAAA7W,IACA,MAAAqW,cAAmBA,GAAgBxT,KAAAkG,MACnC,IAAAmE,GAAA,EACA,UAAA4J,KAAAT,EACA,GAAAS,EAAAvb,QAAAyE,EAAAzE,MAAA,CACA2R,GAAA,EACA,MAGA,OAAAA,IAEArK,KAAAqJ,iBAAArJ,KAAAqJ,iBAAA6K,KAAAlU,MACAA,KAAA8N,gBAAA9N,KAAA8N,gBAAAoG,KAAAlU,MACAA,KAAAmN,cAAAnN,KAAAmN,cAAA+G,KAAAlU,MACAA,KAAA+M,gBAAA/M,KAAA+M,gBAAAmH,KAAAlU,MACAA,KAAAsO,cAAAtO,KAAAsO,cAAA4F,KAAAlU,MAEAH,oBACAG,KAAA6T,eACA7T,KAAAsG,aAEAzG,mBAAA8I,GACA,MAAAuK,SAAeA,EAAAzb,SAAAwQ,eAAgCjI,KAAAG,MAC/CwI,EAAAV,iBAAAxQ,GAAAyb,EAAAC,QACAnT,KAAA6T,eAGAhU,iBAAAqM,GACA,eAAwBpU,OAAAmS,EAAA,EAAAnS,CAAAoU,KAExBrM,kBACAG,KAAAG,MAAAkT,kBAEAxT,cAAAuO,EAAAnB,GACA,MAAAwG,QAAeA,EAAAvH,SAAiBlM,KAAAG,MAChC+L,EAAAlC,SAAAoE,GACA,MAAAlC,EAAAlC,SAAAoE,GACAlC,EAAAlC,SAAAoE,GAAAnB,EAEAf,EAAAlC,SAAAoE,GAAA+F,SAAAlH,KACAf,EAAAlC,SAAAoE,IAAAlC,EAAAlC,SAAAoE,GAAAnB,IAIAf,EAAAlC,SAAAoE,IAAAnB,GAEA,MAAAmH,EAAApU,KAAA2T,iBAAAzH,GACAuH,EAAAC,QAAAU,GAEAvU,gBAAAuO,EAAAnB,GACA,MAAAwG,QAAeA,EAAAvH,SAAiBlM,KAAAG,MAChC,QAAA8M,GAAAR,MAAAC,QAAAR,EAAAlC,SAAAoE,IAGA,CACA,MAAAxK,EAAAsI,EAAAlC,SAAAoE,GAAA5O,QAAAyN,GACA,GAAArJ,GAAA,GACA,MAAAsK,MACAhC,EAAAlC,SAAAoE,GAAAR,MAAA,EAAAhK,MACAsI,EAAAlC,SAAAoE,GAAAR,MAAAhK,EAAA,IAEAsI,EAAAlC,SAAAoE,GAAAF,QATAhC,EAAAlC,SAAAoE,GAAA,IAYA,MAAAgG,EAAApU,KAAA2T,iBAAAzH,GACAuH,EAAAC,QAAAU,GAEAvU,cAAA2O,EAAAvC,GACA,MAAAwH,QAAeA,EAAAvH,SAAiBlM,KAAAG,MAChC+L,EAAAC,YACAD,EAAAC,SAAAqC,GAAAvC,EAAA,aACA,MAAAmI,EAAApU,KAAA2T,iBAAAzH,GACAuH,EAAAC,QAAAU,GAEAvU,SACA,MAAA2T,cAAeA,GAAgBxT,KAAAkG,OAC/BgG,MAAeA,EAAAzU,SAAA0H,KAAmBa,KAAAG,MAClCuR,EAAA5Z,OAAAN,EAAA,EAAAM,CAAAoU,EAAAlC,UACA2B,EAAA3L,KAAA8T,gBAAApC,GACApC,EAAAtP,KAAA+T,aAAArC,GACA9W,EAAA,IAAAC,KACArB,EAAA1B,OAAAN,EAAA,EAAAM,EACAL,SACAC,MAAAga,IAEA,IAAA5F,EAAAwD,EAAA,GACA,UAAA3C,KAAA2C,EACA,GAAApD,EAAAC,UAAAD,EAAAC,SAAAQ,EAAAlU,IAAA,CACAqT,EAAAa,EACA,MAGA,OAAAhN,EAAArC,EAAAuD,cAAA,OAA4CH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAAsG,kBAC5CvE,EAAArC,EAAAuD,cAAA,UAA2CH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAAwG,SAC3CzE,EAAArC,EAAAuD,cAAA,WACAlB,EAAArC,EAAAuD,cAAAwT,EAAA,GAAgDC,KAAA,OAAcnV,EAAA,uBAC9DQ,EAAArC,EAAAuD,cAAA,OAAgDH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAAkH,kBAChDnF,EAAArC,EAAAuD,cAAA,SAAsDH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAAmH,uBACtD5F,EAAA,kBACA,KACAQ,EAAArC,EAAAuD,cAAA,UAAuDxK,MAAAqb,EAAAtR,SAAAJ,KAAAuJ,oBAAsDwJ,GAAArZ,IAAAuR,GAAAtL,EAAArC,EAAAuD,cAAA,UAA+D5I,IAAAgT,EAAA5U,YAAA4U,EAAA5U,OAAyC8I,qBAAuB8L,EAAAvS,cAC5OsJ,QAAAvK,IAAAkI,EAAArC,EAAAuD,cAAA,OAAgEH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAApF,QAChEmH,EAAArC,EAAAuD,cAAAwT,EAAA,GAAgD3T,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAA8G,YAAA4P,KAAA,OAAiDxc,OAAA1B,EAAA,EAAA0B,CAAAL,EAAAe,MAAAnC,QACjGsJ,EAAArC,EAAAuD,cAAA,OAAgDH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAA6G,aAChD9E,EAAArC,EAAAuD,cAAA,OAAoDH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAAgH,iBAAwCzF,EAAA,eAC5FQ,EAAArC,EAAAuD,cAAA,OAAoDH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAAiH,iBAAwC1F,EAAA,cAAmBoV,MAAA3Z,EAAA4Z,WAAAC,KAAA,QAC/G9U,EAAArC,EAAAuD,cAAA,OAAwCH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAAqG,UACxCtE,EAAArC,EAAAuD,cAAA,OAA4CH,UAAA5I,OAAA+F,EAAA,EAAA/F,CAAA8F,EAAAsH,mBAC5CvF,EAAArC,EAAAuD,cAAA,OAAgDH,UAAA2E,GAChD1F,EAAArC,EAAAuD,cAAA2K,GAA6DkJ,WAAAvV,EAAA,4BAAAwM,eAAAkD,iBAAA,IAAA2E,EAAAvZ,OAAA6T,gBAAA9N,KAAA8N,gBAAAX,cAAAnN,KAAAmN,cAAAJ,gBAAA/M,KAAA+M,gBAAAuB,cAAAtO,KAAAsO,cAAAxC,YAAAwD,aAAA7X,SAAAuY,aAAAxW,EAAAS,OAAAiS,UAC7DvM,EAAArC,EAAAuD,cAAAiQ,IAA0Da,WAAA6B,EAAAvZ,SAAAT,EAAAS,OAAAyX,YAAAE,MAAA4B,EAAAtH,YAC1DvM,EAAArC,EAAAuD,cAAA,OAA4CH,UAAAyE,GAC5CxF,EAAArC,EAAAuD,cAAAyJ,EAAA,OACA3K,EAAArC,EAAAuD,cAAAyJ,EAAA,EAAAC,MAA4DtS,IAAA,cAAAuS,QAAArL,EAAA,kCAC5DlG,QAAAyY,IAC6BjH,cAAA9K,EAAArC,EAAAuD,cAAA,SAAgDtH,KAAA,WAAA+P,QAAAkK,EAAAvZ,SAAAT,EAAAS,OAAAmG,SAAAJ,KAAA4T,sBAA+GlJ,SAC5L/K,EAAArC,EAAAuD,cAAAyJ,EAAA,EAAAK,UAAwE1S,IAAA,KACxE0H,EAAArC,EAAAuD,cAAA,cACA1B,EAAA,kCACA6C,QAAAvK,IAAAkI,EAAArC,EAAAuD,cAAAlB,EAAArC,EAAAkV,SAAA,KAAArT,EAAA,qCACA3G,MAAAV,OAAA1B,EAAA,EAAA0B,CAAAL,EAAAe,MAAAnC,eAGAmD,EAAAE,IAAA,CAAAkZ,EAAAhP,IACAjE,EAAArC,EAAAuD,cAAAiI,GAAsE7Q,IAAA2L,EAAA6F,YAAAyC,EAAAhC,cAAAwH,EAAAvU,KAAAyV,EAAAvJ,iBAAArJ,KAAAqJ,iBAAAgB,SAAArK,KAAAgU,WAAApB,GAAApa,MAAAf,EAAAe,MAAAnC,2FC7StEsH,EAAA,QAAA7F,OAAA6c,EAAA,IAAA7c,CAAA8c,EAAA,CAAAC,EAAA","file":"759fccde6ca4d3592ed2.bundle.js","sourcesContent":["export const formatValue = (value, unit, options = {}) => {\n    const lookup = unit && unit.split('-')[0].toLowerCase();\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n            return formatStorage(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, _unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatStorage = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","import { sort } from './sort';\nconst groups = ['services', 'accounts', 'instance_types', 'regions'];\nexport function getComputedReportItems({ report, idKey, labelKey = idKey, sortKey = 'total', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const total = value.total;\n                const id = value[idKey];\n                let label = value[labelKey];\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        id,\n                        total,\n                        label,\n                        units: value.units,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { total: itemMap[id].total + total });\n            });\n        }\n        groups.forEach(group => {\n            if (dataPoint[group]) {\n                return dataPoint[group].forEach(visitDataPoint);\n            }\n        });\n    };\n    report.data.forEach(visitDataPoint);\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import format from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport startOfMonth from 'date-fns/start_of_month';\nimport { getComputedReportItems, } from 'utils/getComputedReportItems';\nexport function transformReport(report, type = 1 /* daily */, key = 'date') {\n    if (!report) {\n        return [];\n    }\n    const computedItems = getComputedReportItems({\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    });\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d.total, d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    return {\n        x: xVal,\n        y: parseFloat(value.toFixed(2)),\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums) {\n    if (!datums.length) {\n        const today = new Date();\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRangeString(datums) {\n    const [start, end] = getDatumDateRange(datums);\n    const monthName = format(start, 'MMM');\n    const startDate = getDate(start);\n    const endDate = getDate(end);\n    return `${monthName} ${getDate(start)}${startDate !== endDate ? ` - ${endDate}` : ''}`;\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'MMM D YYYY');\n        return `${date}: ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BorderColor, global_BorderColor_dark, global_BorderWidth_md, global_BorderWidth_sm, global_danger_color_100, global_danger_color_200, global_FontSize_md, global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    textInput: {\n        width: '100%',\n        fontSize: global_FontSize_md.value,\n        paddingTop: global_spacer_xs.value,\n        paddingRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xs.value,\n        paddingLeft: global_spacer_sm.value,\n        lineHeight: '24px',\n        outline: 0,\n        border: `${global_BorderWidth_sm.value} solid ${global_BorderColor.value}`,\n        ':focus': {\n            borderColor: global_BorderColor_dark.value,\n        },\n    },\n    flat: {\n        border: 'none',\n        borderBottom: [\n            global_BorderWidth_sm.value,\n            'solid',\n            global_BorderColor.value,\n        ].join(' '),\n        ':focus': {\n            borderBottom: [\n                global_BorderWidth_md.value,\n                'solid',\n                global_BorderColor_dark.value,\n            ].join(' '),\n        },\n    },\n    error: {\n        borderColor: global_danger_color_100.value,\n        ':focus': {\n            borderColor: global_danger_color_200.value,\n        },\n    },\n});\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './textInput.styles';\nexport class TextInput extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleChange = (evt) => {\n            this.props.onChange(evt.currentTarget.value, evt);\n        };\n        this.handleKeyPressed = (evt) => {\n            if (this.props.onKeyPress && evt.key === 'Enter') {\n                evt.preventDefault();\n                this.props.onKeyPress(evt);\n            }\n        };\n    }\n    render() {\n        const _a = this.props, { className, isFlat, isError } = _a, props = __rest(_a, [\"className\", \"isFlat\", \"isError\"]);\n        return (React.createElement(\"input\", Object.assign({}, props, { className: css(className, styles.textInput, isFlat && styles.flat, isError && styles.error), onChange: this.handleChange, onKeyPress: this.handleKeyPressed })));\n    }\n}\n","import React from 'react';\nlet currentId = 0;\nclass RandomId extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.id = `${this.props.prefix}${currentId++}`;\n    }\n    render() {\n        return this.props.children({ id: this.id });\n    }\n}\nRandomId.defaultProps = {\n    prefix: 'random-id-',\n};\nexport { RandomId };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontWeight_normal, global_gutter, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    formGroup: {\n        marginBottom: global_gutter.value,\n    },\n    label: {\n        display: 'block',\n        fontWeight: global_FontWeight_normal.value,\n        paddingBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { RandomId } from '../randomId';\nimport { styles } from './formGroup.styles';\nexport const FormGroup = ({ label, children }) => (React.createElement(RandomId, { prefix: label }, ({ id }) => (React.createElement(\"div\", { className: css(styles.formGroup) },\n    React.createElement(\"label\", { className: css(styles.label), htmlFor: id }, label),\n    React.createElement(\"div\", null, React.cloneElement(React.Children.only(children), { id }))))));\n","import { css } from '@patternfly/react-styles';\nimport { StyleSheet } from '@patternfly/react-styles';\nimport React from 'react';\nconst styles = StyleSheet.create({\n    legend: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n});\nconst ChartLegend = ({ children, style }) => {\n    const styling = Boolean(style) && Boolean(style.legend) ? style.legend : styles.legend;\n    return React.createElement(\"div\", { className: css(styling) }, children);\n};\nexport { ChartLegend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_dark_100, global_Color_light_100, global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    padding: 8,\n    group: {\n        data: { strokeWidth: 2, fillOpacity: 0.4 },\n    },\n    tooltipText: {\n        fontSize: '14px',\n        fill: global_Color_light_100.value,\n    },\n    tooltipFlyout: { fill: global_Color_dark_100.value },\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    reportSummaryTrend: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        ':not(foo) text': {\n            fontSize: '12px',\n            length: '12px',\n        },\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BorderWidth_sm, global_Color_200, global_FontSize_xs, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { chartStyles } from './chart.styles';\nexport const styles = StyleSheet.create({\n    legendItem: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginRight: global_spacer_md.value,\n    },\n    color: {\n        height: 10,\n        width: 10,\n        marginRight: global_spacer_sm.value,\n        borderWidth: global_BorderWidth_sm.value,\n        borderStyle: 'solid',\n    },\n    currentColor: {\n        backgroundColor: chartStyles.currentMonth.data.fill,\n        borderColor: chartStyles.currentMonth.data.stroke,\n    },\n    previousColor: {\n        backgroundColor: chartStyles.previousMonth.data.fill,\n        borderColor: chartStyles.previousMonth.data.stroke,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './chartLegendItem.styles';\nimport { getDateRangeString } from './chartUtils';\nconst ChartLegendItem = ({ data, isCurrent, idKey = 'date', index, style, }) => {\n    if (!data || data.length === 0) {\n        return React.createElement(\"div\", null);\n    }\n    const styling = Boolean(style) && Boolean(style.legendItem)\n        ? style.legendItem\n        : styles.legendItem;\n    if (idKey === 'date') {\n        const label = getDateRangeString(data);\n        return (React.createElement(\"div\", { className: css(styling) },\n            React.createElement(\"div\", { className: css(styles.color, isCurrent ? styles.currentColor : styles.previousColor) }),\n            label));\n    }\n    else {\n        return (React.createElement(\"div\", { key: data[index].key, className: css(styling) },\n            React.createElement(\"div\", { className: css(styles.color, isCurrent ? styles.currentColor : styles.previousColor) }),\n            data[index].key));\n    }\n};\nexport { ChartLegendItem };\n","import { css } from '@patternfly/react-styles';\nimport { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_xs, global_spacer_sm } from '@patternfly/react-tokens';\nimport React from 'react';\nconst styles = StyleSheet.create({\n    chartTitle: {\n        fontSize: global_FontSize_xs.value,\n        marginBottom: global_spacer_sm.value,\n    },\n});\nconst ChartTitle = ({ children }) => (React.createElement(\"div\", { className: css(styles.chartTitle) }, children));\nexport { ChartTitle };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_BackgroundColor_300, global_BorderRadius_sm, global_BoxShadow_sm, global_Color_100, global_Color_200, global_Color_light_100, global_Color_light_200, global_disabled_color_100, global_FontSize_lg, global_FontSize_md, global_FontSize_sm, global_FontSize_xs, global_FontWeight_bold, global_FontWeight_normal, global_LineHeight_md, global_primary_color_100, global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.var,\n        paddingTop: global_spacer_xl.value,\n        height: '100%',\n    },\n    costDetailsPage: {\n        backgroundColor: global_BackgroundColor_300.var,\n        minHeight: '100%',\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    headerLeft: {\n        flex: 1,\n    },\n    headerRight: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    total: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    totalLabel: {},\n    totalValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    totalLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    totalLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    innerGroupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: global_FontSize_sm.value,\n    },\n    innerGroupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_300.value,\n    },\n});\nexport const listViewOverride = css `\n  min-height: 100%;\n  padding: 0 ${global_spacer_xl.value};\n  background-color: ${global_Color_light_200.value};\n  ${global_Color_100.name}: ${global_Color_light_100.value};\n  ${global_Color_200.name}: ${global_Color_light_200.value};\n\n  .list-view-pf {\n    margin-top: 0;\n  }\n  .list-group-item:hover {\n    background-color: #fff;\n    box-shadow: ${global_BoxShadow_sm.value};\n    z-index: 1;\n  }\n\n  & * {\n    // outline: 1px solid blue;\n  }\n\n  .list-group-item-heading,\n  strong {\n    font-weight: ${global_FontWeight_normal.value};\n    word-break: break-word;\n  }\n\n  .list-group-item-heading {\n    font-size: ${global_FontSize_md.value};\n  }\n\n  .list-view-pf-main-info {\n    padding: 0;\n  }\n\n  .list-view-pf-actions,\n  .fa-angle-right {\n    margin: 0;\n  }\n\n  input[type='checkbox'] {\n    margin: 0;\n  }\n\n  .list-view-pf-description {\n    display: inline-flex;\n    margin-left: 0;\n    float: none;\n  }\n\n  .list-view-pf-additional-info {\n    flex: 0 0 40%;\n    float: none;\n    width: auto;\n  }\n\n  .list-view-pf-actions {\n    flex: 0 0 25%;\n  }\n\n  .list-group-item-header {\n    display: flex;\n    align-items: center;\n  }\n\n  & .list-view-pf-main-info {\n    flex: 1;\n  }\n\n  .list-view-pf-checkbox {\n    border: none;\n    margin-top: 0;\n    margin-bottom: 0;\n    display: inline-flex;\n    align-items: center;\n  }\n\n  .list-view-pf-expand {\n    min-width: 1.5rem;\n    margin-top: 0;\n    margin-bottom: 0;\n    display: inline-flex;\n    align-items: center;\n  }\n\n  .list-view-pf-additional-info-item {\n    align-items: flex-start;\n    text-align: left;\n    word-break: break-word;\n  }\n\n  .list-view-pf-actions .list-view-pf-additional-info-item {\n    align-items: flex-end;\n  }\n\n  .list-view-pf-additional-info-item strong {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    font-size: ${global_FontSize_md.value};\n  }\n\n  .list-view-pf-additional-info-item span {\n    font-size: ${global_FontSize_xs.value};\n    color: ${global_disabled_color_100.value};\n  }\n\n  .list-group-item {\n    padding: ${global_spacer_lg.value} ${global_spacer_xl.value};\n    border-bottom: 2px solid #f2f2f2;\n  }\n\n  .list-group-item:first-child {\n    border-top: 0;\n    padding: 0.55rem ${global_spacer_lg.value} ${global_spacer_xs.value} 3.5rem;\n\n    &,\n    .list-group-item-heading,\n    .list-view-pf-additional-info-item strong {\n      font-size: ${global_FontSize_sm.value};\n      font-weight: ${global_FontWeight_bold.value};\n    }\n\n    .list-view-pf-additional-info {\n      transform: translateX(-0.55rem);\n    }\n\n    .list-view-pf-actions .list-view-pf-additional-info-item {\n      float: right;\n    }\n  }\n\n  .list-group-item-container {\n    padding: ${global_spacer_lg.value} ${global_spacer_3xl.value}\n      ${global_spacer_lg.value} ${global_spacer_3xl.value};\n    margin: ${global_spacer_lg.value} -${global_spacer_xl.value} -${global_spacer_lg.value} -${global_spacer_xl.value};\n    background-image: linear-gradient(\n      to right,\n      ${global_primary_color_100.value},\n      ${global_primary_color_100.value} 3px,\n      transparent 3px\n    );\n  }\n\n  .list-group-item.list-view-pf-expand-active {\n    background-color: #fff;\n  }\n\n  .list-view-pf-expand-active {\n    box-shadow: ${global_BoxShadow_sm.value};\n    z-index: 1;\n    background-image: linear-gradient(\n      to right,\n      ${global_primary_color_100.value},\n      ${global_primary_color_100.value} 3px,\n      transparent 3px\n    );\n  }\n`;\nexport const toolbarOverride = css `\n  margin-left: ${global_spacer_xl.value};\n  margin-right: ${global_spacer_xl.value};\n  background-color: ${global_Color_light_100.value};\n  font-size: ${global_FontSize_xs.value};\n\n  .pf-c-button {\n    border-radius: 0;\n    padding-left: 0;\n    padding-right: 0;\n    display: inline-flex;\n    align-items: center;\n  }\n\n  .fa-download {\n    color: ${global_Color_100.value};\n    margin-right: ${global_spacer_sm.value};\n    font-size: 1.125rem;\n  }\n\n  .toolbar-pf-actions {\n    display: flex;\n    padding-top: ${global_spacer_sm.value};\n    padding-bottom: ${global_spacer_sm.value};\n  }\n\n  .form-group {\n    border: none;\n  }\n\n  .btn {\n    line-height: 28px;\n  }\n\n  .btn-link {\n    color: ${global_Color_200.value};\n    margin-left: ${global_spacer_sm.value};\n  }\n\n  .btn-link .fa {\n    font-size: ${global_FontSize_lg.value};\n    color: ${global_Color_100.value};\n  }\n\n  .pf-m-plain {\n    padding: 0;\n    display: flex;\n    align-items: center;\n  }\n\n  .dropdown .btn {\n    border-radius: ${global_BorderRadius_sm.value};\n    background: transparent;\n    box-shadow: none;\n    border-color: #c7c7c7;\n    font-size: ${global_FontSize_md.value};\n    font-weight: 500;\n    padding-left: ${global_spacer_sm.value};\n    padding-right: ${global_spacer_sm.value};\n  }\n\n  input[type='text'] {\n    border-color: #c7c7c7;\n    border-left: none;\n    border-radius: 0 ${global_BorderRadius_sm.value}\n      ${global_BorderRadius_sm.value} 0;\n  }\n\n  /* filter results */\n\n  .toolbar-pf-results {\n    font-size: ${global_FontSize_sm.value};\n    padding: ${global_spacer_sm.value} 0;\n    line-heght: ${global_LineHeight_md.value};\n    font-weight: ${global_FontWeight_normal.value};\n\n    .col-sm-12 {\n      display: flex;\n      align-items: center;\n    }\n\n    h5 {\n      font-size: ${global_FontSize_sm.value};\n      font-weight: ${global_FontWeight_normal.value};\n      line-height: ${global_LineHeight_md.value};\n    }\n\n    .filter-pf-active-label {\n      line-height: ${global_LineHeight_md.value};\n    }\n\n    .list-inline {\n      line-height: ${global_LineHeight_md.value};\n    }\n\n    .label {\n      font-size: ${global_FontSize_xs.value};\n      border-radius: ${global_BorderRadius_sm.value};\n      display: inline-flex;\n      align-items: center;\n    }\n\n    .pf-remove-button {\n      display: inline-flex;\n      font-weight: ${global_FontWeight_normal.value};\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_dark_100, global_Color_light_100, global_FontSize_xs, global_primary_color_200, global_spacer_md, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    padding: { top: 8, bottom: 8 },\n    pie: {\n        data: {\n            strokeWidth: 0,\n            fillOpacity: 0.7,\n            stroke: global_primary_color_200.value,\n        },\n    },\n    tooltipText: {\n        fontSize: global_FontSize_xs.value,\n        fill: global_Color_light_100.value,\n    },\n    tooltipFlyout: { stroke: global_Color_dark_100.value },\n};\nexport const styles = StyleSheet.create({\n    pieGroup: {\n        display: 'flex',\n        float: 'left',\n        position: 'relative',\n        paddingTop: '2rem',\n        marginLeft: '2rem',\n        left: '-40px',\n    },\n});\nexport const legendStyles = StyleSheet.create({\n    legend: {\n        display: 'block',\n        alignItems: 'center',\n    },\n    legendItem: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_dark_100.var,\n        marginRight: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { ChartTitle } from 'components/commonChart';\nimport { getTooltipLabel, transformReport, } from 'components/commonChart/chartUtils';\nimport React from 'react';\nimport { formatCurrency } from 'utils/formatValue';\nimport { VictoryLegend, VictoryPie, VictoryTooltip } from 'victory';\nimport { chartStyles, styles } from './pieChart.styles';\nclass PieChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions, groupBy } = this.props;\n            const label = getTooltipLabel(datum, formatDatumValue, formatDatumOptions, groupBy);\n            return label;\n        };\n        this.handleResize = () => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n        };\n    }\n    shouldComponentUpdate(nextProps) {\n        if (!nextProps.data) {\n            return false;\n        }\n        return true;\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n            window.addEventListener('resize', this.handleResize);\n        });\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    render() {\n        const { title, height, width, data, groupBy } = this.props;\n        const currentData = transformReport(data, 2 /* monthly */, groupBy);\n        const legendData = currentData.map(item => ({\n            name: item.name.toString() + ' (' + formatCurrency(item.y) + ')',\n            symbol: { type: 'square' },\n        }));\n        const colors = 'cool';\n        return (React.createElement(\"div\", { className: css(styles.pieGroup), ref: this.containerRef },\n            Boolean(currentData.length) && (React.createElement(VictoryPie, { padding: chartStyles.padding, height: height, width: width, colorScale: colors, style: chartStyles.pie, data: currentData, labels: this.getTooltipLabel, labelComponent: React.createElement(VictoryTooltip, { cornerRadius: 0, flyoutStyle: chartStyles.tooltipFlyout }) })),\n            React.createElement(\"svg\", { width: 300, height: 250 }, Boolean(currentData.length) && (React.createElement(VictoryLegend, { key: title, standalone: false, colorScale: colors, x: 0, y: 0, gutter: 20, data: legendData }))),\n            React.createElement(ChartTitle, null, title)));\n    }\n}\nexport { PieChart };\n","import { PieChart } from 'components/pieChart/pieChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportsActions, reportsSelectors } from 'store/reports';\nimport { formatValue } from 'utils/formatValue';\nconst reportType = \"cost\" /* cost */;\nclass DetailsChartBase extends React.Component {\n    componentDidMount() {\n        const { report, queryString } = this.props;\n        if (!report) {\n            this.props.fetchReport(reportType, queryString);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.queryString !== this.props.queryString) {\n            this.props.fetchReport(reportType, this.props.queryString);\n        }\n    }\n    render() {\n        const { currentGroupBy, report } = this.props;\n        return (React.createElement(PieChart, { height: 150, width: 400, data: report, formatDatumValue: formatValue, groupBy: currentGroupBy }));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { queryString }) => {\n    const report = reportsSelectors.selectReport(state, \"cost\" /* cost */, queryString);\n    const reportFetchStatus = reportsSelectors.selectReportFetchStatus(state, \"cost\" /* cost */, queryString);\n    return { report, reportFetchStatus };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart, DetailsChartBase };\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/query';\nimport { Col, ListView, Row } from 'patternfly-react';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, } from 'utils/getComputedReportItems';\nimport { styles } from './costDetails.styles';\nimport { DetailsChart } from './detailChart';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nclass DetailsItemBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            expanded: false,\n        };\n        this.handleExpand = () => {\n            const { currentGroupBy } = this.state;\n            const queryString = this.getQueryString(currentGroupBy);\n            this.setState({ expanded: true, queryString });\n        };\n        this.handleExpandClose = () => {\n            this.setState({ expanded: false });\n        };\n        this.handleCheckboxChange = event => {\n            const { item, onCheckboxChange } = this.props;\n            onCheckboxChange(event.currentTarget.checked, item);\n        };\n        this.handleSelectChange = (event) => {\n            const groupByKey = event.currentTarget\n                .value;\n            const queryString = this.getQueryString(groupByKey);\n            this.setState({ currentGroupBy: groupByKey, queryString });\n        };\n    }\n    getQueryString(groupBy) {\n        const { parentQuery, item } = this.props;\n        const groupById = getIdKeyForGroupBy(parentQuery.group_by);\n        const newQuery = {\n            filter: {\n                time_scope_units: 'month',\n                time_scope_value: -1,\n                resolution: 'monthly',\n                limit: 5,\n            },\n            group_by: { [groupById]: item.id, [groupBy]: '*' },\n        };\n        return getQuery(newQuery);\n    }\n    getDefaultGroupBy() {\n        const { parentGroupBy } = this.props;\n        let groupBy = '';\n        switch (parentGroupBy) {\n            case 'account':\n                groupBy = 'service';\n                break;\n            case 'service':\n                groupBy = 'account';\n                break;\n            case 'region':\n                groupBy = 'account';\n                break;\n        }\n        return groupBy;\n    }\n    componentDidMount() {\n        const defaultGroupBy = this.getDefaultGroupBy();\n        const queryString = this.getQueryString(defaultGroupBy);\n        this.setState({ currentGroupBy: defaultGroupBy, queryString });\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.parentGroupBy !== prevProps.parentGroupBy) {\n            const defaultGroupBy = this.getDefaultGroupBy();\n            this.setState({ currentGroupBy: defaultGroupBy });\n        }\n    }\n    render() {\n        const { t, item, parentGroupBy, selected, total } = this.props;\n        const { currentGroupBy, queryString } = this.state;\n        return (React.createElement(ListView.Item, { key: item.label, heading: item.label, checkboxInput: React.createElement(\"input\", { type: \"checkbox\", checked: selected, onChange: this.handleCheckboxChange }), actions: [\n                React.createElement(ListView.InfoItem, { key: \"1\", stacked: true },\n                    React.createElement(\"strong\", null, formatCurrency(item.total)),\n                    React.createElement(\"span\", null,\n                        ((item.total / total) * 100).toFixed(2),\n                        t('percent_of_cost'))),\n            ], onExpand: this.handleExpand, onExpandClose: this.handleExpandClose },\n            React.createElement(Row, null,\n                React.createElement(Col, null,\n                    React.createElement(\"div\", null,\n                        React.createElement(\"div\", { className: css(styles.innerGroupBySelector) },\n                            React.createElement(\"label\", { className: css(styles.innerGroupBySelectorLabel) },\n                                t('group_by.label'),\n                                \":\"),\n                            React.createElement(\"select\", { id: item.label ? item.label.toString() : '', onChange: this.handleSelectChange }, groupByOptions.map(option => {\n                                if (option.value !== parentGroupBy) {\n                                    return (React.createElement(\"option\", { key: option.value, value: option.value }, t(`group_by.values.${option.label}`)));\n                                }\n                            }))),\n                        Boolean(currentGroupBy) &&\n                            Boolean(queryString) && (React.createElement(DetailsChart, { queryString: queryString, currentGroupBy: currentGroupBy })))))));\n    }\n}\nconst DetailsItem = translate()(connect()(DetailsItemBase));\nexport { DetailsItem, DetailsItemBase };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { css } from 'emotion';\nexport const btnOverride = css `\n  &.pf-c-button {\n    --pf-c-button--m-disabled--BackgroundColor: none;\n  }\n`;\n","import React from 'react';\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport { TextInput } from 'components/textInput';\nimport { Filter, Icon, noop, Sort, Toolbar } from 'patternfly-react';\nimport { isEqual } from 'utils/equal';\nimport { btnOverride } from './detailsToolbar.styles';\nexport class DetailsToolbar extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentSortType: this.props.sortField,\n            isSortNumeric: this.props.sortField.isNumeric,\n            isSortAscending: !(this.props.query &&\n                this.props.query.order_by[this.props.sortField.id] === 'desc'),\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterValue = this.getAccountId(field.id, value);\n            this.props.onFilterAdded(currentFilterType.id, filterValue);\n        };\n        // Temporary workaround until API supports filtering on account aliases\n        this.getAccountAlias = (field, value) => {\n            const { report } = this.state;\n            let filterValue = value;\n            if (report && report.data && field === 'account') {\n                report.data.forEach(data => {\n                    data.accounts.forEach(accounts => {\n                        accounts.values.forEach(values => {\n                            if (values.account === value && values.account_alias) {\n                                filterValue = values.account_alias;\n                                return false;\n                            }\n                        });\n                    });\n                });\n            }\n            return filterValue;\n        };\n        // Temporary workaround until API supports filtering on account aliases\n        this.getAccountId = (field, value) => {\n            const { report } = this.state;\n            let filterValue = value;\n            if (report && report.data && field === 'account') {\n                report.data.forEach(data => {\n                    data.accounts.forEach(accounts => {\n                        accounts.values.forEach(values => {\n                            if (values.account_alias === value && values.account) {\n                                filterValue = values.account;\n                                return false;\n                            }\n                        });\n                    });\n                });\n            }\n            return filterValue;\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const alias = this.getAccountAlias(field, value);\n            const filterLabel = this.getFilterLabel(field, alias);\n            return {\n                field: currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            filterText =\n                filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.toggleCurrentSortDirection = () => {\n            const { currentSortType, isSortAscending } = this.state;\n            this.setState({ isSortAscending: !isSortAscending });\n            this.props.onSortChanged(currentSortType.id, !isSortAscending);\n        };\n        this.updateCurrentSortType = sortType => {\n            const isSortAscending = true;\n            this.setState({\n                currentSortType: sortType,\n                isSortNumeric: sortType.isNumeric,\n                isSortAscending,\n            });\n            this.props.onSortChanged(sortType.id, isSortAscending);\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report, sortField } = this.props;\n        const cacheReport = this.state.report === null && query.group_by.account;\n        if (report && (!isEqual(report, prevProps.report) || cacheReport)) {\n            // Cache inital report containing so we can find account aliases after multiple filters\n            // are applied -- a filtered report won't contain all accounts.\n            if (cacheReport) {\n                this.setState({\n                    report,\n                }, () => {\n                    this.addQuery(query);\n                });\n            }\n            else {\n                this.addQuery(query);\n            }\n            if (!isEqual(filterFields, prevProps.filterFields)) {\n                this.setState({\n                    currentFilterType: this.props.filterFields[0],\n                });\n            }\n            if (!isEqual(sortField, prevProps.sortField)) {\n                this.setState({\n                    currentSortType: sortField,\n                    isSortAscending: !(query && query.order_by[sortField.id] === 'desc'),\n                });\n            }\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, type: \"text\", value: currentValue }));\n    }\n    render() {\n        const { isExportDisabled } = this.props;\n        const { activeFilters, currentFilterType, currentSortType, isSortNumeric, isSortAscending, } = this.state;\n        return (React.createElement(Toolbar, null,\n            React.createElement(Filter, null,\n                React.createElement(Filter.TypeSelector, { filterTypes: this.props.filterFields, currentFilterType: currentFilterType, onFilterTypeSelected: this.selectFilterType }),\n                this.renderInput()),\n            React.createElement(Sort, null,\n                React.createElement(Sort.TypeSelector, { sortTypes: this.props.sortFields, currentSortType: currentSortType, onSortTypeSelected: this.updateCurrentSortType }),\n                React.createElement(Sort.DirectionSelector, { isNumeric: isSortNumeric, isAscending: isSortAscending, onClick: this.toggleCurrentSortDirection })),\n            React.createElement(\"div\", { className: \"form-group\" },\n                React.createElement(Button, { className: btnOverride, isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                    React.createElement(Icon, { name: \"download\" }),\n                    \"Export\")),\n            !activeFilters ||\n                (activeFilters.length === 0 && (React.createElement(Toolbar.Results, null,\n                    React.createElement(\"h5\", null,\n                        this.props.resultsTotal,\n                        \" Results\")))),\n            activeFilters &&\n                activeFilters.length > 0 && (React.createElement(Toolbar.Results, null,\n                React.createElement(\"h5\", null,\n                    this.props.resultsTotal,\n                    \" Results\"),\n                React.createElement(Filter.ActiveLabel, null, \"Active Filters:\"),\n                React.createElement(Filter.List, null, activeFilters.map((item, index) => (React.createElement(Filter.Item, { key: index, onRemove: this.removeFilter, filterData: item }, item.label)))),\n                React.createElement(\"a\", { href: \"#\", onClick: this.clearFilters }, \"Clear All Filters\")))));\n    }\n}\nDetailsToolbar.defaultProps = { onActionPerformed: noop };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n});\n","import { Button, ButtonVariant, Modal, Radio } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/query';\nimport fileDownload from 'js-file-download';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions, exportSelectors } from 'store/export';\nimport { uiActions, uiSelectors } from 'store/ui';\nimport { getTestProps, testIds } from 'testIds';\nimport { FormGroup } from '../../components/formGroup';\nimport { sort } from '../../utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nexport class ExportModal extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupById, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, query, { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupById}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupById}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleCancel = () => {\n            this.props.closeExportModal();\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { closeExportModal, fetchStatus, isExportModalOpen } = this.props;\n        if (isExportModalOpen && !prevProps.isExportModalOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (this.props.export !== prevProps.export &&\n            fetchStatus === 2 /* complete */) {\n            fileDownload(this.props.export, 'report.csv', 'text/csv');\n            closeExportModal();\n        }\n    }\n    render() {\n        const { fetchStatus, groupById, items, t } = this.props;\n        const { resolution } = this.state;\n        if (this.props.isExportModalOpen) {\n            sort(items, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isExportModalOpen, onClose: this.handleCancel, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleCancel, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(\"h2\", null, t('export.heading', { groupBy: groupById })),\n            React.createElement(FormGroup, { label: t('export.aggregate_type') },\n                React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(\"div\", null,\n                    React.createElement(Radio, { isDisabled: false, isValid: option.value !== undefined, key: index, value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }),\n                    React.createElement(\"span\", null, t(option.label))))))),\n            React.createElement(FormGroup, { label: t('export.selected', { groupBy: groupById }) },\n                React.createElement(\"ul\", null, items.map((groupItem, index) => {\n                    return React.createElement(\"li\", { key: index }, groupItem.label);\n                })))));\n    }\n}\nexport default connect(createMapStateToProps(state => ({\n    error: exportSelectors.selectExportError(state),\n    export: exportSelectors.selectExport(state),\n    fetchStatus: exportSelectors.selectExportFetchStatus(state),\n    isExportModalOpen: uiSelectors.selectIsExportModalOpen(state),\n})), {\n    exportReport: exportActions.exportReport,\n    closeExportModal: uiActions.closeExportModal,\n})(translate()(ExportModal));\n","import { Title } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/query';\nimport { ListView } from 'patternfly-react';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportsActions, reportsSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedReportItems, } from 'utils/getComputedReportItems';\nimport { listViewOverride, styles, toolbarOverride, } from './costDetails.styles';\nimport { DetailsItem } from './detailItem';\nimport { DetailsToolbar } from './detailsToolbar';\nimport ExportModal from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        total: 'desc',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nclass CostDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleSelectChange = (event) => {\n            const { history } = this.props;\n            const groupByKey = event.currentTarget\n                .value;\n            const newQuery = {\n                group_by: {\n                    [groupByKey]: '*',\n                },\n                order_by: { total: 'desc' },\n            };\n            history.replace(this.getRouteForQuery(newQuery));\n            this.setState({ selectedItems: [] });\n        };\n        this.onCheckboxChange = (checked, item) => {\n            const { selectedItems } = this.state;\n            let updated = [...selectedItems, item];\n            if (!checked) {\n                let index = -1;\n                for (let i = 0; i < selectedItems.length; i++) {\n                    if (selectedItems[i].label === item.label) {\n                        index = i;\n                        break;\n                    }\n                }\n                if (index > -1) {\n                    updated = [\n                        ...selectedItems.slice(0, index),\n                        ...selectedItems.slice(index + 1),\n                    ];\n                }\n            }\n            this.setState({ selectedItems: updated });\n        };\n        this.onCheckboxAllChange = event => {\n            const { query, report } = this.props;\n            let computedItems = [];\n            if (event.currentTarget.checked) {\n                const groupById = getIdKeyForGroupBy(query.group_by);\n                computedItems = getUnsortedComputedReportItems({\n                    report,\n                    idKey: groupById,\n                });\n            }\n            this.setState({ selectedItems: computedItems });\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { total: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'account') {\n                return [\n                    {\n                        id: 'account',\n                        title: t('cost_details.filter.account_select'),\n                        placeholder: t('cost_details.filter.account_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'service') {\n                return [\n                    {\n                        id: 'service',\n                        title: t('cost_details.filter.service_select'),\n                        placeholder: t('cost_details.filter.service_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'region') {\n                return [\n                    {\n                        id: 'region',\n                        title: t('cost_details.filter.region_select'),\n                        placeholder: t('cost_details.filter.region_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getSortTypes = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'account') {\n                return [\n                    {\n                        id: 'account_alias',\n                        isNumeric: false,\n                        title: t('cost_details.order.name'),\n                    },\n                    {\n                        id: 'total',\n                        isNumeric: true,\n                        title: t('cost_details.order.cost'),\n                    },\n                ];\n            }\n            else if (groupById === 'service') {\n                return [\n                    {\n                        id: 'service',\n                        isNumeric: false,\n                        title: t('cost_details.order.name'),\n                    },\n                    {\n                        id: 'total',\n                        isNumeric: true,\n                        title: t('cost_details.order.cost'),\n                    },\n                ];\n            }\n            else if (groupById === 'region') {\n                return [\n                    {\n                        id: 'region',\n                        isNumeric: false,\n                        title: t('cost_details.order.name'),\n                    },\n                    {\n                        id: 'total',\n                        isNumeric: true,\n                        title: t('cost_details.order.cost'),\n                    },\n                ];\n            }\n            return [];\n        };\n        this.isSelected = (item) => {\n            const { selectedItems } = this.state;\n            let selected = false;\n            for (const selectedItem of selectedItems) {\n                if (selectedItem.label === item.label) {\n                    selected = true;\n                    break;\n                }\n            }\n            return selected;\n        };\n        this.onCheckboxChange = this.onCheckboxChange.bind(this);\n        this.onExportClicked = this.onExportClicked.bind(this);\n        this.onFilterAdded = this.onFilterAdded.bind(this);\n        this.onFilterRemoved = this.onFilterRemoved.bind(this);\n        this.onSortChanged = this.onSortChanged.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n        this.setState({});\n    }\n    componentDidUpdate(prevProps) {\n        const { location, report, queryString } = this.props;\n        if (prevProps.queryString !== queryString || !report || !location.search) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query) {\n        return `/cost?${getQuery(query)}`;\n    }\n    onExportClicked() {\n        this.props.openExportModal();\n    }\n    onFilterAdded(filterType, filterValue) {\n        const { history, query } = this.props;\n        if (query.group_by[filterType]) {\n            if (query.group_by[filterType] === '*') {\n                query.group_by[filterType] = filterValue;\n            }\n            else if (!query.group_by[filterType].includes(filterValue)) {\n                query.group_by[filterType] = [query.group_by[filterType], filterValue];\n            }\n        }\n        else {\n            query.group_by[filterType] = [filterValue];\n        }\n        const filteredQuery = this.getRouteForQuery(query);\n        history.replace(filteredQuery);\n    }\n    onFilterRemoved(filterType, filterValue) {\n        const { history, query } = this.props;\n        if (filterValue === '' || !Array.isArray(query.group_by[filterType])) {\n            query.group_by[filterType] = '*';\n        }\n        else {\n            const index = query.group_by[filterType].indexOf(filterValue);\n            if (index > -1) {\n                const updated = [\n                    ...query.group_by[filterType].slice(0, index),\n                    ...query.group_by[filterType].slice(index + 1),\n                ];\n                query.group_by[filterType] = updated;\n            }\n        }\n        const filteredQuery = this.getRouteForQuery(query);\n        history.replace(filteredQuery);\n    }\n    onSortChanged(sortType, isSortAscending) {\n        const { history, query } = this.props;\n        query.order_by = {};\n        query.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n        const filteredQuery = this.getRouteForQuery(query);\n        history.replace(filteredQuery);\n    }\n    render() {\n        const { selectedItems } = this.state;\n        const { query, report, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const filterFields = this.getFilterFields(groupById);\n        const sortFields = this.getSortTypes(groupById);\n        const today = new Date();\n        const computedItems = getUnsortedComputedReportItems({\n            report,\n            idKey: groupById,\n        });\n        let sortField = sortFields[0];\n        for (const field of sortFields) {\n            if (query.order_by && query.order_by[field.id]) {\n                sortField = field;\n                break;\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.costDetailsPage) },\n            React.createElement(\"header\", { className: css(styles.header) },\n                React.createElement(\"div\", null,\n                    React.createElement(Title, { size: \"2xl\" }, t('cost_details.title')),\n                    React.createElement(\"div\", { className: css(styles.groupBySelector) },\n                        React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                            t('group_by.label'),\n                            \":\"),\n                        React.createElement(\"select\", { value: groupById, onChange: this.handleSelectChange }, groupByOptions.map(option => (React.createElement(\"option\", { key: option.value, value: option.value }, t(`group_by.values.${option.label}`))))))),\n                Boolean(report) && (React.createElement(\"div\", { className: css(styles.total) },\n                    React.createElement(Title, { className: css(styles.totalValue), size: \"4xl\" }, formatCurrency(report.total.value)),\n                    React.createElement(\"div\", { className: css(styles.totalLabel) },\n                        React.createElement(\"div\", { className: css(styles.totalLabelUnit) }, t('total_cost')),\n                        React.createElement(\"div\", { className: css(styles.totalLabelDate) }, t('since_date', { month: today.getMonth(), date: 1 })))))),\n            React.createElement(\"div\", { className: css(styles.content) },\n                React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n                    React.createElement(\"div\", { className: toolbarOverride },\n                        React.createElement(DetailsToolbar, { exportText: t('cost_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.onExportClicked, onFilterAdded: this.onFilterAdded, onFilterRemoved: this.onFilterRemoved, onSortChanged: this.onSortChanged, sortField: sortField, sortFields: sortFields, report: report, resultsTotal: computedItems.length, query: query }),\n                        React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupById: groupById, items: selectedItems, query: query }))),\n                React.createElement(\"div\", { className: listViewOverride },\n                    React.createElement(ListView, null,\n                        React.createElement(ListView.Item, { key: \"header_item\", heading: t('cost_details.name_column_title', {\n                                groupBy: groupById,\n                            }), checkboxInput: React.createElement(\"input\", { type: \"checkbox\", checked: selectedItems.length === computedItems.length, onChange: this.onCheckboxAllChange }), actions: [\n                                React.createElement(ListView.InfoItem, { key: \"1\" },\n                                    React.createElement(\"strong\", null,\n                                        t('cost_details.cost_column_title'),\n                                        Boolean(report) && (React.createElement(React.Fragment, null, t('cost_details.cost_column_subtitle', {\n                                            total: formatCurrency(report.total.value),\n                                        }))))),\n                            ] }),\n                        computedItems.map((groupItem, index) => {\n                            return (React.createElement(DetailsItem, { key: index, parentQuery: query, parentGroupBy: groupById, item: groupItem, onCheckboxChange: this.onCheckboxChange, selected: this.isSelected(groupItem), total: report.total.value }));\n                        }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(props.location.search);\n    const query = {\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportsSelectors.selectReport(state, \"cost\" /* cost */, queryString);\n    const reportFetchStatus = reportsSelectors.selectReportFetchStatus(state, \"cost\" /* cost */, queryString);\n    return {\n        report,\n        reportFetchStatus,\n        queryString,\n        query,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportsActions.fetchReport,\n    openExportModal: uiActions.openExportModal,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(CostDetails));\n","import { hot } from 'react-hot-loader';\nimport CostDetails from './costDetails';\nexport default hot(module)(CostDetails);\n"],"sourceRoot":""}