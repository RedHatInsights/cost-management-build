{"version":3,"sources":["webpack:///./src/pages/ocpCloudDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTagView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpCloudDetails/exportModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/exportModal.tsx","webpack:///./src/pages/ocpCloudDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalChart.tsx","webpack:///./src/pages/ocpCloudDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsActions.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.tsx","webpack:///./src/pages/ocpCloudDetails/detailsToolbar.styles.ts","webpack:///./src/pages/ocpCloudDetails/filterBy.styles.ts","webpack:///./src/pages/ocpCloudDetails/filterBy.tsx","webpack:///./src/pages/ocpCloudDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.styles.ts","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpCloudDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","tags","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","getForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getSinceDateRangeString","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendItemsPerRow","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","marginLeft","historicalTrendChart_HistoricalTrendChart","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpCloudReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpCloudReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","OcpCloudReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpCloudReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","OcpCloudReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","cloudReportType","meta","total","getCostLayout","Tooltip","content","enableFlip","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","ocpCloudReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpCloudReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpCloudReportSummaryItem","ocpCloudReportSummaryItems_styles_styles","skeleton","OcpCloudReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","ocpCloudReportSummaryTrend_styles_styles","OcpCloudReportSummaryTrend","trendChart","OcpCloudReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","historicalUsageChart_HistoricalUsageChart","maxCurrentLimit","maxPreviousLimit","costValue","costLabelUnit","costLabelDate","header","backgroundColor","info","verticalAlign","infoIcon","infoTitle","fontWeight","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","ocpCloudQuery","filter","resolution","time_scope_units","time_scope_value","key_only","ocpCloudReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","onClick","getDropDownTags","val","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","showPopover","handlePopoverClick","show","onGroupByClicked","showContent","sizes","Popover","aria-label","bodyContent","info_circle_icon","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tag","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","ocpCloudReportSummary","_item","DetailsWidgetModal","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpCloudExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","Button","variant","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpCloudReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpCloudReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalTrendChart","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpCloudDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","freeSpace","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","hasTotal","hasLimit","trunc","limitUnits","hasRequest","requestUnits","hasUsage","hasCapacity","capacityUnits","unusedRequestCapacity","unusedRequestCapacityPercentage","unusedUsageCapacity","unusedUsageCapacityPercentage","TextContent","TextList","dl","TextListItem","dt","dd","percentage","cpuDatum","getChartDatumWithCapacity","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","getFreeSpace","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","showPercentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","paginationContainer","toolbarContainer","paddingLeft","filterBy_styles_styles","filterContainer","filterByOptions","filterBy_reportType","filterBy_tagKey","filterBy_mapStateToProps","filterBy_mapDispatchToProps","FilterBy","isFilterByOpen","isFilterByTagOpen","getFilterBy","getSelectOptions","getFilterByTag","getSelectTagOptions","getSelectOption","getSelectItems","SelectOption","getSelectTagItems","handleFilterBySelect","selection","isPlaceholder","handleFilterByTagSelect","currentTagItem","handleFilterByToggle","handleFilterByTagToggle","filterByTag","Select","isExpanded","selections","selectConstants","single","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","currentValue","currentViewType","filterCategory","addQuery","filter_by","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","placeholder","TextInput","onKeyPress","isExportDisabled","pagination","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","ocpCloudDetails_styles_styles","ocpCloudDetails","tableContainer","ocpCloudDetails_reportType","ocpCloudDetails_tagKey","ocpCloudDetails_baseQuery","ocpCloudDetails_mapStateToProps","ocpCloudDetails_mapDispatchToProps","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","history","newFilterType","found","filters","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"adedbde73a6bc5f3c378.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpCloudDetails from './ocpCloudDetails';\nexport default hot(module)(OcpCloudDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummary.styles';\nconst OcpCloudReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpCloudReportSummary = translate()(OcpCloudReportSummaryBase);\nexport { OcpCloudReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpCloudReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { OcpCloudReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryDetails.styles';\nconst OcpCloudReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let markupCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const cloudReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        markupCost = formatValue(report.meta.total.markup_cost ? report.meta.total.markup_cost.value : 0, report.meta.total.markup_cost\n            ? report.meta.total.markup_cost.units\n            : 'USD', formatOptions);\n        if (cloudReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_cloud_dashboard.total_cost_tooltip', {\n                infrastructureCost,\n                markupCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (cloudReportType) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpCloudReportSummaryDetails = translate()(OcpCloudReportSummaryDetailsBase);\nexport { OcpCloudReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryItem.styles';\nconst OcpCloudReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpCloudReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpCloudReportSummaryItem = translate()(OcpCloudReportSummaryItemBase);\nexport { OcpCloudReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './ocpCloudReportSummaryItems.styles';\nclass OcpCloudReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpCloudReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpCloudReportSummaryItems = translate()(OcpCloudReportSummaryItemsBase);\nexport { OcpCloudReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                    {\n                        childName: 'previousLimit',\n                        data: previousLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(previousLimitData, limitKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousLimitData,\n                    },\n                    {\n                        childName: 'currentLimit',\n                        data: currentLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(currentLimitData, limitKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentLimitData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_md, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { parseQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Popover, Title, TitleSize, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let markupCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            cost = formatValue(report.meta.total.derived_cost ? report.meta.total.cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            markupCost = formatValue(report.meta.total.markup_cost ? report.meta.total.markup_cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0, report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.units\n                : 'USD');\n        }\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_cloud_details.title')),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('ocp_cloud_details.total_cost_tooltip', {\n                            infrastructureCost,\n                            markupCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) },\n                        t('ocp_cloud_details.total_cost'),\n                        React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_cloud_details.markup_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_cloud_details.infrastructure_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_cloud_details.infrastructure_cost_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_cloud_details.markup_title')),\n                                    React.createElement(\"p\", null, t('ocp_cloud_details.markup_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_cloud_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpCloudReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudExportActions, ocpCloudExportSelectors, } from 'store/ocpCloudExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpCloudExportSelectors.selectExportError(state),\n        export: ocpCloudExportSelectors.selectExport(state),\n        fetchStatus: ocpCloudExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpCloudExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpCloudReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpCloudReportsActions from 'store/ocpCloudReports/ocpCloudReportsActions';\nimport * as ocpCloudReportsSelectors from 'store/ocpCloudReports/ocpCloudReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpCloudReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformOcpCloudReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('ocp_cloud_details.historical.cost_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_cloud_details.historical.cpu_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_cloud_details.historical.memory_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/ocpCloudDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_cloud_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_cloud_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_cloud_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_cloud_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    freeSpace: {\n        marginBottom: global_spacer_lg.value,\n        marginLeft: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { TextContent, TextList, TextListItem, TextListItemVariants, TextListVariants, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n        ];\n        return datum;\n    }\n    getChartDatumWithCapacity(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const capacityUnits = t(`units.${unitLookupKey(hasCapacity ? report.meta.total.capacity.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                value: Math.trunc(capacity),\n            },\n        ];\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace(report, labelKey) {\n        const { t } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        // Note: Unused won't be negative since Kubernetes doesn't allow requests to exceed capacity -- see #1232\n        const unusedRequestCapacity = capacity - request;\n        const unusedRequestCapacityPercentage = (request / capacity) * 100;\n        const unusedUsageCapacity = capacity - usage;\n        const unusedUsageCapacityPercentage = (usage / capacity) * 100;\n        return (React.createElement(TextContent, { className: css(styles.freeSpace) },\n            React.createElement(TextList, { component: TextListVariants.dl },\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_cloud_details.bullet.${labelKey}_usage_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_cloud_details.bullet.${labelKey}_usage_unused`, {\n                    percentage: formatValue(unusedUsageCapacityPercentage, usageUnits),\n                    value: unusedUsageCapacity,\n                    units: usageUnits,\n                })),\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_cloud_details.bullet.${labelKey}_requests_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_cloud_details.bullet.${labelKey}_requests_unused`, {\n                    percentage: formatValue(unusedRequestCapacityPercentage, requestUnits),\n                    value: unusedRequestCapacity,\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, groupBy, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = groupBy === 'cluster'\n            ? this.getChartDatumWithCapacity(cpuReport, 'cpu')\n            : this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = groupBy === 'cluster'\n            ? this.getChartDatumWithCapacity(memoryReport, 'memory')\n            : this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                        ? [\n                            {\n                                tooltip: cpuDatum.limit.tooltip,\n                                y: cpuDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value\n                        ? [{ name: cpuDatum.limit.legend }]\n                        : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: cpuDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: cpuDatum.ranges[0].tooltip,\n                                y: cpuDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                        ? [{ name: cpuDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(cpuReport, 'cpu'))))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                        ? [\n                            {\n                                tooltip: memoryDatum.limit.tooltip,\n                                y: memoryDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                        ? [{ name: memoryDatum.limit.legend }]\n                        : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: memoryDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: memoryDatum.ranges[0].tooltip,\n                                y: memoryDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                        ? [{ name: memoryDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(memoryReport, 'memory')))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_cloud_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpCloudReportItems } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedOcpCloudReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(OcpCloudReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_cloud_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (!((groupBy === 'project' || groupBy === 'node') &&\n                    getIdKeyForTab(tab).toString() === 'project')) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top_ocp_cloud', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"projects\" /* projects */,\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_cloud_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_cloud_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_cloud_details.name_column_title', {\n                            groupBy: groupById,\n                        }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpCloudReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                    Boolean(showPercentage && item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(showPercentage && item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    filterContainer: {\n        display: 'inline-flex',\n    },\n});\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { styles } from './filterBy.styles';\nconst filterByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n    { label: 'tags', value: 'tags' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass FilterByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isFilterByOpen: false,\n            isFilterByTagOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getFilterBy = () => {\n            const { groupBy } = this.props;\n            // Find i18n string\n            const items = this.getSelectOptions();\n            for (const item of items) {\n                if (groupBy === item.id ||\n                    (groupBy.indexOf(tagKey) !== -1 && item.id === 'tags')) {\n                    return item;\n                }\n            }\n            return null;\n        };\n        this.getFilterByTag = () => {\n            const { groupBy } = this.props;\n            // Find i18n string\n            const items = this.getSelectTagOptions();\n            for (const item of items) {\n                if (groupBy === item.id) {\n                    return item;\n                }\n            }\n            return items[0];\n        };\n        this.getSelectOption = (id, label) => {\n            return {\n                id,\n                toString: () => label,\n            };\n        };\n        this.getSelectItems = () => {\n            return this.getSelectOptions().map(option => (React.createElement(SelectOption, { key: option.id, value: option })));\n        };\n        this.getSelectTagItems = () => {\n            return this.getSelectTagOptions().map(option => (React.createElement(SelectOption, { key: option.id, value: option })));\n        };\n        this.getSelectOptions = () => {\n            const { t } = this.props;\n            return filterByOptions.map(option => {\n                return this.getSelectOption(`${option.value}`, t(`group_by.values.${option.label}`));\n            });\n        };\n        this.getSelectTagOptions = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => {\n                    return this.getSelectOption(`${tagKey}${val}`, t('group_by.tag', { key: val }));\n                });\n            }\n            else {\n                return [];\n            }\n        };\n        this.handleFilterBySelect = (event, selection, isPlaceholder) => {\n            const { groupBy, onItemClicked } = this.props;\n            let selected = selection;\n            if (selection.id === 'tags') {\n                const items = this.getSelectTagOptions();\n                if (groupBy.indexOf(tagKey) !== -1) {\n                    for (const item of items) {\n                        if (groupBy === item.id) {\n                            selected = item;\n                        }\n                    }\n                }\n                else {\n                    selected = items[0];\n                }\n            }\n            if (onItemClicked) {\n                onItemClicked(selected.id);\n            }\n            this.setState({\n                currentItem: selection,\n                isFilterByOpen: false,\n            });\n        };\n        this.handleFilterByTagSelect = (event, selection, isPlaceholder) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.id);\n            }\n            this.setState({\n                currentTagItem: selection,\n                isFilterByTagOpen: false,\n            });\n        };\n        this.handleFilterByToggle = isFilterByOpen => {\n            this.setState({\n                isFilterByOpen,\n            });\n        };\n        this.handleFilterByTagToggle = isFilterByTagOpen => {\n            this.setState({\n                isFilterByTagOpen,\n            });\n        };\n        this.handleFilterBySelect = this.handleFilterBySelect.bind(this);\n        this.handleFilterByTagSelect = this.handleFilterByTagSelect.bind(this);\n        this.handleFilterByTagToggle = this.handleFilterByTagToggle.bind(this);\n        this.handleFilterByToggle = this.handleFilterByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getFilterBy(),\n            currentTagItem: this.getFilterByTag(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportFetchStatus, groupBy, queryString } = this.props;\n        if (prevProps.groupBy !== groupBy ||\n            prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n        if (prevProps.groupBy !== groupBy ||\n            prevProps.queryString !== queryString ||\n            prevProps.reportFetchStatus !== reportFetchStatus) {\n            this.setState({\n                currentItem: this.getFilterBy(),\n                currentTagItem: this.getFilterByTag(),\n            });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, currentTagItem, isFilterByOpen, isFilterByTagOpen, } = this.state;\n        const filterByTag = currentItem && currentItem.id ? currentItem.id === 'tags' : false;\n        return (React.createElement(\"div\", { className: css(styles.filterContainer) },\n            React.createElement(Select, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label'), onSelect: this.handleFilterBySelect, onToggle: this.handleFilterByToggle, isExpanded: isFilterByOpen, selections: currentItem, variant: SelectVariant.single }, this.getSelectItems()),\n            Boolean(filterByTag) && (React.createElement(Select, { \"aria-label\": t('ocp_details.toolbar.filter_tag_type_aria_label'), onSelect: this.handleFilterByTagSelect, onToggle: this.handleFilterByTagToggle, isExpanded: isFilterByTagOpen, selections: currentTagItem, variant: SelectVariant.single }, this.getSelectTagItems()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst FilterBy = translate()(connect(mapStateToProps, mapDispatchToProps)(FilterByBase));\nexport { FilterBy };\n","import { Button, ButtonVariant, Chip, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nimport { FilterBy } from './filterBy';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.groupBy,\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            if (query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    if (Array.isArray(query.filter_by[key])) {\n                        query.filter_by[key].forEach(value => {\n                            const field = key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key;\n                        const filter = this.getFilter(field, query.filter_by[key]);\n                        activeFilters.push(filter);\n                    }\n                });\n            }\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(this.props.groupBy, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType, value);\n        };\n        this.getFilter = (field, value) => {\n            const filterLabel = this.getFilterLabel(field, value);\n            const result = {\n                field,\n                label: filterLabel,\n                value,\n            };\n            return result;\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = (filterType) => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (groupBy !== prevProps.groupBy) {\n            this.setState({\n                currentFilterType: groupBy,\n            });\n        }\n    }\n    renderInput() {\n        const { t } = this.props;\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        const index = currentFilterType ? currentFilterType.indexOf(tagKey) : -1;\n        const placeholder = index === 0\n            ? t('ocp_cloud_details.filter.tag_placeholder')\n            : t(`ocp_cloud_details.filter.${currentFilterType}_placeholder`);\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: placeholder, value: currentValue }));\n    }\n    render() {\n        const { isExportDisabled, groupBy, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FilterBy, { groupBy: groupBy, onItemClicked: this.selectFilterType })),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpCloudDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery, } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpCloudDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpCloudDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_cloud_details.export_link'), groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[newFilterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[newFilterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[newFilterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[newFilterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[newFilterType] = [\n                        newQuery.filter_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (!Array.isArray(newQuery.filter_by[newFilterType])) {\n                newQuery.filter_by[newFilterType] = undefined;\n            }\n            else {\n                const index = newQuery.filter_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[newFilterType] = [\n                        ...query.filter_by[newFilterType].slice(0, index),\n                        ...query.filter_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp-cloud?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpCloudReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpCloudDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpCloudDetails));\n"],"sourceRoot":""}