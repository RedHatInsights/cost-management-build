{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/components/charts/common/chartUtils.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/charts/common/chart.styles.ts","webpack:///./src/utils/computedReport/getComputedReportItems.ts","webpack:///./src/utils/computedReport/getItemLabel.ts","webpack:///./src/testIds.ts","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/reports/reportSummary/reportSummary.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummary.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryAlt.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryAlt.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryDetails.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryDetails.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryItem.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryItem.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryItems.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryTrend.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryCost.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryTrend.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryUsage.tsx","webpack:///./src/components/reports/reportSummary/index.ts","webpack:///./src/utils/sort.ts","webpack:///./src/utils/pathname.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/pages/dashboard/components/dashboardBase.tsx","webpack:///./src/pages/dashboard/components/dashboardWidget.styles.ts","webpack:///./src/pages/dashboard/components/dashboardWidgetBase.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboard.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboard.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboard.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/perspective.styles.ts","webpack:///./src/pages/overview/perspective.tsx","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/pages/overview/index.ts"],"names":["__webpack_require__","d","__webpack_exports__","unitLookupKey","formatValue","formatCurrency","unit","lookup","toLowerCase","value","options","fValue","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","transformReport","getDateRange","getMaxValue","getTooltipContent","getTooltipLabel","getCostRangeString","getUsageRangeString","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0__","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","n","date_fns_format__WEBPACK_IMPORTED_MODULE_1__","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3__","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4__","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","i18next__WEBPACK_IMPORTED_MODULE_5__","utils_computedReport_getComputedReportItems__WEBPACK_IMPORTED_MODULE_6__","utils_formatValue__WEBPACK_IMPORTED_MODULE_7__","report","type","key","reportItem","reportItemValue","items","idKey","sortKey","sortDirection","computedItems","Object","map","i","createDatum","reduce","acc","prevValue","length","y","computedItem","x","id","label","Number","isFloat","parseFloat","toFixed","isInt","name","units","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","getDatumDateRange","setDate","lastDate","getDate","max","forEach","datum","t","formatOptions","toString","count","endDate","month","startDate","year","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","chartOverride","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_0__","emotion__WEBPACK_IMPORTED_MODULE_1__","getComputedReportItems","labelKey","sort","getUnsortedComputedReportItems","direction","itemMap","Map","visitDataPoint","dataPoint","values","cluster_alias","clusters","undefined","cluster","capacity","cost","total","supplementary","infrastructure","idSuffix","itemLabelKey","String","meta","group_by","keys","indexOf","query","tagPrefixKey","hasOwnProperty","getItemLabel","account_alias","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getTestProps","testIds","data-testid","details","cluster_lnk","historical_data_btn","show_more_btn","tag_lnk","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","styles","container","display","justifyContent","height","marginTop","ErrorState","es","error","icon","error_circle_o_icon","title","subTitle","response","status","lock_icon","react_default","a","createElement","EmptyState","EmptyStateIcon","Title","size","EmptyStateBody","LoadingState","binoculars_icon","Spinner","fontSize","EmptyValueState","minus_icon","chartSkeleton","marginBottom","esm","legendSkeleton","reportSummary","subtitle","color","var","ReportSummary","children","detailsLink","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","reportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","ReportSummaryAlt","tabs","Grid","gutter","GridItem","lg","xl","reportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","paddingLeft","whiteSpace","valueContainer","width","wordWrap","ReportSummaryDetails","chartType","computedReportItem","computedReportItemValue","costLabel","requestFormatOptions","requestLabel","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","supplementaryCost","infrastructureCost","hasTotal","hasCost","hasCount","hasSupplementaryCost","hasInfrastructureCost","hasRequest","hasUsage","getCostLayout","Tooltip","content","enableFlip","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","reportSummaryItem","index_esm","ReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","className","Progress","defaultProps","v","ReportSummaryItem","reportSummaryItems_styles_styles","skeleton","ReportSummaryItems","Component","[object Object]","nextProps","this","props","otherIndex","findIndex","includes","slice","getItems","chartStyles","currentCostData","fill","stroke","currentInfrastructureCostData","strokeDasharray","itemsPerRow","labels","fontFamily","minWidth","legendColorScale","previousCostData","previousInfrastructureCostData","currentColorScale","previousColorScale","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","costChart_CostChart","super","arguments","containerRef","createRef","state","hiddenSeries","Set","initDatum","costKey","setState","series","childName","legendItem","chartUtils","symbol","handleNavToggle","setTimeout","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","legendItemsPerRow","ChartLegend","colorScale","getLegendData","responsive","formatDatumValue","formatDatumOptions","dist_es","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","window","addEventListener","navToggle","insights","chrome","on","prevProps","removeEventListener","domain","maxCurrentInfrastructure","maxCurrentUsage","maxPreviousInfrastructure","maxPreviousUsage","maxValue","Math","ceil","currentInfrastructureDate","get_date_default","currentUsageDate","previousInfrastructureDate","previousUsageDate","adjustContainerHeight","containerHeight","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","chart_styles","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","reportSummaryTrend_styles_styles","ReportSummaryCost","trendChart_styles_chartStyles","previousMonth","currentMonth","trendChart_TrendChart","currentData","previousData","showSupplementaryLabel","showUsageLegendLabel","orientation","maxCurrent","maxPrevious","previousDate","currentDate","ReportSummaryTrend","usageChart_styles_chartStyles","chartContainer","currentRequestData","currentUsageData","previousRequestData","previousUsageData","usageChart_UsageChart","maxCurrentRequest","maxPreviousRequest","currentRequestDate","previousRequestDate","ReportSummaryUsage","getValueForItem","item","array","b","aVal","bVal","getReleasePath","pathName","location","pathname","split","shift","release","viewSources","NoProvidersState","react_redux_es","getViewSources","href","dollar_sign_icon","DashboardBase","DashboardWidget","selectWidgets","widgets","widgetId","widget","showHorizontal","xl2","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","tabItems","dashboardWidgetBase_DashboardWidgetBase","activeTabKey","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","awsQuery","order_by","getCostChart","getTrendChart","getUsageChart","currentReport","previousReport","trend","getUnits","titleKey","currentInfrastructureData","previousInfrastructureData","getDetails","getDetailsLabel","requestKey","usageKey","getDetailsLink","Link","to","onClick","handleInsightsNavClick","getDetailsLinkTitle","groupBy","getHorizontalLayout","currentReportFetchStatus","getSubTitle","getTabs","getTitle","get_month_default","format_default","start_of_month_default","getTab","tabsReport","tabsReportFetchStatus","Tab","eventKey","getTabTitle","getTabItem","availableTabs","topItems","activeTab","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","appNavId","appNavClick","secondaryNav","event","tabIndex","updateTab","fetchReports","awsCloudDashboardWidget_getIdKeyForTab","mapStateToProps","common","awsCloudDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","previous","tabsQuery","reports","selectReport","reportPathsType","reportType","selectReportFetchStatus","mapDispatchToProps","fetchWidgetReports","changeWidgetTab","AwsCloudDashboardWidget","awsCloudDashboard_mapStateToProps","selectCurrentWidgets","awsCloudDashboard_awsCloudDashboard","awsDashboardWidget_getIdKeyForTab","awsDashboardWidget_mapStateToProps","awsDashboard","awsDashboardWidget_mapDispatchToProps","AwsDashboardWidget","awsDashboard_mapStateToProps","awsDashboard_awsDashboard","azureCloudDashboardWidget_getIdKeyForTab","azureCloudDashboardWidget_mapStateToProps","azureCloudDashboard","azureCloudDashboardWidget_mapDispatchToProps","AzureCloudDashboardWidget","azureCloudDashboard_mapStateToProps","azureCloudDashboard_azureCloudDashboard","azureDashboardWidget_getIdKeyForTab","azureDashboardWidget_mapStateToProps","azureDashboard","azureDashboardWidget_mapDispatchToProps","AzureDashboardWidget","azureDashboard_mapStateToProps","azureDashboard_azureDashboard","ocpCloudDashboardWidget_getIdKeyForTab","ocpCloudDashboardWidget_mapStateToProps","ocpCloudDashboard","ocpCloudDashboardWidget_mapDispatchToProps","OcpCloudDashboardWidget","ocpCloudDashboard_mapStateToProps","ocpCloudDashboard_ocpCloudDashboard","ocpDashboardWidget_styles_chartStyles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","ocpSupplementaryDashboardWidget_getIdKeyForTab","ocpSupplementaryDashboardWidget_mapStateToProps","ocpSupplementaryDashboard","ocpSupplementaryDashboardWidget_mapDispatchToProps","OcpSupplementaryDashboardWidget","ocpSupplementaryDashboard_mapStateToProps","ocpSupplementaryDashboard_ocpSupplementaryDashboard","ocpUsageDashboardWidget_getIdKeyForTab","ocpUsageDashboardWidget_mapStateToProps","ocpUsageDashboard","ocpUsageDashboardWidget_mapDispatchToProps","OcpUsageDashboardWidget","ocpUsageDashboard_mapStateToProps","ocpUsageDashboard_ocpUsageDashboard","overview_styles_styles","info","marginLeft","verticalAlign","infoIcon","infoTitle","fontWeight","perspective","headerOverride","perspective_styles_styles","perspectiveSelector","perspectiveLabel","Perspective","defaultState","isPerspectiveOpen","getDropDownItems","option","DropdownItem","component","handleClick","getCurrentLabel","currentItem","onItemClicked","handleSelect","handleToggle","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","overview_getIdKeyForTab","ocpOptions","infrastructureAllCloudOptions","infrastructureAwsOptions","infrastructureAzureOptions","infrastructureOcpOptions","overview_mapStateToProps","awsProvidersQueryString","providersQuery","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","azureProvidersQueryString","azureProviders","azureProvidersError","azureProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","overview","showPopover","getAvailableTabs","isAwsAvailable","isAzureAvailable","isOcpAvailable","isOcpCloudAvailable","contentRef","getCurrentTab","getDefaultInfrastructurePerspective","getDefaultOcpPerspective","getPerspective","currentInfrastructurePerspective","currentOcpPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","val","TabContent","emptyTab","handlePopoverClick","show","prevState","isLoading","noAwsProviders","noAzureProviders","noOcpProviders","noProviders","showTabs","sizes","Popover","aria-label","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState"],"mappings":"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","file":"75311feadbae0975db16.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { getComputedReportItems, } from 'utils/computedReport/getComputedReportItems';\nimport { unitLookupKey, } from 'utils/formatValue';\nexport function transformReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost', reportItemValue = 'total') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        idKey: key,\n        report,\n        reportItemValue,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key, reportItem));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key, reportItem));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key, reportItem)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date', reportItem = 'cost') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units[reportItem],\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { global_Color_dark_100, global_Color_light_100, global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const chartStyles = {\n    padding: 8,\n    group: {\n        data: { strokeWidth: 2, fillOpacity: 0.4 },\n    },\n    tooltipText: {\n        fontSize: '14px',\n        fill: global_Color_light_100.value,\n    },\n    tooltipFlyout: { fill: global_Color_dark_100.value },\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const chartOverride = css `\n  :not(foo) svg {\n    overflow: visible;\n  }\n`;\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedReportItems({ idKey, labelKey = idKey, report, reportItemValue = 'total', sortDirection = 0 /* asc */, sortKey = 'cost', }) {\n    return sort(getUnsortedComputedReportItems({\n        idKey,\n        labelKey,\n        report,\n        reportItemValue,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedReportItems({ report, idKey, labelKey = idKey, reportItemValue = 'total', }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint && dataPoint.values) {\n            dataPoint.values.forEach((value) => {\n                // clusters will either contain the cluster alias or default to cluster ID\n                const cluster_alias = value.clusters && value.clusters.length > 0\n                    ? value.clusters[0]\n                    : undefined;\n                const cluster = cluster_alias || value.cluster;\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cost = value.cost && value.cost.total ? value.cost.total.value : 0;\n                const supplementary = value.supplementary && value.supplementary.total\n                    ? value.supplementary.total.value\n                    : 0;\n                const infrastructure = value.infrastructure && value.infrastructure[reportItemValue]\n                    ? value.infrastructure[reportItemValue].value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (itemLabelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (itemLabelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (value.capacity && { capacity: value.capacity.units })), { cost: value.cost && value.cost.total ? value.cost.total.units : 'USD' }), (value.limit && { limit: value.limit.units })), (value.infrastructure &&\n                    value.infrastructure.total && {\n                    infrastructure: value.infrastructure.total.units,\n                })), (value.request && { request: value.request.units })), (value.supplementary &&\n                    value.supplementary.total && {\n                    supplementary: value.supplementary.total.units,\n                })), (value.usage && { usage: value.usage.units }));\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        clusters: value.clusters,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        supplementary,\n                        id,\n                        infrastructure,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign(Object.assign({}, itemMap.get(id)), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, supplementary: itemMap.get(id).supplementary + supplementary, infrastructure: itemMap.get(id).infrastructure + infrastructure, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\n","import { tagKeyPrefix } from 'api/queries/query';\nexport function getItemLabel({ report, labelKey, value }) {\n    let itemLabelKey = String(labelKey);\n    if (report.meta && report.meta.group_by) {\n        const group_by = report.meta.group_by;\n        for (const key of Object.keys(group_by)) {\n            if (key.indexOf(tagKeyPrefix)) {\n                const tagPrefixKey = tagKeyPrefix + labelKey;\n                if (value.hasOwnProperty(tagPrefixKey)) {\n                    itemLabelKey = tagPrefixKey;\n                }\n            }\n        }\n    }\n    return itemLabelKey;\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        cluster_lnk: 'cluster-lnk',\n        historical_data_btn: 'historical-data-btn',\n        show_more_btn: 'show-more-btn',\n        tag_lnk: 'tag-lnk',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","export const styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n};\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { ErrorCircleOIcon, LockIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error &&\n        error.response &&\n        (error.response.status === 401 || error.response.status === 403)) {\n        icon = LockIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { style: styles.container },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","export const styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '150px',\n    },\n};\n","import { EmptyState, EmptyStateBody, Spinner, Title, } from '@patternfly/react-core';\nimport { BinocularsIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { style: styles.container },\n        React.createElement(EmptyState, null,\n            React.createElement(Spinner, { size: \"lg\" }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = {\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n};\n","import { MinusIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { style: styles.container },\n        React.createElement(MinusIcon, null)));\n};\n","import { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n};\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './reportSummary.styles';\nconst ReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { style: styles.reportSummary },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { style: styles.subtitle }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { style: styles.chartSkeleton, size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { style: styles.legendSkeleton, size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst ReportSummary = translate()(ReportSummaryBase);\nexport { ReportSummary };\n","import { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = {\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './reportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { style: styles.reportSummary },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { style: styles.cost },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && React.createElement(\"p\", { style: styles.subtitle }, subTitle)),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { style: styles.chartSkeleton, size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { style: styles.legendSkeleton, size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { style: styles.container },\n                React.createElement(\"div\", { style: styles.tops }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst ReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { ReportSummaryAlt };\n","import { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = {\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: global_spacer_sm.value,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    units: {\n        paddingLeft: global_spacer_xs.value,\n        paddingBottom: global_spacer_sm.value,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n        whiteSpace: 'nowrap',\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './reportSummaryDetails.styles';\nconst ReportSummaryDetailsBase = ({ chartType, computedReportItem = 'cost', computedReportItemValue = 'total', costLabel, formatValue, formatOptions, report, requestFormatOptions, requestLabel, showTooltip = false, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let supplementaryCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const hasTotal = report && report.meta && report.meta.total;\n    const hasCost = hasTotal && report.meta.total.cost && report.meta.total.cost.total;\n    const hasCount = hasTotal && report.meta.total.count;\n    const hasSupplementaryCost = hasTotal &&\n        report.meta.total.supplementary &&\n        report.meta.total.supplementary.total &&\n        report.meta.total.supplementary.total.value;\n    const hasInfrastructureCost = hasTotal &&\n        report.meta.total.infrastructure &&\n        report.meta.total.infrastructure[computedReportItemValue] &&\n        report.meta.total.infrastructure[computedReportItemValue].value;\n    const hasRequest = hasTotal && report.meta.total.request;\n    const hasUsage = hasTotal && report.meta.total.usage;\n    if (hasTotal) {\n        cost = formatValue(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD', formatOptions);\n        supplementaryCost = formatValue(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost\n            ? report.meta.total.supplementary.total.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(hasInfrastructureCost\n            ? report.meta.total.infrastructure[computedReportItemValue].value\n            : 0, hasInfrastructureCost\n            ? report.meta.total.infrastructure[computedReportItemValue].units\n            : 'USD', formatOptions);\n        request = formatValue(hasRequest ? report.meta.total.request.value : 0, hasRequest ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        if (hasUsage && report.meta.total.usage.value >= 0) {\n            usage = formatValue(hasUsage ? report.meta.total.usage.value : 0, hasUsage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Workaround for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(hasUsage ? report.meta.total.usage : 0, hasCount ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => {\n        let value = cost;\n        if (computedReportItem === \"infrastructure\" /* infrastructure */) {\n            value = infrastructureCost;\n        }\n        else if (computedReportItem === \"supplementary\" /* supplementary */) {\n            value = supplementaryCost;\n        }\n        return (React.createElement(\"div\", { style: styles.valueContainer },\n            Boolean(showTooltip) ? (React.createElement(Tooltip, { content: t('dashboard.total_cost_tooltip', {\n                    infrastructureCost,\n                    supplementaryCost,\n                }), enableFlip: true },\n                React.createElement(\"div\", { style: styles.value }, value))) : (React.createElement(\"div\", { style: styles.value }, value)),\n            React.createElement(\"div\", { style: styles.text },\n                React.createElement(\"div\", null, costLabel))));\n    };\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasRequest\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { style: styles.valueContainer },\n            React.createElement(\"div\", { style: styles.value },\n                request,\n                Boolean(showUnits &&\n                    (units || (hasRequest && report.meta.total.request.value >= 0))) && React.createElement(\"span\", { style: styles.units }, unitsLabel)),\n            React.createElement(\"div\", { style: styles.text },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasUsage ? report.meta.total.usage.units : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { style: styles.valueContainer },\n            React.createElement(\"div\", { style: styles.value },\n                usage,\n                Boolean(showUnits &&\n                    (units || (hasUsage && report.meta.total.usage.value >= 0))) && React.createElement(\"span\", { style: styles.units }, unitsLabel)),\n            React.createElement(\"div\", { style: styles.text },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (chartType === \"cost\" /* cost */ ||\n        chartType === \"supplementary\" /* supplementary */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (chartType === \"trend\" /* trend */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else if (chartType === \"usage\" /* usage */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n    else {\n        return null;\n    }\n};\nconst ReportSummaryDetails = translate()(ReportSummaryDetailsBase);\nexport { ReportSummaryDetails };\n","import { global_spacer_md } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const reportSummaryItem = css `\n  :not(:last-child) {\n    margin-bottom: ${global_spacer_md.value};\n  }\n`;\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { reportSummaryItem } from './reportSummaryItem.styles';\nconst ReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: reportSummaryItem },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst ReportSummaryItem = translate()(ReportSummaryItemBase);\nexport { ReportSummaryItem };\n","import { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = {\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedReportItems, } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './reportSummaryItems.styles';\nclass ReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { computedReportItemValue = 'total', idKey, labelKey, report, } = this.props;\n        const computedItems = getComputedReportItems({\n            report,\n            idKey,\n            labelKey,\n            reportItemValue: computedReportItemValue,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, style: styles.skeleton }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, style: styles.skeleton }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, style: styles.skeleton })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst ReportSummaryItems = translate()(ReportSummaryItemsBase);\nexport { ReportSummaryItems, };\n","import { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { chartOverride } from 'components/charts/common/chart.styles';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        childName: 'previousInfrastructureCost',\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        childName: 'currentInfrastructureCost',\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", responsive: false, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign({}, s.legendItem), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: chartOverride, ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            title,\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { CostChart };\n","import { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = {\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n};\n","import { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './reportSummaryTrend.styles';\nconst ReportSummaryCost = props => (React.createElement(\"div\", { style: styles.chart },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { ReportSummaryCost };\n","import { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { chartOverride } from 'components/charts/common/chart.styles';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showSupplementaryLabel = false, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : showSupplementaryLabel\n                    ? 'chart.cost_supplementary_legend_label'\n                    : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            // Todo: Leave one legend item visible at all times?\n            // const { hiddenSeries, series } = this.state;\n            // const leaveVisible = hiddenSeries.size === series.length - 1;\n            // if (leaveVisible && !this.isSeriesHidden(props.index)) {\n            //   return;\n            // }\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign({}, s.legendItem), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: chartOverride, ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            title,\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { TrendChart };\n","import { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './reportSummaryTrend.styles';\nconst ReportSummaryTrend = props => (React.createElement(\"div\", { style: styles.chart },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { ReportSummaryTrend };\n","import { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartContainer: {\n        marginTop: global_spacer_lg.value,\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { chartOverride } from 'components/charts/common/chart.styles';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign({}, s.legendItem), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: chartOverride, ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            title,\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { UsageChart };\n","import { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './reportSummaryTrend.styles';\nconst ReportSummaryUsage = props => (React.createElement(\"div\", { style: styles.chart },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { ReportSummaryUsage };\n","export { ReportSummary } from './reportSummary';\nexport { ReportSummaryAlt } from './reportSummaryAlt';\nexport { ReportSummaryDetails } from './reportSummaryDetails';\nexport { ReportSummaryItem } from './reportSummaryItem';\nexport { ReportSummaryItems } from './reportSummaryItems';\nexport { ReportSummaryCost } from './reportSummaryCost';\nexport { ReportSummaryTrend } from './reportSummaryTrend';\nexport { ReportSummaryUsage } from './reportSummaryUsage';\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","export const getReleasePath = () => {\n    const pathName = window.location.pathname.split('/');\n    pathName.shift();\n    let release = '';\n    if (pathName[0] === 'beta') {\n        release = `/beta`;\n    }\n    return release;\n};\n","import { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { getReleasePath } from 'utils/pathname';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            const release = getReleasePath();\n            return (React.createElement(\"a\", Object.assign({ href: `${release}/settings/sources` }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { style: styles.container },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { style: styles.viewSources }, this.getViewSources()))));\n    }\n}\nconst NoProvidersState = translate()(connect()(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.details.showHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","import { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformReport, } from 'components/charts/common/chartUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType } = this.props;\n            if (chartType === \"cost\" /* cost */) {\n                return this.getCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"supplementary\" /* supplementary */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, true);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height);\n            }\n            else {\n                return null;\n            }\n        };\n        // This chart displays cost and infrastructure cost\n        this.getCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementaryCost, etc.\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, trend.type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, trend.type, 'date', 'infrastructure', computedReportItemValue);\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            return (React.createElement(ReportSummaryCost, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title }));\n        };\n        // This chart displays cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementaryCost, etc.\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            // Data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: units }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            const units = this.getUnits();\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, requestLabel: this.getDetailsLabel(details.requestKey, units), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: details.units, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab)));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, true)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('aws_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus, trend, } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { computedReportItemValue: computedReportItemValue, idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, getIdKeyForTab, tabsReport, topItems, trend, } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue =\n                        tabsReport.meta.total[computedReportItem][computedReportItemValue]\n                            .value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: details.units ? details.units : this.getUnits(), value: reportItem[computedReportItem] }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            let units;\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                units = hasUsage\n                    ? unitLookupKey(currentReport.meta.total.usage.units)\n                    : '';\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                units = hasCost\n                    ? unitLookupKey(currentReport.meta.total[computedReportItem][computedReportItemValue].units)\n                    : '';\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { style: styles.tabs }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            const { details } = this.props;\n            if (details.appNavId) {\n                insights.chrome.appNavClick({\n                    id: details.appNavId,\n                    secondaryNav: true,\n                });\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase, };\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardActions, awsCloudDashboardSelectors, } from 'store/dashboard/awsCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsCloudDashboardActions.fetchWidgetReports,\n    updateTab: awsCloudDashboardActions.changeWidgetTab,\n};\nconst AwsCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardSelectors } from 'store/dashboard/awsCloudDashboard';\nimport { AwsCloudDashboardWidget } from './awsCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AwsCloudDashboardWidget,\n        selectWidgets: awsCloudDashboardSelectors.selectWidgets(state),\n        widgets: awsCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/dashboard/awsDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardActions, azureCloudDashboardSelectors, } from 'store/dashboard/azureCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureCloudDashboardActions.fetchWidgetReports,\n    updateTab: azureCloudDashboardActions.changeWidgetTab,\n};\nconst AzureCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardSelectors } from 'store/dashboard/azureCloudDashboard';\nimport { AzureCloudDashboardWidget } from './azureCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AzureCloudDashboardWidget,\n        selectWidgets: azureCloudDashboardSelectors.selectWidgets(state),\n        widgets: azureCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, } from 'store/dashboard/azureDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 180,\n    containerAltHeight: 275,\n};\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/dashboard/ocpDashboard';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardActions, ocpSupplementaryDashboardSelectors, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpSupplementaryDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpSupplementaryDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpSupplementaryDashboardActions.fetchWidgetReports,\n    updateTab: ocpSupplementaryDashboardActions.changeWidgetTab,\n};\nconst OcpSupplementaryDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpSupplementaryDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardSelectors } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { OcpSupplementaryDashboardWidget } from './ocpSupplementaryDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpSupplementaryDashboardWidget,\n        selectWidgets: ocpSupplementaryDashboardSelectors.selectWidgets(state),\n        widgets: ocpSupplementaryDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpSupplementaryDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpSupplementaryDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardActions, ocpUsageDashboardSelectors, } from 'store/dashboard/ocpUsageDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpUsageDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpUsageDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpUsageDashboardActions.fetchWidgetReports,\n    updateTab: ocpUsageDashboardActions.changeWidgetTab,\n};\nconst OcpUsageDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpUsageDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardSelectors } from 'store/dashboard/ocpUsageDashboard';\nimport { OcpUsageDashboardWidget } from './ocpUsageDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpUsageDashboardWidget,\n        selectWidgets: ocpUsageDashboardSelectors.selectWidgets(state),\n        widgets: ocpUsageDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpUsageDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpUsageDashboard;\n","import { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = {\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    perspective: {\n        marginBottom: global_spacer_lg.value,\n        marginTop: global_spacer_lg.value,\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n};\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = event => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = translate()(PerspectiveBase);\nexport { Perspective };\n","import { Popover, Tab, TabContent, Tabs, Title, TitleSize, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsCloudDashboard from 'pages/dashboard/awsCloudDashboard/awsCloudDashboard';\nimport AwsDashboard from 'pages/dashboard/awsDashboard/awsDashboard';\nimport AzureCloudDashboard from 'pages/dashboard/azureCloudDashboard/azureCloudDashboard';\nimport AzureDashboard from 'pages/dashboard/azureDashboard/azureDashboard';\nimport OcpCloudDashboard from 'pages/dashboard/ocpCloudDashboard/ocpCloudDashboard';\nimport OcpDashboard from 'pages/dashboard/ocpDashboard/ocpDashboard';\nimport OcpSupplementaryDashboard from 'pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard';\nimport OcpUsageDashboard from 'pages/dashboard/ocpUsageDashboard/ocpUsageDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { headerOverride, styles } from './overview.styles';\nimport { Perspective } from './perspective';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [\n    { label: 'overview.perspective.all', value: 'all' },\n    { label: 'overview.perspective.supplementary', value: 'supplementary' },\n];\n// Infrastructure all cloud options\nconst infrastructureAllCloudOptions = [\n    { label: 'overview.perspective.all_cloud', value: 'all_cloud' },\n];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [\n    { label: 'overview.perspective.aws', value: 'aws' },\n    { label: 'overview.perspective.aws_cloud', value: 'aws_cloud' },\n];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [\n    { label: 'overview.perspective.azure', value: 'azure' },\n    { label: 'overview.perspective.azure_cloud', value: 'azure_cloud' },\n];\n// Infrastructure Ocp options\nconst infrastructureOcpOptions = [\n    { label: 'overview.perspective.ocp_usage', value: 'ocp_usage' },\n];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            if (isOcpAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (isAwsAvailable || isAzureAvailable || isOcpCloudAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            const showOcpOnly = isOcpAvailable &&\n                !(isAwsAvailable || isAzureAvailable || isOcpCloudAvailable);\n            const showInfrastructureOnly = !isOcpAvailable &&\n                (isAwsAvailable || isAzureAvailable || isOcpCloudAvailable);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all_cloud\" /* allCloud */;\n            }\n            if (isAwsAvailable) {\n                return \"aws\" /* aws */;\n            }\n            if (isAzureAvailable) {\n                return \"azure\" /* azure */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all\" /* all */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective, } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (!(isAwsAvailable || isAzureAvailable || isOcpAvailable)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (isOcpAvailable) {\n                    options.push(...infrastructureAllCloudOptions);\n                }\n                if (isAwsAvailable) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (isAzureAvailable) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (isOcpAvailable) {\n                    options.push(...infrastructureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */\n                ? currentInfrastructurePerspective\n                : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: this.getTabTitle(tab) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective, } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"all_cloud\" /* allCloud */) {\n                    return React.createElement(OcpCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    return React.createElement(AwsDashboard, null);\n                }\n                else if (currentInfrastructurePerspective ===\n                    \"aws_cloud\" /* awsFiltered */) {\n                    return React.createElement(AwsCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    return React.createElement(AzureDashboard, null);\n                }\n                else if (currentInfrastructurePerspective ===\n                    \"azure_cloud\" /* azureCloud */) {\n                    return React.createElement(AzureCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"ocp_usage\" /* ocpUsage */) {\n                    return React.createElement(OcpUsageDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpCloudDashboard, null); // default\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                if (currentOcpPerspective === \"all\" /* all */) {\n                    return React.createElement(OcpDashboard, null);\n                }\n                else if (currentOcpPerspective === \"supplementary\" /* supplementary */) {\n                    return React.createElement(OcpSupplementaryDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpDashboard, null); // default\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return t('overview.infrastructure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders } = this.props;\n            return (awsProviders !== undefined &&\n                awsProviders.meta !== undefined &&\n                awsProviders.meta.count > 0);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders } = this.props;\n            return (azureProviders !== undefined &&\n                azureProviders.meta !== undefined &&\n                azureProviders.meta.count > 0);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders } = this.props;\n            return (ocpProviders !== undefined &&\n                ocpProviders.meta !== undefined &&\n                ocpProviders.meta.count > 0);\n        };\n        this.isOcpCloudAvailable = () => {\n            return this.isAwsAvailable() && this.isOcpAvailable();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { awsProviders, azureProviders, ocpProviders } = this.props;\n        if (prevProps.awsProviders !== awsProviders ||\n            prevProps.azureProviders !== azureProviders ||\n            prevProps.ocpProviders !== ocpProviders) {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { awsProvidersError, awsProvidersFetchStatus, azureProvidersError, azureProvidersFetchStatus, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || azureProvidersError || ocpProvidersError;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = !this.isAwsAvailable() &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() &&\n            azureProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { size: TitleSize['2xl'] },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(InfoCircleIcon, { style: styles.info, onClick: this.handlePopoverClick })))))),\n                Boolean(showTabs) && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                    React.createElement(\"div\", { style: styles.perspective }, this.getPerspective())))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersError,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n"],"sourceRoot":""}