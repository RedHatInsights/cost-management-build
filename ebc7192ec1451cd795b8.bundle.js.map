{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/components/state/loadingState/loadingState.tsx","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/components/currency/currency.styles.ts","webpack://koku-ui/./src/components/currency/currency.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardBase.tsx","webpack://koku-ui/./src/pages/views/overview/components/chartComparison.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidgetBase.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/overview.styles.ts","webpack://koku-ui/./src/pages/views/overview/overview.tsx","webpack://koku-ui/./src/pages/views/overview/index.ts","webpack://koku-ui/./src/utils/cookie.ts","webpack://koku-ui/./src/utils/localStorage.ts","webpack://koku-ui/./src/utils/userAccess.ts","webpack://koku-ui/./src/utils/valueFormatter.ts"],"names":["getUserAccessQuery","query","stringify","encode","indices","LoadingState","intl","title","formatMessage","subTitle","EmptyState","variant","EmptyStateVariant","className","Spinner","size","Title","headingLevel","EmptyStateBody","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","constructor","super","arguments","this","defaultState","isPerspectiveOpen","state","Object","assign","getDropDownItems","options","props","map","option","DropdownItem","component","key","value","onClick","handleClick","label","getCurrentLabel","currentItem","getDropDown","isDisabled","dropdownItems","length","style","Dropdown","onSelect","handleSelect","toggle","DropdownToggle","onToggle","handleToggle","isOpen","onItemClicked","setState","render","messages","Perspective","injectIntl","currencySelector","currencyLabel","global_spacer_md","CurrencyBase","isCurrencyOpen","getOptions","currency","data","val","push","code","units","id","componentDidMount","fetchCurrency","mapStateToProps","currencyError","currencyFetchStatus","mapDispatchToProps","CurrencyConnect","connect","Currency","DashboardBase","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","isChartComparisonOpen","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","tabs","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showInfrastructureLabel","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","getUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","currentInfrastructureData","previousInfrastructureData","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","forecastInfrastructureData","computedForecastInfrastructureItem","ReportSummaryComponent","currentInfrastructureCostData","forecastConeData","forecastInfrastructureConeData","previousInfrastructureCostData","showForecast","undefined","valueFormatter","valueFormatterOptions","currentData","previousData","showUsageLegendLabel","report","forecast","newForecast","cloneDeep","total","meta","reportedValues","filter","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageValueFormatterOptions","usageLabel","usageKey","getValueFormatter","getDetailsLink","Link","to","getDetailsLinkTitle","count","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","toString","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","event","tabIndex","updateTab","fetchForecasts","fetchReports","widget","awsDashboard","queries","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","AwsDashboardWidget","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","alignSelf","flexGrow","textAlign","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","perspective","global_spacer_lg","ocpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureIbmOptions","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOcpCloudAvailable","getCurrentTab","aws","azure","gcp","ibm","ocp","ocpCloud","getDefaultInfrastructurePerspective","getDefaultOcpPerspective","ocpProviders","ocpProvidersFetchStatus","userAccess","getPerspective","currentInfrastructurePerspective","currentOcpPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","awsProvidersFetchStatus","azureProvidersFetchStatus","gcpProvidersFetchStatus","ibmProvidersFetchStatus","ibmUserAccess","resetState","componentDidUpdate","prevProps","userAccessFetchStatus","isLoading","noAwsProviders","noAzureProviders","noGcpProviders","noIbmProviders","noOcpProviders","noProviders","Split","SplitItem","TitleSizes","Popover","enableFlip","bodyContent","Button","ButtonVariant","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","userAccessQueryString","userAccessError","ibmUserAccessQueryString","ibmUserAccessError","ibmUserAccessFetchStatus","ui","currencyTokenID","currencyUnitsID","inactiveSourcesTokenID","getPartialTokenCookie","token","name","cookie","document","match","pop","getCookie","substring","deleteInactiveSourcesToken","localStorage","removeItem","getCurrencyUnits","getItem","invalidateCurrencyUnits","isCurrencyTokenValid","initInactiveSourcesToken","setInactiveSourcesToken","isInactiveSourcesTokenValid","setCurrencyUnits","setItem","setCurrencyToken","hasAccess","userAccessType","result","Array","isArray","find","d","access","hasProviders","providers","providersFetchStatus","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","gcpsProvidersFetchStatus","hasIbmAccess","hasOcpAccess","unitLookupKey","lookup","replace","toLowerCase","formatValue","fValue","formatUsageHrs","formatUsageGb","unknownTypeFormatter","formatCurrency","fractionDigits","minimumFractionDigits","maximumFractionDigits","toUpperCase","formatCurrencyAbbreviation","abbreviationFormats","symbol","format","f","toLocaleString"],"mappings":"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","file":"ebc7192ec1451cd795b8.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title } from '@patternfly/react-core';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n// defaultIntl required for testing\nconst LoadingStateBase = ({ intl = defaultIntl }) => {\n    const title = intl.formatMessage(messages.LoadingStateTitle);\n    const subTitle = intl.formatMessage(messages.LoadingStateDesc);\n    return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n        React.createElement(Spinner, { size: \"lg\" }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, title),\n        React.createElement(EmptyStateBody, null, subTitle)));\n};\nconst LoadingState = injectIntl(LoadingStateBase);\nexport { LoadingState };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { intl, options } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, intl.formatMessage(option.label, { value: option.value }))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, intl, options } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = intl.formatMessage(option.label, { value: option.value });\n                    break;\n                }\n            }\n            return label;\n        };\n        this.getDropDown = () => {\n            const { intl, isDisabled, options } = this.props;\n            const { isPerspectiveOpen } = this.state;\n            const dropdownItems = this.getDropDownItems();\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems }));\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.Perspective)),\n            this.getDropDown()));\n    }\n}\nconst Perspective = injectIntl(PerspectiveBase);\nexport { Perspective };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    currencySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    currencyLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { currencyActions, currencySelectors } from 'store/currency';\nimport { getCurrencyUnits, invalidateCurrencyUnits, setCurrencyUnits } from 'utils/localStorage';\nimport { styles } from './currency.styles';\nclass CurrencyBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: 'USD',\n            isCurrencyOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getOptions = () => {\n            const { currency } = this.props;\n            const options = [];\n            if (currency) {\n                currency.data.map(val => {\n                    options.push({\n                        label: messages.CurrencyOptions,\n                        value: val.code,\n                    });\n                });\n            }\n            return options;\n        };\n        this.getDropDownItems = () => {\n            const { intl } = this.props;\n            const options = this.getOptions();\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, intl.formatMessage(option.label, { units: option.value }))));\n        };\n        this.getCurrentLabel = () => {\n            const { intl } = this.props;\n            const { currentItem } = this.state;\n            const currencyUnits = getCurrencyUnits(); // Get currency units from local storage\n            const units = currencyUnits ? currencyUnits : currentItem;\n            return intl.formatMessage(messages.CurrencyOptions, { units });\n        };\n        this.getDropDown = () => {\n            const { isDisabled } = this.props;\n            const { isCurrencyOpen } = this.state;\n            const dropdownItems = this.getDropDownItems();\n            return (React.createElement(Dropdown, { id: \"currencyDropdown\", onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isCurrencyOpen, dropdownItems: dropdownItems }));\n        };\n        this.handleClick = value => {\n            setCurrencyUnits(value); // Set currency units via local storage\n            this.setState({ currentItem: value });\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isCurrencyOpen: !this.state.isCurrencyOpen,\n            });\n        };\n        this.handleToggle = isCurrencyOpen => {\n            this.setState({\n                isCurrencyOpen,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchCurrency } = this.props;\n        fetchCurrency();\n    }\n    render() {\n        const { intl } = this.props;\n        // Delete currency units if current session is not valid\n        invalidateCurrencyUnits();\n        return (React.createElement(\"div\", { style: styles.currencySelector },\n            React.createElement(Title, { headingLevel: \"h2\", size: \"md\", style: styles.currencyLabel }, intl.formatMessage(messages.Currency)),\n            this.getDropDown()));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const currency = currencySelectors.selectCurrency(state);\n    const currencyError = currencySelectors.selectCurrencyError(state);\n    const currencyFetchStatus = currencySelectors.selectCurrencyFetchStatus(state);\n    return {\n        currency,\n        currencyError,\n        currencyFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchCurrency: currencyActions.fetchCurrency,\n};\nconst CurrencyConnect = connect(mapStateToProps, mapDispatchToProps)(CurrencyBase);\nconst Currency = injectIntl(CurrencyConnect);\nexport { Currency };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isChartComparisonOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, option.label)));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = option.label;\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isChartComparisonOpen: !this.state.isChartComparisonOpen,\n            });\n        };\n        this.handleToggle = isChartComparisonOpen => {\n            this.setState({\n                isChartComparisonOpen,\n            });\n        };\n    }\n    render() {\n        const { isChartComparisonOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isChartComparisonOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformForecast, transformForecastCone, transformReport, } from 'components/charts/common/chartDatumUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatCurrency, formatValue, unitLookupKey } from 'utils/valueFormatter';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = intl.formatMessage(messages.CurrencyUnits, { units: this.getUnits() });\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* cumulative */ },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, type, 'date', 'infrastructure', computedReportItemValue);\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const forecastInfrastructureData = this.getForecastData(currentReport, trend.computedForecastInfrastructureItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, forecastInfrastructureConeData: forecastInfrastructureData.forecastConeData, forecastInfrastructureData: forecastInfrastructureData.forecastData, height: height, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureData, showForecast: trend.computedForecastItem !== undefined, valueFormatter: formatCurrency, valueFormatterOptions: trend.valueFormatterOptions })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getUnits();\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, valueFormatter: formatCurrency, valueFormatterOptions: trend.valueFormatterOptions, units: units })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    const units = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.units\n                        : 'USD';\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === 0 /* rolling */) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, intl, previousReport, trend } = this.props;\n            const units = this.getUnits();\n            const title = intl.formatMessage(trend.titleKey, { units: intl.formatMessage(messages.CurrencyUnits, { units }) });\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            // Cost data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: units, valueFormatter: formatCurrency, valueFormatterOptions: trend.valueFormatterOptions }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: intl.formatMessage(messages.Units, { units: this.getUnits() }),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title, valueFormatter: formatValue, valueFormatterOptions: trend.valueFormatterOptions }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            const units = this.getUnits();\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey, units), report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: units, usageValueFormatterOptions: details.usageValueFormatterOptions, usageLabel: this.getDetailsLabel(details.usageKey, units), valueFormatter: this.getValueFormatter(), valueFormatterOptions: details.valueFormatterOptions }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key, { units: intl.formatMessage(messages.Units, { units }) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByAll, { value: key, count: 2 });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value, valueFormatterOptions: topItems.valueFormatterOptions, valueFormatter: this.getValueFormatter() }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getValueFormatter = () => {\n            const units = this.getUnits();\n            return unitLookupKey(units) ? formatValue : formatCurrency;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import AwsDashboard from './awsDashboard';\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import AwsOcpDashboard from './awsOcpDashboard';\nexport default AwsOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import AzureDashboard from './azureDashboard';\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import AzureOcpDashboard from './azureOcpDashboard';\nexport default AzureOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import GcpDashboard from './gcpDashboard';\nexport default GcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import GcpOcpDashboard from './gcpOcpDashboard';\nexport default GcpOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import IbmDashboard from './ibmDashboard';\nexport default IbmDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","import OcpCloudDashboard from './ocpCloudDashboard';\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","import OcpDashboard from './ocpDashboard';\nexport default OcpDashboard;\n","import global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    perspective: {\n        display: 'flex',\n        marginTop: global_spacer_lg.value,\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Split, SplitItem, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport AwsDashboard from 'pages/views/overview/awsDashboard';\nimport AwsOcpDashboard from 'pages/views/overview/awsOcpDashboard';\nimport AzureDashboard from 'pages/views/overview/azureDashboard';\nimport AzureOcpDashboard from 'pages/views/overview/azureOcpDashboard';\nimport GcpDashboard from 'pages/views/overview/gcpDashboard';\nimport GcpOcpDashboard from 'pages/views/overview/gcpOcpDashboard';\nimport IbmDashboard from 'pages/views/overview/ibmDashboard';\nimport OcpCloudDashboard from 'pages/views/overview/ocpCloudDashboard';\nimport OcpDashboard from 'pages/views/overview/ocpDashboard';\nimport { hasCloudCurrentMonthData, hasCloudPreviousMonthData, hasCurrentMonthData, hasPreviousMonthData, } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [{ label: messages.PerspectiveValues, value: 'ocp' }];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.PerspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.PerspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.PerspectiveValues, value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.PerspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\n//\n// Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n//\n// const infrastructureGcpOcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.PerspectiveValues, value: 'ibm' }];\n// Infrastructure Ocp cloud options\n//\n// Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\n//\n// const infrastructureOcpCloudOptions = [{ label: 'overview.perspective.ocp_cloud', value: 'ocp_cloud' }];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            const ocpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = ocp && !(aws || azure || gcp || ibm || ocpCloud);\n            const showInfrastructureOnly = !ocp && (aws || azure || gcp || ibm || ocpCloud);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\n            //\n            // if (this.isOcpAvailable()) {\n            //   return InfrastructurePerspective.ocpCloud;\n            // }\n            if (this.isAwsAvailable()) {\n                return \"aws\" /* aws */;\n            }\n            if (this.isAzureAvailable()) {\n                return \"azure\" /* azure */;\n            }\n            if (this.isGcpAvailable()) {\n                return \"gcp\" /* gcp */;\n            }\n            if (this.isIbmAvailable()) {\n                return \"ibm\" /* ibm */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            if (isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus)) {\n                return \"ocp\" /* ocp */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            if (!(aws || azure || gcp || ibm || ocp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\n                //\n                // if (ocp) {\n                //   options.push(...infrastructureOcpCloudOptions);\n                // }\n                if (aws) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (aws && ocp) {\n                    options.push(...infrastructureAwsOcpOptions);\n                }\n                if (gcp) {\n                    options.push(...infrastructureGcpOptions);\n                }\n                // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n                //\n                // if (gcp && ocp) {\n                //   options.push(...infrastructureGcpOcpOptions);\n                // }\n                if (ibm) {\n                    options.push(...infrastructureIbmOptions);\n                }\n                if (azure) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (azure && ocp) {\n                    options.push(...infrastructureAzureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"ocp_cloud\" /* ocpCloud */) {\n                    const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_ocp\" /* awsOcp */) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* gcp */) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp_ocp\" /* gcpOcp */) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ibm\" /* ibm */) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_ocp\" /* azureOcp */) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === \"ocp\" /* ocp */) {\n                    return hasData ? React.createElement(OcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return intl.formatMessage(messages.Infrastructure);\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return intl.formatMessage(messages.OpenShift);\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, awsProvidersFetchStatus, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, azureProvidersFetchStatus, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, gcpProvidersFetchStatus, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, ibmProvidersFetchStatus, ibmUserAccess } = this.props;\n            return isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus);\n        };\n        this.isOcpCloudAvailable = () => {\n            return this.isAwsAvailable() && this.isOcpAvailable();\n        };\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.setState({\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, userAccess } = this.props;\n        // Note: User access and providers are fetched via the Permissions and InactiveSources components used by all routes\n        if (prevProps.userAccess !== userAccess ||\n            prevProps.awsProviders !== awsProviders ||\n            prevProps.azureProviders !== azureProviders ||\n            prevProps.gcpProviders !== gcpProviders ||\n            prevProps.ibmProviders !== ibmProviders ||\n            prevProps.ocpProviders !== ocpProviders) {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ibmProvidersFetchStatus, intl, ocpProvidersFetchStatus, userAccessFetchStatus, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */;\n        // Test for no providers\n        const noAwsProviders = !this.isAwsAvailable() && awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && azureProvidersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && gcpProvidersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && ibmProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const title = intl.formatMessage(messages.OverviewTitle);\n        if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light headerOverride}` },\n                React.createElement(\"header\", { className: \"pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Split, null,\n                        React.createElement(SplitItem, null,\n                            React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                                title,\n                                React.createElement(\"span\", { style: styles.infoIcon },\n                                    React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.OverviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                            React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShiftCloudInfrastructure)),\n                                            React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftCloudInfrastructureDesc)),\n                                            React.createElement(\"br\", null),\n                                            React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShift)),\n                                            React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftDesc)),\n                                            React.createElement(\"br\", null),\n                                            React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.GCP)),\n                                            React.createElement(\"p\", null, intl.formatMessage(messages.GCPDesc)),\n                                            React.createElement(\"br\", null),\n                                            React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.IBM)),\n                                            React.createElement(\"p\", null, intl.formatMessage(messages.IBMDesc)),\n                                            React.createElement(\"br\", null),\n                                            React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.AWS)),\n                                            React.createElement(\"p\", null, intl.formatMessage(messages.AWSDesc)),\n                                            React.createElement(\"br\", null),\n                                            React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.Azure)),\n                                            React.createElement(\"p\", null, intl.formatMessage(messages.AzureDesc))) },\n                                        React.createElement(Button, { variant: ButtonVariant.plain },\n                                            React.createElement(OutlinedQuestionCircleIcon, null)))))),\n                        React.createElement(SplitItem, { isFilled: true }),\n                        React.createElement(SplitItem, null,\n                            React.createElement(Currency, null)))),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.perspective },\n                    this.getPerspective(),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    resetState: uiActions.resetState,\n};\nconst Overview = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n","export const deleteSessionCookie = name => {\n    // Delete only if cookie exists\n    if (getCookie(name)) {\n        const now = new Date();\n        now.setTime(now.getTime() - 3600);\n        document.cookie = `${name}=; expires=${now.toUTCString()}; path=/`;\n    }\n};\nexport const getCookie = name => {\n    const cookie = document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n    return cookie ? cookie.pop() : '';\n};\n// Returns session token\nexport const getTokenCookie = () => {\n    return getCookie('cs_jwt');\n};\nexport const setSessionCookie = (name, value) => {\n    document.cookie = `${name}=${value}; path=/`;\n};\n","import { getTokenCookie } from 'utils/cookie';\nconst currencyTokenID = 'cost_currency_token';\nconst currencyUnitsID = 'cost_currency_units';\nconst inactiveSourcesTokenID = 'cost_inactive_sources';\n// Returns a subset of the token cookie\nexport const getPartialTokenCookie = () => {\n    const token = getTokenCookie();\n    return token.substring(token.length - 40, token.length);\n};\n// Deletes currency token, used by isCurrencyTokenValid\nexport const deleteCurrencyToken = () => {\n    localStorage.removeItem(currencyTokenID);\n};\n// Deletes currency units\nexport const deleteCurrencyUnits = () => {\n    localStorage.removeItem(currencyUnitsID);\n    deleteCurrencyToken(); // Delete token used by isCurrencyTokenValid\n};\n// Deletes inactive sources token\nexport const deleteInactiveSourcesToken = () => {\n    localStorage.removeItem(inactiveSourcesTokenID);\n};\n// Returns currency token, used by isCurrencyTokenValid\nexport const getCurrencyToken = () => {\n    return localStorage.getItem(currencyTokenID);\n};\n// Returns currency units\nexport const getCurrencyUnits = () => {\n    const units = localStorage.getItem(currencyUnitsID);\n    return units ? units : 'USD';\n};\n// Returns inactive sources token\nexport const getInactiveSourcesToken = () => {\n    return localStorage.getItem(inactiveSourcesTokenID);\n};\n// Deletes currency units current session is not valid\nexport const invalidateCurrencyUnits = () => {\n    if (!isCurrencyTokenValid()) {\n        deleteCurrencyUnits();\n    }\n};\n// Returns true if currency token is valid for current session\nexport const isCurrencyTokenValid = () => {\n    return getCurrencyToken() === getPartialTokenCookie();\n};\n// Initialize inactive sources token, used by isInactiveSourcesTokenValid\nexport const initInactiveSourcesToken = () => {\n    setInactiveSourcesToken(getPartialTokenCookie());\n};\n// Returns true if inactive sources token is valid for current session\nexport const isInactiveSourcesTokenValid = () => {\n    return getInactiveSourcesToken() === getPartialTokenCookie();\n};\n// Set currency token, used by isCurrencyTokenValid\nexport const setCurrencyToken = value => {\n    localStorage.setItem(currencyTokenID, value);\n};\n// Set currency units\nexport const setCurrencyUnits = value => {\n    localStorage.setItem(currencyUnitsID, value);\n    setCurrencyToken(getPartialTokenCookie()); // Save token used by isCurrencyTokenValid\n};\n// Set inactive sources token\nexport const setInactiveSourcesToken = value => {\n    localStorage.setItem(inactiveSourcesTokenID, value);\n};\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers, providersFetchStatus) => {\n    let result = false;\n    if (providersFetchStatus === 2 /* complete */) {\n        // providers API returns empty data array for no sources\n        result = providers !== undefined && providers.meta !== undefined && providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders, awsProvidersFetchStatus) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders, awsProvidersFetchStatus);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders, azureProvidersFetchStatus) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders, azureProvidersFetchStatus);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders, gcpsProvidersFetchStatus) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders, gcpsProvidersFetchStatus);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders, ibmProvidersFetchStatus) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders, ibmProvidersFetchStatus);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders, ocpProvidersFetchStatus) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders, ocpProvidersFetchStatus);\n};\n","import { getLocale, intl } from 'components/i18n';\nimport messages from 'locales/messages';\n// Returns i18n key for given units\nexport const unitLookupKey = (units) => {\n    const lookup = units ? units.replace(/[- ]/g, '_').toLowerCase() : '';\n    switch (lookup) {\n        case 'core_hours':\n        case 'gb':\n        case 'gb_hours':\n        case 'gb_mo':\n        case 'gibibyte_month':\n        case 'hour':\n        case 'hrs':\n        case 'tag_mo':\n        case 'vm_hours':\n            return lookup;\n        default:\n            return undefined;\n    }\n};\n// Returns formatted units or currency with given currency-code\nexport const formatValue = (value, units, options = {}) => {\n    const lookup = unitLookupKey(units);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'core_hours':\n        case 'hour':\n        case 'hrs':\n            return formatUsageHrs(fValue, options);\n        case 'gb':\n        case 'gb_hours':\n        case 'gb_mo':\n        case 'gibibyte_month':\n        case 'tag_mo':\n        case 'vm_hours':\n            return formatUsageGb(fValue, options);\n    }\n    return unknownTypeFormatter(fValue);\n};\n// Some currencies do not have decimals, such as JPY, and some have 3 decimals such as IQD.\n// See https://docs.adyen.com/development-resources/currency-codes\nexport const formatCurrency = (value, units, { fractionDigits } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    const options = {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    };\n    return intl.formatNumber(fValue, Object.assign({ style: 'currency', currency: units ? units.toUpperCase() : 'USD' }, (fractionDigits !== undefined && options)));\n};\nexport const formatCurrencyAbbreviation = (value, units = 'USD') => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Derived from https://stackoverflow.com/questions/37799955/how-can-i-format-big-numbers-with-tolocalestring\n    const abbreviationFormats = [\n        { val: 1e15, symbol: 'quadrillion' },\n        { val: 1e12, symbol: 'trillion' },\n        { val: 1e9, symbol: 'billion' },\n        { val: 1e6, symbol: 'million' },\n        { val: 1e3, symbol: 'thousand' },\n    ];\n    // Find the proper format to use\n    let format;\n    if (abbreviationFormats != null) {\n        format = abbreviationFormats.find(f => fValue >= f.val);\n    }\n    // Apply format and insert symbol next to the numeric portion of the formatted string\n    if (format != null) {\n        const { val, symbol } = format;\n        return intl.formatMessage(messages.CurrencyAbbreviations, {\n            symbol,\n            value: formatCurrency(fValue / val, units, { fractionDigits: 0 }),\n        });\n    }\n    // If no format was found, format value without abbreviation\n    return formatCurrency(value, units, { fractionDigits: 0 });\n};\nconst formatUsageGb = (value, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString(getLocale(), {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nconst formatUsageHrs = (value, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString(getLocale(), {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nconst unknownTypeFormatter = (value, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString(getLocale(), {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n"],"sourceRoot":""}