{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/equal.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/charts/trendChart/index.ts","webpack:///./src/components/details/detailsDataToolbar.styles.ts","webpack:///./src/components/details/detailsDataToolbar.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/charts/historicalTrendChart/index.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/reports/awsReportSummary/index.ts","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/awsDetails/awsDetails.styles.ts","webpack:///./src/pages/awsDetails/detailsHeader.styles.ts","webpack:///./src/pages/awsDetails/groupBy.styles.ts","webpack:///./src/pages/awsDetails/groupBy.tsx","webpack:///./src/pages/awsDetails/detailsHeader.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.styles.ts","webpack:///./src/pages/awsDetails/detailsTagView.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.tsx","webpack:///./src/pages/awsDetails/exportModal.styles.ts","webpack:///./src/pages/awsDetails/exportModal.tsx","webpack:///./src/pages/awsDetails/historicalChart.styles.ts","webpack:///./src/pages/awsDetails/historicalChart.tsx","webpack:///./src/pages/awsDetails/historicalModal.styles.ts","webpack:///./src/pages/awsDetails/historicalModal.tsx","webpack:///./src/pages/awsDetails/detailsActions.tsx","webpack:///./src/pages/awsDetails/detailsTable.styles.ts","webpack:///./src/pages/awsDetails/detailsTableItem.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.tsx","webpack:///./src/pages/awsDetails/detailsWidget.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetView.tsx","webpack:///./src/pages/awsDetails/detailsWidget.tsx","webpack:///./src/pages/awsDetails/detailsTableItem.tsx","webpack:///./src/pages/awsDetails/detailsTable.tsx","webpack:///./src/pages/awsDetails/detailsToolbar.tsx","webpack:///./src/pages/awsDetails/awsDetails.tsx","webpack:///./src/pages/awsDetails/index.ts"],"names":["__webpack_require__","d","__webpack_exports__","unitLookupKey","formatValue","formatCurrency","unit","lookup","toLowerCase","value","options","fValue","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","transformAwsReport","transformAzureReport","transformOcpReport","transformOcpCloudReport","getDateRange","getMaxValue","getTooltipContent","getTooltipLabel","getCostRangeString","getUsageRangeString","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0__","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","n","date_fns_format__WEBPACK_IMPORTED_MODULE_1__","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3__","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4__","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","i18next__WEBPACK_IMPORTED_MODULE_5__","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","Object","map","i","createDatum","reduce","acc","prevValue","length","y","computedItem","x","id","label","Number","isFloat","parseFloat","toFixed","isInt","name","units","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","getDatumDateRange","setDate","lastDate","getDate","max","forEach","datum","t","formatOptions","toString","count","endDate","month","startDate","year","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","getTestProps","testIds","data-testid","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","getUnsortedComputedOcpReportItems","getIdKeyForGroupBy","_sort__WEBPACK_IMPORTED_MODULE_0__","labelKey","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","isEqual","obj1","obj2","JSON","stringify","split","join","getNoDataForDateRangeString","getForDateRangeString","getSinceDateRangeString","date_fns_format__WEBPACK_IMPORTED_MODULE_0__","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2__","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3__","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","display","justifyContent","height","marginTop","viewSources","NoProvidersState","mapStateToProps","common","state","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","marginRight","toolbarContainer","backgroundColor","paddingBottom","paddingTop","paddingLeft","paddingRight","marginLeft","DetailsDataToolbar","defaultFilters","tag","defaultState","categoryInput","filters","lodash","isCategoryDropdownOpen","isTagKeyDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","option","indexOf","api_query","getActiveFilters","query","filter_by","keys","isArray","substring","onDelete","filterType","prevState","filter","_filterType","onFilterRemoved","getCurrentCategoryOption","currentCategory","onCategoryClick","onCategorySelect","event","currentTagKey","onCategoryToggle","isOpen","getCategoryInput","categoryOption","DataToolbarFilter","categoryName","chips","deleteChip","showToolbarItem","InputGroup","TextInput","aria-label","onChange","onCategoryInputChange","placeholder","onKeyDown","evt","onCategoryInput","Button","variant","control","onClick","search_icon","getDefaultCategoryOptions","trim","prevFilters","includes","onFilterAdded","getTagKeySelect","selectOptions","getTagKeyOptions","selectOption","SelectOption","DataToolbarItem","Select","selectConstants","typeahead","onClear","onTagKeyClear","onToggle","onTagKeyToggle","onSelect","onTagKeySelect","isExpanded","placeholderText","selections","selection","isPlaceholder","getTagValueSelect","tagKeyOption","getTagValueOptions","checkbox","onTagValueToggle","onTagValueSelect","checked","target","prevSelections","getExportButton","isExportDisabled","isDisabled","handleExportClicked","external_link_square_alt_icon","onExportClicked","equal","Dropdown","position","dropdownConstants","left","toggle","DropdownToggle","filter_icon","dropdownItems","DropdownItem","val","pagination","showExport","DataToolbar","clearAllFilters","collapseListedFiltersBreakpoint","DataToolbarContent","DataToolbarToggleGroup","toggleIcon","breakpoint","DataToolbarGroup","getCategoryDropdown","Boolean","breakpointMods","modifier","itemsPerRow","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","minHeight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","lineHeight","valueContainer","wordWrap","AwsReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","utils_formatValue","unitsLabel","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","TertiaryNav","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_4___default","react_i18next__WEBPACK_IMPORTED_MODULE_5__","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","getIdKeyForNavItem","navItem","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","itemId","isActive","handleOnSelect","selectedItem","history","replace","availableNavItems","tertiary","awsDetails","content","paginationContainer","tableContainer","detailsHeader_styles_styles","costValue","costLabelUnit","costLabelDate","header","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","queryString","awsQuery","resolution","time_scope_units","time_scope_value","awsReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","currentItem","isGroupByOpen","handleGroupByClick","onItemClicked","getDropDownItems","component","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","handleGroupBySelect","handleGroupByToggle","bind","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","tertiaryNav","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","awsReportSummary","_item","DetailsWidgetModal","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_mapStateToProps","error","awsExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","secondary","primary","Form","FormGroup","fieldId","Radio","isValid","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","awsReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","awsReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","awsDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","abs","percentage","showPercentage","showValue","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_reportType","detailsToolbar_mapStateToProps","detailsToolbar_mapDispatchToProps","DetailsToolbar","getCategoryOptions","detailsDataToolbar","awsDetails_reportType","awsDetails_baseQuery","awsDetails_mapStateToProps","awsDetails_mapDispatchToProps","groupByTag","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","handleFilterAdded","handleFilterRemoved","filterValue","found","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"bb8d9967653d36245577.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getNoDataForDateRangeString(key = 'no_data_for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            // Todo: Leave one legend item visible at all times?\n            // const { hiddenSeries, series } = this.state;\n            // const leaveVisible = hiddenSeries.size === series.length - 1;\n            // if (leaveVisible && !this.isSeriesHidden(props.index)) {\n            //   return;\n            // }\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export { TrendChart } from './trendChart';\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarGroup, DataToolbarItem, DataToolbarToggleGroup, } from '@patternfly/react-core/dist/esm/experimental';\nimport { ExternalLinkSquareAltIcon, FilterIcon, SearchIcon, } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { tagKey } from 'api/query';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsDataToolbar.styles';\nconst defaultFilters = {\n    tag: {},\n};\nexport class DetailsDataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isCategoryDropdownOpen: false,\n            isTagKeyDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy } = this.props;\n            if (!categoryOptions) {\n                return 'name';\n            }\n            for (const option of categoryOptions) {\n                if (groupBy === option.value ||\n                    (groupBy && groupBy.indexOf(tagKey) !== -1 && option.value === 'tag')) {\n                    return option.value;\n                }\n            }\n            return categoryOptions[0].value;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key])\n                        ? [...query.filter_by[key]]\n                        : [query.filter_by[key]];\n                    if (key.indexOf(tagKey) !== -1) {\n                        filters.tag[key.substring(tagKey.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, id) => {\n            if (type) {\n                // Workaround for https://github.com/patternfly/patternfly-react/issues/3552\n                // This prevents us from using an ID\n                let filterType = type.toLowerCase();\n                // Workaround for Azure IDs\n                if (filterType === 'account' && this.state.filters.subscription_guid) {\n                    filterType = 'subscription_guid';\n                }\n                else if (filterType === 'region' &&\n                    this.state.filters.resource_location) {\n                    filterType = 'resource_location';\n                }\n                else if (filterType === 'service' && this.state.filters.service_name) {\n                    filterType = 'service_name';\n                }\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else if (prevState.filters[filterType]) {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType]\n                        ? `${tagKey}${filterType}`\n                        : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        this.getCurrentCategoryOption = () => {\n            const { categoryOptions } = this.props;\n            const { currentCategory } = this.state;\n            if (!categoryOptions) {\n                return undefined;\n            }\n            for (const option of categoryOptions) {\n                if (currentCategory === option.value) {\n                    return option;\n                }\n            }\n            return categoryOptions[0];\n        };\n        this.onCategoryClick = value => {\n            this.setState({\n                currentCategory: value,\n            });\n        };\n        this.onCategorySelect = event => {\n            this.setState({\n                categoryInput: '',\n                currentTagKey: undefined,\n                isCategoryDropdownOpen: !this.state.isCategoryDropdownOpen,\n            });\n        };\n        this.onCategoryToggle = isOpen => {\n            this.setState({\n                isCategoryDropdownOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = categoryOption => {\n            const { t } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            return (React.createElement(DataToolbarFilter, { categoryName: categoryOption.label, chips: filters[categoryOption.value], deleteChip: this.onDelete, key: categoryOption.value, showToolbarItem: currentCategory !== 'tag' && currentCategory === categoryOption.value },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { name: `${categoryOption.value}-input`, id: `${categoryOption.value}-input`, type: \"search\", \"aria-label\": t(`filter_by.${categoryOption.value}_input_aria_label`), onChange: this.onCategoryInputChange, value: categoryInput, placeholder: t(`filter_by.${categoryOption.value}_placeholder`), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.value) }),\n                    React.createElement(Button, { variant: ButtonVariant.control, \"aria-label\": t(`filter_by.${categoryOption.value}_button_aria_label`), onClick: evt => this.onCategoryInput(evt, categoryOption.value) },\n                        React.createElement(SearchIcon, null)))));\n        };\n        this.getDefaultCategoryOptions = () => {\n            const { t } = this.props;\n            return [{ label: t('filter_by.values.name'), value: 'name' }];\n        };\n        this.onCategoryInputChange = value => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if ((event.key && event.key !== 'Enter') || categoryInput.trim() === '') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign({}, prevState.filters, { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, categoryInput]\n                                : [categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded, } = this.state;\n            if (currentCategory !== 'tag') {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Select, { variant: SelectVariant.typeahead, \"aria-label\": t('filter_by.tag_key_aria_label'), onClear: this.onTagKeyClear, onToggle: this.onTagKeyToggle, onSelect: this.onTagKeySelect, isExpanded: isTagKeySelectExpanded, placeholderText: t('filter_by.tag_key_placeholder'), selections: currentTagKey }, selectOptions)));\n        };\n        this.onTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.onTagKeySelect = (event, selection, isPlaceholder) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.onTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = tagKeyOption => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, filters, isTagValueSelectExpanded, } = this.state;\n            const selectOptions = this.getTagValueOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(DataToolbarFilter, { categoryName: tagKeyOption.value, chips: filters.tag[tagKeyOption.value], deleteChip: this.onDelete, key: tagKeyOption.value, showToolbarItem: currentCategory === 'tag' && currentTagKey === tagKeyOption.value },\n                React.createElement(Select, { variant: SelectVariant.checkbox, \"aria-label\": t('filter_by.tag_value_aria_label'), onToggle: this.onTagValueToggle, onSelect: this.onTagValueSelect, selections: filters.tag[tagKeyOption.value]\n                        ? filters.tag[tagKeyOption.value]\n                        : [], isExpanded: isTagValueSelectExpanded, placeholderText: t('filter_by.tag_value_placeholder') }, selectOptions)));\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey]\n                    ? prevState.filters.tag[currentTagKey]\n                    : [];\n                return {\n                    filters: Object.assign({}, prevState.filters, { tag: Object.assign({}, prevState.filters.tag, { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagKey}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueSelectExpanded: isOpen,\n            });\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isExportDisabled, t } = this.props;\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                    React.createElement(\"span\", { className: css(styles.export) }, t('export.export')),\n                    React.createElement(ExternalLinkSquareAltIcon, null))));\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (report && !isEqual(report, prevProps.report))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return prevProps.groupBy !== groupBy\n                    ? {\n                        currentCategory: this.getDefaultCategory(),\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category dropdown\n    getCategoryDropdown() {\n        const { categoryOptions } = this.props;\n        const { isCategoryDropdownOpen } = this.state;\n        if (!categoryOptions) {\n            return null;\n        }\n        return (React.createElement(DataToolbarItem, null,\n            React.createElement(Dropdown, { onSelect: this.onCategorySelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { onToggle: this.onCategoryToggle, style: { width: '100%' } },\n                    React.createElement(FilterIcon, null),\n                    \" \",\n                    this.getCurrentCategoryOption().label), isOpen: isCategoryDropdownOpen, dropdownItems: categoryOptions &&\n                    categoryOptions.map(option => (React.createElement(DropdownItem, { key: option.value, onClick: () => this.onCategoryClick(option.value) }, option.label))), style: { width: '100%' } })));\n    }\n    getTagKeyOptions() {\n        const { report } = this.props;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            options = data.map(tag => {\n                return {\n                    value: tag.key,\n                };\n            });\n        }\n        return options;\n    }\n    getTagValueOptions() {\n        const { report } = this.props;\n        const { currentTagKey } = this.state;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (currentTagKey === tag.key) {\n                    options = tag.values.map(val => {\n                        return {\n                            value: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, pagination, showExport } = this.props;\n        const options = categoryOptions\n            ? categoryOptions\n            : this.getDefaultCategoryOptions();\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(DataToolbar, { id: \"details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(DataToolbarContent, null,\n                    React.createElement(DataToolbarToggleGroup, { toggleIcon: React.createElement(FilterIcon, null), breakpoint: \"xl\" },\n                        React.createElement(DataToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategoryDropdown(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            options &&\n                                options\n                                    .filter(option => option.value !== 'tag')\n                                    .map(option => this.getCategoryInput(option))),\n                        Boolean(showExport) && (React.createElement(DataToolbarGroup, null, this.getExportButton()))),\n                    React.createElement(DataToolbarItem, { variant: \"pagination\", breakpointMods: [{ modifier: 'align-right' }] }, pagination)))));\n    }\n}\nconst DetailsDataToolbar = translate()(connect()(DetailsDataToolbarBase));\nexport { DetailsDataToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","export { HistoricalTrendChart, } from './historicalTrendChart';\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","export { AwsReportSummary } from './awsReportSummary';\nexport { AwsReportSummaryAlt } from './awsReportSummaryAlt';\nexport { AwsReportSummaryDetails } from './awsReportSummaryDetails';\nexport { AwsReportSummaryItem } from './awsReportSummaryItem';\nexport { AwsReportSummaryItems } from './awsReportSummaryItems';\nexport { AwsReportSummaryTrend } from './awsReportSummaryTrend';\n","import { Nav, NavItem, NavList, NavVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem }, this.getNavItemTitle(navItem)));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    awsDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { parseQuery } from 'api/awsQuery';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAwsReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst reportType = \"tag\" /* tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            currentItem: this.props.groupBy || 'account',\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(tag => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${tag.key}`, onClick: () => this.handleGroupByClick(`${tagKey}${tag.key}`) }, t('group_by.tag_key', { value: tag.key }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'account';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, groupBy, queryString } = this.props;\n        if (prevProps.queryString !== queryString ||\n            prevProps.groupBy !== groupBy) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag_key', { value: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('navigation.cloud_details')),\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"aws\" /* aws */ })),\n                Boolean(showContent) && (React.createElement(GroupBy, { groupBy: groupBy, onItemClicked: onGroupByClicked }))),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('aws_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('aws_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AwsReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsExportActions, awsExportSelectors } from 'store/awsExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: awsExportSelectors.selectExportError(state),\n        export: awsExportSelectors.selectExport(state),\n        fetchStatus: awsExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: awsExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAwsReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as awsReportsActions from 'store/awsReports/awsReportsActions';\nimport * as awsReportsSelectors from 'store/awsReports/awsReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAwsReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAwsReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAwsReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAwsReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAwsReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAwsReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('aws_details.historical.cost_title'), xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('aws_details.historical.instance_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('aws_details.historical.storage_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = awsReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = awsReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = awsReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = awsReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"account\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('aws_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'account', onClick: this.handleWidgetModalOpen }, t('aws_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'account', onClick: this.handleTagModalOpen }, t('aws_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('aws_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('aws_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAwsReportItems } from 'utils/getComputedAwsReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAwsReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */ ? reportItem.cost : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('aws_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('aws_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'account') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('aws_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/awsQuery';\nimport { tagKey } from 'api/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString, getNoDataForDateRangeString, } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById === 'account' ? 'account_alias' : groupById,\n                        title: t('aws_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAwsReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.deltaPercent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/awsQuery';\nimport { DetailsDataToolbar } from 'components/details/detailsDataToolbar';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { isEqual } from 'utils/equal';\nconst reportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getCategoryOptions = () => {\n            const { t } = this.props;\n            return [\n                { label: t('filter_by.values.account'), value: 'account' },\n                { label: t('filter_by.values.service'), value: 'service' },\n                { label: t('filter_by.values.region'), value: 'region' },\n                { label: t('filter_by.values.tag'), value: 'tag' },\n            ];\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { fetchReport, query, queryString } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, isExportDisabled, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, report, } = this.props;\n        return (React.createElement(DetailsDataToolbar, { categoryOptions: this.getCategoryOptions(), groupBy: groupBy, isExportDisabled: isExportDisabled, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, report: report, showExport: true }));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsToolbar = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase));\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { tagKey } from 'api/query';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[filterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[filterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[filterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[filterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[filterType] = [\n                        newQuery.filter_by[filterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            if (filterType === null) {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (filterValue === null) {\n                newQuery.filter_by[filterType] = undefined; // Clear all values\n            }\n            else if (Array.isArray(newQuery.filter_by[filterType])) {\n                const index = newQuery.filter_by[filterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[filterType] = [\n                        ...query.filter_by[filterType].slice(0, index),\n                        ...query.filter_by[filterType].slice(index + 1),\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = undefined;\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/aws?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAwsReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.awsDetails) },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n","import AwsDetails from './awsDetails';\nexport default AwsDetails;\n"],"sourceRoot":""}