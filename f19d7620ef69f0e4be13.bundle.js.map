{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/components/charts/common/chartUtils.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/charts/common/chart.styles.ts","webpack:///./src/utils/computedReport/getComputedReportItems.ts","webpack:///./src/utils/computedReport/getItemLabel.ts","webpack:///./src/testIds.ts","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/reports/reportSummary/reportSummary.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummary.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryAlt.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryAlt.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryDetails.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryDetails.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryItem.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryItem.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryItems.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryTrend.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryCost.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryTrend.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryUsage.tsx","webpack:///./src/components/reports/reportSummary/index.ts","webpack:///./src/utils/sort.ts","webpack:///./src/utils/pathname.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/pages/dashboard/components/dashboardBase.tsx","webpack:///./src/pages/dashboard/components/dashboardWidget.styles.ts","webpack:///./src/pages/dashboard/components/dashboardWidgetBase.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboard.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboard.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboard.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/perspective.styles.ts","webpack:///./src/pages/overview/perspective.tsx","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/pages/overview/index.ts"],"names":["__webpack_require__","d","__webpack_exports__","unitLookupKey","formatValue","formatCurrency","unit","lookup","toLowerCase","value","options","fValue","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","transformReport","getDateRange","getMaxValue","getTooltipContent","getTooltipLabel","getCostRangeString","getUsageRangeString","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0__","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","n","date_fns_format__WEBPACK_IMPORTED_MODULE_1__","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3__","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4__","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","i18next__WEBPACK_IMPORTED_MODULE_5__","utils_computedReport_getComputedReportItems__WEBPACK_IMPORTED_MODULE_6__","utils_formatValue__WEBPACK_IMPORTED_MODULE_7__","report","type","key","reportItem","reportItemValue","items","idKey","sortKey","sortDirection","computedItems","Object","map","i","createDatum","reduce","acc","prevValue","length","y","computedItem","x","id","label","Number","isFloat","parseFloat","toFixed","isInt","name","units","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","getDatumDateRange","setDate","lastDate","getDate","max","forEach","datum","t","formatOptions","toString","count","endDate","month","startDate","year","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","chartOverride","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_0__","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_1__","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_2__","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_3__","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_4__","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_5__","emotion__WEBPACK_IMPORTED_MODULE_6__","getComputedReportItems","labelKey","sort","getUnsortedComputedReportItems","direction","itemMap","Map","visitDataPoint","dataPoint","values","cluster_alias","clusters","undefined","cluster","capacity","cost","total","source_uuid","supplementary","infrastructure","idSuffix","itemLabelKey","String","meta","group_by","keys","indexOf","query","tagPrefixKey","hasOwnProperty","getItemLabel","account_alias","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getTestProps","testIds","data-testid","details","cluster_lnk","historical_data_btn","show_more_btn","tag_lnk","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","styles","container","display","justifyContent","height","marginTop","ErrorState","es","error","icon","error_circle_o_icon","title","subTitle","response","status","lock_icon","react_default","a","createElement","EmptyState","EmptyStateIcon","Title","headingLevel","size","EmptyStateBody","LoadingState","binoculars_icon","Spinner","fontSize","EmptyValueState","minus_icon","chartSkeleton","marginBottom","global_spacer_md","legendSkeleton","reportSummary","subtitle","global_FontSize_xs","color","global_Color_200","var","ReportSummary","children","detailsLink","Card","CardTitle","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","reportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","global_spacer_lg","ReportSummaryAlt","tabs","Grid","hasGutter","GridItem","lg","xl","reportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","global_spacer_sm","lineHeight","global_LineHeight_sm","paddingLeft","global_spacer_xs","whiteSpace","global_Color_100","global_FontSize_4xl","valueContainer","width","wordWrap","ReportSummaryDetails","chartType","computedReportItem","computedReportItemValue","costLabel","requestFormatOptions","requestLabel","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","supplementaryCost","infrastructureCost","hasTotal","hasCost","hasCount","hasSupplementaryCost","hasInfrastructureCost","hasRequest","hasUsage","getCostLayout","Tooltip","content","enableFlip","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","reportSummaryItem","index_esm","ReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","className","Progress","defaultProps","v","ReportSummaryItem","reportSummaryItems_styles_styles","skeleton","ReportSummaryItems","Component","[object Object]","nextProps","this","props","otherIndex","findIndex","includes","slice","getItems","chartStyles","currentCostData","fill","stroke","currentInfrastructureCostData","strokeDasharray","itemsPerRow","labels","fontFamily","global_FontFamily_sans_serif","minWidth","legendColorScale","global_disabled_color_200","chart_color_green_100","chart_color_green_200","previousCostData","previousInfrastructureCostData","currentColorScale","chart_color_green_300","chart_color_green_400","chart_color_green_500","previousColorScale","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","costChart_CostChart","super","arguments","containerRef","createRef","state","hiddenSeries","Set","initDatum","costKey","setState","series","childName","legendItem","chartUtils","symbol","handleNavToggle","setTimeout","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","legendItemsPerRow","ChartLegend","gutter","responsive","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","getLegendData","window","addEventListener","navToggle","insights","chrome","on","prevProps","removeEventListener","domain","maxCurrentInfrastructure","maxCurrentUsage","maxPreviousInfrastructure","maxPreviousUsage","maxValue","Math","ceil","currentInfrastructureDate","get_date_default","currentUsageDate","previousInfrastructureDate","previousUsageDate","adjustContainerHeight","containerHeight","CursorVoronoiContainer","chart_container","getDomain","getEndDate","midDate","floor","legendData","adjustedContainerHeight","chart_styles","ref","Chart","containerComponent","cursorDimension","labelComponent","ChartLegendTooltip","ChartLegendTooltipContent","mouseFollowTooltips","voronoiDimension","voronoiPadding","events","legendComponent","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","reportSummaryTrend_styles_styles","ReportSummaryCost","trendChart_styles_chartStyles","previousMonth","currentMonth","trendChart_TrendChart","currentData","previousData","showSupplementaryLabel","showUsageLegendLabel","colorScale","orientation","formatDatumValue","formatDatumOptions","maxCurrent","maxPrevious","previousDate","currentDate","ChartVoronoiContainer","constrainToVisibleArea","ReportSummaryTrend","usageChart_styles_chartStyles","chartContainer","currentRequestData","currentUsageData","previousRequestData","previousUsageData","usageChart_UsageChart","dist_es","maxCurrentRequest","maxPreviousRequest","currentRequestDate","previousRequestDate","ReportSummaryUsage","getValueForItem","item","array","b","aVal","bVal","getReleasePath","pathName","location","pathname","split","shift","release","viewSources","NoProvidersState","react_redux_es","getViewSources","href","dollar_sign_icon","DashboardBase","DashboardWidget","selectWidgets","widgets","widgetId","widget","showHorizontal","xl2","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","global_spacer_2xl","tabItems","global_spacer_xl","dashboardWidgetBase_DashboardWidgetBase","activeTabKey","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","awsQuery","order_by","getCostChart","getTrendChart","getUsageChart","currentReport","previousReport","trend","getUnits","titleKey","currentInfrastructureData","previousInfrastructureData","getDetails","getDetailsLabel","requestKey","usageKey","getDetailsLink","Link","to","onClick","handleInsightsNavClick","getDetailsLinkTitle","groupBy","getHorizontalLayout","currentReportFetchStatus","getSubTitle","getTabs","getTitle","get_month_default","format_default","start_of_month_default","getTab","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","getTabItem","availableTabs","topItems","activeTab","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","appNavId","appNavClick","secondaryNav","event","tabIndex","updateTab","fetchReports","awsCloudDashboardWidget_getIdKeyForTab","mapStateToProps","common","awsCloudDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","previous","tabsQuery","reports","selectReport","reportPathsType","reportType","selectReportFetchStatus","mapDispatchToProps","fetchWidgetReports","changeWidgetTab","AwsCloudDashboardWidget","awsCloudDashboard_mapStateToProps","selectCurrentWidgets","awsCloudDashboard_awsCloudDashboard","awsDashboardWidget_getIdKeyForTab","awsDashboardWidget_mapStateToProps","awsDashboard","awsDashboardWidget_mapDispatchToProps","AwsDashboardWidget","awsDashboard_mapStateToProps","awsDashboard_awsDashboard","azureCloudDashboardWidget_getIdKeyForTab","azureCloudDashboardWidget_mapStateToProps","azureCloudDashboard","azureCloudDashboardWidget_mapDispatchToProps","AzureCloudDashboardWidget","azureCloudDashboard_mapStateToProps","azureCloudDashboard_azureCloudDashboard","azureDashboardWidget_getIdKeyForTab","azureDashboardWidget_mapStateToProps","azureDashboard","azureDashboardWidget_mapDispatchToProps","AzureDashboardWidget","azureDashboard_mapStateToProps","azureDashboard_azureDashboard","ocpCloudDashboardWidget_getIdKeyForTab","ocpCloudDashboardWidget_mapStateToProps","ocpCloudDashboard","ocpCloudDashboardWidget_mapDispatchToProps","OcpCloudDashboardWidget","ocpCloudDashboard_mapStateToProps","ocpCloudDashboard_ocpCloudDashboard","ocpDashboardWidget_styles_chartStyles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","ocpSupplementaryDashboardWidget_getIdKeyForTab","ocpSupplementaryDashboardWidget_mapStateToProps","ocpSupplementaryDashboard","ocpSupplementaryDashboardWidget_mapDispatchToProps","OcpSupplementaryDashboardWidget","ocpSupplementaryDashboard_mapStateToProps","ocpSupplementaryDashboard_ocpSupplementaryDashboard","ocpUsageDashboardWidget_getIdKeyForTab","ocpUsageDashboardWidget_mapStateToProps","ocpUsageDashboard","ocpUsageDashboardWidget_mapDispatchToProps","OcpUsageDashboardWidget","ocpUsageDashboard_mapStateToProps","ocpUsageDashboard_ocpUsageDashboard","overview_styles_styles","info","marginLeft","verticalAlign","infoIcon","global_FontSize_md","infoTitle","fontWeight","perspective","headerOverride","perspective_styles_styles","perspectiveSelector","perspectiveLabel","Perspective","defaultState","isPerspectiveOpen","getDropDownItems","option","DropdownItem","component","handleClick","getCurrentLabel","currentItem","onItemClicked","handleSelect","handleToggle","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","overview_getIdKeyForTab","ocpOptions","infrastructureAllCloudOptions","infrastructureAwsOptions","infrastructureAzureOptions","infrastructureOcpOptions","overview_mapStateToProps","awsProvidersQueryString","providersQuery","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","azureProvidersQueryString","azureProviders","azureProvidersError","azureProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","overview","showPopover","getAvailableTabs","isAwsAvailable","isAzureAvailable","isOcpAvailable","isOcpCloudAvailable","contentRef","getCurrentTab","getDefaultInfrastructurePerspective","getDefaultOcpPerspective","getPerspective","currentInfrastructurePerspective","currentOcpPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","val","TabContent","emptyTab","handlePopoverClick","show","prevState","isLoading","noAwsProviders","noAzureProviders","noOcpProviders","noProviders","showTabs","Popover","aria-label","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState"],"mappings":"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","file":"f19d7620ef69f0e4be13.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { getComputedReportItems, } from 'utils/computedReport/getComputedReportItems';\nimport { unitLookupKey, } from 'utils/formatValue';\nexport function transformReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost', reportItemValue = 'total') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        idKey: key,\n        report,\n        reportItemValue,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key, reportItem));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key, reportItem));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key, reportItem)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date', reportItem = 'cost') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units[reportItem],\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { global_Color_dark_100, global_Color_light_100, global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const chartStyles = {\n    padding: 8,\n    group: {\n        data: { strokeWidth: 2, fillOpacity: 0.4 },\n    },\n    tooltipText: {\n        fontSize: '14px',\n        fill: global_Color_light_100.value,\n    },\n    tooltipFlyout: { fill: global_Color_dark_100.value },\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const chartOverride = css `\n  :not(foo) svg {\n    overflow: visible;\n  }\n`;\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedReportItems({ idKey, labelKey = idKey, report, reportItemValue = 'total', sortDirection = 0 /* asc */, sortKey = 'cost', }) {\n    return sort(getUnsortedComputedReportItems({\n        idKey,\n        labelKey,\n        report,\n        reportItemValue,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedReportItems({ report, idKey, labelKey = idKey, reportItemValue = 'total', }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint && dataPoint.values) {\n            dataPoint.values.forEach((value) => {\n                // clusters will either contain the cluster alias or default to cluster ID\n                const cluster_alias = value.clusters && value.clusters.length > 0\n                    ? value.clusters[0]\n                    : undefined;\n                const cluster = cluster_alias || value.cluster;\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cost = value.cost && value.cost.total ? value.cost.total.value : 0;\n                const source_uuid = value.source_uuid ? value.source_uuid : [];\n                const supplementary = value.supplementary && value.supplementary.total\n                    ? value.supplementary.total.value\n                    : 0;\n                const infrastructure = value.infrastructure && value.infrastructure[reportItemValue]\n                    ? value.infrastructure[reportItemValue].value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (itemLabelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (itemLabelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (value.capacity && { capacity: value.capacity.units })), { cost: value.cost && value.cost.total ? value.cost.total.units : 'USD' }), (value.limit && { limit: value.limit.units })), (value.infrastructure &&\n                    value.infrastructure.total && {\n                    infrastructure: value.infrastructure.total.units,\n                })), (value.request && { request: value.request.units })), (value.supplementary &&\n                    value.supplementary.total && {\n                    supplementary: value.supplementary.total.units,\n                })), (value.usage && { usage: value.usage.units }));\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        clusters: value.clusters,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        source_uuid,\n                        supplementary,\n                        id,\n                        infrastructure,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign(Object.assign({}, itemMap.get(id)), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, supplementary: itemMap.get(id).supplementary + supplementary, infrastructure: itemMap.get(id).infrastructure + infrastructure, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\n","import { tagKeyPrefix } from 'api/queries/query';\nexport function getItemLabel({ report, labelKey, value }) {\n    let itemLabelKey = String(labelKey);\n    if (report.meta && report.meta.group_by) {\n        const group_by = report.meta.group_by;\n        for (const key of Object.keys(group_by)) {\n            if (key.indexOf(tagKeyPrefix)) {\n                const tagPrefixKey = tagKeyPrefix + labelKey;\n                if (value.hasOwnProperty(tagPrefixKey)) {\n                    itemLabelKey = tagPrefixKey;\n                }\n            }\n        }\n    }\n    return itemLabelKey;\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        cluster_lnk: 'cluster-lnk',\n        historical_data_btn: 'historical-data-btn',\n        show_more_btn: 'show-more-btn',\n        tag_lnk: 'tag-lnk',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","export const styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n};\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { ErrorCircleOIcon } from '@patternfly/react-icons/dist/js/icons/error-circle-o-icon';\nimport { LockIcon } from '@patternfly/react-icons/dist/js/icons/lock-icon';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error &&\n        error.response &&\n        (error.response.status === 401 || error.response.status === 403)) {\n        icon = LockIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { style: styles.container },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","export const styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '150px',\n    },\n};\n","import { EmptyState, EmptyStateBody, Spinner, Title, } from '@patternfly/react-core';\nimport { BinocularsIcon } from '@patternfly/react-icons/dist/js/icons/binoculars-icon';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { style: styles.container },\n        React.createElement(EmptyState, null,\n            React.createElement(Spinner, { size: \"lg\" }),\n            React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = {\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n};\n","import { MinusIcon } from '@patternfly/react-icons/dist/js/icons/minus-icon';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { style: styles.container },\n        React.createElement(MinusIcon, null)));\n};\n","import { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n};\n","import { Card, CardBody, CardFooter, CardTitle, Title, } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './reportSummary.styles';\nconst ReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { style: styles.reportSummary },\n    React.createElement(CardTitle, null,\n        React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { style: styles.subtitle }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { style: styles.chartSkeleton, size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { style: styles.legendSkeleton, size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst ReportSummary = translate()(ReportSummaryBase);\nexport { ReportSummary };\n","import { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = {\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Card, CardBody, CardFooter, CardTitle, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './reportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { style: styles.reportSummary },\n    React.createElement(Grid, { hasGutter: true },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { style: styles.cost },\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, title),\n                    Boolean(subTitle) && React.createElement(\"p\", { style: styles.subtitle }, subTitle)),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { style: styles.chartSkeleton, size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { style: styles.legendSkeleton, size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { style: styles.container },\n                React.createElement(\"div\", { style: styles.tops }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst ReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { ReportSummaryAlt };\n","import { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = {\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: global_spacer_sm.value,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    units: {\n        paddingLeft: global_spacer_xs.value,\n        paddingBottom: global_spacer_sm.value,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n        whiteSpace: 'nowrap',\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './reportSummaryDetails.styles';\nconst ReportSummaryDetailsBase = ({ chartType, computedReportItem = 'cost', computedReportItemValue = 'total', costLabel, formatValue, formatOptions, report, requestFormatOptions, requestLabel, showTooltip = false, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let supplementaryCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const hasTotal = report && report.meta && report.meta.total;\n    const hasCost = hasTotal && report.meta.total.cost && report.meta.total.cost.total;\n    const hasCount = hasTotal && report.meta.total.count;\n    const hasSupplementaryCost = hasTotal &&\n        report.meta.total.supplementary &&\n        report.meta.total.supplementary.total &&\n        report.meta.total.supplementary.total.value;\n    const hasInfrastructureCost = hasTotal &&\n        report.meta.total.infrastructure &&\n        report.meta.total.infrastructure[computedReportItemValue] &&\n        report.meta.total.infrastructure[computedReportItemValue].value;\n    const hasRequest = hasTotal && report.meta.total.request;\n    const hasUsage = hasTotal && report.meta.total.usage;\n    if (hasTotal) {\n        cost = formatValue(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD', formatOptions);\n        supplementaryCost = formatValue(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost\n            ? report.meta.total.supplementary.total.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(hasInfrastructureCost\n            ? report.meta.total.infrastructure[computedReportItemValue].value\n            : 0, hasInfrastructureCost\n            ? report.meta.total.infrastructure[computedReportItemValue].units\n            : 'USD', formatOptions);\n        request = formatValue(hasRequest ? report.meta.total.request.value : 0, hasRequest ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        if (hasUsage && report.meta.total.usage.value >= 0) {\n            usage = formatValue(hasUsage ? report.meta.total.usage.value : 0, hasUsage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Workaround for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(hasUsage ? report.meta.total.usage : 0, hasCount ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => {\n        let value = cost;\n        if (computedReportItem === \"infrastructure\" /* infrastructure */) {\n            value = infrastructureCost;\n        }\n        else if (computedReportItem === \"supplementary\" /* supplementary */) {\n            value = supplementaryCost;\n        }\n        return (React.createElement(\"div\", { style: styles.valueContainer },\n            Boolean(showTooltip) ? (React.createElement(Tooltip, { content: t('dashboard.total_cost_tooltip', {\n                    infrastructureCost,\n                    supplementaryCost,\n                }), enableFlip: true },\n                React.createElement(\"div\", { style: styles.value }, value))) : (React.createElement(\"div\", { style: styles.value }, value)),\n            React.createElement(\"div\", { style: styles.text },\n                React.createElement(\"div\", null, costLabel))));\n    };\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasRequest\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { style: styles.valueContainer },\n            React.createElement(\"div\", { style: styles.value },\n                request,\n                Boolean(showUnits &&\n                    (units || (hasRequest && report.meta.total.request.value >= 0))) && React.createElement(\"span\", { style: styles.units }, unitsLabel)),\n            React.createElement(\"div\", { style: styles.text },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasUsage ? report.meta.total.usage.units : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { style: styles.valueContainer },\n            React.createElement(\"div\", { style: styles.value },\n                usage,\n                Boolean(showUnits &&\n                    (units || (hasUsage && report.meta.total.usage.value >= 0))) && React.createElement(\"span\", { style: styles.units }, unitsLabel)),\n            React.createElement(\"div\", { style: styles.text },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (chartType === \"cost\" /* cost */ ||\n        chartType === \"supplementary\" /* supplementary */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (chartType === \"trend\" /* trend */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else if (chartType === \"usage\" /* usage */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n    else {\n        return null;\n    }\n};\nconst ReportSummaryDetails = translate()(ReportSummaryDetailsBase);\nexport { ReportSummaryDetails };\n","import { global_spacer_md } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const reportSummaryItem = css `\n  :not(:last-child) {\n    margin-bottom: ${global_spacer_md.value};\n  }\n`;\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { reportSummaryItem } from './reportSummaryItem.styles';\nconst ReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: reportSummaryItem },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst ReportSummaryItem = translate()(ReportSummaryItemBase);\nexport { ReportSummaryItem };\n","import { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = {\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedReportItems, } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './reportSummaryItems.styles';\nclass ReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { computedReportItemValue = 'total', idKey, labelKey, report, } = this.props;\n        const computedItems = getComputedReportItems({\n            report,\n            idKey,\n            labelKey,\n            reportItemValue: computedReportItemValue,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, style: styles.skeleton }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, style: styles.skeleton }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, style: styles.skeleton })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst ReportSummaryItems = translate()(ReportSummaryItemsBase);\nexport { ReportSummaryItems, };\n","import { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, ChartLegendTooltipContent, createContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { chartOverride } from 'components/charts/common/chart.styles';\nimport { getCostRangeString, getDateRange, getMaxValue, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\n// import i18next from 'i18next';\nimport React from 'react';\nimport { formatValue } from 'utils/formatValue';\nimport { chartStyles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                fill: chartStyles.legendColorScale[0],\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                fill: chartStyles.legendColorScale[1],\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        childName: 'previousInfrastructureCost',\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                fill: chartStyles.legendColorScale[2],\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        childName: 'currentInfrastructureCost',\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                fill: chartStyles.legendColorScale[3],\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", responsive: false, style: chartStyles.legend }));\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign({}, s.legendItem), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n            return undefined;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        // Note: Container order is important\n        const CursorVoronoiContainer = createContainer('cursor', 'voronoi');\n        const isDataAvailable = this.isDataAvailable();\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendData = this.getLegendData();\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: chartOverride, ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            title,\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => !isDataAvailable\n                            ? formatValue(datum.y, datum.units, {})\n                            : undefined, labelComponent: React.createElement(ChartLegendTooltip, { labelComponent: React.createElement(ChartLegendTooltipContent, null), legendData: legendData }), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: 0 }), domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: legendData, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { CostChart };\n","import { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = {\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n};\n","import { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './reportSummaryTrend.styles';\nconst ReportSummaryCost = props => (React.createElement(\"div\", { style: styles.chart },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { ReportSummaryCost };\n","import { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { chartOverride } from 'components/charts/common/chart.styles';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showSupplementaryLabel = false, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : showSupplementaryLabel\n                    ? 'chart.cost_supplementary_legend_label'\n                    : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            // Todo: Leave one legend item visible at all times?\n            // const { hiddenSeries, series } = this.state;\n            // const leaveVisible = hiddenSeries.size === series.length - 1;\n            // if (leaveVisible && !this.isSeriesHidden(props.index)) {\n            //   return;\n            // }\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign({}, s.legendItem), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: chartOverride, ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            title,\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { TrendChart };\n","import { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './reportSummaryTrend.styles';\nconst ReportSummaryTrend = props => (React.createElement(\"div\", { style: styles.chart },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { ReportSummaryTrend };\n","import { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartContainer: {\n        marginTop: global_spacer_lg.value,\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { chartOverride } from 'components/charts/common/chart.styles';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign({}, s.legendItem), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: chartOverride, ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            title,\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { UsageChart };\n","import { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './reportSummaryTrend.styles';\nconst ReportSummaryUsage = props => (React.createElement(\"div\", { style: styles.chart },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { ReportSummaryUsage };\n","export { ReportSummary } from './reportSummary';\nexport { ReportSummaryAlt } from './reportSummaryAlt';\nexport { ReportSummaryDetails } from './reportSummaryDetails';\nexport { ReportSummaryItem } from './reportSummaryItem';\nexport { ReportSummaryItems } from './reportSummaryItems';\nexport { ReportSummaryCost } from './reportSummaryCost';\nexport { ReportSummaryTrend } from './reportSummaryTrend';\nexport { ReportSummaryUsage } from './reportSummaryUsage';\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","export const getReleasePath = () => {\n    const pathName = window.location.pathname.split('/');\n    pathName.shift();\n    let release = '';\n    if (pathName[0] === 'beta') {\n        release = `/beta`;\n    }\n    return release;\n};\n","import { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons/dist/js/icons/dollar-sign-icon';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { getReleasePath } from 'utils/pathname';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            const release = getReleasePath();\n            return (React.createElement(\"a\", Object.assign({ href: `${release}/settings/sources` }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { style: styles.container },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { style: styles.viewSources }, this.getViewSources()))));\n    }\n}\nconst NoProvidersState = translate()(connect()(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.details.showHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","import { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformReport, } from 'components/charts/common/chartUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType } = this.props;\n            if (chartType === \"cost\" /* cost */) {\n                return this.getCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"supplementary\" /* supplementary */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, true);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height);\n            }\n            else {\n                return null;\n            }\n        };\n        // This chart displays cost and infrastructure cost\n        this.getCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementaryCost, etc.\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, trend.type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, trend.type, 'date', 'infrastructure', computedReportItemValue);\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            return (React.createElement(ReportSummaryCost, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title }));\n        };\n        // This chart displays cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementaryCost, etc.\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            // Data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: units }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            const units = this.getUnits();\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, requestLabel: this.getDetailsLabel(details.requestKey, units), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: details.units, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab)));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, true)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('aws_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus, trend, } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { computedReportItemValue: computedReportItemValue, idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, getIdKeyForTab, tabsReport, topItems, trend, } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue =\n                        tabsReport.meta.total[computedReportItem][computedReportItemValue]\n                            .value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: details.units ? details.units : this.getUnits(), value: reportItem[computedReportItem] }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            let units;\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                units = hasUsage\n                    ? unitLookupKey(currentReport.meta.total.usage.units)\n                    : '';\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                units = hasCost\n                    ? unitLookupKey(currentReport.meta.total[computedReportItem][computedReportItemValue].units)\n                    : '';\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { style: styles.tabs }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            const { details } = this.props;\n            if (details.appNavId) {\n                insights.chrome.appNavClick({\n                    id: details.appNavId,\n                    secondaryNav: true,\n                });\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase, };\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardActions, awsCloudDashboardSelectors, } from 'store/dashboard/awsCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsCloudDashboardActions.fetchWidgetReports,\n    updateTab: awsCloudDashboardActions.changeWidgetTab,\n};\nconst AwsCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardSelectors } from 'store/dashboard/awsCloudDashboard';\nimport { AwsCloudDashboardWidget } from './awsCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AwsCloudDashboardWidget,\n        selectWidgets: awsCloudDashboardSelectors.selectWidgets(state),\n        widgets: awsCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/dashboard/awsDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardActions, azureCloudDashboardSelectors, } from 'store/dashboard/azureCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureCloudDashboardActions.fetchWidgetReports,\n    updateTab: azureCloudDashboardActions.changeWidgetTab,\n};\nconst AzureCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardSelectors } from 'store/dashboard/azureCloudDashboard';\nimport { AzureCloudDashboardWidget } from './azureCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AzureCloudDashboardWidget,\n        selectWidgets: azureCloudDashboardSelectors.selectWidgets(state),\n        widgets: azureCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, } from 'store/dashboard/azureDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 180,\n    containerAltHeight: 275,\n};\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/dashboard/ocpDashboard';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardActions, ocpSupplementaryDashboardSelectors, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpSupplementaryDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpSupplementaryDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpSupplementaryDashboardActions.fetchWidgetReports,\n    updateTab: ocpSupplementaryDashboardActions.changeWidgetTab,\n};\nconst OcpSupplementaryDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpSupplementaryDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardSelectors } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { OcpSupplementaryDashboardWidget } from './ocpSupplementaryDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpSupplementaryDashboardWidget,\n        selectWidgets: ocpSupplementaryDashboardSelectors.selectWidgets(state),\n        widgets: ocpSupplementaryDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpSupplementaryDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpSupplementaryDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardActions, ocpUsageDashboardSelectors, } from 'store/dashboard/ocpUsageDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpUsageDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpUsageDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpUsageDashboardActions.fetchWidgetReports,\n    updateTab: ocpUsageDashboardActions.changeWidgetTab,\n};\nconst OcpUsageDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpUsageDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardSelectors } from 'store/dashboard/ocpUsageDashboard';\nimport { OcpUsageDashboardWidget } from './ocpUsageDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpUsageDashboardWidget,\n        selectWidgets: ocpUsageDashboardSelectors.selectWidgets(state),\n        widgets: ocpUsageDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpUsageDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpUsageDashboard;\n","import { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = {\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    perspective: {\n        marginBottom: global_spacer_lg.value,\n        marginTop: global_spacer_lg.value,\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n};\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = event => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = translate()(PerspectiveBase);\nexport { Perspective };\n","import { Popover, Tab, TabContent, Tabs, TabTitleText, Title, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsCloudDashboard from 'pages/dashboard/awsCloudDashboard/awsCloudDashboard';\nimport AwsDashboard from 'pages/dashboard/awsDashboard/awsDashboard';\nimport AzureCloudDashboard from 'pages/dashboard/azureCloudDashboard/azureCloudDashboard';\nimport AzureDashboard from 'pages/dashboard/azureDashboard/azureDashboard';\nimport OcpCloudDashboard from 'pages/dashboard/ocpCloudDashboard/ocpCloudDashboard';\nimport OcpDashboard from 'pages/dashboard/ocpDashboard/ocpDashboard';\nimport OcpSupplementaryDashboard from 'pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard';\nimport OcpUsageDashboard from 'pages/dashboard/ocpUsageDashboard/ocpUsageDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { headerOverride, styles } from './overview.styles';\nimport { Perspective } from './perspective';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [\n    { label: 'overview.perspective.all', value: 'all' },\n    { label: 'overview.perspective.supplementary', value: 'supplementary' },\n];\n// Infrastructure all cloud options\nconst infrastructureAllCloudOptions = [\n    { label: 'overview.perspective.all_cloud', value: 'all_cloud' },\n];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [\n    { label: 'overview.perspective.aws', value: 'aws' },\n    { label: 'overview.perspective.aws_cloud', value: 'aws_cloud' },\n];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [\n    { label: 'overview.perspective.azure', value: 'azure' },\n    { label: 'overview.perspective.azure_cloud', value: 'azure_cloud' },\n];\n// Infrastructure Ocp options\nconst infrastructureOcpOptions = [\n    { label: 'overview.perspective.ocp_usage', value: 'ocp_usage' },\n];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            if (isOcpAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (isAwsAvailable || isAzureAvailable || isOcpCloudAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            const showOcpOnly = isOcpAvailable &&\n                !(isAwsAvailable || isAzureAvailable || isOcpCloudAvailable);\n            const showInfrastructureOnly = !isOcpAvailable &&\n                (isAwsAvailable || isAzureAvailable || isOcpCloudAvailable);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all_cloud\" /* allCloud */;\n            }\n            if (isAwsAvailable) {\n                return \"aws\" /* aws */;\n            }\n            if (isAzureAvailable) {\n                return \"azure\" /* azure */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all\" /* all */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective, } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (!(isAwsAvailable || isAzureAvailable || isOcpAvailable)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (isOcpAvailable) {\n                    options.push(...infrastructureAllCloudOptions);\n                }\n                if (isAwsAvailable) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (isAzureAvailable) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (isOcpAvailable) {\n                    options.push(...infrastructureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */\n                ? currentInfrastructurePerspective\n                : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective, } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"all_cloud\" /* allCloud */) {\n                    return React.createElement(OcpCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    return React.createElement(AwsDashboard, null);\n                }\n                else if (currentInfrastructurePerspective ===\n                    \"aws_cloud\" /* awsFiltered */) {\n                    return React.createElement(AwsCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    return React.createElement(AzureDashboard, null);\n                }\n                else if (currentInfrastructurePerspective ===\n                    \"azure_cloud\" /* azureCloud */) {\n                    return React.createElement(AzureCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"ocp_usage\" /* ocpUsage */) {\n                    return React.createElement(OcpUsageDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpCloudDashboard, null); // default\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                if (currentOcpPerspective === \"all\" /* all */) {\n                    return React.createElement(OcpDashboard, null);\n                }\n                else if (currentOcpPerspective === \"supplementary\" /* supplementary */) {\n                    return React.createElement(OcpSupplementaryDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpDashboard, null); // default\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return t('overview.infrastructure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders } = this.props;\n            return (awsProviders !== undefined &&\n                awsProviders.meta !== undefined &&\n                awsProviders.meta.count > 0);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders } = this.props;\n            return (azureProviders !== undefined &&\n                azureProviders.meta !== undefined &&\n                azureProviders.meta.count > 0);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders } = this.props;\n            return (ocpProviders !== undefined &&\n                ocpProviders.meta !== undefined &&\n                ocpProviders.meta.count > 0);\n        };\n        this.isOcpCloudAvailable = () => {\n            return this.isAwsAvailable() && this.isOcpAvailable();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { awsProviders, azureProviders, ocpProviders } = this.props;\n        if (prevProps.awsProviders !== awsProviders ||\n            prevProps.azureProviders !== azureProviders ||\n            prevProps.ocpProviders !== ocpProviders) {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { awsProvidersError, awsProvidersFetchStatus, azureProvidersError, azureProvidersFetchStatus, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || azureProvidersError || ocpProvidersError;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = !this.isAwsAvailable() &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() &&\n            azureProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { headingLevel: \"h2\", size: \"xl\" },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(InfoCircleIcon, { style: styles.info, onClick: this.handlePopoverClick })))))),\n                Boolean(showTabs) && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                    React.createElement(\"div\", { style: styles.perspective }, this.getPerspective())))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersError,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n"],"sourceRoot":""}