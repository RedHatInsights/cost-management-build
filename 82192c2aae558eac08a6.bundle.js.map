{"version":3,"sources":["webpack:///./src/pages/awsDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/utils/equal.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/details/detailsDataToolbar.styles.ts","webpack:///./src/components/details/detailsDataToolbar.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/awsDetails/awsDetails.styles.ts","webpack:///./src/pages/awsDetails/detailsHeader.styles.ts","webpack:///./src/pages/awsDetails/groupBy.styles.ts","webpack:///./src/pages/awsDetails/groupBy.tsx","webpack:///./src/pages/awsDetails/detailsHeader.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.styles.ts","webpack:///./src/pages/awsDetails/detailsTagView.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.tsx","webpack:///./src/pages/awsDetails/exportModal.styles.ts","webpack:///./src/pages/awsDetails/exportModal.tsx","webpack:///./src/pages/awsDetails/historicalChart.styles.ts","webpack:///./src/pages/awsDetails/historicalChart.tsx","webpack:///./src/pages/awsDetails/historicalModal.styles.ts","webpack:///./src/pages/awsDetails/historicalModal.tsx","webpack:///./src/pages/awsDetails/detailsActions.tsx","webpack:///./src/pages/awsDetails/detailsTable.styles.ts","webpack:///./src/pages/awsDetails/detailsTableItem.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.tsx","webpack:///./src/pages/awsDetails/detailsWidget.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetView.tsx","webpack:///./src/pages/awsDetails/detailsWidget.tsx","webpack:///./src/pages/awsDetails/detailsTableItem.tsx","webpack:///./src/pages/awsDetails/detailsTable.tsx","webpack:///./src/pages/awsDetails/detailsToolbar.tsx","webpack:///./src/pages/awsDetails/awsDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_awsDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","tags","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","getNoDataForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getForDateRangeString","getSinceDateRangeString","isEqual","obj1","obj2","JSON","stringify","split","join","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","marginRight","toolbarContainer","backgroundColor","paddingBottom","paddingTop","paddingLeft","paddingRight","marginLeft","tagKey","defaultFilters","tag","DetailsDataToolbar","defaultState","categoryInput","filters","lodash","isCategoryDropdownOpen","isTagKeyDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","option","indexOf","getActiveFilters","query","filter_by","keys","isArray","substring","onDelete","filterType","prevState","filter","_filterType","onFilterRemoved","onCategoryClick","currentCategory","onCategorySelect","event","currentTagKey","onCategoryToggle","isOpen","getCategoryInput","categoryOption","DataToolbarFilter","categoryName","chips","deleteChip","showToolbarItem","InputGroup","TextInput","aria-label","onChange","onCategoryInputChange","placeholder","onKeyDown","evt","onCategoryInput","Button","variant","control","onClick","search_icon","prevFilters","includes","onFilterAdded","getTagKeySelect","selectOptions","getTagKeyOptions","selectOption","SelectOption","Select","selectConstants","typeahead","onClear","onTagKeyClear","onToggle","onTagKeyToggle","onSelect","onTagKeySelect","isExpanded","placeholderText","selections","selection","isPlaceholder","getTagValueSelect","tagKeyOption","getTagValueOptions","checkbox","onTagValueToggle","onTagValueSelect","checked","target","prevSelections","getExportButton","isExportDisabled","DataToolbarItem","isDisabled","handleExportClicked","external_link_square_alt_icon","onExportClicked","equal","Dropdown","position","dropdownConstants","left","toggle","DropdownToggle","filter_icon","dropdownItems","DropdownItem","val","pagination","DataToolbar","clearAllFilters","collapseListedFiltersBreakpoint","DataToolbarContent","DataToolbarToggleGroup","toggleIcon","breakpoint","DataToolbarGroup","getCategoryDropdown","breakpointMods","modifier","itemsPerRow","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","minHeight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","lineHeight","valueContainer","wordWrap","AwsReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","utils_formatValue","unitsLabel","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","getIdKeyForNavItem","navItem","TertiaryNav","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","react_i18next__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_4___default","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","itemId","isActive","handleOnSelect","selectedItem","history","replace","availableNavItems","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","tertiary","awsDetails","content","paginationContainer","tableContainer","detailsHeader_styles_styles","costValue","costLabelUnit","costLabelDate","header","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","queryString","awsQuery","resolution","time_scope_units","time_scope_value","key_only","awsReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","currentItem","isGroupByOpen","handleGroupByClick","onItemClicked","getDropDownItems","component","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","handleGroupBySelect","handleGroupByToggle","bind","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","tertiaryNav","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","awsReportSummary","_item","DetailsWidgetModal","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","awsExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","secondary","primary","Form","FormGroup","fieldId","Radio","isValid","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","awsReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","awsReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","awsDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","abs","percentage","showPercentage","showValue","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_reportType","detailsToolbar_mapStateToProps","detailsToolbar_mapDispatchToProps","DetailsToolbar","exportText","detailsDataToolbar","awsDetails_reportType","awsDetails_baseQuery","awsDetails_tagKey","awsDetails_mapStateToProps","awsDetails_mapDispatchToProps","groupByTag","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","handleFilterAdded","handleFilterRemoved","filterValue","found","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"qIAEAA,EAAA,QAAAC,OAAAC,EAAA,IAAAD,CAAAE,EAAA,CAAAC,EAAA,2JCFA,MAAAC,EAAAC,IACA,MAAAC,EAAAD,IAAAE,cAAA,GACA,OAAAD,GACA,UACA,SACA,eACA,YACA,iBACA,UACA,aACA,eACA,OAAAA,EACA,QACA,WAGAE,EAAA,CAAAC,EAAAJ,EAAAK,QACA,MAAAJ,EAAAF,EAAAC,GACAM,EAAAF,GAAA,EACA,OAAAH,GACA,UACA,OAAAM,EAAAD,EAAAL,EAAAI,GACA,SACA,eACA,YACA,aACA,eACA,OAAAG,EAAAF,EAAAL,EAAAI,GACA,iBACA,UACA,OAAAI,EAAAH,EAAAL,EAAAI,GACA,QACA,OAAAK,EAAAJ,EAAAL,EAAAI,KAGAK,EAAA,CAAAN,EAAAO,GAA6CC,iBAAA,QAC7CR,EAAAS,eAAA,MACAC,sBAAAF,EACAG,sBAAAH,IAGAL,EAAA,CAAAH,EAAAJ,GAA6CY,iBAAA,SAC7C,IAAAN,EAAAF,EAIA,OAHAA,IACAE,EAAA,GAEAA,EAAAO,eAAA,MACAG,MAAA,WACAC,SAAAjB,GAAA,MACAc,sBAAAF,EACAG,sBAAAH,KAGAJ,EAAA,CAAAJ,EAAAO,GAA6CC,iBAAA,QAC7CR,EAAAS,eAAA,MACAC,sBAAAF,EACAG,sBAAAH,IAGAH,EAAA,CAAAL,EAAAO,GAA8CC,iBAAA,QAC9CR,EAAAS,eAAA,MACAC,sBAAAF,EACAG,sBAAAH,sGC9DA,MACAM,EAAAC,KAAsCC,cAAAD,IACtCE,GACAC,SACAC,oBAAA,sBACAC,QAAA,UACAC,cAAA,gBACAC,aAAA,gBAEAC,QACAC,WAAA,aACAC,WAAA,cAEAC,OACAC,MAAA,QACAC,KAAA,aACAC,eAAA,iBACAC,eAAA,iBACAC,OAAA,UAEAC,UACAA,SAAA,WACAC,SAAA,WACAC,cAAA,iBACAC,OAAA,UAEAC,YACAC,WAAA,aACAC,SAAA,WACAC,aAAA,eACAC,UAAA,YACAC,cAAA,gBACAC,aAAA,kBACAC,aAAA,kBACAC,aAAA,kBACAC,WAAA,aACAC,YAAA,cACAC,YAAA,cACAC,SAAA,WACAC,gBAAA,kBACAC,UAAA,aAEAC,WACAC,QAAA,UACAC,aAAA,eACA7B,WAAA,aACA8B,oBAAA,sBACAT,WAAA,sBACAU,oBAAA,+BACAC,iBAAA,4BACA/B,WAAA,aACAgC,WAAA,sBACAC,cAAA,gBAEAC,SACAC,IAAA,eACAC,KAAA,oBACAC,SAAA,0gBC7CA,SAAAC,EAAAC,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,QACA,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAAAjF,OAAAkF,EAAA,EAAAlF,CAAA6E,GACA,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAZ,GAAAY,EAAAb,SAGA,SAAAiB,EAAAnB,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,QACA,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAAAjF,OAAA6F,EAAA,EAAA7F,CAAA6E,GACA,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAZ,GAAAY,EAAAb,SAGA,SAAAmB,EAAArB,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,QACA,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAAAjF,OAAA+F,EAAA,EAAA/F,CAAA6E,GACA,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAZ,GAAAY,EAAAb,SAGA,SAAAqB,EAAAvB,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,sBACA,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAAAjF,OAAAiG,EAAA,EAAAjG,CAAA6E,GACA,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAZ,GAAAY,EAAAb,SAGA,SAAAU,EAAA5E,EAAAyF,EAAApB,EAAA,QAqHA,IAAAqB,EA9GA,OACAC,EAPA,SAAAtB,EAAAuB,IAAAH,EAAA1E,IAAA0E,EAAAI,MAQAX,GA4GAQ,EAnHA1F,EAoHA8F,OAAAJ,UAAA,KAnHAK,WAAA/F,EAAAgG,QAAA,IA+GA,SAAAN,GACA,OAAAI,OAAAJ,UAAA,KA/GAO,CAAAjG,GACAA,EACA,GAIAkE,IAAAuB,EAAA1E,GACAmF,KAAAT,EAAA1E,GACAoF,MAAAV,EAAAU,OAiBA,SAAAC,EAAAC,EAAAC,GAAA,EAAAC,GAAA,EAAAC,EAAA,GACA,MAAAC,EAAAC,GAfA,SAAAL,EAAAG,EAAA,GACA,IAAAH,MAAApB,OAAA,CACA,MAAA0B,EAAA,IAAAC,KAMA,OAJAJ,GACAG,EAAAE,SAAAF,EAAAG,WAAAN,IAEAO,IAAAJ,GACAA,GAIA,OAFA,IAAAC,KAAAP,EAAA,GAAAnC,IAAA,aACA,IAAA0C,KAAAP,IAAApB,OAAA,GAAAf,IAAA,cAIA8C,CAAAX,EAAAG,GAKA,GAHAF,GAAAG,EAAAQ,SACAR,EAAAQ,QAAA,GAEAV,GAAAE,EAAAQ,QAAA,CACA,MAAAC,EAAAC,IAAAV,GAAAW,UACAV,EAAAO,QAAAC,GAEA,OAAAT,EAAAC,GAuBA,SAAAW,EAAAhB,GACA,IAAAiB,EAAA,EAQA,OAPAjB,KAAApB,QACAoB,EAAAkB,QAAAC,IACAA,EAAAtC,EAAAoC,IACAA,EAAAE,EAAAtC,KAIAoC,EAEA,SAAAG,EAAA1H,GACA,gBAAAC,EAAAJ,EAAA,KAAAK,MACA,MAAAJ,EAAAN,OAAAmI,EAAA,EAAAnI,CAAAK,GACA,OAAAC,GACA,iBACA,UACA,SACA,eACA,YACA,eACA,OAAA8H,EAAA,EAAAC,mBAAkD/H,KAClDG,SAA8BD,EAAAC,EAAAJ,EAAAK,OAE9B,QACA,SAA0BF,EAAAC,EAAAJ,EAAAK,OAI1B,SAAA4H,EAAAL,EAAAzH,EAAA+H,EAAAzD,EAAA,OAAA8B,GACA,IAAAqB,EAAAtD,IACA,SAEA,YAAAG,EAAA,CAEA,SADA0D,IAAAP,EAAAtD,IAAA,kBAC0BnE,EAAAyH,EAAAtC,EAAAiB,GAAAqB,EAAArB,MAAA2B,KAE1B,OAAAN,EAAAtD,IAAA8D,WAEA,SAAAC,EAAA5B,EAAAnC,EAAA,0BAAAoC,GAAA,EAAAC,GAAA,EAAAC,EAAA,GACA,MAAAC,EAAAC,GAAAN,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAmB,EAAA,EAAAC,EAAA1D,GACAgE,MAAAtC,IAAAc,GACAyB,QAAAJ,IAAArB,EAAA,KACA0B,MAAAtC,OAAAiC,IAAAtB,EAAA,QACA4B,UAAAN,IAAAtB,EAAA,KACA6B,KAAAC,IAAA7B,KAGA,SAAA8B,EAAAnC,EAAAnC,EAAA,2BAAAoC,GAAA,EAAAC,GAAA,EAAAC,EAAA,GACA,OAAAyB,EAAA5B,EAAAnC,EAAAoC,EAAAC,EAAAC,sCCpNA,SAAAiC,EAAAC,EAAAzI,GACA,oBAAAyI,EACA,OAAAA,EAGA,OAAAA,EADAzI,EAAAiE,KAGA,SAAAyE,EAAAC,EAAA3I,GACA,MAAA4I,UAAWA,EAAA,GAA0B5I,MACrC,UAAA2I,GAAAD,KAAA,CAAAG,EAAAC,KACA,MAAAC,EACAP,EADA,IAAAI,EACAC,EACAC,EADA9I,GAEAgJ,EACAR,EADA,IAAAI,EACAE,EACAD,EADA7I,GAEA,OAAA+I,EAAAC,GACA,EAEAD,EAAAC,EACA,EAEA,IAtBAC,EAAAnE,EAAAzF,EAAA,sBAAAqJ,6DCCA,MAAAQ,GACAC,QAAA,GAGA,IAAAC,GACAC,KAAA/J,OAAAgK,UAA0BJ,GAC1BK,KAAAjK,OAAAgK,UAA0BJ,GAC1BM,IAAAlK,OAAAgK,UAAyBJ,GACzBO,QAAAnK,OAAAgK,UAA6BJ,GAC7BQ,YAAApK,OAAAgK,UAAiCJ,GACjCS,MAAArK,OAAAgK,UAA2BJ,GAC3BU,SAAAtK,OAAAgK,UAA8BJ,GAC9BW,MAAAvK,OAAAgK,UAA2BJ,GAC3BY,UACAC,KAAAzK,OAAAgK,UAA0BJ,GAC1Bc,IAAA1K,OAAAgK,UAAyBJ,GACzBe,QAAA3K,OAAAgK,UAA6BJ,GAC7BgB,MAAA5K,OAAAgK,UAA2BJ,GAC3BiB,WACAC,QAAA9K,OAAAgK,UAA6BJ,ICnB7B,MAAAmB,ECEA,KAAA/K,OAAAgL,EAAA,EAAAhL,CAAAiL,EAAA,EAAAC,QAAAD,EAAA,EAAAC,QAAApB,GDFAqB,GACApL,EAAA,2FEAA,MAAAqL,EAAAC,EAAA,EAAAC,QACAC,WACAC,SAAAC,EAAA,GAAAhL,yCCAA,MAAAiL,EAAA,IACAC,EAAApC,EAAAqC,cAAA,QAAyCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAAG,YACzCI,EAAApC,EAAAqC,cAAAE,EAAA,wJCLA,SAAAC,GAAAtH,OAA2CA,EAAAK,QAAAkH,WAAAlH,EAAAC,UAAA,OAAAC,gBAAA,IAC3C,OAAAhF,OAAAiM,EAAA,EAAAjM,CAAAkM,GACAzH,SACAK,QACAkH,WACAhH,gBACAD,aAEAJ,IAAAI,EACAuE,UAAAtE,IAGA,SAAAkH,GAAAzH,OAAmDA,EAAAK,QAAAkH,WAAAlH,IACnD,IAAAL,EACA,SAEA,MAAA0H,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAvE,QAAAvH,IACA,MAAA+L,EAAA/L,EAAA+L,SAAA/L,EAAA+L,SAAA/L,MAAA,EACAgM,EAAAhM,EAAAiM,cACAjM,EAAAiM,cACAjM,EAAAgM,QACAE,EAAAlM,EAAAkM,KAAAlM,EAAAkM,KAAAlM,MAAA,EACAmM,EAAAnM,EAAAoM,aAAApM,EAAAoM,aAAApM,MAAA,EACAqM,EAAArM,EAAAsM,oBACAtM,EAAAsM,oBAAAtM,MACA,EAEAuM,EAAA,SAAAlI,GAAA,YAAAA,GAAArE,EAAAgM,YAC0BhM,EAAAgM,UAC1B,GACAjL,KAA8Bf,EAAAqE,KAAekI,IAC7C,IAAA1G,EAEAA,EADA,YAAA0F,GAAAvL,EAAAiM,cACAjM,EAAAiM,cAEAjM,EAAAuL,aAAAhM,OACAS,EAAAuL,GAAAvL,MAGAA,EAAAuL,GAEA,MAAAiB,EAAAxM,EAAAwM,MAAAxM,EAAAwM,MAAAxM,MAAA,EACAyM,EAAAzM,EAAAyM,QAAAzM,EAAAyM,QAAAzM,MAAA,EACA0M,EAAA1M,EAAA0M,MAAA1M,EAAA0M,MAAA1M,MAAA,EACAmG,EAAAnG,EAAA0M,MACA1M,EAAA0M,MAAAvG,MACAnG,EAAAkM,KACAlM,EAAAkM,KAAA/F,MACA,MACAuF,EAAAiB,IAAA5L,GAkBA2K,EAAAkB,IAAA7L,EAAAxB,OAAAgK,UAAgDmC,EAAAiB,IAAA5L,IAAoBgL,SAAAL,EAAAiB,IAAA5L,GAAAgL,WAAAG,KAAAR,EAAAiB,IAAA5L,GAAAmL,OAAAC,YAAAT,EAAAiB,IAAA5L,GAAAoL,cAAAE,mBAAAX,EAAAiB,IAAA5L,GAAAsL,qBAAAG,MAAAd,EAAAiB,IAAA5L,GAAAyL,QAAAC,QAAAf,EAAAiB,IAAA5L,GAAA0L,UAAAC,MAAAhB,EAAAiB,IAAA5L,GAAA2L,WAjBpEhB,EAAAkB,IAAA7L,GACAgL,WACAC,UACAE,OACAW,aAAA7M,EAAA8M,cACAC,WAAA/M,EAAAgN,YACAb,cACApL,KACAsL,qBACAxG,QACA2G,QACAC,UACAtG,QACAuG,YAOA,UAAAxI,KAAA2H,EACA,GAAAA,EAAA3H,aAAA+I,MACA,OAAApB,EAAA3H,GAAAqD,QAAAqE,IAOA,OAHA5H,KAAAkJ,MACAlJ,EAAAkJ,KAAA3F,QAAAqE,GAEAqB,MAAAE,KAAAzB,EAAAI,UAEA,SAAAsB,EAAAC,MACA,OAAAA,EAAAC,QACA,UAEAD,EAAArB,QACA,UAEAqB,EAAAE,KACA,OAEA,uJC9FA,SAAAC,GAAAxJ,OAAgDA,EAAAK,QAAAkH,WAAAlH,EAAAC,UAAA,OAAAC,gBAAA,IAChD,OAAAhF,OAAAiM,EAAA,EAAAjM,CAAAkO,GACAzJ,SACAK,QACAkH,WACAhH,gBACAD,aAEAJ,IAAAI,EACAuE,UAAAtE,IAGA,SAAAkJ,GAAAzJ,OAAwDA,EAAAK,QAAAkH,WAAAlH,IACxD,IAAAL,EACA,SAEA,MAAA0H,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAvE,QAAAvH,IACA,MAAA+L,EAAA/L,EAAA+L,SAAA/L,EAAA+L,SAAA/L,MAAA,EACAgM,EAAAhM,EAAAiM,cACAjM,EAAAiM,cACAjM,EAAAgM,QACAE,EAAAlM,EAAAkM,KAAAlM,EAAAkM,KAAAlM,MAAA,EACAmM,EAAAnM,EAAAoM,aAAApM,EAAAoM,aAAApM,MAAA,EACAqM,EAAArM,EAAAsM,oBACAtM,EAAAsM,oBAAAtM,MACA,EACA0N,EAAA1N,EAAA2N,YAAA3N,EAAA2N,YAAA3N,MAAA,EAEAuM,EAAA,SAAAlI,GAAA,YAAAA,GAAArE,EAAAgM,YAC0BhM,EAAAgM,UAC1B,GACAjL,KAA8Bf,EAAAqE,KAAekI,IAC7C,IAAA1G,EAEAA,EADA,YAAA0F,GAAAvL,EAAAiM,cACAjM,EAAAiM,cAEAjM,EAAAuL,aAAAhM,OACAS,EAAAuL,GAAAvL,MAGAA,EAAAuL,GAEA,YAAAA,GAAAvL,EAAA4N,gBACA/H,EAAA7F,EAAA4N,eAEA,MAAApB,EAAAxM,EAAAwM,MAAAxM,EAAAwM,MAAAxM,MAAA,EACAyM,EAAAzM,EAAAyM,QAAAzM,EAAAyM,QAAAzM,MAAA,EACA0M,EAAA1M,EAAA0M,MAAA1M,EAAA0M,MAAA1M,MAAA,EACAmG,EAAAnG,EAAA0M,MACA1M,EAAA0M,MAAAvG,MACAnG,EAAAkM,KACAlM,EAAAkM,KAAA/F,MACA,MACAuF,EAAAiB,IAAA5L,GAmBA2K,EAAAkB,IAAA7L,EAAAxB,OAAAgK,UAAgDmC,EAAAiB,IAAA5L,IAAoBgL,SAAAL,EAAAiB,IAAA5L,GAAAgL,WAAAG,KAAAR,EAAAiB,IAAA5L,GAAAmL,OAAAC,YAAAT,EAAAiB,IAAA5L,GAAAoL,cAAAE,mBAAAX,EAAAiB,IAAA5L,GAAAsL,qBAAAG,MAAAd,EAAAiB,IAAA5L,GAAAyL,QAAAkB,WAAAhC,EAAAiB,IAAA5L,GAAA2M,aAAAjB,QAAAf,EAAAiB,IAAA5L,GAAA0L,UAAAC,MAAAhB,EAAAiB,IAAA5L,GAAA2L,WAlBpEhB,EAAAkB,IAAA7L,GACAgL,WACAC,UACAE,OACAW,aAAA7M,EAAA8M,cACAC,WAAA/M,EAAAgN,YACAb,cACApL,KACAsL,qBACAxG,QACA2G,QACAkB,aACAjB,UACAtG,QACAuG,YAOA,UAAAxI,KAAA2H,EACA,GAAAA,EAAA3H,aAAA+I,MACA,OAAApB,EAAA3H,GAAAqD,QAAAqE,IAOA,OAHA5H,KAAAkJ,MACAlJ,EAAAkJ,KAAA3F,QAAAqE,GAEAqB,MAAAE,KAAAzB,EAAAI,UAEA,SAAAsB,EAAAC,MACA,OAAAA,EAAAC,QACA,UAEAD,EAAArB,QACA,UAEAqB,EAAAE,KACA,OAEA,uJCnGA,SAAAM,GAAA7J,OAA6CA,EAAAK,QAAAkH,WAAAlH,EAAAC,UAAA,OAAAC,gBAAA,IAC7C,OAAAhF,OAAAiM,EAAA,EAAAjM,CAAAuO,GACA9J,SACAK,QACAkH,WACAhH,gBACAD,aAEAJ,IAAAI,EACAuE,UAAAtE,IAGA,SAAAuJ,GAAA9J,OAAqDA,EAAAK,QAAAkH,WAAAlH,IACrD,IAAAL,EACA,SAEA,MAAA0H,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAvE,QAAAvH,IACA,MAAAkM,EAAAlM,EAAA0M,MAAA1M,EAAA0M,MAAA1M,QAAAkM,KAAAlM,MACAmM,EAAAnM,EAAAoM,aAAApM,EAAAoM,aAAApM,MAAA,EACAqM,EAAArM,EAAAsM,oBACAtM,EAAAsM,oBAAAtM,MACA,EACAe,EAAAf,EAAAqE,GACA,IAAAwB,EAEAA,EADA7F,EAAAuL,aAAAhM,OACAS,EAAAuL,GAAAvL,MAGAA,EAAAuL,GAEAG,EAAAiB,IAAA5L,GAiBA2K,EAAAkB,IAAA7L,EAAAxB,OAAAgK,UAAgDmC,EAAAiB,IAAA5L,IAAoBmL,KAAAR,EAAAiB,IAAA5L,GAAAmL,OAAAC,YAAAT,EAAAiB,IAAA5L,GAAAoL,cAAAE,mBAAAX,EAAAiB,IAAA5L,GAAAsL,wBAhBpEX,EAAAkB,IAAA7L,GACAmL,OACAW,aAAA7M,EAAA8M,cACAC,WAAA/M,EAAAgN,YACAb,cACApL,KACAsL,qBACAxG,QACAM,MAAAnG,EAAA0M,MACA1M,EAAA0M,MAAAvG,MACAnG,EAAAkM,KACAlM,EAAAkM,KAAA/F,MACA,UAOA,UAAAjC,KAAA2H,EACA,GAAAA,EAAA3H,aAAA+I,MACA,OAAApB,EAAA3H,GAAAqD,QAAAqE,IAOA,OAHA5H,KAAAkJ,MACAlJ,EAAAkJ,KAAA3F,QAAAqE,GAEAqB,MAAAE,KAAAzB,EAAAI,UAEA,SAAAsB,EAAAC,MACA,OAAAA,EAAAU,kBACA,oBAEAV,EAAAW,cACA,gBAEAX,EAAAY,kBACA,oBAEAZ,EAAAa,aACA,eAEAb,EAAAc,KACA,OAEA,uJChFA,SAAAC,GAAApK,OAA2CA,EAAAK,QAAAkH,WAAAlH,EAAAC,UAAA,OAAAC,gBAAA,IAC3C,OAAAhF,OAAAiM,EAAA,EAAAjM,CAAA8O,GACArK,SACAK,QACAkH,WACAhH,gBACAD,aAEAJ,IAAAI,EACAuE,UAAAtE,IAGA,SAAA8J,GAAArK,OAAmDA,EAAAK,QAAAkH,WAAAlH,IACnD,IAAAL,EACA,SAEA,MAAA0H,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAvE,QAAAvH,IACA,MAAAkM,EAAAlM,EAAA0M,MAAA1M,EAAA0M,MAAA1M,QAAAkM,KAAAlM,MACAmM,EAAAnM,EAAAoM,aAAApM,EAAAoM,aAAApM,MAAA,EACAqM,EAAArM,EAAAsM,oBACAtM,EAAAsM,oBAAAtM,MACA,EACAe,EAAAf,EAAAqE,GACA,IAAAwB,EAEAA,EADA7F,EAAAuL,aAAAhM,OACAS,EAAAuL,GAAAvL,MAGAA,EAAAuL,GAEA,YAAAA,GAAAvL,EAAA4N,gBACA/H,EAAA7F,EAAA4N,eAEAlC,EAAAiB,IAAA5L,GAiBA2K,EAAAkB,IAAA7L,EAAAxB,OAAAgK,UAAgDmC,EAAAiB,IAAA5L,IAAoBmL,KAAAR,EAAAiB,IAAA5L,GAAAmL,OAAAC,YAAAT,EAAAiB,IAAA5L,GAAAoL,cAAAE,mBAAAX,EAAAiB,IAAA5L,GAAAsL,wBAhBpEX,EAAAkB,IAAA7L,GACAmL,OACAW,aAAA7M,EAAA8M,cACAC,WAAA/M,EAAAgN,YACAb,cACApL,KACAsL,qBACAxG,QACAM,MAAAnG,EAAA0M,MACA1M,EAAA0M,MAAAvG,MACAnG,EAAAkM,KACAlM,EAAAkM,KAAA/F,MACA,UAOA,UAAAjC,KAAA2H,EACA,GAAAA,EAAA3H,aAAA+I,MACA,OAAApB,EAAA3H,GAAAqD,QAAAqE,IAOA,OAHA5H,KAAAkJ,MACAlJ,EAAAkJ,KAAA3F,QAAAqE,GAEAqB,MAAAE,KAAAzB,EAAAI,UAEA,SAAAsB,EAAAC,MACA,OAAAA,EAAAiB,QACA,UAEAjB,EAAAW,cACA,gBAEAX,EAAAkB,OACA,SAEAlB,EAAAmB,QACA,UAEA,8NC5EA,SAAAC,EAAAvK,EAAA,mBAAAsC,EAAA,GACA,MAAAG,EAAA,IAAAC,KACAJ,GACAG,EAAAE,SAAAF,EAAAG,WAAAN,GAEA,MAAA4B,EAAAsG,IAAA/H,GACAwB,EAAAwG,IAAAhI,EAAA,KACA0B,EAAAsG,IAAAC,IAAAjI,GAAA,KACA,OAAAkI,EAAA,EAAAjH,EAAA1D,GACAgE,MAAA4G,IAAAnI,GACAwB,UACAC,QACAC,cAGA,SAAA0G,EAAA/O,EAAAkE,EAAA,WAAAsC,EAAA,GACA,MAAAG,EAAA,IAAAC,KACAJ,GACAG,EAAAE,SAAAF,EAAAG,WAAAN,GAEA,MAAA4B,EAAAsG,IAAA/H,GACAwB,EAAAwG,IAAAhI,EAAA,KACA0B,EAAAsG,IAAAC,IAAAjI,GAAA,KACA,OAAAkI,EAAA,EAAAjH,EAAA1D,GACAgE,MAAA4G,IAAAnI,GACAwB,UACAC,QACAC,YACArI,UAGA,SAAAgP,EAAA9K,EAAA,cACA,MAAAyC,EAAA,IAAAC,KACAwB,EAAAsG,IAAA/H,GACAwB,EAAAwG,IAAAhI,EAAA,KACA0B,EAAAsG,IAAAC,IAAAjI,GAAA,KACA,OAAAkI,EAAA,EAAAjH,EAAA1D,GACAgE,MAAA4G,IAAAnI,GACAwB,UACAC,QACAC,iDC7CA,SAAA4G,EAAAC,EAAAC,GACA,IAAArG,EAAAsG,KAAAC,UAAAH,GACAnG,EAAAqG,KAAAC,UAAAF,GAOA,OANArG,IACAA,EAAA,IAEAC,IACAA,EAAA,IAEAD,EACAwG,MAAA,IACA3G,OACA4G,KAAA,MACAxG,EACAuG,MAAA,IACA3G,OACA4G,KAAA,sNCdA,MAAA5E,EAAAC,EAAA,EAAAC,QACAC,WACA0E,QAAA,OACAC,eAAA,SACAC,OAAA,QACAC,UAAA,SAEAC,aACAD,UAAA3E,EAAA,GAAAhL,yCCmBA,MAAA6P,EAAAtQ,OAAAuQ,EAAA,EAAAvQ,CAAA,CAAAwQ,aAGAC,EAAAzQ,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAAsQ,GACAM,mBAAA/N,EAAA,EAAAgO,WADA7Q,eArBA2L,EAAApC,EAAAuH,UACAC,cACAC,SAAAC,WACAC,KAAAC,eAAA,MACA,MAAA9I,EAAmBA,GAAI6I,KAAAE,MACvB,OAAAzF,EAAApC,EAAAqC,cAAAyF,EAAA,EAAArR,OAAAgK,QAA6DsH,GAAA,YAAiBtR,OAAA0B,EAAA,EAAA1B,CAAA0B,EAAA,EAAAkC,UAAAO,gBAAAkE,EAAA,6BAG9E0I,SACA,MAAA1I,EAAeA,GAAI6I,KAAAE,MACnB,OAAAzF,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAAG,YAC5CI,EAAApC,EAAAqC,cAAA2F,EAAA,OACA5F,EAAApC,EAAAqC,cAAA4F,EAAA,GAAqDC,KAAAC,EAAA,IACrD/F,EAAApC,EAAAqC,cAAA+F,EAAA,GAA4CC,KAAA,MAAavJ,EAAA,gCACzDsD,EAAApC,EAAAqC,cAAAiG,EAAA,OAAAxJ,EAAA,+BACAsD,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAAiF,cAAqCa,KAAAC,+LCxBjF,MAAAW,GACAtH,QACAuH,QACAC,WAAAC,EAAA,GAAAxR,MACA+K,SAAA,IAEA0G,SAAA,KAGAC,kBACAF,EAAA,GAAAxR,MACAwR,EAAA,GAAAxR,MACAwR,EAAA,GAAAxR,MACAwR,EAAA,GAAAxR,MACAwR,EAAA,GAAAxR,MACAwR,EAAA,GAAAxR,OAEA2R,eACAzE,MACA0E,KAAA,OACAC,OAAAL,EAAA,GAAAxR,QAGA8R,cACA5E,MACA0E,KAAA,OACAC,OAAA,YAGAE,OACAC,WACA5I,QAAA,IAEA6I,MACAJ,OAAA,QAEAK,OACAL,OAAA,QAEAM,YACApH,SAAA,IAGAqH,OACAJ,WACA5I,QAAA,IAEA6I,MACAJ,OAAA,QAEAK,OACAL,OAAA,UAIAlH,EAAAC,EAAA,EAAAC,QACAwH,gBACAC,iBACAC,SAAA,oBCrDAC,UAAAtH,EAAApC,EAAAuH,UACAC,cACAC,SAAAC,WACAC,KAAAgC,aAAAvH,EAAApC,EAAA4J,YACAjC,KAAAV,OACA4C,aAAA,IAAAC,IACAC,MAAA,GAEApC,KAAAqC,UAAA,MACA,MAAAC,YAAmBA,EAAAC,eAAAC,wBAAA,GAA2DxC,KAAAE,MAC9EzM,EAAA+O,EACA,2BACA,0BAEAxC,KAAAyC,UACAC,SAEAC,UAAA,eACAlG,KAAA8F,EACAK,YACAnN,KAAA3G,OAAA+T,EAAA,EAAA/T,CAAAyT,EAAA9O,GAAA,QACAqP,QACAtP,KAAA,UAGArD,MAAAyQ,EAAAM,gBAGAyB,UAAA,cACAlG,KAAA6F,EACAM,YACAnN,KAAA3G,OAAA+T,EAAA,EAAA/T,CAAAwT,EAAA7O,GAAA,MACAqP,QACAtP,KAAA,UAGArD,MAAAyQ,EAAAS,mBAKArB,KAAA+C,aAAA,MACA/C,KAAAgC,aAAAgB,SACAhD,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAgB,QAAAC,gBAG/BjD,KAAAkD,SAAA,EAAAR,EAAAS,KACA,MAAAjB,aAAmBA,GAAelC,KAAAV,MAClC,OAAA7E,EAAApC,EAAAqC,cAAA0I,EAAA,GAAoD3G,KAAAyF,EAAAmB,IAAAF,KAAkD1O,EAAA,OAAlDiO,EAAAjG,KAA4D6G,cAAA,YAAA7P,IAAAiP,EAAAC,UAAAlN,KAAAiN,EAAAC,UAAAxS,MAAAuS,EAAAvS,UAEhH6P,KAAAuD,UAAA,MACA,MAAAnB,MAAmBA,GAAQpC,KAAAV,MAE3B,OAAA7E,EAAApC,EAAAqC,cAAA8I,EAAA,GAAsDC,WAAA7C,EAAAK,iBAAAxE,KAAAuD,KAAA0D,gBAAAC,OAAA,GAAA1E,OAAA,GAAAxJ,KAAA,SAAAmO,YAAAxB,EAAA,4BAAAjS,MAAAyQ,EAAAtH,WAEtD0G,KAAA5I,gBAAA,GAAiCL,YACjC,MAAA8M,iBAAmBA,EAAAC,qBAAApO,SAA8CsK,KAAAE,MACjE,OAAApR,OAAA+T,EAAA,EAAA/T,CAAAiI,EAAAjI,OAAA+T,EAAA,EAAA/T,CAAA+U,GAAAC,EAAA,OAAApO,KAIAsK,KAAA+D,kBAAA7D,KACAF,KAAAV,MAAA4C,aAAA8B,OAAA9D,EAAAiD,QACAnD,KAAAV,MAAA4C,aAAA+B,IAAA/D,EAAAiD,OAEAnD,KAAAyC,UAA2BP,aAAA,IAAAC,IAAAnC,KAAAV,MAAA4C,kBAG3BlC,KAAAkE,gBAAA,MACA,MAAAxB,OAAmBA,GAAS1C,KAAAV,MAE5B6E,KAQA,OAPAzB,GACAA,EAAA5L,QAAA,CAAAsN,EAAAjB,MACAnD,KAAAqE,eAAAlB,IAAAiB,EAAA3H,MAAA,IAAA2H,EAAA3H,KAAAjI,SACA2P,EAAAG,KAAAnB,KAIAgB,EAAA3P,UAAAkO,IAAAlO,OAAA,KAGAwL,KAAAqE,eAAAlB,KACA,MAAAjB,aAAmBA,GAAelC,KAAAV,MAClC,OAAA4C,EAAAmB,IAAAF,KAGAnD,KAAAuE,cAAA,MACA,MAAA7B,OAAmBA,GAAS1C,KAAAV,MAC5BkF,KAOA,OANA9B,GACAA,EAAAzO,IAAA,CAAAwQ,EAAAtB,KAEAqB,EAAAF,KAAAG,EAAA9B,aAGA6B,IAGAxE,KAAA0E,UAAA,MAOA,OANA5V,OAAA6V,EAAA,EAAA7V,EACA8V,WAAA5E,KAAAuE,gBACAM,SAAA7E,KAAAqE,eACAS,WAAA,SACAC,cAAA/E,KAAA+D,sBAKA/D,KAAA0D,cAAA,MACA,MAAAxB,aAAmBA,EAAAQ,UAAuB1C,KAAAV,MAC1C,GAAAoD,EAAA,CAIA,OAHAA,EAAAzO,IAAA,CAAAmQ,EAAAjB,IACArU,OAAAgK,UAA2CsL,EAAAxB,WAAA9T,OAAA6V,EAAA,EAAA7V,CAAAoT,EAAAmB,IAAAF,SAM3CtD,oBACAmF,WAAA,KACAhF,KAAAgC,aAAAgB,SACAhD,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAgB,QAAAC,cAE/BgC,OAAAC,iBAAA,SAAAlF,KAAA+C,gBAEA/C,KAAAqC,YAEAxC,mBAAAsF,GACAA,EAAA7C,cAAAtC,KAAAE,MAAAoC,aACA6C,EAAA5C,eAAAvC,KAAAE,MAAAqC,cACAvC,KAAAqC,YAGAxC,uBACAoF,OAAAG,oBAAA,SAAApF,KAAA+C,cAEAlD,YACA,MAAAyC,YAAeA,EAAAC,gBAA4BvC,KAAAE,MAC3CmF,GAAwBnQ,GAAA,OACxBoQ,EAAAhD,EAAAxT,OAAA+T,EAAA,EAAA/T,CAAAwT,GAAA,EACAiD,EAAAhD,EAAAzT,OAAA+T,EAAA,EAAA/T,CAAAyT,GAAA,EACAiD,EAAAC,KAAA5O,IAAAyO,EAAAC,GACA1O,EAAA2O,EAAA,EAAAC,KAAAC,KAAAF,EAAA,GAAAA,GAAA,EAIA,OAHA3O,EAAA,IACAwO,EAAA5Q,GAAA,EAAAoC,IAEAwO,EAEAxF,aACA,MAAAyC,YAAeA,EAAAC,gBAA4BvC,KAAAE,MAC3CyF,EAAApD,EACAqD,IAAA9W,OAAA+T,EAAA,EAAA/T,CAAAyT,GAAA,UACA,EACAsD,EAAAvD,EACAsD,IAAA9W,OAAA+T,EAAA,EAAA/T,CAAAwT,GAAA,UACA,EACA,OAAAuD,EAAA,GAAAF,EAAA,EACAF,KAAA5O,IAAAgP,EAAAF,GACA,GAEA9F,SACA,MAAAiG,sBAAeA,EAAA7G,SAAA8G,kBAAA9G,EAAAtG,UAAAqN,SAA2EhG,KAAAE,OAC1FwC,OAAeA,EAAAN,SAAgBpC,KAAAV,MAC/B4E,EAAAlE,KAAAkE,kBACA7J,EAAAI,EAAApC,EAAAqC,cAAAuL,EAAA,GAAuEC,cAAAhC,EAAAiC,wBAAA,EAAAtF,OAAAqD,OAAAkC,EAAApG,KAAA5I,gBAAAiP,iBAAA,MACvEhB,EAAArF,KAAAsG,YACA5O,EAAAsI,KAAAuG,aACAC,EAAAf,KAAAgB,MAAA/O,EAAA,GACAgP,EAAAZ,EACA1D,EAAA,IACA2D,EACAA,EAAA,GACAA,EACA,OAAAtL,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAA0H,gBAAA+E,IAAA3G,KAAAgC,aAAA7R,OAAwE8O,OAAAyH,IACpHjM,EAAApC,EAAAqC,cAAA,WAAAsL,GACAvL,EAAApC,EAAAqC,cAAAkM,EAAA,GAAwCC,mBAAAxM,EAAAgL,SAAAyB,OAAA9G,KAAA0E,YAAAzF,SAAA8H,gBAAA/G,KAAAuD,YAAAyD,WAAAhH,KAAA0D,gBAAAuD,eAAA,cAAAtO,UAAAuO,MAAAC,EAAA,EAAA/E,SACxCM,GACAA,EAAAzO,IAAA,CAAAmQ,EAAAjB,IACAnD,KAAAkD,SAAAkB,EAAAjB,IAEA1I,EAAApC,EAAAqC,cAAA0M,EAAA,GAAgDjX,MAAAyQ,EAAAe,MAAA0F,YAAA,EAAAb,EAAA9O,KAChD+C,EAAApC,EAAAqC,cAAA0M,EAAA,GAAgDE,eAAA,EAAAnX,MAAAyQ,EAAAU,2UC3LhD,MAAApH,EAAAC,EAAA,EAAAC,QACAtJ,QACAyW,YAAAhN,EAAA,GAAAhL,OAEAiY,kBACAC,gBAAAlN,EAAA,GAAAhL,MACAmY,cAAAnN,EAAA,GAAAhL,MACAoY,WAAApN,EAAA,GAAAhL,MACAqY,YAAArN,EAAA,GAAAhL,MACAsY,aAAAtN,EAAA,GAAAhL,MACAuY,WAAAvN,EAAA,GAAAhL,MACAgY,YAAAhN,EAAA,GAAAhL,yCCHA,MAAAwY,EAAA,OACAC,GACAC,QAySA,MAAAC,EAAApZ,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,iBAvSA2L,EAAApC,EAAAuH,UACAC,cACAC,SAAAC,WACAC,KAAAmI,cACAC,cAAA,GACAC,QAAAvZ,OAAAwZ,EAAA,UAAAxZ,CAAAkZ,GACAO,wBAAA,EACAC,sBAAA,EACAC,wBAAA,EACAC,0BAAA,GAEA1I,KAAAV,MAAAxQ,OAAAgK,UAAqCkH,KAAAmI,cAErCnI,KAAA2I,mBAAA,MACA,MAAAC,gBAAmBA,EAAAhM,WAA2BoD,KAAAE,MAC9C,UAAA2I,KAAAD,EACA,GAAAhM,IAAAiM,EAAAtZ,QACA,IAAAqN,EAAAkM,QAAAf,IAAA,QAAAc,EAAAtZ,MACA,OAAAsZ,EAAAtZ,QAKAyQ,KAAA+I,iBAAAC,KACA,MAAAX,EAAAvZ,OAAAwZ,EAAA,UAAAxZ,CAAAkZ,GAcA,OAbAgB,KAAAC,WACAna,OAAAoa,KAAAF,EAAAC,WAAAnS,QAAArD,IACA,MAAA4H,EAAAmB,MAAA2M,QAAAH,EAAAC,UAAAxV,QACAuV,EAAAC,UAAAxV,KACAuV,EAAAC,UAAAxV,KACA,IAAAA,EAAAqV,QAAAf,GACAM,EAAAJ,IAAAxU,EAAA2V,UAAArB,EAAAvT,SAAA6G,EAGAgN,EAAA5U,GAAA4H,IAIAgN,IAEArI,KAAAqJ,SAAA,EAAA7V,EAAAlD,KACA,GAAAkD,EAAA,CAGA,MAAA8V,EAAA9V,EAAAnE,cACA2Q,KAAAyC,SAAA8G,IACAA,EAAAlB,QAAAJ,IAAAqB,GAEAC,EAAAlB,QAAAJ,IAAAqB,GAAAC,EAAAlB,QAAAJ,IAAAqB,GAAAE,OAAApF,OAAA9T,GAGAiZ,EAAAlB,QAAAiB,GAAAC,EAAAlB,QAAAiB,GAAAE,OAAApF,OAAA9T,IAGA+X,QAAAkB,EAAAlB,UAEiB,KACjB,MAAAA,QAA2BA,GAAUrI,KAAAV,MACrCmK,EAAApB,EAAAJ,IAAAqB,MAC6BvB,IAASuB,IACtCA,EACAtJ,KAAAE,MAAAwJ,gBAAAD,EAAAnZ,UAIA0P,KAAAyC,UACA4F,QAAAvZ,OAAAwZ,EAAA,UAAAxZ,CAAAkZ,IACiB,KACjBhI,KAAAE,MAAAwJ,gBAAA,UAIA1J,KAAA2J,gBAAApa,KACAyQ,KAAAyC,UACAmH,gBAAAra,MAGAyQ,KAAA6J,iBAAAC,KACA9J,KAAAyC,UACA2F,cAAA,GACA2B,mBAAA3D,EACAmC,wBAAAvI,KAAAV,MAAAiJ,2BAGAvI,KAAAgK,iBAAAC,KACAjK,KAAAyC,UACA8F,uBAAA0B,MAIAjK,KAAAkK,iBAAAC,KACA,MAAAhT,EAAmBA,GAAI6I,KAAAE,OACvB0J,gBAAmBA,EAAAvB,UAAAD,iBAA0CpI,KAAAV,MAC7D,OAAA7E,EAAApC,EAAAqC,cAAA0P,EAAA,GAA4DC,aAAAlT,sBAAqCgT,EAAA/U,SAAqBkV,MAAAjC,EAAA8B,EAAA5a,OAAAgb,WAAAvK,KAAAqJ,SAAA5V,IAAA0W,EAAA5a,MAAAib,gBAAA,QAAAZ,OAAAO,EAAA5a,OACtHkL,EAAApC,EAAAqC,cAAA+P,EAAA,OACAhQ,EAAApC,EAAAqC,cAAAgQ,EAAA,GAAoDjV,QAAU0U,EAAA5a,cAAqBe,MAAgB6Z,EAAA5a,cAAqBiE,KAAA,SAAAmX,aAAAxT,eAAsDgT,EAAA5a,0BAAqBqb,SAAA5K,KAAA6K,sBAAAtb,MAAA6Y,EAAA0C,YAAA3T,eAA6GgT,EAAA5a,qBAAqBwb,UAAAC,GAAAhL,KAAAiL,gBAAAD,EAAAb,EAAA5a,SACrUkL,EAAApC,EAAAqC,cAAAwQ,EAAA,GAAiDC,QAAAD,EAAA,EAAAE,QAAAT,aAAAxT,eAA8DgT,EAAA5a,2BAAqB8b,QAAAL,GAAAhL,KAAAiL,gBAAAD,EAAAb,EAAA5a,QACpIkL,EAAApC,EAAAqC,cAAA4Q,EAAA,aAEAtL,KAAA6K,sBAAAtb,KACAyQ,KAAAyC,UAA2B2F,cAAA7Y,MAE3ByQ,KAAAiL,gBAAA,EAAAnB,EAAArW,KACA,MAAA2U,cAAmBA,EAAAwB,mBAAiC5J,KAAAV,MACpDwK,EAAArW,KAAA,UAAAqW,EAAArW,KAGAuM,KAAAyC,SAAA8G,IACA,MAAAgC,EAAAhC,EAAAlB,QAAA5U,GACA,OACA4U,QAAAvZ,OAAAgK,UAA6CyQ,EAAAlB,SAAsBxI,CAAA+J,GAAA2B,KAAAC,SAAApD,GACnEmD,EACAA,MACAA,EAAAnD,IACAA,KACAA,cAAA,KAEa,KACbpI,KAAAE,MAAAuL,cAAA7B,EAAAxB,OAIApI,KAAA0L,gBAAA,MACA,MAAAvU,EAAmBA,GAAI6I,KAAAE,OACvB0J,gBAAmBA,EAAAG,gBAAAtB,0BAA0DzI,KAAAV,MAC7E,WAAAsK,EACA,YAEA,MAAA+B,EAAA3L,KAAA4L,mBAAA3X,IAAA4X,GACApR,EAAApC,EAAAqC,cAAAoR,EAAA,GAA2DrY,IAAAoY,EAAAtc,YAAAsc,EAAAtc,SAE3D,OAAAkL,EAAApC,EAAAqC,cAAAqR,EAAA,GAAiDZ,QAAAa,EAAA,EAAAC,UAAAtB,aAAAxT,EAAA,gCAAA+U,QAAAlM,KAAAmM,cAAAC,SAAApM,KAAAqM,eAAAC,SAAAtM,KAAAuM,eAAAC,WAAA/D,EAAAgE,gBAAAtV,EAAA,iCAAAuV,WAAA3C,GAAmS4B,KAEpV3L,KAAAmM,cAAA,MACAnM,KAAAyC,UACAsH,mBAAA3D,EACAqC,wBAAA,MAGAzI,KAAAuM,eAAA,EAAAzC,EAAA6C,EAAAC,KACA5M,KAAAyC,UACAsH,cAAA4C,EACAlE,wBAAAzI,KAAAV,MAAAmJ,2BAGAzI,KAAAqM,eAAApC,KACAjK,KAAAyC,UACAgG,uBAAAwB,MAIAjK,KAAA6M,kBAAAC,KACA,MAAA3V,EAAmBA,GAAI6I,KAAAE,OACvB0J,gBAAmBA,EAAAG,gBAAA1B,UAAAK,4BAAqE1I,KAAAV,MACxFqM,EAAA3L,KAAA+M,qBAAA9Y,IAAA4X,GACApR,EAAApC,EAAAqC,cAAAoR,EAAA,GAA2DrY,IAAAoY,EAAAtc,YAAAsc,EAAAtc,SAG3D,OAAAkL,EAAApC,EAAAqC,cAAA0P,EAAA,GAA4DC,aAAAyC,EAAAvd,MAAA+a,MAAAjC,EAAAJ,IAAA6E,EAAAvd,OAAAgb,WAAAvK,KAAAqJ,SAAA5V,IAAAqZ,EAAAvd,MAAAib,gBAAA,QAAAZ,GAAAG,IAAA+C,EAAAvd,OAC5DkL,EAAApC,EAAAqC,cAAAqR,EAAA,GAA6CZ,QAAAa,EAAA,EAAAgB,SAAArC,aAAAxT,EAAA,kCAAAiV,SAAApM,KAAAiN,iBAAAX,SAAAtM,KAAAkN,iBAAAR,WAAArE,EAAAJ,IAAA6E,EAAAvd,OAC7C8Y,EAAAJ,IAAA6E,EAAAvd,UACAid,WAAA9D,EAAA+D,gBAAAtV,EAAA,mCAAAiL,MAAA,KAAuIuJ,MAEvI3L,KAAAkN,iBAAA,EAAApD,EAAA6C,KACA,MAAA5C,cAAmBA,GAAgB/J,KAAAV,MACnC6N,EAAArD,EAAAsD,OAAAD,QACAnN,KAAAyC,SAAA8G,IACA,MAAA8D,EAAA9D,EAAAlB,QAAAJ,IAAA8B,GACAR,EAAAlB,QAAAJ,IAAA8B,MAEA,OACA1B,QAAAvZ,OAAAgK,UAA6CyQ,EAAAlB,SAAsBJ,IAAAnZ,OAAAgK,UAAsByQ,EAAAlB,QAAAJ,KAA0BpI,CAAAkK,GAAAoD,MACnHE,EAAAV,GACAU,EAAA7D,OAAAja,OAAAod,SAEa,KACbQ,EACAnN,KAAAE,MAAAuL,iBAAgD1D,IAASgC,IAAc4C,GAGvE3M,KAAAqJ,SAAAU,EAAA4C,OAIA3M,KAAAiN,iBAAAhD,KACAjK,KAAAyC,UACAiG,yBAAAuB,MAIAjK,KAAAsN,gBAAA,MACA,MAAAC,iBAAmBA,EAAApW,KAAsB6I,KAAAE,MACzC,OAAAzF,EAAApC,EAAAqC,cAAA8S,EAAA,OACA/S,EAAApC,EAAAqC,cAAAwQ,EAAA,GAA6CuC,WAAAF,EAAAlC,QAAArL,KAAA0N,oBAAAvC,QAAAD,EAAA,EAAA9X,MAC7CqH,EAAApC,EAAAqC,cAAA,QAAiDC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAApJ,SAAgCqG,EAAA,kBACjFsD,EAAApC,EAAAqC,cAAAiT,EAAA,YAEA3N,KAAA0N,oBAAA,MACA1N,KAAAE,MAAA0N,oBAGA/N,oBACAG,KAAAyC,UACAmH,gBAAA5J,KAAA2I,uBAGA9I,mBAAAsF,EAAAoE,GACA,MAAA3M,QAAeA,EAAAoM,QAAAzV,UAAyByM,KAAAE,OACxCtD,IAAAuI,EAAAvI,SACAoM,IAAAla,OAAA+e,EAAA,EAAA/e,CAAAka,EAAA7D,EAAA6D,QACAzV,IAAAzE,OAAA+e,EAAA,EAAA/e,CAAAyE,EAAA4R,EAAA5R,UACAyM,KAAAyC,SAAA,KACA,MAAA4F,EAAArI,KAAA+I,iBAAAC,GACA,OAAA7D,EAAAvI,aAEAgN,gBAAA5J,KAAA2I,qBACAN,YAGAA,aAMAxI,sBACA,MAAA+I,gBAAeA,EAAAzR,KAAqB6I,KAAAE,OACpC0J,gBAAeA,EAAArB,0BAA0CvI,KAAAV,MACzD6D,EAAAyG,IAAAd,QAAA,UACA1T,EACA+B,GADA,IAAAgM,EACA,2CACoCyG,KACpC,OAAAnP,EAAApC,EAAAqC,cAAA8S,EAAA,OACA/S,EAAApC,EAAAqC,cAAAoT,EAAA,GAA2CxB,SAAAtM,KAAA6J,iBAAAkE,SAAAC,EAAA,EAAAC,KAAAC,OAAAzT,EAAApC,EAAAqC,cAAAyT,EAAA,GAAgH/B,SAAApM,KAAAgK,iBAAA7Z,OAA0CiS,MAAA,SACrM3H,EAAApC,EAAAqC,cAAA0T,EAAA,QACA,IACAhZ,GAAA6U,OAAA1B,EAAA8F,cAAAzF,GACAA,EAAA3U,IAAA4U,GAAApO,EAAApC,EAAAqC,cAAA4T,EAAA,GAAsF7a,IAAAoV,EAAAtZ,MAAA8b,QAAA,IAAArL,KAAA2J,gBAAAd,EAAAtZ,QAAuE4H,sBAAwB0R,EAAAzT,WAAajF,OAAeiS,MAAA,WAEjNvC,mBACA,MAAAtM,OAAeA,GAASyM,KAAAE,MACxB,IAAAzD,KACAlJ,KAAAkJ,OACAA,MAAA,IAAA0F,QAAA5O,EAAAkJ,SAEA,IAAAjN,KAQA,OAPAiN,EAAAjI,OAAA,IACAhF,EAAAiN,EAAAxI,IAAAgU,KAEA1Y,MAAA0Y,EAAAxU,QAIAjE,EAEAqQ,qBACA,MAAAtM,OAAeA,GAASyM,KAAAE,OACxB6J,cAAeA,GAAgB/J,KAAAV,MAC/B,IAAA7C,KACAlJ,KAAAkJ,OACAA,MAAA,IAAA0F,QAAA5O,EAAAkJ,SAEA,IAAAjN,KACA,GAAAiN,EAAAjI,OAAA,EACA,UAAAyT,KAAAxL,EACA,GAAAsN,IAAA9B,EAAAxU,IAAA,CACAjE,EAAAyY,EAAA5M,OAAApH,IAAAsa,KAEAhf,MAAAgf,KAGA,MAIA,OAAA/e,EAEAqQ,SACA,MAAA+I,gBAAeA,EAAA4F,cAA8BxO,KAAAE,MAC7C,OAAAzF,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAAsN,mBAC5C/M,EAAApC,EAAAqC,cAAA+T,EAAA,GAA8Cne,GAAA,kBAAAoe,gBAAA1O,KAAAqJ,SAAAsF,gCAAA,MAC9ClU,EAAApC,EAAAqC,cAAAkU,EAAA,OACAnU,EAAApC,EAAAqC,cAAAmU,EAAA,GAAiEC,WAAArU,EAAApC,EAAAqC,cAAA0T,EAAA,QAAAW,WAAA,MACjEtU,EAAApC,EAAAqC,cAAAsU,EAAA,GAA+D7D,QAAA,gBAC/DnL,KAAAiP,sBACAjP,KAAA0L,kBACA1L,KAAA4L,mBAAA3X,IAAA4U,GAAA7I,KAAA6M,kBAAAhE,IACAD,GACAA,EACAY,OAAAX,GAAA,QAAAA,EAAAtZ,OACA0E,IAAA4U,GAAA7I,KAAAkK,iBAAArB,KACApO,EAAApC,EAAAqC,cAAAsU,EAAA,OAAAhP,KAAAsN,oBACA7S,EAAApC,EAAAqC,cAAA8S,EAAA,GAA0DrC,QAAA,aAAA+D,iBAA0CC,SAAA,iBAA6BX,iLChTjI,MAAA5N,GACAS,cACA5E,MACA0E,KAAA,OACAC,OAAA,YAGA9H,QACAuH,QACAC,WAAAC,EAAA,GAAAxR,MACA+K,SAAA,KAIA2G,kBACAF,EAAA,GAAAxR,MACAwR,EAAA,GAAAxR,MACAwR,EAAA,GAAAxR,MACAwR,EAAA,GAAAxR,MACAwR,EAAA,GAAAxR,OAEA6f,YAAA,EACAlO,eACAzE,MACA0E,KAAA,OACAC,OAAAL,EAAA,GAAAxR,QAGA+R,OACAC,WACA5I,QAAA,IAEA6I,MACAJ,OAAA,QAEAK,OACAL,OAAA,QAEAM,YACApH,SAAA,IAGAqH,OACAJ,WACA5I,QAAA,IAEA6I,MACAJ,OAAA,QAEAK,OACAL,OAAA,UAIAlH,EAAAC,EAAA,EAAAC,QACAjB,OACA+F,UAAA6B,EAAA,GAAAxR,OAEAqS,gBACAC,iBACAC,SAAA,YAGAkE,OACA8B,WAAA,IAAA/G,EAAA,GAAAxR,eC3DA8f,UAAA5U,EAAApC,EAAAuH,UACAC,cACAC,SAAAC,WACAC,KAAAgC,aAAAvH,EAAApC,EAAA4J,YACAjC,KAAAV,OACA4C,aAAA,IAAAC,IACAC,MAAA,GAEApC,KAAAqC,UAAA,MACA,MAAAC,YAAmBA,EAAAC,eAAAC,wBAAA,GAA2DxC,KAAAE,MAC9EzM,EAAA+O,EACA,2BACA,0BAEAxC,KAAAyC,UACAC,SAEAC,UAAA,eACAlG,KAAA8F,EACAK,YACAnN,KAAA3G,OAAA+T,EAAA,EAAA/T,CAAAyT,EAAA9O,GAAA,QACAqP,QACAtP,KAAA,UAGArD,MAAAyQ,EAAAM,gBAGAyB,UAAA,cACAlG,KAAA6F,EACAM,YACAnN,KAAA3G,OAAA+T,EAAA,EAAA/T,CAAAwT,EAAA7O,GAAA,MACAqP,QACAtP,KAAA,UAGArD,MAAAyQ,EAAAS,mBAKArB,KAAA+C,aAAA,MACA/C,KAAAgC,aAAAgB,SACAhD,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAgB,QAAAC,gBAG/BjD,KAAAkD,SAAA,EAAAR,EAAAS,KACA,MAAAjB,aAAmBA,GAAelC,KAAAV,MAClC,OAAA7E,EAAApC,EAAAqC,cAAA0I,EAAA,GAAoD3G,KAAAyF,EAAAmB,IAAAF,KAAkD1O,EAAA,OAAlDiO,EAAAjG,KAA4D6G,cAAA,YAAA7P,IAAAiP,EAAAC,UAAAlN,KAAAiN,EAAAC,UAAAxS,MAAAuS,EAAAvS,UAEhH6P,KAAAuD,UAAA,MACA,MAAA+L,kBAAmBA,GAAoBtP,KAAAE,MACvC,OAAAzF,EAAApC,EAAAqC,cAAA8I,EAAA,GAAsDC,WAAA7C,EAAAK,iBAAAxE,KAAAuD,KAAA0D,gBAAAC,OAAA,GAAA1E,OAAA,GAAAmQ,YAAAE,EAAA7Z,KAAA,SAAAtF,MAAAyQ,EAAAtH,WAEtD0G,KAAA5I,gBAAA,GAAiCL,YACjC,MAAA8M,iBAAmBA,EAAAC,sBAAuC9D,KAAAE,MAC1D,OAAApR,OAAA+T,EAAA,EAAA/T,CAAAiI,EAAAjI,OAAA+T,EAAA,EAAA/T,CAAA+U,GAAAC,EAAA,UAIA9D,KAAA+D,kBAAA7D,KACAF,KAAAV,MAAA4C,aAAA8B,OAAA9D,EAAAiD,QACAnD,KAAAV,MAAA4C,aAAA+B,IAAA/D,EAAAiD,OAEAnD,KAAAyC,UAA2BP,aAAA,IAAAC,IAAAnC,KAAAV,MAAA4C,kBAG3BlC,KAAAkE,gBAAA,MACA,MAAAxB,OAAmBA,GAAS1C,KAAAV,MAE5B6E,KAQA,OAPAzB,GACAA,EAAA5L,QAAA,CAAAsN,EAAAjB,MACAnD,KAAAqE,eAAAlB,IAAAiB,EAAA3H,MAAA,IAAA2H,EAAA3H,KAAAjI,SACA2P,EAAAG,KAAAnB,KAIAgB,EAAA3P,UAAAkO,IAAAlO,OAAA,KAGAwL,KAAAqE,eAAAlB,KACA,MAAAjB,aAAmBA,GAAelC,KAAAV,MAClC,OAAA4C,EAAAmB,IAAAF,KAGAnD,KAAAuE,cAAA,MACA,MAAA7B,OAAmBA,GAAS1C,KAAAV,MAC5BkF,KAOA,OANA9B,GACAA,EAAAzO,IAAA,CAAAwQ,EAAAtB,KAEAqB,EAAAF,KAAAG,EAAA9B,aAGA6B,IAGAxE,KAAA0E,UAAA,MAOA,OANA5V,OAAA6V,EAAA,EAAA7V,EACA8V,WAAA5E,KAAAuE,gBACAM,SAAA7E,KAAAqE,eACAS,WAAA,SACAC,cAAA/E,KAAA+D,sBAKA/D,KAAA0D,cAAA,MACA,MAAAxB,aAAmBA,EAAAQ,UAAuB1C,KAAAV,MAC1C,GAAAoD,EAAA,CAIA,OAHAA,EAAAzO,IAAA,CAAAmQ,EAAAjB,IACArU,OAAAgK,UAA2CsL,EAAAxB,WAAA9T,OAAA6V,EAAA,EAAA7V,CAAAoT,EAAAmB,IAAAF,SAM3CtD,oBACAmF,WAAA,KACAhF,KAAAgC,aAAAgB,SACAhD,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAgB,QAAAC,cAE/BgC,OAAAC,iBAAA,SAAAlF,KAAA+C,gBAEA/C,KAAAqC,YAEAxC,mBAAAsF,GACAA,EAAA7C,cAAAtC,KAAAE,MAAAoC,aACA6C,EAAA5C,eAAAvC,KAAAE,MAAAqC,cACAvC,KAAAqC,YAGAxC,uBACAoF,OAAAG,oBAAA,SAAApF,KAAA+C,cAEAlD,YACA,MAAAyC,YAAeA,EAAAC,gBAA4BvC,KAAAE,MAC3CmF,GAAwBnQ,GAAA,OACxBoQ,EAAAhD,EAAAxT,OAAA+T,EAAA,EAAA/T,CAAAwT,GAAA,EACAiD,EAAAhD,EAAAzT,OAAA+T,EAAA,EAAA/T,CAAAyT,GAAA,EACAiD,EAAAC,KAAA5O,IAAAyO,EAAAC,GACA1O,EAAA2O,EAAA,EAAAC,KAAAC,KAAAF,EAAA,GAAAA,GAAA,EAIA,OAHA3O,EAAA,IACAwO,EAAA5Q,GAAA,EAAAoC,IAEAwO,EAEAxF,aACA,MAAAyC,YAAeA,EAAAC,gBAA4BvC,KAAAE,MAC3CyF,EAAApD,EACAqD,IAAA9W,OAAA+T,EAAA,EAAA/T,CAAAyT,GAAA,UACA,EACAsD,EAAAvD,EACAsD,IAAA9W,OAAA+T,EAAA,EAAA/T,CAAAwT,GAAA,UACA,EACA,OAAAuD,EAAA,GAAAF,EAAA,EACAF,KAAA5O,IAAAgP,EAAAF,GACA,GAEA9F,SACA,MAAAZ,OAAeA,EAAA8G,kBAAA9G,EAAAtG,UAAAqN,QAAAuJ,aAAAC,cAA4ExP,KAAAE,OAC3FwC,OAAeA,EAAAN,SAAgBpC,KAAAV,MAC/B4E,EAAAlE,KAAAkE,kBACA7J,EAAAI,EAAApC,EAAAqC,cAAAuL,EAAA,GAAuEC,cAAAhC,EAAAiC,wBAAA,EAAAtF,OAAAqD,OAAAkC,EAAApG,KAAA5I,gBAAAiP,iBAAA,MACvEhB,EAAArF,KAAAsG,YACA5O,EAAAsI,KAAAuG,aACAC,EAAAf,KAAAgB,MAAA/O,EAAA,GACA,OAAA+C,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAA0H,gBAAA+E,IAAA3G,KAAAgC,cAC5CvH,EAAApC,EAAAqC,cAAA,OAAwCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAA8L,QAA+BA,GACvEvL,EAAApC,EAAAqC,cAAA,OAAwCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAAf,OAAAhJ,OAAuC8O,OAAA8G,IAC/EtL,EAAApC,EAAAqC,cAAAkM,EAAA,GAA4CC,mBAAAxM,EAAAgL,SAAAyB,OAAA9G,KAAA0E,YAAAzF,SAAA8H,gBAAA/G,KAAAuD,YAAAyD,WAAAhH,KAAA0D,gBAAAuD,eAAA,SAAAtO,UAAAuO,MAAAC,EAAA,EAAA/E,SAC5CM,GACAA,EAAAzO,IAAA,CAAAmQ,EAAAjB,IACAnD,KAAAkD,SAAAkB,EAAAjB,IAEA1I,EAAApC,EAAAqC,cAAA0M,EAAA,GAAoDhS,MAAAma,EAAApf,MAAAyQ,EAAAe,MAAA0F,YAAA,EAAAb,EAAA9O,KACpD+C,EAAApC,EAAAqC,cAAA0M,EAAA,GAAoDE,eAAA,EAAAlS,MAAAoa,EAAArf,MAAAyQ,EAAAU,kLCtLpD,MAAApH,EAAAC,EAAA,EAAAC,QACAqV,eACAxQ,OAAA,QACAyQ,aAAA3O,EAAA,GAAAxR,MACA2P,UAAA6B,EAAA,GAAAxR,OAEAogB,gBACAzQ,UAAA6B,EAAA,GAAAxR,OAEAqgB,eACA3Q,OAAA,QAEA4Q,UACA9Q,QAAA,eACAzE,SAAAyG,EAAA,GAAAxR,MACAugB,MAAA/O,EAAA,GAAAgP,IACAL,aAAA,OCFAM,EAAAlhB,OAAA0Q,EAAA,EAAA1Q,GAVA,EAA+BmhB,WAAAC,cAAAlK,QAAAmK,WAAAC,SAAAjZ,OAAqDsD,EAAApC,EAAAqC,cAAA2V,EAAA,GAAiC1V,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAA0V,gBACrHnV,EAAApC,EAAAqC,cAAA4V,EAAA,OACA7V,EAAApC,EAAAqC,cAAA+F,EAAA,GAAoCC,KAAA,MAAasF,GACjDuK,QAAAJ,IAAA1V,EAAApC,EAAAqC,cAAA,KAAuDC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAA2V,WAAkCM,IACzF1V,EAAApC,EAAAqC,cAAA8V,EAAA,WAAAJ,EAAA3V,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACAhW,EAAApC,EAAAqC,cAAAgW,EAAA,UAAuChQ,KAAAgQ,EAAA,aAAAC,KACvClW,EAAApC,EAAAqC,cAAAgW,EAAA,UAAuC/V,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAAuV,eAAA/O,KAAAgQ,EAAA,aAAAE,KACvCnW,EAAApC,EAAAqC,cAAAgW,EAAA,UAAuChQ,KAAAgQ,EAAA,aAAAG,KACvCpW,EAAApC,EAAAqC,cAAAgW,EAAA,UAAuC/V,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAAyV,gBAAAjP,KAAAgQ,EAAA,aAAAC,MAA+D,GACtGJ,QAAAL,IAAAzV,EAAApC,EAAAqC,cAAAoW,EAAA,OAAAZ,2BCbA,MAAAa,EAAA5W,EAAA,EAAAC,QACAqV,eACAxQ,OAAA,QACAyQ,aAAA3O,EAAA,GAAAxR,MACA2P,UAAA6B,EAAA,GAAAxR,OAEA8K,WACA0E,QAAA,QAEAtD,MACAuV,SAAA,EACAC,UAAA,QACA1J,YAAAxG,EAAA,GAAAxR,OAEAogB,gBACAzQ,UAAA6B,EAAA,GAAAxR,OAEAqgB,eACA3Q,OAAA,QAEA4Q,UACA9Q,QAAA,eACAzE,SAAAyG,EAAA,GAAAxR,MACAugB,MAAA/O,EAAA,GAAAgP,IACAL,aAAA,KAEAwB,MACAF,SAAA,EACA9R,UAAA6B,EAAA,GAAAxR,SCPA4hB,EAAAriB,OAAA0Q,EAAA,EAAA1Q,GAjBA,EAAkCmhB,WAAAC,cAAAE,SAAAD,WAAAhZ,IAAAia,OAAApL,WAA2DvL,EAAApC,EAAAqC,cAAA2V,EAAA,GAAiC1V,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAiiB,EAAAnB,gBAC9HnV,EAAApC,EAAAqC,cAAA2W,EAAA,GAA+B1N,OAAA,MAC/BlJ,EAAApC,EAAAqC,cAAA4W,EAAA,GAAuCC,GAAA,EAAAC,GAAA,GACvC/W,EAAApC,EAAAqC,cAAA,OAAwCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAiiB,EAAAtV,OACxChB,EAAApC,EAAAqC,cAAA4V,EAAA,OACA7V,EAAApC,EAAAqC,cAAA+F,EAAA,GAAgDC,KAAA,MAAasF,GAC7DuK,QAAAJ,IAAA1V,EAAApC,EAAAqC,cAAA,KAAoEC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAiiB,EAAAlB,WAAkCM,IACtG1V,EAAApC,EAAAqC,cAAA8V,EAAA,WAAAJ,EAAA3V,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACAhW,EAAApC,EAAAqC,cAAAgW,EAAA,UAAmDhQ,KAAAgQ,EAAA,aAAAC,KACnDlW,EAAApC,EAAAqC,cAAAgW,EAAA,UAAmD/V,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAiiB,EAAAtB,eAAA/O,KAAAgQ,EAAA,aAAAE,KACnDnW,EAAApC,EAAAqC,cAAAgW,EAAA,UAAmDhQ,KAAAgQ,EAAA,aAAAG,KACnDpW,EAAApC,EAAAqC,cAAAgW,EAAA,UAAmD/V,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAiiB,EAAApB,gBAAAjP,KAAAgQ,EAAA,aAAAC,MAA+D,KAClHlW,EAAApC,EAAAqC,cAAA4W,EAAA,GAAuCC,GAAA,EAAAC,GAAA,GACvC/W,EAAApC,EAAAqC,cAAA,OAAwCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAiiB,EAAA1W,YACxCI,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAiiB,EAAAG,OAA8B,IAAAd,GAAA3V,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KAC1EF,QAAAa,IAAA3W,EAAApC,EAAAqC,cAAA8V,EAAA,OAAAY,GACAb,QAAAL,IAAAzV,EAAApC,EAAAqC,cAAAoW,EAAA,OAAAZ,gCCpBA,MAAAuB,EAAAtX,EAAA,EAAAC,QACAsX,sBACAhC,aAAA3O,EAAA,GAAAxR,MACAwP,QAAA,OACA4S,WAAA,YAEAC,MACAlK,cAAA,GACAmK,WAAA9Q,EAAA,GAAAxR,MACA+K,SAAAyG,EAAA,GAAAxR,OAEAA,OACAugB,MAAA/O,EAAA,GAAAgP,IACAxI,YAAAxG,EAAA,GAAAxR,MACA+K,SAAAyG,EAAA,GAAAxR,OAEAuiB,gBACA/S,QAAA,eACA2Q,aAAA3O,EAAA,GAAAxR,MACA6S,MAAA,MACA2P,SAAA,gBC6BAC,EAAAljB,OAAA0Q,EAAA,EAAA1Q,GA7CA,EAAsCmjB,YAAA3iB,cAAA+H,gBAAA9D,SAAA2e,aAAA,OAAAC,aAAA,EAAAC,kBAAA,EAAAjb,IAAAkb,qBAAAC,iBACtC,IAAA7W,EAAAhB,EAAApC,EAAAqC,cAAA6X,EAAA,QACAtW,EAAAxB,EAAApC,EAAAqC,cAAA6X,EAAA,QACAhf,KAAAif,MAAAjf,EAAAif,KAAAC,QACAhX,EAAAnM,EAAAiE,EAAAif,KAAAC,MAAAhX,KAAAlI,EAAAif,KAAAC,MAAAhX,KAAAlM,MAAA,EAAAgE,EAAAif,KAAAC,MAAAhX,KAAAlI,EAAAif,KAAAC,MAAAhX,KAAA/F,MAAA,MAAA2B,GACA4E,EAAA3M,EAAAiE,EAAAif,KAAAC,MAAAxW,MAAA1I,EAAAif,KAAAC,MAAAxW,MAAA1M,MAAA,EAAAgE,EAAAif,KAAAC,MAAAxW,MAAA1I,EAAAif,KAAAC,MAAAxW,MAAAvG,MAAA,GAAA2c,GAAAhb,IAEA,MAAAqb,EAAA,IAAAjY,EAAApC,EAAAqC,cAAA,OAA6DC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA2iB,EAAAK,iBAC7DrX,EAAApC,EAAAqC,cAAA,OAAoCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA2iB,EAAAliB,QAA+BkM,GACnEhB,EAAApC,EAAAqC,cAAA,OAAoCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA2iB,EAAAG,OACpCnX,EAAApC,EAAAqC,cAAA,WAAAuX,KACAU,EAAA,KACA,IAAAL,EACA,YAEA,MAAAM,EAAArf,KAAAif,MAAAjf,EAAAif,KAAAC,OAAAlf,EAAAif,KAAAC,MAAAxW,MACA1I,EAAAif,KAAAC,MAAAxW,MAAAvG,MACA,GACAA,EAAA5G,OAAA+jB,EAAA,EAAA/jB,CAAA8jB,GACAE,EAAA3b,WAAsCzB,KACtC,OAAA+E,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA2iB,EAAAK,iBAC5CrX,EAAApC,EAAAqC,cAAA,OAAwCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA2iB,EAAAliB,QACxC0M,EACAsU,QAAA4B,GACA5e,GACAA,EAAAif,MACAjf,EAAAif,KAAAC,MAAAxW,OACA1I,EAAAif,KAAAC,MAAAxW,MAAA1M,OAAA,IAAAkL,EAAApC,EAAAqC,cAAA,QAAwFC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA2iB,EAAAG,OAA8BkB,IACtHrY,EAAApC,EAAAqC,cAAA,OAAwCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA2iB,EAAAG,OACxCnX,EAAApC,EAAAqC,cAAA,WAAA4X,MAEA,eAAAJ,EACAzX,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KAAAiC,KAGAN,EACA3X,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACAkC,IACAD,KAEAjY,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACAiC,IACAC,oBC9CA,MAAAI,EAAA5Y,EAAA,EAAAC,QACA4Y,mBACAC,qBACAvD,aAAA3O,EAAA,GAAAxR,QAGA2jB,MACArR,iBACAC,SAAA,cCJAqR,EAAA,EAAmC/d,QAAAiC,gBAAA/H,cAAA6H,IAAAic,aAAA1d,QAAAnG,YACnC,MAAAH,EAAAN,OAAA+jB,EAAA,EAAA/jB,CAAA4G,GACAod,EAAA,QAAA1jB,EAAA+H,WAAqD/H,UAAOgX,EAE5DiN,EAAAhe,QADA+d,EAAA7jB,EAAA6jB,EAAA,OACA7d,QAAA,IACA+d,EAAAnc,EAAA,oBACAoc,QAAAF,EACA3d,MAAAod,EACAvjB,MAAAD,EAAAC,EAAAmG,EAAA2B,KAEA,OAAAoD,EAAApC,EAAAqC,cAAA,MAAuCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAikB,EAAAC,oBACvCvY,EAAApC,EAAAqC,cAAA8Y,EAAA,GAAuCpe,MAAAke,EAAA/jB,MAAA8jB,EAAArN,MAAA5Q,EAAAsL,KAAA8S,EAAA,EAAA3C,OAEvCsC,EAAAM,cACAnkB,YAAAokB,MAEA,MAAAC,EAAA7kB,OAAA0Q,EAAA,EAAA1Q,GAAAqkB,gBCpBA,MAAAS,EAAAzZ,EAAA,EAAAC,QACAyZ,UACA3U,UAAA6B,EAAA,GAAAxR,SC2CA,MAAAukB,EAAAhlB,OAAA0Q,EAAA,EAAA1Q,iBAzCA2L,EAAApC,EAAAuH,UACAC,sBAAAkU,GACA,OAAAA,EAAAxgB,SAAAyM,KAAAE,MAAA3M,OAEAsM,WACA,MAAAtM,OAAeA,EAAAK,QAAAkH,YAA0BkF,KAAAE,MACzCnM,EAAAjF,OAAA6O,EAAA,EAAA7O,EACAyE,SACAK,QACAkH,aAEAkZ,EAAAjgB,EAAAkgB,UAAA/f,IACA,MAAA5D,EAAA4D,EAAA5D,GACA,GAAAA,GAAA,OAAAA,EACA,OAAAA,EAAAiH,WAAAiU,SAAA,WAGA,WAAAwI,MAEAjgB,EAAAmgB,MAAA,EAAAF,MACAjgB,EAAAmgB,MAAAF,EAAA,GACAjgB,EAAAigB,IAGAjgB,EAEA8L,SACA,MAAAoQ,SAAeA,EAAAG,UAAmBpQ,KAAAE,MAClC,OAAAkQ,EACA,OAAA3V,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACAhW,EAAApC,EAAAqC,cAAAgW,EAAA,UAA+ChQ,KAAAgQ,EAAA,aAAAE,KAC/CnW,EAAApC,EAAAqC,cAAAgW,EAAA,UAA+ChQ,KAAAgQ,EAAA,aAAAE,GAAAjW,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA8kB,EAAAC,YAC/CpZ,EAAApC,EAAAqC,cAAAgW,EAAA,UAA+ChQ,KAAAgQ,EAAA,aAAAE,GAAAjW,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA8kB,EAAAC,YAC/CpZ,EAAApC,EAAAqC,cAAAgW,EAAA,UAA+ChQ,KAAAgQ,EAAA,aAAAE,GAAAjW,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA8kB,EAAAC,aAE/C,CACA,MAAAlgB,EAAAqM,KAAAmU,WACA,OAAA1Z,EAAApC,EAAAqC,cAAA,UAAAuV,GAA6Dtc,4BCzC7D,MAAAygB,EAAAja,EAAA,EAAAC,QACAjB,OACAuW,aAAA3O,EAAA,GAAAxR,SCAA8kB,EAAAnU,GAAAzF,EAAApC,EAAAqC,cAAA,OAAoEC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAslB,EAAAjb,QACpEsB,EAAApC,EAAAqC,cAAA4Z,EAAA,EAAAxlB,OAAAgK,UAAoDoH,gVCDpD,MAAAqU,EAAAC,IACA,OAAAA,GACA,UACA,YACA,YACA,gBAgDA,MAAAC,EAAA3lB,OAAA4lB,EAAA,EAAA5lB,QAAA6lB,EAAA,EAAA7lB,iBA7CA8lB,EAAAvc,EAAAuH,UACAC,cACAC,SAAAC,WACAC,KAAA6U,qBAAA,OAGAL,QAAA,QAGAA,QAAA,WAKAxU,KAAA8U,gBAAA,CAAAN,IACA,MAAArd,EAAmBA,GAAI6I,KAAAE,MACvB,cAAAsU,EACArd,EAAA,qBAEA,UAAAqd,EACArd,EAAA,4BADA,IAIA6I,KAAA+U,WAAA,EAAAP,EAAArR,KACA,MAAA6R,WAAmBA,GAAahV,KAAAE,MAChC+U,EAAAV,EAAAC,GACA,OAAAI,EAAAvc,EAAAqC,cAAAwa,EAAA,GAAkDzhB,IAAAwhB,EAAAE,OAAAF,EAAAG,SAAAJ,IAAAR,GAAwExU,KAAA8U,gBAAAN,MAG1HxU,KAAAqV,eAAAC,KACA,MAAAC,QAAmBA,GAAUvV,KAAAE,MAC7B,QAAAoV,EAAAH,OACAI,EAAAC,QAAA,QAEA,UAAAF,EAAAH,QACAI,EAAAC,QAAA,YAIA3V,SACA,MAAA4V,EAAAzV,KAAA6U,uBACA,OAAAD,EAAAvc,EAAAqC,cAAAgb,EAAA,GAA0CpJ,SAAAtM,KAAAqV,gBAC1CT,EAAAvc,EAAAqC,cAAAib,EAAA,GAA0CxK,QAAAyK,EAAA,EAAAC,UAAgCJ,EAAAxhB,IAAA,CAAAsa,EAAApL,IAAAnD,KAAA+U,WAAAxG,EAAAiG,QAAArR,yLCpD1E,MAAAjJ,EAAAC,EAAA,EAAAC,QACA0b,YACArO,gBAAA1G,EAAA,GAAAxR,MACA0hB,UAAA,QAEA8E,SACAtO,gBAAA1G,EAAA,GAAAxR,MACAmY,cAAA3G,EAAA,GAAAxR,MACAoY,WAAA5G,EAAA,GAAAxR,OAEAymB,qBACAvO,gBAAA1G,EAAA,GAAAxR,MACAuY,WAAA/G,EAAA,GAAAxR,MACAgY,YAAAxG,EAAA,GAAAxR,OAEAif,YACA/G,gBAAA1G,EAAA,GAAAxR,MACAoJ,QAAAoI,EAAA,GAAAxR,OAEA0mB,gBACAnO,WAAA/G,EAAA,GAAAxR,MACAgY,YAAAxG,EAAA,GAAAxR,yDCrBA,MAAA2mB,EAAA/b,EAAA,EAAAC,QACAqB,MACAsD,QAAA,OACA4S,WAAA,UAEAM,aACAkE,WACAjX,UAAA,EACAwQ,aAAA,EACAnI,YAAAxG,EAAA,GAAAgP,KAEAqG,eACA9b,SAAAyG,EAAA,GAAAxR,MACAugB,MAAA/O,EAAA,GAAAgP,KAEAsG,eACA/b,SAAAyG,EAAA,GAAAxR,MACAugB,MAAA/O,EAAA,GAAAgP,KAEAuG,QACAvX,QAAA,OACAC,eAAA,gBACArG,QAAAoI,EAAA,GAAAgP,IACAtI,gBAAA1G,EAAA,GAAAgP,KAEA5c,KACAuc,aAAA3O,EAAA,GAAAgP,KAEA/J,OACA0B,cAAA3G,EAAA,GAAAgP,sCC7BA,MAAAwG,EAAApc,EAAA,EAAAC,QACAoc,iBACAzX,QAAA,OACA4S,WAAA,UAEA8E,sBACA/G,aAAA,EACAnI,YAAAxG,EAAA,GAAAgP,OCEA2G,IACKthB,MAAA,UAAA7F,MAAA,YACA6F,MAAA,UAAA7F,MAAA,YACA6F,MAAA,SAAA7F,MAAA,WAEL2iB,EAAA,MACAnK,EAAA,OA8FA,MAAA3I,EAAAtQ,OAAAuQ,EAAA,EAAAvQ,CAAAwQ,IACA,MAAAqX,EAAA7nB,OAAA8nB,EAAA,EAAA9nB,EACA0a,QACAqN,WAAA,UACAC,iBAAA,QACAC,kBAAA,GAEAC,UAAA,IAIA,OACAL,cACApjB,OAJA0jB,EAAA,EAAAC,aAAA5X,EAAA4S,EAAAyE,GAKAQ,kBAJAF,EAAA,EAAAG,wBAAA9X,EAAA4S,EAAAyE,MAOAU,GACAC,YAAAL,EAAA,EAAAK,aAEAC,EAAAzoB,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAAsQ,EAAAiY,EAAAvoB,eAjHA2L,EAAApC,EAAAuH,UACAC,YAAA2X,EAAAC,GACA3X,MAAA0X,EAAAC,GACAzX,KAAAmI,cACAuP,YAAA1X,KAAAE,MAAAtD,SAAA,UACA+a,eAAA,GAEA3X,KAAAV,MAAAxQ,OAAAgK,UAAqCkH,KAAAmI,cACrCnI,KAAA4X,mBAAAroB,KACA,MAAAsoB,cAAmBA,GAAgB7X,KAAAE,MACnC2X,IACA7X,KAAAyC,UACAiV,YAAAnoB,IAEAsoB,EAAAtoB,MAGAyQ,KAAA8X,iBAAA,MACA,MAAA3gB,EAAmBA,GAAI6I,KAAAE,MACvB,OAAAwW,EAAAziB,IAAA4U,GAAApO,EAAApC,EAAAqC,cAAA4T,EAAA,GAAoFyJ,UAAA,SAAAtkB,IAAAoV,EAAAtZ,MAAA8b,QAAA,IAAArL,KAAA4X,mBAAA/O,EAAAtZ,QAA+F4H,qBAAuB0R,EAAAzT,aAE1M4K,KAAAgY,gBAAA,MACA,MAAAzkB,OAAmBA,EAAA4D,KAAY6I,KAAAE,MAC/B,OAAA3M,KAAAkJ,SACA,IAAA0F,QAAA5O,EAAAkJ,QACAxI,IAAAsa,GAAA9T,EAAApC,EAAAqC,cAAA4T,EAAA,GAA2EyJ,UAAA,SAAAtkB,OAA8BsU,IAASwG,IAAIlD,QAAA,IAAArL,KAAA4X,sBAA6C7P,IAASwG,MAAQpX,EAAA,oBAAyB5H,MAAAgf,WAM7MvO,KAAAiY,WAAA,MACA,MAAAC,EAAAppB,OAAA8nB,EAAA,EAAA9nB,CAAAqpB,SAAAC,QACA,IAAAxb,EAAA9N,OAAA6O,EAAA,EAAA7O,CAAAopB,EAAAG,UACA,MAAAC,EAAAJ,KAAAG,SACAvpB,OAAAoa,KAAAgP,EAAAG,aAEA,UAAA5kB,KAAA6kB,EAEA,QADA7kB,EAAAqV,QAAAf,GACA,CACAnL,EAAAnJ,EACA,MAGA,eAAAmJ,IAAA,YAEAoD,KAAAuY,oBAAAzO,KACA9J,KAAAyC,UACAkV,eAAA3X,KAAAV,MAAAqY,kBAGA3X,KAAAwY,oBAAAb,KACA3X,KAAAyC,UACAkV,oBAGA3X,KAAA4X,mBAAA5X,KAAA4X,mBAAAa,KAAAzY,MACAA,KAAAuY,oBAAAvY,KAAAuY,oBAAAE,KAAAzY,MACAA,KAAAwY,oBAAAxY,KAAAwY,oBAAAC,KAAAzY,MAEAH,oBACA,MAAAyX,YAAeA,EAAAX,eAA2B3W,KAAAE,MAC1CoX,EAAApF,EAAAyE,GACA3W,KAAAyC,UACAiV,YAAA1X,KAAAiY,eAGApY,mBAAAsF,GACA,MAAAmS,YAAeA,EAAA1a,UAAA+Z,eAAoC3W,KAAAE,MACnDiF,EAAAwR,iBACAxR,EAAAvI,cACA0a,EAAApF,EAAAyE,GACA3W,KAAAyC,UAA2BiV,YAAA1X,KAAAiY,gBAG3BpY,SACA,MAAA1I,EAAeA,GAAI6I,KAAAE,OACnBwX,YAAeA,EAAAC,iBAA6B3X,KAAAV,MAC5C+O,MACArO,KAAA8X,sBACA9X,KAAAgY,mBAGA5iB,GAAA,KADAsiB,IAAA5O,QAAAf,IAAA,GAEA5Q,EAAA,oBAAqC5H,MAAAmoB,EAAAxD,MAAAnM,EAAAvT,UACrC2C,qBAAmCugB,KACnC,OAAAjd,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAynB,EAAAC,kBAC5C/b,EAAApC,EAAAqC,cAAA,SAA0CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAynB,EAAAE,uBAC1Ctf,EAAA,iBACA,KACAsD,EAAApC,EAAAqC,cAAAoT,EAAA,GAA2CxB,SAAAtM,KAAAuY,oBAAArK,OAAAzT,EAAApC,EAAAqC,cAAAyT,EAAA,GAAkF/B,SAAApM,KAAAwY,qBAAqCpjB,GAAA6U,OAAA0N,EAAAtJ,uBC7FlKqK,GACAC,MAAA,OACAnP,QACAsN,iBAAA,QACAC,kBAAA,EACAF,WAAA,YAGA+B,EAAA,OAiCA,MAAAC,EAAA/pB,OAAAuQ,EAAA,EAAAvQ,CAAA,CAAAwQ,EAAAY,KACA,MAAAyW,EAAA7nB,OAAA8nB,EAAA,EAAA9nB,CAAA4pB,GACAnlB,EAAA0jB,EAAA,EAAAC,aAAA5X,EAAAsZ,EAAAjC,GACAmC,EAAA7B,EAAA,EAAA8B,kBAAAzZ,EAAAsZ,EAAAjC,GACAQ,EAAAF,EAAA,EAAAG,wBAAA9X,EAAAsZ,EAAAjC,GACAqC,EAAAlqB,OAAAmqB,EAAA,EAAAnqB,CAAAoqB,EAAA,GAIA,OACAxmB,UAJAwmB,EAAA,EAAAC,gBAAA7Z,EAAA,MAAA0Z,GAKAI,eAJAF,EAAA,EAAAG,qBAAA/Z,EAAA,MAAA0Z,GAKAM,qBAJAJ,EAAA,EAAAK,2BAAAja,EAAA,MAAA0Z,GAKArC,cACApjB,SACAulB,cACA3B,uBAGAqC,GACAlC,YAAAL,EAAA,EAAAK,aAEAmC,EAAA3qB,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAA+pB,EAAAW,EAAA1qB,eAtDA2L,EAAApC,EAAAuH,UACAC,oBACA,MAAAyX,YAAeA,EAAAX,eAA2B3W,KAAAE,MAC1CoX,EAAAsB,EAAAjC,GAEA9W,mBAAAsF,GACA,MAAAmS,YAAeA,EAAAX,eAA2B3W,KAAAE,MAC1CiF,EAAAwR,iBACAW,EAAAsB,EAAAjC,GAGA9W,SACA,MAAAjD,QAAeA,EAAA8c,mBAAAhnB,YAAA0mB,iBAAA7lB,SAAAulB,cAAA3hB,KAAgF6I,KAAAE,MAC/FyZ,EAAApmB,IACAulB,IACAM,GACA1mB,GACAA,EAAA8f,MACA9f,EAAA8f,KAAA/a,MAAA,EACA,OAAAgD,EAAApC,EAAAqC,cAAA,UAA+CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAonB,EAAAI,SAC/C7b,EAAApC,EAAAqC,cAAA,WACAD,EAAApC,EAAAqC,cAAA+F,EAAA,GAA4C9F,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAonB,EAAAlQ,OAAAtF,KAAAkZ,EAAA,UAAuDziB,EAAA,6BACnGsD,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAonB,EAAA/iB,MAC5CsH,EAAApC,EAAAqC,cAAAmf,EAAA,GAAsD7E,WAAA,SACtDzE,QAAAoJ,IAAAlf,EAAApC,EAAAqC,cAAA6c,GAAuE3a,UAAAib,cAAA6B,KACvEnJ,QAAAoJ,IAAAlf,EAAApC,EAAAqC,cAAA,OAAiEC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAonB,EAAAza,OACjEhB,EAAApC,EAAAqC,cAAA+F,EAAA,GAA4C9F,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAonB,EAAAC,WAAAzV,KAAA,OAAgD5R,OAAAQ,EAAA,EAAAR,CAAAyE,EAAAif,KAAAC,MAAAhX,KAAAlM,QAC5FkL,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAonB,EAAAjE,YAC5CxX,EAAApC,EAAAqC,cAAA,OAAgDC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAonB,EAAAE,gBAAuCjf,EAAA,2BACvFsD,EAAApC,EAAAqC,cAAA,OAAgDC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAonB,EAAAG,gBAAuCvnB,OAAAgrB,EAAA,EAAAhrB,+IClDvF,MAAAirB,GAAA5f,EAAA,EAAAC,QACA4f,OAEA/a,OAAA,QACAmD,MAAA,SAEA+N,UACAjR,UAAA6B,EAAA,GAAAxR,MACA0qB,UAAA,WAGAC,GAAAC,EAAA;;kBAEkBpZ,EAAA,GAAAxR;;;;;ECVlB6qB,GAAA,MAgCA,MAAAC,GAAAvrB,OAAAuQ,EAAA,EAAAvQ,CAAA,CAAAwQ,GAAuDzB,cACvD,MAAA8Y,EAAA7nB,OAAA8nB,EAAA,EAAA9nB,EACA0a,QACA3L,UACAgZ,WAAA,UACAC,iBAAA,QACAC,kBAAA,KAKA,OACAJ,cACApjB,OAJA0jB,EAAA,EAAAC,aAAA5X,EAAA8a,GAAAzD,GAKAQ,kBAJAF,EAAA,EAAAG,wBAAA9X,EAAA8a,GAAAzD,MAOA2D,IACAhD,YAAAL,EAAA,EAAAK,aAEAiD,GAAAzrB,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAAurB,GAAAC,GAAAxrB,eAnDA2L,EAAApC,EAAAuH,UACAC,cACAC,SAAAC,WACAC,KAAAwa,QAAA,MACA,MAAAjnB,OAAmBA,GAASyM,KAAAE,MAC5BxC,KACA,GAAAnK,EACA,UAAA0U,KAAA1U,EAAAkJ,KACA,UAAA8R,KAAAtG,EAAA5M,OACAqC,EAAA4G,QAAqC2D,EAAAxU,QAAY8a,KAIjD,OAAA7Q,IAGAmC,oBACA,MAAAyX,YAAeA,EAAAX,eAA2B3W,KAAAE,MAC1CoX,EAAA8C,GAAAzD,GAEA9W,mBAAAsF,GACA,MAAAmS,YAAeA,EAAAX,eAA2B3W,KAAAE,MAC1CiF,EAAAwR,iBACAW,EAAA8C,GAAAzD,GAGA9W,SAEA,OADAG,KAAAwa,UACAvmB,IAAA,CAAAgU,EAAA9E,IAAA1I,EAAApC,EAAAqC,cAAA,OAAoEjH,WAAa0P,KAAS8E,QCR1F,MAAAwS,GAAA3rB,OAAA0Q,EAAA,EAAA1Q,iBArBA2L,EAAApC,EAAAuH,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAA0a,YAAA,MACA1a,KAAAE,MAAAya,SAAA,KAEA3a,KAAA0a,YAAA1a,KAAA0a,YAAAjC,KAAAzY,MAEAH,sBAAAkU,GACA,MAAA9J,OAAeA,EAAAhS,QAAe+H,KAAAE,MAC9B,OAAA6T,EAAA9b,UAAA8b,EAAA9J,WAEApK,SACA,MAAAjD,QAAeA,EAAAqN,SAAAhS,OAAAd,KAA2B6I,KAAAE,MAC1C,OAAAzF,EAAApC,EAAAqC,cAAAkgB,EAAA,GAA4CjgB,aAAeuf,MAAiBprB,OAAAqL,EAAA,EAAArL,CAAAirB,GAAAC,SAAkB/P,SAAA0Q,QAAA3a,KAAA0a,YAAA1U,MAAA7O,EAAA,gCAC9FyF,UACAnH,KAAAwC,EAAA7C,QACagN,MAAA,OACb3H,EAAApC,EAAAqC,cAAA6f,IAAiD1c,QAAA5F,EAAA7C,OAAA6C,EAAA3H,GAAAsM,UAAA3E,aCrBjD4iB,GAAA1gB,EAAA,EAAAC,QACA0gB,aACA5b,UAAA6B,EAAA,GAAAxR,OAEAyqB,OAEA/a,OAAA,QACAmD,MAAA,SAEA+N,UACA8J,UAAA,WAGAc,GAAAZ,EAAA;;kBAEkBpZ,EAAA,GAAAxR;;;;;gBCPlB,MAAAyrB,GAAA,OA2BA,MAAAC,GAAAnsB,OAAAuQ,EAAA,EAAAvQ,CAAA,CAAAwQ,GAAuD1C,UAAA3E,OAAAijB,oBACvD,MAAAlS,GACAQ,QACAsN,iBAAA,QACAC,kBAAA,EACAF,WAAA,UACAhX,CAAAqb,GAAAjjB,EAAA7C,OAAA6C,EAAA3H,IAEA+nB,UAAmBxY,CAAAjD,GAAA,MAEnB+Z,EAAA7nB,OAAA8nB,EAAA,EAAA9nB,CAAAka,GAGA,OACA2N,cACApjB,OAJA0jB,EAAA,EAAAC,aAAA5X,EAAA0b,GAAArE,GAKAQ,kBAJAF,EAAA,EAAAG,wBAAA9X,EAAA0b,GAAArE,MAOAwE,IACA7D,YAAAL,EAAA,EAAAK,aAEA8D,GAAAtsB,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAAmsB,GAAAE,GAAArsB,eAhDA2L,EAAApC,EAAAuH,UACAC,YAAAK,GACAJ,MAAAI,GAEAL,oBACA,MAAAyX,YAAeA,EAAAX,eAA2B3W,KAAAE,MAC1CoX,EAAA0D,GAAArE,GAEA9W,mBAAAsF,GACA,MAAAmS,YAAeA,EAAAX,eAA2B3W,KAAAE,MAC1CiF,EAAAwR,iBACAW,EAAA0D,GAAArE,GAGA9W,SACA,MAAAjD,QAAeA,EAAArJ,SAAA4jB,oBAAAhgB,KAAwC6I,KAAAE,MACvDzE,EAAA3M,OAAAQ,EAAA,EAAAR,CAAAyE,KAAAif,MAAAjf,EAAAif,KAAAC,MACAlf,EAAAif,KAAAC,MAAAhX,KAAAlM,MACA,GACA,OAAAkL,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACAhW,EAAApC,EAAAqC,cAAA,OAAwCC,UAAAkgB,GAAA1K,UACxC1V,EAAApC,EAAAqC,cAAA+F,EAAA,GAA4CC,KAAA,MAAavJ,EAAA,0BAA+B5H,MAAAkM,MACxFhB,EAAApC,EAAAqC,cAAA,OAAwCC,UAAAkgB,GAAAC,aACxCrgB,EAAApC,EAAAqC,cAAA2gB,GAAA,GAA4DznB,MAAAgJ,EAAArJ,SAAA6c,OAAA+G,GAA4D,EAAIxjB,WAAQA,EAAAM,IAAAqnB,GAAA7gB,EAAApC,EAAAqC,cAAA2gB,GAAA,GAAoE5nB,IAAA6nB,EAAAhrB,GAAA+G,iBAAiC/H,cAAA,EAAA8F,MAAAkmB,EAAAlmB,MAAAkmB,EAAAlmB,MAAAmC,WAAA,GAAA6b,WAAA7f,EAAAif,KAAAC,MAAAhX,KAAAlM,MAAAmG,MAAA4lB,EAAA5lB,MAAAnG,MAAA+rB,EAAA7f,eCPzO,MAAA8f,GAAAzsB,OAAA0Q,EAAA,EAAA1Q,iBAtBA2L,EAAApC,EAAAuH,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAA0a,YAAA,MACA1a,KAAAE,MAAAya,SAAA,KAEA3a,KAAA0a,YAAA1a,KAAA0a,YAAAjC,KAAAzY,MAEAH,sBAAAkU,GACA,MAAA9J,OAAeA,EAAAhS,QAAe+H,KAAAE,MAC9B,OAAA6T,EAAA9b,UAAA8b,EAAA9J,WAEApK,SACA,MAAAjD,QAAeA,EAAAqN,SAAAhS,OAAAijB,gBAAA/jB,KAA0C6I,KAAAE,MACzD,OAAAzF,EAAApC,EAAAqC,cAAAkgB,EAAA,GAA4CjgB,aAAeogB,MAAiBjsB,OAAAqL,EAAA,EAAArL,CAAA+rB,GAAAb,SAAkBwB,SAAA,EAAAvR,SAAA0Q,QAAA3a,KAAA0a,YAAA1U,MAAA7O,EAAA,kCAC9FyF,UACAnH,KAAAwC,EAAA7C,MACA8lB,mBAEAzgB,EAAApC,EAAAqC,cAAA0gB,IAAyDxe,UAAA3E,OAAAijB,gGCvBzD,MAAAO,GAAAthB,EAAA,EAAAC,QACAjJ,MACA2W,WAAA/G,EAAA,GAAAgP,KAEAiK,OACA0B,IACAhM,aAAA3O,EAAA,GAAAxR,OAEAosB,OACApU,YAAAxG,EAAA,GAAAgP,KAEA6L,IACA9T,WAAA/G,EAAA,GAAAgP,MAGA/J,OACA0B,cAAA3G,EAAA,GAAAgP,OCPA8L,KACKzmB,MAAA,QAAA7F,MAAA,UACA6F,MAAA,UAAA7F,MAAA,YAELusB,GAAA,OA0EA,MAAAC,GAAAjtB,OAAAuQ,EAAA,EAAAvQ,CAAAwQ,KAEA0c,MAAAC,GAAA,EAAAC,kBAAA5c,GACAxO,OAAAmrB,GAAA,EAAAE,aAAA7c,GACA8c,YAAAH,GAAA,EAAAI,wBAAA/c,MAGAgd,IACAC,aAAAN,GAAA,EAAAM,cAEAC,GAAA1tB,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAAitB,GAAAO,GAAAxtB,eAnFA2L,EAAApC,EAAAuH,UACAC,YAAA2X,EAAAC,GACA3X,MAAA0X,EAAAC,GACAzX,KAAAmI,cACA0O,WAAA,SAEA7W,KAAAV,MAAAxQ,OAAAgK,UAAqCkH,KAAAmI,cACrCnI,KAAAyc,eAAA,MACA,MAAA7f,QAAmBA,EAAA8f,aAAA/oB,QAAAqV,SAAoChJ,KAAAE,OACvD2W,WAAmBA,GAAa7W,KAAAV,MAChCqd,EAAA7tB,OAAAgK,UAA6C6F,KAAAie,MAAAje,KAAAC,UAAAoK,KAAsCqP,cAAAjS,EAAAyW,cAAAzW,IACnFuW,EAAAnT,OAAAqN,aACA,IAAAF,EAAA7nB,OAAA8nB,EAAA,EAAA9nB,CAAA6tB,GACA,GAAAD,EACA/F,gBAA4C/Z,YAG5C,UAAA3E,KAAAtE,EACAgjB,gBAAgD/Z,MAAQ3E,EAAA7C,MAGxD,OAAAuhB,IAEA3W,KAAA0a,YAAA,MACA1a,KAAAE,MAAAya,SAAA,KAEA3a,KAAA8c,kBAAA,MACA,MAAAP,aAAmBA,GAAevc,KAAAE,MAClCqc,EAAA,OAAAvc,KAAAyc,oBAEAzc,KAAA+c,uBAAA,EAAAC,EAAAlT,KACA9J,KAAAyC,UAA2BoU,WAAA/M,EAAAmT,cAAA1tB,UAE3ByQ,KAAA+c,uBAAA/c,KAAA+c,uBAAAtE,KAAAzY,MAEAH,mBAAAsF,GACA,MAAAiX,YAAeA,EAAAnS,UAAsBjK,KAAAE,MACrC+J,IAAA9E,EAAA8E,QACAjK,KAAAyC,SAAA3T,OAAAgK,UAA0CkH,KAAAmI,eAE1ChD,EAAArU,SAAAkP,KAAAE,MAAApP,QACA,IAAAsrB,GACApc,KAAA0a,cAGA7a,SACA,MAAAuc,YAAeA,EAAAxf,UAAAjJ,QAAAwD,KAAiC6I,KAAAE,OAChD2W,WAAeA,GAAa7W,KAAAV,MAC5B4d,MAAAvpB,GACAqM,KAAAE,MAAA+J,QACAnb,OAAAoJ,GAAA,EAAApJ,CAAAouB,GACAzpB,IAAA,KACA2E,UAAA,IAGA,IAAA+kB,EAAAhmB,EAAA,mBAAkDyF,YAIlD,OAHA,IAAAA,EAAAkM,QAAAgT,MACAqB,EAAAhmB,EAAA,yBAEAsD,EAAApC,EAAAqC,cAAAkgB,EAAA,GAA4CjgB,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA2sB,GAAAzB,OAAAwB,SAAA,EAAAvR,OAAAjK,KAAAE,MAAA+J,OAAA0Q,QAAA3a,KAAA0a,YAAA1U,MAAA7O,EAAA,gBAAAimB,SAC5C3iB,EAAApC,EAAAqC,cAAAwQ,GAAA,EAAApc,OAAAgK,UAA4DhK,OAAA0B,GAAA,EAAA1B,CAAA0B,GAAA,EAAAM,OAAAC,aAA4C0C,IAAA,SAAA4X,QAAArL,KAAA0a,YAAAvP,QAAAD,GAAA,EAAAmS,YAA6ElmB,EAAA,kBACrLsD,EAAApC,EAAAqC,cAAAwQ,GAAA,EAAApc,OAAAgK,UAA4DhK,OAAA0B,GAAA,EAAA1B,CAAA0B,GAAA,EAAAM,OAAAE,aAA4Cyc,WAAA,IAAA2O,EAAA3oB,IAAA,UAAA4X,QAAArL,KAAA8c,kBAAA3R,QAAAD,GAAA,EAAAoS,UAAkInmB,EAAA,qBAE1OsD,EAAApC,EAAAqC,cAAA+F,EAAA,GAAwC9F,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA2sB,GAAAzV,OAAAtF,KAAA,MAA2CvJ,EAAA,kBAAuByF,aAC1GnC,EAAApC,EAAAqC,cAAA6iB,GAAA,GAAuC5iB,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA2sB,GAAAtqB,OACvCsJ,EAAApC,EAAAqC,cAAA8iB,GAAA,GAAgDpoB,MAAA+B,EAAA,yBAAAsmB,QAAA,kBAChDhjB,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KAAAoL,GAAA5nB,IAAA,CAAA4U,EAAA1F,IAAA1I,EAAApC,EAAAqC,cAAAgjB,GAAA,GAAoIjqB,IAAA0P,EAAA7S,iBAA+B6S,IAAMwa,aAAAvX,IAAAyC,EAAAtZ,MAAA6F,MAAA+B,EAAA0R,EAAAzT,OAAA7F,MAAAsZ,EAAAtZ,MAAA4d,QAAA0J,IAAAhO,EAAAtZ,MAAAkG,KAAA,aAAAmV,SAAA5K,KAAA+c,uBAAApS,aAAAxT,EAAA0R,EAAAzT,YACzKqF,EAAApC,EAAAqC,cAAA8iB,GAAA,GAAgDpoB,MAAA+nB,EAAAM,QAAA,mBAChDhjB,EAAApC,EAAAqC,cAAA,UAAAwiB,EAAAjpB,IAAA,CAAA2pB,EAAAza,IACA1I,EAAApC,EAAAqC,cAAA,MAA0DjH,IAAA0P,GAAaya,EAAAxoB,gFCnFvE,MAAAwL,IACAid,YAAA,GACAC,qBAAA,KAEAC,GAAA5jB,EAAA,EAAAC,QACAwH,gBACAkG,WAAA/G,EAAA,GAAAxR,OAEAkgB,eACAxQ,OAAA,QACAyQ,aAAA3O,EAAA,GAAAxR,MACA2P,UAAA6B,EAAA,GAAAxR,OAEAyuB,WACA9e,UAAA6B,EAAA,GAAAxR,OAEA0uB,eACA/e,UAAA6B,EAAA,GAAAxR,OAEAogB,gBACAzQ,UAAA6B,EAAA,GAAAxR,OAEA2uB,cACAhf,UAAA6B,EAAA,GAAAxR,SCbA4uB,GAAA,OACAC,GAAA,gBACAC,GAAA,UA4DA,MAAAC,GAAAxvB,OAAAuQ,EAAA,EAAAvQ,CAAA,CAAAwQ,GAAuDif,qBAAAC,0BAevD,OACAC,kBAdAC,GAAA,aAAApf,EAAA6e,GAAAI,GAeAI,6BAdAD,GAAA,wBAAApf,EAAA6e,GAAAI,GAeAK,sBAdAF,GAAA,aAAApf,EAAA8e,GAAAG,GAeAM,iCAdAH,GAAA,wBAAApf,EAAA8e,GAAAG,GAeAO,qBAdAJ,GAAA,aAAApf,EAAA+e,GAAAE,GAeAQ,gCAdAL,GAAA,wBAAApf,EAAA+e,GAAAE,GAeAS,mBAbAN,GAAA,aAAApf,EAAA6e,GAAAK,GAcAS,8BAbAP,GAAA,wBAAApf,EAAA6e,GAAAK,GAcAU,uBAbAR,GAAA,aAAApf,EAAA8e,GAAAI,GAcAW,kCAbAT,GAAA,wBAAApf,EAAA8e,GAAAI,GAcAY,sBAbAV,GAAA,aAAApf,EAAA+e,GAAAG,GAcAa,iCAbAX,GAAA,wBAAApf,EAAA+e,GAAAG,MAgBAc,IACAhI,YAAAiI,GAAA,aAEAC,GAAA1wB,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAAwvB,GAAAgB,GAAAxwB,eA5FA2L,EAAApC,EAAAuH,UACAC,cACAC,SAAAC,WACAC,KAAAyf,YAAA,KACAhlB,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACAhW,EAAApC,EAAAqC,cAAAgW,GAAA,UAA+C/V,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAivB,GAAAtO,eAAA/O,KAAAgQ,GAAA,aAAAE,KAC/CnW,EAAApC,EAAAqC,cAAAgW,GAAA,UAA+C/V,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAivB,GAAApO,gBAAAjP,KAAAgQ,GAAA,aAAAC,OAG/C9Q,oBACA,MAAAyX,YAAeA,EAAAiH,qBAAAC,uBAAuDxe,KAAAE,MACtEoX,EAAA6G,GAAAI,GACAjH,EAAA8G,GAAAG,GACAjH,EAAA+G,GAAAE,GACAjH,EAAA6G,GAAAK,GACAlH,EAAA8G,GAAAI,GACAlH,EAAA+G,GAAAG,GAEA3e,mBAAAsF,GACA,MAAAmS,YAAeA,EAAAiH,qBAAAC,uBAAuDxe,KAAAE,MACtEiF,EAAAoZ,yBACAjH,EAAA6G,GAAAI,GACAjH,EAAA8G,GAAAG,GACAjH,EAAA+G,GAAAE,IAEApZ,EAAAqZ,0BACAlH,EAAA6G,GAAAK,GACAlH,EAAA8G,GAAAI,GACAxe,KAAAE,MAAAoX,YAAA+G,GAAAG,IAGA3e,SACA,MAAA4e,kBAAeA,EAAAE,+BAAAC,wBAAAC,mCAAAC,uBAAAC,kCAAAC,qBAAAC,gCAAAC,yBAAAC,oCAAAC,wBAAAC,mCAAAloB,KAA6U6I,KAAAE,MAE5Vwf,EAAA5wB,OAAA+T,GAAA,EAAA/T,CAAA2vB,EAAA,iBACAkB,EAAA7wB,OAAA+T,GAAA,EAAA/T,CAAAkwB,EAAA,iBAEAY,EAAA9wB,OAAA+T,GAAA,EAAA/T,CAAA8vB,EAAA,iBACAiB,EAAA/wB,OAAA+T,GAAA,EAAA/T,CAAAowB,EAAA,iBAEAY,EAAAhxB,OAAA+T,GAAA,EAAA/T,CAAAgwB,EAAA,iBACAiB,EAAAjxB,OAAA+T,GAAA,EAAA/T,CAAAswB,EAAA,iBACAY,EAAAvB,GACAA,EAAAjM,MACAiM,EAAAjM,KAAAC,OACAgM,EAAAjM,KAAAC,MAAAhX,KACAgjB,EAAAjM,KAAAC,MAAAhX,KAAA/F,MACA,MACA,OAAA+E,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAivB,GAAAnc,iBAC5CnH,EAAApC,EAAAqC,cAAA,OAAwCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAivB,GAAAC,YAAmC,IAAAW,GAC3E,IAAAM,EAAAjf,KAAAyf,cAAAhlB,EAAApC,EAAAqC,cAAAulB,GAAA,GAA0Ila,gBAAAnF,GAAAkd,qBAAAxb,YAAAod,EAAA7b,iBAAAvU,EAAA,EAAAwU,sBAAuI7E,OAAA2B,GAAAid,YAAAtb,aAAAod,EAAA3Z,MAAA7O,EAAA,qCAAAoY,WAAApY,EAAA,6CAAAqY,WAAArY,EAAA,qCACjRzB,MAAAyB,WAAsCrI,OAAAQ,EAAA,EAAAR,CAAAkxB,WAEtCvlB,EAAApC,EAAAqC,cAAA,OAAwCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAivB,GAAAE,gBAAuC,IAAAY,GAC/E,IAAAM,EAAAnf,KAAAyf,cAAAhlB,EAAApC,EAAAqC,cAAAulB,GAAA,GAA8Ila,gBAAAnF,GAAAkd,qBAAAxb,YAAAsd,EAAA/b,iBAAAvU,EAAA,EAAAwU,sBAA2I7E,OAAA2B,GAAAid,YAAAtb,aAAAsd,EAAA7Z,MAAA7O,EAAA,yCAAAqL,sBAAA,EAAA+M,WAAApY,EAAA,6CAAAqY,WAAArY,EAAA,4CACzRsD,EAAApC,EAAAqC,cAAA,OAAwCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAivB,GAAAG,eAAsC,IAAAa,GAC9E,IAAAM,EAAArf,KAAAyf,cAAAhlB,EAAApC,EAAAqC,cAAAulB,GAAA,GAA6Ila,gBAAAnF,GAAAkd,qBAAAxb,YAAAwd,EAAAjc,iBAAAvU,EAAA,EAAAwU,sBAA0I7E,OAAA2B,GAAAid,YAAAtb,aAAAwd,EAAA/Z,MAAA7O,EAAA,wCAAAqL,sBAAA,EAAA+M,WAAApY,EAAA,6CAAAqY,WAAArY,EAAA,gDCrEvR+oB,GAAA/lB,EAAA,EAAAC,QACA4f,OAEA/a,OAAA,QACAmD,MAAA,YAGA+d,GAAAhG,EAAA;;;;ECyBA,MAAAiG,GAAAtxB,OAAAuQ,EAAA,EAAAvQ,CAAA,CAAAwQ,GAAuD1C,UAAA3E,WACvD,MAAAooB,GACA7W,QACAsN,iBAAA,QACAC,kBAAA,EACAF,WAAA,QACA9a,MAAA,GAEAsc,UACAxY,CAAAjD,GAAA3E,EAAA7C,OAAA6C,EAAA3H,KAGAiuB,EAAAzvB,OAAA8nB,EAAA,EAAA9nB,CAAAuxB,GACAC,GACA9W,QACAsN,iBAAA,QACAC,kBAAA,EACAF,WAAA,QACA9a,MAAA,GAEAsc,UACAxY,CAAAjD,GAAA3E,EAAA7C,OAAA6C,EAAA3H,KAIA,OACAiuB,qBACAC,oBAHA1vB,OAAA8nB,EAAA,EAAA9nB,CAAAwxB,GAIAC,QAAAC,GAAA,EAAAC,qBAAAnhB,MAGAohB,GAAA5xB,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAAsxB,MAAAtxB,eAvDA2L,EAAApC,EAAAuH,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAA0a,YAAA,MACA1a,KAAAE,MAAAya,SAAA,KAEA3a,KAAA0a,YAAA1a,KAAA0a,YAAAjC,KAAAzY,MAEAH,oBACAG,KAAAyC,aAEA5C,sBAAAkU,GACA,MAAA9J,OAAeA,EAAAhS,QAAe+H,KAAAE,MAC9B,OAAA6T,EAAA9b,UAAA8b,EAAA9J,WAEApK,SACA,MAAA0e,mBAAeA,EAAA3hB,UAAAqN,SAAAhS,OAAAumB,sBAAArnB,KAAqE6I,KAAAE,MACpF,OAAAzF,EAAApC,EAAAqC,cAAAkgB,EAAA,GAA4CjgB,aAAewlB,MAAiBrxB,OAAAqL,EAAA,EAAArL,CAAAoxB,GAAAlG,SAAkBwB,SAAA,EAAAvR,SAAA0Q,QAAA3a,KAAA0a,YAAA1U,MAAA7O,EAAA,sCAC9FyF,UACAnH,KAAAwC,EAAA7C,SAEAqF,EAAApC,EAAAqC,cAAA8kB,IAAkDjB,qBAAAC,6BCkElD,MAAAmC,GAAA7xB,OAAA0Q,EAAA,EAAA1Q,iBA1FA2L,EAAApC,EAAAuH,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAAmI,cACAyY,gBAAA,EACAC,mBAAA,EACAC,uBAAA,EACAC,gBAAA,EACAC,mBAAA,GAEAhhB,KAAAV,MAAAxQ,OAAAgK,UAAqCkH,KAAAmI,cACrCnI,KAAAihB,eAAA,MACA,MAAArkB,QAAmBA,EAAA3E,OAAA+Q,SAAuBhJ,KAAAE,OAC1C2gB,kBAAmBA,GAAoB7gB,KAAAV,MACvC,OAAA7E,EAAApC,EAAAqC,cAAA8hB,IAAsD5f,UAAAqN,OAAA4W,EAAAltB,OAAAsE,GAAA0iB,QAAA3a,KAAAkhB,uBAAAlY,YAEtDhJ,KAAAmhB,mBAAA,MACA,MAAAvkB,QAAmBA,EAAA3E,QAAgB+H,KAAAE,OACnC4gB,sBAAmBA,GAAwB9gB,KAAAV,MAC3C,OAAA7E,EAAApC,EAAAqC,cAAAgmB,IAA0D9jB,UAAAqN,OAAA6W,EAAA7oB,OAAA0iB,QAAA3a,KAAAohB,+BAE1DphB,KAAAqhB,YAAA,MACA,MAAAzkB,QAAmBA,EAAA3E,QAAgB+H,KAAAE,OACnC6gB,eAAmBA,GAAiB/gB,KAAAV,MACpC,OAAA7E,EAAApC,EAAAqC,cAAA+f,IAA0D5c,QAAA5F,EAAA7C,OAAA6C,EAAA3H,GAAAsM,UAAAqN,OAAA8W,EAAA9oB,OAAA0iB,QAAA3a,KAAAshB,wBAE1DthB,KAAAuhB,eAAA,MACA,MAAA3kB,QAAmBA,EAAA3E,QAAgB+H,KAAAE,OACnC8gB,kBAAmBA,GAAoBhhB,KAAAV,MACvC,OAAA7E,EAAApC,EAAAqC,cAAA6gB,IAA6D3e,QAAA,UAAAqN,OAAA+W,EAAA/oB,OAAA0iB,QAAA3a,KAAAwhB,uBAAAtG,cAAAte,MAE7DoD,KAAAkhB,uBAAA,CAAAjX,IACAjK,KAAAyC,UAA2Boe,kBAAA5W,MAE3BjK,KAAAyhB,sBAAA,MACAzhB,KAAAyC,UAA2Boe,mBAAA,MAE3B7gB,KAAAohB,2BAAA,CAAAnX,IACAjK,KAAAyC,UAA2Bqe,sBAAA7W,MAE3BjK,KAAA0hB,0BAAA,MACA1hB,KAAAyC,UAA2Bqe,uBAAA,MAE3B9gB,KAAAshB,oBAAA,CAAArX,IACAjK,KAAAyC,UAA2Bse,eAAA9W,MAE3BjK,KAAA2hB,mBAAA,MACA3hB,KAAAyC,UAA2Bse,gBAAA,MAE3B/gB,KAAAwhB,uBAAA,CAAAvX,IACAjK,KAAAyC,UAA2Bue,kBAAA/W,MAE3BjK,KAAA4hB,sBAAA,MACA5hB,KAAAyC,UAA2Bue,mBAAA,MAE3BhhB,KAAAqV,eAAA,MACA,MAAAuL,eAAmBA,GAAiB5gB,KAAAV,MACpCU,KAAAyC,UACAme,sBAGA5gB,KAAA6hB,eAAA,CAAAjB,IACA5gB,KAAAyC,UAA2Bme,qBAE3B5gB,KAAAkhB,uBAAAlhB,KAAAkhB,uBAAAzI,KAAAzY,MACAA,KAAAyhB,sBAAAzhB,KAAAyhB,sBAAAhJ,KAAAzY,MACAA,KAAAohB,2BAAAphB,KAAAohB,2BAAA3I,KAAAzY,MACAA,KAAA0hB,0BAAA1hB,KAAA0hB,0BAAAjJ,KAAAzY,MACAA,KAAAshB,oBAAAthB,KAAAshB,oBAAA7I,KAAAzY,MACAA,KAAA2hB,mBAAA3hB,KAAA2hB,mBAAAlJ,KAAAzY,MACAA,KAAAwhB,uBAAAxhB,KAAAwhB,uBAAA/I,KAAAzY,MACAA,KAAA4hB,sBAAA5hB,KAAA4hB,sBAAAnJ,KAAAzY,MACAA,KAAA6hB,eAAA7hB,KAAA6hB,eAAApJ,KAAAzY,MACAA,KAAAqV,eAAArV,KAAAqV,eAAAoD,KAAAzY,MAEAH,SACA,MAAAjD,QAAeA,EAAAzF,KAAa6I,KAAAE,MAC5B,OAAAzF,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACAhW,EAAApC,EAAAqC,cAAAoT,EAAA,GAA2CxB,SAAAtM,KAAAqV,eAAAnH,OAAAzT,EAAApC,EAAAqC,cAAAonB,EAAA,GAA0E1V,SAAApM,KAAA6hB,iBAAgC5X,OAAAjK,KAAAV,MAAAshB,eAAAmB,SAAA,EAAAhU,SAAA,QAAAM,eACrJ5T,EAAApC,EAAAqC,cAAA4T,EAAA,GAAuDyJ,UAAA,SAAAtkB,IAAA,yBAAA4X,QAAArL,KAAA0hB,2BAA8FvqB,EAAA,wCACrJsD,EAAApC,EAAAqC,cAAA4T,EAAA,GAAuDyJ,UAAA,SAAAtkB,IAAA,gBAAAga,WAAA,YAAA7Q,EAAAyO,QAAArL,KAAA4hB,uBAAoHzqB,EAAA,iCAC3KsD,EAAApC,EAAAqC,cAAA4T,EAAA,GAAuDyJ,UAAA,SAAAtkB,IAAA,aAAAga,WAAA,YAAA7Q,EAAAyO,QAAArL,KAAA2hB,oBAA8GxqB,EAAA,6BACrKsD,EAAApC,EAAAqC,cAAA4T,EAAA,GAAuDyJ,UAAA,SAAAtkB,IAAA,gBAAA4X,QAAArL,KAAAyhB,uBAAiFtqB,EAAA,kCAExI6I,KAAAihB,iBACAjhB,KAAAmhB,qBACAnhB,KAAAqhB,cACArhB,KAAAuhB,qBC3FAS,GAAA7nB,EAAA,EAAAC,QACA6nB,YACAxa,gBAAA1G,EAAA,GAAAxR,MACAwP,QAAA,OACAC,eAAA,SACA2I,WAAA5G,EAAA,GAAAxR,MACA0P,OAAA,OACAmD,MAAA,QAEA8f,WACAnU,SAAA,YAEAoU,eACAC,OAAArhB,EAAA,GAAAxR,OAEA8yB,iBACAvS,MAAA/O,EAAA,GAAAxR,MACA+K,SAAAyG,EAAA,GAAAxR,SAGA+yB,GAAAnI,EAAA;;;;qBAIqBpZ,EAAA,GAAAxR;;;iBAGJwR,EAAA,GAAAxR;;;iBAGAwR,EAAA,GAAAxR;;;;;;;iBAOAwR,EAAA,GAAAxR;;;iBAGAwR,EAAA,GAAAxR;;;;;;;EAQjBgzB,GAAApI,EAAA;;;;;;;;;;;;;;;0BCjDA,MAAAqI,GAAAroB,EAAA,EAAAC,QACAqoB,kBACA/S,aAAA3O,EAAA,GAAAxR,OAEAmzB,qBACA3jB,QAAA,OACAC,eAAA,WACA2I,WAAA5G,EAAA,GAAAxR,OAEAozB,UACApb,YAAAxG,EAAA,GAAAxR,MACAmY,cAAA3G,EAAA,GAAAxR,MACAsY,aAAA9G,EAAA,GAAAxR,OAEAqzB,WACArb,YAAAxG,EAAA,GAAAxR,MACAmY,cAAA3G,EAAA,GAAAxR,OAEAszB,eACAnT,aAAA3O,EAAA,GAAAxR,SCnBAuzB,GAAA3oB,EAAA,EAAAC,QACAyoB,eACAtb,YAAAxG,EAAA,GAAAxR,MACA2P,UAAA6B,EAAA,GAAAxR,SCKAwzB,GAAA,MAmEA,MAAAC,GAAAl0B,OAAAuQ,EAAA,EAAAvQ,CAAA,CAAAwQ,GAAuDzB,cACvD,MAAA8Y,EAAA7nB,OAAA8nB,EAAA,EAAA9nB,EACA0a,QACA3L,UACAgZ,WAAA,UACAC,iBAAA,QACAC,kBAAA,KAKA,OACAlZ,UACA8Y,cACApjB,OALA0jB,EAAA,EAAAC,aAAA5X,EAAAyjB,GAAApM,GAMAQ,kBALAF,EAAA,EAAAG,wBAAA9X,EAAAyjB,GAAApM,MAQAsM,IACA3L,YAAAL,EAAA,EAAAK,aAEA4L,GAAAp0B,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAAk0B,GAAAC,GAAAn0B,eAvFA2L,EAAApC,EAAAuH,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAAmI,cACA8B,QAAA,EACAkZ,SAAA,GAEAnjB,KAAAV,MAAAxQ,OAAAgK,UAAqCkH,KAAAmI,cACrCnI,KAAA0a,YAAA,CAAAzQ,IACAjK,KAAAyC,UAA2BwH,aAE3BjK,KAAAojB,WAAAtZ,KACA9J,KAAAyC,UAA2BwH,QAAA,IAC3BH,EAAAuZ,kBACA,IAEArjB,KAAA0a,YAAA1a,KAAA0a,YAAAjC,KAAAzY,MACAA,KAAAojB,WAAApjB,KAAAojB,WAAA3K,KAAAzY,MAEAH,oBACA,MAAAyX,YAAeA,EAAAX,eAA2B3W,KAAAE,MAC1CoX,EAAAyL,GAAApM,GAEA9W,mBAAAsF,GACA,MAAAmS,YAAeA,EAAAX,eAA2B3W,KAAAE,MAC1CiF,EAAAwR,iBACAW,EAAAyL,GAAApM,GAGA9W,SACA,MAAAhC,QAAeA,EAAAjB,UAAAtM,KAAA2H,OAAA1E,SAAA4D,KAAwC6I,KAAAE,OACvD+J,OAAeA,EAAAkZ,WAAkBnjB,KAAAV,MACjC,IAAAgkB,EAAA,EACA,MACAC,KACAC,KACA,GAAAjwB,EACA,UAAA0U,KAAA1U,EAAAkJ,KACA,UAAA8R,KAAAtG,EAAA5M,OAAA,CACA,MACAooB,KADAF,EAAA/uB,OAAA,YACkDyT,EAAAxU,QAAY8a,IAC9D4U,EACAI,EAAAjf,KAAAmf,GAEAH,GAXA,KAYAA,EAAAG,EAAAjvB,OAZA,GAaA+uB,EAAAjf,KAAAmf,EAAAvP,MAAA,EAbA,GAaAoP,GAAAI,OAAA,QAGAH,EAAAjf,KAAAmf,IAGAH,GAAAG,EAAAjvB,OACAgvB,EAAAlf,QAAoC2D,EAAAxU,QAAY8a,KAIhD,OAAA9T,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAg0B,GAAAD,eAAAvyB,MAC5CigB,QAAAgT,IACAA,EAAAtvB,IAAA,CAAAgU,EAAA0b,IAAAlpB,EAAApC,EAAAqC,cAAA,QAA6EjH,IAAAkwB,GAAgB1b,IAC7FsI,QAAAgT,EAAA/uB,OAAAgvB,EAAAhvB,SAAAiG,EAAApC,EAAAqC,cAAA,IAAA5L,OAAAgK,UAAmGhK,OAAA0B,GAAA,EAAA1B,CAAA0B,GAAA,EAAAC,QAAAE,UAA0CizB,KAAA,KAAAvY,QAAArL,KAAAojB,aAAuCjsB,EAAA,yBACpL5H,MAAAi0B,EAAAhvB,OAAA+uB,EAAA/uB,UAEAiG,EAAApC,EAAAqC,cAAA+f,IAAkD5c,UAAAjB,UAAAqN,SAAAhS,OAAA0iB,QAAA3a,KAAA0a,2CCxElD,MAAAmJ,GAAA1pB,EAAA,EAAAC,QACAyZ,UACA3U,UAAA6B,EAAA,GAAAxR,OAEA6hB,MACAlS,UAAA6B,EAAA,GAAAxR,OAEAu0B,kBACAhc,WAAA,QACAH,WAAA5G,EAAA,GAAAxR,SCIAw0B,GAAA,OAsEA,MAAAC,GAAAl1B,OAAAuQ,EAAA,EAAAvQ,CAAA,CAAAwQ,GAAuD1C,UAAA3E,OAAAijB,oBACvD,MAAAlS,GACAQ,QACAzN,MAAA,EACA+a,iBAAA,QACAC,kBAAA,EACAF,WAAA,UACAhX,CAAAqb,GAAAjjB,EAAA7C,OAAA6C,EAAA3H,IAEA+nB,UAAmBxY,CAAAjD,GAAA,MAEnB+Z,EAAA7nB,OAAA8nB,EAAA,EAAA9nB,CAAAka,GAGA,OACA2N,cACApjB,OAJA0jB,EAAA,EAAAC,aAAA5X,EAAAykB,GAAApN,GAKAQ,kBAJAF,EAAA,EAAAG,wBAAA9X,EAAAykB,GAAApN,MAOAsN,IACA3M,YAAAL,EAAA,EAAAK,aAEA4M,GAAAp1B,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAAk1B,GAAAC,GAAAn1B,eA5FA2L,EAAApC,EAAAuH,UACAC,cACAC,SAAAC,WACAC,KAAAV,OACA0hB,mBAAA,GAEAhhB,KAAAmU,SAAA,MACA,MAAAvX,QAAmBA,EAAArJ,UAAkByM,KAAAE,MAKrC,OAJApR,OAAA6O,EAAA,EAAA7O,EACAyE,SACAK,MAAAgJ,MAIAoD,KAAAmkB,WAAAzwB,KACA,MAAAH,OAAmBA,GAASyM,KAAAE,MAC5B,OAAAzF,EAAApC,EAAAqC,cAAA2gB,GAAA,GAA+D5nB,OAASC,EAAApD,UAAc+G,iBAAyB/H,cAAA,EAAA8F,MAAA1B,EAAA0B,MAAA1B,EAAA0B,MAAAmC,WAAA,GAAA6b,WAAA,SAAA2Q,GAC/GxwB,EAAAif,KAAAC,MAAAhX,KAAAlM,MACAgE,EAAAif,KAAAC,MAAAxW,MAAA1M,MAAAmG,MAAAhC,EAAAgC,MAAAnG,MAAA,SAAAw0B,GAAArwB,EAAA+H,KAAA/H,EAAAuI,UAEA+D,KAAAokB,WAAA,MACA,MAAAxnB,QAAmBA,EAAA3E,OAAAijB,gBAAA/jB,KAAkC6I,KAAAE,OACrD8gB,kBAAmBA,GAAoBhhB,KAAAV,MAQvC,WAPAU,KAAAmU,WACAF,UAAA/f,IACA,MAAA5D,EAAA4D,EAAA5D,GACA,GAAAA,GAAA,OAAAA,EACA,OAAAA,EAAAiH,WAAAiU,SAAA,WAIA/Q,EAAApC,EAAAqC,cAAA,OAAoDC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA+0B,GAAAC,mBACpDrpB,EAAApC,EAAAqC,cAAAwQ,GAAA,EAAApc,OAAAgK,UAAgEhK,OAAA0B,GAAA,EAAA1B,CAAA0B,GAAA,EAAAC,QAAAI,eAA+Cwa,QAAArL,KAAA4hB,sBAAApuB,KAAA0X,GAAA,EAAAmZ,OAAAlZ,QAAAD,GAAA,EAAA9X,OAA4F+D,EAAA,wBAA8B5H,MAAAqN,KACzOnC,EAAApC,EAAAqC,cAAA6gB,IAA6D3e,UAAAqN,OAAA+W,EAAA/oB,OAAA0iB,QAAA3a,KAAAwhB,uBAAAtG,mBAG7D,OAGAlb,KAAAwhB,uBAAA,CAAAvX,IACAjK,KAAAyC,UAA2Bue,kBAAA/W,MAE3BjK,KAAA4hB,sBAAA9X,KACA9J,KAAAyC,UAA2Bue,mBAAA,IAC3BlX,EAAAuZ,mBAGAxjB,oBACA,MAAAyX,YAAeA,EAAAX,eAA2B3W,KAAAE,MAC1CoX,EAAAyM,GAAApN,GAEA9W,mBAAAsF,GACA,MAAAmS,YAAeA,EAAAX,eAA2B3W,KAAAE,MAC1CiF,EAAAwR,iBACAW,EAAAyM,GAAApN,GAGA9W,SACA,MAAAjD,QAAeA,EAAArJ,SAAA4jB,qBAAqCnX,KAAAE,MACpD,OAAAzF,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KAAAF,QAAA,IAAA4G,GAAA1c,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACAhW,EAAApC,EAAAqC,cAAAgW,GAAA,UAA2ChQ,KAAAgQ,GAAA,aAAAE,KAC3CnW,EAAApC,EAAAqC,cAAAgW,GAAA,UAA2ChQ,KAAAgQ,GAAA,aAAAE,GAAAjW,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA+0B,GAAAhQ,YAC3CpZ,EAAApC,EAAAqC,cAAAgW,GAAA,UAA2ChQ,KAAAgQ,GAAA,aAAAE,GAAAjW,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA+0B,GAAAhQ,YAC3CpZ,EAAApC,EAAAqC,cAAAgW,GAAA,UAA2ChQ,KAAAgQ,GAAA,aAAAE,GAAAjW,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA+0B,GAAAhQ,aAAyDpZ,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACpGhW,EAAApC,EAAAqC,cAAA,OAAwCC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA+0B,GAAAzS,OACxC3W,EAAApC,EAAAqC,cAAA2gB,GAAA,GAA4DznB,MAAAgJ,EAAAnJ,OAAyBmJ,UAAQrJ,SAAA6c,OAAA+G,GAAoD,EAAIxjB,WAAQA,EAAAM,IAAAP,GAAAsM,KAAAmkB,WAAAzwB,MAC7JsM,KAAAokB,mBC5EAE,GAAAC,IACA,OAAAA,GACA,eACA,gBACA,cACA,eACA,eACA,kBA2DA,MAAAC,GAAA11B,OAAAuQ,EAAA,EAAAvQ,CAAAwQ,KAEAmlB,eACA,WACA,WACA,cAIAC,GAAA51B,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAA01B,MAAA11B,eAjEA2L,EAAApC,EAAAuH,UACAC,cACAC,SAAAC,WACAC,KAAAV,OACAqlB,aAAA,GAEA3kB,KAAA4kB,eAAA,EAAA9a,EAAA+a,KACA7kB,KAAAyC,UACAkiB,aAAAE,MAGA7kB,KAAA8kB,iBAAA,MACA,MAAAL,cAAmBA,EAAA7nB,WAAyBoD,KAAAE,MAC5CkR,KAMA,OALAqT,EAAA3tB,QAAAytB,IACA3nB,IAAA0nB,GAAAC,IACAnT,EAAA9M,KAAAigB,KAGAnT,IAEApR,KAAA+kB,OAAA,EAAAR,EAAAphB,IACA1I,EAAApC,EAAAqC,cAAAsqB,GAAA,GAA8CC,SAAA9hB,EAAA1P,OAA0B6wB,GAAAC,SAAoBve,MAAAhG,KAAAklB,YAAAX,IAAqCvkB,KAAAmkB,WAAAI,KAEjIvkB,KAAAmkB,WAAA,CAAAI,IACA,MAAA3nB,QAAmBA,EAAA3E,QAAgB+H,KAAAE,OACnCykB,aAAmBA,GAAe3kB,KAAAV,MAClCmlB,EAAAzkB,KAAA8kB,mBACAK,EAAAb,GAAAG,EAAAE,IACAS,EAAAd,GAAAC,GACA,OAAAY,IAAAC,EACA3qB,EAAApC,EAAAqC,cAAAwpB,IAAgEtnB,QAAAwoB,EAAAntB,OAAAijB,cAAAte,IAGhE,OAGAoD,KAAAqlB,QAAA,MACA,MAAAZ,EAAAzkB,KAAA8kB,mBACA,OAAAL,EACAhqB,EAAApC,EAAAqC,cAAA4qB,GAAA,GAAmDC,UAAA,EAAAC,UAAAxlB,KAAAV,MAAAqlB,aAAArY,SAAAtM,KAAA4kB,gBAAoFH,EAAAxwB,IAAA,CAAAswB,EAAAphB,IAAAnD,KAAA+kB,OAAAR,EAAAphB,KAGvI,OAGAnD,KAAAklB,YAAA,CAAAX,IACA,MAAAptB,EAAmBA,GAAI6I,KAAAE,MAEvB,OAAA/I,EAAA,oBAA0CyF,QAD1C0nB,GAAAC,IAAA,OAIA1kB,SACA,OAAApF,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KAAAzQ,KAAAqlB,eCxBA,MAAAI,GAAA32B,OAAAuQ,EAAA,EAAAvQ,CAAAwQ,SAGAomB,GAAA52B,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAA22B,MAAA32B,eArCA2L,EAAApC,EAAAuH,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAAV,OACAwhB,uBAAA,GAEA9gB,KAAAohB,2BAAA,CAAAnX,IACAjK,KAAAyC,UAA2Bqe,sBAAA7W,MAE3BjK,KAAA0hB,0BAAA,MACA1hB,KAAAyC,UAA2Bqe,uBAAA,MAE3B9gB,KAAAohB,2BAAAphB,KAAAohB,2BAAA3I,KAAAzY,MACAA,KAAA0hB,0BAAA1hB,KAAA0hB,0BAAAjJ,KAAAzY,MAEAH,SACA,MAAA5H,KAAeA,EAAA2E,UAAAzF,KAAmB6I,KAAAE,OAClC4gB,sBAAeA,GAAwB9gB,KAAAV,MACvC,OAAA7E,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACAhW,EAAApC,EAAAqC,cAAA2W,GAAA,OACA5W,EAAApC,EAAAqC,cAAA4W,GAAA,GAA+CT,GAAA,IAC/CpW,EAAApC,EAAAqC,cAAA,OAAgDC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA0zB,GAAAE,sBAChDjoB,EAAApC,EAAAqC,cAAAwQ,GAAA,EAAApc,OAAAgK,UAAoEhK,OAAA0B,GAAA,EAAA1B,CAAA0B,GAAA,EAAAC,QAAAC,sBAAsD2a,QAAArL,KAAA0hB,0BAAAluB,KAAA0X,GAAA,EAAAmZ,OAAAlZ,QAAAD,GAAA,EAAAmS,YAAqGlmB,EAAA,uCAC/NsD,EAAApC,EAAAqC,cAAA4W,GAAA,GAA+CC,GAAA,GAAAC,GAAA,GAC/C/W,EAAApC,EAAAqC,cAAA,OAAgDC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA0zB,GAAAG,WAChDloB,EAAApC,EAAAqC,cAAAgqB,IAA4D9nB,UAAA3E,WAC5DwC,EAAApC,EAAAqC,cAAA4W,GAAA,GAA+CC,GAAA,GAAAC,GAAA,GAC/C/W,EAAApC,EAAAqC,cAAA,OAAgDC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA0zB,GAAAI,YAAmCrS,QAAA,YAAA3T,IAAAnC,EAAApC,EAAAqC,cAAA,OAAiEC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA0zB,GAAAK,gBACpJpoB,EAAApC,EAAAqC,cAAA6iB,GAAA,OACA9iB,EAAApC,EAAAqC,cAAA8iB,GAAA,GAA4DpoB,MAAA+B,EAAA,0BAAAsmB,QAAA,QAC5DhjB,EAAApC,EAAAqC,cAAAwoB,IAAiEtmB,UAAAtM,GAAA,OAAA2H,OAAA4F,QAAA5F,EAAA7C,OAAA6C,EAAA3H,WACjEmK,EAAApC,EAAAqC,cAAAgmB,IAAkD9jB,UAAAqN,OAAA6W,EAAA7oB,OAAA0iB,QAAA3a,KAAAohB,kCC1BlDuE,GAAA,OAyQA,MAAAC,GAAA92B,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,iBAxQA2L,EAAApC,EAAAuH,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAAV,OACAumB,WACAC,SAEA9lB,KAAAqC,UAAA,MACA,MAAA2G,MAAmBA,EAAAzV,SAAA4D,KAAmB6I,KAAAE,MACtC,IAAA8I,IAAAzV,EACA,OAEA,MAAAwyB,EAAAj3B,OAAA6O,EAAA,EAAA7O,CAAAka,EAAAqP,UACA2N,EAAAhmB,KAAAimB,mBACAxT,EAAA3jB,OAAAQ,EAAA,EAAAR,CAAAyE,KAAAif,MAAAjf,EAAAif,KAAAC,MACAlf,EAAAif,KAAAC,MAAAhX,KAAAlM,MACA,GACAs2B,EAAAG,IAGAhgB,MAAA7O,EAAA,kCAGA6O,MAAA7O,EAAA,qCAGA+uB,QAAA,OACAlgB,MAAA7O,EAAA,iCAAmEsb,UACnE0T,YAAAC,EAAA,KAGApgB,MAAA,OAKAkgB,QAAA,YAAAH,EAAA,gBAAAA,EACA/f,MAAA7O,EAAA,iCAAmEyF,QAAAmpB,IACnEI,YAAAC,EAAA,KAGApgB,MAAA7O,EAAA,qCAGA+uB,QAAA,OACAlgB,MAAA7O,EAAA,iCACAgvB,YAAAC,EAAA,KAGApgB,MAAA,KAGA8f,KACAh3B,OAAA6O,EAAA,EAAA7O,EACAyE,SACAK,MAAAoyB,GAAAD,IAEA9xB,IAAA,CAAAgE,EAAAkL,KACA,MAAA/N,EAAA6C,GAAA,OAAAA,EAAA7C,MAAA6C,EAAA7C,MAAA,GACAixB,EAAArmB,KAAAsmB,sBAAAruB,EAAAkL,GACA1H,EAAAuE,KAAAumB,aAAAtuB,EAAAkL,GACAia,EAAApd,KAAAwmB,WAAAvuB,EAAAkL,GACA2iB,EAAAxhB,MACAmiB,QACyBzgB,MAAAvL,EAAApC,EAAAqC,cAAA,WAAAtF,KACA4Q,MAAAvL,EAAApC,EAAAqC,cAAA,WAAA2rB,KACArgB,MAAAvL,EAAApC,EAAAqC,cAAA,WAAAe,KACAuK,MAAAvL,EAAApC,EAAAqC,cAAA,WAAA0iB,KAEzBnT,QAAA,EACAhS,OACAyuB,WACA9pB,QAAAopB,KAAoDL,KAASK,IAAcD,EAC3E5iB,QACAlL,OACA+Q,WAGA2d,OAAA,EAAAxjB,EACAsjB,QAEAzgB,MAAAvL,EAAApC,EAAAqC,cAAA,OAA+DjH,OAAS,EAAA0P,WAAmBhM,EAAA,kBAK3F6I,KAAAyC,UACAojB,UACAC,OACAc,cAGA5mB,KAAAwmB,WAAA,EAAAvuB,EAAAkL,KACA,MAAAvG,QAAmBA,EAAAoM,SAAiBhJ,KAAAE,MACpC,OAAAzF,EAAApC,EAAAqC,cAAAimB,IAAwD/jB,UAAA3E,OAAA+Q,YAExDhJ,KAAA6mB,cAAA,MACA,MAAA7d,MAAmBA,EAAA7R,KAAW6I,KAAAE,MAC9B,UAAAqO,KAAAzf,OAAAuM,OAAA2N,EAAAqP,UACA,SAAA9J,EACA,OAAA9T,EAAApC,EAAAqC,cAAAosB,EAAA,GAAkEC,YAAA,IAGlE,OAAAtsB,EAAApC,EAAAqC,cAAA2F,EAAA,OACA5F,EAAApC,EAAAqC,cAAA4F,EAAA,GAAqDC,KAAAymB,EAAA,IACrDvsB,EAAApC,EAAAqC,cAAAiG,EAAA,OAAAxJ,EAAA,qCAEA6I,KAAAimB,iBAAA,MACA,MAAAjd,MAAmBA,GAAQhJ,KAAAE,MAC3B,IAAA8lB,EACA,UAAAppB,KAAA9N,OAAAoa,KAAAF,EAAAqP,UAAA,CACA,MAAAsL,EAAA/mB,EAAAkM,QAAA6c,IACA,QAAAhC,EAAA,CACAqC,EAAAppB,EAAAwM,UAAAua,EAAAgC,GAAAnxB,QACA,OAGA,OAAAwxB,IAEAhmB,KAAAsmB,sBAAA,EAAAruB,EAAAkL,KACA,MAAAhM,EAAmBA,GAAI6I,KAAAE,MACvB3Q,EAAAT,OAAAQ,EAAA,EAAAR,CAAA2W,KAAAwhB,IAAAhvB,EAAAwD,KAAAxD,EAAAqE,aACA4qB,EAAA,OAAAjvB,EAAAmE,aAAAqJ,KAAAwhB,IAAAhvB,EAAAmE,cAAA7G,QAAA,KACA4xB,IAAA,IAAAD,GAAA,SAAAA,GACAE,EAAA,OAAAnvB,EAAAmE,aACA,IAAAirB,EAUA,OATAF,IACAE,EAAA,eACA,OAAApvB,EAAAmE,cAAAnE,EAAAqE,WAAA,IACA+qB,GAAA,aAEA,OAAApvB,EAAAmE,cAAAnE,EAAAqE,WAAA,IACA+qB,GAAA,cAGAD,EAIA3sB,EAAApC,EAAAqC,cAAA,OAAoDC,UAAA2nB,IACpD7nB,EAAApC,EAAAqC,cAAA,OAAgDC,UAAA0sB,EAAA5zB,6BAAwD0P,KACxGoN,QAAA4W,GAAAhwB,EAAA,WAAiE5H,MAAA23B,IAAoBzsB,EAAApC,EAAAqC,cAAA6X,EAAA,QACrFhC,QAAA4W,GACA,OAAAlvB,EAAAmE,cACAnE,EAAAqE,WAAA,IAAA7B,EAAApC,EAAAqC,cAAA,QAAkFC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA,gBAAAkzB,GAAAE,WAAAzuB,6BAAkF0P,MACpKoN,QAAA4W,GACA,OAAAlvB,EAAAmE,cACAnE,EAAAqE,WAAA,IAAA7B,EAAApC,EAAAqC,cAAA,QAAkFC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAA,kBAAAkzB,GAAAE,UAAAF,GAAAG,eAAA1uB,6BAA0G0P,OAC5L1I,EAAApC,EAAAqC,cAAA,OAAgDC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAkzB,GAAAK,iBAAA5uB,6BAAuE0P,KAASrU,OAAAgrB,EAAA,EAAAhrB,CAAAS,KAZhIT,OAAAgrB,EAAA,EAAAhrB,KAeAkR,KAAAsnB,UAAA,MACA,MAAAte,MAAmBA,GAAQhJ,KAAAE,OAC3B2lB,QAAmBA,GAAU7lB,KAAAV,MAC7B0mB,EAAAhmB,KAAAimB,mBACA,IAAA9iB,GAAA,EACA/K,EAAAmvB,EAAA,EAAAC,IACA,UAAA/zB,KAAA3E,OAAAoa,KAAAF,EAAA6T,UAAA,CACA,IAAA4K,EAAA,EACA,UAAAC,KAAA7B,EAAA,CACA,GAAA6B,EAAAxB,UAAAzyB,EAAA,CACA2E,EACA,QAAA4Q,EAAA6T,SAAAppB,GACA8zB,EAAA,EAAAC,IACAD,EAAA,EAAAI,KACAxkB,EAAAskB,GAAAzB,EAAA,KACA,MAEAyB,KAGA,OAAAtkB,GAAA,GAAiCA,QAAA/K,kBAEjC4H,KAAA4nB,aAAA,EAAA3vB,EAAA2E,EAAAoM,EAAA7F,IACA1I,EAAApC,EAAAqC,cAAAgrB,IAA2D9oB,UAAA3E,OAAAxE,kBAAkD0P,OAE7GnD,KAAAumB,aAAA,EAAAtuB,EAAAkL,KACA,MAAA5P,OAAmBA,EAAA4D,KAAY6I,KAAAE,MAC/BzE,EAAAlI,EAAAif,KAAAC,MAAAhX,KAAAlM,MACA,OAAAkL,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACA3hB,OAAAQ,EAAA,EAAAR,CAAAmJ,EAAAwD,MACAhB,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAkzB,GAAAK,iBAAA5uB,kBAA4D0P,KAAShM,EAAA,mBACjH5H,OAAA0I,EAAAwD,OAAA,KAAAlG,QAAA,SAGAyK,KAAA6nB,iBAAA,EAAA/d,EAAAge,EAAA7d,KACA,MAAA9S,EAAmBA,GAAI6I,KAAAE,OACvB4lB,KAAmBA,GAAO9lB,KAAAV,OACPonB,WAAAzuB,KAAaA,EAAA2E,UAAAoM,QAAA7F,UAAiC2iB,EAAAgC,GAEjEhC,EAAAgC,EAAA,GAAArB,MADAxc,IAEqBjE,MAAAhG,KAAA4nB,aAAA3vB,EAAA2E,EAAAoM,EAAA7F,OAKA6C,MAAAvL,EAAApC,EAAAqC,cAAA,OAAoCjH,OAAS,EAAA0P,WAAmBhM,EAAA,cAGrF2uB,EAAAgC,GAAA7d,SACAjK,KAAAyC,UACAqjB,WAGA9lB,KAAAqV,eAAA,EAAAvL,EAAAie,EAAAD,KACA,MAAAE,WAAmBA,GAAahoB,KAAAE,MAChC,IAAA4lB,EAWA,IAVA,IAAAgC,EACAhC,EAAA9lB,KAAAV,MAAAwmB,KAAA7xB,IAAAg0B,IACAA,EAAAC,SAAAH,EACAE,KAIAnC,MAAA9lB,KAAAV,MAAAwmB,OACAgC,GAAAI,SAAAH,EAEAC,EAAA,CACA,MAAAG,KACA,UAAAF,KAAAnC,EACAmC,EAAAC,UAAAD,EAAAhwB,OAAAgwB,EAAAtB,QACAwB,EAAA7jB,KAAA2jB,EAAAhwB,MAGA+vB,EAAAG,GAEAnoB,KAAAyC,UAA2BqjB,WAE3B9lB,KAAAooB,aAAA,EAAAte,EAAA3G,EAAA/K,KACA,MAAAiwB,OAAmBA,GAASroB,KAAAE,OAC5B2lB,QAAmBA,GAAU7lB,KAAAV,MAC7B+oB,GAGAA,EAFAxC,EAAA1iB,EAAA,GAAA+iB,QACA9tB,IAAAmvB,EAAA,EAAAC,OAIAxnB,KAAA6nB,iBAAA7nB,KAAA6nB,iBAAApP,KAAAzY,MACAA,KAAAqV,eAAArV,KAAAqV,eAAAoD,KAAAzY,MACAA,KAAAooB,aAAApoB,KAAAooB,aAAA3P,KAAAzY,MAEAH,oBACAG,KAAAqC,YAEAxC,mBAAAsF,GACA,MAAA6D,MAAeA,EAAAzV,UAAgByM,KAAAE,MAC/BooB,EAAA/0B,KAAAkJ,KAAAkC,KAAAC,UAAArL,EAAAkJ,MAAA,GACA8rB,EAAApjB,EAAA5R,QAAA4R,EAAA5R,OAAAkJ,KACAkC,KAAAC,UAAAuG,EAAA5R,OAAAkJ,MACA,GACA3N,OAAA8nB,EAAA,EAAA9nB,CAAAqW,EAAA6D,SAAAla,OAAA8nB,EAAA,EAAA9nB,CAAAka,IACAuf,IAAAD,GACAtoB,KAAAqC,YAGAxC,SACA,MAAAgmB,QAAeA,EAAAC,QAAgB9lB,KAAAV,MAC/B,OAAA7E,EAAApC,EAAAqC,cAAAD,EAAApC,EAAAoY,SAAA,KACAhW,EAAApC,EAAAqC,cAAA6sB,EAAA,GAAwC5c,aAAA,gBAAA8b,MAAAZ,EAAAlrB,UAAA4nB,GAAAiG,WAAAxoB,KAAA6nB,iBAAA/B,OAAAc,OAAA5mB,KAAAsnB,YAAAhb,SAAAtM,KAAAqV,eAAAgT,OAAAroB,KAAAooB,aAAAK,eAAA,YACxChuB,EAAApC,EAAAqC,cAAAguB,EAAA,QACAjuB,EAAApC,EAAAqC,cAAAiuB,EAAA,SACApY,QAAA,IAAAuV,EAAAtxB,SAAAiG,EAAApC,EAAAqC,cAAA,OAAuEC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAkzB,GAAAC,aAAoCjiB,KAAA6mB,8CC9Q3G,MAAAje,KACKxT,MAAA,UAAA7F,MAAA,YACA6F,MAAA,UAAA7F,MAAA,YACA6F,MAAA,SAAA7F,MAAA,WACA6F,MAAA,MAAA7F,MAAA,QAELq5B,GAAA,MAiBA,MAAAC,GAAA/5B,OAAAuQ,EAAA,EAAAvQ,CAAAwQ,IACA,MAAAqX,EAAA7nB,OAAA8nB,EAAA,EAAA9nB,EACA0a,QACAqN,WAAA,UACAC,iBAAA,QACAC,kBAAA,KAKA,OACAJ,cACApjB,OAJA0jB,EAAA,EAAAC,aAAA5X,EAAAspB,GAAAjS,GAKAQ,kBAJAF,EAAA,EAAAG,wBAAA9X,EAAAspB,GAAAjS,MAOAmS,IACAxR,YAAAL,EAAA,EAAAK,aAEAyR,GAAAj6B,OAAA0Q,EAAA,EAAA1Q,UAAA2Q,EAAA,QAAA3Q,CAAA+5B,GAAAC,GAAAh6B,eAnCA2L,EAAApC,EAAAuH,UACAC,oBACA,MAAAyX,YAAeA,EAAAX,eAA2B3W,KAAAE,MAC1CoX,EAAAsR,GAAAjS,GAEA9W,mBAAAsF,EAAAoE,GACA,MAAA+N,YAAeA,EAAAtO,QAAA2N,eAAkC3W,KAAAE,MACjD8I,IAAAla,OAAA+e,GAAA,EAAA/e,CAAAka,EAAA7D,EAAA6D,QACAsO,EAAAsR,GAAAjS,GAGA9W,SACA,MAAAmpB,WAAeA,EAAApsB,UAAA2Q,mBAAAK,kBAAAnC,gBAAA/B,kBAAA8E,aAAAxF,QAAAzV,UAAqHyM,KAAAE,MACpI,OAAAzF,EAAApC,EAAAqC,cAAAuuB,GAAA,GAAyDrgB,mBAAAogB,aAAApsB,UAAA2Q,mBAAAK,kBAAAnC,gBAAA/B,kBAAA8E,aAAAxF,QAAAzV,eCTzD21B,GAAA,OACAC,IACAxQ,MAAA,OACAnP,QACAzN,MAAA,GACAhG,OAAA,EACA8gB,WAAA,UACAC,iBAAA,QACAC,kBAAA,GAEA9N,aACAoP,UACAxa,QAAA,KAEAgf,UACAphB,KAAA,SAGA2tB,GAAA,OAgOA,MAAAC,GAAAv6B,OAAAuQ,EAAA,EAAAvQ,CAAA,CAAAwQ,EAAAY,KACA,MAAAgY,EAAAppB,OAAA8nB,EAAA,EAAA9nB,CAAAqpB,SAAAC,QACApP,GACA2P,MAAA,OACAnP,OAAA1a,OAAAgK,UAAgCqwB,GAAA3f,OAAA0O,EAAA1O,QAChCP,UAAAiP,EAAAjP,WAAAkgB,GAAAlgB,UACAoP,SAAAH,EAAAG,UAAA8Q,GAAA9Q,SACAwE,SAAA3E,EAAA2E,UAAAsM,GAAAtM,UAEAlG,EAAA7nB,OAAA8nB,EAAA,EAAA9nB,CAAAka,GACAzV,EAAA0jB,EAAA,EAAAC,aAAA5X,EAAA4pB,GAAAvS,GACAmC,EAAA7B,EAAA,EAAA8B,kBAAAzZ,EAAA4pB,GAAAvS,GACAQ,EAAAF,EAAA,EAAAG,wBAAA9X,EAAA4pB,GAAAvS,GACAqC,EAAAlqB,OAAAmqB,EAAA,EAAAnqB,CAAAoqB,EAAA,GAIA,OACAxmB,UAJAwmB,EAAA,EAAAC,gBAAA7Z,EAAA,MAAA0Z,GAKAI,eAJAF,EAAA,EAAAG,qBAAA/Z,EAAA,MAAA0Z,GAKAM,qBAJAJ,EAAA,EAAAK,2BAAAja,EAAA,MAAA0Z,GAKAhQ,QACA2N,cACApjB,SACAulB,cACA3B,uBAGAmS,IACAhS,YAAAL,EAAA,EAAAK,aAEAzoB,EAAA,EAAAC,OAAA0Q,EAAA,EAAA1Q,EAAA,CAAAA,OAAA2Q,EAAA,QAAA3Q,CAAAu6B,GAAAC,GAAAx6B,eA9PA2L,EAAApC,EAAAuH,UACAC,YAAA2X,EAAAC,GACA3X,MAAA0X,EAAAC,GACAzX,KAAAmI,cACA0d,WACAhF,mBAAA,EACAiF,QACAqC,kBAEAnoB,KAAAV,MAAAxQ,OAAAgK,UAAqCkH,KAAAmI,cACrCnI,KAAAihB,eAAA,CAAAltB,IACA,MAAA8sB,kBAAmBA,EAAAsH,iBAAmCnoB,KAAAV,OACtD0J,MAAmBA,GAAQhJ,KAAAE,MAC3B6lB,EAAAj3B,OAAA6O,EAAA,EAAA7O,CAAAka,EAAAqP,UACA2N,EAAAhmB,KAAAimB,mBACA,OAAAxrB,EAAApC,EAAAqC,cAAA8hB,IAAsDE,WAAAyL,EAAA3zB,SAAAT,EAAAS,OAAAoI,QAAAopB,KAAwFoD,KAASpD,IAAcD,EAAA9b,OAAA4W,EAAAltB,MAAAw0B,EAAAxN,QAAA3a,KAAAkhB,uBAAAlY,YAErKhJ,KAAAimB,iBAAA,MACA,MAAAjd,MAAmBA,GAAQhJ,KAAAE,MAC3B,IAAAqpB,EACA,UAAA3sB,KAAA9N,OAAAoa,KAAAF,EAAAqP,UAAA,CACA,MAAAsL,EAAA/mB,EAAAkM,QAAAsgB,IACA,QAAAzF,EAAA,CACA4F,EAAA3sB,EAAAwM,UAAAua,EAAAyF,GAAA50B,QACA,OAGA,OAAA+0B,IAEAvpB,KAAAwpB,cAAA,EAAAC,GAAA,KACA,MAAAl2B,OAAmBA,GAASyM,KAAAE,MAC5BzI,EAAAlE,KAAAif,KAAAjf,EAAAif,KAAA/a,MAAA,EACAsE,EAAAxI,KAAAif,MAAAjf,EAAAif,KAAAhJ,QAAAjW,EAAAif,KAAAhJ,OAAAzN,MACAxI,EAAAif,KAAAhJ,OAAAzN,MACAotB,GAAA3f,OAAAzN,MAIA2tB,GAHAn2B,KAAAif,MAAAjf,EAAAif,KAAAhJ,QAAAjW,EAAAif,KAAAhJ,OAAAzT,OACAxC,EAAAif,KAAAhJ,OAAAzT,OACAozB,GAAA3f,OAAAzT,QACAgG,EAAA,EACA,OAAAtB,EAAApC,EAAAqC,cAAAivB,EAAA,GAAqDC,WAAA,EAAAC,UAAApyB,EAAAqyB,gBAAA9pB,KAAA+pB,oBAAAC,UAAAhqB,KAAAiqB,cAAAP,OAAAQ,QAAAnuB,EAAAoP,QAAAse,EAAAE,EAAA,EAAAvH,OAAAuH,EAAA,EAAAQ,IAAAC,SAAA,+CAErDpqB,KAAAqqB,SAAA,MACA,MAAArhB,MAAmBA,EAAAzV,UAAgByM,KAAAE,MACnC6lB,EAAAj3B,OAAA6O,EAAA,EAAA7O,CAAAka,EAAAqP,UACA2N,EAAAhmB,KAAAimB,mBACA,OAAAxrB,EAAApC,EAAAqC,cAAAkrB,IAAuDhpB,QAAAopB,KAA6BoD,KAASpD,IAAcD,EAAAiC,WAAAhoB,KAAAsqB,eAAAjC,OAAAroB,KAAAuqB,WAAAvhB,QAAAzV,aAE3GyM,KAAAwqB,WAAA,MACA,MAAArC,cAAmBA,GAAgBnoB,KAAAV,OACnC0J,MAAmBA,EAAAzV,SAAA4D,KAAmB6I,KAAAE,MACtC6lB,EAAAj3B,OAAA6O,EAAA,EAAA7O,CAAAka,EAAAqP,UACA2N,EAAAhmB,KAAAimB,mBACA,OAAAxrB,EAAApC,EAAAqC,cAAAquB,IAAyDC,WAAA7xB,EAAA,2BAAAyF,QAAAopB,KAAuEoD,KAASpD,IAAcD,EAAAxY,iBAAA,IAAA4a,EAAA3zB,OAAAoZ,gBAAA5N,KAAAyhB,sBAAAhW,cAAAzL,KAAAyqB,kBAAA/gB,gBAAA1J,KAAA0qB,oBAAAlc,WAAAxO,KAAAwpB,gBAAAxgB,QAAAzV,aAEvJyM,KAAAkhB,uBAAA,CAAAjX,IACAjK,KAAAyC,UAA2Boe,kBAAA5W,MAE3BjK,KAAAyhB,sBAAA,MACAzhB,KAAAyC,UAA2Boe,mBAAA,MAE3B7gB,KAAAyqB,kBAAA,EAAAnhB,EAAAqhB,KACA,MAAApV,QAAmBA,EAAAvM,SAAiBhJ,KAAAE,MACpCyc,EAAA7tB,OAAAgK,UAA6C6F,KAAAie,MAAAje,KAAAC,UAAAoK,KAE7C,SAAA2hB,GAAA,MAAAhO,EAAAtE,SAAA/O,GACA,OAEA,GAAAqT,EAAA1T,UAAAK,GAAA,CACA,IAAAshB,GAAA,EACA,MAAAviB,EAAAsU,EAAA1T,UAAAK,GACA,GAAA9M,MAAA2M,QAAAd,IAIA,UAAAmB,KAAAnB,EACA,GAAAmB,IAAAmhB,EAAA,CACAC,GAAA,EACA,YANAA,EAAAD,IAAAhO,EAAA1T,UAAAK,GAUAshB,IACAjO,EAAA1T,UAAAK,IACAqT,EAAA1T,UAAAK,GACAqhB,SAKAhO,EAAA1T,UAAAK,IAAAqhB,GAEA,MAAAE,EAAA7qB,KAAA8qB,iBAAAnO,GAAA,GACApH,EAAAC,QAAAqV,KAEA7qB,KAAA0qB,oBAAA,EAAAphB,EAAAqhB,KACA,MAAApV,QAAmBA,EAAAvM,SAAiBhJ,KAAAE,MACpCyc,EAAA7tB,OAAAgK,UAA6C6F,KAAAie,MAAAje,KAAAC,UAAAoK,KAC7C,UAAAM,EACAqT,EAAA1T,eAAA7C,OAEA,UAAAukB,EACAhO,EAAA1T,UAAAK,QAAAlD,OAEA,GAAA5J,MAAA2M,QAAAwT,EAAA1T,UAAAK,IAAA,CACA,MAAAnG,EAAAwZ,EAAA1T,UAAAK,GAAAR,QAAA6hB,GACAxnB,GAAA,IACAwZ,EAAA1T,UAAAK,OACAN,EAAAC,UAAAK,GAAA4K,MAAA,EAAA/Q,MACA6F,EAAAC,UAAAK,GAAA4K,MAAA/Q,EAAA,UAKAwZ,EAAA1T,UAAAK,QAAAlD,EAEA,MAAAykB,EAAA7qB,KAAA8qB,iBAAAnO,GAAA,GACApH,EAAAC,QAAAqV,KAEA7qB,KAAA4X,mBAAAhb,KACA,MAAA2Y,QAAmBA,EAAAvM,SAAiBhJ,KAAAE,MACpC6qB,EAAAnuB,EACA+f,EAAA7tB,OAAAgK,UAA6C6F,KAAAie,MAAAje,KAAAC,UAAAoK,KAAsCC,eAAA7C,EAAAiS,UACnFxY,CAAAkrB,GAAA,KACiBlO,UAAaphB,KAAA,UAC9B8Z,EAAAC,QAAAxV,KAAA8qB,iBAAAnO,GAAA,IACA3c,KAAAyC,UAA2B0lB,qBAE3BnoB,KAAA+pB,oBAAA,EAAAiB,EAAAd,KACA,MAAA3U,QAAmBA,EAAAvM,SAAiBhJ,KAAAE,MACpCyc,EAAA7tB,OAAAgK,UAA6C6F,KAAAie,MAAAje,KAAAC,UAAAoK,KAC7C2T,EAAAnT,OAAA1a,OAAAgK,UAA8CkQ,EAAAQ,QAAiBzN,MAAAmuB,IAC/D,MAAAW,EAAA7qB,KAAA8qB,iBAAAnO,GAAA,GACApH,EAAAC,QAAAqV,KAEA7qB,KAAAsqB,eAAA,CAAAnC,IACAnoB,KAAAyC,UAA2B0lB,oBAE3BnoB,KAAAiqB,cAAA,EAAAngB,EAAAmhB,KACA,MAAA1V,QAAmBA,EAAAvM,QAAAzV,UAAyByM,KAAAE,MAC5CnE,EAAAxI,KAAAif,MAAAjf,EAAAif,KAAAhJ,QAAAjW,EAAAif,KAAAhJ,OAAAzN,MACAxI,EAAAif,KAAAhJ,OAAAzN,MACAotB,GAAA3f,OAAAzN,MACAhG,EAAAk1B,EAAAlvB,IACA4gB,EAAA7tB,OAAAgK,UAA6C6F,KAAAie,MAAAje,KAAAC,UAAAoK,KAC7C2T,EAAAnT,OAAA1a,OAAAgK,UAA8CkQ,EAAAQ,QAAiBzT,WAC/D,MAAA80B,EAAA7qB,KAAA8qB,iBAAAnO,GACApH,EAAAC,QAAAqV,KAEA7qB,KAAAuqB,WAAA,EAAAW,EAAAC,KACA,MAAA5V,QAAmBA,EAAAvM,SAAiBhJ,KAAAE,MACpCyc,EAAA7tB,OAAAgK,UAA6C6F,KAAAie,MAAAje,KAAAC,UAAAoK,KAC7C2T,EAAAE,YACAF,EAAAE,SAAAqO,GAAAC,EAAA,aACA,MAAAN,EAAA7qB,KAAA8qB,iBAAAnO,GACApH,EAAAC,QAAAqV,KAEA7qB,KAAAorB,aAAA,MACA,MAAApiB,MAAmBA,EAAAmP,WAAAb,cAAA/B,UAAAoB,eAAqD3W,KAAAE,MACxEiY,EAAAC,OAQAd,EAAA4R,GAAAvS,GAPApB,EAAAC,QAAAxV,KAAA8qB,kBACA7hB,UAAAD,EAAAC,UACAoP,SAAArP,EAAAqP,SACAwE,UAA+BphB,KAAA,aAO/BuE,KAAAkhB,uBAAAlhB,KAAAkhB,uBAAAzI,KAAAzY,MACAA,KAAAyhB,sBAAAzhB,KAAAyhB,sBAAAhJ,KAAAzY,MACAA,KAAAyqB,kBAAAzqB,KAAAyqB,kBAAAhS,KAAAzY,MACAA,KAAA0qB,oBAAA1qB,KAAA0qB,oBAAAjS,KAAAzY,MACAA,KAAA+pB,oBAAA/pB,KAAA+pB,oBAAAtR,KAAAzY,MACAA,KAAAsqB,eAAAtqB,KAAAsqB,eAAA7R,KAAAzY,MACAA,KAAAiqB,cAAAjqB,KAAAiqB,cAAAxR,KAAAzY,MACAA,KAAAuqB,WAAAvqB,KAAAuqB,WAAA9R,KAAAzY,MAEAH,oBACAG,KAAAorB,eAEAvrB,mBAAAsF,EAAAoE,GACA,MAAA4O,SAAeA,EAAA5kB,SAAAulB,cAAAnC,eAA6C3W,KAAAE,OAC5DioB,cAAeA,GAAgBnoB,KAAAV,MAC/Bqd,EAAAxX,EAAAwR,gBACA0U,GAAA93B,IAAAulB,EACAwS,GAAAnT,EAAAC,OACAmT,EAAAhiB,EAAA4e,mBACAxL,GAAA0O,GAAAC,GAAAC,IACAvrB,KAAAorB,eAGAvrB,iBAAAmJ,EAAAwiB,GAAA,GAKA,OAHAA,IACAxiB,EAAAQ,OAAA1a,OAAAgK,UAA2CkQ,EAAAQ,QAAiBzT,OAAAozB,GAAA3f,OAAAzT,kBAErCjH,OAAA8nB,EAAA,EAAA9nB,CAAAka,KAEvBnJ,SACA,MAAAnN,UAAeA,EAAA0mB,iBAAAE,uBAAAtQ,QAAAzV,SAAAulB,eAA+E9Y,KAAAE,MAC9F6lB,EAAAj3B,OAAA6O,EAAA,EAAA7O,CAAAka,EAAAqP,UACAkR,EAAAvpB,KAAAimB,mBACAlyB,EAAAjF,OAAA6O,EAAA,EAAA7O,EACAyE,SACAK,MAAA21B,GAAAxD,IAEA/J,EAAA5C,GAAAN,EACA2S,EAAA,IAAAnS,EACAoS,OAAAtlB,IAAA1T,QACA0T,IAAA1T,EAAA8f,MACA,IAAA9f,EAAA8f,KAAA/a,OACA,IAAA6hB,EACA,OAAA7e,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAA4b,aAC5Crb,EAAApC,EAAAqC,cAAA+e,GAAgD7c,QAAAmpB,EAAArM,iBAAA1Z,KAAA4X,qBAChDrH,QAAAyL,GAAAvhB,EAAApC,EAAAqC,cAAAixB,EAAA,GAA+D3P,UAAezL,QAAAmb,GAAAjxB,EAAApC,EAAAqC,cAAAkxB,EAAA,QAAArb,QAAAkb,GAAAhxB,EAAApC,EAAAqC,cAAAmxB,EAAA,QAAApxB,EAAApC,EAAAqC,cAAA,OAA0KC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAA6b,UACxP/V,KAAAwqB,aACAxqB,KAAAihB,eAAAltB,GACA0G,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAA+b,iBAAwCjW,KAAAqqB,YACpF5vB,EAAApC,EAAAqC,cAAA,OAA4CC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAA8b,sBAC5Cvb,EAAApC,EAAAqC,cAAA,OAAgDC,UAAA7L,OAAAqL,EAAA,EAAArL,CAAAoL,EAAAsU,aAAoCxO,KAAAwpB,eAAA","file":"82192c2aae558eac08a6.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport AwsDetails from './awsDetails';\nexport default hot(module)(AwsDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getNoDataForDateRangeString(key = 'no_data_for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarGroup, DataToolbarItem, DataToolbarToggleGroup, } from '@patternfly/react-core/dist/esm/experimental';\nimport { ExternalLinkSquareAltIcon, FilterIcon, SearchIcon, } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsDataToolbar.styles';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nconst defaultFilters = {\n    tag: {},\n};\nexport class DetailsDataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isCategoryDropdownOpen: false,\n            isTagKeyDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy } = this.props;\n            for (const option of categoryOptions) {\n                if (groupBy === option.value ||\n                    (groupBy.indexOf(tagKey) !== -1 && option.value === 'tag')) {\n                    return option.value;\n                }\n            }\n            return undefined;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key])\n                        ? [...query.filter_by[key]]\n                        : [query.filter_by[key]];\n                    if (key.indexOf(tagKey) !== -1) {\n                        filters.tag[key.substring(tagKey.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, id) => {\n            if (type) {\n                // Workaround for https://github.com/patternfly/patternfly-react/issues/3552\n                // This prevents us from using an ID\n                const filterType = type.toLowerCase();\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType]\n                        ? `${tagKey}${filterType}`\n                        : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        this.onCategoryClick = value => {\n            this.setState({\n                currentCategory: value,\n            });\n        };\n        this.onCategorySelect = event => {\n            this.setState({\n                categoryInput: '',\n                currentTagKey: undefined,\n                isCategoryDropdownOpen: !this.state.isCategoryDropdownOpen,\n            });\n        };\n        this.onCategoryToggle = isOpen => {\n            this.setState({\n                isCategoryDropdownOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = categoryOption => {\n            const { t } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            return (React.createElement(DataToolbarFilter, { categoryName: t(`filter_by.values.${categoryOption.label}`), chips: filters[categoryOption.value], deleteChip: this.onDelete, key: categoryOption.value, showToolbarItem: currentCategory !== 'tag' && currentCategory === categoryOption.value },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { name: `${categoryOption.value}-input`, id: `${categoryOption.value}-input`, type: \"search\", \"aria-label\": t(`filter_by.${categoryOption.value}_input_aria_label`), onChange: this.onCategoryInputChange, value: categoryInput, placeholder: t(`filter_by.${categoryOption.value}_placeholder`), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.value) }),\n                    React.createElement(Button, { variant: ButtonVariant.control, \"aria-label\": t(`filter_by.${categoryOption.value}_button_aria_label`), onClick: evt => this.onCategoryInput(evt, categoryOption.value) },\n                        React.createElement(SearchIcon, null)))));\n        };\n        this.onCategoryInputChange = value => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if (event.key && event.key !== 'Enter') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign({}, prevState.filters, { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, categoryInput]\n                                : [categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded, } = this.state;\n            if (currentCategory !== 'tag') {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(Select, { variant: SelectVariant.typeahead, \"aria-label\": t('filter_by.tag_key_aria_label'), onClear: this.onTagKeyClear, onToggle: this.onTagKeyToggle, onSelect: this.onTagKeySelect, isExpanded: isTagKeySelectExpanded, placeholderText: t('filter_by.tag_key_placeholder'), selections: currentTagKey }, selectOptions));\n        };\n        this.onTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.onTagKeySelect = (event, selection, isPlaceholder) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.onTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = tagKeyOption => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, filters, isTagValueSelectExpanded, } = this.state;\n            const selectOptions = this.getTagValueOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            // Width prop is a workaround for https://github.com/patternfly/patternfly-react/issues/3574\n            return (React.createElement(DataToolbarFilter, { categoryName: tagKeyOption.value, chips: filters.tag[tagKeyOption.value], deleteChip: this.onDelete, key: tagKeyOption.value, showToolbarItem: currentCategory === 'tag' && currentTagKey === tagKeyOption.value },\n                React.createElement(Select, { variant: SelectVariant.checkbox, \"aria-label\": t('filter_by.tag_value_aria_label'), onToggle: this.onTagValueToggle, onSelect: this.onTagValueSelect, selections: filters.tag[tagKeyOption.value]\n                        ? filters.tag[tagKeyOption.value]\n                        : [], isExpanded: isTagValueSelectExpanded, placeholderText: t('filter_by.tag_value_placeholder'), width: 200 }, selectOptions)));\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey]\n                    ? prevState.filters.tag[currentTagKey]\n                    : [];\n                return {\n                    filters: Object.assign({}, prevState.filters, { tag: Object.assign({}, prevState.filters.tag, { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagKey}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueSelectExpanded: isOpen,\n            });\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isExportDisabled, t } = this.props;\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                    React.createElement(\"span\", { className: css(styles.export) }, t('export.export')),\n                    React.createElement(ExternalLinkSquareAltIcon, null))));\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (report && !isEqual(report, prevProps.report))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return prevProps.groupBy !== groupBy\n                    ? {\n                        currentCategory: this.getDefaultCategory(),\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category dropdown\n    getCategoryDropdown() {\n        const { categoryOptions, t } = this.props;\n        const { currentCategory, isCategoryDropdownOpen } = this.state;\n        const index = currentCategory ? currentCategory.indexOf('tag') : -1;\n        const label = index !== -1\n            ? t('filter_by.values.tag')\n            : t(`filter_by.values.${currentCategory}`);\n        return (React.createElement(DataToolbarItem, null,\n            React.createElement(Dropdown, { onSelect: this.onCategorySelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { onToggle: this.onCategoryToggle, style: { width: '100%' } },\n                    React.createElement(FilterIcon, null),\n                    \" \",\n                    label), isOpen: isCategoryDropdownOpen, dropdownItems: categoryOptions &&\n                    categoryOptions.map(option => (React.createElement(DropdownItem, { key: option.value, onClick: () => this.onCategoryClick(option.value) }, t(`filter_by.values.${option.label}`)))), style: { width: '100%' } })));\n    }\n    getTagKeyOptions() {\n        const { report } = this.props;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            options = data.map(tag => {\n                return {\n                    value: tag.key,\n                };\n            });\n        }\n        return options;\n    }\n    getTagValueOptions() {\n        const { report } = this.props;\n        const { currentTagKey } = this.state;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (currentTagKey === tag.key) {\n                    options = tag.values.map(val => {\n                        return {\n                            value: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, pagination } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(DataToolbar, { id: \"details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(DataToolbarContent, null,\n                    React.createElement(DataToolbarToggleGroup, { toggleIcon: React.createElement(FilterIcon, null), breakpoint: \"xl\" },\n                        React.createElement(DataToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategoryDropdown(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            categoryOptions &&\n                                categoryOptions\n                                    .filter(option => option.value !== 'tag')\n                                    .map(option => this.getCategoryInput(option))),\n                        React.createElement(DataToolbarGroup, null, this.getExportButton())),\n                    React.createElement(DataToolbarItem, { variant: \"pagination\", breakpointMods: [{ modifier: 'align-right' }] }, pagination)))));\n    }\n}\nconst DetailsDataToolbar = translate()(connect()(DetailsDataToolbarBase));\nexport { DetailsDataToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { Nav, NavItem, NavList, NavVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem }, this.getNavItemTitle(navItem)));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    awsDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { parseQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAwsReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            currentItem: this.props.groupBy || 'account',\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag_key', { value: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'account';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, groupBy, queryString } = this.props;\n        if (prevProps.queryString !== queryString ||\n            prevProps.groupBy !== groupBy) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag_key', { value: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('navigation.cloud_details')),\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"aws\" /* aws */ })),\n                Boolean(showContent) && (React.createElement(GroupBy, { groupBy: groupBy, onItemClicked: onGroupByClicked }))),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('aws_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('aws_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AwsReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsExportActions, awsExportSelectors } from 'store/awsExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: awsExportSelectors.selectExportError(state),\n        export: awsExportSelectors.selectExport(state),\n        fetchStatus: awsExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: awsExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAwsReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as awsReportsActions from 'store/awsReports/awsReportsActions';\nimport * as awsReportsSelectors from 'store/awsReports/awsReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAwsReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAwsReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAwsReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAwsReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAwsReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAwsReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('aws_details.historical.cost_title'), xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('aws_details.historical.instance_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('aws_details.historical.storage_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = awsReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = awsReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = awsReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = awsReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"account\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('aws_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'account', onClick: this.handleWidgetModalOpen }, t('aws_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'account', onClick: this.handleTagModalOpen }, t('aws_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('aws_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('aws_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAwsReportItems } from 'utils/getComputedAwsReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAwsReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */ ? reportItem.cost : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('aws_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('aws_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'account') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('aws_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/awsQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString, getNoDataForDateRangeString, } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById === 'account' ? 'account_alias' : groupById,\n                        title: t('aws_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAwsReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.deltaPercent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/awsQuery';\nimport { DetailsDataToolbar } from 'components/details/detailsDataToolbar';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { isEqual } from 'utils/equal';\nconst categoryOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n    { label: 'tag', value: 'tag' },\n];\nconst reportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { fetchReport, query, queryString } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { exportText, groupBy, isExportDisabled, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, report, } = this.props;\n        return (React.createElement(DetailsDataToolbar, { categoryOptions: categoryOptions, exportText: exportText, groupBy: groupBy, isExportDisabled: isExportDisabled, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, report: report }));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsToolbar = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase));\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { exportText: t('aws_details.export_link'), groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[filterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[filterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[filterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[filterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[filterType] = [\n                        newQuery.filter_by[filterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            if (filterType === null) {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (filterValue === null) {\n                newQuery.filter_by[filterType] = undefined; // Clear all values\n            }\n            else if (Array.isArray(newQuery.filter_by[filterType])) {\n                const index = newQuery.filter_by[filterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[filterType] = [\n                        ...query.filter_by[filterType].slice(0, index),\n                        ...query.filter_by[filterType].slice(index + 1),\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = undefined;\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/aws?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAwsReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.awsDetails) },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n"],"sourceRoot":""}