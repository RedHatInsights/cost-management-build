{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartLabelTooltip/chartLabelTooltip.tsx","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpOnAwsReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummary.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummary.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItem.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItems.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryUsage.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/pages/awsDashboard/awsDashboardWidget.styles.ts","webpack:///./src/pages/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/azureDashboard/azureDashboardWidget.styles.ts","webpack:///./src/pages/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/pages/azureDashboard/azureDashboard.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboardWidget.styles.ts","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboardWidget.tsx","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/pages/overview/index.ts"],"names":["unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","Object","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpOnAwsReport","utils_getComputedOcpOnAwsReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getDateRangeString","i18next__WEBPACK_IMPORTED_MODULE_5__","t","count","endDate","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getMonthRangeString","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","getTooltipLabel","formatOptions","toString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","__webpack_exports__","__rest","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","ChartLabelTooltip","_a","content","props","react_default","createElement","Tooltip","enableFlip","ChartLabel","assign","LAYOUT_PROPS","padding","theme_koku","area","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpOnAwsReportItems","getUnsortedComputedOcpOnAwsReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","account","instance_type","region","service","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","styles","StyleSheet","create","container","display","justifyContent","height","marginTop","LoadingState","es","icon","binoculars_icon","title","subTitle","className","EmptyState","EmptyStateIcon","Title","size","EmptyStateBody","ErrorState","error","error_circle_o_icon","response","status","ban_icon","fontSize","esm","EmptyValueState","minus_icon","viewSources","mapStateToProps","common","state","NoProvidersState","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","Link","to","dollar_sign_icon","chartStyles","colorScale","labels","fontFamily","minWidth","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","width","initDatum","currentData","previousData","legendData","chartUtils","push","symbol","setState","charts","show","onClick","handleCostLegendClick","newDatum","index","handleResize","current","clientWidth","getChart","ChartArea","interpolation","getLegend","eventHandlers","target","mutation","ChartLegend","events","gutter","labelComponent","chartLabelTooltip","getLegendTooltip","orientation","formatDatumValue","formatDatumOptions","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","result","trim","containerHeight","ChartVoronoiContainer","voronoiDimension","getDomain","getEndDate","midDate","floor","legendVisible","isLegendVisible","ref","Chart","containerComponent","legendComponent","undefined","legendPosition","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendColorScale","handleLegendClick","legendItemsPerRow","responsive","childName","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AzureReportSummary","children","detailsLink","subTitleTooltip","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","azureReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AzureReportSummaryAlt","tabs","Grid","GridItem","lg","xl","azureReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","AzureReportSummaryDetails","costLabel","reportType","showUnits","usageLabel","emptyValueState","meta","total","usageUnits","unitsLabel","utils_formatValue","azureReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AzureReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AzureReportSummaryItem","azureReportSummaryItems_styles_styles","skeleton","AzureReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","azureReportSummaryTrend_styles_styles","AzureReportSummaryTrend","trendChart","AwsReportSummary","awsReportSummaryAlt_styles_styles","AwsReportSummaryAlt","awsReportSummaryDetails_styles_styles","AwsReportSummaryDetails","awsReportSummaryItem_styles_styles","AwsReportSummaryItemBase","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","AwsReportSummaryItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","OcpOnAwsReportSummary","ocpOnAwsReportSummaryAlt_styles_styles","OcpOnAwsReportSummaryAlt","ocpOnAwsReportSummaryDetails_styles_styles","marginLeft","titleContainer","usageText","usageValue","OcpOnAwsReportSummaryDetails","requestLabel","awsReportType","ocpOnAwsReportSummaryItem_styles_styles","OcpOnAwsReportSummaryItemBase","OcpOnAwsReportSummaryItem","ocpOnAwsReportSummaryItems_styles_styles","OcpOnAwsReportSummaryItems","ocpOnAwsReportSummaryTrend_styles_styles","OcpOnAwsReportSummaryTrend","OcpOnAwsReportSummaryUsage","usageChart","OcpReportSummary","ocpReportSummaryAlt_styles_styles","OcpReportSummaryAlt","ocpReportSummaryDetails_styles_styles","OcpReportSummaryDetails","requestValue","ocpReportSummaryItem_styles_styles","OcpReportSummaryItemBase","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","OcpReportSummaryItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","tabItems","getIdKeyForTab","tab","widgetId","widget","awsDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","previous","tabsQuery","currentReport","awsReports","selectReport","currentReportFetchStatus","selectReportFetchStatus","previousReport","tabsReport","tabsReportFetchStatus","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","AwsDashboardWidget","activeTabKey","buildDetailsLink","currentTab","awsQuery","group_by","order_by","trend","getUnits","awsReportSummary","titleKey","getDetails","getDetailsLabel","costKey","usageKey","getDetailsLink","isDetailsLink","handleInsightsNavClick","getDetailsLinkTitle","getHorizontalLayout","getSubTitle","getSubTitleTooltip","getTabs","getTitle","get_month_default","format_default","start_of_month_default","get_year_default","getTab","Tab","eventKey","getTabTitle","getTabItem","availableTabs","topItems","activeTab","isCostReport","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","insights","chrome","appNavClick","secondaryNav","event","tabIndex","isHorizontal","awsDashboard_mapStateToProps","selectWidgets","widgets","selectCurrentWidgets","awsDashboard_awsDashboard","xl2","azureDashboardWidget_styles_chartStyles","azureDashboardWidget_styles_styles","azureDashboardWidget_getIdKeyForTab","azureDashboardWidget_mapStateToProps","azureDashboard","azureReports","azureDashboardWidget_mapDispatchToProps","AzureDashboardWidget","azureQuery","azureReportSummary","azureDashboard_mapStateToProps","azureDashboard_azureDashboard","ocpDashboardWidget_styles_chartStyles","containerUsageHeight","ocpDashboardWidget_styles_styles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpReports","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpQuery","currentInfrastructureData","previousInfrastructureData","ocpReportSummary","requestKey","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","ocpOnAwsDashboardWidget_styles_chartStyles","ocpOnAwsDashboardWidget_styles_styles","ocpOnAwsDashboardWidget_getIdKeyForTab","ocpOnAwsDashboardWidget_mapStateToProps","ocpOnAwsDashboard","ocpOnAwsReports","ocpOnAwsDashboardWidget_mapDispatchToProps","OcpOnAwsDashboardWidget","ocpOnAwsQuery","ocpOnAwsReportSummary","ocpOnAwsDashboard_mapStateToProps","ocpOnAwsDashboard_ocpOnAwsDashboard","overview_styles_styles","info","verticalAlign","infoIcon","infoTitle","fontWeight","headerOverride","index_esm","overview_getIdKeyForTab","overview_mapStateToProps","awsProvidersQueryString","providersQuery","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","azureProvidersQueryString","azureProviders","azureProvidersError","azureProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","Overview","showPopover","getAvailableTabs","contentRef","tabContentId","tabContentRef","getTabContent","val","TabContent","handlePopoverClick","isLoading","noAwsProviders","noAzureProviders","noOcpProviders","noProviders","showTabs","sizes","Popover","aria-label","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_overview__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"0c04c891e2e681827a99.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpOnAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpOnAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const test = i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n    return test;\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nconst ChartLabelTooltip = (_a) => {\n    var { content } = _a, props = __rest(_a, [\"content\"]);\n    return (React.createElement(Tooltip, { content: content(props.datum), enableFlip: true },\n        React.createElement(ChartLabel, Object.assign({}, props))));\n};\nexport { ChartLabelTooltip };\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage ? value.usage.units : value.cost.units;\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpOnAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage ? value.usage.units : value.cost.units;\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage ? value.usage.units : value.cost.units,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage ? value.usage.units : value.cost.units,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BinocularsIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(EmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BanIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error && error.response && error.response.status === 401) {\n        icon = BanIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            this.setState({\n                datum: {\n                    charts: [\n                        {\n                            data: previousData,\n                            name: 'previous',\n                            show: true,\n                            style: chartStyles.previousMonth,\n                        },\n                        {\n                            data: currentData,\n                            name: 'current',\n                            show: true,\n                            style: chartStyles.currentMonth,\n                        },\n                    ],\n                    legend: {\n                        colorScale: chartStyles.colorScale,\n                        data: legendData,\n                        onClick: this.handleCostLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, interpolation: \"basis\", name: datum.name, key: `trend-chart-${datum.name}-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (!(datum && datum.data && datum.data.length)) {\n                return null;\n            }\n            const { title } = this.props;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                datum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 20, height: 25, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.legend && datum.legend.data) {\n            datum.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(datum.legend, width) : undefined, legendData: legendVisible ? datum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(datum) &&\n                    datum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_100, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_100.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            if (previousUsageData) {\n                const [start] = getMonthRangeString(previousUsageData, 'chart.usage_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousUsageData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentUsageData) {\n                const [start] = getMonthRangeString(currentUsageData, 'chart.usage_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentUsageData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousRequestData) {\n                const [start] = getMonthRangeString(previousRequestData, 'chart.requests_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousRequestData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentRequestData) {\n                const [start] = getMonthRangeString(currentRequestData, 'chart.requests_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentRequestData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                datum: {\n                    charts: [\n                        {\n                            data: previousUsageData,\n                            name: 'previousUsage',\n                            show: true,\n                            style: chartStyles.previousUsageData,\n                        },\n                        {\n                            data: currentUsageData,\n                            name: 'currentUsage',\n                            show: true,\n                            style: chartStyles.currentUsageData,\n                        },\n                        {\n                            data: previousRequestData,\n                            name: 'previousRequest',\n                            show: true,\n                            style: chartStyles.previousRequestData,\n                        },\n                        {\n                            data: currentRequestData,\n                            name: 'currentRequest',\n                            show: true,\n                            style: chartStyles.currentRequestData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, interpolation: \"basis\", name: datum.name, key: `usage-chart-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (!(datum && datum.data && datum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow, title } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                datum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), responsive: true, style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.legend && datum.legend.data) {\n            datum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(datum.legend, width) : undefined, legendData: legendVisible ? datum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(datum) &&\n                    datum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummary.styles';\nconst AzureReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AzureReportSummary = translate()(AzureReportSummaryBase);\nexport { AzureReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummaryAlt.styles';\nconst AzureReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AzureReportSummaryAlt = translate()(AzureReportSummaryAltBase);\nexport { AzureReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryDetails.styles';\nconst AzureReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, t, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits && usage >= 0) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst AzureReportSummaryDetails = translate()(AzureReportSummaryDetailsBase);\nexport { AzureReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryItem.styles';\nconst AzureReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAzureReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AzureReportSummaryItem = translate()(AzureReportSummaryItemBase);\nexport { AzureReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureReportSummaryItems.styles';\nclass AzureReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAzureReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AzureReportSummaryItems = translate()(AzureReportSummaryItemsBase);\nexport { AzureReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './azureReportSummaryTrend.styles';\nconst AzureReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AzureReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, t, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits && usage >= 0) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnAwsReportSummary.styles';\nconst OcpOnAwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpOnAwsReportSummary = translate()(OcpOnAwsReportSummaryBase);\nexport { OcpOnAwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnAwsReportSummaryAlt.styles';\nconst OcpOnAwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpOnAwsReportSummaryAlt = translate()(OcpOnAwsReportSummaryAltBase);\nexport { OcpOnAwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    titleContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n    usageText: {\n        marginRight: global_spacer_sm.value,\n    },\n    usageValue: {\n        marginRight: global_spacer_sm.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsReportSummaryDetails.styles';\nconst OcpOnAwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestLabel, showUnits = false, t, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const awsReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (awsReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', formatOptions);\n        }\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.titleContainer) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else if (!awsReportType) {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.titleContainer) },\n                React.createElement(\"div\", { className: css(styles.value, styles.usageValue) },\n                    usage,\n                    React.createElement(\"div\", { className: css(styles.text) },\n                        React.createElement(\"div\", null, usageLabel)))),\n            React.createElement(\"div\", { className: css(styles.titleContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    request,\n                    React.createElement(\"div\", { className: css(styles.text) }, requestLabel)))));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits && usage >= 0) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst OcpOnAwsReportSummaryDetails = translate()(OcpOnAwsReportSummaryDetailsBase);\nexport { OcpOnAwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsReportSummaryItem.styles';\nconst OcpOnAwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpOnAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpOnAwsReportSummaryItem = translate()(OcpOnAwsReportSummaryItemBase);\nexport { OcpOnAwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { styles } from './ocpOnAwsReportSummaryItems.styles';\nclass OcpOnAwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpOnAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpOnAwsReportSummaryItems = translate()(OcpOnAwsReportSummaryItemsBase);\nexport { OcpOnAwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpOnAwsReportSummaryTrend.styles';\nconst OcpOnAwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpOnAwsReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpOnAwsReportSummaryTrend.styles';\nconst OcpOnAwsReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpOnAwsReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    titleContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n    usageText: {\n        marginRight: global_spacer_sm.value,\n    },\n    usageValue: {\n        marginRight: global_spacer_sm.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestLabel, usageLabel, t, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let requestValue = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n            requestValue = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', formatOptions);\n        }\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: css(styles.titleContainer) },\n            React.createElement(\"div\", { className: css(styles.value, styles.usageValue) },\n                Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                        derivedCost,\n                        infrastructureCost,\n                    }), enableFlip: true },\n                    React.createElement(\"div\", null, cost))) : (React.createElement(\"div\", null, usage)),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel)))),\n        React.createElement(\"div\", { className: css(styles.titleContainer) }, Boolean(reportType !== \"cost\" /* cost */) && (React.createElement(\"div\", { className: css(styles.value) },\n            requestValue,\n            React.createElement(\"div\", { className: css(styles.text) }, requestLabel))))));\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_100, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_100.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            if (previousCostData) {\n                const [start] = getMonthRangeString(previousCostData, 'chart.cost_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousCostData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentCostData) {\n                const [start] = getMonthRangeString(currentCostData, 'chart.cost_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentCostData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousInfrastructureCostData) {\n                const [start] = getMonthRangeString(previousInfrastructureCostData, 'chart.cost_infrastructure_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousInfrastructureCostData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentInfrastructureCostData) {\n                const [start] = getMonthRangeString(currentInfrastructureCostData, 'chart.cost_infrastructure_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentInfrastructureCostData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                datum: {\n                    charts: [\n                        {\n                            data: previousCostData,\n                            name: 'previousCost',\n                            show: true,\n                            style: chartStyles.previousCostData,\n                        },\n                        {\n                            data: currentCostData,\n                            name: 'currentCost',\n                            show: true,\n                            style: chartStyles.currentCostData,\n                        },\n                        {\n                            data: previousInfrastructureCostData,\n                            name: 'previousInfrastructureCost',\n                            show: true,\n                            style: chartStyles.previousInfrastructureCostData,\n                        },\n                        {\n                            data: currentInfrastructureCostData,\n                            name: 'currentInfrastructureCost',\n                            show: true,\n                            style: chartStyles.currentInfrastructureCostData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, interpolation: \"basis\", name: datum.name, key: `usage-chart-${datum.name}-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (!(datum && datum.data && datum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow, title } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                datum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), responsive: false, style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.legend && datum.legend.data) {\n            datum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: width > 400 ? containerHeight : containerHeight + 75 } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(datum.legend, width) : undefined, legendData: legendVisible ? datum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(datum && datum) &&\n                    datum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { transformAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { AwsReportSummary, AwsReportSummaryAlt, AwsReportSummaryDetails, AwsReportSummaryItem, AwsReportSummaryItems, AwsReportSummaryTrend, } from 'components/reports/awsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/awsDashboard';\nimport { awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './awsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/aws?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const currentData = transformAwsReport(currentReport, trend.type);\n            const previousData = transformAwsReport(previousReport, trend.type);\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryTrend, { containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, showUnits: details.showUnits, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('aws_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('aws_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(AwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'aws', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDashboardWidgetBase));\nexport { AwsDashboardWidget, AwsDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst AwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(AwsDashboardBase));\nexport default AwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { transformAzureReport } from 'components/charts/commonChart/chartUtils';\nimport { AzureReportSummary, AzureReportSummaryAlt, AzureReportSummaryDetails, AzureReportSummaryItem, AzureReportSummaryItems, AzureReportSummaryTrend, } from 'components/reports/azureReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { azureDashboardActions, azureDashboardSelectors, } from 'store/azureDashboard';\nimport { azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './azureDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AzureDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/azure?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const currentData = transformAzureReport(currentReport, trend.type);\n            const previousData = transformAzureReport(previousReport, trend.type);\n            const units = this.getUnits();\n            return (React.createElement(AzureReportSummaryTrend, { containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(AzureReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, showUnits: details.showUnits, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AzureReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('azure_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('azure_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(AzureReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(AzureReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(AzureReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'azure', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AzureDashboardWidgetBase));\nexport { AzureDashboardWidget, AzureDashboardWidgetBase, };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureDashboardSelectors } from 'store/azureDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\nconst AzureDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(AzureDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(AzureDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = translate()(connect(mapStateToProps, {})(AzureDashboardBase));\nexport default AzureDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 275,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { transformOcpReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpReportSummary, OcpReportSummaryAlt, OcpReportSummaryDetails, OcpReportSummaryItem, OcpReportSummaryItems, OcpReportSummaryTrend, OcpReportSummaryUsage, } from 'components/reports/ocpReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const reportItem = reportType === \"cost\" /* cost */ ? 'cost' : 'usage';\n            const currentUsageData = transformOcpReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const currentInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const previousInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(OcpReportSummaryTrend, { containerHeight: containerHeight, currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title })) : (React.createElement(OcpReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpReportSummaryDetails, { formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('ocp_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('ocp_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                        ? reportItem.cost\n                        : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id } = this.props;\n            const tab = availableTabs[tabIndex];\n            this.props.updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, widgetId } = this.props;\n        this.props.updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDashboardWidgetBase));\nexport { OcpDashboardWidget, OcpDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst OcpDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(OcpDashboardBase));\nexport default OcpDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport { transformOcpOnAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpOnAwsReportSummary, OcpOnAwsReportSummaryAlt, OcpOnAwsReportSummaryDetails, OcpOnAwsReportSummaryItem, OcpOnAwsReportSummaryItems, OcpOnAwsReportSummaryTrend, OcpOnAwsReportSummaryUsage, } from 'components/reports/ocpOnAwsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsDashboardActions, ocpOnAwsDashboardSelectors, } from 'store/ocpOnAwsDashboard';\nimport { ocpOnAwsReportsSelectors } from 'store/ocpOnAwsReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './ocpOnAwsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpOnAwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp-on-aws?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const costReportType = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            const reportItem = costReportType ? 'infrastructureCost' : 'usage';\n            const currentUsageData = transformOcpOnAwsReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpOnAwsReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpOnAwsReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpOnAwsReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const units = this.getUnits();\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"instance_type\" /* instanceType */ ||\n                reportType === \"network\" /* network */ ||\n                reportType === \"storage\" /* storage */) ? (React.createElement(OcpOnAwsReportSummaryTrend, { containerHeight: containerHeight, currentData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) })) : (React.createElement(OcpOnAwsReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpOnAwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), showUnits: details.showUnits, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpOnAwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('ocp_on_aws_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('ocp_on_aws_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpOnAwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpOnAwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.infrastructure_cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: isCostReport ? reportItem.infrastructureCost : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.infrastructure_cost\n                        ? unitLookupKey(currentReport.meta.total.infrastructure_cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpOnAwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp-on-aws', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpOnAwsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpOnAwsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpOnAwsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpOnAwsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpOnAwsDashboardActions.fetchWidgetReports,\n    updateTab: ocpOnAwsDashboardActions.changeWidgetTab,\n};\nconst OcpOnAwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpOnAwsDashboardWidgetBase));\nexport { OcpOnAwsDashboardWidget, OcpOnAwsDashboardWidgetBase, };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsDashboardSelectors } from 'store/ocpOnAwsDashboard';\nimport { OcpOnAwsDashboardWidget } from './ocpOnAwsDashboardWidget';\nconst OcpOnAwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpOnAwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(OcpOnAwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpOnAwsDashboardSelectors.selectWidgets(state),\n        widgets: ocpOnAwsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpOnAwsDashboard = translate()(connect(mapStateToProps, {})(OcpOnAwsDashboardBase));\nexport default OcpOnAwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n});\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { Popover, Tab, TabContent, Tabs, Title, TitleSize, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsDashboard from 'pages/awsDashboard/awsDashboard';\nimport AzureDashboard from 'pages/azureDashboard/azureDashboard';\nimport OcpDashboard from 'pages/ocpDashboard/ocpDashboard';\nimport OcpOnAwsDashboard from 'pages/ocpOnAwsDashboard/ocpOnAwsDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { awsProvidersQuery, azureProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { headerOverride, styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n        case \"ocpOnAws\" /* ocpOnAws */:\n            return 'ocpOnAws';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            showPopover: false,\n        };\n        this.getAvailableTabs = () => {\n            const { awsProviders, azureProviders, ocpProviders } = this.props;\n            const availableTabs = [];\n            if (awsProviders &&\n                awsProviders.meta &&\n                awsProviders.meta.count &&\n                (ocpProviders && ocpProviders.meta && ocpProviders.meta.count)) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocpOnAws\" /* ocpOnAws */,\n                });\n            }\n            if (ocpProviders && ocpProviders.meta && ocpProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (awsProviders && awsProviders.meta && awsProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"aws\" /* aws */,\n                });\n            }\n            if (azureProviders && azureProviders.meta && azureProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"azure\" /* azure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: this.getTabTitle(tab) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"ocpOnAws\" /* ocpOnAws */) {\n                return activeTabKey === index ? React.createElement(OcpOnAwsDashboard, null) : null;\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                return activeTabKey === index ? React.createElement(OcpDashboard, null) : null;\n            }\n            else if (currentTab === \"aws\" /* aws */) {\n                return activeTabKey === index ? React.createElement(AwsDashboard, null) : null;\n            }\n            else if (currentTab === \"azure\" /* azure */) {\n                return activeTabKey === index ? React.createElement(AzureDashboard, null) : null;\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"aws\" /* aws */) {\n                return t('overview.aws');\n            }\n            else if (tab === \"azure\" /* azure */) {\n                return t('overview.azure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n            else if (tab === \"ocpOnAws\" /* ocpOnAws */) {\n                return t('overview.ocp_on_aws');\n            }\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    render() {\n        const { awsProviders, awsProvidersError, awsProvidersFetchStatus, azureProviders, azureProvidersError, azureProvidersFetchStatus, ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || azureProvidersError || ocpProvidersError;\n        const isLoading = azureProvidersFetchStatus === 1 /* inProgress */ ||\n            awsProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = awsProviders !== undefined &&\n            awsProviders.meta !== undefined &&\n            awsProviders.meta.count === 0 &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = azureProviders !== undefined &&\n            azureProviders.meta !== undefined &&\n            azureProviders.meta.count === 0 &&\n            azureProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = ocpProviders !== undefined &&\n            ocpProviders.meta !== undefined &&\n            ocpProviders.meta.count === 0 &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { size: TitleSize['2xl'] },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp_on_aws')),\n                                    React.createElement(\"p\", null, t('overview.ocp_on_aws_desc')),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))))),\n                Boolean(showTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs(availableTabs)))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"aws\" /* azure */, azureProvidersQueryString);\n    const azureProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* azure */, azureProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersError,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(OverviewBase));\nexport default Overview;\n","import { hot } from 'react-hot-loader';\nimport Overview from './overview';\nexport default hot(module)(Overview);\n"],"sourceRoot":""}