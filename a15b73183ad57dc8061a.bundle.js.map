{"version":3,"file":"a15b73183ad57dc8061a.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/routes/views/details/awsBreakdown/costOverview.tsx","webpack://koku-ui/./src/routes/views/details/awsBreakdown/historicalData.tsx","webpack://koku-ui/./src/routes/views/details/awsBreakdown/awsBreakdown.tsx","webpack://koku-ui/./src/routes/views/details/awsBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAwsReportItems.ts","webpack://koku-ui/./src/routes/views/details/awsDetails/awsDetails.styles.ts","webpack://koku-ui/./src/routes/views/details/awsDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/routes/views/details/awsDetails/detailsHeader.tsx","webpack://koku-ui/./src/routes/views/details/awsDetails/detailsTable.styles.ts","webpack://koku-ui/./src/routes/views/details/awsDetails/detailsTable.tsx","webpack://koku-ui/./src/routes/views/details/awsDetails/detailsToolbar.tsx","webpack://koku-ui/./src/routes/views/details/awsDetails/awsDetails.tsx","webpack://koku-ui/./src/routes/views/details/awsDetails/index.ts","webpack://koku-ui/./src/routes/views/details/components/breakdown/index.ts"],"sourcesContent":["import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview/costOverviewBase';\nimport { awsCostOverviewSelectors } from 'store/breakdown/costOverview/awsCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsCostOverviewSelectors.selectWidgets(state),\n        widgets: awsCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData/historicalDataBase';\nimport { awsHistoricalDataSelectors } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsHistoricalDataSelectors.selectWidgets(state),\n        widgets: awsHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey, logicalAndPrefix, orgUnitIdKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport BreakdownBase from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.awsDetails;\nconst reportType = \"cost\" /* ReportType.cost */;\nconst reportPathsType = \"aws\" /* ReportPathsType.aws */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const costType = getCostType();\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n        cost_type: costType,\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { costType: costType, groupBy: groupBy, query: query, report: report }),\n        costType,\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.awsDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { costType: costType }),\n        providers: filterProviders(providers, \"aws\" /* ProviderType.aws */),\n        providersError,\n        providersFetchStatus,\n        providerType: \"aws\" /* ProviderType.aws */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        showCostType: true,\n        tagReportPathsType: \"aws\" /* TagPathsType.aws */,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AwsBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AwsBreakdown;\n","import AwsBreakdown from './awsBreakdown';\nexport default AwsBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    awsDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { CostType } from 'routes/views/components/costType';\nimport { GroupBy } from 'routes/views/components/groupBy/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst orgReportPathsType = \"aws\" /* OrgPathsType.aws */;\nconst tagReportPathsType = \"aws\" /* TagPathsType.aws */;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleCostTypeSelected = (value) => {\n            const { onCostTypeSelected } = this.props;\n            if (onCostTypeSelected) {\n                onCostTypeSelected(value);\n            }\n        };\n    }\n    render() {\n        const { costType, groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.awsDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, null),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, orgReportPathsType: orgReportPathsType, showOrgs: true, showTags: true, tagReportPathsType: tagReportPathsType }),\n                    React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: this.handleCostTypeSelected, costType: costType }))),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, \"aws\" /* ProviderType.aws */),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './awsDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions/actions';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { getOrgBreakdownPath } from 'routes/views/utils/paths';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"aws\" /* ReportPathsType.aws */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n            });\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        title: groupByOrg\n                            ? intl.formatMessage(messages.names, { count: 2 })\n                            : intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById === 'account' ? 'account_alias' : groupById, title: intl.formatMessage(messages.detailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                let name = (React.createElement(Link, { to: getOrgBreakdownPath({\n                        basePath: paths.awsDetailsBreakdown,\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        groupByOrg,\n                        id: item.id,\n                        orgUnitId: getGroupByOrgValue(query),\n                        query,\n                        title: item.label,\n                        type: item.type,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index, disabled = false) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: disabled, item: item, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.awsDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/awsQuery';\nimport { orgUnitIdKey, tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst orgReportPathsType = \"aws\" /* OrgPathsType.aws */;\nconst orgReportType = \"org\" /* OrgType.org */;\nconst tagReportPathsType = \"aws\" /* TagPathsType.aws */;\nconst tagReportType = \"tag\" /* TagType.tag */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, orgReport, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.filterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (orgReport && orgReport.data && orgReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportFetchStatus, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (orgReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgReport, orgReportFetchStatus, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (orgReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                    fetchOrg(orgReportPathsType, orgReportType, queryString);\n                }\n                if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, orgReport, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, pagination: pagination, query: query, resourcePathsType: \"aws\" /* ResourcePathsType.aws */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        orgReport,\n        orgReportFetchStatus,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport Loading from 'routes/state/loading';\nimport NoData from 'routes/state/noData';\nimport NoProviders from 'routes/state/noProviders';\nimport NotAvailable from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'routes/views/utils/query';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCostType } from 'utils/costType';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* ReportType.cost */;\nconst reportPathsType = \"aws\" /* ReportPathsType.aws */;\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupBy = groupByTagKey || groupById;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupBy === orgUnitIdKey ? 'org_entities' : groupBy,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* FetchStatus.inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Need param to restore cost type upon page refresh\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(this.getRouteForQuery(newQuery, false)); // Don't reset pagination\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { costType, query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                    cost_type: costType,\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { costType, providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.awsDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* FetchStatus.inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* FetchStatus.complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"aws\" /* ProviderType.aws */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.awsDetails },\n            React.createElement(DetailsHeader, { costType: costType, groupBy: groupById, onCostTypeSelected: this.handleCostTypeSelected, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* FetchStatus.inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const costType = getCostType();\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        cost_type: costType,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        costType,\n        providers: filterProviders(providers, \"aws\" /* ProviderType.aws */),\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n","import AwsDetails from './awsDetails';\nexport default AwsDetails;\n","import BreakdownBase from './breakdownBase';\nexport default BreakdownBase;\n"],"names":["mapStateToProps","state","props","selectWidgets","awsCostOverview","widgets","CostOverview","injectIntl","connect","awsHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupByOrgValue","groupBy","groupByValue","costType","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","account","group_by","cost_type","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","showCostType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","org_unit_id","region","service","styles","awsDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","display","dateTitle","textAlign","header","padding","headerContent","justifyContent","headerContentLeft","headerContentRight","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","constructor","super","arguments","this","handleCostTypeSelected","onCostTypeSelected","render","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onGroupBySelected","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","isDisabled","onSelected","options","orgReportPathsType","showOrgs","showTags","onSelect","Boolean","format","units","featureFlags","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByOrg","groupByTagKey","computedItems","idKey","orderBy","length","transforms","sortable","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","id","orgUnitId","type","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","setState","sortBy","disabled","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","keys","order_by","c","column","percentValue","toFixed","handleOnSelect","event","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","DetailsTable","orgReportType","tagReportType","DetailsToolbarBase","defaultState","getCategoryOptions","orgReport","tagReport","fetchOrg","fetchTag","orgReportFetchStatus","tagReportFetchStatus","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","limit","DetailsToolbarConnect","DetailsToolbar","offset","AwsDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","isOpen","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","history","parse","replace","getRouteForQuery","action","filterType","filterValue","filteredQuery","handleGroupBySelected","groupByKey","indexOf","slice","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"sourceRoot":""}