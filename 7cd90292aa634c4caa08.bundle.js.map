{"version":3,"sources":["webpack:///./src/utils/sort.ts","webpack:///./src/utils/getComputedReportItems.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/components/commonChart/chartUtils.ts","webpack:///./src/components/commonChart/chartLegend.tsx","webpack:///./src/components/commonChart/chart.styles.ts","webpack:///./src/components/commonChart/chartLegendItem.styles.ts","webpack:///./src/components/commonChart/chartLegendItem.tsx","webpack:///./src/components/commonChart/chartTitle.tsx","webpack:///./src/testIds.ts","webpack:///./src/components/emptyState/emptyState.styles.ts","webpack:///./src/components/emptyState/emptyState.tsx","webpack:///./src/pages/dashboard/dashboard.styles.ts","webpack:///./src/components/link/link.tsx","webpack:///./src/components/reportSummary/reportSummary.styles.ts","webpack:///./src/components/reportSummary/reportSummary.tsx","webpack:///./src/components/reportSummary/reportSummaryDetails.styles.ts","webpack:///./src/components/reportSummary/reportSummaryDetails.tsx","webpack:///./src/components/progressBar/progressBar.styles.ts","webpack:///./src/components/progressBar/progressBar.tsx","webpack:///./src/components/reportSummary/reportSummaryItem.styles.ts","webpack:///./src/components/reportSummary/reportSummaryItem.tsx","webpack:///./src/components/reportSummary/reportSummaryItems.tsx","webpack:///./src/components/trendChart/trendChart.styles.ts","webpack:///./src/components/trendChart/trendChart.tsx","webpack:///./src/components/reportSummary/reportSummaryTrend.tsx","webpack:///./src/components/tabs/tabContent.tsx","webpack:///./src/components/tabs/tabItem.styles.ts","webpack:///./src/components/tabs/tabItem.tsx","webpack:///./src/components/tabs/tabNavigation.styles.ts","webpack:///./src/components/tabs/tabNavigation.tsx","webpack:///./src/components/tabs/tabs.tsx","webpack:///./src/pages/dashboard/dashboardWidget.tsx","webpack:///./src/pages/dashboard/dashboard.tsx","webpack:///./src/pages/dashboard/index.ts"],"names":["getValueForItem","item","options","key","groups","getComputedReportItems","report","idKey","labelKey","sortKey","sortDirection","array","direction","sort","a","b","aVal","bVal","getUnsortedComputedReportItems","itemMap","visitDataPoint","dataPoint","values","forEach","value","total","id","label","account_alias","Object","assign","units","group","data","getIdKeyForGroupBy","groupBy","account","instance_type","region","service","formatValue","unit","lookup","split","toLowerCase","fValue","formatCurrency","formatStorage","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","transformReport","type","computedItems","utils_getComputedReportItems__WEBPACK_IMPORTED_MODULE_3__","map","i","createDatum","reduce","acc","d","prevValue","length","y","computedItem","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","parseFloat","name","getDateRangeString","datums","start","end","today","Date","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_2___default","getDatumDateRange","monthName","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","startDate","endDate","getTooltipLabel","datum","formatOptions","toString","styles","StyleSheet","create","legend","display","alignItems","ChartLegend","children","styling","Boolean","react_default","createElement","className","chartStyles","padding","strokeWidth","fillOpacity","tooltipText","fontSize","fill","esm","tooltipFlyout","previousMonth","stroke","currentMonth","chartLegendItem_styles_styles","reportSummaryTrend",":not(foo) svg","overflow",":not(foo) text","legendItem","color","var","marginRight","height","width","borderWidth","borderStyle","currentColor","backgroundColor","borderColor","previousColor","ChartLegendItem","isCurrent","index","chartUtils","chartTitle_styles","chartTitle","marginBottom","ChartTitle","getTestProps","data-testid","testIds","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","providers","add_btn","bucket_input","cancel_btn","name_input","resource_name_input","submit_btn","type_input","sidebar","nav","link","backdrop","reportSummary","subtitle","EmptyState","subTitle","title","Card","CardHeader","Title","size","CardBody","dashboard_styles_styles","banner","justifyContent","content","theme","index_esm","emptyState","CastedButton","Button","link_Link","props","component","Link","variant","reportSummary_styles_styles","ReportSummary","es","detailsLink","status","t","CardFooter","reportSummaryDetails_styles_styles","reportSummaryDetails","text","paddingBottom","lineHeight","ReportSummaryDetails","progressBar_styles_styles","progressBar","marginTop","bar","ProgressBar","progress","Math","min","max","reportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","info","test","ReportSummaryItem","totalValue","percent","defaultProps","v","reportSummaryItems_ReportSummaryItems","Component","[object Object]","nextProps","this","otherIndex","findIndex","slice","items","getItems","trendChart_styles_styles","trendChart_TrendChart","super","arguments","containerRef","createRef","state","formatDatumValue","formatDatumOptions","handleResize","setState","current","clientWidth","previous","setTimeout","window","addEventListener","removeEventListener","currentData","previousData","ref","victory_group","domainPadding","containerComponent","victory_voronoi_container","voronoiDimension","responsive","labels","labelComponent","victory_tooltip","cornerRadius","flyoutStyle","victory_area","commonChart","ReportSummaryTrend","TabContent","role","tabItem_styles_styles","tabItem","position","flexGrow","textAlign","cursor","selected","backgroundImage","tabItem_TabItem","handleClick","onSelect","isSelected","onClick","aria-selected","tabIndex","tabNavigation_styles_styles","tabNavigation","tabNavigation_TabNavigation","handleKeyDown","event","includes","tabs","onChange","modifier","newIndex","onKeyDown","tab","Tabs","selectedTab","find","getIdKeyForTab","mapStateToProps","common","widgetId","widget","dashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","tabsQuery","reports","selectReport","reportType","selectReportFetchStatus","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","DashboardWidget","react_redux_es","getTabTitle","getDetailsLinkTitle","buildDetailsLink","query","group_by","order_by","renderTab","tabData","topItems","currentTab","utils_formatValue","handleTabChange","tabId","titleKey","trend","details","availableTabs","month","get_month_default","format_default","start_of_month_default","count","get_date_default","detailLabel","context","labelKeyContext","to","trendTitle","dashboard_mapStateToProps","store_providers","selectProviders","providersFetchStatus","selectProvidersFetchStatus","widgets","selectCurrentWidgets","Dashboard","openProvidersModal","ui","lg","secondary","Grid","gutter","GridItem","xl","target","href","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_dashboard__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"7cd90292aa634c4caa08.bundle.js","sourcesContent":["function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","import { sort } from './sort';\nconst groups = ['services', 'accounts', 'instance_types', 'regions'];\nexport function getComputedReportItems({ report, idKey, labelKey = idKey, sortKey = 'total', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const total = value.total;\n                const id = value[idKey];\n                let label = value[labelKey];\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        id,\n                        total,\n                        label,\n                        units: value.units,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { total: itemMap[id].total + total });\n            });\n        }\n        groups.forEach(group => {\n            if (dataPoint[group]) {\n                return dataPoint[group].forEach(visitDataPoint);\n            }\n        });\n    };\n    report.data.forEach(visitDataPoint);\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","export const formatValue = (value, unit, options = {}) => {\n    const lookup = unit && unit.split('-')[0].toLowerCase();\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n            return formatStorage(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, _unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatStorage = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","import format from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport startOfMonth from 'date-fns/start_of_month';\nimport { getComputedReportItems, } from 'utils/getComputedReportItems';\nexport function transformReport(report, type = 1 /* daily */, key = 'date') {\n    if (!report) {\n        return [];\n    }\n    const computedItems = getComputedReportItems({\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    });\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d.total, d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    return {\n        x: xVal,\n        y: parseFloat(value.toFixed(2)),\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums) {\n    if (!datums.length) {\n        const today = new Date();\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRangeString(datums) {\n    const [start, end] = getDatumDateRange(datums);\n    const monthName = format(start, 'MMM');\n    const startDate = getDate(start);\n    const endDate = getDate(end);\n    return `${monthName} ${getDate(start)}${startDate !== endDate ? ` - ${endDate}` : ''}`;\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'MMM D YYYY');\n        return `${date}: ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\n","import { css } from '@patternfly/react-styles';\nimport { StyleSheet } from '@patternfly/react-styles';\nimport React from 'react';\nconst styles = StyleSheet.create({\n    legend: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n});\nconst ChartLegend = ({ children, style }) => {\n    const styling = Boolean(style) && Boolean(style.legend) ? style.legend : styles.legend;\n    return React.createElement(\"div\", { className: css(styling) }, children);\n};\nexport { ChartLegend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_dark_100, global_Color_light_100, global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    padding: 8,\n    group: {\n        data: { strokeWidth: 2, fillOpacity: 0.4 },\n    },\n    tooltipText: {\n        fontSize: '14px',\n        fill: global_Color_light_100.value,\n    },\n    tooltipFlyout: { fill: global_Color_dark_100.value },\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    reportSummaryTrend: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        ':not(foo) text': {\n            fontSize: '12px',\n            length: '12px',\n        },\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BorderWidth_sm, global_Color_200, global_FontSize_xs, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { chartStyles } from './chart.styles';\nexport const styles = StyleSheet.create({\n    legendItem: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginRight: global_spacer_md.value,\n    },\n    color: {\n        height: 10,\n        width: 10,\n        marginRight: global_spacer_sm.value,\n        borderWidth: global_BorderWidth_sm.value,\n        borderStyle: 'solid',\n    },\n    currentColor: {\n        backgroundColor: chartStyles.currentMonth.data.fill,\n        borderColor: chartStyles.currentMonth.data.stroke,\n    },\n    previousColor: {\n        backgroundColor: chartStyles.previousMonth.data.fill,\n        borderColor: chartStyles.previousMonth.data.stroke,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './chartLegendItem.styles';\nimport { getDateRangeString } from './chartUtils';\nconst ChartLegendItem = ({ data, isCurrent, idKey = 'date', index, style, }) => {\n    if (!data || data.length === 0) {\n        return React.createElement(\"div\", null);\n    }\n    const styling = Boolean(style) && Boolean(style.legendItem)\n        ? style.legendItem\n        : styles.legendItem;\n    if (idKey === 'date') {\n        const label = getDateRangeString(data);\n        return (React.createElement(\"div\", { className: css(styling) },\n            React.createElement(\"div\", { className: css(styles.color, isCurrent ? styles.currentColor : styles.previousColor) }),\n            label));\n    }\n    else {\n        return (React.createElement(\"div\", { key: data[index].key, className: css(styling) },\n            React.createElement(\"div\", { className: css(styles.color, isCurrent ? styles.currentColor : styles.previousColor) }),\n            data[index].key));\n    }\n};\nexport { ChartLegendItem };\n","import { css } from '@patternfly/react-styles';\nimport { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_xs, global_spacer_sm } from '@patternfly/react-tokens';\nimport React from 'react';\nconst styles = StyleSheet.create({\n    chartTitle: {\n        fontSize: global_FontSize_xs.value,\n        marginBottom: global_spacer_sm.value,\n    },\n});\nconst ChartTitle = ({ children }) => (React.createElement(\"div\", { className: css(styles.chartTitle) }, children));\nexport { ChartTitle };\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n    },\n});\n","import { Card, CardBody, CardHeader, Title } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyState.styles';\nconst EmptyState = ({ children, subTitle, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, children)));\nexport { EmptyState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { c_card_BackgroundColor, global_Color_100, global_Color_200, global_Color_light_100, global_Color_light_200, global_spacer_lg, global_spacer_xl, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    banner: {\n        height: 60,\n        color: global_Color_100.var,\n        marginBottom: global_spacer_xl.value,\n        padding: `0 ${global_spacer_xl.value}`,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    },\n    content: {\n        padding: `0 ${global_spacer_xl.value}`,\n    },\n});\nexport const theme = css `\n  min-height: 100%;\n  padding-bottom: ${global_spacer_lg.var};\n  background-color: rgba(0, 0, 0, 0.5);\n  ${global_Color_100.name}: ${global_Color_light_100.value};\n  ${global_Color_200.name}: ${global_Color_light_200.value};\n\n  & .pf-c-card {\n    ${global_Color_100.name}: ${global_Color_light_100.value};\n    ${global_Color_200.name}: ${global_Color_light_200.value};\n    ${c_card_BackgroundColor.name}: rgba(0, 0, 0, 0.5);\n  }\n`;\nexport const emptyState = css `\n  & ul {\n    list-style-type: initial;\n    margin-left: 20px;\n  }\n`;\n","import { Button } from '@patternfly/react-core';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nconst CastedButton = Button;\nconst Link = props => (React.createElement(CastedButton, Object.assign({ component: RouterLink, variant: \"link\" }, props)));\nexport { Link };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './reportSummary.styles';\nconst ReportSummaryBase = ({ title, subTitle, detailsLink, children, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? `${t('loading')}...` : children),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst ReportSummary = translate()(ReportSummaryBase);\nexport { ReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './reportSummaryDetails.styles';\nconst ReportSummaryDetails = ({ label, formatValue, formatOptions, report, }) => {\n    let value = '----';\n    if (report) {\n        value = report.total\n            ? formatValue(report.total.value, report.total.units, formatOptions)\n            : 0;\n    }\n    return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n        React.createElement(\"div\", { className: css(styles.value) }, value),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, label))));\n};\nexport { ReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_primary_color_200, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    progressBar: {\n        height: 10,\n        backgroundColor: 'rgba(0, 123, 186, 0.2)',\n        marginTop: global_spacer_sm.value,\n        marginBottom: global_spacer_lg.value,\n    },\n    bar: {\n        height: '100%',\n        backgroundColor: global_primary_color_200.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './progressBar.styles';\nconst ProgressBar = ({ progress }) => {\n    const width = Math.min(Math.max(0, progress), 100); // force between 0 - 100;\n    return (React.createElement(\"div\", { className: css(styles.progressBar) },\n        React.createElement(\"div\", { className: css(styles.bar), style: { width: `${width}%` } })));\n};\nexport { ProgressBar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_xs, global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    info: {\n        display: 'flex',\n        fontSize: global_FontSize_xs.value,\n        justifyContent: 'space-between',\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { ProgressBar } from '../progressBar';\nimport { styles } from './reportSummaryItem.styles';\nconst ReportSummaryItem = ({ label, value, totalValue, formatValue, units, formatOptions, }) => {\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(\"div\", { className: css(styles.info) },\n            React.createElement(\"div\", null, label),\n            React.createElement(\"div\", null,\n                formatValue(value, units, formatOptions),\n                \" (\",\n                percent.toFixed(2),\n                \"%)\")),\n        React.createElement(ProgressBar, { progress: percent })));\n};\nReportSummaryItem.defaultProps = {\n    formatValue: v => v,\n};\nexport { ReportSummaryItem };\n","import React from 'react';\nimport { getComputedReportItems, } from 'utils/getComputedReportItems';\nclass ReportSummaryItems extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => i.id === 'Other');\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return null;\n        }\n        const items = this.getItems();\n        return React.createElement(\"ul\", null, children({ items }));\n    }\n}\nexport { ReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_dark_100, global_Color_light_100, global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    padding: 8,\n    group: {\n        data: { strokeWidth: 2, fillOpacity: 0.4 },\n    },\n    tooltipText: {\n        fontSize: '14px',\n        fill: global_Color_light_100.value,\n    },\n    tooltipFlyout: { fill: global_Color_dark_100.value },\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    reportSummaryTrend: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        ':not(foo) text': {\n            fontSize: '12px',\n            length: '12px',\n        },\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { ChartLegend, ChartLegendItem, ChartTitle, } from 'components/commonChart';\nimport { getTooltipLabel, transformReport, } from 'components/commonChart/chartUtils';\nimport React from 'react';\nimport { VictoryArea, VictoryGroup, VictoryTooltip, VictoryVoronoiContainer, } from 'victory';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const label = getTooltipLabel(datum, formatDatumValue, formatDatumOptions, 'date');\n            return label;\n        };\n        this.handleResize = () => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n        };\n    }\n    shouldComponentUpdate(nextProps) {\n        if (!nextProps.current || !nextProps.previous) {\n            return false;\n        }\n        return true;\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n            window.addEventListener('resize', this.handleResize);\n        });\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    render() {\n        const { title, current, previous, height, type } = this.props;\n        const currentData = transformReport(current, type);\n        const previousData = transformReport(previous, type);\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryTrend), ref: this.containerRef },\n            React.createElement(VictoryGroup, { padding: chartStyles.padding, style: chartStyles.group, height: height, width: this.state.width, domainPadding: { y: [0, 8] }, containerComponent: React.createElement(VictoryVoronoiContainer, { voronoiDimension: \"x\", title: title, responsive: false, labels: this.getTooltipLabel, labelComponent: React.createElement(VictoryTooltip, { cornerRadius: 0, style: chartStyles.tooltipText, flyoutStyle: chartStyles.tooltipFlyout }) }) },\n                Boolean(previousData.length) && (React.createElement(VictoryArea, { style: chartStyles.previousMonth, data: previousData })),\n                Boolean(currentData.length) && (React.createElement(VictoryArea, { style: chartStyles.currentMonth, data: currentData }))),\n            React.createElement(ChartTitle, null, title),\n            React.createElement(ChartLegend, null,\n                React.createElement(ChartLegendItem, { isCurrent: true, data: currentData }),\n                React.createElement(ChartLegendItem, { data: previousData }))));\n    }\n}\nexport { TrendChart };\n","import React from 'react';\nimport { TrendChart } from '../trendChart';\nconst ReportSummaryTrend = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(TrendChart, Object.assign({ height: 75 }, props))));\nexport { ReportSummaryTrend };\n","import React from 'react';\nexport const TabContent = ({ data }) => {\n    const content = typeof data.content === 'function' ? data.content(data) : data.content;\n    return React.createElement(\"div\", { role: \"tabpanel\" }, content);\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm, global_primary_color_200, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabItem: {\n        position: 'relative',\n        flexGrow: 1,\n        textAlign: 'center',\n        fontSize: global_FontSize_sm.value,\n        padding: global_spacer_sm.value,\n        cursor: 'pointer',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    selected: {\n        backgroundImage: `linear-gradient(to top, ${global_primary_color_200.value} 2px, transparent 2px)`,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './tabItem.styles';\nclass TabItem extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleClick = () => {\n            const { onSelect, data } = this.props;\n            onSelect(data.id);\n        };\n    }\n    render() {\n        const { data, isSelected } = this.props;\n        return (React.createElement(\"div\", { role: \"tab\", onClick: this.handleClick, \"aria-selected\": isSelected, tabIndex: isSelected ? 0 : -1, className: css(styles.tabItem, isSelected && styles.selected) }, data.label));\n    }\n}\nexport { TabItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '../../../node_modules/@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabNavigation: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginBottom: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { TabItem } from './tabItem';\nimport { styles } from './tabNavigation.styles';\nclass TabNavigation extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleKeyDown = (event) => {\n            if (!['ArrowRight', 'ArrowLeft'].includes(event.key)) {\n                return;\n            }\n            const { selected, tabs, onChange } = this.props;\n            const modifier = event.key === 'ArrowRight' ? 1 : -1;\n            const selectedIndex = tabs.findIndex(t => t.id === selected.id);\n            const newIndex = selectedIndex + modifier;\n            if (newIndex < 0 || newIndex > tabs.length - 1) {\n                return;\n            }\n            onChange(tabs[newIndex].id);\n        };\n    }\n    render() {\n        const { tabs, selected, onChange } = this.props;\n        return (React.createElement(\"div\", { role: \"tablist\", className: css(styles.tabNavigation), onKeyDown: this.handleKeyDown }, tabs.map(tab => (React.createElement(TabItem, { onSelect: onChange, key: tab.id, data: tab, isSelected: tab.id === selected.id })))));\n    }\n}\nexport { TabNavigation };\n","import React from 'react';\nimport { TabContent } from './tabContent';\nimport { TabNavigation } from './tabNavigation';\nconst Tabs = ({ selected, tabs, onChange }) => {\n    const selectedTab = tabs.find(tab => tab.id === selected);\n    return (React.createElement(\"div\", null,\n        React.createElement(TabNavigation, { tabs: tabs, selected: selectedTab, onChange: onChange }),\n        React.createElement(TabContent, { data: selectedTab })));\n};\nexport { Tabs };\n","import { getQuery, parseQuery } from 'api/query';\nimport { Link } from 'components/link';\nimport { ReportSummary, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, } from 'components/reportSummary';\nimport { Tabs } from 'components/tabs';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { dashboardActions, dashboardSelectors, } from 'store/dashboard';\nimport { reportsSelectors } from 'store/reports';\nimport { formatValue } from 'utils/formatValue';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/cost?${getQuery({\n                group_by: groupBy,\n                order_by: { total: 'desc' },\n            })}`;\n        };\n        this.renderTab = (tabData) => {\n            const { tabs, topItems } = this.props;\n            const currentTab = tabData.id;\n            return (React.createElement(ReportSummaryItems, { idKey: getIdKeyForTab(currentTab), report: tabs }, ({ items }) => items.map(tabItem => (React.createElement(ReportSummaryItem, { key: tabItem.id, formatOptions: topItems.formatOptions, formatValue: formatValue, label: tabItem.label, totalValue: tabs.total.value, units: tabItem.units, value: tabItem.total })))));\n        };\n        this.handleTabChange = (tabId) => {\n            this.props.updateTab(this.props.id, tabId);\n        };\n    }\n    componentDidMount() {\n        const { fetchReports, widgetId } = this.props;\n        fetchReports(widgetId);\n    }\n    render() {\n        const { t, titleKey, trend, details, current, previous, availableTabs, currentTab, reportType, status, } = this.props;\n        const today = new Date();\n        const month = getMonth(today);\n        const endDate = formatDate(today, 'Do');\n        const startDate = formatDate(startOfMonth(today), 'Do');\n        const title = t(titleKey, { endDate, month, startDate });\n        const subTitle = t('dashboard_page.widget_subtitle', {\n            endDate,\n            month,\n            startDate,\n            count: getDate(today),\n        });\n        const detailLabel = t(details.labelKey, {\n            context: details.labelKeyContext,\n        });\n        const detailsLink = reportType === \"cost\" /* cost */ && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab)));\n        const trendTitle = t(trend.titleKey);\n        return (React.createElement(ReportSummary, { title: title, subTitle: subTitle, detailsLink: detailsLink, status: status },\n            React.createElement(ReportSummaryDetails, { report: current, formatValue: formatValue, label: detailLabel, formatOptions: details.formatOptions }),\n            React.createElement(ReportSummaryTrend, { type: trend.type, title: trendTitle, current: current, previous: previous, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions }),\n            React.createElement(Tabs, { tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = dashboardSelectors.selectWidget(state, widgetId);\n    const queries = dashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, current: reportsSelectors.selectReport(state, widget.reportType, queries.current), previous: reportsSelectors.selectReport(state, widget.reportType, queries.previous), tabs: reportsSelectors.selectReport(state, widget.reportType, queries.tabs), status: reportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current) });\n});\nconst mapDispatchToProps = {\n    fetchReports: dashboardActions.fetchWidgetReports,\n    updateTab: dashboardActions.changeWidgetTab,\n};\nconst DashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { DashboardWidget, DashboardWidgetBase };\n","import { Button, ButtonType, ButtonVariant, Grid, GridItem, Title, TitleSize, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyState } from 'components/emptyState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { dashboardSelectors } from 'store/dashboard';\nimport { providersSelectors } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { getTestProps, testIds } from 'testIds';\nimport { emptyState, styles, theme } from './dashboard.styles';\nimport { DashboardWidget } from './dashboardWidget';\nconst DashboardBase = ({ t, openProvidersModal, providers, providersFetchStatus, widgets, }) => (React.createElement(\"div\", { className: theme },\n    React.createElement(\"header\", { className: css(styles.banner) },\n        React.createElement(Title, { size: TitleSize.lg }, t('dashboard_page.title')),\n        React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.add_btn), { onClick: openProvidersModal, type: ButtonType.submit, variant: ButtonVariant.secondary }), t('providers.add_account'))),\n    React.createElement(\"div\", { className: css(styles.content) }, Boolean(providers &&\n        providers.count > 0 &&\n        providersFetchStatus === 2 /* complete */) ? (React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        return (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))) : (React.createElement(Grid, { className: css(emptyState), gutter: \"md\" },\n        React.createElement(GridItem, null,\n            React.createElement(EmptyState, { title: t('dashboard_page.empty_state_title') },\n                \"View the\",\n                React.createElement(\"a\", { target: \"_blank\", href: \"https://koku.readthedocs.io/en/latest/providers.html#adding-an-aws-account\" },\n                    ' ',\n                    \"Koku documentation\",\n                    ' '),\n                \"and learn how to configure your AWS account to allow Koku access. Then, click\",\n                React.createElement(\"a\", { href: \"javascript:void(0)\", onClick: openProvidersModal },\n                    ' ',\n                    \"Add Account\"),\n                ' ',\n                \"to configure.\")))))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        providers: providersSelectors.selectProviders(state),\n        providersFetchStatus: providersSelectors.selectProvidersFetchStatus(state),\n        widgets: dashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst Dashboard = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(DashboardBase));\nexport default Dashboard;\n","import { hot } from 'react-hot-loader';\nimport Dashboard from './dashboard';\nexport default hot(module)(Dashboard);\n"],"sourceRoot":""}