{"version":3,"file":"cef44ff2bb6a7bccca8f.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/components/state/loadingState/loadingState.tsx","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardBase.tsx","webpack://koku-ui/./src/pages/views/overview/components/chartComparison.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidgetBase.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/overview.styles.ts","webpack://koku-ui/./src/pages/views/overview/overview.tsx","webpack://koku-ui/./src/api/queries/overviewQuery.ts","webpack://koku-ui/./src/pages/views/overview/index.ts","webpack://koku-ui/./src/utils/format.ts","webpack://koku-ui/./src/utils/userAccess.ts"],"sourcesContent":["import { EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title } from '@patternfly/react-core';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n// defaultIntl required for testing\nconst LoadingStateBase = ({ intl = defaultIntl }) => {\n    const title = intl.formatMessage(messages.LoadingStateTitle);\n    const subTitle = intl.formatMessage(messages.LoadingStateDesc);\n    return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n        React.createElement(Spinner, { size: \"lg\" }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, title),\n        React.createElement(EmptyStateBody, null, subTitle)));\n};\nconst LoadingState = injectIntl(LoadingStateBase);\nexport { LoadingState };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.Perspective)),\n            this.getSelect()));\n    }\n}\nconst Perspective = injectIntl(PerspectiveBase);\nexport { Perspective };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType })))));\n    }))));\nexport { DashboardBase };\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformForecast, transformForecastCone, transformReport, } from 'components/charts/common/chartDatumUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* cumulative */, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, type, 'date', 'infrastructure', computedReportItemValue);\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const forecastInfrastructureData = this.getForecastData(currentReport, trend.computedForecastInfrastructureItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, forecastInfrastructureConeData: forecastInfrastructureData.forecastConeData, forecastInfrastructureData: forecastInfrastructureData.forecastData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    const units = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.units\n                        : 'USD';\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === 0 /* rolling */) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === \"usage\" /* usage */) {\n                return intl.formatMessage(messages.Units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.CurrencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, fetchReports, fetchForecasts, trend, widgetId } = this.props;\n        if (prevProps.costType !== costType) {\n            fetchReports(widgetId);\n            if (trend.computedForecastItem !== undefined) {\n                fetchForecasts(widgetId);\n            }\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import AwsDashboard from './awsDashboard';\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import AwsOcpDashboard from './awsOcpDashboard';\nexport default AwsOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import AzureDashboard from './azureDashboard';\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import AzureOcpDashboard from './azureOcpDashboard';\nexport default AzureOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"gcp_projects\" /* gcpProjects */:\n            return 'gcp_project';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import GcpDashboard from './gcpDashboard';\nexport default GcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"gcp_projects\" /* gcpProjects */:\n            return 'gcp_project';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import GcpOcpDashboard from './gcpOcpDashboard';\nexport default GcpOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import IbmDashboard from './ibmDashboard';\nexport default IbmDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","import OcpCloudDashboard from './ocpCloudDashboard';\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","import OcpDashboard from './ocpDashboard';\nexport default OcpDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { Currency } from 'components/currency';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport { CostType } from 'pages/views/components/costType';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport AwsDashboard from 'pages/views/overview/awsDashboard';\nimport AwsOcpDashboard from 'pages/views/overview/awsOcpDashboard';\nimport AzureDashboard from 'pages/views/overview/azureDashboard';\nimport AzureOcpDashboard from 'pages/views/overview/azureOcpDashboard';\nimport GcpDashboard from 'pages/views/overview/gcpDashboard';\nimport GcpOcpDashboard from 'pages/views/overview/gcpOcpDashboard';\nimport IbmDashboard from 'pages/views/overview/ibmDashboard';\nimport OcpCloudDashboard from 'pages/views/overview/ocpCloudDashboard';\nimport OcpDashboard from 'pages/views/overview/ocpDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { getCostType } from 'utils/localStorage';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable, } from 'utils/userAccess';\nimport { styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [{ label: messages.PerspectiveValues, value: 'ocp' }];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.PerspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.PerspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.PerspectiveValues, value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.PerspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\n//\n// Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n//\n// const infrastructureGcpOcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.PerspectiveValues, value: 'ibm' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.PerspectiveValues, value: 'ocp_cloud' }];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === \"aws\" /* aws */) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { onSelect: this.handleCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = hasOcp && !(hasAws || hasAzure || hasGcp || hasIbm || hasOcpCloud);\n            const showInfrastructureOnly = !hasOcp && (hasAws || hasAzure || hasGcp || hasIbm || hasOcpCloud);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case \"aws\" /* aws */:\n                case \"aws_ocp\" /* awsOcp */:\n                case \"azure\" /* azure */:\n                case \"azure_ocp\" /* azureOcp */:\n                case \"gcp\" /* gcp */:\n                case \"gcp_ocp\" /* gcpOcp */:\n                case \"ibm\" /* ibm */:\n                case \"ocp_cloud\" /* ocpCloud */:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return \"ocp_cloud\" /* ocpCloud */;\n            }\n            if (this.isAwsAvailable()) {\n                return \"aws\" /* aws */;\n            }\n            if (this.isAzureAvailable()) {\n                return \"azure\" /* azure */;\n            }\n            if (this.isGcpAvailable()) {\n                return \"gcp\" /* gcp */;\n            }\n            if (this.isIbmAvailable()) {\n                return \"ibm\" /* ibm */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case \"ocp\" /* ocp */:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return \"ocp\" /* ocp */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            // Note: No need to test OCP on cloud here, since that requires at least one provider\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOcp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (this.isOcpCloudAvailable()) {\n                    options.push(...infrastructureOcpCloudOptions);\n                }\n                if (hasAws) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (this.isAwsCloudAvailable()) {\n                    options.push(...infrastructureAwsOcpOptions);\n                }\n                if (hasGcp) {\n                    options.push(...infrastructureGcpOptions);\n                }\n                // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n                //\n                // if (this.isGcpCloudAvailable()) {\n                //   options.push(...infrastructureGcpOcpOptions);\n                // }\n                if (hasIbm) {\n                    options.push(...infrastructureIbmOptions);\n                }\n                if (hasAzure) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (this.isAzureCloudAvailable()) {\n                    options.push(...infrastructureAzureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onSelected: this.handlePerspectiveSelected, options: options }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { history } = this.props;\n            return `${history.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, costType, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"ocp_cloud\" /* ocpCloud */) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_ocp\" /* awsOcp */) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* gcp */) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp_ocp\" /* gcpOcp */) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ibm\" /* ibm */) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_ocp\" /* azureOcp */) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === \"ocp\" /* ocp */) {\n                    return hasData ? React.createElement(OcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return intl.formatMessage(messages.Infrastructure);\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return intl.formatMessage(messages.OpenShift);\n            }\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Needed to force tab items to update\n            this.setState({ costType: value }, () => {\n                // Need param to restore cost type upon page refresh\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n                history.replace(this.getRouteForQuery(newQuery));\n            });\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { history, query } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value }), (value === \"aws\" /* aws */ && { cost_type: getCostType() }));\n                history.replace(this.getRouteForQuery(newQuery));\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { history, query } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    history.replace(this.getRouteForQuery(newQuery));\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsCloudAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureCloudAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpCloudAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmCloudAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsCloud = this.isAwsCloudAvailable();\n            const hasAzureCloud = this.isAzureCloudAvailable();\n            const hasGcpCloud = this.isGcpCloudAvailable();\n            const hasIbmCloud = this.isIbmCloudAvailable();\n            return hasAwsCloud || hasAzureCloud || hasGcpCloud || hasIbmCloud;\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, userAccessFetchStatus } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noAwsProviders = !this.isAwsAvailable() && providersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && providersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && providersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const isLoading = providersFetchStatus === 1 /* inProgress */ || userAccessFetchStatus === 1 /* inProgress */;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.OverviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.OverviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.GCP)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.GCPDesc)),\n                                    isBetaFeature() && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.IBM)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.IBMDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.AWS)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.AWSDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.Azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.AzureDesc))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    isBetaFeature() && React.createElement(Currency, null)),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = queryFromRoute.perspective;\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const query = Object.assign(Object.assign(Object.assign({}, (perspective && { perspective })), { tabKey }), (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(query);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, \"aws\" /* aws */),\n        azureProviders: filterProviders(providers, \"azure\" /* azure */),\n        gcpProviders: filterProviders(providers, \"gcp\" /* gcp */),\n        ibmProviders: filterProviders(providers, \"ibm\" /* ibm */),\n        ocpProviders: filterProviders(providers, \"ocp\" /* ocp */),\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        queryString,\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OverviewBase));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import Overview from './overview';\nexport default Overview;\n","import { getLocale, intl } from 'components/i18n';\nimport messages from 'locales/messages';\n// Returns the number of decimals for given string\nexport const countDecimals = (value, useLocale = true) => {\n    const decimalSeparator = useLocale ? Number('1.1').toLocaleString(getLocale(), {}).substring(1, 2) : '.';\n    const decimals = value.split(decimalSeparator);\n    return decimals[1] ? decimals[1].length : 0;\n};\n// Currencies are formatted differently, depending on the locale you're using. For example, the dollar\n// sign may appear on the left or the right of the currency symbol for French Vs German.\n//\n// Using the ISO currency code AUD, $12.34 USD is formatted per the locales below.\n// See ICU currencies https://www.localeplanet.com/icu/currency.html\n//\n// en: A$12.34\n// fr: 12,34 $AU\n// de: 12,34 AU$\n//\n// Note: Some currencies do not have decimals, such as JPY, and some have 3 decimals such as IQD.\n// See https://docs.adyen.com/development-resources/currency-codes\nexport const formatCurrency = (value, units, options = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Don't specify default fraction digits here, rely on react-intl instead\n    return intl.formatNumber(fValue, Object.assign({ style: 'currency', currency: units ? units.toUpperCase() : 'USD' }, options));\n};\nexport const formatCurrencyAbbreviation = (value, units = 'USD') => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Derived from https://stackoverflow.com/questions/37799955/how-can-i-format-big-numbers-with-tolocalestring\n    const abbreviationFormats = [\n        { val: 1e15, symbol: 'quadrillion' },\n        { val: 1e12, symbol: 'trillion' },\n        { val: 1e9, symbol: 'billion' },\n        { val: 1e6, symbol: 'million' },\n        { val: 1e3, symbol: 'thousand' },\n    ];\n    // Find the proper format to use\n    let format;\n    if (abbreviationFormats != null) {\n        format = abbreviationFormats.find(f => fValue >= f.val);\n    }\n    // Apply format and insert symbol next to the numeric portion of the formatted string\n    if (format != null) {\n        const { val, symbol } = format;\n        return intl.formatMessage(messages.CurrencyAbbreviations, {\n            symbol,\n            value: formatCurrency(fValue / val, units, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 0,\n            }),\n        });\n    }\n    // If no format was found, format value without abbreviation\n    return formatCurrency(value, units, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n    });\n};\n// Formats cost model rates with 0 to 10 decimals\n// https://issues.redhat.com/browse/COST-1884\nexport const formatCurrencyRate = (value, units, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 10,\n}) => {\n    return formatCurrency(value, units, options);\n};\n// Formats cost model rates with 0 to 10 decimals\n// https://issues.redhat.com/browse/COST-1884\nexport const formatCurrencyRateRaw = (value, units, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 10,\n}) => {\n    return formatCurrencyRaw(value, units, options);\n};\n// Formats without currency symbol\nexport const formatCurrencyRaw = (value, units, options = {}) => {\n    return formatCurrency(value, units, Object.assign({ currencyDisplay: 'code' }, options))\n        .toString()\n        .replace(units, '')\n        .trim();\n};\n// Returns formatted units or currency with given currency-code\nexport const formatUnits = (value, units, options) => {\n    const lookup = unitsLookupKey(units);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'core_hours':\n        case 'hour':\n        case 'hrs':\n            return formatUsageHrs(fValue, options);\n        case 'gb':\n        case 'gb_hours':\n        case 'gb_mo':\n        case 'gibibyte_month':\n        case 'tag_mo':\n        case 'vm_hours':\n            return formatUsageGb(fValue, options);\n    }\n    return unknownTypeFormatter(fValue, options);\n};\nexport const formatPercentage = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\n// Formats cost model markup with 0 to 10 decimals\n// https://issues.redhat.com/browse/COST-1884\nexport const formatPercentageMarkup = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 10,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\nconst formatUsageGb = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\nconst formatUsageHrs = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\n// Returns true if given percentage or currency format is valid for current locale\nexport const isCurrencyFormatValid = (value) => {\n    const decimalSeparator = intl.formatNumber(1.1).toString().replace(/1/g, '');\n    // ^[0-9] The number must start with 0-9\n    // \\d* The number can then have any number of any digits\n    // (...)$ look at the next group from the end (...)$\n    // (...)*(...)? Look for groups optionally. The first is for the comma, the second is for the decimal.\n    // (,\\d{3}){1} Look for one occurrence of a comma followed by exactly three digits\n    // \\.\\d Look for a decimal followed by any number of any digits\n    //\n    // See https://stackoverflow.com/questions/2227370/currency-validation\n    const regex = decimalSeparator === '.' ? /^-?[0-9]\\d*(((,\\d{3}){1})*(\\.\\d*)?)$/ : /^-?[0-9]\\d*(((\\.\\d{3}){1})*(,\\d*)?)$/;\n    return regex.test(value);\n};\n// Returns true if given percentage is valid for current locale\nexport const isPercentageFormatValid = (value) => {\n    return isCurrencyFormatValid(value);\n};\n// Some locales have a comma decimal separator (e.g., \"1.234,56\" in German is \"1,234.56\" in USD).\n// This function normalizes a given currency or percentage for APIs.\nexport const unFormat = (value) => {\n    if (!value) {\n        return value;\n    }\n    const groupSeparator = intl.formatNumber(1111).toString().replace(/1/g, '');\n    const decimalSeparator = intl.formatNumber(1.1).toString().replace(/1/g, '');\n    let rawValue = value.toString().replace(groupSeparator === ',' ? /,/g : /\\./g, '');\n    rawValue = rawValue.replace(decimalSeparator === '.' ? /\\./g : /,/g, '.');\n    return Number.isNaN(rawValue) ? '0' : rawValue;\n};\nconst unknownTypeFormatter = (value, options) => {\n    return value.toLocaleString(getLocale(), options);\n};\n// Returns i18n key for given units\nexport const unitsLookupKey = (units) => {\n    const lookup = units ? units.replace(/[- ]/g, '_').toLowerCase() : '';\n    switch (lookup) {\n        case 'core_hours':\n        case 'gb':\n        case 'gb_hours':\n        case 'gb_mo':\n        case 'gibibyte_month':\n        case 'hour':\n        case 'hrs':\n        case 'tag_mo':\n        case 'vm_hours':\n            return lookup;\n        default:\n            return undefined;\n    }\n};\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n"],"names":["LoadingState","intl","title","formatMessage","subTitle","EmptyState","variant","EmptyStateVariant","className","Spinner","size","Title","headingLevel","EmptyStateBody","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelectOptions","options","props","selections","map","option","push","toString","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","SelectVariant","SelectOption","key","event","onSelected","setState","render","messages","Perspective","injectIntl","DashboardBase","costType","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","default","undefined","onItemClicked","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","comparisonContainer","tabs","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showInfrastructureLabel","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getFormattedUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","currentInfrastructureData","previousInfrastructureData","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","forecastInfrastructureData","computedForecastInfrastructureItem","ReportSummaryComponent","currentInfrastructureCostData","forecastConeData","forecastInfrastructureConeData","formatOptions","formatter","format","previousInfrastructureCostData","showForecast","currentData","previousData","showUsageLegendLabel","getUnits","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","to","getDetailsLinkTitle","count","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","tabIndex","updateTab","componentDidMount","fetchForecasts","fetchReports","componentDidUpdate","prevProps","mapStateToProps","widget","awsDashboard","queries","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsDashboardWidget","connect","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","alignSelf","flexGrow","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_lg","headerContent","justifyContent","headerContentLeft","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","main","paddingBottom","paddingTop","ocpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpCloudOptions","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOcpCloudAvailable","getCostType","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","handleCostTypeSelected","hasAws","hasAzure","hasGcp","hasIbm","hasOcp","hasOcpCloud","getDefaultInfrastructurePerspective","perspective","getDefaultOcpPerspective","ocpProviders","userAccess","getPerspective","isAwsCloudAvailable","isAzureCloudAvailable","handlePerspectiveSelected","getRouteForQuery","query","history","location","pathname","getQueryRoute","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","newQuery","JSON","parse","stringify","cost_type","replace","tabKey","isGcpCloudAvailable","isIbmCloudAvailable","hasAwsCloud","hasAzureCloud","hasGcpCloud","hasIbmCloud","providers","providersFetchStatus","userAccessFetchStatus","noAwsProviders","noAzureProviders","noGcpProviders","noIbmProviders","noOcpProviders","noProviders","isLoading","TitleSizes","Popover","enableFlip","bodyContent","Button","ButtonVariant","queryFromRoute","parseQuery","search","Number","isNaN","queryString","getQuery","providersQueryString","providersError","userAccessQueryString","userAccessError","countDecimals","useLocale","decimalSeparator","toLocaleString","substring","decimals","split","formatCurrency","fValue","currency","toUpperCase","formatCurrencyAbbreviation","abbreviationFormats","symbol","f","minimumFractionDigits","maximumFractionDigits","formatCurrencyRate","formatCurrencyRateRaw","formatCurrencyRaw","currencyDisplay","trim","formatUnits","unitsLookupKey","formatUsageHrs","formatUsageGb","unknownTypeFormatter","formatPercentage","formatPercentageMarkup","isCurrencyFormatValid","test","isPercentageFormatValid","unFormat","groupSeparator","rawValue","lookup","toLowerCase","hasAccess","userAccessType","result","Array","isArray","d","access","hasProviders","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","hasIbmAccess","hasOcpAccess"],"sourceRoot":""}