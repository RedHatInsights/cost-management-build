{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/utils/getComputedReportItems.ts","webpack:///./src/components/commonChart/chartUtils.ts","webpack:///./src/testIds.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/commonChart/chartLegend.tsx","webpack:///./src/components/commonChart/chart.styles.ts","webpack:///./src/components/commonChart/chartLegendItem.styles.ts","webpack:///./src/components/commonChart/chartLegendItem.tsx","webpack:///./src/components/commonChart/chartTitle.tsx","webpack:///./src/components/emptyState/emptyState.styles.ts","webpack:///./src/components/emptyState/emptyState.tsx","webpack:///./src/pages/dashboard/dashboard.styles.ts","webpack:///./src/components/link/link.tsx","webpack:///./src/components/reportSummary/reportSummary.styles.ts","webpack:///./src/components/reportSummary/reportSummary.tsx","webpack:///./src/components/reportSummary/reportSummaryDetails.styles.ts","webpack:///./src/components/reportSummary/reportSummaryDetails.tsx","webpack:///./src/components/progressBar/progressBar.styles.ts","webpack:///./src/components/progressBar/progressBar.tsx","webpack:///./src/components/reportSummary/reportSummaryItem.styles.ts","webpack:///./src/components/reportSummary/reportSummaryItem.tsx","webpack:///./src/components/reportSummary/reportSummaryItems.tsx","webpack:///./src/components/trendChart/trendChart.styles.ts","webpack:///./src/components/trendChart/trendChart.tsx","webpack:///./src/components/reportSummary/reportSummaryTrend.tsx","webpack:///./src/components/tabs/tabContent.tsx","webpack:///./src/components/tabs/tabItem.styles.ts","webpack:///./src/components/tabs/tabItem.tsx","webpack:///./src/components/tabs/tabNavigation.styles.ts","webpack:///./src/components/tabs/tabNavigation.tsx","webpack:///./src/components/tabs/tabs.tsx","webpack:///./src/pages/dashboard/dashboardWidget.tsx","webpack:///./src/pages/dashboard/dashboard.tsx","webpack:///./src/pages/dashboard/index.ts"],"names":["formatValue","value","unit","options","lookup","split","toLowerCase","fValue","formatCurrency","formatStorage","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","groups","getComputedReportItems","report","idKey","labelKey","sortKey","sortDirection","Object","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedReportItems","key","direction","itemMap","visitDataPoint","dataPoint","values","forEach","total","id","label","account_alias","assign","units","group","data","getIdKeyForGroupBy","groupBy","account","instance_type","region","service","transformReport","type","computedItems","utils_getComputedReportItems__WEBPACK_IMPORTED_MODULE_3__","map","i","createDatum","reduce","acc","d","prevValue","length","y","computedItem","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","parseFloat","name","getDateRangeString","datums","start","end","today","Date","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_2___default","getDatumDateRange","monthName","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","startDate","endDate","getTooltipLabel","datum","formatOptions","toString","getTestProps","data-testid","testIds","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","providers","add_btn","bucket_input","name_input","resource_name_input","type_input","sidebar","nav","link","backdrop","getValueForItem","item","sort","array","a","b","aVal","bVal","__webpack_require__","__webpack_exports__","styles","StyleSheet","create","legend","display","alignItems","ChartLegend","children","styling","Boolean","react_default","createElement","className","chartStyles","padding","strokeWidth","fillOpacity","tooltipText","fontSize","fill","esm","tooltipFlyout","previousMonth","stroke","currentMonth","chartLegendItem_styles_styles","reportSummaryTrend",":not(foo) svg","overflow",":not(foo) text","legendItem","color","var","marginRight","height","width","borderWidth","borderStyle","currentColor","backgroundColor","borderColor","previousColor","ChartLegendItem","isCurrent","index","chartUtils","chartTitle_styles","chartTitle","marginBottom","ChartTitle","reportSummary","subtitle","EmptyState","subTitle","title","Card","CardHeader","Title","size","CardBody","dashboard_styles_styles","banner","justifyContent","content","theme","index_esm","emptyState","CastedButton","Button","link_Link","props","component","Link","variant","reportSummary_styles_styles","ReportSummary","es","detailsLink","status","t","CardFooter","reportSummaryDetails_styles_styles","reportSummaryDetails","text","paddingBottom","lineHeight","ReportSummaryDetails","progressBar_styles_styles","progressBar","marginTop","bar","ProgressBar","progress","Math","min","max","reportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","info","test","ReportSummaryItem","totalValue","percent","defaultProps","v","reportSummaryItems_ReportSummaryItems","Component","[object Object]","nextProps","this","otherIndex","findIndex","slice","items","getItems","trendChart_styles_styles","trendChart_TrendChart","super","arguments","containerRef","createRef","state","formatDatumValue","formatDatumOptions","handleResize","setState","current","clientWidth","previous","setTimeout","window","addEventListener","removeEventListener","currentData","previousData","ref","victory_group","domainPadding","containerComponent","victory_voronoi_container","voronoiDimension","responsive","labels","labelComponent","victory_tooltip","cornerRadius","flyoutStyle","victory_area","commonChart","ReportSummaryTrend","TabContent","role","tabItem_styles_styles","tabItem","position","flexGrow","textAlign","cursor","selected","backgroundImage","tabItem_TabItem","handleClick","onSelect","isSelected","onClick","aria-selected","tabIndex","tabNavigation_styles_styles","tabNavigation","tabNavigation_TabNavigation","handleKeyDown","event","includes","tabs","onChange","modifier","newIndex","onKeyDown","tab","Tabs","selectedTab","find","getIdKeyForTab","mapStateToProps","common","widgetId","widget","dashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","tabsQuery","reports","selectReport","reportType","selectReportFetchStatus","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","DashboardWidget","react_redux_es","getTabTitle","getDetailsLinkTitle","buildDetailsLink","query","group_by","order_by","renderTab","tabData","topItems","currentTab","utils_formatValue","handleTabChange","tabId","titleKey","trend","details","availableTabs","month","get_month_default","format_default","start_of_month_default","count","get_date_default","detailLabel","context","labelKeyContext","to","trendTitle","dashboard_mapStateToProps","store_providers","selectProviders","providersFetchStatus","selectProvidersFetchStatus","widgets","selectCurrentWidgets","Dashboard","openProvidersModal","ui","lg","secondary","Grid","gutter","GridItem","xl","target","href","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_dashboard__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"2d14e53a0869675598dd.bundle.js","sourcesContent":["export const formatValue = (value, unit, options = {}) => {\n    const lookup = unit && unit.split('-')[0].toLowerCase();\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n            return formatStorage(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, _unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatStorage = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","import { sort } from './sort';\nconst groups = ['services', 'accounts', 'instance_types', 'regions'];\nexport function getComputedReportItems({ report, idKey, labelKey = idKey, sortKey = 'total', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const total = value.total;\n                const id = value[idKey];\n                let label = value[labelKey];\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        id,\n                        total,\n                        label,\n                        units: value.units,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { total: itemMap[id].total + total });\n            });\n        }\n        groups.forEach(group => {\n            if (dataPoint[group]) {\n                return dataPoint[group].forEach(visitDataPoint);\n            }\n        });\n    };\n    report.data.forEach(visitDataPoint);\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import format from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport startOfMonth from 'date-fns/start_of_month';\nimport { getComputedReportItems, } from 'utils/getComputedReportItems';\nexport function transformReport(report, type = 1 /* daily */, key = 'date') {\n    if (!report) {\n        return [];\n    }\n    const computedItems = getComputedReportItems({\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    });\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d.total, d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    return {\n        x: xVal,\n        y: parseFloat(value.toFixed(2)),\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums) {\n    if (!datums.length) {\n        const today = new Date();\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRangeString(datums) {\n    const [start, end] = getDatumDateRange(datums);\n    const monthName = format(start, 'MMM');\n    const startDate = getDate(start);\n    const endDate = getDate(end);\n    return `${monthName} ${getDate(start)}${startDate !== endDate ? ` - ${endDate}` : ''}`;\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'MMM D YYYY');\n        return `${date}: ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","import { css } from '@patternfly/react-styles';\nimport { StyleSheet } from '@patternfly/react-styles';\nimport React from 'react';\nconst styles = StyleSheet.create({\n    legend: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n});\nconst ChartLegend = ({ children, style }) => {\n    const styling = Boolean(style) && Boolean(style.legend) ? style.legend : styles.legend;\n    return React.createElement(\"div\", { className: css(styling) }, children);\n};\nexport { ChartLegend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_dark_100, global_Color_light_100, global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    padding: 8,\n    group: {\n        data: { strokeWidth: 2, fillOpacity: 0.4 },\n    },\n    tooltipText: {\n        fontSize: '14px',\n        fill: global_Color_light_100.value,\n    },\n    tooltipFlyout: { fill: global_Color_dark_100.value },\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    reportSummaryTrend: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        ':not(foo) text': {\n            fontSize: '12px',\n            length: '12px',\n        },\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BorderWidth_sm, global_Color_200, global_FontSize_xs, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { chartStyles } from './chart.styles';\nexport const styles = StyleSheet.create({\n    legendItem: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginRight: global_spacer_md.value,\n    },\n    color: {\n        height: 10,\n        width: 10,\n        marginRight: global_spacer_sm.value,\n        borderWidth: global_BorderWidth_sm.value,\n        borderStyle: 'solid',\n    },\n    currentColor: {\n        backgroundColor: chartStyles.currentMonth.data.fill,\n        borderColor: chartStyles.currentMonth.data.stroke,\n    },\n    previousColor: {\n        backgroundColor: chartStyles.previousMonth.data.fill,\n        borderColor: chartStyles.previousMonth.data.stroke,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './chartLegendItem.styles';\nimport { getDateRangeString } from './chartUtils';\nconst ChartLegendItem = ({ data, isCurrent, idKey = 'date', index, style, }) => {\n    if (!data || data.length === 0) {\n        return React.createElement(\"div\", null);\n    }\n    const styling = Boolean(style) && Boolean(style.legendItem)\n        ? style.legendItem\n        : styles.legendItem;\n    if (idKey === 'date') {\n        const label = getDateRangeString(data);\n        return (React.createElement(\"div\", { className: css(styling) },\n            React.createElement(\"div\", { className: css(styles.color, isCurrent ? styles.currentColor : styles.previousColor) }),\n            label));\n    }\n    else {\n        return (React.createElement(\"div\", { key: data[index].key, className: css(styling) },\n            React.createElement(\"div\", { className: css(styles.color, isCurrent ? styles.currentColor : styles.previousColor) }),\n            data[index].key));\n    }\n};\nexport { ChartLegendItem };\n","import { css } from '@patternfly/react-styles';\nimport { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_xs, global_spacer_sm } from '@patternfly/react-tokens';\nimport React from 'react';\nconst styles = StyleSheet.create({\n    chartTitle: {\n        fontSize: global_FontSize_xs.value,\n        marginBottom: global_spacer_sm.value,\n    },\n});\nconst ChartTitle = ({ children }) => (React.createElement(\"div\", { className: css(styles.chartTitle) }, children));\nexport { ChartTitle };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n    },\n});\n","import { Card, CardBody, CardHeader, Title } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyState.styles';\nconst EmptyState = ({ children, subTitle, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, children)));\nexport { EmptyState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { c_card_BackgroundColor, global_Color_100, global_Color_200, global_Color_light_100, global_Color_light_200, global_spacer_lg, global_spacer_xl, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    banner: {\n        height: 60,\n        color: global_Color_100.var,\n        marginBottom: global_spacer_xl.value,\n        padding: `0 ${global_spacer_xl.value}`,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    },\n    content: {\n        padding: `0 ${global_spacer_xl.value}`,\n    },\n});\nexport const theme = css `\n  min-height: 100%;\n  padding-bottom: ${global_spacer_lg.var};\n  background-color: rgba(0, 0, 0, 0.5);\n  ${global_Color_100.name}: ${global_Color_light_100.value};\n  ${global_Color_200.name}: ${global_Color_light_200.value};\n\n  & .pf-c-card {\n    ${global_Color_100.name}: ${global_Color_light_100.value};\n    ${global_Color_200.name}: ${global_Color_light_200.value};\n    ${c_card_BackgroundColor.name}: rgba(0, 0, 0, 0.5);\n  }\n`;\nexport const emptyState = css `\n  & ul {\n    list-style-type: initial;\n    margin-left: 20px;\n  }\n`;\n","import { Button } from '@patternfly/react-core';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nconst CastedButton = Button;\nconst Link = props => (React.createElement(CastedButton, Object.assign({ component: RouterLink, variant: \"link\" }, props)));\nexport { Link };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './reportSummary.styles';\nconst ReportSummaryBase = ({ title, subTitle, detailsLink, children, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? `${t('loading')}...` : children),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst ReportSummary = translate()(ReportSummaryBase);\nexport { ReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './reportSummaryDetails.styles';\nconst ReportSummaryDetails = ({ label, formatValue, formatOptions, report, }) => {\n    let value = '----';\n    if (report) {\n        value = report.total\n            ? formatValue(report.total.value, report.total.units, formatOptions)\n            : 0;\n    }\n    return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n        React.createElement(\"div\", { className: css(styles.value) }, value),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, label))));\n};\nexport { ReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_primary_color_200, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    progressBar: {\n        height: 10,\n        backgroundColor: 'rgba(0, 123, 186, 0.2)',\n        marginTop: global_spacer_sm.value,\n        marginBottom: global_spacer_lg.value,\n    },\n    bar: {\n        height: '100%',\n        backgroundColor: global_primary_color_200.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './progressBar.styles';\nconst ProgressBar = ({ progress }) => {\n    const width = Math.min(Math.max(0, progress), 100); // force between 0 - 100;\n    return (React.createElement(\"div\", { className: css(styles.progressBar) },\n        React.createElement(\"div\", { className: css(styles.bar), style: { width: `${width}%` } })));\n};\nexport { ProgressBar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_xs, global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    info: {\n        display: 'flex',\n        fontSize: global_FontSize_xs.value,\n        justifyContent: 'space-between',\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { ProgressBar } from '../progressBar';\nimport { styles } from './reportSummaryItem.styles';\nconst ReportSummaryItem = ({ label, value, totalValue, formatValue, units, formatOptions, }) => {\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(\"div\", { className: css(styles.info) },\n            React.createElement(\"div\", null, label),\n            React.createElement(\"div\", null,\n                formatValue(value, units, formatOptions),\n                \" (\",\n                percent.toFixed(2),\n                \"%)\")),\n        React.createElement(ProgressBar, { progress: percent })));\n};\nReportSummaryItem.defaultProps = {\n    formatValue: v => v,\n};\nexport { ReportSummaryItem };\n","import React from 'react';\nimport { getComputedReportItems, } from 'utils/getComputedReportItems';\nclass ReportSummaryItems extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => i.id === 'Other');\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return null;\n        }\n        const items = this.getItems();\n        return React.createElement(\"ul\", null, children({ items }));\n    }\n}\nexport { ReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_dark_100, global_Color_light_100, global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    padding: 8,\n    group: {\n        data: { strokeWidth: 2, fillOpacity: 0.4 },\n    },\n    tooltipText: {\n        fontSize: '14px',\n        fill: global_Color_light_100.value,\n    },\n    tooltipFlyout: { fill: global_Color_dark_100.value },\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    reportSummaryTrend: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        ':not(foo) text': {\n            fontSize: '12px',\n            length: '12px',\n        },\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { ChartLegend, ChartLegendItem, ChartTitle, } from 'components/commonChart';\nimport { getTooltipLabel, transformReport, } from 'components/commonChart/chartUtils';\nimport React from 'react';\nimport { VictoryArea, VictoryGroup, VictoryTooltip, VictoryVoronoiContainer, } from 'victory';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const label = getTooltipLabel(datum, formatDatumValue, formatDatumOptions, 'date');\n            return label;\n        };\n        this.handleResize = () => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n        };\n    }\n    shouldComponentUpdate(nextProps) {\n        if (!nextProps.current || !nextProps.previous) {\n            return false;\n        }\n        return true;\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n            window.addEventListener('resize', this.handleResize);\n        });\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    render() {\n        const { title, current, previous, height, type } = this.props;\n        const currentData = transformReport(current, type);\n        const previousData = transformReport(previous, type);\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryTrend), ref: this.containerRef },\n            React.createElement(VictoryGroup, { padding: chartStyles.padding, style: chartStyles.group, height: height, width: this.state.width, domainPadding: { y: [0, 8] }, containerComponent: React.createElement(VictoryVoronoiContainer, { voronoiDimension: \"x\", title: title, responsive: false, labels: this.getTooltipLabel, labelComponent: React.createElement(VictoryTooltip, { cornerRadius: 0, style: chartStyles.tooltipText, flyoutStyle: chartStyles.tooltipFlyout }) }) },\n                Boolean(previousData.length) && (React.createElement(VictoryArea, { style: chartStyles.previousMonth, data: previousData })),\n                Boolean(currentData.length) && (React.createElement(VictoryArea, { style: chartStyles.currentMonth, data: currentData }))),\n            React.createElement(ChartTitle, null, title),\n            React.createElement(ChartLegend, null,\n                React.createElement(ChartLegendItem, { isCurrent: true, data: currentData }),\n                React.createElement(ChartLegendItem, { data: previousData }))));\n    }\n}\nexport { TrendChart };\n","import React from 'react';\nimport { TrendChart } from '../trendChart';\nconst ReportSummaryTrend = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(TrendChart, Object.assign({ height: 75 }, props))));\nexport { ReportSummaryTrend };\n","import React from 'react';\nexport const TabContent = ({ data }) => {\n    const content = typeof data.content === 'function' ? data.content(data) : data.content;\n    return React.createElement(\"div\", { role: \"tabpanel\" }, content);\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm, global_primary_color_200, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabItem: {\n        position: 'relative',\n        flexGrow: 1,\n        textAlign: 'center',\n        fontSize: global_FontSize_sm.value,\n        padding: global_spacer_sm.value,\n        cursor: 'pointer',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    selected: {\n        backgroundImage: `linear-gradient(to top, ${global_primary_color_200.value} 2px, transparent 2px)`,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './tabItem.styles';\nclass TabItem extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleClick = () => {\n            const { onSelect, data } = this.props;\n            onSelect(data.id);\n        };\n    }\n    render() {\n        const { data, isSelected } = this.props;\n        return (React.createElement(\"div\", { role: \"tab\", onClick: this.handleClick, \"aria-selected\": isSelected, tabIndex: isSelected ? 0 : -1, className: css(styles.tabItem, isSelected && styles.selected) }, data.label));\n    }\n}\nexport { TabItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '../../../node_modules/@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabNavigation: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginBottom: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { TabItem } from './tabItem';\nimport { styles } from './tabNavigation.styles';\nclass TabNavigation extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleKeyDown = (event) => {\n            if (!['ArrowRight', 'ArrowLeft'].includes(event.key)) {\n                return;\n            }\n            const { selected, tabs, onChange } = this.props;\n            const modifier = event.key === 'ArrowRight' ? 1 : -1;\n            const selectedIndex = tabs.findIndex(t => t.id === selected.id);\n            const newIndex = selectedIndex + modifier;\n            if (newIndex < 0 || newIndex > tabs.length - 1) {\n                return;\n            }\n            onChange(tabs[newIndex].id);\n        };\n    }\n    render() {\n        const { tabs, selected, onChange } = this.props;\n        return (React.createElement(\"div\", { role: \"tablist\", className: css(styles.tabNavigation), onKeyDown: this.handleKeyDown }, tabs.map(tab => (React.createElement(TabItem, { onSelect: onChange, key: tab.id, data: tab, isSelected: tab.id === selected.id })))));\n    }\n}\nexport { TabNavigation };\n","import React from 'react';\nimport { TabContent } from './tabContent';\nimport { TabNavigation } from './tabNavigation';\nconst Tabs = ({ selected, tabs, onChange }) => {\n    const selectedTab = tabs.find(tab => tab.id === selected);\n    return (React.createElement(\"div\", null,\n        React.createElement(TabNavigation, { tabs: tabs, selected: selectedTab, onChange: onChange }),\n        React.createElement(TabContent, { data: selectedTab })));\n};\nexport { Tabs };\n","import { getQuery, parseQuery } from 'api/query';\nimport { Link } from 'components/link';\nimport { ReportSummary, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, } from 'components/reportSummary';\nimport { Tabs } from 'components/tabs';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { dashboardActions, dashboardSelectors, } from 'store/dashboard';\nimport { reportsSelectors } from 'store/reports';\nimport { formatValue } from 'utils/formatValue';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/cost?${getQuery({\n                group_by: groupBy,\n                order_by: { total: 'desc' },\n            })}`;\n        };\n        this.renderTab = (tabData) => {\n            const { tabs, topItems } = this.props;\n            const currentTab = tabData.id;\n            return (React.createElement(ReportSummaryItems, { idKey: getIdKeyForTab(currentTab), report: tabs }, ({ items }) => items.map(tabItem => (React.createElement(ReportSummaryItem, { key: tabItem.id, formatOptions: topItems.formatOptions, formatValue: formatValue, label: tabItem.label, totalValue: tabs.total.value, units: tabItem.units, value: tabItem.total })))));\n        };\n        this.handleTabChange = (tabId) => {\n            this.props.updateTab(this.props.id, tabId);\n        };\n    }\n    componentDidMount() {\n        const { fetchReports, widgetId } = this.props;\n        fetchReports(widgetId);\n    }\n    render() {\n        const { t, titleKey, trend, details, current, previous, availableTabs, currentTab, reportType, status, } = this.props;\n        const today = new Date();\n        const month = getMonth(today);\n        const endDate = formatDate(today, 'Do');\n        const startDate = formatDate(startOfMonth(today), 'Do');\n        const title = t(titleKey, { endDate, month, startDate });\n        const subTitle = t('dashboard_page.widget_subtitle', {\n            endDate,\n            month,\n            startDate,\n            count: getDate(today),\n        });\n        const detailLabel = t(details.labelKey, {\n            context: details.labelKeyContext,\n        });\n        const detailsLink = reportType === \"cost\" /* cost */ && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab)));\n        const trendTitle = t(trend.titleKey);\n        return (React.createElement(ReportSummary, { title: title, subTitle: subTitle, detailsLink: detailsLink, status: status },\n            React.createElement(ReportSummaryDetails, { report: current, formatValue: formatValue, label: detailLabel, formatOptions: details.formatOptions }),\n            React.createElement(ReportSummaryTrend, { type: trend.type, title: trendTitle, current: current, previous: previous, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions }),\n            React.createElement(Tabs, { tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = dashboardSelectors.selectWidget(state, widgetId);\n    const queries = dashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, current: reportsSelectors.selectReport(state, widget.reportType, queries.current), previous: reportsSelectors.selectReport(state, widget.reportType, queries.previous), tabs: reportsSelectors.selectReport(state, widget.reportType, queries.tabs), status: reportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current) });\n});\nconst mapDispatchToProps = {\n    fetchReports: dashboardActions.fetchWidgetReports,\n    updateTab: dashboardActions.changeWidgetTab,\n};\nconst DashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { DashboardWidget, DashboardWidgetBase };\n","import { Button, ButtonType, ButtonVariant, Grid, GridItem, Title, TitleSize, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyState } from 'components/emptyState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { dashboardSelectors } from 'store/dashboard';\nimport { providersSelectors } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { getTestProps, testIds } from 'testIds';\nimport { emptyState, styles, theme } from './dashboard.styles';\nimport { DashboardWidget } from './dashboardWidget';\nconst DashboardBase = ({ t, openProvidersModal, providers, providersFetchStatus, widgets, }) => (React.createElement(\"div\", { className: theme },\n    React.createElement(\"header\", { className: css(styles.banner) },\n        React.createElement(Title, { size: TitleSize.lg }, t('dashboard_page.title')),\n        React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.add_btn), { onClick: openProvidersModal, type: ButtonType.submit, variant: ButtonVariant.secondary }), t('providers.add_account'))),\n    React.createElement(\"div\", { className: css(styles.content) }, Boolean(providers &&\n        providers.count > 0 &&\n        providersFetchStatus === 2 /* complete */) ? (React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        return (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))) : (React.createElement(Grid, { className: css(emptyState), gutter: \"md\" },\n        React.createElement(GridItem, null,\n            React.createElement(EmptyState, { title: t('dashboard_page.empty_state_title') },\n                \"View the\",\n                React.createElement(\"a\", { target: \"_blank\", href: \"https://koku.readthedocs.io/en/latest/providers.html#adding-an-aws-account\" },\n                    ' ',\n                    \"Koku documentation\",\n                    ' '),\n                \"and learn how to configure your AWS account to allow Koku access. Then, click\",\n                React.createElement(\"a\", { href: \"javascript:void(0)\", onClick: openProvidersModal },\n                    ' ',\n                    \"Add Account\"),\n                ' ',\n                \"to configure.\")))))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        providers: providersSelectors.selectProviders(state),\n        providersFetchStatus: providersSelectors.selectProvidersFetchStatus(state),\n        widgets: dashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst Dashboard = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(DashboardBase));\nexport default Dashboard;\n","import { hot } from 'react-hot-loader';\nimport Dashboard from './dashboard';\nexport default hot(module)(Dashboard);\n"],"sourceRoot":""}