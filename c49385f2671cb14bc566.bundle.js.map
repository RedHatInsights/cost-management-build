{"version":3,"sources":["webpack:///./src/pages/providersModal/index.ts","webpack:///./src/testIds.ts","webpack:///./src/components/randomId/randomId.tsx","webpack:///./src/components/formGroup/formGroup.styles.ts","webpack:///./src/components/formGroup/formGroup.tsx","webpack:///./src/pages/providersModal/attributeField.tsx","webpack:///./src/pages/providersModal/providersModal.styles.ts","webpack:///./src/pages/providersModal/providersModal.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_providersModal__WEBPACK_IMPORTED_MODULE_1__","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","providers","add_btn","bucket_input","empty_state_add_btn","name_input","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop","currentId","randomId_RandomId","react_default","a","Component","[object Object]","super","arguments","this","props","prefix","children","defaultProps","styles","StyleSheet","create","formGroup","marginBottom","esm","value","label","display","fontWeight","paddingBottom","FormGroup","createElement","className","htmlFor","cloneElement","Children","only","attributeField","TextInput","assign","aria-label","testProps","autoFocus","Boolean","isValid","error","onChange","placeholder","docs","modal","width","validator","name","t","RegExp","test","bucket","resourceName","clusterID","react_redux_es","common","state","isProviderModalOpen","ui","selectIsProvidersModalOpen","selectAddProviderError","fetchStatus","selectAddProviderFetchStatus","addProvider","clearProviderFailure","closeProvidersModal","es","defaultState","type","handleAddProvider","authentication","provider_resource_name","billing_source","handleCancel","handleChange","validatorFnc","attribute","setState","handleSelect","attributes","prevProps","emptyField","some","attr","trim","length","invalidField","find","bucketError","response","data","nameError","resourceNameError","errorMsg","Modal","isLarge","isOpen","onClose","title","actions","Button","key","onClick","variant","secondary","isDisabled","primary","Alert","danger","href","target","Select","onBlur","helpers","onFocus","SelectOption","map"],"mappings":"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","file":"c49385f2671cb14bc566.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport ProvidersModal from './providersModal';\nexport default hot(module)(ProvidersModal);\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import React from 'react';\nlet currentId = 0;\nclass RandomId extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.id = `${this.props.prefix}${currentId++}`;\n    }\n    render() {\n        return this.props.children({ id: this.id });\n    }\n}\nRandomId.defaultProps = {\n    prefix: 'random-id-',\n};\nexport { RandomId };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontWeight_normal, global_gutter, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    formGroup: {\n        marginBottom: global_gutter.value,\n    },\n    label: {\n        display: 'block',\n        fontWeight: global_FontWeight_normal.value,\n        paddingBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { RandomId } from '../randomId';\nimport { styles } from './formGroup.styles';\nexport const FormGroup = ({ label, children }) => (React.createElement(RandomId, { prefix: label }, ({ id }) => (React.createElement(\"div\", { className: css(styles.formGroup) },\n    React.createElement(\"label\", { className: css(styles.label), htmlFor: id }, label),\n    React.createElement(\"div\", null, React.cloneElement(React.Children.only(children), { id }))))));\n","import { TextInput } from '@patternfly/react-core';\nimport { FormGroup } from 'components/formGroup';\nimport React from 'react';\nconst AttributeField = props => (React.createElement(FormGroup, { label: props.label },\n    React.createElement(TextInput, Object.assign({ \"aria-label\": `input-${props.label}` }, props.testProps, { autoFocus: Boolean(props.autoFocus), isValid: !Boolean(props.error), onChange: props.onChange, placeholder: props.placeholder, value: props.value }))));\nexport default AttributeField;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    alert: {\n        marginBottom: global_spacer_md.value,\n    },\n    docs: {\n        marginBottom: global_spacer_md.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        width: '700px',\n    },\n});\n","import { Alert, AlertVariant, Button, ButtonVariant, Modal, Select, SelectOption, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { FormGroup } from 'components/formGroup';\nimport { noop } from 'patternfly-react';\nimport React from 'react';\nimport { translate, } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersActions, providersSelectors } from 'store/providers';\nimport { uiActions, uiSelectors } from 'store/ui';\nimport { getTestProps, testIds } from 'testIds';\nimport AttributeField from './attributeField';\nimport { styles } from './providersModal.styles';\nconst validator = {\n    name: (value, t) => !new RegExp('^.?').test(value) ? t('providers.name_error') : null,\n    bucket: (value, t) => !new RegExp('^[a-zA-Z0-9.\\\\-_]{0,255}$').test(value)\n        ? t('providers.bucket_error')\n        : null,\n    resourceName: (value, t) => !new RegExp('^arn:aws:').test(value)\n        ? t('providers.resource_name_error')\n        : null,\n    clusterID: (value, t) => !new RegExp('^.?').test(value) ? t('providers.name_error') : null,\n};\nexport class ProvidersModal extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            name: {\n                id: 'name',\n                label: 'providers.name_label',\n                placeholder: 'HCCM',\n                testProps: getTestProps(testIds.providers.name_input),\n                value: '',\n                error: null,\n                autoFocus: true,\n            },\n            bucket: {\n                id: 'bucket',\n                label: 'providers.bucket_label',\n                placeholder: 'cost-usage-bucket',\n                testProps: getTestProps(testIds.providers.bucket_input),\n                value: '',\n                error: null,\n            },\n            resourceName: {\n                id: 'resourceName',\n                label: 'providers.resource_name_label',\n                testProps: getTestProps(testIds.providers.resource_name_input),\n                placeholder: 'arn:aws:iam::589173575009:role/CostManagement',\n                value: '',\n                error: null,\n            },\n            clusterID: {\n                id: 'clusterID',\n                label: 'providers.cluster_id_label',\n                testProps: getTestProps(testIds.providers.cluster_id_input),\n                placeholder: 'OCP-CostManagement',\n                value: '',\n                error: null,\n            },\n            type: 'AWS',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleAddProvider = () => {\n            switch (this.state.type) {\n                case 'AWS':\n                    return this.props.addProvider({\n                        name: this.state.name.value,\n                        type: this.state.type,\n                        authentication: {\n                            provider_resource_name: this.state.resourceName.value,\n                        },\n                        billing_source: {\n                            bucket: this.state.bucket.value,\n                        },\n                    });\n                case 'OCP':\n                    return this.props.addProvider({\n                        name: this.state.name.value,\n                        type: this.state.type,\n                        authentication: {\n                            provider_resource_name: this.state.clusterID.value,\n                        },\n                    });\n            }\n        };\n        this.handleCancel = () => {\n            this.props.closeProvidersModal();\n        };\n        this.handleChange = (validatorFnc, attribute) => (value) => {\n            const { t } = this.props;\n            this.setState(() => (Object.assign({}, this.state, { [attribute.id]: Object.assign({}, attribute, { value, error: validatorFnc(value, t) }) })));\n            this.props.clearProviderFailure(); // Clear previous errors when user edits input field\n        };\n        this.handleSelect = value => {\n            this.setState(Object.assign({}, this.defaultState, { type: value }));\n            this.props.clearProviderFailure(); // Clear previous errors when user edits input field\n        };\n        this.attributes = () => {\n            switch (this.state.type) {\n                case 'AWS':\n                    return [this.state.name, this.state.bucket, this.state.resourceName];\n                case 'OCP':\n                    return [this.state.name, this.state.clusterID];\n                default:\n                    return [];\n            }\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { isProviderModalOpen } = this.props;\n        if (isProviderModalOpen && !prevProps.isProviderModalOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n    }\n    render() {\n        const { t, error } = this.props;\n        const emptyField = this.attributes().some(attr => attr.value.trim().length === 0);\n        const invalidField = this.attributes().find(attr => attr.error !== null);\n        const bucketError = error &&\n            error.response &&\n            (error.response.data.bucket || error.response.data.billing_source);\n        const nameError = error && error.response && error.response.data.name;\n        const resourceNameError = error &&\n            error.response &&\n            (error.response.data.provider_resource_name ||\n                error.response.data.authentication);\n        let errorMsg = t('providers.default_error');\n        if (bucketError) {\n            errorMsg =\n                error.response.data.bucket || error.response.data.billing_source.bucket;\n        }\n        else if (nameError) {\n            errorMsg = error.response.data.name;\n        }\n        else if (resourceNameError) {\n            errorMsg =\n                error.response.data.provider_resource_name ||\n                    error.response.data.authentication.provider_resource_name;\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isProviderModalOpen, onClose: this.handleCancel, title: t('providers.add_source'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.cancel_btn), { key: \"cancel\", onClick: this.handleCancel, variant: ButtonVariant.secondary }), t('providers.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.submit_btn), { key: \"confirm\", isDisabled: emptyField ||\n                        Boolean(invalidField) ||\n                        this.props.fetchStatus === 1 /* inProgress */, onClick: this.handleAddProvider, variant: ButtonVariant.primary }), t('providers.confirm')),\n            ] },\n            Boolean(error || invalidField) && (React.createElement(\"div\", { className: css(styles.alert) },\n                React.createElement(Alert, Object.assign({}, getTestProps(testIds.login.alert), { variant: AlertVariant.danger, title: (invalidField && invalidField.error) || errorMsg })))),\n            React.createElement(\"p\", { className: css(styles.docs) },\n                \"View the\",\n                ' ',\n                React.createElement(\"a\", { href: \"https://koku.readthedocs.io/en/latest/providers.html#adding-an-aws-account\", target: \"_blank\" }, \"Koku documentation\"),\n                ' ',\n                \"and learn how to configure your AWS account to allow Koku access.\"),\n            React.createElement(FormGroup, { label: t('providers.type_label') },\n                React.createElement(Select, { value: this.state.type, \"aria-label\": \"provider type selector\", onBlur: noop, onFocus: noop, onChange: this.handleSelect },\n                    React.createElement(SelectOption, { label: \"AWS\", value: \"AWS\" }),\n                    React.createElement(SelectOption, { label: \"OCP\", value: \"OCP\" }))),\n            this.attributes().map(attr => (React.createElement(AttributeField, { key: `attribute-field-${attr.id}`, value: attr.value, label: t(attr.label), testProps: attr.testProps, placeholder: attr.placeholder, error: attr.error, onChange: this.handleChange(validator[attr.id], attr) })))));\n    }\n}\nexport default connect(createMapStateToProps(state => ({\n    isProviderModalOpen: uiSelectors.selectIsProvidersModalOpen(state),\n    error: providersSelectors.selectAddProviderError(state),\n    fetchStatus: providersSelectors.selectAddProviderFetchStatus(state),\n})), {\n    addProvider: providersActions.addProvider,\n    clearProviderFailure: providersActions.clearProviderFailure,\n    closeProvidersModal: uiActions.closeProvidersModal,\n})(translate()(ProvidersModal));\n"],"sourceRoot":""}