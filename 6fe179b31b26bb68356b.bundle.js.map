{"version":3,"sources":["webpack:///./src/pages/awsDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/awsDetails/awsDetails.styles.ts","webpack:///./src/pages/awsDetails/detailsHeader.styles.ts","webpack:///./src/pages/awsDetails/groupBy.styles.ts","webpack:///./src/pages/awsDetails/groupBy.tsx","webpack:///./src/pages/awsDetails/detailsHeader.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.styles.ts","webpack:///./src/pages/awsDetails/detailsTagView.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.tsx","webpack:///./src/pages/awsDetails/exportModal.styles.ts","webpack:///./src/pages/awsDetails/exportModal.tsx","webpack:///./src/pages/awsDetails/historicalChart.styles.ts","webpack:///./src/pages/awsDetails/historicalChart.tsx","webpack:///./src/pages/awsDetails/historicalModal.styles.ts","webpack:///./src/pages/awsDetails/historicalModal.tsx","webpack:///./src/pages/awsDetails/detailsActions.tsx","webpack:///./src/pages/awsDetails/detailsTable.styles.ts","webpack:///./src/pages/awsDetails/detailsTableItem.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.tsx","webpack:///./src/pages/awsDetails/detailsWidget.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetView.tsx","webpack:///./src/pages/awsDetails/detailsWidget.tsx","webpack:///./src/pages/awsDetails/detailsTableItem.tsx","webpack:///./src/pages/awsDetails/detailsTable.tsx","webpack:///./src/pages/awsDetails/detailsToolbar.styles.ts","webpack:///./src/pages/awsDetails/detailsToolbar.tsx","webpack:///./src/pages/awsDetails/awsDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_awsDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","getForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getSinceDateRangeString","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","_","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","itemsPerRow","marginLeft","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","AwsReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","utils_formatValue","unitsLabel","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","getIdKeyForNavItem","navItem","TertiaryNav","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","react_i18next__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_4___default","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","itemId","isActive","handleOnSelect","selectedItem","history","replace","availableNavItems","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","onSelect","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","variant","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","tertiary","val","awsDetails","backgroundColor","content","paddingTop","paginationContainer","pagination","tableContainer","detailsHeader_styles_styles","costValue","costLabelUnit","costLabelDate","header","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","awsQuery","filter","resolution","time_scope_units","time_scope_value","key_only","awsReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","onClick","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","tertiaryNav","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","awsReportSummary","_item","DetailsWidgetModal","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","awsExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","currentTarget","sortedItems","selectedLabel","actions","Button","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","awsReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","awsReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","awsDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","awsDetails_reportType","awsDetails_baseQuery","awsDetails_tagKey","awsDetails_mapStateToProps","awsDetails_mapDispatchToProps","getFilterFields","groupByTag","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","newFilterType","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"6fe179b31b26bb68356b.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport AwsDetails from './awsDetails';\nexport default hot(module)(AwsDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { Nav, NavItem, NavList, NavVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem }, this.getNavItemTitle(navItem)));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    awsDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { parseQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAwsReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'account';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('navigation.cloud_details')),\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"aws\" /* aws */ })),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('aws_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('aws_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AwsReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsExportActions, awsExportSelectors } from 'store/awsExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: awsExportSelectors.selectExportError(state),\n        export: awsExportSelectors.selectExport(state),\n        fetchStatus: awsExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: awsExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAwsReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as awsReportsActions from 'store/awsReports/awsReportsActions';\nimport * as awsReportsSelectors from 'store/awsReports/awsReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAwsReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAwsReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAwsReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAwsReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAwsReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAwsReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('aws_details.historical.cost_title'), xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('aws_details.historical.instance_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('aws_details.historical.storage_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = awsReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = awsReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = awsReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = awsReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"account\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('aws_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'account', onClick: this.handleWidgetModalOpen }, t('aws_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'account', onClick: this.handleTagModalOpen }, t('aws_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('aws_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('aws_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAwsReportItems } from 'utils/getComputedAwsReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAwsReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */ ? reportItem.cost : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('aws_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('aws_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'account') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('aws_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/awsQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById === 'account' ? 'account_alias' : groupById,\n                        title: t('aws_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAwsReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = percentage !== 0 ? 'iconOverride' : undefined;\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    Boolean(percentage > 0) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst tagKey = 'or:tag:';\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'account') {\n                return [\n                    {\n                        id: 'account',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.account_select'),\n                        placeholder: t('aws_details.filter.account_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'service') {\n                return [\n                    {\n                        id: 'service',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.service_select'),\n                        placeholder: t('aws_details.filter.service_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'region') {\n                return [\n                    {\n                        id: 'region',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.region_select'),\n                        placeholder: t('aws_details.filter.region_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by account tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.tag_select'),\n                        placeholder: t('aws_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTag = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTag ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('aws_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/aws?${getQuery(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAwsReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.awsDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n"],"sourceRoot":""}