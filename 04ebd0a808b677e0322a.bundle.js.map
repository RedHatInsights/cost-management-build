{"version":3,"sources":["webpack:///./src/pages/ocpCloudDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTagView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpCloudDetails/exportModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/exportModal.tsx","webpack:///./src/pages/ocpCloudDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalChart.tsx","webpack:///./src/pages/ocpCloudDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsActions.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.tsx","webpack:///./src/pages/ocpCloudDetails/detailsToolbar.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.styles.ts","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpCloudDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","colorScale","esm","labels","fontFamily","minWidth","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","width","initDatum","currentData","previousData","showUsageLegendLabel","legendData","chartUtils","push","symbol","setState","chartDatum","charts","show","onClick","handleCostLegendClick","newDatum","index","handleResize","current","clientWidth","getChart","ChartArea","interpolation","getLegend","eventHandlers","target","mutation","ChartLegend","events","gutter","orientation","formatDatumValue","formatDatumOptions","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","result","trim","containerHeight","title","ChartVoronoiContainer","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","legendVisible","isLegendVisible","ref","Chart","containerComponent","legendComponent","undefined","legendPosition","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","getSinceDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendColorScale","handleLegendClick","legendItemsPerRow","responsive","childName","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","marginLeft","historicalTrendChart_HistoricalTrendChart","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpCloudReportSummary","children","detailsLink","subTitle","subTitleTooltip","status","Card","CardHeader","Tooltip","content","enableFlip","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpCloudReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","OcpCloudReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpCloudReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","OcpCloudReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","cloudReportType","meta","total","getCostLayout","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","ocpCloudReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpCloudReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpCloudReportSummaryItem","ocpCloudReportSummaryItems_styles_styles","skeleton","OcpCloudReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","ocpCloudReportSummaryTrend_styles_styles","OcpCloudReportSummaryTrend","trendChart","OcpCloudReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","historicalUsageChart_HistoricalUsageChart","previous","previousLegendData","currentLegendData","maxCurrentLimit","maxPreviousLimit","costValue","costLabelUnit","costLabelDate","header","backgroundColor","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","ocpCloudQuery","filter","resolution","time_scope_units","time_scope_value","key_only","ocpCloudReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","getDropDownTags","Set","val","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","ocpCloudReportSummary","_item","DetailsWidgetModal","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpCloudExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","Button","variant","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpCloudReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpCloudReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalTrendChart","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpCloudDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","trunc","limitUnits","requestUnits","cpuDatum","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","date","abs","percentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","paginationContainer","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","pagination","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","ocpCloudDetails_styles_styles","ocpCloudDetails","tableContainer","ocpCloudDetails_reportType","ocpCloudDetails_tagKey","ocpCloudDetails_baseQuery","ocpCloudDetails_mapStateToProps","ocpCloudDetails_mapDispatchToProps","getFilterFields","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","history","newFilterType","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"04ebd0a808b677e0322a.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpCloudDetails from './ocpCloudDetails';\nexport default hot(module)(OcpCloudDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            if (previousData) {\n                const label = getCostRangeString(previousData, key, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (currentData) {\n                const label = getCostRangeString(currentData, key, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousData,\n                            name: 'previous',\n                            show: true,\n                            style: chartStyles.previousMonth,\n                        },\n                        {\n                            data: currentData,\n                            name: 'current',\n                            show: true,\n                            style: chartStyles.currentMonth,\n                        },\n                    ],\n                    legend: {\n                        colorScale: chartStyles.colorScale,\n                        data: legendData,\n                        onClick: this.handleCostLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 20, height: 25, orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            if (previousUsageData) {\n                const label = getUsageRangeString(previousUsageData, usageKey, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentUsageData) {\n                const label = getUsageRangeString(currentUsageData, usageKey, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousRequestData) {\n                const label = getUsageRangeString(previousRequestData, requestKey, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentRequestData) {\n                const label = getUsageRangeString(currentRequestData, requestKey, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousUsageData,\n                            name: 'previousUsage',\n                            show: true,\n                            style: chartStyles.previousUsageData,\n                        },\n                        {\n                            data: currentUsageData,\n                            name: 'currentUsage',\n                            show: true,\n                            style: chartStyles.currentUsageData,\n                        },\n                        {\n                            data: previousRequestData,\n                            name: 'previousRequest',\n                            show: true,\n                            style: chartStyles.previousRequestData,\n                        },\n                        {\n                            data: currentRequestData,\n                            name: 'currentRequest',\n                            show: true,\n                            style: chartStyles.currentRequestData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `usage-chart-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, responsive: true, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            if (previousData) {\n                const label = getCostRangeString(previousData, key, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (currentData) {\n                const label = getCostRangeString(currentData, key, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            const charts = [\n                {\n                    data: previousData,\n                    name: 'previous',\n                    show: true,\n                    style: chartStyles.previousMonth,\n                },\n                {\n                    data: currentData,\n                    name: 'current',\n                    show: true,\n                    style: chartStyles.currentMonth,\n                },\n            ];\n            const legend = {\n                colorScale: chartStyles.colorScale,\n                data: legendData,\n                onClick: this.handleCostLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            const { legendItemsPerRow } = this.props;\n            if (chartDatum && chartDatum.data && chartDatum.data.length) {\n                const eventHandlers = {\n                    onClick: () => {\n                        return [\n                            {\n                                target: 'data',\n                                mutation: props => {\n                                    chartDatum.onClick(props);\n                                    return null;\n                                },\n                            },\n                        ];\n                    },\n                };\n                return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers,\n                        },\n                        {\n                            target: 'labels',\n                            eventHandlers,\n                        },\n                    ], gutter: 20, height: 25, itemsPerRow: legendItemsPerRow, style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummary.styles';\nconst OcpCloudReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpCloudReportSummary = translate()(OcpCloudReportSummaryBase);\nexport { OcpCloudReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpCloudReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { OcpCloudReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryDetails.styles';\nconst OcpCloudReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const cloudReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (cloudReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (cloudReportType) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpCloudReportSummaryDetails = translate()(OcpCloudReportSummaryDetailsBase);\nexport { OcpCloudReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryItem.styles';\nconst OcpCloudReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpCloudReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpCloudReportSummaryItem = translate()(OcpCloudReportSummaryItemBase);\nexport { OcpCloudReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './ocpCloudReportSummaryItems.styles';\nclass OcpCloudReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpCloudReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpCloudReportSummaryItems = translate()(OcpCloudReportSummaryItemsBase);\nexport { OcpCloudReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const previous = [\n                {\n                    data: previousUsageData,\n                    name: 'previousUsage',\n                    show: true,\n                    style: chartStyles.previousUsageData,\n                },\n                {\n                    data: previousRequestData,\n                    name: 'previousRequest',\n                    show: true,\n                    style: chartStyles.previousRequestData,\n                },\n                {\n                    data: previousLimitData,\n                    name: 'previousLimit',\n                    show: true,\n                    style: chartStyles.previousLimitData,\n                },\n            ];\n            const current = [\n                {\n                    data: currentUsageData,\n                    name: 'currentUsage',\n                    show: true,\n                    style: chartStyles.currentUsageData,\n                },\n                {\n                    data: currentRequestData,\n                    name: 'currentRequest',\n                    show: true,\n                    style: chartStyles.currentRequestData,\n                },\n                {\n                    data: currentLimitData,\n                    name: 'currentLimit',\n                    show: true,\n                    style: chartStyles.currentLimitData,\n                },\n            ];\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            if (previousUsageData) {\n                const label = getUsageRangeString(previousUsageData, usageKey, true, true, 1);\n                previousLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (previousRequestData) {\n                const label = getUsageRangeString(previousRequestData, requestKey, true, true, 1);\n                previousLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n            }\n            if (previousLimitData) {\n                const label = getUsageRangeString(previousLimitData, limitKey, true, true, 1);\n                previousLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            const currentLegendData = [];\n            if (currentUsageData) {\n                const label = getUsageRangeString(currentUsageData, usageKey, true, false);\n                currentLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (currentRequestData) {\n                const label = getUsageRangeString(currentRequestData, requestKey, true, false);\n                currentLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n            }\n            if (currentLimitData) {\n                const label = getUsageRangeString(currentLimitData, limitKey, true, false);\n                currentLegendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            // Merge current and previous data into one legend row\n            const charts = [];\n            const colorScale = [];\n            const legendData = [];\n            for (let i = 0; i < current.length && previous.length; i++) {\n                charts.push(previous[i]);\n                charts.push(current[i]);\n                legendData.push(previousLegendData[i]);\n                legendData.push(currentLegendData[i]);\n                colorScale.push(chartStyles.previousColorScale[i]);\n                colorScale.push(chartStyles.currentColorScale[i]);\n            }\n            const legend = {\n                colorScale,\n                data: legendData,\n                onClick: this.handleLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-usage-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 0, height: 25, itemsPerRow: itemsPerRow, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { parseQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_cloud_details.title')),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.infrastructure_cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('ocp_cloud_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report &&\n            report.meta &&\n            report.meta.total &&\n            report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_cloud_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpCloudReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.infrastructure_cost.value, units: _item.units, value: _item.infrastructureCost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudExportActions, ocpCloudExportSelectors, } from 'store/ocpCloudExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpCloudExportSelectors.selectExportError(state),\n        export: ocpCloudExportSelectors.selectExport(state),\n        fetchStatus: ocpCloudExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpCloudExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpCloudReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpCloudReportsActions from 'store/ocpCloudReports/ocpCloudReportsActions';\nimport * as ocpCloudReportsSelectors from 'store/ocpCloudReports/ocpCloudReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpCloudReport(currentCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        const previousCostData = transformOcpCloudReport(previousCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.infrastructure_cost\n            ? currentCostReport.meta.total.infrastructure_cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('ocp_cloud_details.historical.cost_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_cloud_details.historical.cpu_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_cloud_details.historical.memory_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/ocpCloudDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_cloud_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_cloud_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_cloud_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_cloud_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        if (report && report.meta && report.meta.total) {\n            if (report.meta.total.limit !== null) {\n                const limit = Math.trunc(report.meta.total.limit.value);\n                const limitUnits = t(`units.${unitLookupKey(report.meta.total.limit.units)}`);\n                datum.limit = {\n                    legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    value: Math.trunc(limit),\n                };\n            }\n            if (report.meta.total.request !== null) {\n                const request = Math.trunc(report.meta.total.request.value);\n                const requestUnits = t(`units.${unitLookupKey(report.meta.total.request.units)}`);\n                datum.ranges = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        value: Math.trunc(request),\n                    },\n                ];\n            }\n            if (report.meta.total.usage !== null) {\n                const usage = Math.trunc(report.meta.total.usage.value);\n                const usageUnits = t(`units.${unitLookupKey(report.meta.total.usage.units)}`);\n                datum.usage = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        value: Math.trunc(usage),\n                    },\n                ];\n            }\n        }\n        return datum;\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                    ? [\n                        {\n                            tooltip: cpuDatum.limit.tooltip,\n                            y: cpuDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value ? [{ name: cpuDatum.limit.legend }] : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: cpuDatum.usage.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.usage[0].tooltip,\n                            y: cpuDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                    ? [{ name: cpuDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: cpuDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.ranges[0].tooltip,\n                            y: cpuDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                    ? [{ name: cpuDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width })))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                    ? [\n                        {\n                            tooltip: memoryDatum.limit.tooltip,\n                            y: memoryDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                    ? [{ name: memoryDatum.limit.legend }]\n                    : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: memoryDatum.usage.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.usage[0].tooltip,\n                            y: memoryDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                    ? [{ name: memoryDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: memoryDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.ranges[0].tooltip,\n                            y: memoryDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                    ? [{ name: memoryDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_cloud_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpCloudReportItems } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedOcpCloudReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(OcpCloudReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: report.meta.total.infrastructure_cost.value, units: reportItem.units, value: reportItem.infrastructureCost }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_cloud_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (!((groupBy === 'project' || groupBy === 'node') &&\n                    getIdKeyForTab(tab).toString() === 'project')) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top_ocp_cloud', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"projects\" /* projects */,\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_cloud_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_cloud_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_cloud_details.name_column_title', {\n                            groupBy: groupById,\n                        }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpCloudReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const today = new Date();\n            const date = today.getDate();\n            const month = (((today.getMonth() - 1) % 12) + 12) % 12;\n            const value = formatCurrency(Math.abs(item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = 'iconOverride';\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    t('percent', { value: percentage }),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, Boolean(item.deltaPercent !== null && item.deltaValue > 0)\n                    ? Boolean(date < 31)\n                        ? t('ocp_cloud_details.increase_since_date', {\n                            date,\n                            month,\n                            value,\n                        })\n                        : t('ocp_cloud_details.increase_since_last_month', {\n                            date,\n                            month,\n                            value,\n                        })\n                    : Boolean(item.deltaPercent !== null && item.deltaValue < 0)\n                        ? Boolean(date < 31)\n                            ? t('ocp_cloud_details.decrease_since_date', {\n                                date,\n                                month,\n                                value,\n                            })\n                            : t('ocp_cloud_details.decrease_since_last_month', {\n                                date,\n                                month,\n                                value,\n                            })\n                        : t('ocp_cloud_details.no_change_since_date', { date, month }))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.infrastructure_cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructureCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.infrastructureCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpCloudDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpCloudDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'or:tag:';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpCloudDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'cluster') {\n                return [\n                    {\n                        id: 'cluster',\n                        label: t('ocp_cloud_details.filter.name'),\n                        title: t('ocp_cloud_details.filter.cluster_select'),\n                        placeholder: t('ocp_cloud_details.filter.cluster_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'node') {\n                return [\n                    {\n                        id: 'node',\n                        label: t('ocp_cloud_details.filter.name'),\n                        title: t('ocp_cloud_details.filter.node_select'),\n                        placeholder: t('ocp_cloud_details.filter.node_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'project') {\n                return [\n                    {\n                        id: 'project',\n                        label: t('ocp_cloud_details.filter.name'),\n                        title: t('ocp_cloud_details.filter.project_select'),\n                        placeholder: t('ocp_cloud_details.filter.project_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by project tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('ocp_cloud_details.filter.name'),\n                        title: t('ocp_cloud_details.filter.tag_select'),\n                        placeholder: t('ocp_cloud_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTagKey ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_cloud_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp-on-aws?${getQuery(query)}`; // Todo: replace ocp-on-aws with ocp-cloud\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpCloudReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpCloudDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpCloudDetails));\n"],"sourceRoot":""}