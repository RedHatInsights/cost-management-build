{"version":3,"file":"df60720f3431c60ad10b.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/routes/state/notAvailable/notAvailable.tsx","webpack://koku-ui/./src/routes/views/components/export/exportModal.styles.ts","webpack://koku-ui/./src/routes/views/components/export/exportSubmit.tsx","webpack://koku-ui/./src/routes/views/components/export/exportModal.tsx","webpack://koku-ui/./src/routes/views/components/groupBy/groupBy.styles.ts","webpack://koku-ui/./src/routes/views/components/groupBy/groupByOrg.tsx","webpack://koku-ui/./src/routes/views/components/groupBy/groupByTag.tsx","webpack://koku-ui/./src/routes/views/components/groupBy/groupBy.tsx","webpack://koku-ui/./src/routes/views/explorer/explorerUtils.ts","webpack://koku-ui/./src/testIds.ts"],"sourcesContent":["import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(Unavailable, null))));\n};\nexport default withRouter(NotAvailable);\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    alert: {\n        marginBottom: global_spacer_md.var,\n    },\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        marginBottom: global_spacer_md.var,\n    },\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { endOfMonth, format, startOfMonth } from 'date-fns';\nimport fileDownload from 'js-file-download';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions, exportSelectors } from 'store/export';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { getTestProps, testIds } from 'testIds';\nimport { getToday } from 'utils/dateRange';\nconst reportType = \"cost\" /* ReportType.cost */;\nexport class ExportSubmitBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            fetchReportClicked: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExport = () => {\n            const { report, reportFetchStatus } = this.props;\n            if (report && reportFetchStatus === 2 /* FetchStatus.complete */) {\n                fileDownload(report.data, this.getFileName(), 'text/csv');\n                this.handleClose();\n            }\n        };\n        this.getFileName = () => {\n            const { endDate, groupBy, intl, reportPathsType, resolution, startDate } = this.props;\n            // defaultMessage: '<provider>_<groupBy>_<resolution>_<start-date>_<end-date>',\n            const fileName = intl.formatMessage(messages.exportFileName, {\n                endDate,\n                provider: reportPathsType,\n                groupBy: groupBy.indexOf(tagPrefix) !== -1 ? 'tag' : groupBy,\n                resolution,\n                startDate,\n            });\n            return `${fileName}.csv`;\n        };\n        this.handleClose = () => {\n            const { reportError } = this.props;\n            this.setState(Object.assign({}, this.defaultState), () => {\n                if (!reportError) {\n                    this.props.onClose(false);\n                }\n            });\n        };\n        this.handleFetchReport = () => {\n            const { exportReport, isExportsFeatureEnabled, queryString, reportPathsType } = this.props;\n            exportReport(reportPathsType, reportType, queryString, isExportsFeatureEnabled);\n            this.setState({\n                fetchReportClicked: true,\n            }, () => {\n                this.getExport();\n            });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError } = this.props;\n        const { fetchReportClicked } = this.state;\n        if (prevProps.report !== report && fetchReportClicked) {\n            this.getExport();\n        }\n        if (reportError) {\n            this.props.onError(reportError);\n        }\n    }\n    render() {\n        const { disabled, intl, reportFetchStatus } = this.props;\n        return (React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: disabled || reportFetchStatus === 1 /* FetchStatus.inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), intl.formatMessage(messages.exportGenerate)));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const { groupBy, isAllItems, items, query, reportPathsType, resolution, timeScope } = props;\n    let endDate = query.end_date;\n    let startDate = query.start_date;\n    // Todo: Add name and format type for \"all exports\" feature\n    const getQueryString = () => {\n        const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter: Object.assign({ limit: undefined, offset: undefined, resolution: resolution ? resolution : undefined }, (!(startDate && endDate) && { time_scope_value: timeScope === 'previous' ? -2 : -1 })), filter_by: {}, limit: 0, order_by: undefined, perspective: undefined, dateRange: undefined, delta: undefined });\n        // Store filter_by as an array so we can add to it below\n        if (query.filter_by) {\n            for (const key of Object.keys(query.filter_by)) {\n                if (newQuery.filter_by[key] === undefined) {\n                    newQuery.filter_by[key] = [];\n                }\n                newQuery.filter_by[key].push(query.filter_by[key]);\n            }\n        }\n        if (isAllItems) {\n            // Ensure group_by isn't overridden -- org_unit_id is not unique\n            if (groupBy === orgUnitIdKey) {\n                if (newQuery.filter_by[orgUnitIdKey] === undefined) {\n                    newQuery.filter_by[orgUnitIdKey] = [];\n                }\n                newQuery.filter_by[orgUnitIdKey].push(query.group_by[orgUnitIdKey]);\n            }\n        }\n        else {\n            if (groupBy === orgUnitIdKey) {\n                for (const item of items) {\n                    // Note that type only exists when grouping by org units\n                    const type = item.type === 'organizational_unit' ? orgUnitIdKey : item.type;\n                    if (newQuery.filter_by[type] === undefined) {\n                        newQuery.filter_by[type] = [];\n                    }\n                    newQuery.filter_by[type].push(item.id);\n                }\n            }\n            else {\n                for (const item of items) {\n                    if (newQuery.filter_by[groupBy] === undefined) {\n                        newQuery.filter_by[groupBy] = [];\n                    }\n                    newQuery.filter_by[groupBy].push(item.id);\n                }\n            }\n        }\n        return getQuery(newQuery);\n    };\n    const queryString = getQueryString();\n    const report = exportSelectors.selectExport(state, reportPathsType, reportType, queryString);\n    const reportError = exportSelectors.selectExportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = exportSelectors.selectExportFetchStatus(state, reportPathsType, reportType, queryString);\n    if (!(startDate && endDate)) {\n        const isPrevious = timeScope === 'previous';\n        const today = getToday();\n        if (isPrevious) {\n            today.setMonth(today.getMonth() - 1);\n        }\n        endDate = format(isPrevious ? endOfMonth(today) : today, 'yyyy-MM-dd');\n        startDate = format(startOfMonth(today), 'yyyy-MM-dd');\n    }\n    return {\n        endDate,\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        startDate,\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportSubmitConnect = connect(mapStateToProps, mapDispatchToProps)(ExportSubmitBase);\nconst ExportSubmit = injectIntl(ExportSubmitConnect);\nexport { ExportSubmit };\n","import { Alert, Button, ButtonVariant, Form, FormGroup, Grid, GridItem, Modal, Radio, TextInput, } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { orderBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions } from 'store/export';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './exportModal.styles';\nimport { ExportSubmit } from './exportSubmit';\nconst formatTypeOptions = [\n    { label: messages.exportFormatType, value: 'csv' },\n    { label: messages.exportFormatType, value: 'json' },\n];\nconst resolutionOptions = [\n    { label: messages.exportResolution, value: 'daily' },\n    { label: messages.exportResolution, value: 'monthly' },\n];\nconst timeScopeOptions = [\n    { label: messages.exportTimeScope, value: 'current' },\n    { label: messages.exportTimeScope, value: 'previous' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            error: undefined,\n            formatType: 'csv',\n            timeScope: 'current',\n            resolution: this.props.resolution || 'monthly',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Reset default state upon close -- see https://issues.redhat.com/browse/COST-1134\n        this.handleClose = () => {\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleError = (error) => {\n            this.setState({ error });\n        };\n        this.handleMonthChange = (_, event) => {\n            this.setState({ timeScope: event.currentTarget.value });\n        };\n        this.handleNameChange = (_, event) => {\n            this.setState({ name: event.currentTarget.value });\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleTypeChange = (_, event) => {\n            this.setState({ formatType: event.currentTarget.value });\n        };\n        this.nameValidator = value => {\n            if (value.trim().length === 0) {\n                return messages.exportNameRequired;\n            }\n            // Todo: what is the max length allowed?\n            if (value.length > 50) {\n                return messages.exportNameTooLong;\n            }\n            return undefined;\n        };\n        this.handleMonthChange = this.handleMonthChange.bind(this);\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n        this.handleTypeChange = this.handleTypeChange.bind(this);\n    }\n    render() {\n        const { count = 0, groupBy, intl, isAllItems, isExportsFeatureEnabled, items, query, reportPathsType, showAggregateType = true, showFormatType = true, showTimeScope = true, } = this.props;\n        const { error, formatType, name, resolution, timeScope } = this.state;\n        let sortedItems = [...items];\n        if (this.props.isOpen) {\n            if (items && items.length === 0 && isAllItems) {\n                sortedItems = [\n                    {\n                        label: intl.formatMessage(messages.exportAll),\n                    },\n                ];\n            }\n            else {\n                sortedItems = orderBy(sortedItems, ['label'], ['asc']);\n            }\n        }\n        let selectedLabel = intl.formatMessage(messages.exportSelected, { groupBy, count });\n        if (groupBy.indexOf(tagPrefix) !== -1) {\n            selectedLabel = intl.formatMessage(messages.exportSelected, { groupBy: 'tag', count });\n        }\n        const thisMonth = new Date();\n        const lastMonth = new Date().setMonth(thisMonth.getMonth() - 1);\n        const currentMonth = format(thisMonth, 'MMMM yyyy');\n        const previousMonth = format(lastMonth - 1, 'MMMM yyyy');\n        const defaultName = name !== undefined\n            ? name\n            : intl.formatMessage(messages.exportName, {\n                provider: reportPathsType,\n                groupBy: groupBy.indexOf(tagPrefix) !== -1 ? 'tag' : groupBy,\n            });\n        const helpText = isExportsFeatureEnabled ? this.nameValidator(defaultName) : undefined;\n        const validated = helpText ? 'error' : 'default';\n        return (React.createElement(Modal, { style: styles.modal, isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.exportTitle), variant: \"small\", actions: [\n                React.createElement(ExportSubmit, { disabled: validated === 'error', formatType: formatType, groupBy: groupBy, isAllItems: isAllItems, items: items, key: \"confirm\", timeScope: showTimeScope ? timeScope : undefined, onClose: this.handleClose, onError: this.handleError, name: defaultName, query: query, reportPathsType: reportPathsType, resolution: resolution }),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }), intl.formatMessage(messages.cancel)),\n            ] },\n            error && React.createElement(Alert, { variant: \"danger\", style: styles.alert, title: intl.formatMessage(messages.exportError) }),\n            React.createElement(\"div\", { style: styles.title }, isExportsFeatureEnabled ? (React.createElement(\"span\", null, intl.formatMessage(messages.exportDesc, { value: React.createElement(\"b\", null, intl.formatMessage(messages.exportsTitle)) }))) : (React.createElement(\"span\", null, intl.formatMessage(messages.exportHeading, { groupBy })))),\n            React.createElement(Form, { style: styles.form },\n                React.createElement(Grid, { hasGutter: true, md: 6 },\n                    isExportsFeatureEnabled && (React.createElement(GridItem, { span: 12 },\n                        React.createElement(FormGroup, { fieldId: \"exportName\", helperTextInvalid: helpText ? intl.formatMessage(helpText) : undefined, label: intl.formatMessage(messages.names, { count: 1 }), isRequired: true, validated: validated },\n                            React.createElement(TextInput, { isRequired: true, type: \"text\", id: \"exportName\", name: \"exportName\", value: defaultName, onChange: this.handleNameChange })))),\n                    showAggregateType && (React.createElement(FormGroup, { fieldId: \"aggregate-type\", label: intl.formatMessage(messages.exportAggregateType), isRequired: true },\n                        React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, { value: option.value }), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": intl.formatMessage(option.label, { value: option.value }) })))))),\n                    showTimeScope && (React.createElement(FormGroup, { fieldId: \"timeScope\", label: intl.formatMessage(messages.exportTimeScopeTitle), isRequired: true },\n                        React.createElement(React.Fragment, null, timeScopeOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `timeScope-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, {\n                                date: option.value === 'previous' ? previousMonth : currentMonth,\n                                value: option.value,\n                            }), value: option.value, checked: timeScope === option.value, name: \"timeScope\", onChange: this.handleMonthChange, \"aria-label\": intl.formatMessage(option.label, {\n                                date: option.value === 'previous' ? previousMonth : currentMonth,\n                                value: option.value,\n                            }) })))))),\n                    showFormatType && isExportsFeatureEnabled && (React.createElement(GridItem, { span: 12 },\n                        React.createElement(FormGroup, { fieldId: \"formatType\", label: intl.formatMessage(messages.exportFormatTypeTitle), isRequired: true }, formatTypeOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `formatType-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, { value: option.value }), value: option.value, checked: formatType === option.value, name: \"formatType\", onChange: this.handleTypeChange, \"aria-label\": intl.formatMessage(option.label, { value: option.value }) })))))),\n                    React.createElement(GridItem, { span: 12 },\n                        React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selectedLabels\" },\n                            React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                                return React.createElement(\"li\", { key: index }, groupItem.label);\n                            }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportModalConnect = connect(mapStateToProps, mapDispatchToProps)(ExportModalBase);\nconst ExportModal = injectIntl(ExportModalConnect);\nexport default ExportModal;\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { orgUnitIdKey, orgUnitNameKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByOrgBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            for (const key of groupByKeys) {\n                const index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = queryFromRoute.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.getGroupByItems = () => {\n            const { orgReport } = this.props;\n            if (!(orgReport && orgReport.data)) {\n                return [];\n            }\n            // Sort all names first\n            const sortedData = orgReport.data.sort((a, b) => {\n                if (a[orgUnitNameKey] < b[orgUnitNameKey]) {\n                    return -1;\n                }\n                if (a[orgUnitNameKey] > b[orgUnitNameKey]) {\n                    return 1;\n                }\n                return 0;\n            });\n            // Move roots first\n            const roots = sortedData.filter(org => org.level === 0);\n            const filteredOrgs = sortedData.filter(org => org.level !== 0);\n            roots.map(root => {\n                const item = sortedData.find(org => org[orgUnitIdKey] === root[orgUnitIdKey]);\n                filteredOrgs.unshift(item);\n            });\n            return filteredOrgs.map(org => ({\n                id: org[orgUnitIdKey],\n                toString: () => org[orgUnitNameKey],\n            }));\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection.id,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${orgUnitIdKey}${selection.id}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled = false, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const groupByItems = this.getGroupByItems();\n        const selection = groupByItems.find((item) => item.id === currentItem);\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.filterByOrgUnitAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.filterByOrgUnitPlaceholder), selections: selection, variant: SelectVariant.typeahead }, groupByItems.map(item => (React.createElement(SelectOption, { description: item.id, key: item.id, value: item }))))));\n    }\n}\nconst GroupByOrg = injectIntl(GroupByOrgBase);\nexport { GroupByOrg };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { uniq, uniqBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getGroupByItems = () => {\n            const { tagReport } = this.props;\n            if (!(tagReport && tagReport.data)) {\n                return [];\n            }\n            // If the key_only param is used, we have an array of strings\n            let hasTagKeys = false;\n            for (const item of tagReport.data) {\n                if (item.hasOwnProperty('key')) {\n                    hasTagKeys = true;\n                    break;\n                }\n            }\n            // Workaround for https://github.com/project-koku/koku/issues/1797\n            let data = [];\n            if (hasTagKeys) {\n                const keepData = tagReport.data.map(\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                (_a) => {\n                    var { type } = _a, keepProps = __rest(_a, [\"type\"]);\n                    return keepProps;\n                });\n                data = uniqBy(keepData, 'key');\n            }\n            else {\n                data = uniq(tagReport.data);\n            }\n            return data.map((item, index) => {\n                const tagKey = hasTagKeys ? item.key : item;\n                return React.createElement(SelectOption, { key: `${tagKey}:${index}`, value: tagKey });\n            });\n        };\n        this.getCurrentGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy;\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = key.slice(tagPrefix.length);\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${tagPrefix}${selection}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.filterByTagKeyAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.filterByTagKeyPlaceholder), selections: currentItem, variant: SelectVariant.typeahead }, this.getGroupByItems())));\n    }\n}\nconst GroupByTag = injectIntl(GroupByTagBase);\nexport { GroupByTag };\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey, parseQuery, tagKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getDateRange, getDateRangeDefault } from 'routes/views/explorer/explorerUtils';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { styles } from './groupBy.styles';\nimport { GroupByOrg } from './groupByOrg';\nimport { GroupByTag } from './groupByTag';\nconst groupByOrgOptions = [{ label: orgUnitIdKey, value: orgUnitIdKey }];\nconst groupByTagOptions = [{ label: tagKey, value: tagKey }];\nconst orgReportType = \"org\" /* OrgType.org */;\nconst tagReportType = \"tag\" /* TagType.tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n            isGroupByOrgVisible: false,\n            isGroupByTagVisible: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const { defaultItem } = this.state;\n            const queryFromRoute = parseQuery(location.search);\n            if (!(queryFromRoute && queryFromRoute.group_by)) {\n                return defaultItem;\n            }\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            for (const key of groupByKeys) {\n                let index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = tagKey;\n                    this.setState({\n                        isGroupByTagVisible: true,\n                    });\n                    break;\n                }\n                index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = orgUnitIdKey;\n                    this.setState({\n                        isGroupByOrgVisible: true,\n                    });\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : defaultItem;\n        };\n        this.getGroupBy = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isGroupByOpen } = this.state;\n            const selectOptions = this.getGroupByOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"groupBySelect\", isDisabled: isDisabled, isOpen: isGroupByOpen, onSelect: this.handleGroupBySelected, onToggle: this.handleGroupByToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getGroupByOptions = () => {\n            const { options, orgReport, tagReport, intl } = this.props;\n            const allOptions = [...options];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                allOptions.push(...groupByOrgOptions);\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                allOptions.push(...groupByTagOptions);\n            }\n            return allOptions.map(option => ({\n                toString: () => intl.formatMessage(messages.groupByValuesTitleCase, { value: option.label, count: 1 }),\n                value: option.value,\n            }));\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            if (selection.value === orgUnitIdKey || selection.value === tagKey) {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: selection.value === orgUnitIdKey,\n                    isGroupByTagVisible: selection.value === tagKey,\n                });\n            }\n            else {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                }, () => {\n                    if (onSelected) {\n                        onSelected(selection.value);\n                    }\n                });\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportFetchStatus, orgReportPathsType, queryString, showOrgs, showTags, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        }, () => {\n            if (showOrgs && orgReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (showTags && tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, groupBy, orgReportFetchStatus, orgReportPathsType, perspective, queryString, showOrgs, showTags, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        if (prevProps.groupBy !== groupBy || prevProps.perspective !== perspective) {\n            let options;\n            if (prevProps.perspective !== perspective) {\n                options = {\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                };\n            }\n            this.setState(Object.assign({ currentItem: this.getCurrentGroupBy() }, (options ? options : {})), () => {\n                if (showOrgs && orgReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                    fetchOrg(orgReportPathsType, orgReportType, queryString);\n                }\n                if (showTags && tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n    }\n    render() {\n        const { getIdKeyForGroupBy, groupBy, isDisabled = false, onSelected, orgReport, intl, tagReport } = this.props;\n        const { isGroupByOrgVisible, isGroupByTagVisible } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.groupBySelectorLabel }, intl.formatMessage(messages.groupByLabel)),\n            this.getGroupBy(),\n            Boolean(isGroupByOrgVisible) && (React.createElement(GroupByOrg, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByOrgOptions, orgReport: orgReport })),\n            Boolean(isGroupByTagVisible) && (React.createElement(GroupByTag, { groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByTagOptions, tagReport: tagReport }))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { orgReportPathsType, tagReportPathsType }) => {\n    const queryFromRoute = parseQuery(location.search);\n    // Default to current month filter for details pages\n    let tagFilter = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    };\n    // Replace with start and end dates for Cost Explorer\n    if (queryFromRoute.dateRange) {\n        const dateRange = getDateRangeDefault(queryFromRoute);\n        const { end_date, start_date } = getDateRange(dateRange);\n        tagFilter = {\n            end_date,\n            start_date,\n        };\n    }\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery(Object.assign(Object.assign({}, tagFilter), { key_only: true, limit: 1000 }));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    return {\n        orgReport,\n        orgReportFetchStatus,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst GroupByConnect = connect(mapStateToProps, mapDispatchToProps)(GroupByBase);\nconst GroupBy = injectIntl(GroupByConnect);\nexport default GroupBy;\n","import { getQueryRoute } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { hasCloudProvider } from 'routes/views/utils/providers';\nimport { getCurrentMonthDate, getLast30DaysDate, getLast60DaysDate, getLast90DaysDate } from 'utils/dateRange';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, } from 'utils/userAccess';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    exclude: {},\n    filter_by: {},\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: messages.explorerDateRange, value: 'current_month_to_date' },\n    { label: messages.explorerDateRange, value: 'previous_month_to_date' },\n    { label: messages.explorerDateRange, value: 'last_thirty_days' },\n    { label: messages.explorerDateRange, value: 'last_sixty_days' },\n    { label: messages.explorerDateRange, value: 'last_ninety_days' },\n];\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByGcpOcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOciOptions = [\n    { label: 'payer_tenant_id', value: 'payer_tenant_id' },\n    { label: 'product_service', value: 'product_service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Ocp options\nexport const ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift supplementary & usage\" perspectives -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"cost\" /* ComputedReportItemType.cost */;\n            break;\n    }\n    return result;\n};\nexport const getComputedReportItemValueType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift usage\" perspective -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"total\" /* ComputedReportItemValueType.total */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = (dateRangeType) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    let dateRange;\n    switch (dateRangeType) {\n        case \"previous_month_to_date\" /* DateRangeType.previousMonthToDate */:\n            startDate.setDate(1); // Required to obtain correct month\n            startDate.setMonth(startDate.getMonth() - 1); // Note: Must include previous and current month\n            dateRange = {\n                end_date: format(endDate, 'yyyy-MM-dd'),\n                start_date: format(startDate, 'yyyy-MM-dd'),\n            };\n            break;\n        case \"last_ninety_days\" /* DateRangeType.lastNinetyDays */:\n            dateRange = getLast90DaysDate();\n            break;\n        case \"last_sixty_days\" /* DateRangeType.lastSixtyDays */:\n            dateRange = getLast60DaysDate();\n            break;\n        case \"last_thirty_days\" /* DateRangeType.lastThirtyDays */:\n            dateRange = getLast30DaysDate();\n            break;\n        case \"current_month_to_date\" /* DateRangeType.currentMonthToDate */:\n        default:\n            dateRange = getCurrentMonthDate();\n            break;\n    }\n    return dateRange;\n};\nexport const getDateRangeDefault = (queryFromRoute) => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* DateRangeType.currentMonthToDate */;\n};\nexport const getPerspectiveDefault = ({ awsProviders, azureProviders, ociProviders, gcpProviders, ibmProviders, ocpProviders, queryFromRoute, userAccess, }) => {\n    const perspective = queryFromRoute.perspective;\n    // Upon page refresh, perspective param takes precedence\n    switch (perspective) {\n        case \"aws\" /* PerspectiveType.aws */:\n        case \"aws_ocp\" /* PerspectiveType.awsOcp */:\n        case \"azure\" /* PerspectiveType.azure */:\n        case \"azure_ocp\" /* PerspectiveType.azureOcp */:\n        case \"gcp\" /* PerspectiveType.gcp */:\n        case \"gcp_ocp\" /* PerspectiveType.gcpOcp */:\n        case \"ibm\" /* PerspectiveType.ibm */:\n        case \"ibm_ocp\" /* PerspectiveType.ibmOcp */:\n        case \"oci\" /* PerspectiveType.oci */:\n        case \"ocp_cloud\" /* PerspectiveType.ocpCloud */:\n            return perspective;\n    }\n    if (isOcpAvailable(userAccess, ocpProviders)) {\n        return \"ocp\" /* PerspectiveType.ocp */;\n    }\n    const hasAwsCloud = hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n    const hasAzureCloud = hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n    const hasGcpCloud = hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n    const hasIbmCloud = hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n    if (hasAwsCloud || hasAzureCloud || hasGcpCloud || hasIbmCloud) {\n        return \"ocp_cloud\" /* PerspectiveType.ocpCloud */;\n    }\n    if (isAwsAvailable(userAccess, awsProviders)) {\n        return \"aws\" /* PerspectiveType.aws */;\n    }\n    if (isAzureAvailable(userAccess, azureProviders)) {\n        return \"azure\" /* PerspectiveType.azure */;\n    }\n    if (isGcpAvailable(userAccess, gcpProviders)) {\n        return \"gcp\" /* PerspectiveType.gcp */;\n    }\n    if (isIbmAvailable(userAccess, ibmProviders)) {\n        return \"ibm\" /* PerspectiveType.ibm */;\n    }\n    if (isOciAvailable(userAccess, ociProviders)) {\n        return \"oci\" /* PerspectiveType.oci */;\n    }\n    return undefined;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* PerspectiveType.aws */:\n        case \"aws_ocp\" /* PerspectiveType.awsOcp */:\n        case \"gcp\" /* PerspectiveType.gcp */:\n        case \"gcp_ocp\" /* PerspectiveType.gcpOcp */:\n        case \"ibm\" /* PerspectiveType.ibm */:\n            result = 'account';\n            break;\n        case \"azure\" /* PerspectiveType.azure */:\n        case \"azure_ocp\" /* PerspectiveType.azureOcp */:\n            result = 'subscription_guid';\n            break;\n        case \"ocp\" /* PerspectiveType.ocp */:\n        case \"ocp_cloud\" /* PerspectiveType.ocpCloud */:\n            result = 'project';\n            break;\n        case \"oci\" /* PerspectiveType.oci */:\n            result = 'payer_tenant_id';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* PerspectiveType.aws */:\n        case \"aws_ocp\" /* PerspectiveType.awsOcp */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* PerspectiveType.azure */:\n        case \"azure_ocp\" /* PerspectiveType.azureOcp */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* PerspectiveType.gcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"gcp_ocp\" /* PerspectiveType.gcpOcp */:\n            result = groupByGcpOcpOptions;\n            break;\n        case \"ibm\" /* PerspectiveType.ibm */:\n            result = groupByIbmOptions;\n            break;\n        case \"oci\" /* PerspectiveType.oci */:\n            result = groupByOciOptions;\n            break;\n        case \"ocp\" /* PerspectiveType.ocp */:\n        case \"ocp_cloud\" /* PerspectiveType.ocpCloud */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* PerspectiveType.aws */:\n            result = \"aws\" /* OrgPathsType.aws */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        default:\n            result = \"cost\" /* ReportType.cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* PerspectiveType.aws */:\n            result = \"aws\" /* ReportPathsType.aws */;\n            break;\n        case \"aws_ocp\" /* PerspectiveType.awsOcp */:\n            result = \"aws_ocp\" /* ReportPathsType.awsOcp */;\n            break;\n        case \"azure\" /* PerspectiveType.azure */:\n            result = \"azure\" /* ReportPathsType.azure */;\n            break;\n        case \"azure_ocp\" /* PerspectiveType.azureOcp */:\n            result = \"azure_ocp\" /* ReportPathsType.azureOcp */;\n            break;\n        case \"gcp\" /* PerspectiveType.gcp */:\n            result = \"gcp\" /* ReportPathsType.gcp */;\n            break;\n        case \"gcp_ocp\" /* PerspectiveType.gcpOcp */:\n            result = \"gcp_ocp\" /* ReportPathsType.gcpOcp */;\n            break;\n        case \"ibm\" /* PerspectiveType.ibm */:\n            result = \"gcp\" /* ReportPathsType.ibm */;\n            break;\n        case \"oci\" /* PerspectiveType.oci */:\n            result = \"oci\" /* ReportPathsType.oci */;\n            break;\n        case \"ocp\" /* PerspectiveType.ocp */:\n            result = \"ocp\" /* ReportPathsType.ocp */;\n            break;\n        case \"ocp_cloud\" /* PerspectiveType.ocpCloud */:\n            result = \"ocp_cloud\" /* ReportPathsType.ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getResourcePathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* PerspectiveType.aws */:\n            return \"aws\" /* ResourcePathsType.aws */;\n            break;\n        case \"aws_ocp\" /* PerspectiveType.awsOcp */:\n            return \"aws_ocp\" /* ResourcePathsType.awsOcp */;\n            break;\n        case \"azure\" /* PerspectiveType.azure */:\n            return \"azure\" /* ResourcePathsType.azure */;\n            break;\n        case \"azure_ocp\" /* PerspectiveType.azureOcp */:\n            return \"azure_ocp\" /* ResourcePathsType.azureOcp */;\n            break;\n        case \"gcp\" /* PerspectiveType.gcp */:\n            return \"gcp\" /* ResourcePathsType.gcp */;\n        case \"gcp_ocp\" /* PerspectiveType.gcpOcp */:\n            return \"gcp_ocp\" /* ResourcePathsType.gcpOcp */;\n        case \"ibm\" /* PerspectiveType.ibm */:\n            return \"ibm\" /* ResourcePathsType.ibm */;\n            break;\n        case \"ocp\" /* PerspectiveType.ocp */:\n            return \"ocp\" /* ResourcePathsType.ocp */;\n            break;\n        case \"ocp_cloud\" /* PerspectiveType.ocpCloud */:\n            return \"ocp_cloud\" /* ResourcePathsType.ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* PerspectiveType.aws */:\n            return \"aws\" /* TagPathsType.aws */;\n            break;\n        case \"aws_ocp\" /* PerspectiveType.awsOcp */:\n            return \"aws_ocp\" /* TagPathsType.awsOcp */;\n            break;\n        case \"azure\" /* PerspectiveType.azure */:\n            return \"azure\" /* TagPathsType.azure */;\n            break;\n        case \"azure_ocp\" /* PerspectiveType.azureOcp */:\n            return \"azure_ocp\" /* TagPathsType.azureOcp */;\n            break;\n        case \"gcp\" /* PerspectiveType.gcp */:\n            return \"gcp\" /* TagPathsType.gcp */;\n            break;\n        case \"gcp_ocp\" /* PerspectiveType.gcpOcp */:\n            return \"gcp_ocp\" /* TagPathsType.gcpOcp */;\n            break;\n        case \"ibm\" /* PerspectiveType.ibm */:\n            return \"gcp\" /* TagPathsType.ibm */;\n            break;\n        case \"ocp\" /* PerspectiveType.ocp */:\n            return \"ocp\" /* TagPathsType.ocp */;\n            break;\n        case \"ocp_cloud\" /* PerspectiveType.ocpCloud */:\n            return \"ocp_cloud\" /* TagPathsType.ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        cluster_lnk: 'cluster-lnk',\n        historical_data_btn: 'historical-data-btn',\n        show_more_btn: 'show-more-btn',\n        tag_lnk: 'tag-lnk',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n"],"names":["title","PageHeader","PageHeaderTitle","Main","Unavailable","styles","alert","marginBottom","global_spacer_md","form","marginLeft","global_spacer_sm","modal","input","marginRight","global_spacer_xs","ul","reportType","ExportSubmitBase","constructor","stateProps","dispatchProps","super","this","defaultState","fetchReportClicked","state","Object","assign","getExport","report","reportFetchStatus","props","data","getFileName","handleClose","endDate","groupBy","intl","reportPathsType","resolution","startDate","formatMessage","messages","provider","indexOf","reportError","setState","onClose","handleFetchReport","exportReport","isExportsFeatureEnabled","queryString","componentDidUpdate","prevProps","onError","render","disabled","Button","testIds","isDisabled","key","onClick","variant","ButtonVariant","mapStateToProps","isAllItems","items","query","timeScope","end_date","start_date","newQuery","JSON","parse","stringify","filter","limit","undefined","offset","time_scope_value","filter_by","order_by","perspective","dateRange","delta","keys","push","group_by","item","type","id","getQueryString","isPrevious","today","setMonth","getMonth","format","endOfMonth","startOfMonth","featureFlags","mapDispatchToProps","ExportSubmitConnect","connect","ExportSubmit","injectIntl","formatTypeOptions","label","value","resolutionOptions","timeScopeOptions","ExportModalBase","error","formatType","handleError","handleMonthChange","_","event","currentTarget","handleNameChange","name","handleResolutionChange","handleTypeChange","nameValidator","trim","length","bind","count","showAggregateType","showFormatType","showTimeScope","sortedItems","isOpen","orderBy","selectedLabel","thisMonth","Date","lastMonth","currentMonth","previousMonth","defaultName","helpText","validated","Modal","style","actions","Alert","Form","Grid","hasGutter","md","GridItem","span","FormGroup","fieldId","helperTextInvalid","isRequired","TextInput","onChange","map","option","index","Radio","isValid","checked","date","groupItem","ExportModalConnect","groupBySelector","display","alignItems","groupBySelectorLabel","whiteSpace","GroupByOrgBase","defaultItem","options","isGroupByOpen","getCurrentGroupBy","getIdKeyForGroupBy","queryFromRoute","location","search","groupByKeys","getGroupByItems","orgReport","sortedData","sort","a","b","roots","org","level","filteredOrgs","root","find","unshift","toString","handleGroupByClear","currentItem","handleGroupBySelected","selection","onSelected","handleGroupByToggle","componentDidMount","groupByItems","Select","onClear","onToggle","onSelect","placeholderText","selections","SelectVariant","SelectOption","description","GroupByOrg","GroupByTagBase","tagReport","hasTagKeys","hasOwnProperty","keepData","_a","s","e","t","p","prototype","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","uniqBy","uniq","tagKey","slice","GroupByTag","groupByOrgOptions","groupByTagOptions","orgReportType","tagReportType","GroupByBase","isGroupByOrgVisible","isGroupByTagVisible","getGroupBy","selectOptions","getGroupByOptions","allOptions","fetchOrg","fetchTag","orgReportFetchStatus","orgReportPathsType","showOrgs","showTags","tagReportFetchStatus","tagReportPathsType","Title","headingLevel","size","Boolean","tagFilter","time_scope_units","key_only","GroupByConnect","baseQuery","exclude","cost","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByGcpOcpOptions","groupByIbmOptions","groupByOciOptions","groupByOcpOptions","getComputedReportItemType","result","getComputedReportItemValueType","getDateRange","dateRangeType","setDate","getDateRangeDefault","getPerspectiveDefault","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","ocpProviders","userAccess","hasAwsCloud","hasAzureCloud","hasGcpCloud","hasIbmCloud","getGroupByDefault","getOrgReportPathsType","getReportType","getReportPathsType","getResourcePathsType","getTagReportPathsType","getRouteForQuery","history","reset","pathname","getTestProps","details","cluster_lnk","historical_data_btn","show_more_btn","tag_lnk","view_all_btn","export","cancel_btn","submit_btn","login","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop"],"sourceRoot":""}