{"version":3,"file":"8810cc23ed642190a8a5.bundle.js","mappings":"kIACO,SAASA,EAAkBC,GAC9B,OAAO,IAAAC,WAAUD,EAAO,CAAEE,QAAQ,EAAOC,SAAS,GACtD,C,kDCFO,SAASC,EAAmBJ,GAC/B,OAAO,IAAAC,WAAUD,EAAO,CAAEE,QAAQ,EAAOC,SAAS,GACtD,C,gKCEA,MAmBME,GAAY,SAnBI,EAAGC,WAAW,KAAMC,OAAMC,eAgB5CC,SAASC,MAAQH,EAAKI,cAXD,MACjB,OALY,MACZ,MAAMC,EAAYC,EAAA,SAAY,EAAGC,UAAWA,IAASN,EAASO,WAC9D,OAAOH,EAAYA,EAAUE,UAAOE,CAAS,EAGrCC,IACJ,KAAK,cACD,OAAOC,EAAA,oBACX,KAAK,cACD,OAAOA,EAAA,oBACX,QACI,OAAOA,EAAA,mBACf,EAGgCC,IAC7B,kBAAoB,aAAgB,KAAMb,MAGrD,GAAe,EAAAc,EAAA,IAAWf,G,qECZ1B,MAAMgB,GAAkB,QAAe,IAAM,iCACvCC,GAAc,QAAe,IAAM,iCACzC,MAAMC,UAA+B,cACjCC,oBACI,MAAM,2BAAEC,EAA0B,qBAAEC,EAAoB,eAAEC,EAAc,gBAAEC,EAAe,qBAAEC,EAAoB,qBAAEC,EAAoB,WAAEC,EAAU,sBAAEC,EAAqB,sBAAEC,GAA2BC,KAAKC,MAE1MJ,IAE8B,IAA1BC,GACAJ,EAAgB,MAAgCK,GAEvB,IAAzBJ,GACAF,EAAe,MAA8BG,GAEd,IAA/BL,GACAC,GAER,CACAU,SACI,MAAM,2BAAEX,EAA0B,SAAEnB,EAAQ,qBAAEuB,EAAoB,sBAAEG,GAA0BE,KAAKC,MACnG,OAAQ,kBAAoB,EAAW,KAAgC,IAA1BH,GAA2D,kBAAoBV,EAAa,KAA+B,IAAzBO,GAA0D,kBAAoB,IAAe,KACxO,kBAAoBR,EAAiB,MACN,IAA/BI,GAA+DnB,IACvE,EAEJ,MAAM+B,GAAkB,SAAsBC,IAC1C,MAAMC,EAAkB,2BAA+CD,GACjEE,EAAuB,gCAAoDF,GAC3Eb,EAA6B,sCAA0Da,GACvFR,GAAuB,OAAkB,MACzCW,EAAY,qBAAmCH,EAAO,MAA8BR,GACpFY,EAAiB,0BAAwCJ,EAAO,MAA8BR,GAC9FD,EAAuB,gCAA8CS,EAAO,MAA8BR,GAC1GG,GAAwB,OAAmB,MAIjD,MAAO,CACHM,kBACAC,uBACAf,6BACAgB,YACAC,iBACAb,uBACAC,uBACAa,WAXe,sBAAqCL,EAAO,MAAgCL,GAY3FW,gBAXoB,2BAA0CN,EAAO,MAAgCL,GAYrGD,sBAX0B,iCAAgDM,EAAO,MAAgCL,GAYjHA,wBACH,IAECY,EAAqB,CACvBnB,qBAAsB,QACtBC,eAAgB,QAChBC,gBAAiB,QACjBG,WAAYe,EAAA,OAEVC,GAA4B,IAAAC,SAAQX,EAAiBQ,EAAzB,CAA6CtB,GAE/E,GAD2B,EAAAH,EAAA,IAAW2B,E","sources":["webpack://koku-ui/./src/api/queries/providersQuery.ts","webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/components/pageTitle/pageTitle.tsx","webpack://koku-ui/./src/components/userAccess/permissionsWrapper.tsx"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router';\nimport { paths, routes } from 'routes';\nconst PageTitleBase = ({ children = null, intl, location }) => {\n    const getPath = () => {\n        const currRoute = routes.find(({ path }) => path === location.pathname);\n        return currRoute ? currRoute.path : undefined;\n    };\n    const getPageTitle = () => {\n        switch (getPath()) {\n            case paths.explorer:\n                return messages.pageTitleExplorer;\n            case paths.overview:\n                return messages.pageTitleOverview;\n            default:\n                return messages.pageTitleDefault;\n        }\n    };\n    // Set page title\n    document.title = intl.formatMessage(getPageTitle());\n    return React.createElement(React.Fragment, null, children);\n};\nconst PageTitle = withRouter(PageTitleBase);\nexport default injectIntl(PageTitle);\n","import { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { asyncComponent } from 'components/async';\nimport { ExportsDrawer } from 'components/exports';\nimport { PageTitle } from 'components/pageTitle';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { accountSettingsActions, accountSettingsSelectors } from 'store/accountSettings';\nimport { createMapStateToProps } from 'store/common';\nimport { providersActions, providersQuery, providersSelectors } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { userAccessActions, userAccessQuery, userAccessSelectors } from 'store/userAccess';\nconst InactiveSources = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/inactiveSources/inactiveSources'));\nconst Permissions = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ './permissions'));\nclass PermissionsWrapperBase extends React.Component {\n    componentDidMount() {\n        const { accountSettingsFetchStatus, fetchAccountSettings, fetchProviders, fetchUserAccess, providersFetchStatus, providersQueryString, resetState, userAccessFetchStatus, userAccessQueryString, } = this.props;\n        // Clear cached API responses\n        resetState();\n        // Fetched in order of component usage via render()\n        if (userAccessFetchStatus !== 1 /* FetchStatus.inProgress */) {\n            fetchUserAccess(\"all\" /* UserAccessType.all */, userAccessQueryString);\n        }\n        if (providersFetchStatus !== 1 /* FetchStatus.inProgress */) {\n            fetchProviders(\"all\" /* ProviderType.all */, providersQueryString);\n        }\n        if (accountSettingsFetchStatus !== 1 /* FetchStatus.inProgress */) {\n            fetchAccountSettings();\n        }\n    }\n    render() {\n        const { accountSettingsFetchStatus, children, providersFetchStatus, userAccessFetchStatus } = this.props;\n        return (React.createElement(PageTitle, null, userAccessFetchStatus === 2 /* FetchStatus.complete */ && (React.createElement(Permissions, null, providersFetchStatus === 2 /* FetchStatus.complete */ && (React.createElement(ExportsDrawer, null,\n            React.createElement(InactiveSources, null),\n            accountSettingsFetchStatus === 2 /* FetchStatus.complete */ && children))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const accountSettings = accountSettingsSelectors.selectAccountSettings(state);\n    const accountSettingsError = accountSettingsSelectors.selectAccountSettingsError(state);\n    const accountSettingsFetchStatus = accountSettingsSelectors.selectAccountSettingsFetchStatus(state);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    return {\n        accountSettings,\n        accountSettingsError,\n        accountSettingsFetchStatus,\n        providers,\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchAccountSettings: accountSettingsActions.fetchAccountSettings,\n    fetchProviders: providersActions.fetchProviders,\n    fetchUserAccess: userAccessActions.fetchUserAccess,\n    resetState: uiActions.resetState,\n};\nconst PermissionsWrapperConnect = connect(mapStateToProps, mapDispatchToProps)(PermissionsWrapperBase);\nconst PermissionsWrapper = injectIntl(PermissionsWrapperConnect);\nexport default PermissionsWrapper;\n"],"names":["getProvidersQuery","query","stringify","encode","indices","getUserAccessQuery","PageTitle","children","intl","location","document","title","formatMessage","currRoute","routes","path","pathname","undefined","getPath","messages","getPageTitle","injectIntl","InactiveSources","Permissions","PermissionsWrapperBase","componentDidMount","accountSettingsFetchStatus","fetchAccountSettings","fetchProviders","fetchUserAccess","providersFetchStatus","providersQueryString","resetState","userAccessFetchStatus","userAccessQueryString","this","props","render","mapStateToProps","state","accountSettings","accountSettingsError","providers","providersError","userAccess","userAccessError","mapDispatchToProps","ui","PermissionsWrapperConnect","connect"],"sourceRoot":""}