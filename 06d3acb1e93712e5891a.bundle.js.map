{"version":3,"sources":["webpack://koku-ui/./src/api/queries/query.ts","webpack://koku-ui/./src/federatedEntry.tsx","webpack://koku-ui/./src/store/providers/providersActions.ts","webpack://koku-ui/./src/store/providers/providersReducer.ts","webpack://koku-ui/./src/store/userAccess/userAccessActions.ts","webpack://koku-ui/./src/store/userAccess/userAccessReducer.ts"],"names":["logicalAndPrefix","tagPrefix","breakdownDescKey","breakdownTitleKey","orgUnitIdKey","orgUnitNameKey","tagKey","getQuery","query","stringify","filter_by","newQuery","Object","assign","JSON","parse","undefined","key","keys","filter","Array","isArray","push","convertFilterBy","encode","indices","getQueryRoute","parseKey","val","index","indexOf","substring","length","parseQuery","filterByKey","parseFilterByPrefix","group_by","groupByKey","parseGroupByPrefix","ignoreQueryPrefix","version","store","Provider","NotificationsPortal","basename","window","location","pathname","fetchProvidersRequest","createAction","fetchProvidersSuccess","fetchProvidersFailure","fetchProviders","reportType","dispatch","meta","reportId","then","res","data","catch","err","defaultState","byId","Map","errors","fetchStatus","providersReducer","state","action","type","getType","set","payload","fetchUserAccessRequest","fetchUserAccessSuccess","fetchUserAccessFailure","fetchUserAccess","userAccessReducer"],"mappings":"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","file":"06d3acb1e93712e5891a.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport const logicalOrPrefix = 'or:'; // logical OR prefix for group_by\nexport const logicalAndPrefix = 'and:'; // logical AND prefix for group_by\nexport const tagPrefix = 'tag:'; // Tag prefix for group_by\nexport const breakdownDescKey = 'breakdown_desc'; // Used to display a description in the breakdown header\nexport const breakdownGroupByKey = 'breakdown_group_by'; // Used to display a breadcrumb in the breakdown header\nexport const breakdownTitleKey = 'breakdown_title'; // Used to display a title in the breakdown header\nexport const orgUnitIdKey = 'org_unit_id'; // Org unit ID for group_by\nexport const orgUnitNameKey = 'org_unit_name'; // Org unit name for group_by\nexport const tagKey = 'tag'; // Tag key prefix for group_by\n// Converts filter_by props to filter props\nexport function convertFilterBy(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined });\n    for (const key of Object.keys(query.filter_by)) {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        if (newQuery.filter[key]) {\n            if (!Array.isArray(newQuery.filter[key])) {\n                newQuery.filter[key] = newQuery.filter[key] !== '*' ? [newQuery.filter[key]] : [];\n            }\n            newQuery.filter[key].push(query.filter_by[key]);\n        }\n        else {\n            newQuery.filter[key] = query.filter_by[key];\n        }\n    }\n    return newQuery;\n}\n// filter_by props are converted\nexport function getQuery(query) {\n    return stringify(convertFilterBy(query), { encode: false, indices: false });\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return stringify(query, { encode: false, indices: false });\n}\n// Returns given key without logical OR/AND prefix\nfunction parseKey(val) {\n    let key = val;\n    let index = val.indexOf(logicalOrPrefix);\n    if (index !== -1) {\n        key = val.substring(index + logicalOrPrefix.length);\n    }\n    else {\n        index = val.indexOf(logicalAndPrefix);\n        if (index !== -1) {\n            key = val.substring(index + logicalAndPrefix.length);\n        }\n    }\n    return key;\n}\n// Returns query without filter_by prefix\nexport function parseFilterByPrefix(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: {} });\n    for (const key of Object.keys(query.filter_by)) {\n        const filterByKey = parseKey(key);\n        newQuery.filter_by[filterByKey] = query.filter_by[key];\n    }\n    return newQuery;\n}\n// Returns query without group_by prefix -- https://github.com/project-koku/koku-ui/issues/704\nexport function parseGroupByPrefix(query) {\n    if (!(query && query.group_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {} });\n    for (const key of Object.keys(query.group_by)) {\n        const groupByKey = parseKey(key);\n        newQuery.group_by[groupByKey] = query.group_by[key];\n    }\n    return newQuery;\n}\nexport function parseQuery(query) {\n    const newQuery = parse(query, { ignoreQueryPrefix: true });\n    return parseFilterByPrefix(parseGroupByPrefix(newQuery));\n}\n","import { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications';\nimport { initApi } from 'api/api';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { getBaseName } from 'utils/getBaseName';\nimport App from './app';\nimport { configureStore } from './store';\nrequire.resolve('@patternfly/patternfly/patternfly-addons.css');\nimport './styles/global.css';\ninitApi({\n    version: 'v1',\n});\nconst store = configureStore({\n// session: {\n//   token: getToken(),\n// },\n});\nexport default () => (React.createElement(Provider, { store: store },\n    React.createElement(NotificationsPortal, null),\n    React.createElement(Router, { basename: getBaseName(window.location.pathname) },\n        React.createElement(App, null))));\n","import { fetchProviders as apiGetProviders } from 'api/providers';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './providersCommon';\nexport const fetchProvidersRequest = createAction('providers/fetch/request')();\nexport const fetchProvidersSuccess = createAction('providers/fetch/success')();\nexport const fetchProvidersFailure = createAction('providers/fetch/failure')();\nexport function fetchProviders(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchProvidersRequest(meta));\n        return apiGetProviders(query)\n            .then(res => {\n            dispatch(fetchProvidersSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchProvidersFailure(err, meta));\n        });\n    };\n}\nexport const clearProviderFailure = createAction('providers/clear/failure');\n","import { getType } from 'typesafe-actions';\nimport { fetchProvidersFailure, fetchProvidersRequest, fetchProvidersSuccess } from './providersActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function providersReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchProvidersRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchProvidersSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchProvidersFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { fetchUserAccess as apiGetUserAccess } from 'api/userAccess';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './userAccessCommon';\nexport const fetchUserAccessRequest = createAction('userAccess/fetch/request')();\nexport const fetchUserAccessSuccess = createAction('userAccess/fetch/success')();\nexport const fetchUserAccessFailure = createAction('userAccess/fetch/failure')();\nexport function fetchUserAccess(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchUserAccessRequest(meta));\n        return apiGetUserAccess(query)\n            .then(res => {\n            dispatch(fetchUserAccessSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchUserAccessFailure(err, meta));\n        });\n    };\n}\nexport const clearuserAccessFailure = createAction('userAccess/clear/failure');\n","import { getType } from 'typesafe-actions';\nimport { fetchUserAccessFailure, fetchUserAccessRequest, fetchUserAccessSuccess } from './userAccessActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function userAccessReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchUserAccessRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchUserAccessSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchUserAccessFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n"],"sourceRoot":""}