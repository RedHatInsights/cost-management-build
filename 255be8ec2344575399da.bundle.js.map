{"version":3,"sources":["webpack:///./src/pages/overview/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryUsage.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/pages/awsDashboard/awsDashboardWidget.styles.ts","webpack:///./src/pages/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/azureDashboard/azureDashboardWidget.styles.ts","webpack:///./src/pages/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/pages/azureDashboard/azureDashboard.tsx","webpack:///./src/pages/ocpCloudDashboard/ocpCloudDashboardWidget.styles.ts","webpack:///./src/pages/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/pages/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/overview.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_overview__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","display","justifyContent","height","marginTop","LoadingState","es","icon","binoculars_icon","title","subTitle","EmptyState","Spinner","size","Title","EmptyStateBody","ErrorState","error","error_circle_o_icon","response","status","ban_icon","EmptyStateIcon","viewSources","mapStateToProps","common","state","NoProvidersState","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","dollar_sign_icon","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendItemsPerRow","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","AwsReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","utils_formatValue","unitsLabel","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","AzureReportSummary","azureReportSummaryAlt_styles_styles","AzureReportSummaryAlt","azureReportSummaryDetails_styles_styles","AzureReportSummaryDetails","_units","azureReportSummaryItem_styles_styles","AzureReportSummaryItemBase","AzureReportSummaryItem","azureReportSummaryItems_styles_styles","AzureReportSummaryItems","azureReportSummaryTrend_styles_styles","AzureReportSummaryTrend","OcpCloudReportSummary","ocpCloudReportSummaryAlt_styles_styles","OcpCloudReportSummaryAlt","ocpCloudReportSummaryDetails_styles_styles","OcpCloudReportSummaryDetails","requestFormatOptions","requestLabel","cloudReportType","Tooltip","content","enableFlip","getRequestLayout","ocpCloudReportSummaryItem_styles_styles","OcpCloudReportSummaryItemBase","OcpCloudReportSummaryItem","ocpCloudReportSummaryItems_styles_styles","OcpCloudReportSummaryItems","ocpCloudReportSummaryTrend_styles_styles","OcpCloudReportSummaryTrend","OcpCloudReportSummaryUsage","usageChart","OcpReportSummary","ocpReportSummaryAlt_styles_styles","OcpReportSummaryAlt","ocpReportSummaryDetails_styles_styles","OcpReportSummaryDetails","ocpReportSummaryItem_styles_styles","OcpReportSummaryItemBase","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","OcpReportSummaryItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","costKey","responsive","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","tabItems","getIdKeyForTab","tab","widgetId","widget","awsDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","previous","tabsQuery","currentReport","awsReports","selectReport","currentReportFetchStatus","selectReportFetchStatus","previousReport","tabsReport","tabsReportFetchStatus","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","AwsDashboardWidget","activeTabKey","buildDetailsLink","currentTab","awsQuery","group_by","order_by","trend","getUnits","awsReportSummary","titleKey","getDetails","isUsageFirst","getDetailsLabel","usageKey","getDetailsLink","isDetailsLink","onClick","handleInsightsNavClick","getDetailsLinkTitle","getHorizontalLayout","getSubTitle","getTabs","getTitle","get_month_default","format_default","start_of_month_default","getTab","Tab","eventKey","getTabTitle","getTabItem","availableTabs","topItems","activeTab","isCostReport","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","insights","chrome","appNavClick","secondaryNav","event","tabIndex","isHorizontal","awsDashboard_mapStateToProps","selectWidgets","widgets","selectCurrentWidgets","awsDashboard_awsDashboard","xl2","azureDashboardWidget_styles_chartStyles","azureDashboardWidget_styles_styles","azureDashboardWidget_getIdKeyForTab","azureDashboardWidget_mapStateToProps","azureDashboard","azureReports","azureDashboardWidget_mapDispatchToProps","AzureDashboardWidget","azureQuery","azureReportSummary","azureDashboard_mapStateToProps","azureDashboard_azureDashboard","ocpCloudDashboardWidget_styles_chartStyles","containerUsageHeight","ocpCloudDashboardWidget_styles_styles","ocpCloudDashboardWidget_getIdKeyForTab","ocpCloudDashboardWidget_mapStateToProps","ocpCloudDashboard","ocpCloudReports","ocpCloudDashboardWidget_mapDispatchToProps","OcpCloudDashboardWidget","ocpCloudQuery","ocpCloudReportSummary","requestKey","ocpCloudDashboard_mapStateToProps","ocpCloudDashboard_ocpCloudDashboard","ocpDashboardWidget_styles_chartStyles","ocpDashboardWidget_styles_styles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpReports","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpQuery","currentInfrastructureData","previousInfrastructureData","ocpReportSummary","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","overview_styles_styles","info","marginLeft","verticalAlign","infoIcon","infoTitle","fontWeight","headerOverride","index_esm","overview_getIdKeyForTab","overview_mapStateToProps","awsProvidersQueryString","providersQuery","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","azureProvidersQueryString","azureProviders","azureProvidersError","azureProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","Overview","showPopover","getAvailableTabs","contentRef","tabContentId","tabContentRef","getTabContent","val","TabContent","handlePopoverClick","show","isLoading","noAwsProviders","noAzureProviders","noOcpProviders","noProviders","showTabs","sizes","Popover","aria-label","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState"],"mappings":"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","file":"255be8ec2344575399da.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport Overview from './overview';\nexport default hot(module)(Overview);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState, EmptyStateBody, Title } from '@patternfly/react-core';\nimport { Spinner } from '@patternfly/react-core/dist/esm/experimental';\nimport { BinocularsIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(EmptyState, null,\n            React.createElement(Spinner, { size: \"lg\" }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BanIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error && error.response && error.response.status === 401) {\n        icon = BanIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummary.styles';\nconst AzureReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AzureReportSummary = translate()(AzureReportSummaryBase);\nexport { AzureReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummaryAlt.styles';\nconst AzureReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AzureReportSummaryAlt = translate()(AzureReportSummaryAltBase);\nexport { AzureReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryDetails.styles';\nconst AzureReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (report.meta.total.usage && report.meta.total.usage.value) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Work around for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage : 0, report.meta.total.count ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    (units ||\n                        (report &&\n                            report.meta &&\n                            report.meta.total.usage &&\n                            report.meta.total.usage.value >= 0))) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AzureReportSummaryDetails = translate()(AzureReportSummaryDetailsBase);\nexport { AzureReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryItem.styles';\nconst AzureReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAzureReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AzureReportSummaryItem = translate()(AzureReportSummaryItemBase);\nexport { AzureReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureReportSummaryItems.styles';\nclass AzureReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAzureReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AzureReportSummaryItems = translate()(AzureReportSummaryItemsBase);\nexport { AzureReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './azureReportSummaryTrend.styles';\nconst AzureReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AzureReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummary.styles';\nconst OcpCloudReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpCloudReportSummary = translate()(OcpCloudReportSummaryBase);\nexport { OcpCloudReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpCloudReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { OcpCloudReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryDetails.styles';\nconst OcpCloudReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let markupCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const cloudReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        markupCost = formatValue(report.meta.total.markup_cost ? report.meta.total.markup_cost.value : 0, report.meta.total.markup_cost\n            ? report.meta.total.markup_cost.units\n            : 'USD', formatOptions);\n        if (cloudReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_cloud_dashboard.total_cost_tooltip', {\n                infrastructureCost,\n                markupCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (cloudReportType) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpCloudReportSummaryDetails = translate()(OcpCloudReportSummaryDetailsBase);\nexport { OcpCloudReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryItem.styles';\nconst OcpCloudReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpCloudReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpCloudReportSummaryItem = translate()(OcpCloudReportSummaryItemBase);\nexport { OcpCloudReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './ocpCloudReportSummaryItems.styles';\nclass OcpCloudReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpCloudReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpCloudReportSummaryItems = translate()(OcpCloudReportSummaryItemsBase);\nexport { OcpCloudReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                derivedCost,\n                infrastructureCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        childName: 'previousInfrastructureCost',\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        childName: 'currentInfrastructureCost',\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", responsive: false, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { transformAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { AwsReportSummary, AwsReportSummaryAlt, AwsReportSummaryDetails, AwsReportSummaryItem, AwsReportSummaryItems, AwsReportSummaryTrend, } from 'components/reports/awsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/awsDashboard';\nimport { awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './awsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/aws?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const currentData = transformAwsReport(currentReport, trend.type);\n            const previousData = transformAwsReport(previousReport, trend.type);\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showUsageLegendLabel: details.showUsageLegendLabel, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, isUsageFirst, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight, true)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('aws_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(AwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'aws', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDashboardWidgetBase));\nexport { AwsDashboardWidget, AwsDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst AwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(AwsDashboardBase));\nexport default AwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { transformAzureReport } from 'components/charts/commonChart/chartUtils';\nimport { AzureReportSummary, AzureReportSummaryAlt, AzureReportSummaryDetails, AzureReportSummaryItem, AzureReportSummaryItems, AzureReportSummaryTrend, } from 'components/reports/azureReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { azureDashboardActions, azureDashboardSelectors, } from 'store/azureDashboard';\nimport { azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './azureDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AzureDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/azure?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const currentData = transformAzureReport(currentReport, trend.type);\n            const previousData = transformAzureReport(previousReport, trend.type);\n            const units = this.getUnits();\n            return (React.createElement(AzureReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showUsageLegendLabel: details.showUsageLegendLabel, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }), units: units }));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, isUsageFirst, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(AzureReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, units: units, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AzureReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight, true)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('azure_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(AzureReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, reportType, tabsReport, topItems, } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(AzureReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value\n                            ? tabsReport.meta.total.usage.value\n                            : tabsReport.meta.total.usage, units: details.units ? details.units : reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, reportType } = this.props;\n            if (details.units) {\n                return details.units;\n            }\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(AzureReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'azure', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AzureDashboardWidgetBase));\nexport { AzureDashboardWidget, AzureDashboardWidgetBase, };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureDashboardSelectors } from 'store/azureDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\nconst AzureDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(AzureDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(AzureDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = translate()(connect(mapStateToProps, {})(AzureDashboardBase));\nexport default AzureDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { transformOcpCloudReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpCloudReportSummary, OcpCloudReportSummaryAlt, OcpCloudReportSummaryDetails, OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, OcpCloudReportSummaryTrend, OcpCloudReportSummaryUsage, } from 'components/reports/ocpCloudReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/ocpCloudDashboard';\nimport { ocpCloudReportsSelectors } from 'store/ocpCloudReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './ocpCloudDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpCloudDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp-cloud?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, details, previousReport, reportType, t, trend, } = this.props;\n            const costReportType = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            const reportItem = costReportType ? 'cost' : 'usage';\n            const currentUsageData = transformOcpCloudReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpCloudReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpCloudReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpCloudReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const units = this.getUnits();\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"instance_type\" /* instanceType */ ||\n                reportType === \"network\" /* network */ ||\n                reportType === \"storage\" /* storage */) ? (React.createElement(OcpCloudReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousUsageData, showUsageLegendLabel: details.showUsageLegendLabel, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) })) : (React.createElement(OcpCloudReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, isUsageFirst, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpCloudReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestFormatOptions: details.requestFormatOptions, requestLabel: this.getDetailsLabel(details.requestKey, units), showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpCloudReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight, true)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('ocp_cloud_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpCloudReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpCloudReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: isCostReport ? reportItem.cost : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpCloudReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp-cloud', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpCloudDashboardWidgetBase));\nexport { OcpCloudDashboardWidget, OcpCloudDashboardWidgetBase, };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst OcpCloudDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpCloudDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(OcpCloudDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = translate()(connect(mapStateToProps, {})(OcpCloudDashboardBase));\nexport default OcpCloudDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 275,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { transformOcpReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpReportSummary, OcpReportSummaryAlt, OcpReportSummaryDetails, OcpReportSummaryItem, OcpReportSummaryItems, OcpReportSummaryTrend, OcpReportSummaryUsage, } from 'components/reports/ocpReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const reportItem = reportType === \"cost\" /* cost */ ? 'cost' : 'usage';\n            const currentUsageData = transformOcpReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const currentInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const previousInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(OcpReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title })) : (React.createElement(OcpReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, isUsageFirst, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestFormatOptions: details.requestFormatOptions, requestLabel: this.getDetailsLabel(details.requestKey, units), showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight, true)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('ocp_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                        ? reportItem.cost\n                        : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id } = this.props;\n            const tab = availableTabs[tabIndex];\n            this.props.updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, widgetId } = this.props;\n        this.props.updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDashboardWidgetBase));\nexport { OcpDashboardWidget, OcpDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst OcpDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(OcpDashboardBase));\nexport default OcpDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n});\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { Popover, Tab, TabContent, Tabs, Title, TitleSize, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsDashboard from 'pages/awsDashboard/awsDashboard';\nimport AzureDashboard from 'pages/azureDashboard/azureDashboard';\nimport OcpCloudDashboard from 'pages/ocpCloudDashboard/ocpCloudDashboard';\nimport OcpDashboard from 'pages/ocpDashboard/ocpDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { awsProvidersQuery, azureProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { headerOverride, styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n        case \"ocpCloud\" /* ocpCloud */:\n            return 'ocpCloud';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            showPopover: false,\n        };\n        this.getAvailableTabs = () => {\n            const { awsProviders, azureProviders, ocpProviders } = this.props;\n            const availableTabs = [];\n            if (awsProviders &&\n                awsProviders.meta &&\n                awsProviders.meta.count &&\n                (ocpProviders && ocpProviders.meta && ocpProviders.meta.count)) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocpCloud\" /* ocpCloud */,\n                });\n            }\n            if (ocpProviders && ocpProviders.meta && ocpProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (awsProviders && awsProviders.meta && awsProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"aws\" /* aws */,\n                });\n            }\n            if (azureProviders && azureProviders.meta && azureProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"azure\" /* azure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: this.getTabTitle(tab) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"ocpCloud\" /* ocpCloud */) {\n                return activeTabKey === index ? React.createElement(OcpCloudDashboard, null) : null;\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                return activeTabKey === index ? React.createElement(OcpDashboard, null) : null;\n            }\n            else if (currentTab === \"aws\" /* aws */) {\n                return activeTabKey === index ? React.createElement(AwsDashboard, null) : null;\n            }\n            else if (currentTab === \"azure\" /* azure */) {\n                return activeTabKey === index ? React.createElement(AzureDashboard, null) : null;\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"aws\" /* aws */) {\n                return t('overview.aws');\n            }\n            else if (tab === \"azure\" /* azure */) {\n                return t('overview.azure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n            else if (tab === \"ocpCloud\" /* ocpCloud */) {\n                return t('overview.ocp_cloud');\n            }\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    render() {\n        const { awsProviders, awsProvidersError, awsProvidersFetchStatus, azureProviders, azureProvidersError, azureProvidersFetchStatus, ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || azureProvidersError || ocpProvidersError;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = awsProviders !== undefined &&\n            awsProviders.meta !== undefined &&\n            awsProviders.meta.count === 0 &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = azureProviders !== undefined &&\n            azureProviders.meta !== undefined &&\n            azureProviders.meta.count === 0 &&\n            azureProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = ocpProviders !== undefined &&\n            ocpProviders.meta !== undefined &&\n            ocpProviders.meta.count === 0 &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { size: TitleSize['2xl'] },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))))),\n                Boolean(showTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs(availableTabs)))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersError,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(OverviewBase));\nexport default Overview;\n"],"sourceRoot":""}