{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/components/state/loadingState/loadingState.tsx","webpack://koku-ui/./src/pages/dashboard/components/dashboardBase.tsx","webpack://koku-ui/./src/pages/dashboard/components/chartComparison.tsx","webpack://koku-ui/./src/pages/dashboard/components/dashboardWidget.styles.ts","webpack://koku-ui/./src/pages/dashboard/components/dashboardWidgetBase.tsx","webpack://koku-ui/./src/pages/dashboard/awsCloudDashboard/awsCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/dashboard/awsCloudDashboard/awsCloudDashboard.tsx","webpack://koku-ui/./src/pages/dashboard/awsDashboard/awsDashboardWidget.tsx","webpack://koku-ui/./src/pages/dashboard/awsDashboard/awsDashboard.tsx","webpack://koku-ui/./src/pages/dashboard/azureCloudDashboard/azureCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/dashboard/azureCloudDashboard/azureCloudDashboard.tsx","webpack://koku-ui/./src/pages/dashboard/azureDashboard/azureDashboardWidget.tsx","webpack://koku-ui/./src/pages/dashboard/azureDashboard/azureDashboard.tsx","webpack://koku-ui/./src/pages/dashboard/gcpDashboard/gcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/dashboard/gcpDashboard/gcpDashboard.tsx","webpack://koku-ui/./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack://koku-ui/./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.styles.ts","webpack://koku-ui/./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.tsx","webpack://koku-ui/./src/pages/dashboard/ocpDashboard/ocpDashboard.tsx","webpack://koku-ui/./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidget.tsx","webpack://koku-ui/./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard.tsx","webpack://koku-ui/./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboardWidget.tsx","webpack://koku-ui/./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboard.tsx","webpack://koku-ui/./src/pages/overview/overview.styles.ts","webpack://koku-ui/./src/pages/overview/overview.tsx","webpack://koku-ui/./src/pages/overview/index.ts","webpack://koku-ui/./src/pages/overview/perspective.styles.ts","webpack://koku-ui/./src/pages/overview/perspective.tsx","webpack://koku-ui/./src/utils/formatValue.ts"],"names":["getUserAccessQuery","query","stringify","encode","indices","LoadingState","withTranslation","t","title","subTitle","EmptyState","variant","EmptyStateVariant","className","Spinner","size","Title","headingLevel","EmptyStateBody","DashboardBase","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","map","widgetId","details","showHorizontal","GridItem","sm","key","lg","xl","xl2","ChartComparisonBase","super","arguments","this","defaultState","isChartComparisonOpen","state","Object","assign","getDropDownItems","options","props","option","DropdownItem","component","value","onClick","handleClick","label","getCurrentLabel","currentItem","onItemClicked","handleSelect","setState","handleToggle","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","styles","comparison","marginBottom","global_spacer_md","tabs","marginTop","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","currentInfrastructureData","previousInfrastructureData","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","forecastInfrastructureData","computedForecastInfrastructureItem","ReportSummaryComponent","style","currentInfrastructureCostData","forecastConeData","forecastInfrastructureConeData","formatDatumValue","formatValue","formatDatumOptions","formatOptions","previousInfrastructureCostData","showForecast","undefined","currentData","previousData","showUsageLegendLabel","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","length","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","push","unshift","confidence_max","confidence_min","infrastructure","supplementary","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","Link","to","handleInsightsNavClick","getDetailsLinkTitle","groupBy","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getSubTitle","getTabs","getTitle","today","month","endDate","format","startDate","startOfMonth","count","getDate","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","id","toString","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","appNavId","insights","chrome","appNavClick","secondaryNav","event","tabIndex","updateTab","fetchForecasts","fetchReports","mapStateToProps","widget","awsCloudDashboard","queries","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsCloudDashboardWidget","connect","awsDashboard","AwsDashboardWidget","azureCloudDashboard","AzureCloudDashboardWidget","azureDashboard","AzureDashboardWidget","gcpDashboard","GcpDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","ocpSupplementaryDashboard","OcpSupplementaryDashboardWidget","ocpUsageDashboard","OcpUsageDashboardWidget","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","perspective","global_spacer_lg","ocpOptions","infrastructureAllCloudOptions","infrastructureAwsOptions","infrastructureAwsCloudOptions","infrastructureAzureOptions","infrastructureAzureCloudOptions","infrastructureGcpOptions","infrastructureOcpOptions","OverviewBase","getAvailableTabs","isAwsAvailable","isAzureAvailable","isGcpAvailable","isOcpAvailable","isOcpCloudAvailable","contentRef","getCurrentTab","getDefaultInfrastructurePerspective","getDefaultOcpPerspective","getPerspective","currentInfrastructurePerspective","currentOcpPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","TabContent","ref","hasCurrentMonthData","providers","result","provider","current_month_data","awsProviders","azureProviders","gcpProviders","ocpProviders","emptyTab","noData","showReload","userAccess","find","d","access","prevProps","awsProvidersFetchStatus","azureProvidersFetchStatus","gcpProvidersFetchStatus","ocpProvidersFetchStatus","userAccessFetchStatus","isLoading","noAwsProviders","noAzureProviders","noGcpProviders","noOcpProviders","noProviders","Popover","enableFlip","bodyContent","Button","ButtonVariant","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ocpProvidersQueryString","userAccessQueryString","userAccessError","perspectiveSelector","display","alignItems","perspectiveLabel","marginRight","PerspectiveBase","isPerspectiveOpen","isDisabled","Perspective","unitLookupKey","unit","lookup","toLowerCase","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","currency"],"mappings":"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","file":"d7df8857bd2ca0642768.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nconst LoadingStateBase = ({ t }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n        React.createElement(Spinner, { size: \"lg\" }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, title),\n        React.createElement(EmptyStateBody, null, subTitle)));\n};\nconst LoadingState = withTranslation()(LoadingStateBase);\nexport { LoadingState };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isChartComparisonOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isChartComparisonOpen: !this.state.isChartComparisonOpen,\n            });\n        };\n        this.handleToggle = isChartComparisonOpen => {\n            this.setState({\n                isChartComparisonOpen,\n            });\n        };\n    }\n    render() {\n        // const { t } = this.props;\n        const { isChartComparisonOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isChartComparisonOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst ChartComparison = withTranslation()(ChartComparisonBase);\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformForecast, transformForecastCone, transformReport, } from 'components/charts/common/chartDatumUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport { format, getDate, getMonth, startOfMonth } from 'date-fns';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        this.getChartComparison = () => {\n            const { t, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getUnits();\n            const cumulativeTitle = t(trend.titleKey, { units: t(`units.${units}`) });\n            const dailyTitle = t(trend.dailyTitleKey, { units: t(`units.${units}`) });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* cumulative */ },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, type, 'date', 'infrastructure', computedReportItemValue);\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const forecastInfrastructureData = this.getForecastData(currentReport, trend.computedForecastInfrastructureItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, forecastInfrastructureConeData: forecastInfrastructureData.forecastConeData, forecastInfrastructureData: forecastInfrastructureData.forecastData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getUnits();\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: units })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                    }\n                    // For cumulative data, show continuous line from current report to forecast\n                    if (type === 0 /* rolling */) {\n                        newForecast.data.unshift({\n                            date: lastReported,\n                            values: [\n                                {\n                                    date: lastReported,\n                                    cost: {\n                                        confidence_max: {\n                                            value: 0,\n                                        },\n                                        confidence_min: {\n                                            value: 0,\n                                        },\n                                        total: {\n                                            value: total,\n                                            units: 'USD',\n                                        },\n                                    },\n                                    infrastructure: {\n                                        confidence_max: {\n                                            value: 0,\n                                        },\n                                        confidence_min: {\n                                            value: 0,\n                                        },\n                                        total: {\n                                            value: total,\n                                            units: 'USD',\n                                        },\n                                    },\n                                    supplementary: {\n                                        confidence_max: {\n                                            value: 0,\n                                        },\n                                        confidence_min: {\n                                            value: 0,\n                                        },\n                                        total: {\n                                            value: total,\n                                            units: 'USD',\n                                        },\n                                    },\n                                },\n                            ],\n                        });\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            // Cost data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: units }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            const units = this.getUnits();\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: details.units, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab)));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = format(today, 'd');\n            const startDate = format(startOfMonth(today), 'd');\n            return t('dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: details.units ? details.units : this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = format(today, 'Do');\n            const startDate = format(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            let units;\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                units = hasUsage ? unitLookupKey(currentReport.meta.total.usage.units) : '';\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                units = hasCost ? unitLookupKey(currentReport.meta.total[computedReportItem][computedReportItemValue].units) : '';\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleInsightsNavClick = () => {\n            const { details } = this.props;\n            if (details.appNavId) {\n                insights.chrome.appNavClick({\n                    id: details.appNavId,\n                    secondaryNav: true,\n                });\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardActions, awsCloudDashboardSelectors, } from 'store/dashboard/awsCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsCloudDashboardActions.fetchWidgetReports,\n    updateTab: awsCloudDashboardActions.changeWidgetTab,\n};\nconst AwsCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardSelectors } from 'store/dashboard/awsCloudDashboard';\nimport { AwsCloudDashboardWidget } from './awsCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsCloudDashboardWidget,\n        selectWidgets: awsCloudDashboardSelectors.selectWidgets(state),\n        widgets: awsCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardActions, azureCloudDashboardSelectors, } from 'store/dashboard/azureCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureCloudDashboardActions.fetchWidgetReports,\n    updateTab: azureCloudDashboardActions.changeWidgetTab,\n};\nconst AzureCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardSelectors } from 'store/dashboard/azureCloudDashboard';\nimport { AzureCloudDashboardWidget } from './azureCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureCloudDashboardWidget,\n        selectWidgets: azureCloudDashboardSelectors.selectWidgets(state),\n        widgets: azureCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default GcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardActions, ocpSupplementaryDashboardSelectors, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpSupplementaryDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpSupplementaryDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpSupplementaryDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpSupplementaryDashboardActions.fetchWidgetReports,\n    updateTab: ocpSupplementaryDashboardActions.changeWidgetTab,\n};\nconst OcpSupplementaryDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpSupplementaryDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardSelectors } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { OcpSupplementaryDashboardWidget } from './ocpSupplementaryDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpSupplementaryDashboardWidget,\n        selectWidgets: ocpSupplementaryDashboardSelectors.selectWidgets(state),\n        widgets: ocpSupplementaryDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpSupplementaryDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpSupplementaryDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardActions, ocpUsageDashboardSelectors, } from 'store/dashboard/ocpUsageDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpUsageDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpUsageDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpUsageDashboardActions.fetchWidgetReports,\n    updateTab: ocpUsageDashboardActions.changeWidgetTab,\n};\nconst OcpUsageDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpUsageDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardSelectors } from 'store/dashboard/ocpUsageDashboard';\nimport { OcpUsageDashboardWidget } from './ocpUsageDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpUsageDashboardWidget,\n        selectWidgets: ocpUsageDashboardSelectors.selectWidgets(state),\n        widgets: ocpUsageDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpUsageDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpUsageDashboard;\n","import global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    perspective: {\n        marginTop: global_spacer_lg.value,\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport AwsCloudDashboard from 'pages/dashboard/awsCloudDashboard/awsCloudDashboard';\nimport AwsDashboard from 'pages/dashboard/awsDashboard/awsDashboard';\nimport AzureCloudDashboard from 'pages/dashboard/azureCloudDashboard/azureCloudDashboard';\nimport AzureDashboard from 'pages/dashboard/azureDashboard/azureDashboard';\nimport GcpDashboard from 'pages/dashboard/gcpDashboard/gcpDashboard';\nimport OcpCloudDashboard from 'pages/dashboard/ocpCloudDashboard/ocpCloudDashboard';\nimport OcpDashboard from 'pages/dashboard/ocpDashboard/ocpDashboard';\nimport OcpSupplementaryDashboard from 'pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard';\nimport OcpUsageDashboard from 'pages/dashboard/ocpUsageDashboard/ocpUsageDashboard';\nimport Loading from 'pages/state/loading';\nimport NoProviders from 'pages/state/noProviders';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport NoData from '../state/noData/noData';\nimport { styles } from './overview.styles';\nimport { Perspective } from './perspective';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [\n    { label: 'overview.perspective.all', value: 'all' },\n    { label: 'overview.perspective.supplementary', value: 'supplementary' },\n];\n// Infrastructure all cloud options\nconst infrastructureAllCloudOptions = [{ label: 'overview.perspective.all_cloud', value: 'all_cloud' }];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: 'overview.perspective.aws', value: 'aws' }];\n// Infrastructure AWS cloud options\nconst infrastructureAwsCloudOptions = [{ label: 'overview.perspective.aws_cloud', value: 'aws_cloud' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: 'overview.perspective.azure', value: 'azure' }];\n// Infrastructure Azure cloud options\nconst infrastructureAzureCloudOptions = [{ label: 'overview.perspective.azure_cloud', value: 'azure_cloud' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: 'overview.perspective.gcp', value: 'gcp' }];\n// Infrastructure Ocp options\nconst infrastructureOcpOptions = [{ label: 'overview.perspective.ocp_usage', value: 'ocp_usage' }];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isGcpAvailable = this.isGcpAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            if (isOcpAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (isAwsAvailable || isAzureAvailable || isGcpAvailable || isOcpCloudAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isGcpAvailable = this.isGcpAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            const showOcpOnly = isOcpAvailable && !(isAwsAvailable || isAzureAvailable || isGcpAvailable || isOcpCloudAvailable);\n            const showInfrastructureOnly = !isOcpAvailable && (isAwsAvailable || isAzureAvailable || isGcpAvailable || isOcpCloudAvailable);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isGcpAvailable = this.isGcpAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all_cloud\" /* allCloud */;\n            }\n            if (isAwsAvailable) {\n                return \"aws\" /* aws */;\n            }\n            if (isAzureAvailable) {\n                return \"azure\" /* azure */;\n            }\n            if (isGcpAvailable) {\n                return \"gcp\" /* gcp */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all\" /* all */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isGcpAvailable = this.isGcpAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (!(isAwsAvailable || isAzureAvailable || isGcpAvailable || isOcpAvailable)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (isOcpAvailable) {\n                    options.push(...infrastructureAllCloudOptions);\n                }\n                if (isAwsAvailable) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (isOcpAvailable && isAwsAvailable) {\n                    options.push(...infrastructureAwsCloudOptions);\n                }\n                if (isGcpAvailable) {\n                    options.push(...infrastructureGcpOptions);\n                }\n                if (isAzureAvailable) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (isOcpAvailable && isAzureAvailable) {\n                    options.push(...infrastructureAzureCloudOptions);\n                }\n                if (isOcpAvailable) {\n                    options.push(...infrastructureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        // Ensure at least one source provider has data available\n        this.hasCurrentMonthData = (providers) => {\n            let result = false;\n            if (providers && providers.data) {\n                for (const provider of providers.data) {\n                    if (provider.current_month_data) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, gcpProviders, ocpProviders } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"all_cloud\" /* allCloud */) {\n                    return this.hasCurrentMonthData(ocpProviders) ? React.createElement(OcpCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    return this.hasCurrentMonthData(awsProviders) ? React.createElement(AwsDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_cloud\" /* awsCloud */) {\n                    return this.hasCurrentMonthData(awsProviders) ? React.createElement(AwsCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* gcp */) {\n                    return this.hasCurrentMonthData(gcpProviders) ? React.createElement(GcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    return this.hasCurrentMonthData(azureProviders) ? React.createElement(AzureDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_cloud\" /* azureCloud */) {\n                    return this.hasCurrentMonthData(azureProviders) ? React.createElement(AzureCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ocp_usage\" /* ocpUsage */) {\n                    return this.hasCurrentMonthData(ocpProviders) ? React.createElement(OcpUsageDashboard, null) : noData;\n                }\n                else {\n                    return this.hasCurrentMonthData(ocpProviders) ? React.createElement(OcpCloudDashboard, null) : noData; // default\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                if (currentOcpPerspective === \"all\" /* all */) {\n                    return this.hasCurrentMonthData(ocpProviders) ? React.createElement(OcpDashboard, null) : noData;\n                }\n                else if (currentOcpPerspective === \"supplementary\" /* supplementary */) {\n                    return this.hasCurrentMonthData(ocpProviders) ? React.createElement(OcpSupplementaryDashboard, null) : noData;\n                }\n                else {\n                    return this.hasCurrentMonthData(ocpProviders) ? React.createElement(OcpDashboard, null) : noData; // default\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return t('overview.infrastructure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            const data = userAccess.data.find(d => d.type === \"aws\" /* aws */);\n            const isUserAccessAllowed = data && data.access;\n            // providers API returns empty data array for no sources\n            return (isUserAccessAllowed &&\n                awsProviders !== undefined &&\n                awsProviders.meta !== undefined &&\n                awsProviders.meta.count > 0);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            const data = userAccess.data.find(d => d.type === \"azure\" /* azure */);\n            const isUserAccessAllowed = data && data.access;\n            // providers API returns empty data array for no sources\n            return (isUserAccessAllowed &&\n                azureProviders !== undefined &&\n                azureProviders.meta !== undefined &&\n                azureProviders.meta.count > 0);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            const data = userAccess.data.find(d => d.type === \"gcp\" /* gcp */);\n            const isUserAccessAllowed = data && data.access;\n            // providers API returns empty data array for no sources\n            return (isUserAccessAllowed &&\n                gcpProviders !== undefined &&\n                gcpProviders.meta !== undefined &&\n                gcpProviders.meta.count > 0);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            const data = userAccess.data.find(d => d.type === \"ocp\" /* ocp */);\n            const isUserAccessAllowed = data && data.access;\n            // providers API returns empty data array for no sources\n            return (isUserAccessAllowed &&\n                ocpProviders !== undefined &&\n                ocpProviders.meta !== undefined &&\n                ocpProviders.meta.count > 0);\n        };\n        this.isOcpCloudAvailable = () => {\n            return this.isAwsAvailable() && this.isOcpAvailable();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { awsProviders, azureProviders, gcpProviders, ocpProviders, userAccess } = this.props;\n        // Note: User access and providers are fetched via the Permissions and InactiveSources components used by all routes\n        if (prevProps.userAccess !== userAccess ||\n            prevProps.awsProviders !== awsProviders ||\n            prevProps.azureProviders !== azureProviders ||\n            prevProps.gcpProviders !== gcpProviders ||\n            prevProps.ocpProviders !== ocpProviders) {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ocpProvidersFetchStatus, userAccessFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */;\n        // Test for no providers\n        const noAwsProviders = !this.isAwsAvailable() && awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && azureProvidersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && gcpProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noOcpProviders;\n        const title = t('navigation.overview');\n        if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light headerOverride}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { headingLevel: \"h2\", size: \"2xl\" },\n                        t('overview.title'),\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.gcp')),\n                                    React.createElement(\"p\", null, t('overview.gcp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null)))))),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.perspective }, this.getPerspective())),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst Overview = withTranslation()(connect(mapStateToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled, t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = withTranslation()(PerspectiveBase);\nexport { Perspective };\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'gibibyte month':\n        case 'core-hours':\n        case 'hour':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'gibibyte month':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hour':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n"],"sourceRoot":""}