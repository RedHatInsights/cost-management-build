{"version":3,"sources":["webpack://koku-ui/./src/pages/views/details/ocpBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/ocpBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/index.ts","webpack://koku-ui/./src/pages/views/details/components/columnManagement/columnManagementModal.tsx","webpack://koku-ui/./src/utils/computedReport/getComputedOcpReportItems.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/ocpDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/ocpDetails.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/index.ts"],"names":["mapStateToProps","state","props","selectWidgets","ocpCostOverview","widgets","CostOverview","withTranslation","connect","ocpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","t","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","initHiddenColumns","options","hiddenColumns","Set","map","option","hidden","add","value","ColumnManagementModalBase","stateProps","dispatchProps","super","this","defaultState","getHidden","result","delete","isHidden","has","handleChange","checked","event","target","id","setState","handleClose","onClose","handleSave","onSave","selectAll","prevProps","Modal","TextContent","Text","component","TextVariants","Button","isInline","onClick","variant","isOpen","actions","key","ButtonVariant","DataList","isCompact","DataListItem","DataListItemRow","DataListCheck","name","onChange","DataListItemCells","dataListCells","DataListCell","htmlFor","label","ColumnManagementModalConnect","ColumnManagementModal","getIdKeyForGroupBy","project","cluster","node","baseQuery","delta","groupByOptions","DetailsHeaderBase","arguments","onGroupByClicked","providersError","showContent","meta","count","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","formatValue","units","style","Title","headingLevel","size","isDisabled","onItemClicked","showTags","Boolean","Tooltip","content","enableFlip","Popover","bodyContent","DetailsHeader","styles","emptyState","backgroundColor","global_BackgroundColor_light_100","display","justifyContent","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","DetailsTableColumnIds","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","item","index","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getSupplementaryCost","getTotalCost","getActions","Link","to","basePath","toString","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","filteredColumns","column","filteredRows","_a","row","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","cell","sortBy","showPriceListOption","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","percentValue","toFixed","keys","tagIndex","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","ininfoArrow","getSortBy","direction","SortByDirection","order_by","c","handleOnSelect","isSelected","rowId","onSelected","items","handleOnSort","onSort","bind","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExport","showFilter","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","paddingBottom","global_spacer_lg","ocpDetails","minHeight","paginationContainer","marginLeft","marginRight","padding","global_spacer_md","tableContainer","limit","offset","defaultColumnOptions","OcpDetails","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","handleColumnManagementModalClose","handleColumnManagementModalSave","getComputedItems","getExportModal","computedItems","isAllItems","handleExportModalClose","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"mappings":"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","file":"1ae29934f62c59d6caed.bundle.js","sourcesContent":["import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ocpDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"ocp\" /* ocp */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.ocp_details'),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"ocp\" /* ocp */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"ocp\" /* ocp */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OcpBreakdown;\n","import OcpBreakdown from './ocpBreakdown';\nexport default OcpBreakdown;\n","import { Button, ButtonVariant, DataList, DataListCell, DataListCheck, DataListItem, DataListItemCells, DataListItemRow, Modal, Text, TextContent, TextVariants, } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport const initHiddenColumns = (options) => {\n    const hiddenColumns = new Set();\n    options.map(option => {\n        if (option.hidden) {\n            hiddenColumns.add(option.value);\n        }\n    });\n    return hiddenColumns;\n};\nexport class ColumnManagementModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            hiddenColumns: initHiddenColumns(this.props.options),\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            const result = new Set(hiddenColumns);\n            if (!result.delete(value)) {\n                result.add(value);\n            }\n            return result;\n        };\n        this.isHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            return hiddenColumns.has(value);\n        };\n        this.handleChange = (checked, event) => {\n            const hiddenColumns = this.getHidden(event.target.id);\n            this.setState({ hiddenColumns });\n        };\n        this.handleClose = () => {\n            // Reset defult state upon close\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleSave = () => {\n            const { hiddenColumns } = this.state;\n            this.props.onSave(hiddenColumns);\n            this.handleClose();\n        };\n        this.selectAll = () => {\n            this.setState({ hiddenColumns: new Set() });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { options } = this.props;\n        if (prevProps.options !== options) {\n            const hiddenColumns = initHiddenColumns(options);\n            this.setState({ hiddenColumns });\n        }\n    }\n    render() {\n        const { options, t } = this.props;\n        return (React.createElement(Modal, { description: React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.p }, \"Selected categories will be displayed in the table.\"),\n                React.createElement(Button, { isInline: true, onClick: this.selectAll, variant: \"link\" }, t('details.column_management.select_all'))), \n            // style={styles.modal}\n            isOpen: this.props.isOpen, onClose: this.handleClose, title: t('details.column_management.title'), variant: \"small\", actions: [\n                React.createElement(Button, { key: \"save\", onClick: this.handleSave, variant: ButtonVariant.link }, t('details.column_management.save')),\n                React.createElement(Button, { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, t('details.column_management.cancel')),\n            ] },\n            React.createElement(DataList, { \"aria-label\": t('details.column_management.aria_label'), id: \"table-column-management\", isCompact: true }, options.map(option => (React.createElement(DataListItem, { \"aria-labelledby\": option.value, key: option.value },\n                React.createElement(DataListItemRow, null,\n                    React.createElement(DataListCheck, { \"aria-labelledby\": option.value, checked: !this.isHidden(option.value), name: option.value, id: option.value, onChange: this.handleChange }),\n                    React.createElement(DataListItemCells, { dataListCells: [\n                            React.createElement(DataListCell, { id: \"table-column-management-item1\", key: \"table-column-management-item1\" },\n                                React.createElement(\"label\", { htmlFor: \"check1\" }, t(option.label))),\n                        ] }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ColumnManagementModalConnect = connect(mapStateToProps, mapDispatchToProps)(ColumnManagementModalBase);\nconst ColumnManagementModal = withTranslation()(ColumnManagementModalConnect);\nexport { ColumnManagementModal };\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Button, ButtonVariant, Popover, Title, Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = \"ocp\" /* ocp */;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatValue(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatValue(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatValue(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('ocp_details.title')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('dashboard.total_cost_tooltip', {\n                            supplementaryCost,\n                            infrastructureCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit },\n                        t('cost'),\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('ocp_details.supplementary_cost')),\n                                    React.createElement(\"p\", null, t('ocp_details.supplementary_cost_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('ocp_details.infrastructure_cost')),\n                                    React.createElement(\"p\", null, t('ocp_details.infrastructure_cost_desc'))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport './detailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = \"ocp\" /* ocp */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { hiddenColumns, isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: t('details.tag_names'),\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        title: t('ocp_details.infrastructure_cost'),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        title: t('ocp_details.supplementary_cost'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        title: t('ocp_details.infrastructure_cost'),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        title: t('ocp_details.supplementary_cost'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.ocpDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        { title: React.createElement(\"div\", null, InfrastructureCost), id: DetailsTableColumnIds.infrastructure },\n                        { title: React.createElement(\"div\", null, supplementaryCost), id: DetailsTableColumnIds.supplementary },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 7 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id));\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id));\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                loadingRows,\n                rows: filteredRows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, item: item, providerType: \"ocp\" /* ocp */, query: query, reportPathsType: reportPathsType, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"ocp\" /* ocp */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { tagReport, t } = this.props;\n            const options = [\n                { name: t('filter_by.values.cluster'), key: 'cluster' },\n                { name: t('filter_by.values.node'), key: 'node' },\n                { name: t('filter_by.values.project'), key: 'project' },\n                { name: t('filter_by.values.tag'), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"ocp\" /* ocp */, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { cloneDeep } from 'lodash';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { ColumnManagementModal, initHiddenColumns, } from 'pages/views/details/components/columnManagement/columnManagementModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: 'details.month_over_month_change', value: DetailsTableColumnIds.monthOverMonth },\n    { label: 'ocp_details.infrastructure_cost', value: DetailsTableColumnIds.infrastructure, hidden: true },\n    { label: 'ocp_details.supplementary_cost', value: DetailsTableColumnIds.supplementary, hidden: true },\n];\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"ocp\" /* ocp */;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.ocp_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"ocp\" /* ocp */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n","import OcpDetails from './ocpDetails';\nexport default OcpDetails;\n"],"sourceRoot":""}