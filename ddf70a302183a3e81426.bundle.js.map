{"version":3,"file":"ddf70a302183a3e81426.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/components/export/exportContent.tsx","webpack://koku-ui/./src/components/export/exportDrawer.tsx","webpack://koku-ui/./src/components/export/export.styles.ts","webpack://koku-ui/./src/components/export/exportLink.tsx","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardBase.tsx","webpack://koku-ui/./src/pages/views/overview/components/chartComparison.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidgetBase.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/overview.styles.ts","webpack://koku-ui/./src/pages/views/overview/overview.tsx","webpack://koku-ui/./src/api/queries/overviewQuery.ts","webpack://koku-ui/./src/pages/views/overview/index.ts","webpack://koku-ui/./src/utils/feature.ts","webpack://koku-ui/./src/utils/format.ts"],"sourcesContent":["import React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nclass ExportContentBase extends React.Component {\n    render() {\n        return React.createElement(\"span\", null, \"Hello\");\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExportContent = injectIntl(connect(mapStateToProps, mapDispatchToProps)(ExportContentBase));\nexport { ExportContent };\n","import './export.scss';\nimport { Drawer, DrawerActions, DrawerCloseButton, DrawerContent, DrawerContentBody, DrawerHead, DrawerPanelContent, Title, TitleSizes, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { uiActions, uiSelectors } from 'store/ui';\nimport { ExportContent } from './exportContent';\nclass ExportDrawerBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.drawerRef = React.createRef();\n        this.getPanelContent = () => {\n            const { intl, isOpen } = this.props;\n            return (React.createElement(DrawerPanelContent, null,\n                React.createElement(DrawerHead, null,\n                    React.createElement(\"span\", { tabIndex: isOpen ? 0 : -1, ref: this.drawerRef },\n                        React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes.xl }, intl.formatMessage(messages.ExportAllExports))),\n                    React.createElement(DrawerActions, null,\n                        React.createElement(DrawerCloseButton, { onClick: this.handleClose }))),\n                React.createElement(DrawerContentBody, null,\n                    React.createElement(ExportContent, null))));\n        };\n        this.handleClose = () => {\n            const { closeExportDrawer } = this.props;\n            closeExportDrawer();\n        };\n        this.handleExpand = () => {\n            this.drawerRef.current && this.drawerRef.current.focus();\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        // TBD...\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    componentDidUpdate(prevProps) {\n        // TBD...\n    }\n    render() {\n        const { children, isOpen } = this.props;\n        return (React.createElement(Drawer, { className: \"drawerOverride\", isExpanded: isOpen, onExpand: this.handleExpand },\n            React.createElement(DrawerContent, { panelContent: this.getPanelContent() },\n                React.createElement(DrawerContentBody, null, children))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const isOpen = uiSelectors.selectIsExportDrawerOpen(state);\n    return {\n        isOpen,\n    };\n});\nconst mapDispatchToProps = {\n    closeExportDrawer: uiActions.closeExportDrawer,\n};\nconst ExportDrawer = injectIntl(connect(mapStateToProps, mapDispatchToProps)(ExportDrawerBase));\nexport { ExportDrawer };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    exportIcon: {\n        marginLeft: global_spacer_md.value,\n        marginRight: global_spacer_sm.value,\n    },\n    exportLink: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n};\n","import { Button } from '@patternfly/react-core';\nimport { AngleDoubleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { uiSelectors } from 'store/ui';\nimport { uiActions } from 'store/ui';\nimport { styles } from './export.styles';\nclass ExportLinkBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleToggle = event => {\n            const { closeExportDrawer, isOpen, openExportDrawer } = this.props;\n            if (isOpen) {\n                closeExportDrawer();\n            }\n            else {\n                openExportDrawer();\n            }\n            event.preventDefault();\n            return false;\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.exportLink },\n            React.createElement(Button, { component: \"a\", href: \"#/\", variant: \"link\", onClick: this.handleToggle },\n                React.createElement(\"span\", { style: styles.exportIcon },\n                    React.createElement(AngleDoubleLeftIcon, null)),\n                intl.formatMessage(messages.ExportAllExports))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const isOpen = uiSelectors.selectIsExportDrawerOpen(state);\n    return {\n        isOpen,\n    };\n});\nconst mapDispatchToProps = {\n    closeExportDrawer: uiActions.closeExportDrawer,\n    openExportDrawer: uiActions.openExportDrawer,\n};\nconst ExportLink = injectIntl(connect(mapStateToProps, mapDispatchToProps)(ExportLinkBase));\nexport { ExportLink };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.Perspective)),\n            this.getSelect()));\n    }\n}\nconst Perspective = injectIntl(PerspectiveBase);\nexport { Perspective };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType })))));\n    }))));\nexport { DashboardBase };\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformForecast, transformForecastCone, transformReport, } from 'components/charts/common/chartDatumUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* cumulative */, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, type, 'date', 'infrastructure', computedReportItemValue);\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const forecastInfrastructureData = this.getForecastData(currentReport, trend.computedForecastInfrastructureItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, forecastInfrastructureConeData: forecastInfrastructureData.forecastConeData, forecastInfrastructureData: forecastInfrastructureData.forecastData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    const units = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.units\n                        : 'USD';\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === 0 /* rolling */) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === \"usage\" /* usage */) {\n                return intl.formatMessage(messages.Units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.CurrencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, fetchReports, fetchForecasts, trend, widgetId } = this.props;\n        if (prevProps.costType !== costType) {\n            fetchReports(widgetId);\n            if (trend.computedForecastItem !== undefined) {\n                fetchForecasts(widgetId);\n            }\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import AwsDashboard from './awsDashboard';\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import AwsOcpDashboard from './awsOcpDashboard';\nexport default AwsOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import AzureDashboard from './azureDashboard';\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import AzureOcpDashboard from './azureOcpDashboard';\nexport default AzureOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"gcp_projects\" /* gcpProjects */:\n            return 'gcp_project';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import GcpDashboard from './gcpDashboard';\nexport default GcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import GcpOcpDashboard from './gcpOcpDashboard';\nexport default GcpOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import IbmDashboard from './ibmDashboard';\nexport default IbmDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","import OcpCloudDashboard from './ocpCloudDashboard';\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","import OcpDashboard from './ocpDashboard';\nexport default OcpDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { Currency } from 'components/currency';\nimport { ExportLink } from 'components/export';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport { CostType } from 'pages/views/components/costType';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport AwsDashboard from 'pages/views/overview/awsDashboard';\nimport AwsOcpDashboard from 'pages/views/overview/awsOcpDashboard';\nimport AzureDashboard from 'pages/views/overview/azureDashboard';\nimport AzureOcpDashboard from 'pages/views/overview/azureOcpDashboard';\nimport GcpDashboard from 'pages/views/overview/gcpDashboard';\nimport GcpOcpDashboard from 'pages/views/overview/gcpOcpDashboard';\nimport IbmDashboard from 'pages/views/overview/ibmDashboard';\nimport OcpCloudDashboard from 'pages/views/overview/ocpCloudDashboard';\nimport OcpDashboard from 'pages/views/overview/ocpDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { getCostType } from 'utils/localStorage';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable, } from 'utils/userAccess';\nimport { styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [{ label: messages.PerspectiveValues, value: 'ocp' }];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.PerspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.PerspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.PerspectiveValues, value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.PerspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.PerspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.PerspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.PerspectiveValues, value: 'ocp_cloud' }];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === \"aws\" /* aws */) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { onSelect: this.handleCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = hasOcp && !(hasAws || hasAzure || hasGcp || hasIbm || hasOcpCloud);\n            const showInfrastructureOnly = !hasOcp && (hasAws || hasAzure || hasGcp || hasIbm || hasOcpCloud);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case \"aws\" /* aws */:\n                case \"aws_ocp\" /* awsOcp */:\n                case \"azure\" /* azure */:\n                case \"azure_ocp\" /* azureOcp */:\n                case \"gcp\" /* gcp */:\n                case \"gcp_ocp\" /* gcpOcp */:\n                case \"ibm\" /* ibm */:\n                case \"ibm_ocp\" /* ibmOcp */:\n                case \"ocp_cloud\" /* ocpCloud */:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return \"ocp_cloud\" /* ocpCloud */;\n            }\n            if (this.isAwsAvailable()) {\n                return \"aws\" /* aws */;\n            }\n            if (this.isAzureAvailable()) {\n                return \"azure\" /* azure */;\n            }\n            if (this.isGcpAvailable()) {\n                return \"gcp\" /* gcp */;\n            }\n            if (this.isIbmAvailable()) {\n                return \"ibm\" /* ibm */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case \"ocp\" /* ocp */:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return \"ocp\" /* ocp */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            // Note: No need to test OCP on cloud here, since that requires at least one provider\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOcp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (this.isOcpCloudAvailable()) {\n                    options.push(...infrastructureOcpCloudOptions);\n                }\n                if (hasAws) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (this.isAwsOcpAvailable()) {\n                    options.push(...infrastructureAwsOcpOptions);\n                }\n                if (hasGcp) {\n                    options.push(...infrastructureGcpOptions);\n                }\n                if (isBetaFeature() && this.isGcpOcpAvailable()) {\n                    options.push(...infrastructureGcpOcpOptions);\n                }\n                if (hasIbm) {\n                    options.push(...infrastructureIbmOptions);\n                }\n                if (isBetaFeature() && this.isIbmOcpAvailable()) {\n                    options.push(...infrastructureIbmOcpOptions);\n                }\n                if (hasAzure) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (this.isAzureOcpAvailable()) {\n                    options.push(...infrastructureAzureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onSelected: this.handlePerspectiveSelected, options: options }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { history } = this.props;\n            return `${history.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, costType, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"ocp_cloud\" /* ocpCloud */) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_ocp\" /* awsOcp */) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* gcp */) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp_ocp\" /* gcpOcp */) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ibm\" /* ibm */) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_ocp\" /* azureOcp */) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === \"ocp\" /* ocp */) {\n                    return hasData ? React.createElement(OcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return intl.formatMessage(messages.Infrastructure);\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return intl.formatMessage(messages.OpenShift);\n            }\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Needed to force tab items to update\n            this.setState({ costType: value }, () => {\n                // Need param to restore cost type upon page refresh\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n                history.replace(this.getRouteForQuery(newQuery));\n            });\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { history, query } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value }), (value === \"aws\" /* aws */ && { cost_type: getCostType() }));\n                history.replace(this.getRouteForQuery(newQuery));\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { history, query } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    history.replace(this.getRouteForQuery(newQuery));\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, userAccessFetchStatus } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noAwsProviders = !this.isAwsAvailable() && providersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && providersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && providersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const isLoading = providersFetchStatus === 1 /* inProgress */ || userAccessFetchStatus === 1 /* inProgress */;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.OverviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.OverviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.GCP)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.GCPDesc)),\n                                    isBetaFeature() && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.IBM)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.IBMDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.AWS)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.AWSDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.Azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.AzureDesc))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(\"div\", { style: styles.headerContentRight },\n                        isBetaFeature() && React.createElement(Currency, null),\n                        isBetaFeature() && React.createElement(ExportLink, null))),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = queryFromRoute.perspective;\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const query = Object.assign(Object.assign(Object.assign({}, (perspective && { perspective })), { tabKey }), (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(query);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, \"aws\" /* aws */),\n        azureProviders: filterProviders(providers, \"azure\" /* azure */),\n        gcpProviders: filterProviders(providers, \"gcp\" /* gcp */),\n        ibmProviders: filterProviders(providers, \"ibm\" /* ibm */),\n        ocpProviders: filterProviders(providers, \"ocp\" /* ocp */),\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        queryString,\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OverviewBase));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import Overview from './overview';\nexport default Overview;\n","// Show in-progress features in beta environment only\nexport const isBetaFeature = () => {\n    const insights = window.insights;\n    return insights && insights.chrome.isBeta() && !insights.chrome.isProd;\n};\n","import { getLocale, intl } from 'components/i18n';\nimport messages from 'locales/messages';\n// Returns the number of decimals for given string\nexport const countDecimals = (value, useLocale = true) => {\n    const decimalSeparator = useLocale ? Number('1.1').toLocaleString(getLocale(), {}).substring(1, 2) : '.';\n    const decimals = value.split(decimalSeparator);\n    return decimals[1] ? decimals[1].length : 0;\n};\n// Currencies are formatted differently, depending on the locale you're using. For example, the dollar\n// sign may appear on the left or the right of the currency symbol for French Vs German.\n//\n// Using the ISO currency code AUD, $12.34 USD is formatted per the locales below.\n// See ICU currencies https://www.localeplanet.com/icu/currency.html\n//\n// en: A$12.34\n// fr: 12,34 $AU\n// de: 12,34 AU$\n//\n// Note: Some currencies do not have decimals, such as JPY, and some have 3 decimals such as IQD.\n// See https://docs.adyen.com/development-resources/currency-codes\nexport const formatCurrency = (value, units, options = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Don't specify default fraction digits here, rely on react-intl instead\n    return intl.formatNumber(fValue, Object.assign({ style: 'currency', currency: units ? units.toUpperCase() : 'USD' }, options));\n};\nexport const formatCurrencyAbbreviation = (value, units = 'USD') => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Derived from https://stackoverflow.com/questions/37799955/how-can-i-format-big-numbers-with-tolocalestring\n    const abbreviationFormats = [\n        { val: 1e15, symbol: 'quadrillion' },\n        { val: 1e12, symbol: 'trillion' },\n        { val: 1e9, symbol: 'billion' },\n        { val: 1e6, symbol: 'million' },\n        { val: 1e3, symbol: 'thousand' },\n    ];\n    // Find the proper format to use\n    let format;\n    if (abbreviationFormats != null) {\n        format = abbreviationFormats.find(f => fValue >= f.val);\n    }\n    // Apply format and insert symbol next to the numeric portion of the formatted string\n    if (format != null) {\n        const { val, symbol } = format;\n        return intl.formatMessage(messages.CurrencyAbbreviations, {\n            symbol,\n            value: formatCurrency(fValue / val, units, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 0,\n            }),\n        });\n    }\n    // If no format was found, format value without abbreviation\n    return formatCurrency(value, units, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n    });\n};\n// Formats cost model rates with 0 to 10 decimals\n// https://issues.redhat.com/browse/COST-1884\nexport const formatCurrencyRate = (value, units, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 10,\n}) => {\n    return formatCurrency(value, units, options);\n};\n// Formats cost model rates with 0 to 10 decimals\n// https://issues.redhat.com/browse/COST-1884\nexport const formatCurrencyRateRaw = (value, units, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 10,\n}) => {\n    return formatCurrencyRaw(value, units, options);\n};\n// Formats without currency symbol\nexport const formatCurrencyRaw = (value, units, options = {}) => {\n    return formatCurrency(value, units, Object.assign({ currencyDisplay: 'code' }, options))\n        .toString()\n        .replace(units, '')\n        .trim();\n};\n// Returns formatted units or currency with given currency-code\nexport const formatUnits = (value, units, options) => {\n    const lookup = unitsLookupKey(units);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'core_hours':\n        case 'hour':\n        case 'hrs':\n            return formatUsageHrs(fValue, options);\n        case 'gb':\n        case 'gb_hours':\n        case 'gb_mo':\n        case 'gibibyte_month':\n        case 'tag_mo':\n        case 'vm_hours':\n            return formatUsageGb(fValue, options);\n    }\n    return unknownTypeFormatter(fValue, options);\n};\nexport const formatPercentage = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\n// Formats cost model markup with 0 to 10 decimals\n// https://issues.redhat.com/browse/COST-1884\nexport const formatPercentageMarkup = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 10,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\nconst formatUsageGb = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\nconst formatUsageHrs = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\n// Returns true if given percentage or currency format is valid for current locale\nexport const isCurrencyFormatValid = (value) => {\n    const decimalSeparator = intl.formatNumber(1.1).toString().replace(/1/g, '');\n    // ^[0-9] The number must start with 0-9\n    // \\d* The number can then have any number of any digits\n    // (...)$ look at the next group from the end (...)$\n    // (...)*(...)? Look for groups optionally. The first is for the comma, the second is for the decimal.\n    // (,\\d{3}){1} Look for one occurrence of a comma followed by exactly three digits\n    // \\.\\d Look for a decimal followed by any number of any digits\n    //\n    // See https://stackoverflow.com/questions/2227370/currency-validation\n    const regex = decimalSeparator === '.' ? /^-?[0-9]\\d*(((,\\d{3}){1})*(\\.\\d*)?)$/ : /^-?[0-9]\\d*(((\\.\\d{3}){1})*(,\\d*)?)$/;\n    return regex.test(value);\n};\n// Returns true if given percentage is valid for current locale\nexport const isPercentageFormatValid = (value) => {\n    return isCurrencyFormatValid(value);\n};\n// Some locales have a comma decimal separator (e.g., \"1.234,56\" in German is \"1,234.56\" in USD).\n// This function normalizes a given currency or percentage for APIs.\nexport const unFormat = (value) => {\n    if (!value) {\n        return value;\n    }\n    const groupSeparator = intl.formatNumber(1111).toString().replace(/1/g, '');\n    const decimalSeparator = intl.formatNumber(1.1).toString().replace(/1/g, '');\n    let rawValue = value.toString().replace(groupSeparator === ',' ? /,/g : /\\./g, '');\n    rawValue = rawValue.replace(decimalSeparator === '.' ? /\\./g : /,/g, '.');\n    return Number.isNaN(rawValue) ? '0' : rawValue;\n};\nconst unknownTypeFormatter = (value, options) => {\n    return value.toLocaleString(getLocale(), options);\n};\n// Returns i18n key for given units\nexport const unitsLookupKey = (units) => {\n    const lookup = units ? units.replace(/[- ]/g, '_').toLowerCase() : '';\n    switch (lookup) {\n        case 'core_hours':\n        case 'gb':\n        case 'gb_hours':\n        case 'gb_mo':\n        case 'gibibyte_month':\n        case 'hour':\n        case 'hrs':\n        case 'tag_mo':\n        case 'vm_hours':\n            return lookup;\n        default:\n            return undefined;\n    }\n};\n"],"names":["ExportContentBase","render","mapStateToProps","ExportContent","injectIntl","connect","ExportDrawerBase","constructor","props","super","this","drawerRef","getPanelContent","intl","isOpen","DrawerPanelContent","DrawerHead","tabIndex","ref","Title","headingLevel","size","TitleSizes","formatMessage","messages","DrawerActions","DrawerCloseButton","onClick","handleClose","DrawerContentBody","closeExportDrawer","handleExpand","current","focus","bind","componentDidMount","componentDidUpdate","prevProps","children","Drawer","className","isExpanded","onExpand","DrawerContent","panelContent","state","ui","ExportDrawer","styles","exportIcon","marginLeft","global_spacer_md","marginRight","global_spacer_sm","exportLink","display","alignItems","ExportLinkBase","arguments","handleToggle","event","openExportDrawer","preventDefault","style","Button","component","href","variant","ExportLink","perspectiveSelector","perspectiveLabel","marginBottom","whiteSpace","perspectiveOptionLabel","marginTop","PerspectiveBase","defaultState","isSelectOpen","Object","assign","getSelectOptions","options","selections","map","option","push","toString","label","value","getSelect","currentItem","isDisabled","length","selectOptions","selection","find","Select","id","onSelect","handleSelect","onToggle","SelectVariant","SelectOption","key","onSelected","setState","Perspective","DashboardBase","costType","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","default","undefined","onItemClicked","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","comparisonContainer","tabs","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showInfrastructureLabel","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getFormattedUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","currentInfrastructureData","previousInfrastructureData","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","forecastInfrastructureData","computedForecastInfrastructureItem","ReportSummaryComponent","currentInfrastructureCostData","forecastConeData","forecastInfrastructureConeData","formatOptions","formatter","format","previousInfrastructureCostData","showForecast","currentData","previousData","showUsageLegendLabel","getUnits","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","title","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","to","getDetailsLinkTitle","count","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","updateTab","fetchForecasts","fetchReports","widget","awsDashboard","queries","currentQuery","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsDashboardWidget","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","alignSelf","flexGrow","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_lg","headerContent","justifyContent","headerContentLeft","headerContentRight","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","main","paddingBottom","paddingTop","ocpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOcpCloudAvailable","getCostType","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","handleCostTypeSelected","hasAws","hasAzure","hasGcp","hasIbm","hasOcp","hasOcpCloud","getDefaultInfrastructurePerspective","perspective","getDefaultOcpPerspective","ocpProviders","userAccess","getPerspective","isAwsOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","isAzureOcpAvailable","handlePerspectiveSelected","getRouteForQuery","query","history","location","pathname","getQueryRoute","tabContentId","tabContentRef","getTabContent","TabContent","awsProviders","azureProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","newQuery","JSON","parse","stringify","cost_type","replace","tabKey","hasAwsOcp","hasAzureOcp","hasGcpOcp","hasIbmOcp","providers","providersFetchStatus","userAccessFetchStatus","noAwsProviders","noAzureProviders","noGcpProviders","noIbmProviders","noOcpProviders","noProviders","isLoading","Popover","enableFlip","bodyContent","ButtonVariant","queryFromRoute","parseQuery","search","Number","isNaN","queryString","getQuery","providersQueryString","providersError","userAccessQueryString","userAccessError","isBetaFeature","insights","window","chrome","isBeta","isProd","countDecimals","useLocale","decimalSeparator","toLocaleString","substring","decimals","split","formatCurrency","fValue","currency","toUpperCase","formatCurrencyAbbreviation","abbreviationFormats","symbol","f","minimumFractionDigits","maximumFractionDigits","formatCurrencyRate","formatCurrencyRateRaw","formatCurrencyRaw","currencyDisplay","trim","formatUnits","unitsLookupKey","formatUsageHrs","formatUsageGb","unknownTypeFormatter","formatPercentage","formatPercentageMarkup","isCurrencyFormatValid","test","isPercentageFormatValid","unFormat","groupSeparator","rawValue","lookup","toLowerCase"],"sourceRoot":""}