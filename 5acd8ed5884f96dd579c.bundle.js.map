{"version":3,"sources":["webpack:///./src/pages/ocpDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsTagView.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpDetails/exportModal.styles.ts","webpack:///./src/pages/ocpDetails/exportModal.tsx","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/pages/ocpDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpDetails/historicalChart.tsx","webpack:///./src/pages/ocpDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpDetails/historicalModal.tsx","webpack:///./src/pages/ocpDetails/noRatesState.styles.ts","webpack:///./src/pages/ocpDetails/noRatesState.tsx","webpack:///./src/pages/ocpDetails/priceListTable.tsx","webpack:///./src/pages/ocpDetails/priceListModal.tsx","webpack:///./src/pages/ocpDetails/detailsActions.tsx","webpack:///./src/pages/ocpDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.tsx","webpack:///./src/pages/ocpDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidget.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpDetails/detailsTable.tsx","webpack:///./src/pages/ocpDetails/detailsToolbar.styles.ts","webpack:///./src/pages/ocpDetails/filterBy.styles.ts","webpack:///./src/pages/ocpDetails/filterBy.tsx","webpack:///./src/pages/ocpDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpDetails/ocpDetails.styles.ts","webpack:///./src/pages/ocpDetails/ocpDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","tags","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","getForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getSinceDateRangeString","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","isEqual","obj1","obj2","JSON","stringify","split","join","chartStyles","currentRequestData","fill","stroke","strokeDasharray","currentUsageData","itemsPerRow","labels","fontFamily","esm","minWidth","legendColorScale","previousRequestData","previousUsageData","currentColorScale","previousColorScale","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","usageChart_UsageChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","setState","series","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","legendItemsPerRow","ChartLegend","colorScale","getLegendData","gutter","formatDatumValue","formatDatumOptions","childName","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","_","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","maxValue","Math","ceil","currentRequestDate","get_date_default","currentUsageDate","previousRequestDate","previousUsageDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","OcpReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","OcpReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","Tooltip","content","enableFlip","getCostLayout","ocpReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","skeleton","OcpReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","costKey","responsive","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","marginLeft","historicalUsageChart_HistoricalUsageChart","maxCurrentLimit","maxPreviousLimit","xAxisLabel","yAxisLabel","costValue","costLabelUnit","costLabelDate","header","backgroundColor","info","verticalAlign","infoIcon","infoTitle","fontWeight","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","ocpQuery","filter","resolution","time_scope_units","time_scope_value","key_only","ocpReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","onClick","getDropDownTags","val","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","showPopover","handlePopoverClick","show","onGroupByClicked","showContent","sizes","Popover","aria-label","bodyContent","info_circle_icon","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","query","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","ocpReportSummary","_item","DetailsWidgetModal","parentGroupBy","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","currentTarget","sortedItems","selectedLabel","actions","Button","variant","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","groupItem","historicalCostChart_styles_styles","historicalCostChart_HistoricalCostChart","historicalChart_styles_chartStyles","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpReportsActions","HistoricalChart","getSkeleton","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpDashboard","selectCurrentWidgets","HistoricalModal","noRatesState_styles_styles","NoRatesState","money_check_alt_icon","metric","priceListTable","rates","notAvailableText","Table","cells","rows","range_unit","value_unit","range_value","period","Header","Body","priceListModal","priceListProvider","find","p","providerUuid","uuid","priceList","store_priceList","ratesPerProvider","priceListError","priceListStatus","fetch","fetchPriceList","errorState","priceListRates","close","renderContent","detailsActions_tagKey","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isPriceListModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getPriceListModal","handlePriceListModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handlePriceListModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","freeSpace","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","hasTotal","hasLimit","trunc","limitUnits","hasRequest","requestUnits","hasUsage","hasCapacity","capacityUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","TextContent","TextList","dl","TextListItem","dt","dd","percentage","cpuDatum","getChartDatumWithCapacity","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","getFreeSpace","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","summary","viewAllContainer","detailsWidget_reportType","detailsWidget_mapStateToProps","detailsWidget_mapDispatchToProps","DetailsWidget","isDetailsChartModalOpen","currentTab","getSummary","getViewAll","handleDetailsChartModalOpen","button","handleDetailsChartModalClose","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getDerivedCost","getTotalCost","getActions","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","iconOverride","getSortBy","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","detailsToolbar_styles_styles","paginationContainer","toolbarContainer","paddingLeft","filterBy_styles_styles","filterContainer","filterByOptions","filterBy_reportType","filterBy_tagKey","filterBy_mapStateToProps","filterBy_mapDispatchToProps","FilterBy","isFilterByOpen","isFilterByTagOpen","getFilterBy","getSelectOptions","getFilterByTag","getSelectTagOptions","getSelectOption","getSelectItems","SelectOption","getSelectTagItems","escapeValue","handleFilterBySelect","selection","isPlaceholder","handleFilterByTagSelect","currentTagItem","handleFilterByToggle","handleFilterByTagToggle","filterByTag","Select","isExpanded","selections","selectConstants","single","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","currentValue","currentViewType","filterCategory","addQuery","filter_by","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","placeholder","TextInput","onKeyPress","isExportDisabled","pagination","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","ocpDetails_styles_styles","ocpDetails","tableContainer","ocpDetails_reportType","ocpDetails_tagKey","ocpDetails_baseQuery","ocpDetails_mapStateToProps","ocpDetails_mapDispatchToProps","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","history","newFilterType","found","filters","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","noProvidersState","loadingState"],"mappings":"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","file":"5acd8ed5884f96dd579c.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpDetails from './ocpDetails';\nexport default hot(module)(OcpDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                derivedCost,\n                infrastructureCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", responsive: false, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                    {\n                        data: previousLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(previousLimitData, limitKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousLimitData,\n                    },\n                    {\n                        data: currentLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(currentLimitData, limitKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentLimitData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_md, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { parseQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Popover, Title, TitleSize, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let derivedCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            cost = formatValue(report.meta.total.derived_cost ? report.meta.total.cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            derivedCost = formatValue(report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0, report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.units\n                : 'USD');\n        }\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_details.title')),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('ocp_details.total_cost_tooltip', {\n                            derivedCost,\n                            infrastructureCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) },\n                        t('ocp_details.total_cost'),\n                        React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_details.derived_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_details.derived_cost_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_details.infrastructure_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_details.infrastructure_cost_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetView } from './detailsWidgetView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.widget_modal_title', {\n                parentGroupBy,\n                name: item.label,\n                groupBy,\n            }) },\n            React.createElement(DetailsWidgetView, { groupBy: parentGroupBy, item: item })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpExportActions, ocpExportSelectors } from 'store/ocpExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpExportSelectors.selectExportError(state),\n        export: ocpExportSelectors.selectExport(state),\n        fetchStatus: ocpExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport { getCostRangeString, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 700\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !==\n                this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxCurrentRequest = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxPreviousLimit = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxPreviousRequest = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxPreviousLimit, maxPreviousRequest);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData, } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0\n            ? Math.max(currentRequestDate, previousRequestDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalCostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalCostChart } from 'components/charts/historicalCostChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpReportsActions from 'store/ocpReports/ocpReportsActions';\nimport * as ocpReportsSelectors from 'store/ocpReports/ocpReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const currentInfrastructureCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        const previousCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousInfrastructureCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { containerHeight: chartStyles.chartContainerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureCostData, title: t('ocp_details.historical.cost_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_details.historical.cpu_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_details.historical.memory_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '50vh',\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, TitleSize, } from '@patternfly/react-core';\nimport { MoneyCheckAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './noRatesState.styles';\nconst NoRatesStateBase = ({ t, cluster }) => {\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: MoneyCheckAltIcon }),\n            React.createElement(Title, { size: TitleSize.lg }, t('no_rates_state.title')),\n            React.createElement(EmptyStateBody, null, t('no_rates_state.desc', { cluster })))));\n};\nexport const NoRatesState = translate()(NoRatesStateBase);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport React from 'react';\nimport { formatCurrency } from 'utils/formatValue';\nfunction getUsageRangeText(metric, t) {\n    return metric.range_value[0] === null && metric.range_value[1] === null\n        ? t('ocp_details.price_list.modal.no_range_set')\n        : `${metric.range_value[0] || ' '} - ${metric.range_value[2] || ' '} ${metric.range_unit}`;\n}\nconst PriceListTable = ({ rates, t }) => {\n    const notAvailableText = t('ocp_details.price_list.modal.not_available');\n    return (React.createElement(Table, { \"aria-label\": \"price-list-table\", cells: [\n            t('ocp_details.price_list.modal.metric'),\n            t('ocp_details.price_list.modal.value'),\n            t('ocp_details.price_list.modal.applied_usage_range'),\n            t('ocp_details.price_list.modal.applied_usage_date_range'),\n        ], rows: rates.map(metric => [\n            t(`ocp_details.price_list.modal.${metric.display}`, {\n                index: metric.index + 1,\n                unit: metric.range_unit,\n            }),\n            metric.value\n                ? formatCurrency(metric.value, metric.value_unit)\n                : notAvailableText,\n            getUsageRangeText(metric, t),\n            t(`ocp_details.price_list.modal.${metric.period}`),\n        ]) },\n        React.createElement(TableHeader, null),\n        React.createElement(TableBody, null)));\n};\nexport default PriceListTable;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { priceListActions, priceListSelectors } from 'store/priceList';\nimport { providersSelectors } from 'store/providers';\nimport { styles as chartStyles } from './historicalChart.styles';\nimport { modalOverride, styles } from './historicalModal.styles';\nimport { NoRatesState } from './noRatesState';\nimport PriceListTable from './priceListTable';\nclass PriceListModalBase extends React.Component {\n    componentDidUpdate() {\n        const { fetch, isOpen, providers, priceListStatus: status, name, } = this.props;\n        if (isOpen && status !== 1 /* inProgress */) {\n            const priceListProvider = providers.data.find(p => p.name === name);\n            fetch(priceListProvider ? priceListProvider.uuid : null);\n        }\n    }\n    renderContent() {\n        const { t, providers, name, priceListStatus, priceListError, priceList, } = this.props;\n        if (priceListStatus !== 2 /* complete */) {\n            return (React.createElement(Skeleton, { className: css(chartStyles.chartSkeleton), size: SkeletonSize.md }));\n        }\n        if (priceListError !== null) {\n            return React.createElement(ErrorState, { error: priceListError });\n        }\n        const priceListProvider = providers.data.find(p => p.name === name);\n        const priceListRates = priceListProvider && priceList[priceListProvider.uuid];\n        return priceListRates ? (React.createElement(PriceListTable, { t: t, rates: priceListRates })) : (React.createElement(NoRatesState, { cluster: name.toString() }));\n    }\n    render() {\n        const { t, isOpen, close, name } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: () => close(false), title: t('ocp_details.price_list.modal.title', { name }) }, this.renderContent()));\n    }\n}\nconst PriceListModal = connect(createMapStateToProps((state, props) => {\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, 'type=OCP');\n    const priceListProvider = providers.data.find(p => p.name === props.name);\n    const providerUuid = priceListProvider ? priceListProvider.uuid : null;\n    return {\n        priceList: priceListSelectors.ratesPerProvider(state, providerUuid),\n        priceListError: priceListSelectors.error(state, providerUuid),\n        priceListStatus: priceListSelectors.status(state, providerUuid),\n        providers,\n    };\n}), {\n    fetch: priceListActions.fetchPriceList,\n})(translate()(PriceListModalBase));\nexport default PriceListModal;\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nimport PriceListModal from './priceListModal';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isPriceListModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getPriceListModal = () => {\n            const { item: { label }, } = this.props;\n            return (React.createElement(PriceListModal, { name: label, isOpen: this.state.isPriceListModalOpen, close: this.handlePriceListModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handlePriceListModalClose = (isOpen) => {\n            this.setState({ isPriceListModalOpen: isOpen });\n        };\n        this.handlePriceListModalOpen = () => {\n            this.setState({ isPriceListModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handlePriceListModalClose = this.handlePriceListModalClose.bind(this);\n        this.handlePriceListModalOpen = this.handlePriceListModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: groupBy.includes(tagKey), onClick: this.handlePriceListModalOpen }, t('ocp_details.actions.price_list')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal(),\n            this.getPriceListModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    freeSpace: {\n        marginBottom: global_spacer_lg.value,\n        marginLeft: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { TextContent, TextList, TextListItem, TextListItemVariants, TextListVariants, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n        ];\n        return datum;\n    }\n    getChartDatumWithCapacity(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const capacityUnits = t(`units.${unitLookupKey(hasCapacity ? report.meta.total.capacity.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                value: Math.trunc(capacity),\n            },\n        ];\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace(report, labelKey) {\n        const { t } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(TextContent, { className: css(styles.freeSpace) },\n            React.createElement(TextList, { component: TextListVariants.dl },\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_details.bullet.${labelKey}_usage_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_details.bullet.${labelKey}_usage_unused`, {\n                    percentage: formatValue(unusedUsageCapacityPercentage, usageUnits),\n                    value: unusedUsageCapacity,\n                    units: usageUnits,\n                })),\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_details.bullet.${labelKey}_requests_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_details.bullet.${labelKey}_requests_unused`, {\n                    percentage: formatValue(unusedRequestCapacityPercentage, requestUnits),\n                    value: unusedRequestCapacity,\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, groupBy, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = groupBy === 'cluster'\n            ? this.getChartDatumWithCapacity(cpuReport, 'cpu')\n            : this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = groupBy === 'cluster'\n            ? this.getChartDatumWithCapacity(memoryReport, 'memory')\n            : this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                        ? [\n                            {\n                                tooltip: cpuDatum.limit.tooltip,\n                                y: cpuDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value\n                        ? [{ name: cpuDatum.limit.legend }]\n                        : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: cpuDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: cpuDatum.ranges[0].tooltip,\n                                y: cpuDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                        ? [{ name: cpuDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(cpuReport, 'cpu'))))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                        ? [\n                            {\n                                tooltip: memoryDatum.limit.tooltip,\n                                y: memoryDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                        ? [{ name: memoryDatum.limit.legend }]\n                        : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: memoryDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: memoryDatum.ranges[0].tooltip,\n                                y: memoryDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                        ? [{ name: memoryDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(memoryReport, 'memory')))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    summary: {\n        paddingTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpReportItems } from 'utils/getComputedOcpReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isDetailsChartModalOpen: false,\n        };\n        this.getItems = (currentTab) => {\n            const { report } = this.props;\n            const computedItems = getComputedOcpReportItems({\n                report,\n                idKey: currentTab,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportFetchStatus, t } = this.props;\n            return (React.createElement(React.Fragment, null,\n                t('group_by.details', { groupBy: 'project' }),\n                React.createElement(\"div\", { className: css(styles.summary) },\n                    React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(OcpReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label.toString(), totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost })))),\n                    this.getViewAll())));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, t } = this.props;\n            const { isDetailsChartModalOpen } = this.state;\n            const currentTab = 'project';\n            const computedItems = this.getItems(currentTab);\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleDetailsChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_details.view_all', { value: currentTab })),\n                    React.createElement(DetailsWidgetModal, { groupBy: currentTab, isOpen: isDetailsChartModalOpen, item: item, onClose: this.handleDetailsChartModalClose, parentGroupBy: groupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleDetailsChartModalClose = (isOpen) => {\n            this.setState({ isDetailsChartModalOpen: isOpen });\n        };\n        this.handleDetailsChartModalOpen = event => {\n            this.setState({ isDetailsChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { reportFetchStatus } = this.props;\n        return (React.createElement(\"div\", null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (this.getSummary())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        Boolean(groupBy === 'cluster') && (React.createElement(DetailsWidget, { groupBy: groupBy, item: item })))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst DetailsTableItem = translate()(connect()(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'infrastructure_cost',\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'derived_cost',\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const derivedCost = this.getDerivedCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, InfrastructureCost) },\n                        { title: React.createElement(\"div\", null, derivedCost) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getDerivedCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.derivedCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.derivedCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructureCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.infrastructureCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = percentage !== 0 ? 'iconOverride' : undefined;\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    Boolean(percentage > 0) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    filterContainer: {\n        display: 'inline-flex',\n    },\n});\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { styles } from './filterBy.styles';\nconst filterByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n    { label: 'tags', value: 'tags' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass FilterByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isFilterByOpen: false,\n            isFilterByTagOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getFilterBy = () => {\n            const { groupBy } = this.props;\n            // Find i18n string\n            const items = this.getSelectOptions();\n            for (const item of items) {\n                if (groupBy === item.id ||\n                    (groupBy.indexOf(tagKey) !== -1 && item.id === 'tags')) {\n                    return item;\n                }\n            }\n            return null;\n        };\n        this.getFilterByTag = () => {\n            const { groupBy } = this.props;\n            // Find i18n string\n            const items = this.getSelectTagOptions();\n            for (const item of items) {\n                if (groupBy === item.id) {\n                    return item;\n                }\n            }\n            return items[0];\n        };\n        this.getSelectOption = (id, label) => {\n            return {\n                id,\n                toString: () => label,\n            };\n        };\n        this.getSelectItems = () => {\n            return this.getSelectOptions().map(option => (React.createElement(SelectOption, { key: option.id, value: option })));\n        };\n        this.getSelectTagItems = () => {\n            return this.getSelectTagOptions().map(option => (React.createElement(SelectOption, { key: option.id, value: option })));\n        };\n        this.getSelectOptions = () => {\n            const { t } = this.props;\n            return filterByOptions.map(option => {\n                return this.getSelectOption(`${option.value}`, t(`group_by.values.${option.label}`));\n            });\n        };\n        this.getSelectTagOptions = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => {\n                    return this.getSelectOption(`${tagKey}${val}`, t('group_by.tag', { key: val, interpolation: { escapeValue: false } }));\n                });\n            }\n            else {\n                return [];\n            }\n        };\n        this.handleFilterBySelect = (event, selection, isPlaceholder) => {\n            const { groupBy, onItemClicked } = this.props;\n            let selected = selection;\n            if (selection.id === 'tags') {\n                const items = this.getSelectTagOptions();\n                if (groupBy.indexOf(tagKey) !== -1) {\n                    for (const item of items) {\n                        if (groupBy === item.id) {\n                            selected = item;\n                        }\n                    }\n                }\n                else {\n                    selected = items[0];\n                }\n            }\n            if (onItemClicked) {\n                onItemClicked(selected.id);\n            }\n            this.setState({\n                currentItem: selection,\n                isFilterByOpen: false,\n            });\n        };\n        this.handleFilterByTagSelect = (event, selection, isPlaceholder) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.id);\n            }\n            this.setState({\n                currentTagItem: selection,\n                isFilterByTagOpen: false,\n            });\n        };\n        this.handleFilterByToggle = isFilterByOpen => {\n            this.setState({\n                isFilterByOpen,\n            });\n        };\n        this.handleFilterByTagToggle = isFilterByTagOpen => {\n            this.setState({\n                isFilterByTagOpen,\n            });\n        };\n        this.handleFilterBySelect = this.handleFilterBySelect.bind(this);\n        this.handleFilterByTagSelect = this.handleFilterByTagSelect.bind(this);\n        this.handleFilterByTagToggle = this.handleFilterByTagToggle.bind(this);\n        this.handleFilterByToggle = this.handleFilterByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getFilterBy(),\n            currentTagItem: this.getFilterByTag(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportFetchStatus, groupBy, queryString } = this.props;\n        if (prevProps.groupBy !== groupBy ||\n            prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n        if (prevProps.groupBy !== groupBy ||\n            prevProps.queryString !== queryString ||\n            prevProps.reportFetchStatus !== reportFetchStatus) {\n            this.setState({\n                currentItem: this.getFilterBy(),\n                currentTagItem: this.getFilterByTag(),\n            });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, currentTagItem, isFilterByOpen, isFilterByTagOpen, } = this.state;\n        const filterByTag = currentItem && currentItem.id ? currentItem.id === 'tags' : false;\n        return (React.createElement(\"div\", { className: css(styles.filterContainer) },\n            React.createElement(Select, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label'), onSelect: this.handleFilterBySelect, onToggle: this.handleFilterByToggle, isExpanded: isFilterByOpen, selections: currentItem, variant: SelectVariant.single }, this.getSelectItems()),\n            Boolean(filterByTag) && (React.createElement(Select, { \"aria-label\": t('ocp_details.toolbar.filter_tag_type_aria_label'), onSelect: this.handleFilterByTagSelect, onToggle: this.handleFilterByTagToggle, isExpanded: isFilterByTagOpen, selections: currentTagItem, variant: SelectVariant.single }, this.getSelectTagItems()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst FilterBy = translate()(connect(mapStateToProps, mapDispatchToProps)(FilterByBase));\nexport { FilterBy };\n","import { Button, ButtonVariant, Chip, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nimport { FilterBy } from './filterBy';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.groupBy,\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            if (query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    if (Array.isArray(query.filter_by[key])) {\n                        query.filter_by[key].forEach(value => {\n                            const field = key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key;\n                        const filter = this.getFilter(field, query.filter_by[key]);\n                        activeFilters.push(filter);\n                    }\n                });\n            }\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(this.props.groupBy, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType, value);\n        };\n        this.getFilter = (field, value) => {\n            const filterLabel = this.getFilterLabel(field, value);\n            const result = {\n                field,\n                label: filterLabel,\n                value,\n            };\n            return result;\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = (filterType) => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (groupBy !== prevProps.groupBy) {\n            this.setState({\n                currentFilterType: groupBy,\n            });\n        }\n    }\n    renderInput() {\n        const { t } = this.props;\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        const index = currentFilterType ? currentFilterType.indexOf(tagKey) : -1;\n        const placeholder = index === 0\n            ? t('ocp_cloud_details.filter.tag_placeholder')\n            : t(`ocp_cloud_details.filter.${currentFilterType}_placeholder`);\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: placeholder, value: currentValue }));\n    }\n    render() {\n        const { isExportDisabled, groupBy, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FilterBy, { groupBy: groupBy, onItemClicked: this.selectFilterType })),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_details.export_link'), groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[newFilterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[newFilterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[newFilterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[newFilterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[newFilterType] = [\n                        newQuery.filter_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (!Array.isArray(newQuery.filter_by[newFilterType])) {\n                newQuery.filter_by[newFilterType] = undefined;\n            }\n            else {\n                const index = newQuery.filter_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[newFilterType] = [\n                        ...query.filter_by[newFilterType].slice(0, index),\n                        ...query.filter_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n"],"sourceRoot":""}