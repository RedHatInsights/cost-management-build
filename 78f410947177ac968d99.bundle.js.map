{"version":3,"file":"78f410947177ac968d99.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/components/accountSettings/accountSettings.tsx","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/pages/views/explorer/explorer.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/views/explorer/explorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/dateRange.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerTable.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/pages/views/explorer/explorer.tsx","webpack://koku-ui/./src/pages/views/explorer/index.ts","webpack://koku-ui/./src/pages/views/explorer/explorerWrapper.tsx","webpack://koku-ui/./src/utils/userAccess.ts","webpack://koku-ui/./node_modules/victory-stack/es/helper-methods.js","webpack://koku-ui/./node_modules/victory-stack/es/victory-stack.js"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { accountSettingsActions, accountSettingsSelectors } from 'store/accountSettings';\nimport { createMapStateToProps } from 'store/common';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nclass AccountSettingsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateAccountSettings = () => {\n            const { accountSettingsFetchStatus, fetchAccountSettings } = this.props;\n            if (accountSettingsFetchStatus !== 1 /* inProgress */) {\n                fetchAccountSettings();\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateAccountSettings();\n    }\n    componentDidUpdate(prevProps) {\n        const { accountSettings } = this.props;\n        if (prevProps.accountSettings !== accountSettings) {\n            const costType = accountSettings ? accountSettings.data.cost_type : \"unblended_cost\" /* unblended */;\n            const currency = accountSettings ? accountSettings.data.currency : 'USD';\n            // Force update to render children\n            this.setState({\n                costType,\n                currency,\n            });\n        }\n    }\n    render() {\n        const { accountSettingsFetchStatus, children } = this.props;\n        return accountSettingsFetchStatus === 2 /* complete */ ? children : null;\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const accountSettings = accountSettingsSelectors.selectAccountSettings(state);\n    const accountSettingsError = accountSettingsSelectors.selectAccountSettingsError(state);\n    const accountSettingsFetchStatus = accountSettingsSelectors.selectAccountSettingsFetchStatus(state);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    return {\n        accountSettings,\n        accountSettingsError,\n        accountSettingsFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchAccountSettings: accountSettingsActions.fetchAccountSettings,\n};\nconst CostTypeConnect = connect(mapStateToProps, mapDispatchToProps)(AccountSettingsBase);\nconst AccountSettings = injectIntl(CostTypeConnect);\nexport { AccountSettings };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.Perspective)),\n            this.getSelect()));\n    }\n}\nconst Perspective = injectIntl(PerspectiveBase);\nexport { Perspective };\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport { filterProviders } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.AzureDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers: filterProviders(providers, \"azure\" /* azure */),\n        providersError,\n        providersFetchStatus,\n        providerType: \"azure\" /* azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* azure */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { Currency } from 'components/currency';\nimport messages from 'locales/messages';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { filterProviders } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupBySelected, providers, providersError, report, intl } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.AzureDetailsTitle)),\n                isBetaFeature() && React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"azure\" /* azure */),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport messages from 'locales/messages';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.TagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.Cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById, title: intl.formatMessage(messages.DetailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.Cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.Percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.AzureDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"azure\" /* azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'subscription_guid' }),\n                    key: 'subscription_guid',\n                },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'service_name' }), key: 'service_name' },\n                {\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'resource_location' }),\n                    key: 'resource_location',\n                },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== 1 /* inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"azure\" /* azure */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReportFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { filterProviders, hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.AzureDetailsTitle);\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* azure */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"azure\" /* azure */),\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.gcp_project) {\n        return 'gcp_project';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrencyAbbreviation } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costExplorerChart.styles';\nclass CostExplorerChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            const units = this.getUnits(series);\n            this.setState({ cursorVoronoiContainer, series, units });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        // If bar width exceeds max and domainPadding is true, extra width is returned to help center bars horizontally\n        this.getBarWidth = (domainPadding = false) => {\n            const { hiddenSeries, series, width } = this.state;\n            const maxWidth = 200;\n            let maxValue = -1;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        if (s.data.length > maxValue) {\n                            maxValue = s.data.length;\n                        }\n                    }\n                });\n            }\n            // Divide available width into equal sections\n            const sections = maxValue * 2 + 1;\n            const sectionWidth = maxValue > 0 ? width / sections : 0;\n            if (domainPadding) {\n                // Add any extra bar width for domain padding\n                const extraWidth = sectionWidth > maxWidth ? (sectionWidth - maxWidth) * maxValue : 0;\n                return (sectionWidth + extraWidth / 2) * 2;\n            }\n            return sectionWidth > maxWidth ? maxWidth : sectionWidth;\n        };\n        this.getChart = (series, index, barWidth) => {\n            const { hiddenSeries } = this.state;\n            const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n            return (React.createElement(ChartBar, { barWidth: barWidth, data: data, key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        // Returns domain only if max y values are zero\n        this.getDomain = (series, hiddenSeries) => {\n            let maxValue = -1;\n            let domain;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        const max = getMaxValue(s.data);\n                        maxValue = Math.max(maxValue, max);\n                    }\n                });\n            }\n            if (maxValue <= 0) {\n                domain = { y: [0, 100] };\n            }\n            return domain;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const { hiddenSeries, series } = this.state;\n            const result = getInteractiveLegendEvents({\n                chartNames: getChartNames(series),\n                isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n                isHidden: index => isSeriesHidden(hiddenSeries, index),\n                legendName: 'legend',\n                onLegendClick: props => this.handleLegendClick(props.index),\n            });\n            return result;\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // This ensures we show every 3rd tick value, including the first and last value\n        //\n        // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n        this.getTickValues = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            // Find the datum with the greatest number of values\n            const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n            let datum;\n            allDatums.map(val => {\n                if (!datum || datum.length < val.length) {\n                    datum = val;\n                }\n            });\n            const values = [];\n            datum.map(val => {\n                values.push(val.x);\n            });\n            // Prune tick values\n            const tickValues = [];\n            const modVal = values.length < 6 ? 2 : 3;\n            for (let i = 0; i < values.length; i++) {\n                if (i % modVal === 0 && i + 2 < values.length) {\n                    tickValues.push(values[i]);\n                }\n                else if (values.length < 3 && i + 1 < values.length) {\n                    tickValues.push(values[i]);\n                }\n            }\n            tickValues.push(values[values.length - 1]);\n            return tickValues;\n        };\n        this.getTruncatedString = (str) => {\n            const maxChars = 20;\n            return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n        };\n        this.getTickValue = (t) => {\n            const { units } = this.state;\n            return formatCurrencyAbbreviation(t, units);\n        };\n        this.getUnits = (series) => {\n            if (series) {\n                for (const s of series) {\n                    for (const datum of s.data) {\n                        if (datum.units) {\n                            return datum.units;\n                        }\n                    }\n                }\n            }\n            return 'USD';\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    render() {\n        const { height, intl, padding = {\n            bottom: 50,\n            left: 40,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        const barWidth = this.getBarWidth();\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), domainPadding: { x: this.getBarWidth(true) }, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index, barWidth)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: this.getTickValues(), fixLabelOverlap: true }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis, tickFormat: this.getTickValue })))));\n    }\n}\nconst CostExplorerChart = injectIntl(CostExplorerChartBase);\nexport { CostExplorerChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { hasCloudProvider } from 'pages/views/utils/providers';\nimport { getCurrentMonthDate, getLast30DaysDate, getLast60DaysDate, getLast90DaysDate } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable, } from 'utils/userAccess';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: messages.ExplorerDateRange, value: 'current_month_to_date' },\n    { label: messages.ExplorerDateRange, value: 'previous_month_to_date' },\n    { label: messages.ExplorerDateRange, value: 'last_thirty_days' },\n    { label: messages.ExplorerDateRange, value: 'last_sixty_days' },\n];\n// Todo: Show in-progress features in beta environment only\nif (isBetaFeature()) {\n    dateRangeOptions.push({ label: messages.ExplorerDateRange, value: 'last_ninety_days' });\n}\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: messages.PerspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nexport const infrastructureAwsOcpOptions = [{ label: messages.PerspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: messages.PerspectiveValues, value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nexport const infrastructureAzureOcpOptions = [{ label: messages.PerspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OpenShift options\nexport const infrastructureGcpOcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nexport const infrastructureIbmOptions = [{ label: messages.PerspectiveValues, value: 'ibm' }];\n// Infrastructure Ocp cloud options\nexport const infrastructureOcpCloudOptions = [{ label: messages.PerspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nexport const ocpOptions = [{ label: messages.PerspectiveValues, value: 'ocp' }];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift supplementary & usage\" perspectives -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getComputedReportItemValueType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift usage\" perspective -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"total\" /* total */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = (dateRangeType) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    let dateRange;\n    switch (dateRangeType) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            startDate.setDate(1); // Required to obtain correct month\n            startDate.setMonth(startDate.getMonth() - 1); // Note: Must include previous and current month\n            dateRange = {\n                end_date: format(endDate, 'yyyy-MM-dd'),\n                start_date: format(startDate, 'yyyy-MM-dd'),\n            };\n            break;\n        case \"last_ninety_days\" /* lastNinetyDays */:\n            dateRange = getLast90DaysDate();\n            break;\n        case \"last_sixty_days\" /* lastSixtyDays */:\n            dateRange = getLast60DaysDate();\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            dateRange = getLast30DaysDate();\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            dateRange = getCurrentMonthDate();\n            break;\n    }\n    return dateRange;\n};\nexport const getDateRangeDefault = (queryFromRoute) => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = ({ awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, queryFromRoute, userAccess, }) => {\n    const perspective = queryFromRoute.perspective;\n    // Upon page refresh, perspective param takes precedence\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n        case \"ibm\" /* ibm */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            return perspective;\n    }\n    if (isOcpAvailable(userAccess, ocpProviders)) {\n        return \"ocp\" /* ocp */;\n    }\n    const hasAwsCloud = hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n    const hasAzureCloud = hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n    const hasGcpCloud = hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n    const hasIbmCloud = hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n    if (hasAwsCloud || hasAzureCloud || hasGcpCloud || hasIbmCloud) {\n        return \"ocp_cloud\" /* ocpCloud */;\n    }\n    if (isAwsAvailable(userAccess, awsProviders)) {\n        return \"aws\" /* aws */;\n    }\n    if (isAzureAvailable(userAccess, azureProviders)) {\n        return \"azure\" /* azure */;\n    }\n    if (isGcpAvailable(userAccess, gcpProviders)) {\n        return \"gcp\" /* gcp */;\n    }\n    if (isIbmAvailable(userAccess, ibmProviders)) {\n        return \"ibm\" /* ibm */;\n    }\n    return undefined;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n        case \"ibm\" /* ibm */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = 'subscription_guid';\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"ibm\" /* ibm */:\n            result = groupByIbmOptions;\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            result = \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            result = \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            result = \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getResourcePathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n        case \"ibm\" /* ibm */:\n            return \"ibm\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            return \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\n","import { Skeleton, Title } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { isFloat, isInt, } from 'components/charts/common/chartDatumUtils';\nimport { CostExplorerChart } from 'components/charts/costExplorerChart';\nimport { format, getDate, getMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { intl } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = intl.formatMessage(messages.ExplorerChartDate, {\n                date: getDate(computedItemDate),\n                month: getMonth(computedItemDate),\n            });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return Object.assign(Object.assign({ x: xVal, y: value === null ? null : yVal }, (value === null && { _y: 0 })), { date: computedItem.date, key: computedItem.id, name: computedItem.label ? computedItem.label : computedItem.id, units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined });\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            if (perspective) {\n                const reportPathsType = getReportPathsType(perspective);\n                const reportType = getReportType(perspective);\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                daily: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const label = datums[0].name;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key, label }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, intl } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, intl.formatMessage(messages.ExplorerChartTitle, { value: perspective }))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(CostExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = Object.assign({ filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }), filter_by: queryFromRoute.filter_by || baseQuery.filter_by, group_by: groupBy, perspective,\n        dateRange,\n        start_date,\n        end_date }, (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = injectIntl(withRouter(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currentItem, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"dateRangeSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst DateRange = injectIntl(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getRouteForQuery, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, intl, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: option.label }),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRange = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            this.setState({ currentDateRange: value }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportPathsType, tagQueryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgQueryString, orgReport, orgReportPathsType, perspective, query, tagQueryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n        if (prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, resourcePathsType, tagReport, tagReportPathsType, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRange(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, resourcePathsType: resourcePathsType, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const orgQueryString = getQuery({\n    // TBD...\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    }\n    // Fetch tags with largest date range available\n    const { start_date, end_date } = getLast60DaysDate();\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery({\n        start_date,\n        end_date,\n        key_only: true,\n    });\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    }\n    return {\n        dateRange,\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilterConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase);\nconst ExplorerFilter = injectIntl(withRouter(ExplorerFilterConnect));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { Currency } from 'components/currency';\nimport messages from 'locales/messages';\nimport { CostType } from 'pages/views/components/costType';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport { filterProviders, hasCloudProvider } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { getCostType } from 'utils/localStorage';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable, } from 'utils/userAccess';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getResourcePathsType, getRouteForQuery, getTagReportPathsType, infrastructureAwsOcpOptions, infrastructureAwsOptions, infrastructureAzureOcpOptions, infrastructureAzureOptions, infrastructureGcpOptions, infrastructureIbmOptions, infrastructureOcpCloudOptions, ocpOptions, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getPerspective = (isDisabled) => {\n            const { currentPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            // Note: No need to test OCP on cloud here, since that requires at least one provider\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOcp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (hasOcp) {\n                options.push(...ocpOptions);\n            }\n            if (this.isOcpCloudAvailable()) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            if (hasAws) {\n                options.push(...infrastructureAwsOptions);\n            }\n            if (this.isAwsCloudAvailable()) {\n                options.push(...infrastructureAwsOcpOptions);\n            }\n            if (hasGcp) {\n                options.push(...infrastructureGcpOptions);\n            }\n            // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n            //\n            // if (this.isGcpCloudAvailable()) {\n            //   options.push(...infrastructureGcpOcpOptions);\n            // }\n            if (hasIbm) {\n                options.push(...infrastructureIbmOptions);\n            }\n            if (hasAzure) {\n                options.push(...infrastructureAzureOptions);\n            }\n            if (this.isAzureCloudAvailable()) {\n                options.push(...infrastructureAzureOcpOptions);\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective || options[0].value, isDisabled: isDisabled, onSelected: this.handlePerspectiveSelected, options: options }));\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { history, onPerspectiveClicked, query } = this.props;\n            const newQuery = Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: undefined, perspective: value }), (value === \"aws\" /* aws */ && { cost_type: getCostType() }));\n            this.setState({ currentPerspective: value }, () => {\n                if (onPerspectiveClicked) {\n                    onPerspectiveClicked(value);\n                }\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Need param to restore cost type upon page refresh\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(getRouteForQuery(history, newQuery, false)); // Don't reset pagination\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsCloudAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureCloudAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpCloudAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmCloudAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsCloud = this.isAwsCloudAvailable();\n            const hasAzureCloud = this.isAzureCloudAvailable();\n            const hasGcpCloud = this.isGcpCloudAvailable();\n            const hasIbmCloud = this.isIbmCloudAvailable();\n            return hasAwsCloud || hasAzureCloud || hasGcpCloud || hasIbmCloud;\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.props.perspective,\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { perspective } = this.props;\n        if (prevProps.perspective !== perspective) {\n            this.setState({\n                currentPerspective: this.props.perspective,\n            });\n        }\n    }\n    render() {\n        const { groupBy, intl, onFilterAdded, onFilterRemoved, onGroupBySelected, perspective, providersFetchStatus, query, } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noAwsProviders = !this.isAwsAvailable() && providersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && providersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && providersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const resourcePathsType = getResourcePathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        // Fetch tags with largest date range available\n        const { start_date, end_date } = getLast60DaysDate();\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ExplorerTitle)),\n                isBetaFeature() && React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.perspectiveContainer },\n                this.getPerspective(noProviders),\n                React.createElement(\"div\", { style: styles.groupBy },\n                    React.createElement(GroupBy, { endDate: end_date, getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onSelected: onGroupBySelected, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, startDate: start_date, tagReportPathsType: tagReportPathsType })),\n                perspective === \"aws\" /* aws */ && (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { onSelect: this.handleCostTypeSelected })))),\n            React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, perspective: perspective, query: query, resourcePathsType: resourcePathsType })));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = Object.assign({ filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), filter_by: queryFromRoute.filter_by || baseQuery.filter_by, group_by: groupBy, order_by: queryFromRoute.order_by, perspective,\n        dateRange,\n        start_date,\n        end_date }, (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    return {\n        awsProviders: filterProviders(providers, \"aws\" /* aws */),\n        azureProviders: filterProviders(providers, \"azure\" /* azure */),\n        gcpProviders: filterProviders(providers, \"gcp\" /* gcp */),\n        ibmProviders: filterProviders(providers, \"ibm\" /* ibm */),\n        ocpProviders: filterProviders(providers, \"ocp\" /* ocp */),\n        providers,\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = injectIntl(withRouter(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { parseQuery } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { format, getDate, getMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, intl, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: true,\n            });\n            // Add first column heading (i.e., name)\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        cellTransforms: [nowrap],\n                        title: groupByOrg\n                            ? intl.formatMessage(messages.Names, { count: 2 })\n                            : intl.formatMessage(messages.TagNames),\n                    },\n                ]\n                : [\n                    Object.assign({ cellTransforms: [nowrap], date: undefined, orderBy: groupById === 'account' && perspective === \"aws\" /* aws */ ? 'account_alias' : groupById, title: intl.formatMessage(messages.GroupByValueNames, { groupBy: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                ];\n            // Fill in missing columns\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                let isSortable = computedItems.length > 0;\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        isSortable = false;\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push(Object.assign({ cellTransforms: [nowrap], title: intl.formatMessage(messages.ExplorerChartDate, { date, month }) }, (isSortable && {\n                    date: mapId,\n                    orderBy: 'cost',\n                    transforms: [sortable],\n                })));\n            }\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            // Sort by date and fill in missing cells\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc; // First column description (i.e., show ID if different than label)\n                let name; // For first column resource name\n                let selectItem; // Save for row selection\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!name) {\n                        name = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (item.id && !selectItem) {\n                        selectItem = item;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[reportItem] && item[reportItem][reportItemValue]\n                            ? formatCurrency(item[reportItem][reportItemValue].value, item[reportItem][reportItemValue].units)\n                            : intl.formatMessage(messages.ChartNoData),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        name,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    disableSelection: selectItem.label === `no-${groupById}` || selectItem.label === `no-${groupByTagKey}`,\n                    item: selectItem,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === selectItem.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            if (query && query.order_by) {\n                for (const key of Object.keys(query.order_by)) {\n                    let c = 0;\n                    for (const column of columns) {\n                        if (column.orderBy === key && !column.date) {\n                            direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        else if (column.date === query.order_by[key]) {\n                            direction = query.order_by.cost === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        c++;\n                    }\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const column = columns[index - 1];\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(column.orderBy, column.date, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.ExplorerTableAriaLabel), canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    return {\n        dateRange,\n        end_date,\n        perspective,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = injectIntl(ExplorerTableConnect);\nexport { ExplorerTable };\n","import { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTagReportPathsType } from './explorerUtils';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, perspective, selectedItems, } = this.props;\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = injectIntl(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { filterProviders, hasData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getComputedReportItemValueType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, getRouteForQuery, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: false,\n            });\n            return computedItems;\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective), resolution: \"daily\", showTimeScope: false }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, perspective: perspective, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { perspective, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), perspective: perspective, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = getRouteForQuery(history, newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handlePerspectiveClick = () => {\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, date, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            if (date) {\n                newQuery.order_by.date = date;\n            }\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.updateReport = () => {\n            const { dateRange, fetchReport, history, location, perspective, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: query ? query.order_by : undefined,\n                    dateRange,\n                }));\n            }\n            else if (perspective) {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handlePerspectiveClick = this.handlePerspectiveClick.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, perspective, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newPerspective = prevProps.perspective !== perspective;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newPerspective || newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, intl, ocpProviders, providersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noAwsProviders = !this.isAwsAvailable() && providersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && providersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && providersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const isLoading = providersFetchStatus === 1 /* inProgress */ || userAccessFetchStatus === 1 /* inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = intl.formatMessage(messages.ExplorerTitle);\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(hasData(awsProviders) ||\n            hasData(azureProviders) ||\n            hasData(gcpProviders) ||\n            hasData(ibmProviders) ||\n            hasData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, onGroupBySelected: this.handleGroupBySelected, onPerspectiveClicked: this.handlePerspectiveClick, perspective: perspective }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), perspective: perspective })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    const awsProviders = filterProviders(providers, \"aws\" /* aws */);\n    const azureProviders = filterProviders(providers, \"azure\" /* azure */);\n    const gcpProviders = filterProviders(providers, \"gcp\" /* gcp */);\n    const ibmProviders = filterProviders(providers, \"ibm\" /* ibm */);\n    const ocpProviders = filterProviders(providers, \"ocp\" /* ocp */);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    // Cost Report\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    const perspective = getPerspectiveDefault({\n        awsProviders,\n        azureProviders,\n        gcpProviders,\n        ibmProviders,\n        ocpProviders,\n        queryFromRoute,\n        userAccess,\n    });\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = Object.assign({ filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), filter_by: queryFromRoute.filter_by || baseQuery.filter_by, group_by: groupBy, order_by: queryFromRoute.order_by, perspective,\n        dateRange,\n        start_date,\n        end_date }, (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        awsProviders,\n        azureProviders,\n        dateRange,\n        gcpProviders,\n        ibmProviders,\n        ocpProviders,\n        perspective,\n        providers,\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n","import ExplorerWrapper from './explorerWrapper';\nexport default ExplorerWrapper;\n","import { AccountSettings } from 'components/accountSettings';\nimport React from 'react';\nimport Explorer from './explorer';\nconst ExplorerWrapper = props => {\n    return (React.createElement(AccountSettings, null,\n        React.createElement(Explorer, Object.assign({}, props))));\n};\nexport default ExplorerWrapper;\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n","import _orderBy from \"lodash/orderBy\";\nimport _keys from \"lodash/keys\";\nimport _assign from \"lodash/assign\";\nimport React from \"react\";\nimport { Helpers, Scale, Wrapper } from \"victory-core\";\nvar fallbackProps = {\n  width: 450,\n  height: 300,\n  padding: 50\n}; // Assumes data in `datasets` is sorted by `Data.getData`.\n\nfunction fillData(props, datasets) {\n  var fillInMissingData = props.fillInMissingData;\n  var xMap = datasets.reduce(function (prev, dataset) {\n    dataset.forEach(function (datum) {\n      prev[datum._x instanceof Date ? datum._x.getTime() : datum._x] = true;\n    });\n    return prev;\n  }, {});\n\n  var xKeys = _keys(xMap).map(function (k) {\n    return +k;\n  });\n\n  var xArr = _orderBy(xKeys);\n\n  return datasets.map(function (dataset) {\n    var indexOffset = 0;\n    var isDate = dataset[0] && dataset[0]._x instanceof Date;\n    var filledInData = xArr.map(function (x, index) {\n      x = +x;\n      var datum = dataset[index - indexOffset];\n\n      if (datum) {\n        var x1 = isDate ? datum._x.getTime() : datum._x;\n\n        if (x1 === x) {\n          return datum;\n        } else {\n          indexOffset++;\n          var y = fillInMissingData ? 0 : null;\n          x = isDate ? new Date(x) : x;\n          return {\n            x: x,\n            y: y,\n            _x: x,\n            _y: y\n          };\n        }\n      } else {\n        var _y = fillInMissingData ? 0 : null;\n\n        x = isDate ? new Date(x) : x;\n        return {\n          x: x,\n          y: _y,\n          _x: x,\n          _y: _y\n        };\n      }\n    });\n    return filledInData;\n  });\n}\n\nfunction getY0(datum, index, datasets) {\n  if (datum.y0) {\n    return datum.y0;\n  }\n\n  var y = datum._y;\n  var group = datum._group;\n  var firstDatasetBaseline = datasets[0].map(function (d) {\n    return d.y0;\n  });\n  var previousDatasets = datasets.slice(0, index);\n  var previousPoints = previousDatasets.reduce(function (prev, dataset) {\n    return prev.concat(dataset.filter(function (previousDatum) {\n      return datum._x instanceof Date ? previousDatum._x.getTime() === datum._x.getTime() : previousDatum._x === datum._x;\n    }).map(function (previousDatum) {\n      return previousDatum._y || 0;\n    }));\n  }, []);\n  var y0 = previousPoints.length && previousPoints.reduce(function (memo, value) {\n    var sameSign = y < 0 && value < 0 || y >= 0 && value >= 0;\n    return sameSign ? +value + memo : memo;\n  }, firstDatasetBaseline[group] || 0);\n  return previousPoints.some(function (point) {\n    return point instanceof Date;\n  }) ? new Date(y0) : y0;\n}\n/* eslint-disable no-nested-ternary */\n\n\nfunction addLayoutData(props, datasets, index) {\n  var xOffset = props.xOffset || 0;\n  return datasets[index].map(function (datum) {\n    var yOffset = getY0(datum, index, datasets) || 0;\n    return _assign({}, datum, {\n      _y0: !(datum._y instanceof Date) ? yOffset : yOffset ? new Date(yOffset) : datum._y,\n      _y1: datum._y === null ? null : datum._y instanceof Date ? new Date(+datum._y + +yOffset) : datum._y + yOffset,\n      _x1: datum._x === null ? null : datum._x instanceof Date ? new Date(+datum._x + +xOffset) : datum._x + xOffset\n    });\n  });\n}\n/* eslint-enable no-nested-ternary */\n\n\nfunction stackData(props, childComponents) {\n  var dataFromChildren = Wrapper.getDataFromChildren(props, childComponents);\n  var filterNullChildData = dataFromChildren.map(function (dataset) {\n    return dataset.filter(function (datum) {\n      return datum._x !== null && datum._y !== null;\n    });\n  });\n  var datasets = fillData(props, filterNullChildData);\n  return datasets.map(function (d, i) {\n    return addLayoutData(props, datasets, i);\n  });\n}\n\nexport function getCalculatedProps(props, childComponents) {\n  childComponents = childComponents || React.Children.toArray(props.children);\n  var role = \"stack\";\n  props = Helpers.modifyProps(props, fallbackProps, role);\n  var style = Wrapper.getStyle(props.theme, props.style, role);\n  var categories = props.categories || Wrapper.getCategories(props, childComponents);\n  var datasets = props.datasets || stackData(props, childComponents);\n  var children = childComponents.map(function (c, i) {\n    return React.cloneElement(c, {\n      data: datasets[i]\n    });\n  });\n  var domain = {\n    x: Wrapper.getDomain(_assign({}, props, {\n      categories: categories\n    }), \"x\", children),\n    y: Wrapper.getDomain(_assign({}, props, {\n      categories: categories\n    }), \"y\", children)\n  };\n  var range = props.range || {\n    x: Helpers.getRange(props, \"x\"),\n    y: Helpers.getRange(props, \"y\")\n  };\n  var baseScale = {\n    x: Scale.getScaleFromProps(props, \"x\") || Wrapper.getScale(props, \"x\"),\n    y: Scale.getScaleFromProps(props, \"y\") || Wrapper.getScale(props, \"y\")\n  };\n  var scale = {\n    x: baseScale.x.domain(domain.x).range(props.horizontal ? range.y : range.x),\n    y: baseScale.y.domain(domain.y).range(props.horizontal ? range.x : range.y)\n  };\n  var _props = props,\n      colorScale = _props.colorScale,\n      horizontal = _props.horizontal;\n  return {\n    datasets: datasets,\n    categories: categories,\n    range: range,\n    domain: domain,\n    horizontal: horizontal,\n    scale: scale,\n    style: style,\n    colorScale: colorScale,\n    role: role\n  };\n}\n\nfunction getLabels(props, datasets, index) {\n  if (!props.labels) {\n    return undefined;\n  }\n\n  return datasets.length === index + 1 ? props.labels : undefined;\n}\n\nexport function getChildProps(props, calculatedProps) {\n  var categories = calculatedProps.categories,\n      domain = calculatedProps.domain,\n      range = calculatedProps.range,\n      scale = calculatedProps.scale,\n      horizontal = calculatedProps.horizontal;\n  return {\n    height: props.height,\n    width: props.width,\n    padding: Helpers.getPadding(props),\n    standalone: false,\n    theme: props.theme,\n    categories: categories,\n    domain: domain,\n    range: range,\n    scale: scale,\n    horizontal: horizontal\n  };\n}\n\nfunction getColorScale(props, child) {\n  var role = child.type && child.type.role;\n  var colorScaleOptions = child.props.colorScale || props.colorScale;\n\n  if (role !== \"group\" && role !== \"stack\") {\n    return undefined;\n  }\n\n  return props.theme ? colorScaleOptions || props.theme.props.colorScale : colorScaleOptions;\n}\n\nexport function getChildren(props, childComponents, calculatedProps) {\n  props = Helpers.modifyProps(props, fallbackProps, \"stack\");\n  childComponents = childComponents || React.Children.toArray(props.children);\n  calculatedProps = calculatedProps || getCalculatedProps(props, childComponents);\n  var _calculatedProps = calculatedProps,\n      datasets = _calculatedProps.datasets;\n  var childProps = getChildProps(props, calculatedProps);\n  var parentName = props.name || \"stack\";\n  return childComponents.map(function (child, index) {\n    var role = child.type && child.type.role;\n    var data = datasets[index];\n    var style = Wrapper.getChildStyle(child, index, calculatedProps);\n    var labels = props.labels ? getLabels(props, datasets, index) : child.props.labels;\n    var name = child.props.name || \"\".concat(parentName, \"-\").concat(role, \"-\").concat(index);\n    return React.cloneElement(child, _assign({\n      key: \"\".concat(name, \"-key-\").concat(index),\n      labels: labels,\n      name: name,\n      domainPadding: child.props.domainPadding || props.domainPadding,\n      theme: props.theme,\n      labelComponent: props.labelComponent || child.props.labelComponent,\n      style: style,\n      colorScale: getColorScale(props, child),\n      data: data,\n      polar: props.polar\n    }, childProps));\n  });\n}","import _isEmpty from \"lodash/isEmpty\";\nimport _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Helpers, VictoryContainer, VictoryTheme, CommonProps, Wrapper, PropTypes as CustomPropTypes } from \"victory-core\";\nimport { VictorySharedEvents } from \"victory-shared-events\";\nimport { getChildren, getCalculatedProps } from \"./helper-methods\";\nimport isEqual from \"react-fast-compare\";\nvar fallbackProps = {\n  width: 450,\n  height: 300,\n  padding: 50\n};\n\nvar VictoryStack =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VictoryStack, _React$Component);\n\n  function VictoryStack(props) {\n    var _this;\n\n    _classCallCheck(this, VictoryStack);\n\n    _this = _possibleConstructorReturn(this, (VictoryStack.__proto__ || Object.getPrototypeOf(VictoryStack)).call(this, props));\n\n    if (props.animate) {\n      _this.state = {\n        nodesShouldLoad: false,\n        nodesDoneLoad: false,\n        animating: true\n      };\n      _this.setAnimationState = Wrapper.setAnimationState.bind(_assertThisInitialized(_this));\n    }\n\n    return _this;\n  }\n\n  _createClass(VictoryStack, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      if (this.props.animate) {\n        if (!isEqual(this.props, nextProps)) {\n          this.setAnimationState(this.props, nextProps);\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getNewChildren\",\n    value: function getNewChildren(props, childComponents, calculatedProps) {\n      var children = getChildren(props, childComponents, calculatedProps);\n      var getAnimationProps = Wrapper.getAnimationProps.bind(this);\n      var newChildren = children.map(function (child, index) {\n        var childProps = _assign({\n          animate: getAnimationProps(props, child, index)\n        }, child.props);\n\n        return React.cloneElement(child, childProps);\n      });\n      /*\n        reverse render order for children of `VictoryStack` so that higher children in the stack\n        are rendered behind lower children. This looks nicer for stacked bars with cornerRadius, and\n        areas with strokes\n      */\n\n      return newChildren.reverse();\n    }\n  }, {\n    key: \"renderContainer\",\n    value: function renderContainer(containerComponent, props) {\n      var containerProps = _defaults({}, containerComponent.props, props);\n\n      return React.cloneElement(containerComponent, containerProps);\n    }\n  }, {\n    key: \"getContainerProps\",\n    value: function getContainerProps(props, calculatedProps) {\n      var width = props.width,\n          height = props.height,\n          standalone = props.standalone,\n          theme = props.theme,\n          polar = props.polar,\n          horizontal = props.horizontal,\n          name = props.name;\n      var domain = calculatedProps.domain,\n          scale = calculatedProps.scale,\n          style = calculatedProps.style,\n          origin = calculatedProps.origin;\n      return {\n        domain: domain,\n        scale: scale,\n        width: width,\n        height: height,\n        standalone: standalone,\n        theme: theme,\n        style: style.parent,\n        horizontal: horizontal,\n        polar: polar,\n        origin: origin,\n        name: name\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var role = this.constructor.role;\n      var props = this.state && this.state.nodesWillExit ? this.state.oldProps || this.props : this.props;\n      var modifiedProps = Helpers.modifyProps(props, fallbackProps, role);\n      var eventKey = modifiedProps.eventKey,\n          containerComponent = modifiedProps.containerComponent,\n          standalone = modifiedProps.standalone,\n          groupComponent = modifiedProps.groupComponent,\n          externalEventMutations = modifiedProps.externalEventMutations;\n      var childComponents = React.Children.toArray(modifiedProps.children);\n      var calculatedProps = getCalculatedProps(modifiedProps, childComponents);\n      var newChildren = this.getNewChildren(modifiedProps, childComponents, calculatedProps);\n      var containerProps = standalone ? this.getContainerProps(modifiedProps, calculatedProps) : {};\n      var container = standalone ? this.renderContainer(containerComponent, containerProps) : groupComponent;\n      var events = Wrapper.getAllEvents(props);\n\n      if (!_isEmpty(events)) {\n        return React.createElement(VictorySharedEvents, {\n          container: container,\n          eventKey: eventKey,\n          events: events,\n          externalEventMutations: externalEventMutations\n        }, newChildren);\n      }\n\n      return React.cloneElement(container, container.props, newChildren);\n    }\n  }]);\n\n  return VictoryStack;\n}(React.Component);\n\nObject.defineProperty(VictoryStack, \"displayName\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: \"VictoryStack\"\n});\nObject.defineProperty(VictoryStack, \"role\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: \"stack\"\n});\nObject.defineProperty(VictoryStack, \"propTypes\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: _objectSpread({}, CommonProps.baseProps, {\n    bins: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([CustomPropTypes.nonNegative, PropTypes.instanceOf(Date)])), CustomPropTypes.nonNegative]),\n    categories: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.shape({\n      x: PropTypes.arrayOf(PropTypes.string),\n      y: PropTypes.arrayOf(PropTypes.string)\n    })]),\n    children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n    colorScale: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.oneOf([\"grayscale\", \"qualitative\", \"heatmap\", \"warm\", \"cool\", \"red\", \"green\", \"blue\"])]),\n    fillInMissingData: PropTypes.bool,\n    horizontal: PropTypes.bool,\n    labelComponent: PropTypes.element,\n    labels: PropTypes.oneOfType([PropTypes.func, PropTypes.array]),\n    style: PropTypes.shape({\n      parent: PropTypes.object,\n      data: PropTypes.object,\n      labels: PropTypes.object\n    }),\n    xOffset: PropTypes.number\n  })\n});\nObject.defineProperty(VictoryStack, \"defaultProps\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: {\n    containerComponent: React.createElement(VictoryContainer, null),\n    groupComponent: React.createElement(\"g\", null),\n    standalone: true,\n    theme: VictoryTheme.grayscale,\n    fillInMissingData: true\n  }\n});\nObject.defineProperty(VictoryStack, \"expectedComponents\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: [\"groupComponent\", \"containerComponent\", \"labelComponent\"]\n});\nObject.defineProperty(VictoryStack, \"getChildren\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: getChildren\n});\nexport { VictoryStack as default };"],"names":["getUserAccessQuery","query","stringify","encode","indices","AccountSettingsBase","constructor","super","arguments","this","defaultState","state","Object","assign","updateAccountSettings","accountSettingsFetchStatus","fetchAccountSettings","props","componentDidMount","componentDidUpdate","prevProps","accountSettings","costType","data","cost_type","currency","setState","render","children","mapStateToProps","accountSettingsError","userAccessQueryString","userAccess","userAccessError","userAccessFetchStatus","mapDispatchToProps","CostTypeConnect","connect","AccountSettings","injectIntl","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","isSelectOpen","getSelectOptions","intl","options","selections","map","option","push","toString","formatMessage","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","variant","SelectVariant","SelectOption","key","event","onSelected","Title","headingLevel","size","messages","Perspective","selectWidgets","azureCostOverview","widgets","CostOverview","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","historicalDataComponent","providerType","tagReportPathsType","title","fetchReport","getIdKeyForGroupBy","subscription_guid","instance_type","resource_location","service_name","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","costValue","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","headerContent","justifyContent","headerContentLeft","global_spacer_sm","baseQuery","delta","groupByOptions","DetailsHeaderBase","onGroupBySelected","showContent","meta","count","hasCost","total","cost","TitleSizes","showTags","Boolean","format","units","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","orderBy","transforms","sortable","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","selectable","desc","cells","disableSelection","selected","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","toFixed","handleOnSelect","isSelected","rowId","items","row","handleOnSort","onSort","bind","currentReport","JSON","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","DetailsToolbarConnect","DetailsToolbar","limit","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","resetState","prevState","noReport","noLocation","reset","pathname","queryFromRoute","ui","account","cluster","gcp_project","node","org_unit_id","project","region","service","chartContainer","paddingRight","chartContent","explorer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","grid","stroke","ticks","yAxisAlt","tickLabels","xAxis","CostExplorerChartBase","containerRef","observer","noop","hiddenSeries","Set","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","getTruncatedString","childName","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","getUnits","datum","getAdjustedContainerHeight","adjustContainerHeight","containerHeight","adjustedContainerHeight","getBarWidth","domainPadding","maxWidth","maxValue","forEach","s","sectionWidth","getChart","barWidth","has","y","ChartBar","formatter","formatOptions","CursorVoronoiContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","left","right","top","getDomain","domain","max","getEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","handleLegendClick","getLegend","ChartLegend","gutter","responsive","getTickValues","x","tickValues","modVal","i","str","substr","maxChars","getTickValue","t","handleResize","clientWidth","current","componentWillUnmount","container","disable","labelComponent","ChartLegendTooltip","legendData","day","ref","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartTheme","ChartStack","ChartAxis","C","fixLabelOverlap","dependentAxis","tickFormat","CostExplorerChart","global_spacer_2xl","chartSkeleton","costChart","legendSkeleton","titleContainer","trendChart","usageChart","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByIbmOptions","groupByOcpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpCloudOptions","ocpOptions","getComputedReportItemType","perspective","result","getComputedReportItemValueType","getDateRange","dateRangeType","endDate","Date","startDate","dateRange","setDate","setMonth","getMonth","end_date","start_date","getDateRangeDefault","getGroupByDefault","getGroupByOptions","getOrgReportPathsType","getReportType","getReportPathsType","getTagReportPathsType","ExplorerChartBase","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","date","xVal","getDate","month","yVal","parseFloat","_y","getChartDatums","computedReportItemType","computedReportItemValueType","chartDatums","datums","Map","Array","from","padChartDatums","getGroupBy","daily","groupByOrg","getSkeleton","Skeleton","skeleton","padDate","chartDatum","ExplorerChartConnect","ExplorerChart","DateRangeBase","onItemClicked","DateRange","toolbarContainer","orgReportType","ExplorerFilterBase","orgReport","getDefaultDateRange","currentDateRange","handleDateRangeClick","fetchOrg","orgQueryString","orgReportPathsType","tagQueryString","orgReportFetchStatus","ExplorerFilterConnect","ExplorerFilter","costLabel","costLabelDate","global_Color_200","paddingLeft","perspectiveContainer","ExplorerHeaderBase","getPerspective","currentPerspective","hasAws","isAwsAvailable","hasAzure","isAzureAvailable","hasGcp","isGcpAvailable","hasIbm","isIbmAvailable","hasOcp","isOcpAvailable","isOcpCloudAvailable","isAwsCloudAvailable","isAzureCloudAvailable","handlePerspectiveSelected","onPerspectiveClicked","handleCostTypeSelected","awsProviders","ocpProviders","azureProviders","gcpProviders","isGcpCloudAvailable","ibmProviders","isIbmCloudAvailable","hasAwsCloud","hasAzureCloud","hasGcpCloud","hasIbmCloud","noAwsProviders","noAzureProviders","noGcpProviders","noIbmProviders","noOcpProviders","noProviders","getResourcePathsType","showOrgs","ExplorerHeader","overflowX","ExplorerTableBase","cellTransforms","nowrap","currentDate","mapId","isSortable","rowItem","get","set","mapIdDate","selectItem","sort","a","b","unshift","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","ExplorerToolbarConnect","ExplorerToolbar","Explorer","showTimeScope","slice","handlePerspectiveClick","newPerspective","getPerspectiveDefault","hasAccess","userAccessType","isArray","d","type","access","hasProviders","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","hasIbmAccess","hasOcpAccess","fallbackProps","stackData","childComponents","filterNullChildData","dataset","_x","datasets","fillInMissingData","xMap","reduce","prev","getTime","xKeys","k","xArr","indexOffset","isDate","fillData","xOffset","yOffset","y0","group","_group","firstDatasetBaseline","previousPoints","concat","previousDatum","memo","some","point","getY0","_y0","_y1","_x1","addLayoutData","getCalculatedProps","role","categories","range","baseScale","scale","horizontal","_props","getColorScale","child","colorScaleOptions","getChildren","calculatedProps","childProps","standalone","getChildProps","parentName","getLabels","polar","_defineProperty","obj","defineProperty","enumerable","configurable","writable","_defineProperties","target","descriptor","_assertThisInitialized","self","ReferenceError","VictoryStack","_React$Component","_this","instance","Constructor","TypeError","_classCallCheck","call","_possibleConstructorReturn","__proto__","getPrototypeOf","animate","nodesShouldLoad","nodesDoneLoad","animating","setAnimationState","protoProps","subClass","superClass","prototype","create","setPrototypeOf","_inherits","nextProps","getAnimationProps","reverse","containerProps","origin","parent","nodesWillExit","oldProps","modifiedProps","eventKey","groupComponent","externalEventMutations","newChildren","getNewChildren","getContainerProps","renderContainer","source","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","_objectSpread","bins"],"sourceRoot":""}