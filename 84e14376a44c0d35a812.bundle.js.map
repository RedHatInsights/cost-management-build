{"version":3,"sources":["webpack:///./src/pages/costModels/costModelsDetails/components/dropdown.tsx","webpack:///./src/pages/costModels/costModelsDetails/components/markup.styles.ts","webpack:///./src/pages/costModels/costModelsDetails/components/updateMarkupDialog.tsx","webpack:///./src/pages/costModels/costModelsDetails/components/markup.tsx","webpack:///./src/pages/costModels/costModelsDetails/components/addRateModal.styles.ts","webpack:///./src/pages/costModels/costModelsDetails/components/addRateModal.tsx","webpack:///./src/pages/costModels/costModelsDetails/components/updateRateModel.tsx","webpack:///./src/pages/costModels/costModelsDetails/components/priceListTable.tsx","webpack:///./src/pages/costModels/costModelsDetails/assignSourcesModalToolbar.tsx","webpack:///./src/pages/costModels/costModelsDetails/addSourceStep.tsx","webpack:///./src/pages/costModels/costModelsDetails/addSourceWizard.tsx","webpack:///./src/pages/costModels/costModelsDetails/components/sourcesToolbar.tsx","webpack:///./src/pages/costModels/costModelsDetails/components/table.styles.ts","webpack:///./src/pages/costModels/costModelsDetails/components/table.tsx","webpack:///./src/pages/costModels/costModelsDetails/sourceTable.tsx","webpack:///./src/pages/costModels/costModel/costModelInfo.styles.ts","webpack:///./src/pages/costModels/costModelsDetails/components/updateCostModel.tsx","webpack:///./src/pages/costModels/costModel/header.tsx","webpack:///./src/pages/costModels/costModel/index.tsx"],"names":["dropdown","react_default","a","Component","[object Object]","props","super","this","state","isOpen","onToggle","bind","onSelect","setState","prevState","isPlain","direction","position","dropdownItems","createElement","Dropdown","toggle","KebabToggle","styles","card","minHeight","maxWidth","marginLeft","esm","value","cardBody","fontSize","textAlign","updateMarkupDialog","Object","react_redux_es","common","isLoading","store_costModels","updateProcessing","error","updateError","onClose","setCostModelDialog","updateCostModel","stateProps","dispatchProps","ownProps","assign","es","markup","String","current","t","Modal","isFooterLeftAligned","title","cost_model","name","isSmall","actions","Button","key","variant","onClick","isDisabled","newState","source_uuids","sources","map","provider","uuid","source_type","unit","isNaN","Number","Fragment","Alert","Form","FormGroup","label","fieldId","helperTextInvalid","isValid","InputGroup","style","width","TextInput","type","aria-label","id","onChange","InputGroupText","borderLeft","updateMarkup","isDialogOpen","isUpdateDialogOpen","costModelDialog","isWritePermission","rbac","isCostModelWritePermission","markupValue","toFixed","Card","CardHead","CardActions","readOnlyTooltip","DropdownItem","component","CardHeader","CardBody","isFilled","addRateModal_styles_styles","form","addRateModal","metricsHash","metrics","costTypes","arguments","service","interpreter","addPriceList","onTransition","initialState","start","stop","isProcessing","onProceed","context","metric","measurement","rate","costType","matches","secondary","primary","send","stateNames","toStrings","mainState","length","availableRates","addCostModelRateForm","rates","r","label_metric","label_measurement","options","keys","payload","metricOptions","metricChange","measurementOptions","m","units","label_measurement_unit","measurementChange","default_cost_type","rateChange","isRateInvalid","isMeasurementInvalid","costTypeChange","renderActionButtons","Stack","gutter","StackItem","Title","size","sizes","lg","TextContent","Text","h6","forms_form","renderForm","updateRateModel","index","tiered_rates","cost_type","originalCostType","originalRate","borderRight","dollar_sign_icon","priceListTable","fetchError","fetchStatus","status","maxRate","setDialogOpen","deleteRate","pagination","perPage","page","metricOpts","measurementOpts","reduce","acc","curr","measurs","filter","i","includes","updateRate","slice","usage","addRate","dialog","body","cm","costModel","assignees","List","p","ListItem","actionText","withPriceListSearch","initialFilters","measurements","search","setSearch","onRemove","onClearAll","from","to","res","filtered","toString","meta","priceListToolbar","primarySelector","setPrimary","selected","secondaries","checkboxSelector","placeholderText","selections","setSelections","selection","filters","button","onClear","Pagination","isCompact","itemCount","onSetPage","_evt","onPerPageSelect","perPageOptions","loadingState","Boolean","errorState","emptyFilterState","Bullseye","EmptyState","EmptyStateIcon","icon","file_invoice_dollar_icon","EmptyStateBody","rateTable","tiers","undefined","pointerEvents","tooltip","rowIndex","_rowData","_extra","color","SearchInput","placeholder","onSearch","onKeyPress","evt","search_icon","AssignSourcesToolbar","searchInputProps","paginationProps","DataToolbar","clearAllFilters","DataToolbarContent","DataToolbarItem","DataToolbarFilter","deleteChip","chips","query","categoryName","addSourceStep","currentFilter","sourceSettings","currentFilterType","currentFilterValue","updateFilter","updateFilterToolbar","isLoadingSources","fetchingSourcesError","isSelected","rowId","checked","providers","cur","providerData","ix","provCostModels","cost_models","join","warningIcon","find","components_warningIcon","text","cellName","cells","Checkbox","isChecked","OpenShift Container Platform","Microsoft Azure","Amazon Web Services","fetch","category","chip","newQuery","filterLogic","split","curQuery","count","newPerPage","newPage","Table","rows","Table_Header","Body","subTitle","flexDirection","DataToolbarGroup","addSourceWizard_sourceTypeMap","addSourceWizard","isUpdateInProgress","updateApiError","parseError","fetchSources","prevProps","initChecked","some","onSave","isLarge","Split","SplitItem","sourcesToolbar_SearchInput","SourcesToolbar","actionButtonProps","categoryNames","table_styles_styles","emptyState","display","justifyContent","table","onAdd","filteredRows","every","fName","children","_category","actionResolver","onDelete","onDeleteText","sourceTable","dialogSource","addSource","deleteSource","source","item","costModelInfo_styles_styles","headerDescription","wordWrap","backgroundColor","var","content","paddingTop","height","costmodelsContainer","marginRight","paddingBottom","paddingLeft","paddingRight","headerCostModel","padding","__rest","s","e","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","propertyIsEnumerable","components_updateCostModel","costModels","description","created_timestamp","updated_timestamp","previous","isRequired","TextArea","header","isDeleteProcessing","deleteProcessing","deleteError","deleteCostModel","cmpRef","createRef","scrollIntoView","tabRefs","tabIndex","onSelectTab","historyObject","ref","costModelsDetails_styles","Breadcrumb","BreadcrumbItem","isActive","Tabs","activeKey","Tab","eventKey","tabContentId","tabContentRef","__webpack_exports__","store","costModelError","costModelStatus","metricsError","metricsState","metricsStatus","rbacError","selectRbacState","rbacStatus","fetchMetrics","fetchRbac","fetchCostModels","match","params","error_circle_o_icon","history","TabContent","hidden"],"mappings":"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","file":"84e14376a44c0d35a812.bundle.js","sourcesContent":["import { Dropdown, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nclass DropdownBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { isOpen: false };\n        this.onToggle = this.onToggle.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n    }\n    onSelect() {\n        this.setState(prevState => ({ isOpen: !prevState.isOpen }));\n    }\n    onToggle(isOpen) {\n        this.setState({ isOpen });\n    }\n    render() {\n        const { isPlain = false, direction = 'down', position = 'left', dropdownItems, } = this.props;\n        return (React.createElement(Dropdown, { isPlain: isPlain, position: position, direction: direction, isOpen: this.state.isOpen, onSelect: this.onSelect, toggle: React.createElement(KebabToggle, { onToggle: this.onToggle }), dropdownItems: dropdownItems }));\n    }\n}\nexport default DropdownBase;\n","import { global_FontSize_xl, global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = {\n    card: {\n        minHeight: '130px',\n        maxWidth: '400px',\n        marginLeft: global_spacer_md.value,\n    },\n    cardBody: {\n        fontSize: global_FontSize_xl.value,\n        textAlign: 'center',\n    },\n};\n","import { Alert, Button, Form, FormGroup, InputGroup, InputGroupText, Modal, TextInput, } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions, costModelsSelectors } from 'store/costModels';\nclass UpdateMarkupModelBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            markup: String(this.props.current.markup.value || 0),\n        };\n    }\n    render() {\n        const { error, current, onClose, updateCostModel, isLoading, t, } = this.props;\n        return (React.createElement(Modal, { isFooterLeftAligned: true, title: t('cost_models_details.edit_markup', {\n                cost_model: current.name,\n            }), isOpen: true, isSmall: true, onClose: () => onClose({ name: 'updateMarkup', isOpen: false }), actions: [\n                React.createElement(Button, { key: \"cancel\", variant: \"secondary\", onClick: () => onClose({ name: 'updateMarkup', isOpen: false }), isDisabled: isLoading }, t('cost_models_details.add_rate_modal.cancel')),\n                React.createElement(Button, { key: \"proceed\", variant: \"primary\", onClick: () => {\n                        const newState = Object.assign(Object.assign({}, current), { source_uuids: current.sources.map(provider => provider.uuid), source_type: current.source_type === 'OpenShift Container Platform'\n                                ? 'OCP'\n                                : 'AWS', markup: {\n                                value: this.state.markup,\n                                unit: 'percent',\n                            } });\n                        updateCostModel(current.uuid, newState, 'updateMarkup');\n                    }, isDisabled: isNaN(Number(this.state.markup)) ||\n                        Number(this.state.markup) === Number(current.markup.value || 0) ||\n                        isLoading }, t('cost_models_details.add_rate_modal.save')),\n            ] },\n            React.createElement(React.Fragment, null,\n                error && React.createElement(Alert, { variant: \"danger\", title: `${error}` }),\n                React.createElement(Form, null,\n                    React.createElement(FormGroup, { label: t('cost_models_wizard.markup.markup_label'), fieldId: \"markup-input-box\", helperTextInvalid: t('cost_models_wizard.markup.invalid_markup_text'), isValid: !isNaN(Number(this.state.markup)) },\n                        React.createElement(InputGroup, { style: { width: '150px' } },\n                            React.createElement(TextInput, { type: \"text\", \"aria-label\": t('cost_models_wizard.markup.markup_label'), id: \"markup-input-box\", value: this.state.markup, onChange: (markup) => this.setState({ markup }), isValid: !isNaN(Number(this.state.markup)) }),\n                            React.createElement(InputGroupText, { style: { borderLeft: '0' } }, \"%\")))))));\n    }\n}\n// Fixes issue with Typescript:\n// https://github.com/microsoft/TypeScript/issues/25103#issuecomment-412806226\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n    return Object.assign(Object.assign(Object.assign({}, stateProps), dispatchProps), ownProps);\n};\nexport default connect(createMapStateToProps(state => {\n    return {\n        isLoading: costModelsSelectors.updateProcessing(state),\n        error: costModelsSelectors.updateError(state),\n    };\n}), {\n    onClose: costModelsActions.setCostModelDialog,\n    updateCostModel: costModelsActions.updateCostModel,\n}, mergeProps)(translate()(UpdateMarkupModelBase));\n","import { Card, CardActions, CardBody, CardHead, CardHeader, DropdownItem, } from '@patternfly/react-core';\nimport { ReadOnlyTooltip } from 'pages/costModels/costModelsDetails/components/readOnlyTooltip';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions, costModelsSelectors } from 'store/costModels';\nimport { rbacSelectors } from 'store/rbac';\nimport Dropdown from './dropdown';\nimport { styles } from './markup.styles';\nimport UpdateMarkupDialog from './updateMarkupDialog';\nconst MarkupCardBase = ({ isWritePermission, setCostModelDialog, current, isUpdateDialogOpen, t, }) => {\n    const markupValue = current && current.markup && current.markup.value\n        ? Number(current.markup.value).toFixed(2)\n        : 0;\n    return (React.createElement(React.Fragment, null,\n        isUpdateDialogOpen && React.createElement(UpdateMarkupDialog, { current: current }),\n        React.createElement(Card, { style: styles.card },\n            React.createElement(CardHead, null,\n                React.createElement(CardActions, null,\n                    React.createElement(Dropdown, { isPlain: true, dropdownItems: [\n                            React.createElement(ReadOnlyTooltip, { key: \"edit\", isDisabled: !isWritePermission },\n                                React.createElement(DropdownItem, { isDisabled: !isWritePermission, onClick: () => setCostModelDialog({ isOpen: true, name: 'updateMarkup' }), component: \"button\" }, t('cost_models_details.edit_markup_action'))),\n                        ] })),\n                React.createElement(CardHeader, null, t('cost_models_details.description_markup'))),\n            React.createElement(CardBody, { isFilled: true }),\n            React.createElement(CardBody, { style: styles.cardBody },\n                markupValue,\n                \"%\"),\n            React.createElement(CardBody, { isFilled: true }))));\n};\nexport default connect(createMapStateToProps(state => {\n    const { updateMarkup } = costModelsSelectors.isDialogOpen(state)('markup');\n    return {\n        isUpdateDialogOpen: updateMarkup,\n        costModelDialog: costModelsSelectors.isDialogOpen(state)('markup'),\n        isWritePermission: rbacSelectors.isCostModelWritePermission(state),\n    };\n}), {\n    setCostModelDialog: costModelsActions.setCostModelDialog,\n})(translate()(MarkupCardBase));\n","export const styles = {\n    form: {\n        width: '350px',\n    },\n};\n","import { Alert, Button, ButtonVariant, Modal, Stack, StackItem, Text, TextContent, TextVariants, Title, TitleSize, } from '@patternfly/react-core';\nimport { Form } from 'components/forms/form';\nimport { SetMeasurement, SetMetric, SetRate, unusedRates, } from 'pages/costModels/components/addCostModelRateForm';\nimport { addRateMachine, } from 'pages/costModels/components/addPriceList';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { metricsSelectors } from 'store/metrics';\nimport { interpret } from 'xstate';\nimport { styles } from './addRateModal.styles';\nexport class AddRateModelBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.service = interpret(addRateMachine).onTransition(current => this.setState({ current }));\n        this.state = { current: addRateMachine.initialState };\n    }\n    componentDidMount() {\n        this.service.start();\n    }\n    componentWillUnmount() {\n        this.service.stop();\n    }\n    renderActionButtons() {\n        const { t, onClose, isProcessing, onProceed } = this.props;\n        const { current, current: { context: { metric, measurement, rate, costType }, }, } = this.state;\n        if (current.matches('setRate.valid')) {\n            const ValidCancelButton = (React.createElement(Button, { key: \"cancel\", variant: ButtonVariant.secondary, onClick: onClose, isDisabled: isProcessing }, t('cost_models_details.add_rate_modal.cancel')));\n            const ValidOkButton = (React.createElement(Button, { key: \"proceed\", variant: ButtonVariant.primary, onClick: () => onProceed(metric, measurement, rate, costType), isDisabled: isProcessing }, t('cost_models_details.add_rate')));\n            return [ValidCancelButton, ValidOkButton];\n        }\n        const CancelButton = (React.createElement(Button, { key: \"cancel\", variant: ButtonVariant.secondary, onClick: onClose }, t('cost_models_details.add_rate_modal.cancel')));\n        const OkButton = (React.createElement(Button, { key: \"proceed\", variant: ButtonVariant.primary, isDisabled: true }, t('cost_models_details.add_rate')));\n        return [CancelButton, OkButton];\n    }\n    renderForm() {\n        const { current: { context: { metric, measurement, rate, costType }, }, } = this.state;\n        const { metricsHash, costTypes, current, t } = this.props;\n        const { send } = this.service;\n        const stateNames = this.state.current.toStrings();\n        const mainState = stateNames.length > 1 ? stateNames[1] : stateNames[0];\n        const availableRates = unusedRates(metricsHash, current.rates.map(r => ({\n            metric: r.metric.label_metric,\n            measurement: r.metric.label_measurement,\n        })));\n        switch (mainState) {\n            case 'setMetric':\n                return (React.createElement(SetMetric, { t: t, options: Object.keys(availableRates).map(r => ({\n                        label: t(`cost_models.${r}`),\n                        value: r,\n                    })), onChange: (value) => send({ type: 'CHANGE_METRIC', payload: { metric: value } }), value: metric }));\n            case 'setMeasurement':\n                return (React.createElement(SetMeasurement, { t: t, metricOptions: Object.keys(availableRates).map(r => ({\n                        label: t(`cost_models.${r}`),\n                        value: r,\n                    })), metricChange: (value) => send({ type: 'CHANGE_METRIC', payload: { metric: value } }), metric: metric, measurementOptions: Object.keys(availableRates[metric]).map(m => ({\n                        label: t(`cost_models.${m}`, {\n                            units: metricsHash[metric][m].label_measurement_unit,\n                        }),\n                        value: m,\n                    })), measurement: measurement, measurementChange: (value) => send({\n                        type: 'CHANGE_MEASUREMENT',\n                        payload: {\n                            measurement: value,\n                            costType: metricsHash[metric][value].default_cost_type,\n                        },\n                    }) }));\n            case 'setRate.init':\n            case 'setRate.valid':\n                return (React.createElement(React.Fragment, null,\n                    React.createElement(SetRate, { t: t, metricOptions: Object.keys(availableRates).map(r => ({\n                            label: t(`cost_models.${r}`),\n                            value: r,\n                        })), metricChange: (value) => send({ type: 'CHANGE_METRIC', payload: { metric: value } }), metric: metric, measurementOptions: Object.keys(availableRates[metric] || {}).map(m => ({\n                            label: t(`cost_models.${m}`, {\n                                units: metricsHash[metric][m].label_measurement_unit,\n                            }),\n                            value: m,\n                        })), measurement: measurement, measurementChange: (value) => send({\n                            type: 'CHANGE_MEASUREMENT',\n                            payload: {\n                                measurement: value,\n                                costType: metricsHash[metric][value].default_cost_type,\n                            },\n                        }), rate: rate, rateChange: (value) => send({ type: 'CHANGE_RATE', payload: { rate: value } }), isRateInvalid: false, isMeasurementInvalid: false, costTypes: costTypes, costType: costType, costTypeChange: value => send({\n                            type: 'CHANGE_INFRA_COST',\n                            payload: { costType: value },\n                        }) })));\n            case 'setRate.invalid':\n                return (React.createElement(React.Fragment, null,\n                    React.createElement(SetRate, { t: t, metricOptions: Object.keys(availableRates).map(r => ({\n                            label: t(`cost_models.${r}`),\n                            value: r,\n                        })), metricChange: (value) => {\n                            send({ type: 'CHANGE_METRIC', payload: { metric: value } });\n                        }, metric: metric, measurement: measurement, measurementOptions: Object.keys(availableRates[metric]).map(m => ({\n                            label: t(`cost_models.${m}`, {\n                                units: metricsHash[metric][m].label_measurement_unit,\n                            }),\n                            value: m,\n                        })), measurementChange: (value) => send({\n                            type: 'CHANGE_MEASUREMENT',\n                            payload: {\n                                measurement: value,\n                                costType: metricsHash[metric][value].default_cost_type,\n                            },\n                        }), rate: rate, rateChange: (value) => send({ type: 'CHANGE_RATE', payload: { rate: value } }), isRateInvalid: isNaN(Number(rate)) || rate === '' || Number(rate) <= 0, isMeasurementInvalid: measurement === '', costTypes: costTypes, costType: costType, costTypeChange: value => send({\n                            type: 'CHANGE_INFRA_COST',\n                            payload: { costType: value },\n                        }) })));\n        }\n    }\n    render() {\n        const { updateError, current, onClose, t } = this.props;\n        return (React.createElement(Modal, { isFooterLeftAligned: true, title: t('cost_models_details.add_rate_modal.title', {\n                name: current.name,\n            }), isSmall: true, isOpen: true, onClose: onClose, actions: this.renderActionButtons() },\n            React.createElement(React.Fragment, null,\n                updateError && React.createElement(Alert, { variant: \"danger\", title: `${updateError}` }),\n                React.createElement(Stack, { gutter: \"md\" },\n                    React.createElement(StackItem, null,\n                        React.createElement(Title, { size: TitleSize.lg }, t('cost_models_details.cost_model.source_type'))),\n                    React.createElement(StackItem, null,\n                        React.createElement(TextContent, null,\n                            React.createElement(Text, { component: TextVariants.h6 }, current.source_type))),\n                    React.createElement(StackItem, null,\n                        React.createElement(Form, { style: styles.form }, this.renderForm()))))));\n    }\n}\nexport default connect(createMapStateToProps(state => ({\n    metricsHash: metricsSelectors.metrics(state),\n    costTypes: metricsSelectors.costTypes(state),\n})))(translate()(AddRateModelBase));\n","import { Alert, Button, FormGroup, InputGroup, InputGroupText, Modal, Stack, StackItem, Text, TextContent, TextInput, TextVariants, Title, TitleSize, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { Form } from 'components/forms/form';\nimport { canSubmit, CostTypeSelectorBase, isRateValid, } from 'pages/costModels/components/addCostModelRateForm';\nimport React from 'react';\nclass UpdateRateModelBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rate: String(this.props.current.rates[this.props.index].tiered_rates[0].value),\n            costType: this.props.current.rates[this.props.index].cost_type,\n        };\n    }\n    render() {\n        const { updateError, current, onClose, onProceed, isProcessing, t, index, metricsHash, costTypes, } = this.props;\n        const metric = current.rates[index].metric.label_metric;\n        const measurement = current.rates[index].metric.label_measurement;\n        const originalCostType = current.rates[index].cost_type;\n        const originalRate = String(this.props.current.rates[this.props.index].tiered_rates[0].value);\n        return (React.createElement(Modal, { isFooterLeftAligned: true, title: t('cost_models_details.edit_rate'), isOpen: true, isSmall: true, onClose: onClose, actions: [\n                React.createElement(Button, { key: \"cancel\", variant: \"secondary\", onClick: onClose, isDisabled: isProcessing }, t('cost_models_details.add_rate_modal.cancel')),\n                React.createElement(Button, { key: \"proceed\", variant: \"primary\", onClick: () => onProceed(metric, measurement, this.state.rate, this.state.costType), isDisabled: canSubmit(this.state.rate) ||\n                        isProcessing ||\n                        (this.state.costType === originalCostType &&\n                            this.state.rate === originalRate) }, t('cost_models_details.add_rate_modal.save')),\n            ] },\n            React.createElement(React.Fragment, null,\n                updateError && React.createElement(Alert, { variant: \"danger\", title: `${updateError}` }),\n                React.createElement(Stack, { gutter: \"md\" },\n                    React.createElement(StackItem, null,\n                        React.createElement(Title, { size: TitleSize.lg }, t('cost_models_details.cost_model.source_type'))),\n                    React.createElement(StackItem, null,\n                        React.createElement(TextContent, null,\n                            React.createElement(Text, { component: TextVariants.h6 }, current.source_type))),\n                    React.createElement(StackItem, null,\n                        React.createElement(Title, { size: TitleSize.lg }, t('cost_models.add_rate_form.metric_select'))),\n                    React.createElement(StackItem, null,\n                        React.createElement(TextContent, null,\n                            React.createElement(Text, { component: TextVariants.h6 }, t(`cost_models.${metric}`)))),\n                    React.createElement(StackItem, null,\n                        React.createElement(Title, { size: TitleSize.lg }, t('cost_models.add_rate_form.measurement_select'))),\n                    React.createElement(StackItem, null,\n                        React.createElement(TextContent, null,\n                            React.createElement(Text, { component: TextVariants.h6 }, t(`cost_models.${measurement}`, {\n                                units: t(`cost_models.${metricsHash[metric][measurement].label_measurement_unit}`),\n                            })))),\n                    React.createElement(StackItem, null,\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('cost_models.add_rate_form.rate_input'), fieldId: \"rate-input-box\", helperTextInvalid: t('cost_models.add_rate_form.error_message'), isValid: isRateValid(this.state.rate) },\n                                React.createElement(InputGroup, { style: { width: '350px' } },\n                                    React.createElement(InputGroupText, { style: { borderRight: '0' } },\n                                        React.createElement(DollarSignIcon, null)),\n                                    React.createElement(TextInput, { style: { borderLeft: '0' }, type: \"text\", \"aria-label\": t('cost_models_wizard.price_list.rate_aria_label'), id: \"rate-input-box\", value: this.state.rate, onChange: (rate) => this.setState({ rate }), isValid: isRateValid(this.state.rate) }))),\n                            React.createElement(\"div\", { style: { width: '350px' } },\n                                React.createElement(CostTypeSelectorBase, { t: t, costTypes: costTypes, value: this.state.costType, onChange: value => this.setState({ costType: value }) }))))))));\n    }\n}\nexport default UpdateRateModelBase;\n","import { Bullseye, Button, EmptyState, EmptyStateBody, EmptyStateIcon, List, ListItem, Pagination, Title, TitleSize, } from '@patternfly/react-core';\nimport { FileInvoiceDollarIcon } from '@patternfly/react-icons';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { WithPriceListSearch } from 'pages/costModels/components/hoc/withPriceListSearch';\nimport { PriceListToolbar } from 'pages/costModels/components/priceListToolbar';\nimport { RateTable } from 'pages/costModels/components/rateTable';\nimport { CheckboxSelector } from 'pages/costModels/components/toolbar/checkboxSelector';\nimport { PrimarySelector } from 'pages/costModels/components/toolbar/primarySelector';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions, costModelsSelectors } from 'store/costModels';\nimport { metricsSelectors } from 'store/metrics';\nimport { rbacSelectors } from 'store/rbac';\nimport AddRateModel from './addRateModal';\nimport Dialog from './dialog';\nimport UpdateRateModel from './updateRateModel';\nclass PriceListTable extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            deleteRate: null,\n            index: -1,\n            pagination: {\n                perPage: 6,\n                page: 1,\n            },\n        };\n    }\n    render() {\n        const { t, fetchStatus, fetchError, setDialogOpen, isDialogOpen, metricsHash, maxRate, isWritePermission, costTypes, } = this.props;\n        const metricOpts = Object.keys(metricsHash).map(m => ({\n            label: t(`cost_models.${m}`),\n            value: m,\n        }));\n        const measurementOpts = metricOpts.reduce((acc, curr) => {\n            const measurs = Object.keys(metricsHash[curr.value])\n                .filter(m => !acc.map(i => i.value).includes(m))\n                .map(m => ({ label: t(`toolbar.pricelist.options.${m}`), value: m }));\n            return [...acc, ...measurs];\n        }, []);\n        return (React.createElement(React.Fragment, null,\n            isDialogOpen.updateRate && (React.createElement(UpdateRateModel, { t: t, costTypes: costTypes, metricsHash: metricsHash, index: this.state.index, current: this.props.current, isProcessing: this.props.isLoading, onClose: () => setDialogOpen({ name: 'updateRate', isOpen: false }), onProceed: (metric, measurement, rate, costType) => {\n                    const newState = Object.assign(Object.assign({}, this.props.current), { source_uuids: this.props.current.sources.map(provider => provider.uuid), source_type: this.props.current.source_type ===\n                            'OpenShift Container Platform'\n                            ? 'OCP'\n                            : 'AWS', rates: [\n                            ...this.props.current.rates.slice(0, this.state.index),\n                            ...this.props.current.rates.slice(this.state.index + 1),\n                            {\n                                metric: { name: metricsHash[metric][measurement].metric },\n                                cost_type: costType,\n                                tiered_rates: [\n                                    {\n                                        unit: 'USD',\n                                        value: Number(rate),\n                                        usage: { unit: 'USD' },\n                                    },\n                                ],\n                            },\n                        ] });\n                    this.props.updateCostModel(this.props.current.uuid, newState, 'updateRate');\n                }, updateError: this.props.error })),\n            isDialogOpen.addRate && (React.createElement(AddRateModel, { updateError: this.props.error, current: this.props.current, isProcessing: this.props.isLoading, onClose: () => setDialogOpen({ name: 'addRate', isOpen: false }), onProceed: (metric, measurement, rate, costType) => {\n                    const newState = Object.assign(Object.assign({}, this.props.current), { source_uuids: this.props.current.sources.map(provider => provider.uuid), source_type: this.props.current.source_type ===\n                            'OpenShift Container Platform'\n                            ? 'OCP'\n                            : 'AWS', rates: [\n                            ...this.props.current.rates,\n                            {\n                                metric: { name: metricsHash[metric][measurement].metric },\n                                cost_type: costType,\n                                tiered_rates: [\n                                    {\n                                        unit: 'USD',\n                                        value: Number(rate),\n                                        usage: { unit: 'USD' },\n                                    },\n                                ],\n                            },\n                        ] });\n                    this.props.updateCostModel(this.props.current.uuid, newState, 'addRate');\n                } })),\n            React.createElement(Dialog, { isSmall: true, isOpen: isDialogOpen.deleteRate, title: t('dialog.rate.title', { rate: this.state.deleteRate }), onClose: () => {\n                    this.props.setDialogOpen({ name: 'deleteRate', isOpen: false });\n                    this.setState({ deleteRate: null });\n                }, isProcessing: this.props.isLoading, onProceed: () => {\n                    const { index } = this.state;\n                    const { current } = this.props;\n                    const newState = Object.assign(Object.assign({}, current), { source_uuids: current.sources.map(provider => provider.uuid), source_type: current.source_type === 'OpenShift Container Platform'\n                            ? 'OCP'\n                            : 'AWS', rates: [\n                            ...current.rates.slice(0, index),\n                            ...current.rates.slice(index + 1),\n                        ] });\n                    this.props.updateCostModel(current.uuid, newState, 'deleteRate');\n                }, body: React.createElement(React.Fragment, null,\n                    t('dialog.rate.body', {\n                        rate: this.state.deleteRate,\n                        cm: this.props.costModel,\n                    }),\n                    this.props.assignees && this.props.assignees.length > 0 && (React.createElement(React.Fragment, null,\n                        t('dialog.rate.assigned'),\n                        React.createElement(List, null, this.props.assignees.map(p => (React.createElement(ListItem, { key: p }, p))))))), actionText: t('dialog.deleteRate') }),\n            React.createElement(WithPriceListSearch, { initialFilters: { primary: 'metrics', metrics: [], measurements: [] } }, ({ search, setSearch, onRemove, onSelect, onClearAll }) => {\n                const from = (this.state.pagination.page - 1) * this.state.pagination.perPage;\n                const to = this.state.pagination.page * this.state.pagination.perPage;\n                const res = this.props.current.rates\n                    .filter(rate => search.metrics.length === 0 ||\n                    search.metrics.includes(rate.metric.label_metric))\n                    .filter(rate => search.measurements.length === 0 ||\n                    search.measurements.includes(rate.metric.label_measurement));\n                const filtered = res.slice(from, to).map(r => ({\n                    metric: r.metric.label_metric,\n                    measurement: r.metric.label_measurement,\n                    rate: r.tiered_rates[0].value.toString(),\n                    costType: r.cost_type,\n                    meta: r.metric,\n                }));\n                return (React.createElement(React.Fragment, null,\n                    React.createElement(PriceListToolbar, { primary: React.createElement(PrimarySelector, { isDisabled: this.props.current.rates.length === 0, primary: search.primary, setPrimary: (primary) => setSearch({ primary }), options: [\n                                {\n                                    label: t('toolbar.pricelist.metric'),\n                                    value: 'metrics',\n                                },\n                                {\n                                    label: t('toolbar.pricelist.measurement'),\n                                    value: 'measurements',\n                                },\n                            ] }), selected: search.primary, secondaries: [\n                            {\n                                component: (React.createElement(CheckboxSelector, { isDisabled: this.props.current.rates.length === 0, placeholderText: t('toolbar.pricelist.measurement_placeholder'), selections: search.measurements, setSelections: (selection) => onSelect('measurements', selection), options: measurementOpts })),\n                                name: 'measurements',\n                                onRemove,\n                                filters: search.measurements,\n                            },\n                            {\n                                component: (React.createElement(CheckboxSelector, { isDisabled: this.props.current.rates.length === 0, placeholderText: t('toolbar.pricelist.metric_placeholder'), selections: search.metrics, setSelections: (selection) => onSelect('metrics', selection), options: metricOpts })),\n                                name: 'metrics',\n                                onRemove,\n                                filters: search.metrics,\n                            },\n                        ], button: React.createElement(Button, { isDisabled: maxRate === this.props.current.rates.length\n                                ? true\n                                : !isWritePermission, onClick: () => this.props.setDialogOpen({\n                                name: 'addRate',\n                                isOpen: true,\n                            }) }, t('toolbar.pricelist.add_rate')), onClear: onClearAll, pagination: React.createElement(Pagination, { isCompact: true, itemCount: res.length, perPage: this.state.pagination.perPage, page: this.state.pagination.page, onSetPage: (_evt, page) => this.setState({\n                                pagination: Object.assign(Object.assign({}, this.state.pagination), { page }),\n                            }), onPerPageSelect: (_evt, perPage) => this.setState({ pagination: { page: 1, perPage } }), perPageOptions: [\n                                { title: '2', value: 2 },\n                                { title: '4', value: 4 },\n                                { title: '6', value: 6 },\n                            ] }) }),\n                    fetchStatus !== 2 /* complete */ && React.createElement(LoadingState, null),\n                    fetchStatus === 2 /* complete */ &&\n                        Boolean(fetchError) && React.createElement(ErrorState, { error: fetchError }),\n                    fetchStatus === 2 /* complete */ &&\n                        filtered.length === 0 &&\n                        (search.metrics.length !== 0 ||\n                            search.measurements.length !== 0) && (React.createElement(EmptyFilterState, { filter: t('cost_models_wizard.price_list.toolbar_top_results_aria_label') })),\n                    fetchStatus === 2 /* complete */ &&\n                        filtered.length === 0 &&\n                        search.measurements.length === 0 &&\n                        search.metrics.length === 0 && (React.createElement(Bullseye, null,\n                        React.createElement(EmptyState, null,\n                            React.createElement(EmptyStateIcon, { icon: FileInvoiceDollarIcon }),\n                            React.createElement(Title, { size: TitleSize.lg }, t('cost_models_details.empty_state_rate.title')),\n                            React.createElement(EmptyStateBody, null, t('cost_models_details.empty_state_rate.description'))))),\n                    fetchStatus === 2 /* complete */ && filtered.length > 0 && (React.createElement(RateTable, { t: t, tiers: filtered, actions: [\n                            {\n                                title: t('cost_models_wizard.price_list.update_button'),\n                                isDisabled: !isWritePermission,\n                                // HACK: to display tooltip on disable\n                                style: !isWritePermission\n                                    ? { pointerEvents: 'auto' }\n                                    : undefined,\n                                tooltip: !isWritePermission ? (React.createElement(\"div\", null, t('cost_models.read_only_tooltip'))) : (undefined),\n                                onClick: (_evt, rowIndex, _rowData, _extra) => {\n                                    this.setState({\n                                        deleteRate: null,\n                                        index: rowIndex + from,\n                                    });\n                                    this.props.setDialogOpen({\n                                        name: 'updateRate',\n                                        isOpen: true,\n                                    });\n                                },\n                            },\n                            {\n                                title: t('cost_models_wizard.price_list.delete_button'),\n                                isDisabled: !isWritePermission,\n                                // HACK: to display tooltip on disable\n                                style: !isWritePermission\n                                    ? { pointerEvents: 'auto' }\n                                    : { color: 'red' },\n                                tooltip: !isWritePermission ? (React.createElement(\"div\", null, t('cost_models.read_only_tooltip'))) : (undefined),\n                                onClick: (_evt, rowIndex, _rowData, _extra) => {\n                                    this.setState({\n                                        deleteRate: filtered[rowIndex],\n                                        index: rowIndex + from,\n                                    });\n                                    this.props.setDialogOpen({\n                                        name: 'deleteRate',\n                                        isOpen: true,\n                                    });\n                                },\n                            },\n                        ] }))));\n            })));\n    }\n}\nexport default connect(createMapStateToProps(state => ({\n    isLoading: costModelsSelectors.updateProcessing(state),\n    error: costModelsSelectors.updateError(state),\n    isDialogOpen: costModelsSelectors.isDialogOpen(state)('rate'),\n    fetchError: costModelsSelectors.error(state),\n    fetchStatus: costModelsSelectors.status(state),\n    metricsHash: metricsSelectors.metrics(state),\n    maxRate: metricsSelectors.maxRate(state),\n    costTypes: metricsSelectors.costTypes(state),\n    isWritePermission: rbacSelectors.isCostModelWritePermission(state),\n})), {\n    updateCostModel: costModelsActions.updateCostModel,\n    setDialogOpen: costModelsActions.setCostModelDialog,\n})(translate()(PriceListTable));\n","import { InputGroup, InputGroupText, Pagination, TextInput, } from '@patternfly/react-core';\nimport { DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarItem, } from '@patternfly/react-core/dist/esm/experimental';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nconst SearchInput = ({ id, placeholder = '', value, onChange, onSearch, }) => {\n    return (React.createElement(InputGroup, null,\n        React.createElement(TextInput, { value: value, placeholder: placeholder, id: id, onChange: onChange, onKeyPress: (evt) => {\n                if (evt.key !== 'Enter' || value === '') {\n                    return;\n                }\n                onSearch(evt);\n            } }),\n        React.createElement(InputGroupText, { style: { borderLeft: '0' } },\n            React.createElement(SearchIcon, null))));\n};\nexport const AssignSourcesToolbarBase = ({ t, searchInputProps, paginationProps, filter, }) => {\n    return (React.createElement(DataToolbar, { id: \"assign-sources-toolbar\", clearAllFilters: filter.onClearAll },\n        React.createElement(DataToolbarContent, null,\n            React.createElement(DataToolbarItem, { variant: \"search-filter\" },\n                React.createElement(DataToolbarFilter, { deleteChip: filter.onRemove, chips: filter.query.name, categoryName: \"name\" },\n                    React.createElement(SearchInput, Object.assign({ placeholder: t('cost_models_wizard.source_table.filter_placeholder') }, searchInputProps)))),\n            React.createElement(DataToolbarItem, { variant: \"pagination\" },\n                React.createElement(Pagination, Object.assign({}, paginationProps))))));\n};\nexport const AssignSourcesToolbar = translate()(AssignSourcesToolbarBase);\n","import { Checkbox, DataToolbar, DataToolbarContent, DataToolbarGroup, DataToolbarItem, Pagination, } from '@patternfly/react-core';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { addMultiValueQuery, removeMultiValueQuery, } from 'pages/costModels/components/filterLogic';\nimport { WarningIcon } from 'pages/costModels/components/warningIcon';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { sourcesActions, sourcesSelectors } from 'store/sourceSettings';\nimport { AssignSourcesToolbar } from './assignSourcesModalToolbar';\nclass AddSourcesStep extends React.Component {\n    render() {\n        const { costModel } = this.props;\n        if (this.props.isLoadingSources) {\n            return React.createElement(LoadingState, null);\n        }\n        if (this.props.fetchingSourcesError) {\n            return React.createElement(ErrorState, { error: null });\n        }\n        const onSelect = (isSelected, rowId) => {\n            if (rowId === -1) {\n                const newState = this.props.providers.reduce((acc, cur) => {\n                    return Object.assign(Object.assign({}, acc), { [cur.uuid]: { selected: isSelected, meta: cur } });\n                }, {});\n                this.props.setState(newState);\n                return;\n            }\n            this.props.setState(Object.assign(Object.assign({}, this.props.checked), { [this.props.providers[rowId].uuid]: {\n                    selected: isSelected,\n                    meta: this.props.providers[rowId],\n                } }));\n        };\n        const sources = this.props.providers.map((providerData, ix) => {\n            const isSelected = this.props.checked[providerData.uuid]\n                ? this.props.checked[providerData.uuid].selected\n                : false;\n            const provCostModels = providerData.cost_models === undefined\n                ? this.props.t('cost_models_wizard.source_table.default_cost_model')\n                : providerData.cost_models.map(cm => cm.name).join(',');\n            const warningIcon = providerData.cost_models.length &&\n                providerData.cost_models.find(cm => cm.name === costModel.name) ===\n                    undefined ? (React.createElement(WarningIcon, { key: providerData.uuid, text: this.props.t('cost_models_wizard.warning_source', {\n                    cost_model: provCostModels,\n                }) })) : null;\n            const cellName = (React.createElement(\"div\", { key: providerData.uuid },\n                providerData.name,\n                \" \",\n                warningIcon));\n            const checkbox = (React.createElement(React.Fragment, null,\n                React.createElement(Checkbox, { id: providerData.uuid, key: providerData.uuid, isChecked: isSelected, isDisabled: providerData.cost_models.length > 0, onChange: isChecked => onSelect(isChecked, ix) })));\n            return {\n                cells: [checkbox, cellName, provCostModels || ''],\n                selected: isSelected,\n            };\n        });\n        const sourceTypeMap = {\n            'OpenShift Container Platform': 'OCP',\n            'Microsoft Azure': 'AZURE',\n            'Amazon Web Services': 'AWS',\n        };\n        const source_type = sourceTypeMap[costModel.source_type];\n        return (React.createElement(React.Fragment, null,\n            React.createElement(AssignSourcesToolbar, { filter: {\n                    onClearAll: () => this.props.fetch(`source_type=${source_type}&limit=${this.props.pagination.perPage}`),\n                    onRemove: (category, chip) => {\n                        const newQuery = removeMultiValueQuery({\n                            name: this.props.query.name\n                                ? this.props.query.name.split(',')\n                                : [],\n                        })(category, chip);\n                        this.props.fetch(`source_type=${source_type}${newQuery.name ? `&name=${newQuery.name.join(',')}` : ''}&offset=0&limit=${this.props.pagination.perPage}`);\n                    },\n                    query: {\n                        name: Boolean(this.props.query.name)\n                            ? this.props.query.name.split(',')\n                            : [],\n                    },\n                }, searchInputProps: {\n                    id: 'assign-sources-modal-toolbar',\n                    onChange: value => this.props.updateFilter({\n                        currentFilterType: 'name',\n                        currentFilterValue: value,\n                    }),\n                    value: this.props.currentFilter.value,\n                    onSearch: _evt => {\n                        const curQuery = Boolean(this.props.query.name)\n                            ? this.props.query.name.split(',')\n                            : [];\n                        const newQuery = addMultiValueQuery({ name: curQuery })('name', this.props.currentFilter.value);\n                        this.props.fetch(`source_type=${source_type}&name=${newQuery.name.join(',')}&limit=${this.props.pagination.perPage}&offset=0`);\n                    },\n                }, paginationProps: {\n                    itemCount: this.props.pagination.count,\n                    perPage: this.props.pagination.perPage,\n                    page: this.props.pagination.page,\n                    onPerPageSelect: (_evt, newPerPage) => {\n                        this.props.fetch(`source_type=${source_type}&limit=${newPerPage}&offset=0&${this.props.query.name ? `name=${this.props.query.name}` : ''}`);\n                    },\n                    onSetPage: (_evt, newPage) => {\n                        this.props.fetch(`source_type=${source_type}&limit=${this.props.pagination.perPage}&offset=${this.props.pagination.perPage * (newPage - 1)}&${this.props.query.name ? `name=${this.props.query.name}` : ''}`);\n                    },\n                } }),\n            sources.length > 0 && (React.createElement(Table, { \"aria-label\": this.props.t('cost_models_details.add_source'), cells: [\n                    '',\n                    this.props.t('filter.name'),\n                    this.props.t('cost_models_wizard.source_table.column_cost_model'),\n                ], rows: sources },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null))),\n            sources.length === 0 && (React.createElement(EmptyFilterState, { subTitle: this.props.t('no_match_found_state.desc') })),\n            React.createElement(DataToolbar, { id: \"costmodels_details.sources_pagination_datatoolbar\" },\n                React.createElement(DataToolbarContent, { style: { flexDirection: 'row-reverse' }, \"aria-label\": this.props.t('cost_models_details.sources_pagination_bottom') },\n                    React.createElement(DataToolbarGroup, null,\n                        React.createElement(DataToolbarItem, null,\n                            React.createElement(Pagination, { itemCount: this.props.pagination.count, isDisabled: this.props.isLoadingSources, perPage: this.props.pagination.perPage, page: this.props.pagination.page, onPerPageSelect: (_evt, newPerPage) => {\n                                    this.props.fetch(`limit=${newPerPage}&offset=0&${this.props.query.name\n                                        ? `name=${this.props.query.name}`\n                                        : ''}`);\n                                }, onSetPage: (_evt, newPage) => {\n                                    this.props.fetch(`limit=${this.props.pagination.perPage}&offset=${this\n                                        .props.pagination.perPage *\n                                        (newPage - 1)}&${this.props.query.name\n                                        ? `name=${this.props.query.name}`\n                                        : ''}`);\n                                } })))))));\n    }\n}\nexport default connect(createMapStateToProps(state => {\n    return {\n        currentFilter: {\n            name: sourcesSelectors.currentFilterType(state),\n            value: sourcesSelectors.currentFilterValue(state),\n        },\n    };\n}), {\n    updateFilter: sourcesActions.updateFilterToolbar,\n})(translate()(AddSourcesStep));\n","import { Alert, Button, Modal, Split, SplitItem, Stack, StackItem, Title, } from '@patternfly/react-core';\nimport { parseApiError } from 'pages/costModels/createCostModelWizard/parseError';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsSelectors } from 'store/costModels';\nimport { sourcesActions, sourcesSelectors } from 'store/sourceSettings';\nimport AddSourceStep from './addSourceStep';\nconst sourceTypeMap = {\n    'OpenShift Container Platform': 'OCP',\n    'Microsoft Azure': 'AZURE',\n    'Amazon Web Services': 'AWS',\n};\nclass AddSourceWizardBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = { checked: {} };\n    }\n    componentDidMount() {\n        const { costModel: { source_type }, fetch, } = this.props;\n        const sourceType = sourceTypeMap[source_type];\n        fetch(`type=${sourceType}&limit=10&offset=0`);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.isLoadingSources === true &&\n            this.props.isLoadingSources === false) {\n            const initChecked = this.props.providers.reduce((acc, curr) => {\n                return Object.assign(Object.assign({}, acc), { [curr.uuid]: {\n                        selected: this.props.costModel.sources.some(p => p.uuid === curr.uuid),\n                        meta: curr,\n                    } });\n            }, {});\n            this.setState({ checked: initChecked });\n        }\n    }\n    render() {\n        const { isUpdateInProgress, onClose, isOpen, onSave, t, costModel, updateApiError, } = this.props;\n        return (React.createElement(Modal, { isFooterLeftAligned: true, isLarge: true, isOpen: isOpen, title: t('cost_models_details.assign_sources', {\n                cost_model: this.props.costModel.name,\n            }), onClose: onClose, actions: [\n                React.createElement(Button, { key: \"cancel\", variant: \"link\", isDisabled: isUpdateInProgress, onClick: onClose }, t('cost_models_wizard.cancel_button')),\n                React.createElement(Button, { key: \"save\", isDisabled: isUpdateInProgress || this.props.isLoadingSources, onClick: () => {\n                        onSave(Object.keys(this.state.checked).filter(uuid => this.state.checked[uuid].selected));\n                    } }, t('cost_models_details.action_assign')),\n            ] },\n            React.createElement(Stack, { gutter: \"md\" },\n                React.createElement(StackItem, null, Boolean(updateApiError) && (React.createElement(Alert, { variant: \"danger\", title: `${updateApiError}` }))),\n                React.createElement(StackItem, null,\n                    React.createElement(Split, { gutter: \"md\" },\n                        React.createElement(SplitItem, null,\n                            React.createElement(Title, { size: \"md\" }, t('cost_models_wizard.general_info.source_type_label'))),\n                        React.createElement(SplitItem, null, this.props.costModel.source_type))),\n                React.createElement(StackItem, null,\n                    React.createElement(AddSourceStep, { fetch: this.props.fetch, fetchingSourcesError: this.props.fetchingSourcesError, isLoadingSources: this.props.isLoadingSources, providers: this.props.providers, pagination: this.props.pagination, query: this.props.query, costModel: costModel, checked: this.state.checked, setState: newState => {\n                            this.setState({ checked: newState });\n                        } })))));\n    }\n}\nexport default connect(createMapStateToProps(state => {\n    return {\n        pagination: sourcesSelectors.pagination(state),\n        query: sourcesSelectors.query(state),\n        providers: sourcesSelectors.sources(state),\n        isLoadingSources: sourcesSelectors.status(state) === 1 /* inProgress */,\n        isUpdateInProgress: costModelsSelectors.updateProcessing(state),\n        updateApiError: costModelsSelectors.updateError(state),\n        fetchingSourcesError: sourcesSelectors.error(state)\n            ? parseApiError(sourcesSelectors.error(state))\n            : '',\n    };\n}), {\n    fetch: sourcesActions.fetchSources,\n})(translate()(AddSourceWizardBase));\n","import { Button, InputGroup, InputGroupText, Pagination, TextInput, } from '@patternfly/react-core';\nimport { DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarItem, } from '@patternfly/react-core/dist/esm/experimental';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { ReadOnlyTooltip } from './readOnlyTooltip';\nconst SearchInput = ({ id, placeholder = '', value, onChange, onSearch, }) => {\n    return (React.createElement(InputGroup, null,\n        React.createElement(TextInput, { value: value, placeholder: placeholder, id: id, onChange: onChange, onKeyPress: (evt) => {\n                if (evt.key !== 'Enter' || value === '') {\n                    return;\n                }\n                onSearch(evt);\n            } }),\n        React.createElement(InputGroupText, { style: { borderLeft: '0' } },\n            React.createElement(SearchIcon, null))));\n};\nexport const SourcesToolbar = ({ searchInputProps, paginationProps, filter, actionButtonProps, }) => {\n    return (React.createElement(DataToolbar, { id: \"assign-sources-toolbar\", clearAllFilters: filter.onClearAll },\n        React.createElement(DataToolbarContent, null,\n            React.createElement(DataToolbarItem, { variant: \"search-filter\" },\n                React.createElement(DataToolbarFilter, { deleteChip: filter.onRemove, chips: filter.query.name, categoryName: filter.categoryNames.name },\n                    React.createElement(SearchInput, Object.assign({}, searchInputProps)))),\n            React.createElement(DataToolbarItem, null,\n                React.createElement(ReadOnlyTooltip, { isDisabled: actionButtonProps.isDisabled },\n                    React.createElement(Button, Object.assign({}, actionButtonProps)))),\n            React.createElement(DataToolbarItem, { variant: \"pagination\" },\n                React.createElement(Pagination, Object.assign({}, paginationProps))))));\n};\n","export const styles = {\n    emptyState: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n    },\n};\n","import { DataToolbar, DataToolbarContent, DataToolbarGroup, DataToolbarItem, EmptyState, EmptyStateBody, EmptyStateIcon, Pagination, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { addMultiValueQuery, removeMultiValueQuery, } from 'pages/costModels/components/filterLogic';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { rbacSelectors } from 'store/rbac';\nimport { SourcesToolbar } from './sourcesToolbar';\nimport { styles } from './table.styles';\nclass TableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            query: { name: [] },\n            currentFilter: '',\n            pagination: { page: 1, perPage: 10 },\n        };\n    }\n    render() {\n        const { pagination: { page, perPage }, } = this.state;\n        const { onAdd, t, rows, cells, isWritePermission } = this.props;\n        const filteredRows = rows\n            .filter(uuid => {\n            if (!Boolean(this.state.query.name)) {\n                return true;\n            }\n            return this.state.query.name.every(fName => uuid.includes(fName));\n        })\n            .map(uuid => [uuid]);\n        const res = filteredRows.slice((page - 1) * perPage, page * perPage);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(SourcesToolbar, { actionButtonProps: {\n                    isDisabled: !isWritePermission,\n                    onClick: onAdd,\n                    children: t('toolbar.sources.assign_sources'),\n                }, filter: {\n                    onClearAll: () => this.setState({\n                        pagination: Object.assign(Object.assign({}, this.state.pagination), { page: 1 }),\n                        query: { name: [] },\n                    }),\n                    onRemove: (_category, chip) => {\n                        this.setState({\n                            pagination: Object.assign(Object.assign({}, this.state.pagination), { page: 1 }),\n                            query: removeMultiValueQuery(this.state.query)('name', chip),\n                        });\n                    },\n                    query: this.state.query,\n                    categoryNames: { name: t('toolbar.sources.category.name') },\n                }, paginationProps: {\n                    itemCount: filteredRows.length,\n                    perPage,\n                    page,\n                    onSetPage: (_evt, newPage) => this.setState({\n                        pagination: Object.assign(Object.assign({}, this.state.pagination), { page: newPage }),\n                    }),\n                    onPerPageSelect: (_evt, newPerPage) => this.setState({\n                        pagination: { page: 1, perPage: newPerPage },\n                    }),\n                }, searchInputProps: {\n                    id: 'sources-tab-toolbar',\n                    onChange: (value) => this.setState({\n                        currentFilter: value,\n                    }),\n                    onSearch: () => {\n                        this.setState({\n                            query: addMultiValueQuery(this.state.query)('name', this.state.currentFilter),\n                            currentFilter: '',\n                            pagination: Object.assign(Object.assign({}, this.state.pagination), { page: 1 }),\n                        });\n                    },\n                    value: this.state.currentFilter,\n                    placeholder: t('toolbar.sources.filter_placeholder'),\n                } }),\n            res.length > 0 && (React.createElement(Table, { \"aria-label\": \"cost-model-sources\", cells: cells, rows: res, actionResolver: () => [\n                    this.props.onDelete && {\n                        title: this.props.onDeleteText ||\n                            t('cost_models_details.action_delete'),\n                        isDisabled: !isWritePermission,\n                        // HACK: to display tooltip on disable\n                        style: !isWritePermission\n                            ? { pointerEvents: 'auto' }\n                            : undefined,\n                        tooltip: !isWritePermission ? (React.createElement(\"div\", null, t('cost_models.read_only_tooltip'))) : (undefined),\n                        onClick: (_evt, rowId) => {\n                            this.props.onDelete(res[rowId]);\n                        },\n                    },\n                ] },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null))),\n            rows.length === 0 && (React.createElement(\"div\", { style: styles.emptyState },\n                React.createElement(EmptyState, null,\n                    React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                    React.createElement(Title, { size: \"lg\" }, t('cost_models_details.empty_state_source.title')),\n                    React.createElement(EmptyStateBody, null, t('cost_models_details.empty_state_source.description'))))),\n            filteredRows.length === 0 && rows.length > 0 && (React.createElement(EmptyFilterState, { filter: this.state.currentFilter, subTitle: t('no_match_found_state.desc') })),\n            React.createElement(DataToolbar, { id: \"costmodels_details_filter_datatoolbar\" },\n                React.createElement(DataToolbarContent, { \"aria-label\": t('cost_models_details.sources_filter_controller'), style: { flexDirection: 'row-reverse' } },\n                    React.createElement(DataToolbarGroup, null,\n                        React.createElement(DataToolbarItem, null,\n                            React.createElement(Pagination, { itemCount: filteredRows.length, perPage: perPage, page: page, onSetPage: (_evt, newPage) => this.setState({\n                                    pagination: Object.assign(Object.assign({}, this.state.pagination), { page: newPage }),\n                                }), onPerPageSelect: (_evt, newPerPage) => this.setState({\n                                    pagination: { page: 1, perPage: newPerPage },\n                                }) })))))));\n    }\n}\nexport default connect(createMapStateToProps(state => ({\n    isWritePermission: rbacSelectors.isCostModelWritePermission(state),\n})))(translate()(TableBase));\n","import React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions, costModelsSelectors } from 'store/costModels';\nimport AddSourceWizard from './addSourceWizard';\nimport Dialog from './components/dialog';\nimport Table from './components/table';\nclass SourceTableBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = { dialogSource: null };\n    }\n    render() {\n        const { setDialogOpen, isLoading, sources, costModel, t, isDialogOpen, } = this.props;\n        return (React.createElement(React.Fragment, null,\n            isDialogOpen.addSource && (React.createElement(AddSourceWizard, { costModel: costModel, isOpen: true, onClose: () => setDialogOpen({ name: 'addSource', isOpen: false }), onSave: (source_uuids) => {\n                    this.props.updateCostModel(costModel.uuid, Object.assign(Object.assign({}, costModel), { source_type: costModel.source_type === 'OpenShift Container Platform'\n                            ? 'OCP'\n                            : 'AWS', source_uuids }), 'addSource');\n                } })),\n            React.createElement(Dialog, { isSmall: true, isOpen: isDialogOpen.deleteSource, title: t('dialog.delete_source_from_cost_model_title', {\n                    source: this.state.dialogSource,\n                    cost_model: costModel.name,\n                }), onClose: () => {\n                    setDialogOpen({ name: 'deleteSource', isOpen: false });\n                    this.setState({ dialogSource: null });\n                }, isProcessing: isLoading, onProceed: () => {\n                    const newState = Object.assign(Object.assign({}, costModel), { source_type: costModel.source_type === 'OpenShift Container Platform'\n                            ? 'OCP'\n                            : 'AWS', source_uuids: sources\n                            .filter(provider => provider.name !== this.state.dialogSource)\n                            .map(provider => provider.uuid) });\n                    this.props.updateCostModel(costModel.uuid, newState, 'deleteSource');\n                }, body: t('dialog.delete_source_from_cost_model_body', {\n                    source: this.state.dialogSource,\n                    cost_model: costModel.name,\n                }), actionText: t('dialog.deleteSource') }),\n            React.createElement(Table, { onDeleteText: t('cost_models_details.action_unassign'), onDelete: item => {\n                    this.setState({ dialogSource: item[0] });\n                    setDialogOpen({ name: 'deleteSource', isOpen: true });\n                }, onAdd: () => setDialogOpen({ name: 'addSource', isOpen: true }), cells: [t('filter.name')], rows: sources.map(p => p.name) })));\n    }\n}\nexport default connect(createMapStateToProps(state => ({\n    isLoading: costModelsSelectors.updateProcessing(state),\n    isDialogOpen: costModelsSelectors.isDialogOpen(state)('sources'),\n})), {\n    setDialogOpen: costModelsActions.setCostModelDialog,\n    updateCostModel: costModelsActions.updateCostModel,\n})(translate()(SourceTableBase));\n","import { global_BackgroundColor_100, global_BackgroundColor_300, global_spacer_lg, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = {\n    headerDescription: {\n        width: '97%',\n        wordWrap: 'break-word',\n    },\n    sourceSettings: {\n        backgroundColor: global_BackgroundColor_300.var,\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.var,\n        paddingTop: global_spacer_xl.value,\n        height: '182vh',\n    },\n    costmodelsContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n    },\n    headerCostModel: {\n        padding: global_spacer_lg.var,\n        paddingBottom: 0,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Alert, Button, Form, FormGroup, Modal, TextArea, TextInput, } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions, costModelsSelectors } from 'store/costModels';\nclass UpdateCostModelBase extends React.Component {\n    constructor(props) {\n        super(props);\n        const current = this.props.costModel[0];\n        this.state = {\n            name: current.name,\n            description: current.description,\n        };\n    }\n    render() {\n        const { updateCostModel, updateError, costModel, isProcessing, setDialogOpen, t, } = this.props;\n        const current = costModel[0];\n        return (React.createElement(Modal, { isFooterLeftAligned: true, title: t('cost_models_details.edit_cost_model', {\n                cost_model: current.name,\n            }), isOpen: true, isSmall: true, onClose: () => setDialogOpen({ name: 'updateCostModel', isOpen: false }), actions: [\n                React.createElement(Button, { key: \"cancel\", variant: \"secondary\", onClick: () => setDialogOpen({ name: 'updateCostModel', isOpen: false }), isDisabled: isProcessing }, t('dialog.cancel')),\n                React.createElement(Button, { key: \"proceed\", variant: \"primary\", onClick: () => {\n                        const { uuid, sources, created_timestamp, updated_timestamp } = current, previous = __rest(current, [\"uuid\", \"sources\", \"created_timestamp\", \"updated_timestamp\"]);\n                        updateCostModel(uuid, Object.assign(Object.assign({}, previous), { source_uuids: sources.map(provider => provider.uuid), name: this.state.name, description: this.state.description, source_type: current.source_type === 'OpenShift Container Platform'\n                                ? 'OCP'\n                                : 'AWS' }), 'updateCostModel');\n                    }, isDisabled: isProcessing ||\n                        (this.state.name === current.name &&\n                            this.state.description === current.description) }, t('cost_models_details.save_button')),\n            ] },\n            React.createElement(React.Fragment, null,\n                updateError && React.createElement(Alert, { variant: \"danger\", title: `${updateError}` }),\n                React.createElement(Form, null,\n                    React.createElement(FormGroup, { label: t('cost_models_wizard.general_info.name_label'), isRequired: true, fieldId: \"name\" },\n                        React.createElement(TextInput, { isRequired: true, type: \"text\", id: \"name\", name: \"name\", value: this.state.name, onChange: value => this.setState({ name: value }) })),\n                    React.createElement(FormGroup, { label: t('cost_models_wizard.general_info.description_label'), fieldId: \"description\" },\n                        React.createElement(TextArea, { type: \"text\", id: \"description\", name: \"description\", value: this.state.description, onChange: value => this.setState({ description: value }) }))))));\n    }\n}\nconst UpdateCostModelModal = connect(createMapStateToProps(state => ({\n    costModel: costModelsSelectors.costModels(state),\n    isProcessing: costModelsSelectors.updateProcessing(state),\n    updateError: costModelsSelectors.updateError(state),\n})), {\n    setDialogOpen: costModelsActions.setCostModelDialog,\n    updateCostModel: costModelsActions.updateCostModel,\n})(translate()(UpdateCostModelBase));\nexport default UpdateCostModelModal;\n","import { Breadcrumb, BreadcrumbItem, DropdownItem, List, ListItem, Split, SplitItem, Tab, Tabs, Title, } from '@patternfly/react-core';\nimport Dialog from 'pages/costModels/costModelsDetails/components/dialog';\nimport Dropdown from 'pages/costModels/costModelsDetails/components/dropdown';\nimport { ReadOnlyTooltip } from 'pages/costModels/costModelsDetails/components/readOnlyTooltip';\nimport UpdateCostModelModal from 'pages/costModels/costModelsDetails/components/updateCostModel';\nimport { styles } from 'pages/costModels/costModelsDetails/costModelsDetails.styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions, costModelsSelectors } from 'store/costModels';\nimport { rbacSelectors } from 'store/rbac';\nclass Header extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.cmpRef = React.createRef();\n    }\n    componentDidMount() {\n        this.cmpRef.current.scrollIntoView();\n    }\n    render() {\n        const { t, tabRefs, tabIndex, onSelectTab, setDialogOpen, isDialogOpen, deleteError, isDeleteProcessing, deleteCostModel, current, isWritePermission, } = this.props;\n        return (React.createElement(React.Fragment, null,\n            isDialogOpen.updateCostModel && React.createElement(UpdateCostModelModal, null),\n            React.createElement(Dialog, { isSmall: true, isOpen: isDialogOpen.deleteCostModel, title: t('dialog.delete_cost_model_title', {\n                    cost_model: current.name,\n                }), onClose: () => setDialogOpen({ name: 'deleteCostModel', isOpen: false }), error: deleteError, isProcessing: isDeleteProcessing, onProceed: () => {\n                    deleteCostModel(current.uuid, 'deleteCostModel', this.props.historyObject);\n                }, body: React.createElement(React.Fragment, null,\n                    current.sources.length === 0 &&\n                        t('dialog.delete_cost_model_body_green', {\n                            cost_model: current.name,\n                        }),\n                    current.sources.length > 0 && (React.createElement(React.Fragment, null,\n                        t('dialog.delete_cost_model_body_red', {\n                            cost_model: current.name,\n                        }),\n                        React.createElement(\"br\", null),\n                        React.createElement(\"br\", null),\n                        t('dialog.delete_cost_model_body_red_costmodel_delete'),\n                        React.createElement(\"br\", null),\n                        React.createElement(List, null, current.sources.map(provider => (React.createElement(ListItem, { key: `${provider.uuid}` }, provider.name))))))), actionText: current.sources.length === 0 ? t('dialog.deleteCostModel') : '' }),\n            React.createElement(\"header\", { ref: this.cmpRef, style: styles.headerCostModel },\n                React.createElement(Breadcrumb, null,\n                    React.createElement(BreadcrumbItem, { to: \"cost-management/cost-models\" }, t('cost_models_details.cost_model.cost_models')),\n                    React.createElement(BreadcrumbItem, { isActive: true }, current.name)),\n                React.createElement(Split, null,\n                    React.createElement(SplitItem, { style: styles.headerDescription },\n                        React.createElement(Title, { style: styles.title, size: \"2xl\" }, current.name),\n                        current.description && (React.createElement(React.Fragment, null,\n                            React.createElement(Title, { style: styles.title, size: \"md\" }, current.description),\n                            React.createElement(\"br\", null))),\n                        React.createElement(Title, { style: styles.title, size: \"md\" },\n                            t('cost_models_details.cost_model.source_type'),\n                            \":\",\n                            ' ',\n                            current.source_type),\n                        current.source_type === 'OpenShift Container Platform' ? (React.createElement(Tabs, { activeKey: tabIndex, onSelect: (_evt, index) => onSelectTab(index) },\n                            React.createElement(Tab, { eventKey: 0, title: \"Price list\", tabContentId: \"refPriceList\", tabContentRef: tabRefs[0] }),\n                            React.createElement(Tab, { eventKey: 1, title: \"Markup\", tabContentId: \"refMarkup\", tabContentRef: tabRefs[1] }),\n                            React.createElement(Tab, { eventKey: 2, title: \"Sources\", tabContentId: \"refSources\", tabContentRef: tabRefs[2] }))) : (React.createElement(Tabs, { activeKey: tabIndex, onSelect: (_evt, index) => onSelectTab(index) },\n                            React.createElement(Tab, { eventKey: 0, title: \"Markup\", tabContentId: \"refMarkup\", tabContentRef: tabRefs[0] }),\n                            React.createElement(Tab, { eventKey: 1, title: \"Sources\", tabContentId: \"refSources\", tabContentRef: tabRefs[1] })))),\n                    React.createElement(SplitItem, null,\n                        React.createElement(Dropdown, { isPlain: true, position: \"right\", dropdownItems: [\n                                React.createElement(ReadOnlyTooltip, { key: \"edit\", isDisabled: !isWritePermission },\n                                    React.createElement(DropdownItem, { isDisabled: !isWritePermission, onClick: () => setDialogOpen({\n                                            isOpen: true,\n                                            name: 'updateCostModel',\n                                        }) }, t('cost_models_details.action_edit'))),\n                                React.createElement(ReadOnlyTooltip, { key: \"delete\", isDisabled: !isWritePermission },\n                                    React.createElement(DropdownItem, { isDisabled: !isWritePermission, onClick: () => setDialogOpen({\n                                            isOpen: true,\n                                            name: 'deleteCostModel',\n                                        }), style: isWritePermission ? { color: 'red' } : undefined }, t('cost_models_details.action_delete'))),\n                            ] }))))));\n    }\n}\nexport default connect(createMapStateToProps(state => ({\n    isDialogOpen: costModelsSelectors.isDialogOpen(state)('costmodel'),\n    isDeleteProcessing: costModelsSelectors.deleteProcessing(state),\n    deleteError: costModelsSelectors.deleteError(state),\n    isWritePermission: rbacSelectors.isCostModelWritePermission(state),\n})), {\n    setDialogOpen: costModelsActions.setCostModelDialog,\n    deleteCostModel: costModelsActions.deleteCostModel,\n})(translate()(Header));\n","import { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, TabContent, Title, } from '@patternfly/react-core';\nimport { ErrorCircleOIcon } from '@patternfly/react-icons';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport MarkupCard from 'pages/costModels/costModelsDetails/components/markup';\nimport PriceListTable from 'pages/costModels/costModelsDetails/components/priceListTable';\nimport SourceTable from 'pages/costModels/costModelsDetails/sourceTable';\nimport React from 'react';\nimport { I18n } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions, costModelsSelectors } from 'store/costModels';\nimport { metricsActions, metricsSelectors } from 'store/metrics';\nimport { rbacActions, rbacSelectors } from 'store/rbac';\nimport { parseApiError } from '../createCostModelWizard/parseError';\nimport { styles } from './costModelInfo.styles';\nimport Header from './header';\nclass CostModelInformation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.tabRefs = [\n            React.createRef(),\n            React.createRef(),\n            React.createRef(),\n        ];\n        this.state = { tabIndex: 0 };\n    }\n    componentDidMount() {\n        this.props.fetchRbac();\n        this.props.fetchMetrics();\n        this.props.fetchCostModels(`uuid=${this.props.match.params.uuid}`);\n    }\n    render() {\n        const { costModels, metricsStatus, rbacStatus, costModelStatus, rbacError, costModelError, metricsError, } = this.props;\n        if (metricsStatus !== 2 /* complete */ ||\n            rbacStatus !== 2 /* complete */ ||\n            costModelStatus !== 2 /* complete */) {\n            return React.createElement(LoadingState, null);\n        }\n        const fetchError = metricsError || rbacError || costModelError;\n        if (Boolean(fetchError)) {\n            if (costModelError !== null) {\n                const costModelErrMessage = parseApiError(costModelError);\n                if (costModelErrMessage === 'uuid: Enter a valid UUID.') {\n                    return (React.createElement(I18n, null, t => {\n                        return (React.createElement(Bullseye, null,\n                            React.createElement(EmptyState, null,\n                                React.createElement(EmptyStateIcon, { icon: ErrorCircleOIcon }),\n                                React.createElement(Title, { size: \"lg\" }, t('cost_models_details.empty_state_bad_uuid.title')),\n                                React.createElement(EmptyStateBody, null, t('cost_models_details.empty_state_bad_uuid.description', { uuid: this.props.match.params.uuid })))));\n                    }));\n                }\n            }\n            return React.createElement(ErrorState, { error: fetchError });\n        }\n        const current = costModels[0];\n        const sources = current.sources;\n        return (React.createElement(\"div\", { style: styles.sourceSettings },\n            React.createElement(Header, { historyObject: this.props.history, current: current, tabRefs: this.tabRefs, tabIndex: this.state.tabIndex, onSelectTab: tabIndex => this.setState({ tabIndex }) }),\n            React.createElement(\"div\", { style: styles.content }, current.source_type === 'OpenShift Container Platform' ? (React.createElement(React.Fragment, null,\n                React.createElement(TabContent, { eventKey: 0, id: \"refPriceList\", ref: this.tabRefs[0], hidden: this.state.tabIndex !== 0 },\n                    React.createElement(\"div\", { style: styles.costmodelsContainer },\n                        React.createElement(PriceListTable, { costModel: current.name, assignees: sources.map(p => p.name), current: current }))),\n                React.createElement(TabContent, { eventKey: 1, id: \"refMarkup\", ref: this.tabRefs[1], hidden: this.state.tabIndex !== 1 },\n                    React.createElement(MarkupCard, { current: current })),\n                React.createElement(TabContent, { eventKey: 2, id: \"refSources\", ref: this.tabRefs[2], hidden: this.state.tabIndex !== 2 },\n                    React.createElement(\"div\", { style: styles.costmodelsContainer },\n                        React.createElement(SourceTable, { costModel: current, sources: sources }))))) : (React.createElement(React.Fragment, null,\n                React.createElement(TabContent, { eventKey: 0, id: \"refMarkup\", ref: this.tabRefs[0], hidden: this.state.tabIndex !== 0 },\n                    React.createElement(MarkupCard, { current: current })),\n                React.createElement(TabContent, { eventKey: 1, id: \"refSources\", ref: this.tabRefs[1], hidden: this.state.tabIndex !== 1 },\n                    React.createElement(\"div\", { style: styles.costmodelsContainer },\n                        React.createElement(SourceTable, { costModel: current, sources: sources }))))))));\n    }\n}\nexport default connect(createMapStateToProps(store => {\n    return {\n        costModels: costModelsSelectors.costModels(store),\n        costModelError: costModelsSelectors.error(store),\n        costModelStatus: costModelsSelectors.status(store),\n        metricsHash: metricsSelectors.metrics(store),\n        maxRate: metricsSelectors.maxRate(store),\n        costTypes: metricsSelectors.costTypes(store),\n        metricsError: metricsSelectors.metricsState(store).error,\n        metricsStatus: metricsSelectors.status(store),\n        rbacError: rbacSelectors.selectRbacState(store).error,\n        rbacStatus: rbacSelectors.selectRbacState(store).status,\n    };\n}), {\n    fetchMetrics: metricsActions.fetchMetrics,\n    fetchRbac: rbacActions.fetchRbac,\n    fetchCostModels: costModelsActions.fetchCostModels,\n})(CostModelInformation);\n"],"sourceRoot":""}