{"version":3,"file":"86fa7f5ba1cf75934df6.bundle.js","mappings":"mHACA,Q,SAAqB,G,oGCIrB,MCJA,GDWe,E,QAAA,KAPM,EAAGA,MAAAA,KACZ,kBAAoB,aAAgB,KACxCA,GAAU,kBAAoBC,EAAA,EAAY,KACtC,kBAAoBC,EAAA,EAAiB,CAAEF,MAAOA,KAClD,kBAAoBG,EAAA,EAAM,KACtB,kBAAoBC,EAAA,EAAa,W,kNEC7C,MAAMC,UAA0B,cAC5BC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,QAAU,gBACfD,KAAKE,kBAAoB,gBACzBF,KAAKG,cAAgBC,EAAA,EACrBJ,KAAKK,aAAe,CAChBC,eAAgB,GAChBC,kBAAkB,EAClBC,YAAY,GAEhBR,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cAEpCL,KAAKY,eAAiB,KAClBZ,KAAKE,kBAAkBW,QAAQC,cAAc,SAASC,SAE1Df,KAAKgB,cAAgB,KACjB,MAAM,WAAEC,EAAU,OAAEC,EAAS,GAAE,gBAAEC,GAAoBnB,KAAKF,MAC1D,OAAQ,kBAAoB,MAAO,CAAEsB,IAAKpB,KAAKE,mBAC3C,kBAAoB,EAAAmB,eAAgB,CAAEJ,WAAYA,GAC9C,kBAAoB,EAAAK,mBAAoB,CAAEC,KAAM,kBAAoB,KAAY,MAAOC,MAAON,EAAQO,SAAUN,EAAiBO,QAAS1B,KAAK2B,SAAUC,UAAW5B,KAAK6B,yBACzKX,GAAUA,EAAOY,QAAW,kBAAoB,EAAAC,wBAAyB,KACrE,kBAAoB,EAAAC,OAAQ,CAAEC,QAAS,QAASC,QAASlC,KAAKmC,kBAAmB,aAAc,0BAC3F,kBAAoB,KAAW,WAEnDnC,KAAKoC,QAAU,KACX,MAAM,OAAElB,GAAWlB,KAAKF,MACxB,OAAQ,kBAAoB,MAAO,CAAEsB,IAAKpB,KAAKC,SAAWiB,GAAUA,EAAOY,QAAW,kBAAoB,EAAAO,KAAM,CAAEC,SAAUtC,KAAKuC,iBAAkBX,UAAW5B,KAAKwC,mBAC/J,kBAAoB,EAAAC,YAAa,KAC7B,kBAAoB,EAAAC,SAAU,KAAM1C,KAAK2C,oBAErD3C,KAAK2C,aAAe,KAChB,MAAM,KAAEC,GAAS5C,KAAKF,MAChB+C,EAAY7C,KAAK8C,aAAaC,KAAIC,GAAW,kBAAoB,EAAAC,SAAU,CAAEC,IAAKF,EAAOE,IAAKC,OAAQH,EAAOE,KAAOF,EAAOE,OAE3HE,EAAe,kBAAoB,EAAAH,SAAU,CAAEhC,YAAY,EAAMiC,IAAK,WAAaL,EAAUf,OAASc,EAAKS,cAAcC,EAAA,eAAwBV,EAAKS,cAAcC,EAAA,mBAK1K,OAJIT,EAAUf,QACVe,EAAUU,QAAQ,kBAAoB,EAAAC,QAAS,CAAEN,IAAK,aAE1DL,EAAUU,QAAQH,GACXP,GAEX7C,KAAK8C,WAAa,KACd,MAAM,SAAEW,EAAQ,oBAAEC,EAAmB,OAAExC,GAAWlB,KAAKF,OACjD,eAAEQ,GAAmBN,KAAKS,MAChC,IAAIkD,EAAU,GAUd,GATIF,GAAYA,EAASG,MAAQH,EAASG,KAAK9B,OAAS,GAA6B,IAAxB4B,IACzDC,EAAUF,EAASG,KAAKb,KAAIc,IACxB,MAAMrC,EAASsC,MAAM5C,KAAuB2C,EAAKE,eAAiBF,EAAKG,gBAAxCH,EAAKrC,MACpC,MAAO,CACH0B,IAAK1B,EACLyC,KAAMzC,OAIdlB,GAAkBA,EAAewB,OAAQ,CACzC,MAAMoC,EAAc5D,EAAeyC,KAAIoB,IAC5B,CACHjB,IAAKiB,EACLF,KAAME,MAGdR,EAAU,IAAIA,KAAYO,GAE9B,OAAOP,GAGX3D,KAAKoE,gBAAkBC,KACfrE,KAAKC,QAAQY,SACZb,KAAKC,QAAQY,QAAQyD,SAASD,EAAME,SACpCvE,KAAKE,kBAAkBW,QAAQyD,SAASD,EAAME,SAC/CvE,KAAKwE,SAAS,CAAEhE,YAAY,KAIpCR,KAAKwC,kBAAoB6B,IACH,WAAdA,EAAMnB,MACNlD,KAAKY,iBACLZ,KAAKwE,SAAS,CAAEhE,YAAY,KAEd,QAAd6D,EAAMnB,KACNlD,KAAKmC,qBAIbnC,KAAKuC,iBAAmB8B,IACpB,MAAM,SAAE/B,EAAQ,OAAEpB,GAAWlB,KAAKF,MAClCuE,EAAMI,kBACN,MAAMjD,EAAQ6C,EAAME,OAAOG,WAAaxD,EACnB,KAAjBM,EAAMmD,QAGV3E,KAAKwE,SAAS,CAAEhE,YAAY,IAAS,KAC7B8B,GACAA,EAASd,OAKrBxB,KAAK6B,uBAAyBwC,IAC1B,OAAQA,EAAMnB,KACV,IAAK,QACDlD,KAAKuC,iBAAiB8B,GACtB,MACJ,IAAK,SACDrE,KAAKY,iBACLZ,KAAKwE,SAAS,CAAEhE,YAAY,IAC5B,MACJ,IAAK,UACL,IAAK,YAED,GAAIR,KAAKC,QAAQY,QAAS,CACtB,MAAM+D,EAAe5E,KAAKC,QAAQY,QAAQC,cAAc,8BACxD8D,GAAgBA,EAAa7D,QAEjC,MACJ,IAAK,MACDf,KAAKmC,oBACL,MACJ,QAEInC,KAAK2B,aAGjB3B,KAAKmC,kBAAoB,KACrB,MAAM,QAAE0C,GAAY7E,KAAKF,MACzBE,KAAKwE,SAAS,CAAEhE,YAAY,IAAS,KAC7BqE,GACAA,QAIZ7E,KAAK2B,SAAW,KACZ,MAAM,WAAEnB,GAAeR,KAAKS,MACvBD,GACDR,KAAKwE,SAAS,CAAEhE,YAAY,KAGpCR,KAAKmC,kBAAoBnC,KAAKmC,kBAAkB2C,KAAK9E,MACrDA,KAAKoE,gBAAkBpE,KAAKoE,gBAAgBU,KAAK9E,MACjDA,KAAKwC,kBAAoBxC,KAAKwC,kBAAkBsC,KAAK9E,MACrDA,KAAKuC,iBAAmBvC,KAAKuC,iBAAiBuC,KAAK9E,MACnDA,KAAK6B,uBAAyB7B,KAAK6B,uBAAuBiD,KAAK9E,MAEnE+E,mBAAmBC,GACf,MAAM,cAAEC,EAAa,oBAAEvB,EAAmB,kBAAEwB,EAAiB,aAAEC,EAAY,OAAEjE,GAAWlB,KAAKF,MAC7F,GAAIoB,GAAU8D,EAAU9D,SAAWA,GAAkC,IAAxBwC,EAA4C,CACrF0B,aAAapF,KAAKG,eAClB,MAAMkF,EAAQ,CACVnE,OAAAA,GAEEoE,GAAc,QAASD,GAE7BrF,KAAKG,cAAgBoF,YAAW,KAC5BN,EAAcC,EAAmBC,EAAcG,KAChD,MAGXE,SACI,MAAM,WAAEhF,GAAeR,KAAKS,MAC5B,OAAQ,kBAAoB,EAAAgF,OAAQ,CAAEC,QAAS1F,KAAKgB,gBAAiB2E,OAAQ3F,KAAKoC,UAAWwD,SAAU,IAAM5F,KAAKE,kBAAkBW,QAASgF,UAAWrF,EAAYsF,gBAAiB9F,KAAKoE,mBAGlM,MAAM2B,GAAkB,SAAsB,CAACtF,GAASyE,kBAAAA,EAAmBC,aAAAA,EAAcjE,OAAAA,MACrF,MAAMmE,EAAQ,CACVnE,OAAAA,GAEEoE,GAAc,QAASD,GAG7B,MAAO,CACH5B,SAHa,oBAAiChD,EAAOyE,EAAmBC,EAAcG,GAItF5B,oBAHwB,+BAA4CjD,EAAOyE,EAAmBC,EAAcG,OAM9GU,EAAqB,CACvBf,cAAe,SAEbgB,GAAgB,EAAAC,EAAA,KAAW,IAAAC,SAAQJ,EAAiBC,EAAzB,CAA6CpG,ICzLvE,MAAMwG,UAA0B,cACnCvG,YAAYC,GACRC,MAAMD,GACNE,KAAKK,aAAe,CAChBa,YAAQmF,GAEZrG,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cACpCL,KAAKsG,cAAgB,KACjBtG,KAAKwE,SAAS,CACVtD,YAAQmF,KAGhBrG,KAAKuG,eAAkB/E,IACnBxB,KAAKwE,SAAS,CACVtD,OAAQM,KAGhBxB,KAAKwG,eAAkBhF,IACnB,MAAM,SAAEc,GAAatC,KAAKF,MAC1BE,KAAKwE,SAAS,CACVtD,YAAQmF,IACT,KACK/D,GACAA,EAASd,OAIrBxB,KAAKsG,cAAgBtG,KAAKsG,cAAcxB,KAAK9E,MAC7CA,KAAKuG,eAAiBvG,KAAKuG,eAAezB,KAAK9E,MAC/CA,KAAKwG,eAAiBxG,KAAKwG,eAAe1B,KAAK9E,MAEnDwF,SACI,MAAM,WAAEvE,EAAU,kBAAEiE,EAAiB,aAAEC,GAAiBnF,KAAKF,OACvD,OAAEoB,GAAWlB,KAAKS,MACxB,OAAQ,kBAAoBwF,EAAe,CAAEhF,WAAYA,EAAY4D,QAAS7E,KAAKsG,cAAenF,gBAAiBnB,KAAKuG,eAAgBjE,SAAUtC,KAAKwG,eAAgBtB,kBAAmBA,EAAmBC,aAAcA,EAAcjE,OAAQA,K,gDCnClP,MAAMuF,EAAS,CAClBC,OAAQ,CACJC,YAAaC,EAAA,UAEjBC,iBAAkB,CACdC,gBAAiBC,EAAA,SACjBC,cAAeJ,EAAA,SACfK,WAAYL,EAAA,SACZM,WAAYC,EAAA,SACZR,YAAaQ,EAAA,W,qCCDrB,MAAMC,EAAgB,MAItB,MAAMC,UAAqB,cACvBxH,cACIE,SAASuH,WACTtH,KAAKK,aAAe,CAChBkH,oBAAoB,GAExBvH,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cACpCL,KAAKwH,iBAAmBhG,IACpB,MAAM,sBAAEiG,GAA0BzH,KAAKF,MACvCE,KAAKwE,SAAS,CAAEkD,iBAAkBlG,IAAS,KACnCiG,GACAA,EAAsBjG,OAIlCxB,KAAK2H,iBAAmBC,IACpB5H,KAAKwE,SAAS,CACV+C,mBAAoBK,KAIhCC,oBACI,MAAM,SAAEC,EAAQ,eAAEC,EAAc,qBAAEC,EAAoB,mBAAEC,GAAuBjI,KAAKF,MACvD,IAAzBkI,GACAF,EAASG,EAAoBb,EAAeW,GAGpDhD,mBAAmBC,GACf,MAAM,SAAE8C,EAAQ,eAAEC,EAAc,qBAAEC,EAAoB,mBAAEC,GAAuBjI,KAAKF,MAC/EkF,EAAU+C,iBAAmBA,GAAkB/C,EAAUiD,qBAAuBA,GACxD,IAAzBD,GACAF,EAASG,EAAoBb,EAAeW,GAGpDG,qBACI,MAAM,OAAEC,EAAM,UAAEC,GAAcpI,KAAKF,MACnC,IAAI8D,EAAO,GACPwE,GAAaA,EAAUxE,OACvBA,EAAO,IAAI,IAAIyE,IAAI,IAAID,EAAUxE,SAErC,IAAID,EAAU,GACd,GAAIC,EAAK9B,OAAS,EACd,IAAK,MAAMwG,KAAO1E,EACd,GAAIuE,IAAWG,EAAIpF,KAAOoF,EAAIC,OAAQ,CAClC5E,EAAU2E,EAAIC,OAAOxF,KAAIoB,IACd,CACHjB,IAAKiB,EACLF,KAAME,MAGd,MAIZ,OAAOR,EAEX6B,SACI,MAAM,WAAEvE,EAAU,gBAAEuH,EAAe,iBAAEC,EAAgB,WAAEC,EAAU,YAAEC,GAAgB3I,KAAKF,OAClF,mBAAEyH,GAAuBvH,KAAKS,MAC9BmI,EAAgB5I,KAAKkI,qBAAqBnF,KAAI8F,GACzC,kBAAoB,EAAAC,aAAc,CAAE5F,IAAK2F,EAAa3F,IAAK1B,MAAOqH,EAAa3F,QAE1F,OAAI0F,EAAc9G,OA/DD,GAgEL,kBAAoB,EAAAiH,WAAY,KACpC,kBAAoB,EAAAC,UAAW,CAAE/H,WAAYA,EAAYgD,KAAM,oBAAqBgF,GAAI,oBAAqBC,KAAM,SAAU,aAAc,kBAAmB5F,EAAA,6BAAqC7B,SAAUzB,KAAKwH,iBAAkBhG,MAAOmH,EAAaQ,YAAa,kBAAmB7F,EAAA,oCAA4C1B,UAAWwH,GAAOZ,EAAgBY,KACtW,kBAAoB,EAAApH,OAAQ,CAAEf,WAAYA,EAAYgB,QAAS,EAAAoH,cAAA,QAAuB,aAAc,kBAAmB/F,EAAA,mCAA2CpB,QAASkH,GAAOZ,EAAgBY,IAC9L,kBAAoB,KAAY,QAEpC,kBAAoB,EAAAE,OAAQ,CAAErI,WAAYA,EAAYgB,QAAS,EAAAsH,cAAA,SAAwB,aAAc,kBAAmBjG,EAAA,6BAAqCkG,SAAUxJ,KAAK2H,iBAAkBrF,SAAUmG,EAAkBC,WAAYA,EAAYd,OAAQL,EAAoBkC,gBAAiB,kBAAmBnG,EAAA,gCAAyCsF,IAG3W,MAAM,GAAkB,SAAsB,CAACnI,GAAS0H,OAAAA,EAAQF,mBAAAA,MAC5D,MAAM5C,GAAQ,QAAWqE,SAASxI,QAC5ByI,EAAUtE,EAAMuE,SAChBC,EAAYxE,EAAMyE,WAClBC,GAAkB,QAAmB1E,GACrC2E,EAAUD,EAAkB,MAAe,QAAa1E,GACxD4E,EAAeF,IAAoC,QAAgB1E,GACnE6E,EAAe/B,EACf,CACEjF,IAAKiF,GAEP,GACAgC,EAAWR,GAAWE,EACtB,CACEC,WAAYD,EACZD,SAAUD,EACVS,OAAQ1J,OAAOC,OAAO,GAAIuJ,IAE5B,CACEE,OAAQ1J,OAAOC,OAAO,CAAE0J,WAAY,UAAWC,iBAAkB,QAASC,kBAAmB,GAAKL,IAGpGnC,GAAiB,QAASrH,OAAOC,OAAO,GAAIwJ,IAGlD,MAAO,CACHR,QAAAA,EACAK,QAAAA,EACAC,aAAAA,EACAJ,UAAAA,EACA9B,eAAAA,EACAK,UARc,eAAuB3H,EAAOwH,EAAoBb,EAAeW,GAS/EC,qBARyB,0BAAkCvH,EAAOwH,EAAoBb,EAAeW,OAWvG,EAAqB,CACvBD,SAAU,SAER0C,GAAkB,IAAArE,SAAQ,EAAiB,EAAzB,CAA6CkB,GAC/DoD,GAAW,EAAAvE,EAAA,IAAWsE,GClG5B,MAAME,EAAiB,CACnBpC,IAAK,IAEF,MAAMqC,UAAwB,cACjC9K,cACIE,SAASuH,WACTtH,KAAKK,aAAe,CAChBuK,cAAe,GACfC,SAAS,IAAAC,WAAUJ,GACnBK,kBAAkB,EAClBC,sBAAsB,EACtBC,yBAAyB,EACzBC,wBAAwB,EACxBC,wBAAwB,EACxBC,0BAA0B,EAC1B1D,iBAAkB,IAEtB1H,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cAEpCL,KAAKqL,mBAAqB,KACtB,MAAM,gBAAEC,EAAe,QAAEtB,EAAO,MAAE3E,GAAUrF,KAAKF,MACjD,IAAKwL,EACD,MAAO,OAEX,GAAIjG,GAASA,EAAMkG,UAAYlG,EAAMkG,SAAS,MAC1C,OAAO,KAEX,IAAK,MAAMvI,KAAUsI,EACjB,GAAItB,IAAYhH,EAAOE,KAAQ8G,IAA2C,IAAhCA,EAAQwB,QAAQ,MAAqBxI,EAAOE,MAAQ,KAC1F,OAAOF,EAAOE,IAGtB,OAAOoI,EAAgB,GAAGpI,KAE9BlD,KAAKyL,iBAAmBpG,IACpB,MAAMwF,GAAU,IAAAC,WAAUJ,GAY1B,OAXIrF,GAASA,EAAMqG,WACfhL,OAAOiL,KAAKtG,EAAMqG,WAAWE,SAAQ1I,IACjC,MAAMqF,EAASsD,MAAMC,QAAQzG,EAAMqG,UAAUxI,IAAQ,IAAImC,EAAMqG,UAAUxI,IAAQ,CAACmC,EAAMqG,UAAUxI,KAClE,IAA5BA,EAAIsI,QAAQ,KACZX,EAAQvC,IAAIpF,EAAI6I,UAAU,aAAqBxD,EAG/CsC,EAAQ3H,GAAOqF,KAIpBsC,GAEX7K,KAAKgM,SAAW,CAAC9C,EAAM+C,KAGnB,MAAMC,EAAahD,GAAQA,EAAKhG,IAAMgG,EAAKhG,IAAMgG,EAC3CD,EAAKgD,GAAQA,EAAK/I,IAAM+I,EAAK/I,IAAM+I,EACrCC,EACAlM,KAAKwE,UAAU2H,IACPA,EAAUtB,QAAQvC,IAAI4D,GAEtBC,EAAUtB,QAAQvC,IAAI4D,GAAcC,EAAUtB,QAAQvC,IAAI4D,GAAY9B,QAAOgC,GAAKA,IAAMnD,IAEnFkD,EAAUtB,QAAQqB,KACvBC,EAAUtB,QAAQqB,GAAcC,EAAUtB,QAAQqB,GAAY9B,QAAOgC,GAAKA,IAAMnD,KAE7E,CACH4B,QAASsB,EAAUtB,YAExB,KACC,MAAM,QAAEA,GAAY7K,KAAKS,MACnB4L,EAAcxB,EAAQvC,IAAI4D,GAAc,GAAG,MAAYA,IAAeA,EAC5ElM,KAAKF,MAAMwM,gBAAgBD,EAAapD,MAI5CjJ,KAAKwE,SAAS,CACVqG,SAAS,IAAAC,WAAUJ,KACpB,KACC1K,KAAKF,MAAMwM,gBAAgB,UAKvCtM,KAAKuM,cAAgB,KACjB,MAAM,KAAE3J,EAAI,cAAE4J,EAAa,qBAAEC,EAAoB,WAAExL,EAAU,aAAEyL,EAAY,WAAEC,EAAU,cAAEC,GAAkB5M,KAAKF,OAC1G,iBAAEiL,GAAqB/K,KAAKS,MAC5BoM,EAAcL,EAAgBG,EAAaC,EAAgBA,EAAc9K,OAAS,EAElFgL,EAAcD,EAAc,EAE5BE,KAHeP,GAAiBK,IAAgBF,KAAeA,EAAa,OAE9DG,GAAc,KAE5BE,EAAgB,CAClB,kBAAoB,EAAAC,aAAc,CAAE/J,IAAK,SAAUhB,QAAS,IAAMlC,KAAKkN,0BAA0B,SAAWtK,EAAKS,cAAcC,EAAA,0BAC/H,kBAAoB,EAAA2J,aAAc,CAAE/J,IAAK,SAAUhB,QAAS,IAAMlC,KAAKkN,0BAA0B,SAAWtK,EAAKS,cAAcC,EAAA,wBAAgC,CAAE9B,MAAOkL,KACxK,kBAAoB,EAAAO,aAAc,CAAE/J,IAAK,SAAUhB,QAAS,IAAMlC,KAAKkN,0BAA0B,QAAUtK,EAAKS,cAAcC,EAAA,uBAA+B,CAAE9B,MAAOmL,MAE1K,OAAQ,kBAAoB,EAAAQ,SAAU,CAAE7K,SAAUtC,KAAKoN,mBAAoBC,SAAU,EAAAC,iBAAA,KAAuBC,OAAQ,kBAAoB,EAAAC,eAAgB,CAAEvM,WAAYA,GAAcwL,EAAsBgB,iBAAkB,CAChN,kBAAoB,EAAAC,uBAAwB,CAAEzE,GAAI,cAAe/F,IAAK,cAAe,aAAcN,EAAKS,cAAcyJ,EAAcxJ,EAAA,gCAAyCA,EAAA,+BAAuCyJ,UAAWA,EAAW7K,QAAS,KAC3O4K,EAAc9M,KAAKkN,0BAA0B,QAAUlN,KAAKkN,0BAA0B,WAE/F1D,SAAUxJ,KAAK2N,0BAA4C,IAAhBd,GAAsB,kBAAoB,aAAgB,KAAMjK,EAAKS,cAAcC,EAAA,WAAmB,CAAE9B,MAAOqL,MAAmBjF,OAAQmD,EAAkBiC,cAAeA,KAErOhN,KAAKkN,0BAA6BU,IAC9B,MAAM,eAAEC,GAAmB7N,KAAKF,MAC5B+N,GACAA,EAAeD,IAGvB5N,KAAKoN,mBAAqB,KACtBpN,KAAKwE,SAAS,CACVuG,kBAAmB/K,KAAKS,MAAMsK,oBAGtC/K,KAAK2N,yBAA2B/F,IAC5B5H,KAAKwE,SAAS,CACVuG,iBAAkBnD,KAG1B5H,KAAK8N,yBAA2B,KAC5B,MAAM,gBAAExC,GAAoBtL,KAAKF,MAC3B6D,EAAU,GAOhB,OANA2H,EAAgBvI,KAAIC,IAChBW,EAAQoK,KAAK,CACTC,SAAU,IAAMhL,EAAOiB,KACvBzC,MAAOwB,EAAOE,SAGfS,GAEX3D,KAAKiO,uBAAyB,CAAC5J,EAAO6J,KAClClO,KAAKwE,SAAS,CACVoG,cAAe,GACfuD,gBAAiBD,EAAU1M,MAC3B4M,mBAAe/H,EACf2E,sBAAuBhL,KAAKS,MAAMuK,wBAG1ChL,KAAKqO,uBAAyBzG,IAC1B5H,KAAKwE,SAAS,CACVwG,qBAAsBpD,KAI9B5H,KAAKsO,iBAAoBC,IACrB,MAAM,KAAE3L,EAAI,WAAE3B,EAAU,kBAAEiE,GAAsBlF,KAAKF,OAC/C,gBAAEqO,EAAe,QAAEtD,EAAO,cAAED,GAAkB5K,KAAKS,MACzD,OAAQ,kBAAoB,EAAA+N,cAAe,CAAEC,aAAcF,EAAgBG,MAAO7D,EAAQ0D,EAAerL,KAAMyL,WAAY3O,KAAKgM,SAAU9I,IAAKqL,EAAerL,IAAK0L,gBAAiBT,IAAoBI,EAAerL,KACnN,kBAAoB,EAAA6F,WAAY,MAAM,OAAoB7D,EAAmBqJ,EAAerL,KAAQ,kBAAoBkD,EAAmB,CAAEnF,WAAYA,EAAYqB,SAAUd,GAASxB,KAAK6O,sBAAsBrN,EAAO+M,EAAerL,KAAMgC,kBAAmBA,EAAmBC,aAAcoJ,EAAerL,MAAW,kBAAoB,aAAgB,KAC7V,kBAAoB,EAAA8F,UAAW,CAAE/H,WAAYA,EAAYgD,KAAM,kBAAkBsK,EAAerL,MAAO+F,GAAI,kBAAkBsF,EAAerL,MAAOgG,KAAM,SAAU,aAActG,EAAKS,cAAcC,EAAA,yBAAiC,CAAE9B,MAAO+M,EAAerL,MAAQzB,SAAUzB,KAAK8O,4BAA6BtN,MAAOoJ,EAAezB,YAAavG,EAAKS,cAAcC,EAAA,sBAA8B,CAAE9B,MAAO+M,EAAerL,MAAQtB,UAAWwH,GAAOpJ,KAAK+O,gBAAgB3F,EAAKmF,EAAerL,OAChe,kBAAoB,EAAAlB,OAAQ,CAAEf,WAAYA,EAAYgB,QAAS,EAAAoH,cAAA,QAAuB,aAAczG,EAAKS,cAAcC,EAAA,0BAAkC,CAAE9B,MAAO+M,EAAerL,MAAQhB,QAASkH,GAAOpJ,KAAK+O,gBAAgB3F,EAAKmF,EAAerL,MAC9O,kBAAoB,KAAY,WAEhDlD,KAAKgP,0BAA4B,KAC7B,MAAM,KAAEpM,GAAS5C,KAAKF,MACtB,MAAO,CAAC,CAAEmE,KAAMrB,EAAKS,cAAcC,EAAA,QAAgB,CAAE2L,MAAO,IAAM/L,IAAK,UAE3ElD,KAAK8O,4BAA+BtN,IAChCxB,KAAKwE,SAAS,CAAEoG,cAAepJ,KAEnCxB,KAAK+O,gBAAkB,CAAC1K,EAAOnB,KAC3B,MAAM,cAAE0H,EAAa,gBAAEuD,GAAoBnO,KAAKS,MAC3C4D,GAASA,EAAMnB,KAAqB,UAAdmB,EAAMnB,KAA6C,KAAzB0H,EAAcjG,QAGnE3E,KAAKwE,UAAU2H,IACX,MAAM+C,EAAc/C,EAAUtB,QAAQ3H,GACtC,MAAO,CACH2H,QAASnK,OAAOC,OAAOD,OAAOC,OAAO,GAAIwL,EAAUtB,SAAU,CAAE,CAACsD,GAAkBe,GAAeA,EAAYC,SAASvE,GAC5GsE,EACAA,EACI,IAAIA,EAAatE,GACjB,CAACA,KACfA,cAAe,OAEpB,KACC5K,KAAKF,MAAMsP,cAAcjB,EAAiBvD,OAGlD5K,KAAK6O,sBAAwB,CAACrN,EAAO0B,KACjC,MAAM,gBAAEiL,GAAoBnO,KAAKS,MACjCT,KAAKwE,UAAU2H,IACX,MAAM+C,EAAc/C,EAAUtB,QAAQ3H,GACtC,MAAO,CACH2H,QAASnK,OAAOC,OAAOD,OAAOC,OAAO,GAAIwL,EAAUtB,SAAU,CAAE,CAACsD,GAAkBe,GAAeA,EAAYC,SAAS3N,GAC5G0N,EACAA,EACI,IAAIA,EAAa1N,GACjB,CAACA,KACfoJ,cAAe,OAEpB,KACC5K,KAAKF,MAAMsP,cAAcjB,EAAiB3M,OAIlDxB,KAAKqP,iBAAmB,KACpB,MAAM,KAAEzM,EAAI,WAAE3B,GAAejB,KAAKF,OAC5B,gBAAEqO,EAAe,QAAEtD,EAAO,wBAAEI,GAA4BjL,KAAKS,MAC7DkD,EAAU3D,KAAKsP,oBAAoBvM,KAAIC,IAAU,CACnDiG,GAAIjG,EAAOE,IACX8K,SAAU,IAAMhL,EAAOiB,KACvBsL,UAAW/N,KAASqJ,EAAQ,OAAgBA,EAAQ,MAAc2E,MAAKrL,GAAOA,IAAQ3C,EAAMyH,SAE1FyF,EAAQ,GACRhG,EAAa,GAenB,OAdImC,EAAQ,OAAiBgB,MAAMC,QAAQjB,EAAQ,QAC/CA,EAAQ,MAAc9H,KAAIkG,IACtB,MAAMjG,EAASW,EAAQ6L,MAAKrL,GAAOA,EAAI8E,KAAOA,IAC1CjG,IACA0F,EAAWqF,KAAK/K,GAChB0L,EAAMX,KAAK,CACP7K,IAAKF,EAAOiG,GACZwG,KAAMzM,EAAOgL,iBAOrB,kBAAoB,EAAAQ,cAAe,CAAEC,aAAc,CACnDvL,IAAK,KACLe,KAAMrB,EAAKS,cAAcC,EAAA,iBAAyB,CAAE9B,MAAO,iBAC5DkN,MAAOA,EAAOC,WAAY3O,KAAKgM,SAAU9I,IAAK,KAAc0L,gBAAiBT,IAAoB,MACpG,kBAAoB,EAAA7E,OAAQ,CAAErI,WAAYA,EAAYyO,UAAW,iBAAkBzN,QAAS,EAAAsH,cAAA,SAAwB,aAAc3G,EAAKS,cAAcC,EAAA,4BAAoCkG,SAAUxJ,KAAK2P,sBAAuBrN,SAAUtC,KAAK4P,sBAAuBlH,WAAYA,EAAYd,OAAQqD,EAAyBxB,gBAAiB7G,EAAKS,cAAcC,EAAA,+BAAwCK,EAAQZ,KAAIC,GAAW,kBAAoB,EAAA8F,aAAc,CAAE+G,YAAa7M,EAAOiG,GAAI/F,IAAKF,EAAOiG,GAAIzH,MAAOwB,SAE5fhD,KAAK4P,sBAAwB,CAACvL,EAAO6J,KACjC,MAAM4B,EAAUzL,EAAME,OAAOuL,QAC7B9P,KAAKwE,UAAU2H,IACX,MAAM4D,EAAiB5D,EAAUtB,QAAQ,MAAgBsB,EAAUtB,QAAQ,MAAgB,GAC3F,MAAO,CACHA,QAASnK,OAAOC,OAAOD,OAAOC,OAAO,GAAIwL,EAAUtB,SAAU,CAAEvC,IAAK5H,OAAOC,OAAO,GAAIwL,EAAUtB,QAAQvC,KAAM,CAAC,MAAewH,EACpH,IAAIC,EAAgB7B,EAAUjF,IAC9B8G,EAAe3F,QAAO5I,GAASA,IAAU0M,EAAUjF,WAElE,KACK6G,EACA9P,KAAKF,MAAMsP,cAAc,KAAclB,EAAUjF,IAGjDjJ,KAAKgM,SAAS,KAAckC,EAAUjF,QAIlDjJ,KAAK2P,sBAAwB/H,IACzB5H,KAAKwE,SAAS,CACVyG,wBAAyBrD,KAIjC5H,KAAKgQ,gBAAkB,KACnB,MAAM,KAAEpN,EAAI,WAAE3B,GAAejB,KAAKF,OAC5B,gBAAEqO,EAAe,cAAEC,EAAa,uBAAEjD,GAA2BnL,KAAKS,MACxE,GAAI0N,IAAoB,KACpB,OAAO,KAEX,MAAMvF,EAAgB5I,KAAKiQ,mBAAmBlN,KAAI8F,GACvC,kBAAoB,EAAAC,aAAc,CAAE5F,IAAK2F,EAAa3F,IAAK1B,MAAOqH,EAAa3F,QAE1F,OAAQ,kBAAoB,EAAAgN,YAAa,KACrC,kBAAoB,EAAA5G,OAAQ,CAAErI,WAAYA,EAAYgB,QAAS,EAAAsH,cAAA,UAAyB4G,mBAAoBvN,EAAKS,cAAcC,EAAA,2BAAmCuB,QAAS7E,KAAKoQ,oBAAqB5G,SAAUxJ,KAAKqQ,qBAAsB/N,SAAUtC,KAAKsQ,qBAAsB1I,OAAQuD,EAAwB1B,gBAAiB7G,EAAKS,cAAcC,EAAA,6BAAqCoF,WAAY0F,GAAiBxF,KAE7Z5I,KAAKoQ,oBAAsB,KACvBpQ,KAAKwE,SAAS,CACV4J,mBAAe/H,EACf8E,wBAAwB,KAGhCnL,KAAKsQ,qBAAuB,CAACjM,EAAO6J,KAChClO,KAAKwE,SAAS,CACV4J,cAAeF,EACf/C,wBAAyBnL,KAAKS,MAAM0K,0BAG5CnL,KAAKqQ,qBAAuBzI,IACxB5H,KAAKwE,SAAS,CACV2G,uBAAwBvD,KAIhC5H,KAAKuQ,kBAAqBC,IACtB,MAAM,mBAAEvI,GAAuBjI,KAAKF,OAC9B,gBAAEqO,EAAe,cAAEC,EAAa,QAAEvD,EAAO,iBAAEnD,GAAqB1H,KAAKS,MAErEgO,EAAe,CACjBxK,KAAMuM,EAAavM,KACnBf,IAAK,GAAG,MAAYsN,EAAatN,OAErC,OAAQ,kBAAoB,EAAAsL,cAAe,CAAEC,aAAcA,EAAcC,MAAO7D,EAAQvC,IAAIkI,EAAatN,KAAMyL,WAAY3O,KAAKgM,SAAU9I,IAAKsN,EAAatN,IAAK0L,gBAAiBT,IAAoB,MAAUC,IAAkBoC,EAAatN,KAC3O,kBAAoBuH,EAAU,CAAEhC,iBAAkBzI,KAAKyI,iBAAkBD,gBAAiBxI,KAAKwI,gBAAiBf,sBAAuBzH,KAAKyH,sBAAuBiB,WAAYmC,EAAQvC,IAAIkI,EAAatN,KAAO2H,EAAQvC,IAAIkI,EAAatN,KAAO,GAAIiF,OAAQiG,EAAezF,YAAajB,EAAkBO,mBAAoBA,MAErUjI,KAAKyH,sBAAwBjG,IACzBxB,KAAKwE,SAAS,CAAEkD,iBAAkBlG,KAEtCxB,KAAKwI,gBAAkBnE,IACnB,MAAM,cAAE+J,EAAa,iBAAE1G,GAAqB1H,KAAKS,MAC5C4D,EAAMnB,KAAqB,UAAdmB,EAAMnB,KAAgD,KAA5BwE,EAAiB/C,QAG7D3E,KAAKwE,UAAU2H,IACX,MAAM4D,EAAiB5D,EAAUtB,QAAQvC,IAAI8F,GAAiBjC,EAAUtB,QAAQvC,IAAI8F,GAAiB,GACrG,IAAK,MAAMjK,KAAO4L,EACd,GAAI5L,IAAQuD,EACR,OAAOhH,OAAOC,OAAOD,OAAOC,OAAO,GAAIwL,EAAUtB,SAAU,CAAEnD,iBAAkB,KAGvF,MAAO,CACHmD,QAASnK,OAAOC,OAAOD,OAAOC,OAAO,GAAIwL,EAAUtB,SAAU,CAAEvC,IAAK5H,OAAOC,OAAOD,OAAOC,OAAO,GAAIwL,EAAUtB,QAAQvC,KAAM,CAAE,CAAC8F,GAAgB,IAAI2B,EAAgBrI,OACnKA,iBAAkB,OAEvB,KACC1H,KAAKF,MAAMsP,cAAc,GAAG,MAAYhB,IAAiB1G,OAGjE1H,KAAKyI,iBAAmB,CAACpE,EAAO6J,KAC5B,MAAM,cAAEE,GAAkBpO,KAAKS,MACzBqP,EAAUzL,EAAME,OAAOuL,QAC7B9P,KAAKwE,UAAU2H,IACX,MAAM4D,EAAiB5D,EAAUtB,QAAQvC,IAAI8F,GAAiBjC,EAAUtB,QAAQvC,IAAI8F,GAAiB,GACrG,MAAO,CACHvD,QAASnK,OAAOC,OAAOD,OAAOC,OAAO,GAAIwL,EAAUtB,SAAU,CAAEvC,IAAK5H,OAAOC,OAAOD,OAAOC,OAAO,GAAIwL,EAAUtB,QAAQvC,KAAM,CAAE,CAAC8F,GAAgB0B,EACjI,IAAIC,EAAgB7B,GACpB6B,EAAe3F,QAAO5I,GAASA,IAAU0M,YAE5D,KACK4B,EACA9P,KAAKF,MAAMsP,cAAc,GAAG,MAAYhB,IAAiBF,GAGzDlO,KAAKgM,SAASoC,EAAeF,OAKzClO,KAAKyQ,oBAAsB,KACvB,MAAM,KAAE7N,GAAS5C,KAAKF,MACtB,OAAQ,kBAAoB,EAAAoQ,YAAa,KACrC,kBAAoB,EAAAlO,OAAQ,CAAEE,QAASlC,KAAK0Q,8BAA+BzO,QAAS,EAAAoH,cAAA,MAAsBzG,EAAKS,cAAcC,EAAA,mCAGrItD,KAAK2Q,gBAAkB,KACnB,MAAM,WAAE1P,EAAU,iBAAE2P,GAAqB5Q,KAAKF,MAC9C,OAAQ,kBAAoB,EAAAoQ,YAAa,CAAEW,OAAQ,CAC3CC,QAAS,eAEb,kBAAoB,EAAA9O,OAAQ,CAAEf,WAAYA,GAAc2P,EAAkB1O,QAASlC,KAAK+Q,oBAAqB9O,QAAS,EAAAoH,cAAA,OAClH,kBAAoB,KAAY,SAE5CrJ,KAAK0Q,8BAAgC,KACjC1Q,KAAKF,MAAMkR,6BAEfhR,KAAK+Q,oBAAsB,KACvB/Q,KAAKF,MAAMmR,mBAGnBpJ,oBACI7H,KAAKwE,SAAS,CACV2J,gBAAiBnO,KAAKqL,uBAG9BtG,mBAAmBC,GACf,MAAM,gBAAEsG,EAAe,QAAEtB,EAAO,UAAEkH,EAAS,MAAE7L,EAAK,UAAE+C,GAAcpI,KAAKF,OACnEwL,IAAoBtG,EAAUsG,iBAC9BtB,IAAYhF,EAAUgF,SACrB3E,KAAU,OAAQA,EAAOL,EAAUK,QACnC6L,KAAc,OAAQA,EAAWlM,EAAUkM,YAC3C9I,KAAc,OAAQA,EAAWpD,EAAUoD,aAC5CpI,KAAKwE,UAAS,KACV,MAAMqG,EAAU7K,KAAKyL,iBAAiBpG,GACtC,OAAOiG,IAAoBtG,EAAUsG,iBAAmBtG,EAAUgF,UAAYA,EACxE,CACEY,cAAe,GACfuD,gBAAiBnO,KAAKqL,qBACtB8F,eAAgB,GAChB/C,cAAe,GACf1G,iBAAkB,GAClBmD,QAAAA,GAEF,CACEA,QAAAA,MAMpBuG,oBACI,MAAM,gBAAE9F,EAAe,WAAErK,GAAejB,KAAKF,OACvC,gBAAEqO,EAAe,qBAAEnD,GAAyBhL,KAAKS,MACvD,IAAK6K,EACD,OAAO,KAEX,MAAM1C,EAAgB5I,KAAK8N,2BACrBI,EAAYtF,EAAc4G,MAAMxM,GAAWA,EAAOxB,QAAU2M,IAClE,OAAQ,kBAAoB,EAAA+B,YAAa,KACrC,kBAAoB,EAAA5G,OAAQ,CAAEL,GAAI,kBAAmBhI,WAAYA,EAAY2G,OAAQoD,EAAsB1I,SAAUtC,KAAKiO,uBAAwBzE,SAAUxJ,KAAKqO,uBAAwB3F,WAAYwF,EAAWmD,WAAY,kBAAoB,KAAY,MAAOpP,QAAS,EAAAsH,cAAA,QAAwBX,EAAc7F,KAAIC,GAAW,kBAAoB,EAAA8F,aAAc,CAAE5F,IAAKF,EAAOxB,MAAOA,MAAOwB,QAEvYsM,oBACI,MAAM,UAAE4B,GAAclR,KAAKF,MAC3B,IAAI6D,EAAU,GACd,IAAMuN,IAAaA,EAAUtN,KACzB,OAAOD,EAGX,MAAM2N,EAAaJ,EAAUtN,KAAK2N,MAAK,CAACC,EAAGC,IACnCD,EAAE,MAAkBC,EAAE,OACd,EAERD,EAAE,MAAkBC,EAAE,MACf,EAEJ,IAGLC,EAAQJ,EAAWlH,QAAOuH,GAAqB,IAAdA,EAAIC,QACrCC,EAAeP,EAAWlH,QAAOuH,GAAqB,IAAdA,EAAIC,QAalD,OAZAF,EAAM3O,KAAI+O,IACN,MAAMjO,EAAOyN,EAAW9B,MAAKmC,GAAOA,EAAI,QAAkBG,EAAK,QAC/DD,EAAatO,QAAQM,MAErBgO,EAAa/P,OAAS,IACtB6B,EAAUkO,EAAa9O,KAAI4O,IAChB,CACHzO,IAAKyO,EAAI,MACT1N,KAAM0N,EAAI,WAIfhO,EAEXsM,mBACI,MAAM,UAAE7H,GAAcpI,KAAKF,MAC3B,IAAI8D,EAAO,GACPD,EAAU,GACd,IAAMyE,IAAaA,EAAUxE,KACzB,OAAOD,EAGX,IAAIoO,GAAa,EACjB,IAAK,MAAMlO,KAAQuE,EAAUxE,KACzB,GAAIC,EAAKmO,eAAe,OAAQ,CAC5BD,GAAa,EACb,MAIR,GAAIA,EAAY,CACZ,MAAME,EAAW7J,EAAUxE,KAAKb,KAE/BmP,IACG,IAAI,KAAEhJ,GAASgJ,EACf,OA1dsB,SAAU9F,EAAG+F,GAC/C,IAAIC,EAAI,GACR,IAAK,IAAIC,KAAKjG,EAAO1L,OAAO4R,UAAUN,eAAeO,KAAKnG,EAAGiG,IAAMF,EAAE3G,QAAQ6G,GAAK,IAC9ED,EAAEC,GAAKjG,EAAEiG,IACb,GAAS,MAALjG,GAAqD,mBAAjC1L,OAAO8R,sBACtB,KAAIC,EAAI,EAAb,IAAgBJ,EAAI3R,OAAO8R,sBAAsBpG,GAAIqG,EAAIJ,EAAEvQ,OAAQ2Q,IAC3DN,EAAE3G,QAAQ6G,EAAEI,IAAM,GAAK/R,OAAO4R,UAAUI,qBAAqBH,KAAKnG,EAAGiG,EAAEI,MACvEL,EAAEC,EAAEI,IAAMrG,EAAEiG,EAAEI,KAE1B,OAAOL,EAgdoCO,CAAOT,EAAI,CAAC,YAG/CtO,GAAO,IAAAgP,QAAOX,EAAU,YAGxBrO,GAAO,IAAAiP,MAAKzK,EAAUxE,MAW1B,OATIA,EAAK9B,OAAS,IACd6B,EAAUC,EAAKb,KAAIc,IACf,MAAMX,EAAM6O,EAAalO,EAAKX,IAAMW,EACpC,MAAO,CACHX,IAAAA,EACAe,KAAMf,OAIXS,EAEX6B,SACI,MAAM,gBAAE8F,EAAe,UAAEwH,EAAS,WAAEC,EAAU,eAAEC,EAAc,qBAAEC,EAAoB,WAAEC,EAAU,WAAEC,EAAU,MAAEC,GAAWpT,KAAKF,MACxH6D,EAAU2H,GAAoCtL,KAAKgP,4BAEzD,OAAQ,kBAAoB,MAAO,CAAEoE,MAAOA,GAAgB3M,EAAOI,kBAC/D,kBAAoB,EAAAwM,QAAS,CAAEpK,GAAI,kBAAmBqK,gBAAiBtT,KAAKgM,SAAUuH,gCAAiC,MACnH,kBAAoB,EAAAC,eAAgB,KAChCR,GAAkB,kBAAoB,EAAA9C,YAAa,CAAEjO,QAAS,eAAiBjC,KAAKuM,iBACpF4G,GAAe,kBAAoB,EAAAM,mBAAoB,CAAEC,WAAY,KAAMrC,WAAY,kBAAoB,KAAY,OACnH,kBAAoB,EAAAsC,aAAc,CAAE1R,QAAS,gBACzCjC,KAAKoR,oBACLpR,KAAKgQ,kBACLhQ,KAAKiQ,mBAAmBlN,KAAIC,GAAUhD,KAAKuQ,kBAAkBvN,KAC7DhD,KAAKqP,mBACL1L,GACIA,EACKyG,QAAOpH,GAAUA,EAAOE,MAAQ,MAAUF,EAAOE,MAAQ,OACzDH,KAAIC,GAAUhD,KAAKsO,iBAAiBtL,QACpD4Q,QAAQV,IAAeU,QAAQX,KAA2B,kBAAoB,EAAAU,aAAc,KACzFC,QAAQV,IAAelT,KAAK2Q,kBAC5BiD,QAAQX,IAAyBjT,KAAKyQ,uBAC1CqC,GAAa,kBAAoB,EAAAa,aAAc,KAAMb,GACrD,kBAAoB,EAAA5C,YAAa,CAAE2D,UAAW,CAAE/C,QAAS,cAAgB7O,QAAS,cAAgB8Q,OAGtH,MAAMe,GAAc,EAAA5N,EAAA,IAAWyE,I,uMClgBxB,MAAMlE,EAAS,CAClBsN,MAAO,CACHC,aAAcpN,EAAA,QAElBqN,KAAM,CACF/M,WAAYgN,EAAA,QAEhBC,MAAO,CACHC,MAAO,CACHzN,YAAa0N,EAAA,QAEjBC,GAAI,CACApN,WAAYgN,EAAA,SAGpB3U,MAAO,CACHyU,aAAcpN,EAAA,S,yDCPtB,MAAM2N,EAAa,OACZ,MAAMC,UAAyB,cAClC3U,YAAY4U,EAAYC,GACpB3U,MAAM0U,EAAYC,GAClB1U,KAAKK,aAAe,CAChBsU,oBAAoB,GAExB3U,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cACpCL,KAAK4U,UAAY,KACb,MAAM,OAAEC,EAAM,kBAAEC,GAAsB9U,KAAKF,MACvC+U,GAAgC,IAAtBC,IACV,IAAaD,EAAOjR,KAAM5D,KAAK+U,cAAe,YAC9C/U,KAAKgV,gBAGbhV,KAAK+U,YAAc,KACf,MAAM,QAAEpL,EAAO,QAAEK,EAAO,KAAEpH,EAAI,gBAAEqS,EAAe,WAAE5K,EAAU,UAAER,GAAc7J,KAAKF,MAShF,MAAO,GAPU8C,EAAKS,cAAcC,EAAA,iBAAyB,CACzDqG,QAAAA,EACAuL,SAAUD,EACVjL,SAAyC,IAAhCA,EAAQwB,QAAQ,KAAoB,MAAQxB,EACrDK,WAAAA,EACAR,UAAAA,WAIR7J,KAAKgV,YAAc,KACf,MAAM,YAAEG,GAAgBnV,KAAKF,MAC7BE,KAAKwE,SAAS9D,OAAOC,OAAO,GAAIX,KAAKK,eAAe,KAC3C8U,GACDnV,KAAKF,MAAMsV,SAAQ,OAI/BpV,KAAKqV,kBAAoB,KACrB,MAAM,aAAEC,EAAY,YAAEhQ,EAAW,gBAAE2P,GAAoBjV,KAAKF,MAC5DwV,EAAaL,EAAiBV,EAAYjP,GAC1CtF,KAAKwE,SAAS,CACVmQ,oBAAoB,IACrB,KACC3U,KAAK4U,gBAIjB7P,mBAAmBC,GACf,MAAM,OAAE6P,EAAM,YAAEM,GAAgBnV,KAAKF,OAC/B,mBAAE6U,GAAuB3U,KAAKS,MAChCuE,EAAU6P,SAAWA,GAAUF,GAC/B3U,KAAK4U,YAELO,GACAnV,KAAKF,MAAMyV,QAAQJ,GAG3B3P,SACI,MAAM,KAAE5C,EAAI,kBAAEkS,GAAsB9U,KAAKF,MACzC,OAAQ,kBAAoB,EAAAkC,OAAQtB,OAAOC,OAAO,IAAI,QAAa6U,EAAA,sBAA4B,CAAEvU,WAAkC,IAAtB6T,EAA0C5R,IAAK,UAAWhB,QAASlC,KAAKqV,kBAAmBpT,QAAS,EAAAoH,cAAA,UAA0BzG,EAAKS,cAAcC,EAAA,oBAGtQ,MAAMyC,GAAkB,SAAsB,CAACtF,EAAOX,KAClD,MAAM,QAAEkK,EAAO,WAAEyL,EAAU,MAAEC,EAAK,MAAErQ,EAAK,gBAAE4P,EAAe,WAAE5K,EAAU,UAAEsL,GAAc7V,EACtF,IAAI6J,EAAUtE,EAAMuE,SAChBC,EAAYxE,EAAMyE,WACtB,MA0CMxE,EA1CiB,MACnB,MAAMsQ,EAAWlV,OAAOC,OAAOD,OAAOC,OAAO,GAAIkV,KAAKC,MAAMD,KAAKE,UAAU1Q,KAAU,CAAE+E,OAAQ1J,OAAOC,OAAO,CAAEqV,WAAO3P,EAAW4P,YAAQ5P,EAAWgE,WAAYA,QAA0BhE,KAAgBwD,GAAaF,IAAY,CAAEY,iBAAgC,aAAdoL,GAA4B,GAAK,IAAOjK,UAAW,GAAIsK,MAAO,EAAGE,cAAU7P,EAAW8P,iBAAa9P,EAAWyM,eAAWzM,EAAW+P,WAAO/P,IAElY,GAAIhB,EAAMqG,UACN,IAAK,MAAMxI,KAAOxC,OAAOiL,KAAKtG,EAAMqG,gBACArF,IAA5BuP,EAASlK,UAAUxI,KACnB0S,EAASlK,UAAUxI,GAAO,IAE9B0S,EAASlK,UAAUxI,GAAK6K,KAAK1I,EAAMqG,UAAUxI,IAGrD,GAAIuS,EAEIzL,IAAY,YAC6B3D,IAArCuP,EAASlK,UAAU,QACnBkK,EAASlK,UAAU,MAAgB,IAEvCkK,EAASlK,UAAU,MAAcqC,KAAK1I,EAAMkG,SAAS,aAIzD,GAAIvB,IAAY,KACZ,IAAK,MAAMnG,KAAQ6R,EAAO,CAEtB,MAAMxM,EAAqB,wBAAdrF,EAAKqF,KAAiC,KAAerF,EAAKqF,UACtC7C,IAA7BuP,EAASlK,UAAUxC,KACnB0M,EAASlK,UAAUxC,GAAQ,IAE/B0M,EAASlK,UAAUxC,GAAM6E,KAAKlK,EAAKoF,SAIvC,IAAK,MAAMpF,KAAQ6R,OACqBrP,IAAhCuP,EAASlK,UAAU1B,KACnB4L,EAASlK,UAAU1B,GAAW,IAElC4L,EAASlK,UAAU1B,GAAS+D,KAAKlK,EAAKoF,IAIlD,OAAO,QAAS2M,IAEAS,GACdxB,EAAS,kBAA6BpU,EAAOwU,EAAiBV,EAAYjP,GAC1E6P,EAAc,uBAAkC1U,EAAOwU,EAAiBV,EAAYjP,GACpFwP,EAAoB,6BAAwCrU,EAAOwU,EAAiBV,EAAYjP,GACtG,IAAMuE,IAAaF,EAAU,CACzB,MAAM2M,EAA2B,aAAdX,EACbY,GAAQ,UACVD,GACAC,EAAMC,SAASD,EAAME,WAAa,GAEtC9M,GAAU,EAAA+M,EAAA,GAAOJ,GAAa,EAAAK,EAAA,GAAWJ,GAASA,EAAO,cACzD1M,GAAY,EAAA6M,EAAA,IAAO,EAAAE,EAAA,GAAaL,GAAQ,cAE5C,MAAO,CACH5M,QAAAA,EACArE,YAAAA,EACAuP,OAAAA,EACAM,YAAAA,EACAL,kBAAAA,EACAjL,UAAAA,MAGF7D,EAAqB,CACvBsP,aAAc,SAEZuB,GAAsB,IAAA1Q,SAAQJ,EAAiBC,EAAzB,CAA6CwO,GACnEsC,GAAe,EAAA5Q,EAAA,IAAW2Q,GCnI1BE,EAAoB,CACtB,CAAEC,MAAO1T,EAAA,mBAA2B9B,MAAO,SAC3C,CAAEwV,MAAO1T,EAAA,mBAA2B9B,MAAO,YAEzCyV,EAAmB,CACrB,CAAED,MAAO1T,EAAA,kBAA0B9B,MAAO,WAC1C,CAAEwV,MAAO1T,EAAA,kBAA0B9B,MAAO,aAEvC,MAAM0V,UAAwB,cACjCrX,YAAY4U,EAAYC,GACpB3U,MAAM0U,EAAYC,GAClB1U,KAAKK,aAAe,CAChB8W,WAAO9Q,EACPsP,UAAW,UACXtL,WAAYrK,KAAKF,MAAMuK,YAAc,WAEzCrK,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cAEpCL,KAAKgV,YAAc,KACfhV,KAAKwE,SAAS9D,OAAOC,OAAO,GAAIX,KAAKK,eAAe,KAChDL,KAAKF,MAAMsV,SAAQ,OAG3BpV,KAAKoX,YAAeD,IAChBnX,KAAKwE,SAAS,CAAE2S,MAAAA,KAEpBnX,KAAKqX,kBAAoB,CAACC,EAAGjT,KACzBrE,KAAKwE,SAAS,CAAEmR,UAAWtR,EAAMkT,cAAc/V,SAEnDxB,KAAKwX,uBAAyB,CAACF,EAAGjT,KAC9BrE,KAAKwE,SAAS,CAAE6F,WAAYhG,EAAMkT,cAAc/V,SAEpDxB,KAAKqX,kBAAoBrX,KAAKqX,kBAAkBvS,KAAK9E,MACrDA,KAAKwX,uBAAyBxX,KAAKwX,uBAAuB1S,KAAK9E,MAEnEwF,SACI,MAAM,QAAEwE,EAAO,KAAEpH,EAAI,WAAE6S,EAAU,MAAEC,EAAK,MAAErQ,EAAK,gBAAE4P,EAAe,kBAAEwC,GAAoB,EAAI,cAAEC,GAAgB,GAAU1X,KAAKF,OACrH,MAAEqX,EAAK,WAAE9M,EAAU,UAAEsL,GAAc3V,KAAKS,MAC9C,IAAIkX,EAAc,IAAIjC,GAClB1V,KAAKF,MAAM8H,SAEP+P,EADAjC,GAA0B,IAAjBA,EAAM5T,QAAgB2T,EACjB,CACV,CACIuB,MAAOpU,EAAKS,cAAcC,EAAA,gBAKpB,IAAAsU,SAAQD,EAAa,CAAC,SAAU,CAAC,SAGvD,IAAIE,EAAgBjV,EAAKS,cAAcC,EAAA,iBAAyB,CAAE0G,QAAAA,KAC9B,IAAhCA,EAAQwB,QAAQ,OAChBqM,EAAgBjV,EAAKS,cAAcC,EAAA,iBAAyB,CAAE0G,QAAS,SAE3E,MAAM8N,EAAY,IAAIC,KAChBC,GAAY,IAAID,MAAOvB,SAASsB,EAAUrB,WAAa,GACvDwB,GAAe,EAAAvB,EAAA,GAAOoB,EAAW,aACjCI,GAAgB,EAAAxB,EAAA,GAAOsB,EAAY,EAAG,aAC5C,OAAQ,kBAAoB,EAAAG,MAAO,CAAE/E,MAAO3M,EAAO0N,MAAOvM,OAAQ5H,KAAKF,MAAM8H,OAAQwN,QAASpV,KAAKgV,YAAazV,MAAOqD,EAAKS,cAAcC,EAAA,eAAuBrB,QAAS,QAASmW,QAAS,CACpL,kBAAoBtB,EAAc,CAAE9M,QAASA,EAASyL,WAAYA,EAAYC,MAAOA,EAAOxS,IAAK,UAAWyS,UAAW+B,EAAgB/B,OAAYtP,EAAW+O,QAASpV,KAAKgV,YAAaO,QAASvV,KAAKoX,YAAa/R,MAAOA,EAAO4P,gBAAiBA,EAAiB5K,WAAYA,IAChR,kBAAoB,EAAArI,OAAQtB,OAAOC,OAAO,IAAI,QAAa6U,EAAA,sBAA4B,CAAEtS,IAAK,SAAUhB,QAASlC,KAAKgV,YAAa/S,QAAS,EAAAoH,cAAA,OAAuBzG,EAAKS,cAAcC,EAAA,aAE1L6T,GAAS,kBAAoB,EAAAkB,MAAO,CAAEpW,QAAS,SAAUmR,MAAO3M,EAAOsN,MAAOxU,MAAOqD,EAAKS,cAAcC,EAAA,iBACxG,kBAAoB,MAAO,CAAE8P,MAAO3M,EAAOlH,OACvC,kBAAoB,OAAQ,KAAMqD,EAAKS,cAAcC,EAAA,gBAAwB,CAAE0G,QAAAA,MACnF,kBAAoB,EAAAsO,KAAM,CAAElF,MAAO3M,EAAOwN,MACtCwD,GAAsB,kBAAoB,EAAAc,UAAW,CAAEvB,MAAOpU,EAAKS,cAAcC,EAAA,uBAA+BkV,QAAS,kBACrH,kBAAoB,aAAgB,KAAMzB,EAAkBhU,KAAI,CAACC,EAAQyV,IAAW,kBAAoB,EAAAC,MAAO,CAAExV,IAAKuV,EAAOxP,GAAI,cAAcwP,IAASE,aAA0BtS,IAAjBrD,EAAOxB,MAAqBwV,MAAOpU,EAAKS,cAAcL,EAAOgU,MAAO,CAAExV,MAAOwB,EAAOxB,QAAUA,MAAOwB,EAAOxB,MAAOsO,QAASzF,IAAerH,EAAOxB,MAAOyC,KAAM,aAAcxC,SAAUzB,KAAKwX,uBAAwB,aAAc5U,EAAKS,cAAcL,EAAOgU,MAAO,CAAExV,MAAOwB,EAAOxB,cACxbkW,GAAkB,kBAAoB,EAAAa,UAAW,CAAEvB,MAAOpU,EAAKS,cAAcC,EAAA,wBAAgCkV,QAAS,aAClH,kBAAoB,aAAgB,KAAMvB,EAAiBlU,KAAI,CAACC,EAAQyV,IAAW,kBAAoB,EAAAC,MAAO,CAAExV,IAAKuV,EAAOxP,GAAI,aAAawP,IAASE,aAA0BtS,IAAjBrD,EAAOxB,MAAqBwV,MAAOpU,EAAKS,cAAcL,EAAOgU,MAAO,CAC3N4B,KAAuB,aAAjB5V,EAAOxB,MAAuB0W,EAAgBD,EACpDzW,MAAOwB,EAAOxB,QACdA,MAAOwB,EAAOxB,MAAOsO,QAAS6F,IAAc3S,EAAOxB,MAAOyC,KAAM,YAAaxC,SAAUzB,KAAKqX,kBAAmB,aAAczU,EAAKS,cAAcL,EAAOgU,MAAO,CAC9J4B,KAAuB,aAAjB5V,EAAOxB,MAAuB0W,EAAgBD,EACpDzW,MAAOwB,EAAOxB,cAE1B,kBAAoB,EAAA+W,UAAW,CAAEvB,MAAOa,EAAeW,QAAS,mBAC5D,kBAAoB,KAAM,KAAMb,EAAY5U,KAAI,CAAC8V,EAAWJ,IACjD,kBAAoB,KAAM,CAAEvV,IAAKuV,GAASI,EAAU7B,cAInF,MAAM,GAAkB,SAAsB,KACnC,MAEL,EAAqB,CACvB1B,aAAc,SAEZwD,GAAqB,IAAA3S,SAAQ,EAAiB,EAAzB,CAA6C+Q,GAClE6B,GAAc,EAAA7S,EAAA,IAAW4S,I,gJCtGxB,MAAMrS,EAAS,CAClBuS,gBAAiB,CACbC,QAAS,OACTC,WAAY,UAEhBC,qBAAsB,CAClBnF,aAAc,EACdrN,Y,SAAa,OACbyS,WAAY,WCHpB,MAAMC,UAAuB,cACzBxZ,YAAYC,GACRC,MAAMD,GACNE,KAAKK,aAAe,CAChBiZ,YAAatZ,KAAKF,MAAMkK,SAAWhK,KAAKF,MAAM6D,QAAQ,GAAGnC,MACzD+X,eAAe,GAEnBvZ,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cACpCL,KAAKwZ,kBAAoB,KACrB,MAAM,mBAAEC,GAAuBzZ,KAAKF,MAC9B4Z,GAAiB,QAAWhQ,SAASxI,QACrCyY,EAAcD,GAAkBA,EAAenO,SAAW7K,OAAOiL,KAAK+N,EAAenO,UAAY,GACvG,IAAIvB,EAAUyP,EAAmBC,EAAenO,UAChD,IAAK,MAAMrI,KAAOyW,EAEd,IAAe,IADDzW,EAAIsI,QAAQ,MACR,CACdxB,EAAU0P,EAAenO,SAAS,MAClC,MAGR,OAAOvB,GAEXhK,KAAK4Z,gBAAkB,KACnB,MAAM,UAAE1I,GAAclR,KAAKF,MAC3B,IAAMoR,IAAaA,EAAUtN,KACzB,MAAO,GAGX,MAAM0N,EAAaJ,EAAUtN,KAAK2N,MAAK,CAACC,EAAGC,IACnCD,EAAE,MAAkBC,EAAE,OACd,EAERD,EAAE,MAAkBC,EAAE,MACf,EAEJ,IAGLC,EAAQJ,EAAWlH,QAAOuH,GAAqB,IAAdA,EAAIC,QACrCC,EAAeP,EAAWlH,QAAOuH,GAAqB,IAAdA,EAAIC,QAKlD,OAJAF,EAAM3O,KAAI+O,IACN,MAAMjO,EAAOyN,EAAW9B,MAAKmC,GAAOA,EAAI,QAAkBG,EAAK,QAC/DD,EAAatO,QAAQM,MAElBgO,EAAa9O,KAAI4O,IAAO,CAC3B1I,GAAI0I,EAAI,MACR3D,SAAU,IAAM2D,EAAI,WAG5B3R,KAAK6Z,mBAAqB,KACtB7Z,KAAKwE,SAAS,CACVsV,iBAAazT,KAGrBrG,KAAK+Z,sBAAwB,CAAC1V,EAAO6J,KACjC,MAAM,WAAE8L,GAAeha,KAAKF,MAC5BE,KAAKwE,SAAS,CACVsV,YAAa5L,EAAUjF,GACvBsQ,eAAe,IAEfS,GACAA,EAAW,GAAG,OAAe9L,EAAUjF,OAG/CjJ,KAAKia,oBAAsBV,IACvBvZ,KAAKwE,SAAS,CAAE+U,cAAAA,KAEpBvZ,KAAK6Z,mBAAqB7Z,KAAK6Z,mBAAmB/U,KAAK9E,MACvDA,KAAK+Z,sBAAwB/Z,KAAK+Z,sBAAsBjV,KAAK9E,MAC7DA,KAAKia,oBAAsBja,KAAKia,oBAAoBnV,KAAK9E,MAE7D6H,oBACI7H,KAAKwE,SAAS,CACVsV,YAAa9Z,KAAKwZ,sBAG1BzU,mBAAmBC,GACf,MAAM,QAAEgF,GAAYhK,KAAKF,MACrBkF,EAAUgF,UAAYA,GACtBhK,KAAKwE,SAAS,CAAEsV,YAAa9Z,KAAKwZ,sBAG1ChU,SACI,MAAM,WAAEvE,GAAa,EAAK,KAAE2B,GAAS5C,KAAKF,OACpC,YAAEga,EAAW,cAAEP,GAAkBvZ,KAAKS,MACtCyZ,EAAela,KAAK4Z,kBACpB1L,EAAYgM,EAAa1K,MAAM3L,GAASA,EAAKoF,KAAO6Q,IAC1D,OAAQ,kBAAoB,MAAO,CAAE1G,MAAO3M,EAAOuS,iBAC/C,kBAAoB,EAAA1P,OAAQ,CAAE,aAAc1G,EAAKS,cAAcC,EAAA,4BAAoCrC,WAAYA,EAAY4D,QAAS7E,KAAK6Z,mBAAoBrQ,SAAUxJ,KAAKia,oBAAqB3X,SAAUtC,KAAK+Z,sBAAuBnS,OAAQ2R,EAAe9P,gBAAiB7G,EAAKS,cAAcC,EAAA,8BAAsCoF,WAAYwF,EAAWjM,QAAS,EAAAsH,cAAA,WAA2B2Q,EAAanX,KAAIc,GAAS,kBAAoB,EAAAiF,aAAc,CAAE+G,YAAahM,EAAKoF,GAAI/F,IAAKW,EAAKoF,GAAIzH,MAAOqC,SAGxf,MAAMsW,GAAa,EAAAjU,EAAA,IAAWmT,G,cC/E9B,MAAMe,UAAuB,cACzBva,YAAYC,GACRC,MAAMD,GACNE,KAAKK,aAAe,CAChBkZ,eAAe,GAEnBvZ,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cACpCL,KAAK4Z,gBAAkB,KACnB,MAAM,UAAExR,GAAcpI,KAAKF,MAC3B,IAAMsI,IAAaA,EAAUxE,KACzB,MAAO,GAGX,IAAImO,GAAa,EACjB,IAAK,MAAMlO,KAAQuE,EAAUxE,KACzB,GAAIC,EAAKmO,eAAe,OAAQ,CAC5BD,GAAa,EACb,MAIR,IAAInO,EAAO,GACX,GAAImO,EAAY,CACZ,MAAME,EAAW7J,EAAUxE,KAAKb,KAE/BmP,IACG,IAAI,KAAEhJ,GAASgJ,EACf,OA7CkB,SAAU9F,EAAG+F,GAC/C,IAAIC,EAAI,GACR,IAAK,IAAIC,KAAKjG,EAAO1L,OAAO4R,UAAUN,eAAeO,KAAKnG,EAAGiG,IAAMF,EAAE3G,QAAQ6G,GAAK,IAC9ED,EAAEC,GAAKjG,EAAEiG,IACb,GAAS,MAALjG,GAAqD,mBAAjC1L,OAAO8R,sBACtB,KAAIC,EAAI,EAAb,IAAgBJ,EAAI3R,OAAO8R,sBAAsBpG,GAAIqG,EAAIJ,EAAEvQ,OAAQ2Q,IAC3DN,EAAE3G,QAAQ6G,EAAEI,IAAM,GAAK/R,OAAO4R,UAAUI,qBAAqBH,KAAKnG,EAAGiG,EAAEI,MACvEL,EAAEC,EAAEI,IAAMrG,EAAEiG,EAAEI,KAE1B,OAAOL,EAmCwCO,CAAOT,EAAI,CAAC,YAG/CtO,GAAO,IAAAgP,QAAOX,EAAU,YAGxBrO,GAAO,IAAAiP,MAAKzK,EAAUxE,MAE1B,OAAOA,EAAKb,KAAIc,IACZ,MAAMsE,EAAS4J,EAAalO,EAAKX,IAAMW,EACvC,OAAO,kBAAoB,EAAAiF,aAAc,CAAE5F,IAAKW,EAAKX,IAAK1B,MAAO2G,QAGzEnI,KAAKwZ,kBAAoB,KACrB,MAAME,GAAiB,QAAWhQ,SAASxI,QACrCyY,EAAcD,GAAkBA,EAAenO,SAAW7K,OAAOiL,KAAK+N,EAAenO,UAAY,GACvG,IAAIvB,EACJ,IAAK,MAAM9G,KAAOyW,EAEd,IAAe,IADDzW,EAAIsI,QAAQ,KACR,CACdxB,EAAU9G,EAAImX,MAAM,YACpB,MAGR,OAAOrQ,GAEXhK,KAAK6Z,mBAAqB,KACtB7Z,KAAKwE,SAAS,CACVsV,iBAAazT,KAGrBrG,KAAK+Z,sBAAwB,CAAC1V,EAAO6J,KACjC,MAAM,WAAE8L,GAAeha,KAAKF,MAC5BE,KAAKwE,SAAS,CACVsV,YAAa5L,EACbqL,eAAe,IAEfS,GACAA,EAAW,GAAG,MAAY9L,MAGlClO,KAAKia,oBAAsBV,IACvBvZ,KAAKwE,SAAS,CAAE+U,cAAAA,KAEpBvZ,KAAK6Z,mBAAqB7Z,KAAK6Z,mBAAmB/U,KAAK9E,MACvDA,KAAK+Z,sBAAwB/Z,KAAK+Z,sBAAsBjV,KAAK9E,MAC7DA,KAAKia,oBAAsBja,KAAKia,oBAAoBnV,KAAK9E,MAE7D6H,oBACI7H,KAAKwE,SAAS,CACVsV,YAAa9Z,KAAKwZ,sBAG1BzU,mBAAmBC,GACf,MAAM,QAAEgF,GAAYhK,KAAKF,MACrBkF,EAAUgF,UAAYA,GACtBhK,KAAKwE,SAAS,CAAEsV,YAAa9Z,KAAKwZ,sBAG1ChU,SACI,MAAM,WAAEvE,EAAU,KAAE2B,GAAS5C,KAAKF,OAC5B,YAAEga,EAAW,cAAEP,GAAkBvZ,KAAKS,MAC5C,OAAQ,kBAAoB,MAAO,CAAE2S,MAAO3M,EAAOuS,iBAC/C,kBAAoB,EAAA1P,OAAQ,CAAE,aAAc1G,EAAKS,cAAcC,EAAA,2BAAmCrC,WAAYA,EAAY4D,QAAS7E,KAAK6Z,mBAAoBrQ,SAAUxJ,KAAKia,oBAAqB3X,SAAUtC,KAAK+Z,sBAAuBnS,OAAQ2R,EAAe9P,gBAAiB7G,EAAKS,cAAcC,EAAA,6BAAqCoF,WAAYoR,EAAa7X,QAAS,EAAAsH,cAAA,WAA2BvJ,KAAK4Z,qBAGpZ,MAAMU,GAAa,EAAApU,EAAA,IAAWkU,GClGxBG,EAAoB,CAAC,CAAEvD,MAAO,KAAcxV,MAAO,OACnDgZ,EAAoB,CAAC,CAAExD,MAAO,KAAQxV,MAAO,OAC7CiZ,EAAgB,MAChBrT,EAAgB,MACtB,MAAMsT,UAAoB,cACtB7a,YAAY4U,EAAYC,GACpB3U,MAAM0U,EAAYC,GAClB1U,KAAKK,aAAe,CAChBiZ,YAAatZ,KAAKF,MAAMkK,SAAWhK,KAAKF,MAAM6D,QAAQ,GAAGnC,MACzD+X,eAAe,EACfoB,qBAAqB,EACrBC,qBAAqB,GAEzB5a,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cACpCL,KAAKwZ,kBAAoB,KACrB,MAAM,mBAAEC,GAAuBzZ,KAAKF,OAC9B,YAAEwZ,GAAgBtZ,KAAKS,MACvBiZ,GAAiB,QAAWhQ,SAASxI,QAC3C,IAAMwY,IAAkBA,EAAenO,SACnC,OAAO+N,EAEX,IAAItP,EAAUyP,EAAmBC,EAAenO,UAChD,MAAMoO,EAAcD,GAAkBA,EAAenO,SAAW7K,OAAOiL,KAAK+N,EAAenO,UAAY,GACvG,IAAK,MAAMrI,KAAOyW,EAAa,CAC3B,IAAIlB,EAAQvV,EAAIsI,QAAQ,KACxB,IAAe,IAAXiN,EAAc,CACdzO,EAAU,KACVhK,KAAKwE,SAAS,CACVoW,qBAAqB,IAEzB,MAGJ,GADAnC,EAAQvV,EAAIsI,QAAQ,OACL,IAAXiN,EAAc,CACdzO,EAAU,KACVhK,KAAKwE,SAAS,CACVmW,qBAAqB,IAEzB,OAGR,MAAmB,SAAZ3Q,EAAqBA,EAAUsP,GAE1CtZ,KAAK6a,WAAa,KACd,MAAM,WAAE5Z,GAAejB,KAAKF,OACtB,YAAEga,EAAW,cAAEP,GAAkBvZ,KAAKS,MACtCmI,EAAgB5I,KAAK8a,oBACrB5M,EAAYtF,EAAc4G,MAAMxM,GAAWA,EAAOxB,QAAUsY,IAClE,OAAQ,kBAAoB,EAAAxQ,OAAQ,CAAEL,GAAI,gBAAiBhI,WAAYA,EAAY2G,OAAQ2R,EAAejX,SAAUtC,KAAK+Z,sBAAuBvQ,SAAUxJ,KAAKia,oBAAqBvR,WAAYwF,EAAWjM,QAAS,EAAAsH,cAAA,QAAwBX,EAAc7F,KAAIC,GAAW,kBAAoB,EAAA8F,aAAc,CAAE5F,IAAKF,EAAOxB,MAAOA,MAAOwB,QAE3UhD,KAAK8a,kBAAoB,KACrB,MAAM,QAAEnX,EAAO,UAAEuN,EAAS,UAAE9I,EAAS,KAAExF,GAAS5C,KAAKF,MAC/Cib,EAAa,IAAIpX,GAOvB,OANIuN,GAAaA,EAAUtN,MAAQsN,EAAUtN,KAAK9B,OAAS,GACvDiZ,EAAWhN,QAAQwM,GAEnBnS,GAAaA,EAAUxE,MAAQwE,EAAUxE,KAAK9B,OAAS,GACvDiZ,EAAWhN,QAAQyM,GAEhBO,EAAWhY,KAAIC,IAAU,CAC5BgL,SAAU,IAAMpL,EAAKS,cAAcC,EAAA,yBAAiC,CAAE9B,MAAOwB,EAAOgU,MAAO/H,MAAO,IAClGzN,MAAOwB,EAAOxB,WAGtBxB,KAAK+Z,sBAAwB,CAAC1V,EAAO6J,KACjC,MAAM,WAAE8L,GAAeha,KAAKF,MACxBoO,EAAU1M,QAAU,MAAgB0M,EAAU1M,QAAU,KACxDxB,KAAKwE,SAAS,CACVsV,YAAa5L,EAAU1M,MACvB+X,eAAe,EACfoB,oBAAqBzM,EAAU1M,QAAU,KACzCoZ,oBAAqB1M,EAAU1M,QAAU,OAI7CxB,KAAKwE,SAAS,CACVsV,YAAa5L,EAAU1M,MACvB+X,eAAe,EACfoB,qBAAqB,EACrBC,qBAAqB,IACtB,KACKZ,GACAA,EAAW9L,EAAU1M,WAKrCxB,KAAKia,oBAAsBV,IACvBvZ,KAAKwE,SAAS,CACV+U,cAAAA,KAGRvZ,KAAK+Z,sBAAwB/Z,KAAK+Z,sBAAsBjV,KAAK9E,MAC7DA,KAAKia,oBAAsBja,KAAKia,oBAAoBnV,KAAK9E,MAE7D6H,oBACI,MAAM,SAAEmT,EAAQ,SAAElT,EAAQ,eAAEmT,EAAc,qBAAEC,EAAoB,mBAAEC,EAAkB,SAAEC,EAAQ,SAAEC,EAAQ,eAAEtT,EAAc,qBAAEC,EAAoB,mBAAEC,GAAwBjI,KAAKF,MAC7KE,KAAKwE,SAAS,CACVsV,YAAa9Z,KAAKwZ,sBACnB,KACK4B,GAAqC,IAAzBF,GACZF,EAASG,EAAoBV,EAAeQ,GAE5CI,GAAqC,IAAzBrT,GACZF,EAASG,EAAoBb,EAAeW,MAIxDhD,mBAAmBC,GACf,MAAM,SAAEgW,EAAQ,SAAElT,EAAQ,QAAEkC,EAAO,eAAEiR,EAAc,qBAAEC,EAAoB,mBAAEC,EAAkB,YAAEhF,EAAW,SAAEiF,EAAQ,SAAEC,EAAQ,eAAEtT,EAAc,qBAAEC,EAAoB,mBAAEC,GAAwBjI,KAAKF,MACnM,GAAIkF,EAAUgF,UAAYA,GAAWhF,EAAUmR,cAAgBA,EAAa,CACxE,IAAIxS,EACAqB,EAAUmR,cAAgBA,IAC1BxS,EAAU,CACNgX,qBAAqB,EACrBC,qBAAqB,IAG7B5a,KAAKwE,SAAS9D,OAAOC,OAAO,CAAEmZ,YAAa9Z,KAAKwZ,qBAAwB7V,GAAoB,KAAM,KAC1FyX,GAAqC,IAAzBF,GACZF,EAASG,EAAoBV,EAAeQ,GAE5CI,GAAqC,IAAzBrT,GACZF,EAASG,EAAoBb,EAAeW,OAK5DvC,SACI,MAAM,mBAAEiU,EAAkB,QAAEzP,EAAO,WAAE/I,GAAa,EAAK,WAAE+Y,EAAU,UAAE9I,EAAS,KAAEtO,EAAI,UAAEwF,GAAcpI,KAAKF,OACnG,oBAAE6a,EAAmB,oBAAEC,GAAwB5a,KAAKS,MAC1D,OAAQ,kBAAoB,MAAO,CAAE2S,MAAO3M,EAAOuS,iBAC/C,kBAAoB,EAAAsC,MAAO,CAAEC,aAAc,KAAMC,KAAM,KAAMpI,MAAO3M,EAAO0S,sBAAwBvW,EAAKS,cAAcC,EAAA,iBACtHtD,KAAK6a,aACLjH,QAAQ+G,IAAyB,kBAAoBR,EAAY,CAAEV,mBAAoBA,EAAoBzP,QAASA,EAAS/I,WAAYA,EAAY+Y,WAAYA,EAAYrW,QAAS4W,EAAmBrJ,UAAWA,IACpN0C,QAAQgH,IAAyB,kBAAoBN,EAAY,CAAEtQ,QAASA,EAAS/I,WAAYA,EAAY+Y,WAAYA,EAAYrW,QAAS6W,EAAmBpS,UAAWA,MAGxL,MAAMrC,GAAkB,SAAsB,CAACtF,GAASkJ,QAAAA,EAASE,UAAAA,EAAWsR,mBAAAA,EAAoBlT,mBAAAA,MAC5F,MAAMkC,EAAWR,GAAWE,EACtB,CACEC,WAAYD,EACZD,SAAUD,GAEZ,CACES,OAAQ,CACJC,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,IAIzBxC,GAAiB,QAASrH,OAAOC,OAAOD,OAAOC,OAAO,GAAIwJ,GAAW,CAAEsR,UAAU,KACjFrT,EAAY,eAAuB3H,EAAOwH,EAAoBb,EAAeW,GAC7EC,EAAuB,0BAAkCvH,EAAOwH,EAAoBb,EAAeW,GACnGkT,GAAiB,QAAS,IAKhC,MAAO,CACHA,eAAAA,EACA/J,UAJc,eAAuBzQ,EAAO0a,EAAoBV,EAAeQ,GAK/EC,qBAJyB,0BAAkCza,EAAO0a,EAAoBV,EAAeQ,GAKrGlT,eAAAA,EACAK,UAAAA,EACAJ,qBAAAA,MAGFhC,EAAqB,CACvBgV,SAAU,QACVlT,SAAU,SAER4T,GAAiB,IAAAvV,SAAQJ,EAAiBC,EAAzB,CAA6C0U,GAC9DiB,GAAU,EAAAzV,EAAA,IAAWwV,I,2JChL3B,MAAME,UAA2B,cAC7B/b,YAAY4U,EAAYC,GACpB3U,MAAM0U,EAAYC,GAClB1U,KAAKK,aAAe,CAChBwb,gBAAgB,EAChBC,mBAAmB,GAEvB9b,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cACpCL,KAAK+b,eAAiB,KAClB,MAAM,QAAE/R,EAAO,KAAEnG,EAAI,MAAEwB,EAAK,gBAAE4P,GAAoBjV,KAAKF,OACjD,kBAAEgc,GAAsB9b,KAAKS,MACnC,OAAQ,kBAAoB,IAAa,CAAEuJ,QAASA,EAASpC,OAAQkU,EAAmBpG,MAAO,CAAC7R,GAAOuR,QAASpV,KAAKgc,uBAAwB3W,MAAOA,EAAO4P,gBAAiBA,KAEhLjV,KAAKgc,uBAA0BpU,IAC3B5H,KAAKwE,SAAS,CAAEsX,kBAAmBlU,KAEvC5H,KAAKic,sBAAwB,KACzBjc,KAAKwE,SAAS,CAAEsX,mBAAmB,KAEvC9b,KAAKwG,eAAiB,KAClB,MAAM,eAAEqV,GAAmB7b,KAAKS,MAChCT,KAAKwE,SAAS,CACVqX,gBAAiBA,KAGzB7b,KAAKkc,eAAkBL,IACnB7b,KAAKwE,SAAS,CAAEqX,eAAAA,KAEpB7b,KAAKgc,uBAAyBhc,KAAKgc,uBAAuBlX,KAAK9E,MAC/DA,KAAKic,sBAAwBjc,KAAKic,sBAAsBnX,KAAK9E,MAC7DA,KAAKkc,eAAiBlc,KAAKkc,eAAepX,KAAK9E,MAC/CA,KAAKwG,eAAiBxG,KAAKwG,eAAe1B,KAAK9E,MAEnDwF,SACI,MAAM,QAAEwE,EAAO,WAAE/I,EAAU,oBAAEkb,EAAmB,KAAEvZ,EAAI,oBAAEwZ,EAAmB,QAAEC,EAASxY,MAAM,YAAEyY,IAAmBtc,KAAKF,MAEhH4V,EAAQ,CACV,kBAAoB,EAAAzI,aAAc,CAAEsP,UAAW,SAAUtb,WAAYA,EAAYiC,IAAK,gBAAiBhB,QAASlC,KAAKic,uBAAyBrZ,EAAKS,cAAc,4BAKrK,OAHI8Y,GACAzG,EAAMnS,QAAQ,kBAAoB,EAAA0J,aAAc,CAAEsP,UAAW,SAAUrZ,IAAK,oBAAqBjC,WAAYA,GAAc+I,EAAQmF,SAAS,MAAqC,IAAvBmN,EAAYxa,OAAcI,QAAS,IAAMka,EAAoBE,EAAY,GAAID,IAAYzZ,EAAKS,cAAc,+BAElQ,kBAAoB,aAAgB,KACxC,kBAAoB,EAAA8J,SAAU,CAAE7K,SAAUtC,KAAKwG,eAAgB+G,OAAQ,kBAAoB,EAAAiP,YAAa,CAAEhT,SAAUxJ,KAAKkc,iBAAmBtU,OAAQ5H,KAAKS,MAAMob,eAAgBY,SAAS,EAAMpP,SAAU,QAASL,cAAe0I,IAChO1V,KAAK+b,mBAIjB,MAAMhW,GAAkB,SAAsB,CAACtF,EAAOX,KAC3C,MAELkG,EAAqB,CACvBoW,oBAAqB,wCAEnBM,GAAwB,IAAAvW,SAAQJ,EAAiBC,EAAzB,CAA6C4V,GACrEe,GAAU,SAAW,QAAWD,K,wKChE/B,MAAMjW,EAAS,CAClBmW,QAAS,CACL5V,cAAeG,EAAA,SACf0V,YAAa1V,EAAA,SACb2V,aAAc3V,EAAA,SACdF,WAAYE,EAAA,W,wICFb,MAAM,EAAS,CAClB4V,gBAAiB,CACbC,WAAYC,EAAA,UAEhBC,eAAgB,CACZlJ,aAAc7M,EAAA,UAElBgW,QAAS,CACLjW,WAAYgN,EAAA,UAEhBkJ,cAAe,CACXzW,YAAa0W,EAAA,SACbC,UAAWpJ,EAAA,WCVnB,MAAMqJ,UAAoB,cACtB1d,cACIE,SAASuH,WACTtH,KAAKwd,iBAAmB,KACpB,MAAM,UAAEpV,GAAcpI,KAAKF,MACrB2d,EAAS,GACf,GAAIrV,EACA,IAAK,MAAMvE,KAAQuE,EAAUxE,KACzB,IAAK,MAAMO,KAAON,EAAK0E,OAAQ,CAC3B,MAAMU,EAAK,GAAGpF,EAAKX,OAAOiB,IAC1BsZ,EAAO1P,KAAK,kBAAoB,EAAA2P,aAAc,CAAE,kBAAmBzU,EAAI/F,IAAK,GAAG+F,UAC3E,kBAAoB,EAAA0U,gBAAiB,KACjC,kBAAoB,EAAAC,kBAAmB,CAAEC,cAAe,CAChD,kBAAoB,EAAAC,aAAc,CAAE5a,IAAK,GAAG+F,WACxC,kBAAoB,OAAQ,CAAEA,GAAIA,GAAMpF,EAAKX,MACjD,kBAAoB,EAAA4a,aAAc,CAAE5a,IAAK,GAAG+F,WAAc9E,SAKtF,OAAOsZ,GAGfjY,SACI,MAAM,QAAEwE,EAAO,aAAEC,EAAY,KAAErH,GAAS5C,KAAKF,MACvCie,EAAgB/d,KAAKwd,mBAC3B,OAAQ,kBAAoB,aAAgB,KACxC,kBAAoB,MAAO,KACvB,kBAAoB,OAAQ,CAAEpK,MAAO,mBAA0BxQ,EAAKS,cAAcC,EAAA,gBAAwB,CAAE9B,MAAOwI,EAASiF,MAAO,MACvI,kBAAoB,MAAO,CAAEmE,MAAO,kBAChC,kBAAoB,OAAQ,KAAMnJ,IACtC,kBAAoB,EAAA+T,SAAU,CAAE,aAAcpb,EAAKS,cAAcC,EAAA,YAAoB2a,WAAW,GAC5F,kBAAoB,EAAAP,aAAc,CAAE,kBAAmB,YACnD,kBAAoB,EAAAC,gBAAiB,KACjC,kBAAoB,EAAAC,kBAAmB,CAAEC,cAAe,CAChD,kBAAoB,EAAAC,aAAc,CAAE5a,IAAK,mBACrC,kBAAoB,OAAQ,CAAE+F,GAAI,WAAYmK,MAAO,mBAA0BxQ,EAAKS,cAAcC,EAAA,mBACtG,kBAAoB,EAAAwa,aAAc,CAAE5a,IAAK,qBACrC,kBAAoB,OAAQ,CAAE+F,GAAI,WAAYmK,MAAO,mBAA0BxQ,EAAKS,cAAcC,EAAA,0BAEtHya,EAAchb,KAAIc,GAAQA,OAG1C,MAAMqa,GAAU,EAAAhY,EAAA,KAAW,IAAAC,UAAA,CAAUoX,ICvC/BnW,EAAgB,MACtB,MAAM+W,UAAqB,cACvBte,YAAYC,GACRC,MAAMD,GACNE,KAAKoe,iBAAmB,KACpB,MAAM,UAAEhW,GAAcpI,KAAKF,MAC3B,IAAImP,EAAQ,EACZ,GAAI7G,EACA,IAAK,MAAMvE,KAAQuE,EAAUxE,KACrBC,EAAK0E,SACL0G,GAASpL,EAAK0E,OAAOzG,QAIjC,OAAOmN,GAEXjP,KAAKgV,YAAc,KACfhV,KAAKF,MAAMsV,SAAQ,IAEvBpV,KAAKgV,YAAchV,KAAKgV,YAAYlQ,KAAK9E,MAE7C6H,oBACI,MAAM,SAAEC,EAAQ,YAAExC,EAAW,mBAAE2C,GAAuBjI,KAAKF,MAC3DgI,EAASG,EAAoBb,EAAe9B,GAEhDP,mBAAmBC,GACf,MAAM,SAAE8C,EAAQ,YAAExC,EAAW,mBAAE2C,GAAuBjI,KAAKF,MACvDkF,EAAUM,cAAgBA,GAC1BwC,EAASG,EAAoBb,EAAe9B,GAGpD+Y,sBAAsBC,GAClB,MAAM,aAAErU,EAAY,OAAErC,GAAW5H,KAAKF,MACtC,OAAOwe,EAAUrU,eAAiBA,GAAgBqU,EAAU1W,SAAWA,EAE3EpC,SACI,MAAM,QAAEwE,EAAO,OAAEpC,EAAM,MAAEvC,EAAK,UAAE+C,EAAS,KAAExF,GAAS5C,KAAKF,MAEnDmK,EAAe5E,GAASA,EAAM+E,QAAU/E,EAAM+E,OAAOmU,QAAUlZ,EAAM+E,OAAOmU,QAAUve,KAAKF,MAAMmK,aACvG,OAAQ,kBAAoB,EAAAkO,MAAO,CAAEvQ,OAAQA,EAAQwN,QAASpV,KAAKgV,YAAazV,MAAOqD,EAAKS,cAAcC,EAAA,kBAA0B,CAAE9B,MAAOxB,KAAKoe,qBAAuBI,MAAO,OAC5K,kBAAoBN,EAAS,CAAElU,QAASA,EAASC,aAAcA,EAAc7B,UAAWA,MAGpG,MAAMrC,GAAkB,SAAsB,CAACtF,GAASwH,mBAAAA,MACpD,MAAM5C,GAAQ,QAAWqE,SAASxI,QAC5B6I,GAAkB,QAAmB1E,GACrC2E,EAAUD,EAAkB,MAAe,QAAa1E,GACxD4E,EAAeF,IAAoC,QAAgB1E,GAEnEoZ,EAAiBpZ,GAASA,EAAMqG,UAAYrG,EAAMqG,UAAY,GACpE,IAAK,MAAMxI,KAAOxC,OAAOiL,KAAK8S,IACM,IAA5Bvb,EAAIsI,QAAQ,OACZiT,EAAevb,QAAOmD,GAG9B,MAAMuP,EAAW,CACbxL,OAAQ,CACJC,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBmB,UAAWhL,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI8d,GAAkBpZ,GAASA,EAAM+E,QAAU/E,EAAM+E,OAAOmU,SAAW,CAAE,CAAC,GAAG,eAA4BlZ,EAAM+E,OAAOmU,UAAcvU,IAA2C,IAAhCA,EAAQwB,QAAQ,MAAqB,CAAE,CAACxB,GAAUC,KAEpP3E,GAAc,QAASsQ,GAG7B,MAAO,CACH5L,QAAAA,EACAC,aAAAA,EACA5E,MAAAA,EACAC,YAAAA,EACA8C,UAPc,eAAuB3H,EAAOwH,EAAoBb,EAAe9B,GAQ/E0C,qBAPyB,0BAAkCvH,EAAOwH,EAAoBb,EAAe9B,OAUvGU,EAAqB,CACvB8B,SAAU,SAER4W,GAAW,EAAAxY,EAAA,KAAW,IAAAC,SAAQJ,EAAiBC,EAAzB,CAA6CmY,IC7EnE,EAAgB,MACtB,MAAMQ,UAAoB,cACtB9e,YAAYC,GACRC,MAAMD,GACNE,KAAKK,aAAe,CAChBuH,QAAQ,GAEZ5H,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cACpCL,KAAKgV,YAAepN,IAChB5H,KAAKwE,SAAS,CAAEoD,OAAAA,KAEpB5H,KAAK4e,WAAava,IACdrE,KAAKwE,SAAS,CAAEoD,QAAQ,IACxBvD,EAAMwa,kBACC,GAEX7e,KAAKgV,YAAchV,KAAKgV,YAAYlQ,KAAK9E,MACzCA,KAAK4e,WAAa5e,KAAK4e,WAAW9Z,KAAK9E,MAE3C6H,oBACI,MAAM,SAAEC,EAAQ,YAAExC,EAAW,mBAAE2C,GAAuBjI,KAAKF,MAC3DgI,EAASG,EAAoB,EAAe3C,GAEhDP,mBAAmBC,GACf,MAAM,SAAE8C,EAAQ,YAAExC,EAAW,mBAAE2C,GAAuBjI,KAAKF,MACvDkF,EAAUM,cAAgBA,GAC1BwC,EAASG,EAAoB,EAAe3C,GAGpDE,SACI,MAAM,GAAEyD,EAAE,UAAEb,EAAS,mBAAEH,GAAuBjI,KAAKF,OAC7C,OAAE8H,GAAW5H,KAAKS,MACxB,IAAIwO,EAAQ,EACZ,GAAI7G,EACA,IAAK,MAAMvE,KAAQuE,EAAUxE,KACrBC,EAAK0E,SACL0G,GAASpL,EAAK0E,OAAOzG,QAIjC,OAAQ,kBAAoB,MAAO,CAAEsR,MAAO,gBAAsBnK,GAAIA,GAClE2K,QAAQ3E,EAAQ,IAAO,kBAAoB,aAAgB,KACvD,kBAAoB,KAAS,MAC7B,kBAAoB,IAAKvO,OAAOC,OAAO,IAAI,QAAa6U,EAAA,oBAA0B,CAAEsJ,KAAM,KAAM5c,QAASlC,KAAK4e,WAAYxL,MAAO,YAAmBnE,IACxJ,kBAAoByP,EAAU,CAAE9W,OAAQA,EAAQwN,QAASpV,KAAKgV,YAAa/M,mBAAoBA,MAG3G,MAAM,GAAkB,SAAsB,CAACxH,GAASwH,mBAAAA,MACpD,MAAM5C,GAAQ,QAAWqE,SAASxI,QAC5B6I,GAAkB,QAAmB1E,GACrC2E,EAAUD,EAAkB,MAAe,QAAa1E,GACxD4E,EAAeF,IAAoC,QAAgB1E,GAEnEoZ,EAAiBpZ,GAASA,EAAMqG,UAAYrG,EAAMqG,UAAY,GACpE,IAAK,MAAMxI,KAAOxC,OAAOiL,KAAK8S,IACM,IAA5Bvb,EAAIsI,QAAQ,OACZiT,EAAevb,QAAOmD,GAG9B,MAAMuP,EAAW,CACbxL,OAAQ,CACJC,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBmB,UAAWhL,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI8d,GAAkBpZ,GAASA,EAAM+E,QAAU/E,EAAM+E,OAAOmU,SAAW,CAAE,CAAC,GAAG,eAA4BlZ,EAAM+E,OAAOmU,UAAcvU,IAA2C,IAAhCA,EAAQwB,QAAQ,MAAqB,CAAE,CAACxB,GAAUC,KAEpP3E,GAAc,QAASsQ,GAG7B,MAAO,CACH5L,QAAAA,EACAC,aAAAA,EACA5E,MAAAA,EACAC,YAAAA,EACA8C,UAPc,eAAuB3H,EAAOwH,EAAoB,EAAe3C,GAQ/E0C,qBAPyB,0BAAkCvH,EAAOwH,EAAoB,EAAe3C,OAUvG,EAAqB,CACvBwC,SAAU,SAERiX,GAAU,EAAA7Y,EAAA,KAAW,IAAAC,SAAQ,EAAiB,EAAzB,CAA6CwY,I,kHCtFjE,MAAM,EAAS,CAClBK,KAAM,CACF1B,UAAW2B,EAAA,QAEfC,UAAW,CACP5B,UAAWjJ,EAAA,QAEf8K,UAAW,CACP7B,UAAW,EACXtJ,aAAc,EACdoL,UAAW,SAEfC,cAAe,CACXD,UAAW,SAEfE,SAAU,CACNhC,UAAW1W,EAAA,QAEf2Y,OAAQ,CACJzY,gBAAiB0Y,EAAA,OACjB3C,YAAa1V,EAAA,OACb2V,aAAc3V,EAAA,OACdF,WAAYE,EAAA,QAEhBsY,cAAe,CACXxG,QAAS,OACTyG,eAAgB,iBAEpBC,gBAAiB,CACbC,MAAOC,EAAA,SACPC,SAAUC,EAAA,UAEdC,KAAM,CACF/G,QAAS,QAEb3Q,IAAK,CACDpB,WAAYC,EAAA,QAEhB5H,MAAO,CACHyH,cAAeG,EAAA,OACfF,WAAYoN,EAAA,SC/BpB,MAAM4L,UAA4B,cAC9BpgB,cACIE,SAASuH,WACTtH,KAAKkgB,iBAAmB,KACpB,MAAM,WAAEC,EAAU,QAAEnW,EAAO,MAAE3E,GAAUrF,KAAKF,MAC5C,IAAIsgB,EAAapW,EACbxI,EAAQ,IAER6D,EAAM,QACN+a,EAAa,KACb5e,EAAQ6D,EAAM,OAElB,MAAMuQ,EAAWlV,OAAOC,OAAOD,OAAOC,OAAO,GAAIkV,KAAKC,MAAMD,KAAKE,UAAU1Q,KAAU,CAAEkG,SAAU,CACzF,CAAC6U,GAAa5e,KAStB,OANIoU,EAASxL,SACTwL,EAASxL,OAAOmU,aAAUlY,EAC1BuP,EAAS,WAAoBvP,EAC7BuP,EAAS,WAAgBvP,EACzBuP,EAAS,WAAqBvP,GAE3B,GAAG8Z,MAAc,QAAcvK,MAE1C5V,KAAKqgB,aAAe,KAChB,MAAM,OAAExL,GAAW7U,KAAKF,MAClBwgB,EAAUzL,GAAUA,EAAO0L,MAAQ1L,EAAO0L,KAAKC,OAAS3L,EAAO0L,KAAKC,MAAMxB,MAAQnK,EAAO0L,KAAKC,MAAMxB,KAAKwB,MAE/G,OADa,EAAA9J,EAAA,IAAe4J,EAAUzL,EAAO0L,KAAKC,MAAMxB,KAAKwB,MAAMhf,MAAQ,EAAG8e,EAAUzL,EAAO0L,KAAKC,MAAMxB,KAAKwB,MAAMC,MAAQ,QAGjIzgB,KAAK0gB,uBAA0Blf,IAC3B,MAAM,mBAAEmf,GAAuB3gB,KAAKF,MAChC6gB,GACAA,EAAmBnf,IAI/BgE,SACI,MAAM,YAAEqK,EAAW,QAAE7F,EAAO,MAAE3E,EAAK,KAAEzC,EAAI,aAAEge,GAAe,EAAK,KAAEZ,EAAI,mBAAE/X,EAAkB,MAAE1I,GAAUS,KAAKF,MACpG+gB,EAAkBxb,GAASA,EAAM+E,OAAS/E,EAAM+E,OAAOmU,aAAUlY,EACjEya,GAAa,QAAmBzb,GAChC0b,GAAa,QAAiB1b,GAC9BgW,EAAWwF,GACD,YAAZ7W,GACY,YAAZA,GACY,gBAAZA,GACY,sBAAZA,EAEEoW,EAAaS,EAAkB,UAAYE,EAAa,MAAQD,EAAa,KAAe9W,EAClG,OAAQ,kBAAoB,SAAU,CAAEoJ,MAAO,UAC3C,kBAAoB,MAAO,CAAEA,MAAO,iBAChC,kBAAoB,MAAO,CAAE,aAAcxQ,EAAKS,cAAcC,EAAA,mCAA2CoM,UAAW,sBAChH,kBAAoB,KAAM,CAAEA,UAAW,yBACnC,kBAAoB,KAAM,CAAEA,UAAW,yBACnC,kBAAoB,OAAQ,CAAEA,UAAW,iCACrC,kBAAoB,KAAe,OACvC,kBAAoB,KAAM,CAAEsR,GAAIhhB,KAAKkgB,oBAAsBtd,EAAKS,cAAcC,EAAA,yBAAiC,CAC3G9B,MAAOoB,EAAKS,cAAcC,EAAA,wBAAgC,CAAE9B,MAAOyG,IACnE+B,QAASoW,SAEzB,UAAmB,kBAAoB,IAAU,OACrD,kBAAoB,MAAO,CAAEhN,MAAO,iBAChC,kBAAoB,MAAO,CAAEA,MAAO,SAChC,kBAAoB,EAAAkI,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAyF,WAAA,QACnDre,EAAKS,cAAcC,EAAA,iBAAyB,CAAE9B,MAAOjC,IACrDsQ,GAAe,kBAAoB,MAAO,CAAEuD,MAAO,mBAA0BvD,IACjF+Q,GAAiB,kBAAoB,MAAO,CAAExN,MAAO,YACjD,kBAAoB,IAAU,CAAE9Q,SAAUtC,KAAK0gB,2BACvD,kBAAoB,MAAO,CAAEtN,MAAO,QAChC,kBAAoB,MAAO,CAAEA,MAAO,aAChC,kBAAoB,EAAAkI,MAAO,CAAEC,aAAc,KAAMnI,MAAO,YAAkBoI,KAAM,EAAAyF,WAAA,QAC5E,kBAAoB,OAAQ,KAAMjhB,KAAKqgB,kBAC/C,kBAAoB,MAAO,CAAEjN,MAAO,kBAAwB,OAAsBxQ,EAAKS,cAAcC,EAAA,yBAAiC,CAAE9B,MAAO4e,EAAYnR,MAAO,IAAM3L,EAAA,yBAAiC,MACjN,kBAAoB,MAAO,KACvB,kBAAoB,MAAO,CAAE8P,MAAO,QAChC4M,EACA,kBAAoB,MAAO,CAAE5M,MAAO,OAAcQ,QAAQyH,IAAa,kBAAoB0D,EAAS,CAAE9V,GAAI,OAAQhB,mBAAoBA,SAG1J,MAAMiZ,GAAkB,EAAAhb,EAAA,IAAW+Z,GCnFtBkB,GAAkBC,IAC3B,OAAQA,GACJ,IAAK,gBACD,MAAO,gBACX,IAAK,kBACD,MAAO,oBAGnB,MAAMC,WAAsB,cACxBxhB,cACIE,SAASuH,WACTtH,KAAKK,aAAe,CAChBihB,aAAc,GAElBthB,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cACpCL,KAAKuhB,iBAAmB,IACE,CAClB,CACIC,WAAY,gBACZJ,IAAK,iBAET,CACII,WAAY,gBACZJ,IAAK,oBAKjBphB,KAAKyhB,iBAAoBpc,IACrB,MAAM,QAAEgX,GAAYrc,KAAKF,MACzB,MAAO,GAAGuc,EAAQ3S,SAASgY,aAAY,QAAcrc,MAEzDrF,KAAK2hB,OAAS,CAACP,EAAKI,EAAY/I,IACpB,kBAAoB,EAAAmJ,IAAK,CAAEC,SAAUpJ,EAAOvV,IAAK,GAAGie,GAAeC,SAAYU,aAAc,OAAOrJ,IAASsJ,cAAeP,EAAYjiB,MAAO,kBAAoB,EAAAyiB,aAAc,KAAMhiB,KAAKiiB,YAAYb,MAEpNphB,KAAKkiB,cAAiBC,GACXA,EAAcpf,KAAI,CAACoB,EAAKsU,IACnB,kBAAoB,EAAA2J,WAAY,CAAEP,SAAUpJ,EAAOvV,IAAK,GAAGie,GAAehd,EAAIid,kBAAmBnY,GAAI,OAAOwP,IAASrX,IAAK+C,EAAIqd,YAAcxhB,KAAKqiB,WAAWle,EAAIid,IAAK3I,MAGrLzY,KAAKqiB,WAAa,CAACjB,EAAK3I,KACpB,MAAM,sBAAE6J,EAAqB,wBAAEC,GAA4BviB,KAAKF,OAC1D,aAAEwhB,GAAiBthB,KAAKS,MACxB+hB,EAAW,kBAAoB,aAAgB,MACrD,GAAIlB,IAAiB7I,EACjB,OAAO+J,EAEX,MAAMC,EAAatB,GAAeC,GAClC,MAAmB,kBAAfqB,EACOH,EAEa,oBAAfG,EACEF,EAGAC,GAGfxiB,KAAK0iB,QAAWP,IACZ,MAAM,aAAEb,GAAiBthB,KAAKS,MAC9B,OAAQ,kBAAoB,EAAAkiB,KAAM,CAAEC,UAAWtB,EAAchf,SAAUtC,KAAK6iB,gBAAkBV,EAAcpf,KAAI,CAACoB,EAAKsU,IAAUzY,KAAK2hB,OAAOxd,EAAIid,IAAKjd,EAAIqd,WAAY/I,OAEzKzY,KAAKiiB,YAAeb,IAChB,MAAM,KAAExe,GAAS5C,KAAKF,MACtB,MAAY,kBAARshB,EACOxe,EAAKS,cAAcC,EAAA,8BAEb,oBAAR8d,EACExe,EAAKS,cAAcC,EAAA,qCADzB,GAITtD,KAAK0gB,uBAA0Blf,IAC3B,MAAM,QAAE6a,EAAO,MAAEhX,GAAUrF,KAAKF,MAE1B8V,EAAWlV,OAAOC,OAAOD,OAAOC,OAAO,GAAIkV,KAAKC,MAAMD,KAAKE,UAAU1Q,KAAU,CAAEyd,UAAWthB,IAClG6a,EAAQ0G,QAAQ/iB,KAAKyhB,iBAAiB7L,KAE1C5V,KAAK6iB,eAAiB,CAACxe,EAAO2e,KAC1B,MAAM,aAAE1B,GAAiBthB,KAAKS,MAC1B6gB,IAAiB0B,GACjBhjB,KAAKwE,SAAS,CACV8c,aAAc0B,KAI1BhjB,KAAKijB,aAAe,KAChB,MAAM,SAAEvZ,EAAQ,YAAEwZ,EAAW,YAAE5d,EAAW,gBAAE2P,EAAe,WAAEV,GAAevU,KAAKF,MAC7E4J,EAASxI,QACTgiB,EAAYjO,EAAiBV,EAAYjP,IAIrDuC,oBACI7H,KAAKijB,eAETle,mBAAmBC,GACf,MAAM,SAAE0E,EAAQ,OAAEmL,EAAM,YAAEM,EAAW,YAAE7P,GAAgBtF,KAAKF,MACtD8V,EAAW5Q,EAAUM,cAAgBA,EACrC6d,GAAYtO,IAAWM,EACvBiO,GAAc1Z,EAASxI,QACzB0U,GAAYuN,GAAYC,IACxBpjB,KAAKijB,eAGbzd,SACI,MAAM,YAAEqK,EAAW,WAAEsQ,EAAU,gBAAEkD,EAAe,QAAErZ,EAAO,UAAEsZ,EAAS,qBAAEC,EAAoB,aAAEC,EAAY,MAAEne,EAAK,OAAEwP,EAAM,YAAEM,EAAW,kBAAEL,EAAiB,aAAE8L,EAAY,mBAAE3Y,EAAkB,MAAE1I,GAAWS,KAAKF,MACrMqiB,EAAgBniB,KAAKuhB,mBAE3B,GAAIpM,EACA,OAAO,kBAAoB,IAAc,CAAE5V,MAAO8jB,IAEjD,GAA6B,IAAzBE,GAAqE,IAAtBzO,EACpD,OAAO,kBAAoB,IAAS,CAAEvV,MAAO8jB,IAE5C,GAA6B,IAAzBE,GAAmE,IAAtBzO,EAAwC,CAG1F,GADoBwO,GAAaA,EAAU/C,MAAiC,IAAzB+C,EAAU/C,KAAKtR,OAAwC,IAAzBsU,EAE7E,OAAO,kBAAoB,IAAa,CAAEC,aAAcA,EAAcjkB,MAAO8jB,IAEjF,KAAK,QAAoBC,GACrB,OAAO,kBAAoB,IAAQ,CAAE/jB,MAAOA,IAGpD,OAAQ,kBAAoB,aAAgB,KACxC,kBAAoB2hB,EAAiB,CAAErR,YAAaA,EAAasQ,WAAYA,EAAYnW,QAASA,EAAS2W,mBAAoB3gB,KAAK0gB,uBAAwBrb,MAAOA,EAAOwP,OAAQA,EAAQ+L,aAAcA,EAAcZ,KAAMhgB,KAAK0iB,QAAQP,GAAgBla,mBAAoBA,EAAoB1I,MAAOA,IACxS,kBAAoB,MAAO,CAAE6T,MAAO3M,EAAOmW,SAAW5c,KAAKkiB,cAAcC,MAGrF,UAAe,EAAAjc,EAAA,IAAWmb,K,6JC3InB,MAAM5a,EAAS,CAClBgd,kBAAmB,CACf9c,YAAa0W,EAAA,SACbC,UAAWpJ,EAAA,WCJN,EAAS,CAClBC,MAAO,CAEHuP,OAAQ,QACRlF,MAAO,SAEXmF,SAAU,CACNrG,U,SAAW,SACX8B,UAAW,UCPnB,MAAMwE,UAAwB,cAC1Bpe,SACI,MAAM,KAAE3B,GAAS7D,KAAKF,MACtB,OAAK+D,EAAKggB,SAGHhgB,EAAKggB,SAAS9gB,KAAI,CAAC+gB,EAASrL,IAAU,kBAAoB,MAAO,CAAEvV,IAAK,WAAWuV,KAAWqL,KAF1F,MAKnB,MAAMC,GAAc,EAAA7d,EAAA,IAAW0d,GCJ/B,MAAMI,UAAyB,cAC3BnkB,YAAYC,GACRC,MAAMD,GACNE,KAAKgV,YAAc,KACfhV,KAAKF,MAAMsV,SAAQ,IAEvBpV,KAAKgV,YAAchV,KAAKgV,YAAYlQ,KAAK9E,MAE7Cqe,sBAAsBC,GAClB,MAAM,OAAE1W,EAAM,KAAE/D,GAAS7D,KAAKF,MAC9B,OAAOwe,EAAUza,OAASA,GAAQya,EAAU1W,SAAWA,EAE3DpC,SACI,MAAM,QAAEwE,EAAO,OAAEpC,EAAM,KAAE/D,EAAI,KAAEjB,GAAS5C,KAAKF,MAC7C,OAAQ,kBAAoB,EAAAqY,MAAO,CAAEzI,UAAW,gBAAiB0D,MAAO,QAAcxL,OAAQA,EAAQwN,QAASpV,KAAKgV,YAAazV,MAAOqD,EAAKS,cAAcC,EAAA,4BAAoC,CAAE0G,QAAAA,EAAS/F,KAAMJ,EAAKmT,QAAUwH,MAAO,OAClO,kBAAoBuF,EAAa,CAAElgB,KAAMA,MAGrD,MAAMogB,GAAe,EAAA/d,EAAA,IAAW8d,GClBhC,MAAME,UAAoB,cACtBrkB,YAAYC,GACRC,MAAMD,GACNE,KAAKK,aAAe,CAChBuH,QAAQ,EACRuc,SAAS,GAEbnkB,KAAKS,MAAQC,OAAOC,OAAO,GAAIX,KAAKK,cACpCL,KAAKgV,YAAepN,IAChB5H,KAAKwE,SAAS,CAAEoD,OAAAA,KAEpB5H,KAAK4e,WAAava,IACdrE,KAAKwE,SAAS,CAAEoD,QAAQ,IACxBvD,EAAMwa,kBACC,GAEX7e,KAAKgV,YAAchV,KAAKgV,YAAYlQ,KAAK9E,MACzCA,KAAK4e,WAAa5e,KAAK4e,WAAW9Z,KAAK9E,MAE3CwF,SACI,MAAM,QAAEwE,EAAO,OAAE6K,EAAM,KAAEjS,GAAS5C,KAAKF,OACjC,OAAE8H,EAAM,QAAEuc,GAAYnkB,KAAKS,MACjC,IAAI2jB,EAAY,EAChB,MACMC,EAAe,GACfC,EAAc,GACdC,GAAgB,EAAAC,EAAA,GAAuB,CACzC3P,OAAAA,EACA4P,MAAOza,IAELnG,EAAO0gB,GAAiBA,EAAcziB,OAASyiB,EAAc,QAAKle,EACxE,IAAKxC,EACD,OAAO,KAEX,IAAK,MAAMigB,KAAWjgB,EAAKggB,SAAU,CACjC,MACMa,EAAgB,GADPL,EAAaviB,OAAS,EAAI,KAAO,KACdgiB,IAC9BK,EACAE,EAAatW,KAAK2W,GAEbN,GAjBI,KAkBLA,EAAYM,EAAc5iB,OAlBrB,GAmBLuiB,EAAatW,KAAK2W,EACbrK,MAAM,EApBN,GAoBoB+J,GACpBzf,OACAggB,OAAO,QAGZN,EAAatW,KAAK2W,IAG1BN,GAAaM,EAAc5iB,OAC3BwiB,EAAYvW,KAAK+V,GAErB,OAAQ,kBAAoB,MAAO,CAAE1Q,MAAO3M,EAAOgd,mBAC/C7P,QAAQyQ,IAAiBA,EAAathB,KAAI,CAAC+gB,EAASrL,IAAU,kBAAoB,OAAQ,CAAEvV,IAAKuV,GAASqL,KAC1GlQ,QAAQyQ,EAAaviB,OAASwiB,EAAYxiB,SAAY,kBAAoB,IAAKpB,OAAOC,OAAO,IAAI,QAAa6U,EAAA,wBAA8B,CAAEsJ,KAAM,KAAM5c,QAASlC,KAAK4e,aAAehc,EAAKS,cAAcC,EAAA,sBAA8B,CAAE9B,MAAO8iB,EAAYxiB,OAASuiB,EAAaviB,UACnR,kBAAoBmiB,EAAc,CAAEja,QAASA,EAASpC,OAAQA,EAAQ/D,KAAMA,EAAMuR,QAASpV,KAAKgV,gBAG5G,MAAM4P,GAAU,EAAA1e,EAAA,IAAWge,G,4FChEpB,MAAMW,EAAc,CACvBC,YAAa,IACbC,WAAY,IACZpB,SAAU,CACN3G,WAAYC,EAAA,WAGP,EAAS,CAClB+H,cAAe,CACXtB,OAAQ,QACR1P,aAAcpN,EAAA,SACd0W,UAAWD,EAAA,WCKnB,MAAM4H,UAAsB,cACxBplB,cACIE,SAASuH,WAETtH,KAAKklB,eAAiB,IACVhT,IACJ,IAAI,OAAE3J,GAAW2J,EAAIpS,EAzBC,SAAUsM,EAAG+F,GAC/C,IAAIC,EAAI,GACR,IAAK,IAAIC,KAAKjG,EAAO1L,OAAO4R,UAAUN,eAAeO,KAAKnG,EAAGiG,IAAMF,EAAE3G,QAAQ6G,GAAK,IAC9ED,EAAEC,GAAKjG,EAAEiG,IACb,GAAS,MAALjG,GAAqD,mBAAjC1L,OAAO8R,sBACtB,KAAIC,EAAI,EAAb,IAAgBJ,EAAI3R,OAAO8R,sBAAsBpG,GAAIqG,EAAIJ,EAAEvQ,OAAQ2Q,IAC3DN,EAAE3G,QAAQ6G,EAAEI,IAAM,GAAK/R,OAAO4R,UAAUI,qBAAqBH,KAAKnG,EAAGiG,EAAEI,MACvEL,EAAEC,EAAEI,IAAMrG,EAAEiG,EAAEI,KAE1B,OAAOL,EAgBkCO,CAAOT,EAAI,CAAC,WACzC,OAAQ,kBAAoBiT,EAAA,GAAYzkB,OAAOC,OAAO,GAAIb,EAAO,CAAEsT,MAAO,CAAC,CAAE4J,WAAY6H,EAAYlB,SAAS3G,YAAc,IAAKoI,KAAM,CAAC7c,EAAOzI,EAAM2Y,OAAQ3Y,EAAMslB,UAG3KplB,KAAKqlB,YAAc,IACP,kBAAoB,aAAgB,KACxC,kBAAoB,EAAAC,SAAU,CAAElS,MAAO,gBAAsBoL,MAAO+G,EAAA,QAGhF/f,SACI,MAAM,OAAEqP,EAAM,kBAAEC,EAAiB,KAAElS,GAAS5C,KAAKF,MAC3CwgB,EAAUzL,GAAUA,EAAO0L,MAAQ1L,EAAO0L,KAAKC,OAAS3L,EAAO0L,KAAKC,MAAMxB,KAC1EwG,EAAYlF,GAAWzL,EAAO0L,KAAKC,MAAMxB,KAAKyG,OAC9CC,EAASpF,GAAWzL,EAAO0L,KAAKC,MAAMxB,KAAK2G,IAC3CC,EAAWtF,GAAWzL,EAAO0L,KAAKC,MAAMxB,KAAK6G,MAC7CC,EAAcN,EAAY3Q,EAAO0L,KAAKC,MAAMxB,KAAKyG,OAAOhF,MAAQ,MAChEsF,EAAWL,EAAS7Q,EAAO0L,KAAKC,MAAMxB,KAAK2G,IAAIlF,MAAQ,MACvDuF,EAAaJ,EAAW/Q,EAAO0L,KAAKC,MAAMxB,KAAK6G,MAAMpF,MAAQ,MAC7DwF,EAAcT,EAAY3Q,EAAO0L,KAAKC,MAAMxB,KAAKyG,OAAOjkB,MAAQ,EAChE0kB,EAAWR,EAAS7Q,EAAO0L,KAAKC,MAAMxB,KAAK2G,IAAInkB,MAAQ,EACvD2kB,EAAaP,EAAW/Q,EAAO0L,KAAKC,MAAMxB,KAAK6G,MAAMrkB,MAAQ,EAC7DikB,GAAS,EAAA/O,EAAA,IAAe8O,EAAY3Q,EAAO0L,KAAKC,MAAMxB,KAAKyG,OAAOjkB,MAAQ,EAAGskB,GAC7EH,GAAM,EAAAjP,EAAA,IAAegP,EAAS7Q,EAAO0L,KAAKC,MAAMxB,KAAK2G,IAAInkB,MAAQ,EAAGukB,GACpEF,GAAQ,EAAAnP,EAAA,IAAekP,EAAW/Q,EAAO0L,KAAKC,MAAMxB,KAAK6G,MAAMrkB,MAAQ,EAAGwkB,GAC1EI,EAAcxjB,EAAKS,cAAcC,EAAA,eACjC+iB,EAAWzjB,EAAKS,cAAcC,EAAA,gBAC9BgjB,EAAa1jB,EAAKS,cAAcC,EAAA,kBAEhCijB,EAAcvmB,KAAKklB,iBACnBsB,EAAU,kBAAoBC,EAAA,GAAa,CAAEC,OAAQ,GAAIC,YAAa,EAAGC,eAAgB,kBAAoBL,EAAa,CAAEM,GAAI,GAAIC,WAAY,IAAKve,OAAQ,CAACod,EAAKF,EAAQI,KAAWkB,UAAW,KACvM,OAAQ,kBAAoB,MAAO,CAAE3T,MAAO,CAAEsQ,OAAQmB,EAAYC,YAAatG,MAAOqG,EAAYE,aAAsC,IAAtBjQ,EAA4C9U,KAAKqlB,cAAkB,kBAAoB2B,EAAA,GAAU,CAAEC,SAAUrkB,EAAKS,cAAcC,EAAA,8BAAsC4jB,UAAWtkB,EAAKS,cAAcC,EAAA,+BAAuC6jB,wBAAwB,EAAMvjB,KAAM,CACzX,CAAEwjB,EAAGf,EAAUgB,EAAGnB,EAAUzF,MAAOsF,GACnC,CAAEqB,EAAGhB,EAAaiB,EAAGpB,EAAaxF,MAAOqF,GACzC,CAAEsB,EAAGd,EAAYe,EAAGlB,EAAY1F,MAAOuF,IACxCtC,OAAQmB,EAAYC,YAAawC,OAAQ,EAAGC,MAAAA,KAAY3kB,EAAKS,cAAcC,EAAA,4BAAoC,CAC9GW,KAAMsjB,EAAMH,EACZ5lB,OAAO,EAAAkV,EAAA,IAAe6Q,EAAMF,EAAGE,EAAM9G,SACrC+G,gBAAiBhB,EAAQiB,WAAY,CACrC,CACIxjB,KAAMoiB,GAEV,CACIpiB,KAAMmiB,GAEV,CACIniB,KAAMqiB,IAEXoB,kBAAmB,WAAYC,eAAgB,QAASC,QAAS,CAChEC,OAAQ,GACRC,KAAM,EACNC,MAAO,IACPC,IAAK,IACNC,WAAYC,EAAA,SAAuB1J,MAAOqG,EAAYE,eAGrE,MAAMoD,GAAY,EAAAjiB,EAAA,IAAW+e,G,2DC/EtB,MAAM,EAAS,CAClBmD,YAAa,CACT9K,U,SAAW,UAEfqG,SAAU,CACNvE,UAAW,UCMb7K,EAAa,OACnB,MAAM8T,UAA6B,cAC/BxoB,YAAYC,GACRC,MAAMD,GAEV+H,oBACI,MAAM,YAAEqb,EAAW,YAAE5d,EAAW,gBAAE2P,GAAoBjV,KAAKF,MAC3DojB,EAAYjO,EAAiBV,EAAYjP,GAE7CP,mBAAmBC,GACf,MAAM,YAAEke,EAAW,YAAE5d,EAAW,gBAAE2P,GAAoBjV,KAAKF,MACvDkF,EAAUM,cAAgBA,GAC1B4d,EAAYjO,EAAiBV,EAAYjP,GAGjDE,SACI,MAAM,KAAE5C,EAAI,OAAEiS,EAAM,cAAEyT,EAAa,kBAAExT,GAAsB9U,KAAKF,MAC1DyoB,EAAW1T,GAAUA,EAAO0L,MAAQ1L,EAAO0L,KAAKC,MAChDxB,GAAO,EAAAtI,EAAA,IAAe6R,EAAW1T,EAAO0L,KAAKC,MAAMxB,KAAKwB,MAAMhf,MAAQ,EAAG+mB,EAAW1T,EAAO0L,KAAKC,MAAMxB,KAAKwB,MAAMC,MAAQ,OAC/H,OAAQ,kBAAoB,aAAgB,KACxC,kBAAoB,MAAO,CAAErN,MAAO,YAChC,kBAAoB,EAAAkI,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAyF,WAAA,IAAiBre,EAAKS,cAAcC,EAAA,mBAA2B,CAAE9B,MAAOwd,MACnI,kBAAoB,MAAO,CAAE5L,MAAO,eAChC,kBAAoB,KAAoB,CAAEqR,MAAO6D,EAAezT,OAAQA,EAAQ2T,OAAQ1T,IAAqB,EAAGY,MAAAA,KAAYA,EAAM3S,KAAI0lB,GAAU,kBAAoB,KAAmB,CAAEvlB,IAAKulB,EAAMxf,GAAIyf,cAAe,GAAI1R,MAAOyR,EAAMzR,MAAQyR,EAAMzR,MAAMhJ,WAAa,GAAI2a,WAAY9T,EAAO0L,KAAKC,MAAMxB,KAAKwB,MAAMhf,MAAOif,MAAO5L,EAAO0L,KAAKC,MAAMxB,KAAKwB,MAAMC,MAAOjf,MAAOinB,EAAMzJ,KAAKwB,MAAMhf,eAGhZ,MAAMuE,GAAkB,SAAsB,CAACtF,GAAS6nB,cAAAA,EAAerT,gBAAAA,MACnE,MAAM5P,GAAQ,QAAWqE,SAASxI,QAC5B6I,GAAkB,QAAmB1E,GACrC2E,EAAUD,EAAkB,MAAe,QAAa1E,GACxD4E,EAAeF,IAAoC,QAAgB1E,GACnEuQ,EAAW,CACbxL,OAAQ,CACJC,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBmB,UAAWhL,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAK0E,GAASA,EAAMqG,WAAarG,EAAMqG,WAAcrG,GAASA,EAAM+E,QAAU/E,EAAM+E,OAAOmU,SAAW,CAAE,CAAC,GAAG,eAA4BlZ,EAAM+E,OAAOmU,UAAcvU,GAAW,CAAE,CAACA,QAAU3D,IAAgB2D,GAAW,CAAE,CAACA,GAAUC,IACtSsB,SAAU7K,OAAOC,OAAO,GAAK2nB,GAAiB,CAAE,CAACA,GAAgB,OAE/DhjB,GAAc,QAASsQ,GAG7B,MAAO,CACHtQ,YAAAA,EACAuP,OAJW,kBAA6BpU,EAAOwU,EAAiBV,EAAYjP,GAK5EwP,kBAJsB,6BAAwCrU,EAAOwU,EAAiBV,EAAYjP,OAOpGU,EAAqB,CACvBkd,YAAa,kBAEX0F,GAAmB,EAAA1iB,EAAA,KAAW,IAAAC,SAAQJ,EAAiBC,EAAzB,CAA6CqiB,IC1DjF,MAAMQ,UAAyB,cAC3BhpB,YAAYC,GACRC,MAAMD,GACNE,KAAKgV,YAAc,KACfhV,KAAKF,MAAMsV,SAAQ,IAEvBpV,KAAKgV,YAAchV,KAAKgV,YAAYlQ,KAAK9E,MAE7Cqe,sBAAsBC,GAClB,MAAM,aAAErU,EAAY,OAAErC,GAAW5H,KAAKF,MACtC,OAAOwe,EAAUrU,eAAiBA,GAAgBqU,EAAU1W,SAAWA,EAE3EpC,SACI,MAAM,aAAEyE,EAAY,KAAErH,EAAI,OAAEgF,EAAM,cAAE0gB,EAAa,gBAAErT,GAAoBjV,KAAKF,MAC5E,OAAQ,kBAAoB,EAAAqY,MAAO,CAAEzI,UAAW,gBAAiB9H,OAAQA,EAAQwN,QAASpV,KAAKgV,YAAazV,MAAOqD,EAAKS,cAAcC,EAAA,2BAAmC,CACjK0G,QAASse,EACTrkB,KAAMgG,IACNhI,QAAS,SACb,kBAAoB2mB,EAAkB,CAAEN,cAAeA,EAAerT,gBAAiBA,MAGnG,MAAM6T,GAAe,EAAA5iB,EAAA,IAAW2iB,GC1BnB,EAAS,CAClBE,KAAM,GACNxD,SAAU,CACNjI,UAAW1W,EAAA,UAEfoiB,iBAAkB,CACd9hB,WAAY,UCQpB,MAAM+hB,UAAoB,cACtBppB,cACIE,SAASuH,WACTtH,KAAKS,MAAQ,CACTyoB,wBAAwB,GAE5BlpB,KAAKmpB,SAAW,KACZ,MAAM,OAAEtU,EAAM,cAAEyT,GAAkBtoB,KAAKF,MAKvC,OAJsB,EAAA0kB,EAAA,GAAuB,CACzC3P,OAAAA,EACA4P,MAAO6D,KAIftoB,KAAKopB,WAAa,KACd,MAAM,OAAEvU,EAAM,cAAEyT,EAAa,kBAAExT,GAAsB9U,KAAKF,MAC1D,OAAQ,kBAAoB,KAAoB,CAAE2kB,MAAO6D,EAAezT,OAAQA,EAAQ2T,OAAQ1T,IAAqB,EAAGY,MAAAA,KAAYA,EAAM3S,KAAIsmB,GAAe,kBAAoB,KAAmB,CAAEX,cAAe,GAAIxlB,IAAK,GAAGmmB,EAAWpgB,UAAW+N,MAAOqS,EAAWrS,MAAQqS,EAAWrS,MAAMhJ,gBAAa3H,EAAWsiB,WAAY9T,EAAO0L,KAAKC,MAAMxB,KAAKwB,MAAMhf,MAAOif,MAAO5L,EAAO0L,KAAKC,MAAMxB,KAAKwB,MAAMC,MAAOjf,MAAO6nB,EAAWrK,KAAKwB,MAAMhf,aAEtbxB,KAAKspB,WAAa,KACd,MAAM,QAAEtf,EAAO,MAAE3E,EAAK,cAAEijB,EAAa,gBAAErT,EAAe,KAAErS,GAAS5C,KAAKF,OAChE,uBAAEopB,GAA2BlpB,KAAKS,MAQxC,IAAoB,IAPET,KAAKmpB,WACMI,WAAU9W,IACvC,MAAMxJ,EAAKwJ,EAAExJ,GACb,GAAIA,GAAa,OAAPA,EACN,MAAc,UAAPA,GAAyB,WAAPA,KAGV,CAEnB,MAAMgB,EAAe5E,GAASA,EAAM+E,QAAU/E,EAAM+E,OAAOmU,QAAUlZ,EAAM+E,OAAOmU,QAAUve,KAAKF,MAAMmK,aACvG,OAAQ,kBAAoB,MAAO,CAAEmJ,MAAO,oBACxC,kBAAoB,EAAApR,OAAQtB,OAAOC,OAAO,IAAI,QAAa6U,EAAA,yBAA+B,CAAEtT,QAASlC,KAAKwpB,2BAA4BtgB,KAAM,EAAAugB,WAAA,OAAmBxnB,QAAS,EAAAoH,cAAA,OAAuBzG,EAAKS,cAAcC,EAAA,iBAAyB,CAAE9B,MAAO8mB,KACpP,kBAAoBQ,EAAc,CAAE9e,QAASA,EAASC,aAAcA,EAAcrC,OAAQshB,EAAwB9T,QAASpV,KAAK0pB,4BAA6BrkB,MAAOA,EAAOijB,cAAeA,EAAerT,gBAAiBA,KAG9N,OAAO,MAGfjV,KAAK0pB,4BAA+B9hB,IAChC5H,KAAKwE,SAAS,CAAE0kB,uBAAwBthB,KAE5C5H,KAAKwpB,2BAA6BnlB,IAC9BrE,KAAKwE,SAAS,CAAE0kB,wBAAwB,IACxC7kB,EAAMwa,kBAGdhX,oBACI,MAAM,YAAEqb,EAAW,YAAE5d,EAAW,gBAAE2P,EAAe,WAAEV,GAAevU,KAAKF,MACvEojB,EAAYjO,EAAiBV,EAAYjP,GAE7CP,mBAAmBC,GACf,MAAM,SAAEsa,EAAQ,YAAE4D,EAAW,YAAE5d,EAAW,gBAAE2P,EAAe,WAAEV,GAAevU,KAAKF,MAC7EkF,EAAUM,cAAgBA,GAAeN,EAAUsa,WAAaA,GAChE4D,EAAYjO,EAAiBV,EAAYjP,GAGjDE,SACI,MAAM,cAAE8iB,EAAa,kBAAExT,EAAiB,KAAElS,GAAS5C,KAAKF,MACxD,OAAQ,kBAAoB,EAAA6pB,KAAM,CAAEvW,MAAO,QACvC,kBAAoB,EAAAwW,UAAW,KAC3B,kBAAoB,EAAAtO,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAyF,WAAA,IAAiBre,EAAKS,cAAcC,EAAA,wBAAgC,CAAE9B,MAAO8mB,MACxI,kBAAoB,EAAAuB,SAAU,KAA4B,IAAtB/U,EAA4C,kBAAoB,aAAgB,KAChH,kBAAoB,EAAAwQ,SAAU,CAAE9G,MAAO+G,EAAA,OACvC,kBAAoB,EAAAD,SAAU,CAAElS,MAAO,WAAiBoL,MAAO+G,EAAA,OAC/D,kBAAoB,EAAAD,SAAU,CAAElS,MAAO,WAAiBoL,MAAO+G,EAAA,OAC/D,kBAAoB,EAAAD,SAAU,CAAElS,MAAO,WAAiBoL,MAAO+G,EAAA,QAAyBvlB,KAAKopB,cACjG,kBAAoB,EAAAU,WAAY,KAAM9pB,KAAKspB,gBAGvD,MAAM,GAAkB,SAAsB,CAAC7oB,GAAS6e,SAAAA,EAAUgJ,cAAAA,EAAerT,gBAAAA,EAAiBV,WAAAA,MAC9F,MAAMlP,GAAQ,QAAWqE,SAASxI,QAC5B6I,GAAkB,QAAmB1E,GACrC2E,EAAUD,EAAkB,MAAe,QAAa1E,GACxD4E,EAAeF,IAAoC,QAAgB1E,GACnEuQ,EAAW,CACbkN,UAAWxD,EACXlV,OAAQ,CACJ4L,MAAO,EACP3L,WAAY,UACZC,iBAAkB,QAClBC,kBAAmB,GAEvBmB,UAAWhL,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAK0E,GAASA,EAAMqG,WAAarG,EAAMqG,WAAcrG,GAASA,EAAM+E,QAAU/E,EAAM+E,OAAOmU,SAAW,CAAE,CAAC,GAAG,eAA4BlZ,EAAM+E,OAAOmU,UAAcvU,GAAW,CAAE,CAACA,QAAU3D,IAAgB2D,GAAW,CAAE,CAACA,GAAUC,IACtSsB,SAAU7K,OAAOC,OAAO,GAAK2nB,GAAiB,CAAE,CAACA,GAAgB,OAE/DhjB,GAAc,QAASsQ,GAG7B,MAAO,CACH5L,QAAAA,EACAC,aAAAA,EACA5E,MAAAA,EACAC,YAAAA,EACAuP,OAPW,kBAA6BpU,EAAOwU,EAAiBV,EAAYjP,GAQ5EwP,kBAPsB,6BAAwCrU,EAAOwU,EAAiBV,EAAYjP,GAQlG2P,gBAAAA,EACAV,WAAAA,MAGF,EAAqB,CACvB2O,YAAa,kBAEX6G,GAAc,EAAA7jB,EAAA,KAAW,IAAAC,SAAQ,EAAiB,EAAzB,CAA6C8iB,I,0DCpHrE,MAAM,GAAS,CAClBjE,cAAe,CACXhR,aAAcpN,EAAA,UAElBojB,SAAU,CACNhN,WAAYC,EAAA,UAEhBgN,eAAgB,CACZ3M,UAAW1W,EAAA,WCOnB,MAAMsjB,WAAuB,cACzBrqB,cACIE,SAASuH,WACTtH,KAAKmqB,aAAe,gBACpBnqB,KAAKoqB,SAAWhqB,GAAA,EAChBJ,KAAKS,MAAQ,CACT+d,MAAO,GAEXxe,KAAKqqB,aAAe,KAChB,MAAM,MAAE7L,GAAUxe,KAAKS,OACjB,YAAE6pB,EAAc,GAAMtqB,KAAKmqB,aAAatpB,SAAW,GACrDypB,IAAgB9L,GAChBxe,KAAKwE,SAAS,CAAEga,MAAO8L,KAG/BtqB,KAAKuqB,SAAW,KACZ,MAAM,QAAEvgB,EAAO,kBAAE8K,EAAiB,OAAED,GAAW7U,KAAKF,OAC9C,MAAE0e,GAAUxe,KAAKS,MACjB+pB,EAAyB,YAAZxgB,EAAwBhK,KAAKyqB,4BAA8BzqB,KAAK0qB,gBACnF,OAAK7V,GAAsC,IAA5B2V,EAAW3E,MAAM/jB,OAGxB,kBAAoB,MAAO,CAAE4N,UAAW,iBAAyC,IAAtBoF,EAA4C9U,KAAKqlB,cAAkB,kBAAoB,aAAgB,KACtKzR,QAAoB,YAAZ5J,IAA0BhK,KAAK2qB,eACvC,kBAAoBC,EAAA,EAAa,CAAEC,4BAA6BL,EAAWxU,MAAMxU,MACvE,CACE,CACIspB,QAASN,EAAWxU,MAAM8U,QAC1BzD,EAAGmD,EAAWxU,MAAMxU,QAG1B,GAAIupB,kCAAmCP,EAAWxU,MAAMxU,MAAQ,CAAC,CAAEyC,KAAMumB,EAAWxU,MAAMgV,SAAY,GAAItH,OAAQ1jB,KAAKirB,iBAAkB3D,OAAQ,EAAGC,MAAAA,KAAY,GAAGA,EAAMuD,UAAWnD,eAAgB,cAAeuD,kBAAmBlrB,KAAKmrB,iBAAkBC,UAAWprB,KAAKqrB,aAAab,GAAc,SAAMnkB,EAAWilB,UAAW,EAAG1D,QAAS,CAClVC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,IAAK,GACNuD,4BAA6Bf,EAAW3E,MAAM/jB,OAC3C0oB,EAAW3E,MAAM9iB,KAAIwkB,IACZ,CACHuD,QAASvD,EAAMuD,QACfzD,EAAGE,EAAM/lB,UAGf,GAAIgqB,kCAAmChB,EAAW3E,MAAM/jB,OACxD0oB,EAAW3E,MAAM9iB,KAAIwkB,IACZ,CACHtjB,KAAMsjB,EAAMyD,WAGlB,GAAIS,qBAAsBjB,EAAWkB,OAAO5pB,OAC5C,CACE,CACIgpB,QAASN,EAAWkB,OAAO,GAAGZ,QAC9BzD,EAAGmD,EAAWkB,OAAO,GAAGlqB,QAG9B,GAAImqB,2BAA4BnB,EAAWkB,OAAO5pB,OAAS,CAAC,CAAEmC,KAAMumB,EAAWkB,OAAO,GAAGV,SAAY,GAAIxM,MAAOA,MApCnH,MAsCfxe,KAAKirB,eAAiB,KAClB,MAAM,QAAEjhB,GAAYhK,KAAKF,OACnB,MAAE0e,GAAUxe,KAAKS,MACvB,MAAgB,YAAZuJ,EACOwU,EAAQ,IAAM,IAAMA,EAAQ,IAAM,IAAM,IAGxCA,EAAQ,IAAM,IAAMA,EAAQ,IAAM,IAAM,KAGvDxe,KAAKmrB,eAAiB,KAClB,MAAM,MAAE3M,GAAUxe,KAAKS,MACvB,OAAO+d,EAAQ,IAAM,EAAIA,EAAQ,IAAM,EAAIA,EAAQ,IAAM,EAAI,GAEjExe,KAAKqlB,YAAc,IACP,kBAAoB,aAAgB,KACxC,kBAAoB,EAAAC,SAAU,CAAElS,MAAO,iBAAsBoL,MAAO+G,EAAA,OACpE,kBAAoB,EAAAD,SAAU,CAAElS,MAAO,kBAAuBoL,MAAO+G,EAAA,QAE7EvlB,KAAKqrB,aAAgB9D,IACjB,IAAIqE,GAAW,EACf,IAAK,MAAMC,KAAStE,EAAMmE,OACtB,GAAIG,EAAMrqB,MAAO,CACboqB,GAAW,EACX,MAGR,IAAIhG,GAAW,EACf,IAAK,MAAMC,KAAS0B,EAAM1B,MACtB,GAAIA,EAAMrkB,MAAO,CACbokB,GAAW,EACX,MAGR,QAAS2B,EAAMvR,MAAMxU,OAASoqB,GAAYhG,IAGlD/d,oBACI,MAAM,YAAEqb,EAAW,YAAE5d,EAAW,gBAAE2P,EAAe,WAAEV,GAAevU,KAAKF,MACvEojB,EAAYjO,EAAiBV,EAAYjP,GACzCtF,KAAKoqB,UAAW,SAAkBpqB,KAAKmqB,aAAatpB,QAASb,KAAKqqB,cAEtEtlB,mBAAmBC,GACf,MAAM,YAAEke,EAAW,YAAE5d,EAAW,gBAAE2P,EAAe,WAAEV,GAAevU,KAAKF,MACnEkF,EAAUM,cAAgBtF,KAAKF,MAAMwF,aACrC4d,EAAYjO,EAAiBV,EAAYjP,GAGjDwmB,uBACQ9rB,KAAKoqB,UACLpqB,KAAKoqB,WAGbM,gBACI,MAAM,OAAE7V,EAAM,KAAEjS,GAAS5C,KAAKF,MACxBynB,EAAQ,CACVvR,MAAO,GACP0V,OAAQ,GACR7F,MAAO,IAGL0C,EAAW1T,GAAUA,EAAO0L,MAAQ1L,EAAO0L,KAAKC,MAChDuL,EAAWxD,GAAY1T,EAAO0L,KAAKC,MAAMxK,OAAqC,OAA5BnB,EAAO0L,KAAKC,MAAMxK,MACpEA,EAAQgW,KAAKC,MAAMF,EAAWlX,EAAO0L,KAAKC,MAAMxK,MAAMxU,MAAQ,GAC9D0qB,EAAatpB,EAAKS,cAAcC,EAAA,QAAgB,CAClDmd,OAAO,QAAesL,EAAWlX,EAAO0L,KAAKC,MAAMxK,MAAMyK,WAAQpa,KAErEkhB,EAAMvR,MAAQ,CACVgV,OAAQpoB,EAAKS,cAAcC,EAAA,oBAA4B,CACnD9B,MAAOwU,EACPyK,MAAOyL,IAEXpB,QAASloB,EAAKS,cAAcC,EAAA,oBAA4B,CACpD9B,MAAOwU,EACPyK,MAAOyL,IAEX1qB,MAAOwqB,KAAKC,MAAMjW,IAEtB,MAAMmW,EAAa5D,GAAY1T,EAAO0L,KAAKC,MAAM4L,SAAyC,OAA9BvX,EAAO0L,KAAKC,MAAM4L,QACxEA,EAAUJ,KAAKC,MAAME,EAAatX,EAAO0L,KAAKC,MAAM4L,QAAQ5qB,MAAQ,GACpE6qB,EAAezpB,EAAKS,cAAcC,EAAA,QAAgB,CACpDmd,OAAO,QAAe0L,EAAatX,EAAO0L,KAAKC,MAAM4L,QAAQ3L,WAAQpa,KAEzEkhB,EAAMmE,OAAS,CACX,CACIV,OAAQpoB,EAAKS,cAAcC,EAAA,uBAA+B,CACtD9B,MAAO4qB,EACP3L,MAAO4L,IAEXvB,QAASloB,EAAKS,cAAcC,EAAA,uBAA+B,CACvD9B,MAAO4qB,EACP3L,MAAO4L,IAEX7qB,MAAOwqB,KAAKC,MAAMG,KAG1B,MAAMxG,EAAW2C,GAAY1T,EAAO0L,KAAKC,MAAMqF,OAAqC,OAA5BhR,EAAO0L,KAAKC,MAAMqF,MACpEA,EAAQmG,KAAKC,MAAMrG,EAAW/Q,EAAO0L,KAAKC,MAAMqF,MAAMrkB,MAAQ,GAC9DwkB,EAAapjB,EAAKS,cAAcC,EAAA,QAAgB,CAClDmd,OAAO,QAAemF,EAAW/Q,EAAO0L,KAAKC,MAAMqF,MAAMpF,WAAQpa,KAerE,OAbAkhB,EAAM1B,MAAQ,CACV,CACImF,OAAQpoB,EAAKS,cAAcC,EAAA,oBAA4B,CACnD9B,MAAOqkB,EACPpF,MAAOuF,IAEX8E,QAASloB,EAAKS,cAAcC,EAAA,oBAA4B,CACpD9B,MAAOqkB,EACPpF,MAAOuF,IAEXxkB,MAAOwqB,KAAKC,MAAMpG,KAGnB0B,EAEXkD,4BACI,MAAM,OAAE5V,EAAM,KAAEjS,GAAS5C,KAAKF,MACxBynB,EAAQ,CACVvR,MAAO,GACP0V,OAAQ,GACR7F,MAAO,IAGL0C,EAAW1T,GAAUA,EAAO0L,MAAQ1L,EAAO0L,KAAKC,MAChDuL,EAAWxD,GAAY1T,EAAO0L,KAAKC,MAAMxK,OAAqC,OAA5BnB,EAAO0L,KAAKC,MAAMxK,MACpEA,EAAQgW,KAAKC,MAAMF,EAAWlX,EAAO0L,KAAKC,MAAMxK,MAAMxU,MAAQ,GAC9D0qB,EAAatpB,EAAKS,cAAcC,EAAA,QAAgB,CAClDmd,OAAO,QAAesL,EAAWlX,EAAO0L,KAAKC,MAAMxK,MAAMyK,WAAQpa,KAErEkhB,EAAMvR,MAAQ,CACVgV,OAAQpoB,EAAKS,cAAcC,EAAA,oBAA4B,CACnD9B,MAAOwU,EACPyK,MAAOyL,IAEXpB,QAASloB,EAAKS,cAAcC,EAAA,oBAA4B,CACpD9B,MAAOwU,EACPyK,MAAOyL,IAEX1qB,MAAOwqB,KAAKC,MAAMjW,IAEtB,MAAMsW,EAAc/D,GAAY1T,EAAO0L,KAAKC,MAAM4L,SAAyC,OAA9BvX,EAAO0L,KAAKC,MAAM4L,QACzEpC,EAAWgC,KAAKC,MAAMK,EAAczX,EAAO0L,KAAKC,MAAMwJ,SAASxoB,MAAQ,GACvE+qB,EAAgB3pB,EAAKS,cAAcC,EAAA,QAAgB,CACrDmd,OAAO,QAAe6L,EAAczX,EAAO0L,KAAKC,MAAMwJ,SAASvJ,WAAQpa,KAE3EkhB,EAAMmE,OAAS,CACX,CACIV,OAAQpoB,EAAKS,cAAcC,EAAA,uBAA+B,CACtD9B,MAAOwoB,EACPvJ,MAAO8L,IAEXzB,QAASloB,EAAKS,cAAcC,EAAA,uBAA+B,CACvD9B,MAAOwoB,EACPvJ,MAAO8L,IAEX/qB,MAAOwqB,KAAKC,MAAMjC,KAG1B,MAAMmC,EAAa5D,GAAY1T,EAAO0L,KAAKC,MAAM4L,SAAyC,OAA9BvX,EAAO0L,KAAKC,MAAM4L,QACxExG,EAAW2C,GAAY1T,EAAO0L,KAAKC,MAAMqF,OAAqC,OAA5BhR,EAAO0L,KAAKC,MAAMqF,MACpEuG,EAAUJ,KAAKC,MAAME,EAAatX,EAAO0L,KAAKC,MAAM4L,QAAQ5qB,MAAQ,GACpE6qB,EAAezpB,EAAKS,cAAcC,EAAA,QAAgB,CACpDmd,OAAO,QAAe0L,EAAatX,EAAO0L,KAAKC,MAAM4L,QAAQ3L,WAAQpa,KAEnEwf,EAAQmG,KAAKC,MAAMrG,EAAW/Q,EAAO0L,KAAKC,MAAMqF,MAAMrkB,MAAQ,GAC9DwkB,EAAapjB,EAAKS,cAAcC,EAAA,QAAgB,CAClDmd,OAAO,QAAemF,EAAW/Q,EAAO0L,KAAKC,MAAMqF,MAAMpF,WAAQpa,KA0BrE,OAxBAkhB,EAAM1B,MAAQ,CACV,CACImF,OAAQpoB,EAAKS,cAAcC,EAAA,oBAA4B,CACnD9B,MAAOqkB,EACPpF,MAAOuF,IAEX8E,QAASloB,EAAKS,cAAcC,EAAA,oBAA4B,CACpD9B,MAAOqkB,EACPpF,MAAOuF,IAEXxkB,MAAOwqB,KAAKC,MAAMpG,IAEtB,CACImF,OAAQpoB,EAAKS,cAAcC,EAAA,uBAA+B,CACtD9B,MAAO4qB,EACP3L,MAAO4L,IAEXvB,QAASloB,EAAKS,cAAcC,EAAA,uBAA+B,CACvD9B,MAAO4qB,EACP3L,MAAO4L,IAEX7qB,MAAOwqB,KAAKC,MAAMG,KAGnB7E,EAEXoD,eACI,MAAM,OAAE9V,EAAM,KAAEjS,GAAS5C,KAAKF,MACxByoB,EAAW1T,GAAUA,EAAO0L,MAAQ1L,EAAO0L,KAAKC,MAChD8L,EAAc/D,GAAY1T,EAAO0L,KAAKC,MAAM4L,SAAyC,OAA9BvX,EAAO0L,KAAKC,MAAM4L,QACzED,EAAa5D,GAAY1T,EAAO0L,KAAKC,MAAM4L,SAAyC,OAA9BvX,EAAO0L,KAAKC,MAAM4L,QACxExG,EAAW2C,GAAY1T,EAAO0L,KAAKC,MAAMqF,OAAqC,OAA5BhR,EAAO0L,KAAKC,MAAMqF,MACpEmE,EAAWgC,KAAKC,MAAMK,EAAczX,EAAO0L,KAAKC,MAAMwJ,SAASxoB,MAAQ,GACvE4qB,EAAUJ,KAAKC,MAAME,EAAatX,EAAO0L,KAAKC,MAAM4L,QAAQ5qB,MAAQ,GACpE6qB,EAAezpB,EAAKS,cAAcC,EAAA,QAAgB,CACpDmd,OAAO,QAAe0L,EAAatX,EAAO0L,KAAKC,MAAM4L,QAAQ3L,WAAQpa,KAEnEwf,EAAQmG,KAAKC,MAAMrG,EAAW/Q,EAAO0L,KAAKC,MAAMqF,MAAMrkB,MAAQ,GAC9DwkB,EAAapjB,EAAKS,cAAcC,EAAA,QAAgB,CAClDmd,OAAO,QAAemF,EAAW/Q,EAAO0L,KAAKC,MAAMqF,MAAMpF,WAAQpa,KAG/DmmB,EAAwBxC,EAAWoC,EACnCK,EAAsBzC,EAAWnE,EACvC,IAAI6G,EAAkCN,EAAU,EAAKA,EAAUpC,EAAY,IAAM,EAC7E0C,EAAkC,MAClCA,EAAkC,IAAMA,GAE5C,IAAIC,EAAgC3C,EAAWnE,EAASA,EAAQmE,EAAY,IAAM,EAIlF,OAHI2C,EAAgC,MAChCA,EAAgC,IAAMA,GAElC,kBAAoB,EAAAC,KAAM,CAAEC,WAAW,GAC3C,kBAAoB,EAAAC,SAAU,CAAEC,GAAI,GAAIC,GAAI,GACxC,kBAAoB,MAAO,KAAMpqB,EAAKS,cAAcC,EAAA,4BACpD,kBAAoB,MAAO,CAAE8P,MAAO,cAAmB,EAAAsD,EAAA,IAAY+V,EAAqBzG,IACxF,kBAAoB,MAAO,KAAMpjB,EAAKS,cAAcC,EAAA,qBAA6B,CAC7E2pB,YAAY,EAAAvW,EAAA,IAAiBiW,EAA+B,CACxDO,sBAAuB,EACvBC,sBAAuB,IAE3B1M,MAAOuF,MAEf,kBAAoB,EAAA8G,SAAU,CAAEC,GAAI,GAAIC,GAAI,GACxC,kBAAoB,MAAO,KAAMpqB,EAAKS,cAAcC,EAAA,+BACpD,kBAAoB,MAAO,CAAE8P,MAAO,cAAmB,EAAAsD,EAAA,IAAY8V,EAAuBH,IAC1F,kBAAoB,MAAO,KAAMzpB,EAAKS,cAAcC,EAAA,qBAA6B,CAC7E2pB,YAAY,EAAAvW,EAAA,IAAiBgW,EAAiC,CAC1DQ,sBAAuB,EACvBC,sBAAuB,IAE3B1M,MAAO4L,OAGvB7mB,SACI,OAAQ,kBAAoB,MAAO,CAAEkK,UAAW,gBAAiBtO,IAAKpB,KAAKmqB,cAAgBnqB,KAAKuqB,aAGxG,MAAM,IAAkB,SAAsB,CAAC9pB,GAASwU,gBAAAA,EAAiBV,WAAAA,MACrE,MAAMlP,GAAQ,QAAWqE,SAASxI,QAC5B8I,GAAU,QAAa3E,GACvB4E,GAAe,QAAgB5E,GAC/BuQ,EAAW,CACbxL,OAAQ,CACJE,iBAAkB,QAClBC,kBAAmB,EACnBF,WAAY,WAEhBqB,UAAWhL,OAAOC,OAAOD,OAAOC,OAAO,GAAK0E,GAASA,EAAMqG,WAAarG,EAAMqG,WAAc1B,GAAW,CAAE,CAACA,QAAU3D,IACpHkF,SAAU7K,OAAOC,OAAO,GAAKqJ,GAAW,CAAE,CAACA,GAAUC,KAEnD3E,GAAc,QAASsQ,GAG7B,MAAO,CACH5L,QAAAA,EACA6K,OAJW,kBAA6BpU,EAAOwU,EAAiBV,EAAYjP,GAK5EwP,kBAJsB,6BAAwCrU,EAAOwU,EAAiBV,EAAYjP,GAKlGA,YAAAA,MAGF,GAAqB,CACvB4d,YAAa,kBAEXkK,IAAa,EAAAlnB,EAAA,KAAW,IAAAC,SAAQ,GAAiB,GAAzB,CAA6C+jB,K,gBCjV3E,MAAMmD,GAAc,cACpB,MAAMC,WAA0B,cAC5BztB,cACIE,SAASuH,WAETtH,KAAKutB,gBAAmBC,IACpB,MAAM,QAAExjB,EAAO,OAAE6K,EAAM,KAAEjS,GAAS5C,KAAKF,MACvC,IAAI2tB,GAAa,EACjB,IAAK,MAAMC,KAAaF,EAAO1J,QAAQ6J,oBACnC,GAAID,IAAc1jB,GAAY0jB,IAAc,MAA6C,IAAhC1jB,EAAQwB,QAAQ,KAAoB,CACzFiiB,GAAa,EACb,MAGR,OAAIA,EACQ,kBAAoB,EAAA9D,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAtO,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAyF,WAAA,IAAiBre,EAAKS,cAAcC,EAAA,cAC/F,kBAAoB,EAAAumB,SAAU,KAC1B,kBAAoBjF,EAAS,CAAE5a,QAASwjB,EAAO1J,QAAQwE,cAAezT,OAAQA,MAEnF,MAGX7U,KAAK4tB,aAAe,KAChB,MAAM,OAAE/Y,EAAM,KAAEjS,GAAS5C,KAAKF,MAC9B,OAAQ,kBAAoB,EAAA6pB,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAtO,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAyF,WAAA,IACnDre,EAAKS,cAAcC,EAAA,+BACnB,kBAAoB,EAAAuqB,QAAS,CAAE,aAAcjrB,EAAKS,cAAcC,EAAA,mCAA2CwqB,YAAY,EAAMC,YAAa,kBAAoB,aAAgB,KACtK,kBAAoB,IAAK,CAAE3a,MAAO,gBAAoBxQ,EAAKS,cAAcC,EAAA,iBACzE,kBAAoB,IAAK,KAAMV,EAAKS,cAAcC,EAAA,uBAClD,kBAAoB,KAAM,MAC1B,kBAAoB,IAAK,CAAE8P,MAAO,gBAAoBxQ,EAAKS,cAAcC,EAAA,mBACzE,kBAAoB,IAAK,KAAMV,EAAKS,cAAcC,EAAA,yBAClD,kBAAoB,KAAM,MAC1B,kBAAoB,IAAK,CAAE8P,MAAO,gBAAoBxQ,EAAKS,cAAcC,EAAA,gBACzE,kBAAoB,IAAK,KAAMV,EAAKS,cAAcC,EAAA,sBAClD,kBAAoB,KAAM,MAC1B,kBAAoB,IAAK,CAAEwb,KAAMlc,EAAKS,cAAcC,EAAA,4BAAoC0qB,IAAK,aAAczpB,OAAQ,UAAY3B,EAAKS,cAAcC,EAAA,gBACtJ,kBAAoB,EAAAtB,OAAQ,CAAEC,QAAS,EAAAoH,cAAA,OACnC,kBAAoB,KAA4B,CAAE+J,MAAO,gBACzE,kBAAoB,EAAAyW,SAAU,KAC1B,kBAAoB1B,EAAW,CAAEtT,OAAQA,OAGrD7U,KAAKiuB,iBAAoBT,IACrB,MAAM,KAAE5qB,GAAS5C,KAAKF,MACtB,OAAQ,kBAAoB,EAAA6pB,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAtO,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAyF,WAAA,IAAiBre,EAAKS,cAAcC,EAAA,cAC/F,kBAAoB,EAAAumB,SAAU,KAC1B,kBAAoBuD,GAAY,CAAEnY,gBAAiBuY,EAAOvY,gBAAiBV,WAAYiZ,EAAOjZ,gBAG1GvU,KAAKkuB,oBAAuBV,IACxB,MAAM,KAAE5qB,GAAS5C,KAAKF,MACtB,OAAQ,kBAAoB,EAAA6pB,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAtO,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAyF,WAAA,IAAiBre,EAAKS,cAAcC,EAAA,iBAC/F,kBAAoB,EAAAumB,SAAU,KAC1B,kBAAoBuD,GAAY,CAAEnY,gBAAiBuY,EAAOvY,gBAAiBV,WAAYiZ,EAAOjZ,gBAG1GvU,KAAKmuB,eAAkBX,IACnB,MAAM,SAAElO,EAAQ,QAAEtV,EAAO,MAAE3E,GAAUrF,KAAKF,MAC1C,IAAI2tB,GAAa,EACjB,IAAK,MAAMC,KAAaF,EAAOY,cAAcT,oBACzC,GAAID,IAAc1jB,GACb3E,GAASA,EAAMkG,UAAYlG,EAAMkG,SAAS,OAC1CmiB,IAAc,KAAa1jB,IAA2C,IAAhCA,EAAQwB,QAAQ,KAAoB,CAC3EiiB,GAAa,EACb,MAGR,OAAIA,EACQ,kBAAoB1D,EAAa,CAAEzK,SAAUA,EAAUgJ,cAAekF,EAAOY,cAAc9F,cAAerT,gBAAiBuY,EAAOvY,gBAAiBV,WAAYiZ,EAAOjZ,aAEzKiZ,EAAOY,cAAcC,eACnBhB,GAEJ,MAGXrtB,KAAKsuB,kBAAoB,KACrB,MAAM,cAAEC,EAAa,QAAEC,GAAYxuB,KAAKF,MAClC2uB,EAAiB,GACvBD,EAAQzrB,KAAI2rB,IACR,MAAMlB,EAASe,EAAcG,GACvBC,EAAiB3uB,KAAK4uB,aAAapB,GAClB,OAAnBmB,GACAF,EAAe1gB,KAAK4gB,MAG5B,MAAME,EAAO7C,KAAK8C,MAAML,EAAe3sB,OAAS,GAAM2sB,EAAe3sB,OAAS,EACxEitB,EAAoB,GACpBC,EAAqB,GAC3B,IAAK,IAAIvc,EAAI,EAAGA,EAAIoc,EAAMpc,IAClBgc,EAAehc,KAAO4a,IACtB0B,EAAkBhhB,KAAK0gB,EAAehc,IAEtCA,EAAIoc,EAAOJ,EAAe3sB,QACtB2sB,EAAehc,EAAIoc,KAAUxB,IAC7B2B,EAAmBjhB,KAAK0gB,EAAehc,EAAIoc,IAIvD,MAAO,CAAEE,kBAAAA,EAAmBC,mBAAAA,IAIpCJ,aAAapB,GACT,OAAQA,EAAOtkB,MACX,IAAK,UACD,OAAOlJ,KAAKutB,gBAAgBC,GAChC,IAAK,OACD,OAAOxtB,KAAK4tB,eAChB,IAAK,WACD,OAAO5tB,KAAKiuB,iBAAiBT,GACjC,IAAK,cACD,OAAOxtB,KAAKkuB,oBAAoBV,GACpC,IAAK,UACD,OAAOxtB,KAAKmuB,eAAeX,GAC/B,QACI,OAAO,MAGnBhoB,SAEI,MAAM,kBAAEupB,EAAiB,mBAAEC,GAAuBhvB,KAAKsuB,oBACvD,OAAQ,kBAAoB,EAAA1B,KAAM,CAAEC,WAAW,GAC3C,kBAAoB,EAAAC,SAAU,CAAEE,GAAI,GAAIiC,GAAI,GACxC,kBAAoB,EAAArC,KAAM,CAAEC,WAAW,GAAQkC,EAAkBhsB,KAAI,CAACyqB,EAAQ/U,IACnE,kBAAoB,EAAAqU,SAAU,CAAE5pB,IAAK,UAAUuV,KAAW+U,OAEzE,kBAAoB,EAAAV,SAAU,CAAEE,GAAI,GAAIiC,GAAI,GACxC,kBAAoB,EAAArC,KAAM,CAAEC,WAAW,GAAQmC,EAAmBjsB,KAAI,CAACyqB,EAAQ/U,IACpE,kBAAoB,EAAAqU,SAAU,CAAE5pB,IAAK,UAAUuV,KAAW+U,SAIrF,MAAM0B,IAAmB,EAAAhpB,EAAA,IAAWonB,K,uXC7I7B,MAAMzI,EAAc,CACvBsK,oBAAqB,CACjBC,KAAM,QAGVC,kBAAmB,CACfC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJC,8BAA+B,CAC3BP,KAAM,OACNQ,gBAAiB,OAErBC,gBAAiB,CACbT,KAAM,QAEVzI,YAAa,EACbmJ,qBAAsB,CAClBV,KAAM,QAGVW,mBAAoB,CAChBC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJC,+BAAgC,CAC5BjB,KAAM,OACNQ,gBAAiB,OAErBU,iBAAkB,CACdlB,KAAM,QAEVmB,MAAO,CACHC,UAAW,CACP5I,QAAS,IAEb6I,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,QAEZE,WAAY,CACR9Q,SAAU,IAGlB+Q,MAAO,CACHL,UAAW,CACP5I,QAAS,IAEb6I,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,UAIPjqB,EAAS,CAClBqqB,MAAO,CACHxT,UAAWpJ,EAAA,UAEf3U,MAAO,CACH2H,WAAY,IAAMC,EAAA,WCpE1B,MAAM4pB,UAAgC,cAClClxB,cACIE,SAASuH,WACTtH,KAAKmqB,aAAe,gBACpBnqB,KAAKoqB,SAAWhqB,EAAA,EAChBJ,KAAKS,MAAQ,CACTuwB,aAAc,IAAI3oB,IAClBmW,MAAO,GAEXxe,KAAKixB,UAAY,KACb,MAAM,gBAAEpB,EAAe,8BAAEF,EAA6B,iBAAEW,EAAgB,+BAAED,GAAmCrwB,KAAKF,MAC5GoxB,EAAU5tB,EAAA,uBACV6tB,EAAwB7tB,EAAA,qCACxB8tB,EAA+B9tB,EAAA,uCAC/B+tB,EAAiB/tB,EAAA,yBAEjBguB,EAAS,CACX,CACIC,UAAW,eACX3tB,KAAM0sB,EACNkB,WAAY,CACRvtB,MAAM,QAAmBqsB,EAAkBY,GAAS,GAAM,EAAM,EAAG5tB,EAAA,8BACnEmuB,OAAQ,CACJrC,KAAMvK,EAAYkL,mBAAmB,GACrC7mB,KAAM,SAEV4hB,SAAS,QAAmBwF,EAAkBe,GAAgB,GAAO,EAAO,IAEhFje,MAAO,CACHxP,KAAMlD,OAAOC,OAAOD,OAAOC,OAAO,GAAIkkB,EAAYyL,kBAAmB,CAAEI,OAAQ7L,EAAYkL,mBAAmB,OAGtH,CACIwB,UAAW,cACX3tB,KAAMisB,EACN2B,WAAY,CACRvtB,MAAM,QAAmB4rB,EAAiBqB,GAAS,GAAM,EAAO,EAAG5tB,EAAA,8BACnEmuB,OAAQ,CACJrC,KAAMvK,EAAYwK,kBAAkB,GACpCnmB,KAAM,SAEV4hB,SAAS,QAAmB+E,EAAiBwB,GAAgB,GAAO,IAExEje,MAAO,CACHxP,KAAMlD,OAAOC,OAAOD,OAAOC,OAAO,GAAIkkB,EAAYgL,iBAAkB,CAAEa,OAAQ7L,EAAYwK,kBAAkB,OAGpH,CACIkC,UAAW,6BACX3tB,KAAMysB,EACNmB,WAAY,CACRvtB,MAAM,QAAmBosB,EAAgCc,GAAuB,GAAM,EAAM,EAAG7tB,EAAA,4CAC/FmuB,OAAQ,CACJrC,KAAMvK,EAAYkL,mBAAmB,GACrC7mB,KAAM,QAEV4hB,SAAS,QAAmBuF,EAAgCe,GAA8B,GAAO,EAAO,IAE5Ghe,MAAO,CACHxP,KAAMlD,OAAOC,OAAOD,OAAOC,OAAO,GAAIkkB,EAAYwL,gCAAiC,CAAEK,OAAQ7L,EAAYkL,mBAAmB,OAGpI,CACIwB,UAAW,4BACX3tB,KAAM+rB,EACN6B,WAAY,CACRvtB,MAAM,QAAmB0rB,EAA+BwB,GAAuB,GAAM,EAAO,EAAG7tB,EAAA,4CAC/FmuB,OAAQ,CACJrC,KAAMvK,EAAYwK,kBAAkB,GACpCnmB,KAAM,QAEV4hB,SAAS,QAAmB6E,EAA+ByB,GAA8B,GAAO,IAEpGhe,MAAO,CACHxP,KAAMlD,OAAOC,OAAOD,OAAOC,OAAO,GAAIkkB,EAAY8K,+BAAgC,CAAEe,OAAQ7L,EAAYwK,kBAAkB,QAIhIqC,EAAyB1xB,KAAK2xB,4BACpC3xB,KAAKwE,SAAS,CAAEktB,uBAAAA,EAAwBJ,OAAAA,KAE5CtxB,KAAKuqB,SAAW,CAAC+G,EAAQ7Y,KACrB,MAAM,aAAEuY,GAAiBhxB,KAAKS,MAC9B,OAAQ,kBAAoBmxB,EAAA,EAAW,CAAEhuB,KAAOotB,EAAaa,IAAIpZ,GAAuB,CAAC,CAAE4O,EAAG,OAApBiK,EAAO1tB,KAAsBkuB,cAAe,YAAa5uB,IAAKouB,EAAOC,UAAWttB,KAAMqtB,EAAOC,UAAWne,MAAOke,EAAOle,SAGpMpT,KAAK2xB,0BAA4B,KAC7B,MAAM,UAAEI,EAAS,cAAErJ,GAAkB1oB,KAAKF,MAEpCkyB,GAAyB,OAAgB,UAAW,UAC1D,OAAQ,kBAAoBA,EAAwB,CAAEC,gBAAiB,IAAK3K,OAAQ,EAAGC,MAAAA,MAAY,QAAgBA,EAAOwK,EAAWrJ,GAAgBwJ,qBAAqB,EAAMC,iBAAkB,IAAKC,eAAgB,CAC/MvK,OAAQ,IACRC,KAAM,EACNC,MAAO,EACPC,IAAK,MAGjBhoB,KAAKqyB,UAAY,KACb,MAAM,kBAAEnH,GAAsBlrB,KAAKF,OAC7B,aAAEkxB,EAAY,OAAEM,EAAM,MAAE9S,GAAUxe,KAAKS,MACvCkmB,EAAcuE,IAAwC1M,EAAQ,IAAMqG,EAAY8B,YAAc,GACpG,OAAQ,kBAAoBF,EAAA,GAAa,CAAE7iB,MAAM,QAAc0tB,EAAQN,GAAetN,OAAQ,GAAIgD,OAAQ,GAAIC,YAAaA,EAAa1iB,KAAM,YAGlJjE,KAAKsyB,kBAAqB7Z,IACtB,MAAMuY,GAAe,QAAiBhxB,KAAKS,MAAM6wB,OAAQtxB,KAAKS,MAAMuwB,aAAcvY,GAClFzY,KAAKwE,SAAS,CAAEwsB,aAAAA,KAEpBhxB,KAAKqqB,aAAe,KAChB,MAAM,MAAE7L,GAAUxe,KAAKS,OACjB,YAAE6pB,EAAc,GAAMtqB,KAAKmqB,aAAatpB,SAAW,GACrDypB,IAAgB9L,GAChBxe,KAAKwE,SAAS,CAAEga,MAAO8L,KAInCziB,oBACI7H,KAAKixB,YACLjxB,KAAKoqB,UAAW,QAAkBpqB,KAAKmqB,aAAatpB,QAASb,KAAKqqB,cAEtEtlB,mBAAmBC,GACXA,EAAU6qB,kBAAoB7vB,KAAKF,MAAM+vB,iBACzC7qB,EAAU2qB,gCAAkC3vB,KAAKF,MAAM6vB,+BACvD3qB,EAAUsrB,mBAAqBtwB,KAAKF,MAAMwwB,kBAC1CtrB,EAAUqrB,iCAAmCrwB,KAAKF,MAAMuwB,gCACxDrwB,KAAKixB,YAGbnF,uBACQ9rB,KAAKoqB,UACLpqB,KAAKoqB,WAGbmI,aACI,MAAM,8BAAE5C,EAA6B,+BAAEU,GAAmCrwB,KAAKF,MACzE0yB,EAAqB7C,GACrB,EAAA8C,EAAA,IAAQ,QAAa9C,GAA+B,GAAM,GAAM,IAChE,EACA+C,EAAsBrC,GACtB,EAAAoC,EAAA,IAAQ,QAAapC,GAAgC,GAAM,GAAM,IACjE,EACN,OAAOmC,EAAqB,GAAKE,EAAsB,EAAI1G,KAAK2G,IAAIH,EAAoBE,GAAuB,GAGnHE,YACI,MAAM,aAAE5B,EAAY,OAAEM,GAAWtxB,KAAKS,MAOtC,OANe,OAA2B,CACtCoyB,YAAY,QAAcvB,GAC1BwB,SAAUra,IAAS,QAAeuY,EAAcvY,GAChDsa,WAAY,SACZC,cAAelzB,GAASE,KAAKsyB,kBAAkBxyB,EAAM2Y,SAI7DjT,SACI,MAAM,sBAAEytB,EAAqB,OAAEvP,EAAM,KAAE9gB,EAAI,gBAAEswB,EAAkBxP,EAAM,QAAEkE,EAAU,CAC7EC,OAAQ,IACRC,KAAM,EACNC,MAAO,EACPC,IAAK,GACR,MAAEzoB,EAAK,WAAE4zB,EAAU,WAAEC,GAAgBpzB,KAAKF,OACrC,uBAAE4xB,EAAsB,aAAEV,EAAY,OAAEM,EAAM,MAAE9S,GAAUxe,KAAKS,MAC/D4yB,GAAS,IAAAC,IAAUhC,EAAQN,GAC3BrnB,EAAU3J,KAAKuyB,aACfgB,EAAUvH,KAAK8C,MAAMnlB,EAAU,GAC/B6pB,EAA0BP,GAC1BzU,EAAQ,IACJ0U,EAAkB,GAEtBA,EAEAO,EAAY/B,EACZ,iBAAmBA,EAAwB,CACzCgC,UAAU,QAAgBpC,EAAQN,GAClCpK,eAAiB,kBAAoB+M,EAAA,EAAoB,CAAElM,YAAY,QAAc6J,EAAQN,GAAc,GAAOzxB,MAAOgoB,GAAS3kB,EAAKS,cAAcC,EAAA,qBAA6B,CAAEswB,IAAKrM,EAAMH,aAEjM/gB,EACN,OAAQ,kBAAoB,MAAO,CAAEqJ,UAAW,gBAAiBtO,IAAKpB,KAAKmqB,cACvE,kBAAoB,EAAA7O,MAAO,CAAEC,aAAc,KAAMnI,MAAO3M,EAAOlH,MAAOic,KAAM,EAAAyF,WAAA,IAAiB1hB,GAC7F,kBAAoB,MAAO,CAAE6T,MAAO1S,OAAOC,OAAOD,OAAOC,OAAO,GAAI8F,EAAOqqB,OAAQ,CAAEpN,OAAQ8P,KACzF,kBAAoB,MAAO,CAAEpgB,MAAO,CAAEsQ,OAAAA,EAAQlF,MAAAA,IAC1C,kBAAoBqV,EAAA,EAAO,CAAEC,mBAAoBL,EAAWJ,OAAQA,EAAQU,OAAQ/zB,KAAK4yB,YAAalP,OAAQA,EAAQ8D,gBAAiBxnB,KAAKqyB,YAAa5K,YAAY,QAAc6J,EAAQN,GAAerJ,eAAgB,SAAUC,QAASA,EAASoM,MAAO,IAAYxV,MAAOA,GAC5Q8S,GACIA,EAAOvuB,KAAI,CAACqJ,EAAGqM,IACJzY,KAAKuqB,SAASne,EAAGqM,KAEhC,kBAAoBwb,EAAAC,EAAW,CAAEld,MAAOmc,EAAY/f,MAAOyR,EAAYgM,MAAOsD,WAAY,CAAC,EAAGZ,EAAS5pB,KACvG,kBAAoBsqB,EAAAC,EAAW,CAAEE,eAAe,EAAMpd,MAAOoc,EAAYhgB,MAAOyR,EAAY0L,aAGpH,MAAM8D,GAAsB,EAAAnuB,EAAA,IAAW6qB,G,4FCvMhC,MAIM,EAAS,CAClBuD,eAAgB,CACZptB,WAAYC,EAAA,UAEhB6d,cAAe,CACXtB,OAAQ,QACR1P,aAAcpN,EAAA,SACd0W,UAAWD,EAAA,UAEfkX,UAAW,CACPvgB,aAAcE,EAAA,SACdoJ,UAAWpJ,EAAA,UAEf+V,eAAgB,CACZ3M,UAAW1W,EAAA,UAEf4tB,WAAY,CACRxgB,aAAcE,EAAA,SACdoJ,UAAWpJ,EAAA,UAEfugB,WAAY,CACRnX,UAAWpJ,EAAA,WCfnB,MAAMwgB,UAAoC,cACtC70B,cACIE,SAASuH,WACTtH,KAAKqlB,YAAc,IACP,kBAAoB,aAAgB,KACxC,kBAAoB,EAAAC,SAAU,CAAElS,MAAO,gBAAsBoL,MAAO+G,EAAA,OACpE,kBAAoB,EAAAD,SAAU,CAAElS,MAAO,iBAAuBoL,MAAO+G,EAAA,QAGjF1d,oBACI,MAAM,YAAEqb,EAAW,mBAAEyR,EAAkB,oBAAEC,EAAmB,gBAAE3f,EAAe,WAAEV,GAAevU,KAAKF,MACnGojB,EAAYjO,EAAiBV,EAAYogB,GACzCzR,EAAYjO,EAAiBV,EAAYqgB,GAE7C7vB,mBAAmBC,GACf,MAAM,YAAEke,EAAW,SAAE5D,EAAQ,mBAAEqV,EAAkB,oBAAEC,EAAmB,gBAAE3f,EAAe,WAAEV,GAAevU,KAAKF,MACzGkF,EAAU2vB,qBAAuBA,GAAsB3vB,EAAUsa,WAAaA,GAC9E4D,EAAYjO,EAAiBV,EAAYogB,GAEzC3vB,EAAU4vB,sBAAwBA,GAAuB5vB,EAAUsa,WAAaA,GAChF4D,EAAYjO,EAAiBV,EAAYqgB,GAGjDpvB,SACI,MAAM,cAAEqvB,EAAa,yBAAEC,EAAwB,eAAEC,EAAc,0BAAEC,EAAyB,KAAEpyB,GAAS5C,KAAKF,MAEpGm1B,GAAc,QAAgBJ,EAAe,EAAiB,OAAQ,QACtElF,GAAgC,QAAgBkF,EAAe,EAAiB,OAAQ,kBAExFK,GAAe,QAAgBH,EAAgB,EAAiB,OAAQ,QACxE1E,GAAiC,QAAgB0E,EAAgB,EAAiB,OAAQ,kBAC1FI,EAAYN,GAAiBA,EAActU,MAAQsU,EAActU,KAAKC,OAASqU,EAActU,KAAKC,MAAMxB,KACxG6V,EAActU,KAAKC,MAAMxB,KAAKwB,MAAMC,MACpC,MACA2U,EAAOxyB,EAAKS,cAAcC,EAAA,gBAAwB,CAAEmd,MAAO0U,IACjE,OAAQ,kBAAoB,MAAO,CAAE/hB,MAAO,kBACxC,kBAAoB,MAAO,CAAEA,MAAO,aAAiD,IAA7B0hB,GACtB,IAA9BE,EAAoDh1B,KAAKqlB,cAAkB,kBAAoBgP,EAAqB,CAAEpB,uBAAuB,EAAMC,gBAAiB,IAAuCrD,gBAAiBoF,EAAatF,8BAA+BA,EAA+BjH,cAAe,GAAIqJ,UAAWrb,EAAA,GAAagN,OD9CjV,IC8CkX4M,iBAAkB4E,EAAc7E,+BAAgCA,EAAgC8C,WAAYvwB,EAAKS,cAAcC,EAAA,kCAA0C8vB,WAAYxwB,EAAKS,cAAcC,EAAA,2BAAmC,CAC1lBmd,MAAO2U,SAI3B,MAAMrvB,GAAkB,SAAsB,CAACtF,GAAS6e,SAAAA,EAAUrK,gBAAAA,EAAiBV,WAAAA,MAC/E,MAAMlP,GAAQ,QAAWqE,SAASxI,QAC5B8I,GAAU,QAAa3E,GACvB4E,GAAe,QAAgB5E,GAC/BgwB,EAAY,CACdvS,UAAWxD,EACX5T,UAAWhL,OAAOC,OAAOD,OAAOC,OAAO,GAAK0E,GAASA,EAAMqG,WAAarG,EAAMqG,WAAc1B,GAAW,CAAE,CAACA,QAAU3D,IACpHkF,SAAU7K,OAAOC,OAAO,GAAKqJ,GAAW,CAAE,CAACA,GAAUC,KAEnDqrB,EAAe50B,OAAOC,OAAOD,OAAOC,OAAO,GAAI00B,GAAY,CAAEjrB,OAAQ,CACnEC,WAAY,QACZC,iBAAkB,QAClBC,kBAAmB,KAErBoqB,GAAqB,QAASW,GAC9BC,EAAgB70B,OAAOC,OAAOD,OAAOC,OAAO,GAAI00B,GAAY,CAAEjrB,OAAQ,CACpEC,WAAY,QACZC,iBAAkB,QAClBC,kBAAmB,KAErBqqB,GAAsB,QAASW,GAOrC,MAAO,CACHD,aAAAA,EACAX,mBAAAA,EACAE,cARkB,kBAA6Bp0B,EAAOwU,EAAiBV,EAAYogB,GASnFG,yBAR6B,6BAAwCr0B,EAAOwU,EAAiBV,EAAYogB,GASzGY,cAAAA,EACAX,oBAAAA,EACAG,eATmB,kBAA6Bt0B,EAAOwU,EAAiBV,EAAYqgB,GAUpFI,0BAT8B,6BAAwCv0B,EAAOwU,EAAiBV,EAAYqgB,OAY5G5uB,EAAqB,CACvBkd,YAAa,kBAEXsS,GAA0B,EAAAtvB,EAAA,KAAW,IAAAC,SAAQJ,EAAiBC,EAAzB,CAA6C0uB,ICrF3E,EAAc,CAEvBrF,kBAAmB,CACfC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJ+F,iBAAkB,CACdrG,KAAM,QAEVzI,YAAa,EAEboJ,mBAAoB,CAChBC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJsF,kBAAmB,CACftG,KAAM,QAEVmB,MAAO,CACHC,UAAW,CACP5I,QAAS,IAEb6I,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,QAEZE,WAAY,CACR9Q,SAAU,IAGlB+Q,MAAO,CACHL,UAAW,CACP5I,QAAS,IAEb6I,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,UAIP,EAAS,CAClBI,MAAO,CACHxT,UAAWpJ,EAAA,UAEf3U,MAAO,CACH2H,WAAY,IAAMC,EAAA,WCvD1B,MAAMwuB,UAAiC,cACnC91B,cACIE,SAASuH,WACTtH,KAAKmqB,aAAe,gBACpBnqB,KAAKoqB,SAAWhqB,EAAA,EAChBJ,KAAKS,MAAQ,CACTuwB,aAAc,IAAI3oB,IAClBmW,MAAO,GAEXxe,KAAKixB,UAAY,KACb,MAAM,YAAEgE,EAAW,aAAEC,EAAY,qBAAEU,GAAuB,GAAU51B,KAAKF,MACnEoD,EAAM0yB,EAAuBtyB,EAAA,wBAAiCA,EAAA,uBAC9DuyB,EAAaD,EAAuBtyB,EAAA,0BAAmCA,EAAA,yBAEvEguB,EAAS,CACX,CACIC,UAAW,eACX3tB,KAAMsxB,EACN1D,WAAY,CACRvtB,MAAM,QAAmBixB,EAAchyB,GAAK,GAAM,EAAM,EAAGI,EAAA,+BAC3DmuB,OAAQ,CACJrC,KAAM,wBACNlmB,KAAM,SAEV4hB,SAAS,QAAmBoK,EAAcW,GAAY,GAAO,EAAO,IAExEziB,MAAO,CACHxP,KAAMlD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,qBAAgC,CAAE+vB,OAAQ,4BAGxF,CACIa,UAAW,cACX3tB,KAAMqxB,EACNzD,WAAY,CACRvtB,MAAM,QAAmBgxB,EAAa/xB,GAAK,GAAM,EAAO,EAAGI,EAAA,+BAC3DmuB,OAAQ,CACJrC,KAAM,uBACNlmB,KAAM,SAEV4hB,SAAS,QAAmBmK,EAAaY,GAAY,GAAO,IAEhEziB,MAAO,CACHxP,KAAMlD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,oBAA+B,CAAE+vB,OAAQ,4BAIrFgB,EAAyB1xB,KAAK2xB,4BACpC3xB,KAAKwE,SAAS,CAAEktB,uBAAAA,EAAwBJ,OAAAA,KAE5CtxB,KAAKuqB,SAAW,CAAC+G,EAAQ7Y,KACrB,MAAM,aAAEuY,GAAiBhxB,KAAKS,MAC9B,OAAQ,kBAAoBmxB,EAAA,EAAW,CAAEhuB,KAAOotB,EAAaa,IAAIpZ,GAAuB,CAAC,CAAE4O,EAAG,OAApBiK,EAAO1tB,KAAsBkuB,cAAe,YAAa5uB,IAAKouB,EAAOC,UAAWttB,KAAMqtB,EAAOC,UAAWne,MAAOke,EAAOle,SAGpMpT,KAAK2xB,0BAA4B,KAC7B,MAAM,UAAEI,EAAS,cAAErJ,GAAkB1oB,KAAKF,MAEpCkyB,GAAyB,OAAgB,UAAW,UAC1D,OAAQ,kBAAoBA,EAAwB,CAAEC,gBAAiB,IAAK3K,OAAQ,EAAGC,MAAAA,MAAY,QAAgBA,EAAOwK,EAAWrJ,GAAgBwJ,qBAAqB,EAAMC,iBAAkB,IAAKC,eAAgB,CAC/MvK,OAAQ,IACRC,KAAM,EACNC,MAAO,EACPC,IAAK,MAGjBhoB,KAAKqyB,UAAY,KACb,MAAM,kBAAEnH,GAAsBlrB,KAAKF,OAC7B,aAAEkxB,EAAY,OAAEM,GAAWtxB,KAAKS,MACtC,OAAQ,kBAAoBgmB,EAAA,GAAa,CAAE7iB,MAAM,QAAc0tB,EAAQN,GAAetN,OAAQ,GAAIgD,OAAQ,GAAIC,YAAauE,EAAmBjnB,KAAM,YAGxJjE,KAAKsyB,kBAAqB7Z,IACtB,MAAMuY,GAAe,QAAiBhxB,KAAKS,MAAM6wB,OAAQtxB,KAAKS,MAAMuwB,aAAcvY,GAClFzY,KAAKwE,SAAS,CAAEwsB,aAAAA,KAEpBhxB,KAAKqqB,aAAe,KAChB,MAAM,MAAE7L,GAAUxe,KAAKS,OACjB,YAAE6pB,EAAc,GAAMtqB,KAAKmqB,aAAatpB,SAAW,GACrDypB,IAAgB9L,GAChBxe,KAAKwE,SAAS,CAAEga,MAAO8L,KAInCziB,oBACI7H,KAAKixB,YACLjxB,KAAKoqB,UAAW,QAAkBpqB,KAAKmqB,aAAatpB,QAASb,KAAKqqB,cAEtEtlB,mBAAmBC,GACXA,EAAUiwB,cAAgBj1B,KAAKF,MAAMm1B,aAAejwB,EAAUkwB,eAAiBl1B,KAAKF,MAAMo1B,cAC1Fl1B,KAAKixB,YAGbnF,uBACQ9rB,KAAKoqB,UACLpqB,KAAKoqB,WAGbmI,aACI,MAAM,YAAE0C,EAAW,aAAEC,GAAiBl1B,KAAKF,MACrCg2B,EAAeZ,GAAe,EAAAzC,EAAA,IAAQ,QAAayC,GAAc,GAAM,GAAM,IAAM,EACnFa,EAAcd,GAAc,EAAAxC,EAAA,IAAQ,QAAawC,GAAa,GAAM,GAAM,IAAM,EACtF,OAAOc,EAAc,GAAKD,EAAe,EAAI9J,KAAK2G,IAAIoD,EAAaD,GAAgB,GAGvFlD,YACI,MAAM,aAAE5B,EAAY,OAAEM,GAAWtxB,KAAKS,MAOtC,OANe,OAA2B,CACtCoyB,YAAY,QAAcvB,GAC1BwB,SAAUra,IAAS,QAAeuY,EAAcvY,GAChDsa,WAAY,SACZC,cAAelzB,GAASE,KAAKsyB,kBAAkBxyB,EAAM2Y,SAI7DjT,SACI,MAAM,OAAEke,EAAM,KAAE9gB,EAAI,gBAAEswB,EAAkBxP,EAAM,QAAEkE,EAAU,CACtDC,OAAQ,IACRC,KAAM,EACNC,MAAO,EACPC,IAAK,GACR,MAAEzoB,EAAK,WAAE4zB,EAAU,WAAEC,GAAgBpzB,KAAKF,OACrC,uBAAE4xB,EAAsB,aAAEV,EAAY,OAAEM,EAAM,MAAE9S,GAAUxe,KAAKS,MAC/D4yB,GAAS,IAAAC,IAAUhC,EAAQN,GAC3BrnB,EAAU3J,KAAKuyB,aACfgB,EAAUvH,KAAK8C,MAAMnlB,EAAU,GAE/B8pB,EAAY/B,EACZ,iBAAmBA,EAAwB,CACzCgC,UAAU,QAAgBpC,EAAQN,GAClCpK,eAAiB,kBAAoB+M,EAAA,EAAoB,CAAElM,YAAY,QAAc6J,EAAQN,GAAc,GAAOzxB,MAAOgoB,GAAS3kB,EAAKS,cAAcC,EAAA,qBAA6B,CAAEswB,IAAKrM,EAAMH,aAEjM/gB,EACN,OAAQ,kBAAoB,MAAO,CAAEqJ,UAAW,gBAAiBtO,IAAKpB,KAAKmqB,cACvE,kBAAoB,EAAA7O,MAAO,CAAEC,aAAc,KAAMnI,MAAO,QAAcoI,KAAM,EAAAyF,WAAA,IAAiB1hB,GAC7F,kBAAoB,MAAO,CAAE6T,MAAO1S,OAAOC,OAAOD,OAAOC,OAAO,GAAI,SAAe,CAAE+iB,OAAQwP,KACzF,kBAAoB,MAAO,CAAE9f,MAAO,CAAEsQ,OAAAA,EAAQlF,MAAAA,IAC1C,kBAAoBqV,EAAA,EAAO,CAAEC,mBAAoBL,EAAWJ,OAAQA,EAAQU,OAAQ/zB,KAAK4yB,YAAalP,OAAQA,EAAQ8D,gBAAiBxnB,KAAKqyB,YAAa5K,YAAY,QAAc6J,EAAQN,GAAerJ,eAAgB,SAAUC,QAASA,EAASoM,MAAO,IAAYxV,MAAOA,GAC5Q8S,GACIA,EAAOvuB,KAAI,CAACqJ,EAAGqM,IACJzY,KAAKuqB,SAASne,EAAGqM,KAEhC,kBAAoBwb,EAAAC,EAAW,CAAEld,MAAOmc,EAAY/f,MAAO,QAAmB+gB,WAAY,CAAC,EAAGZ,EAAS5pB,KACvG,kBAAoBsqB,EAAAC,EAAW,CAAEE,eAAe,EAAMpd,MAAOoc,EAAYhgB,MAAO,eAGxG,MAAM4iB,GAAuB,EAAA9vB,EAAA,IAAWyvB,GC/IxC,MAAMM,WAAqC,cACvCp2B,cACIE,SAASuH,WACTtH,KAAKqlB,YAAc,IACP,kBAAoB,aAAgB,KACxC,kBAAoB,EAAAC,SAAU,CAAElS,MAAO,gBAAsBoL,MAAO+G,EAAA,OACpE,kBAAoB,EAAAD,SAAU,CAAElS,MAAO,iBAAuBoL,MAAO+G,EAAA,QAGjF1d,oBACI,MAAM,YAAEqb,EAAW,mBAAEyR,EAAkB,oBAAEC,EAAmB,gBAAE3f,EAAe,WAAEV,GAAevU,KAAKF,MACnGojB,EAAYjO,EAAiBV,EAAYogB,GACzCzR,EAAYjO,EAAiBV,EAAYqgB,GAE7C7vB,mBAAmBC,GACf,MAAM,YAAEke,EAAW,SAAE5D,EAAQ,mBAAEqV,EAAkB,oBAAEC,EAAmB,gBAAE3f,EAAe,WAAEV,GAAevU,KAAKF,MACzGkF,EAAU2vB,qBAAuBA,GAAsB3vB,EAAUsa,WAAaA,GAC9E4D,EAAYjO,EAAiBV,EAAYogB,GAEzC3vB,EAAU4vB,sBAAwBA,GAAuB5vB,EAAUsa,WAAaA,GAChF4D,EAAYjO,EAAiBV,EAAYqgB,GAGjDpvB,SACI,MAAM,cAAEqvB,EAAa,yBAAEC,EAAwB,eAAEC,EAAc,0BAAEC,EAAyB,WAAEzgB,EAAU,KAAE3R,GAAS5C,KAAKF,MAChHo2B,EAA6B,SAAf3hB,EAEd0gB,GAAc,QAAgBJ,EAAeqB,EAAc,EAAkB,EAAe,OAAQA,EAAc,OAAS,SAC3HhB,GAAe,QAAgBH,EAAgBmB,EAAc,EAAkB,EAAe,OAAQA,EAAc,OAAS,SAC7Hf,EAAYN,GAAiBA,EAActU,MAAQsU,EAActU,KAAKC,OAASqU,EAActU,KAAKC,MAAMxB,KACxG6V,EAActU,KAAKC,MAAMxB,KAAKwB,MAAMC,MACpC,MACAuF,EAAa6O,GAAiBA,EAActU,MAAQsU,EAActU,KAAKC,OAASqU,EAActU,KAAKC,MAAMqF,MACzGgP,EAActU,KAAKC,MAAMqF,MAAMpF,WAC/Bpa,EACN,IAAI+sB,EACJ,GAAI8C,EAAa,CACb,MAAMzV,EAAQ7d,EAAKS,cAAcC,EAAA,gBAAwB,CAAEmd,MAAO0U,IAClE/B,EAAaxwB,EAAKS,cAAcC,EAAA,2BAAmC,CAAEmd,MAAAA,SAEpE,GAAIuF,GAAcmQ,OAAOryB,MAAMqyB,OAAOtB,EAActU,KAAKC,MAAMqF,MAAMpF,QACtE2S,EAAaxwB,EAAKS,cAAcC,EAAA,QAAgB,CAAEmd,OAAO,QAAeuF,SAEvE,CACD,MAAMvF,EAAQ7d,EAAKS,cAAcC,EAAA,4BAAoC,CAAE9B,MAAO+S,IAC9E6e,EAAaxwB,EAAKS,cAAcC,EAAA,QAAgB,CAAEmd,OAAO,QAAeA,KAE5E,OAAQ,kBAAoB,MAAO,CAAErN,MAAO,kBACxC,kBAAoB,MAAO,CAAEA,MAAO,cAAkD,IAA7B0hB,GACvB,IAA9BE,EAAoDh1B,KAAKqlB,cAAkB,kBAAoB2Q,EAAsB,CAAE9C,gBAAiB,IAAuC+B,YAAaA,EAAavM,cAAe,GAAIqJ,UAAWrb,EAAA,GAAagN,OJ1DnP,II0DoRwR,aAAcA,EAAczU,MAAOyV,EAAcf,EAAYnP,EAAYmN,WAAYvwB,EAAKS,cAAcC,EAAA,kCAA0C8vB,WAAYA,OAGnc,MAAM,IAAkB,SAAsB,CAAC3yB,GAAS6e,SAAAA,EAAUrK,gBAAAA,EAAiBV,WAAAA,MAC/E,MAAMlP,GAAQ,QAAWqE,SAASxI,QAC5B6I,GAAkB,QAAmB1E,GACrC2E,EAAUD,EAAkB,MAAe,QAAa1E,GACxD4E,EAAeF,IAAoC,QAAgB1E,GACnEgwB,EAAY,CACdvS,UAAWxD,EACX5T,UAAWhL,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAK0E,GAASA,EAAMqG,WAAarG,EAAMqG,WAAcrG,GAASA,EAAM+E,QAAU/E,EAAM+E,OAAOmU,SAAW,CAAE,CAAC,GAAG,eAA4BlZ,EAAM+E,OAAOmU,UAAcvU,GAAW,CAAE,CAACA,QAAU3D,IAChPkF,SAAU7K,OAAOC,OAAO,GAAKqJ,GAAW,CAAE,CAACA,GAAUC,KAEnDqrB,EAAe50B,OAAOC,OAAOD,OAAOC,OAAO,GAAI00B,GAAY,CAAEjrB,OAAQ,CACnEC,WAAY,QACZC,iBAAkB,QAClBC,kBAAmB,KAErBoqB,GAAqB,QAASW,GAC9BC,EAAgB70B,OAAOC,OAAOD,OAAOC,OAAO,GAAI00B,GAAY,CAAEjrB,OAAQ,CACpEC,WAAY,QACZC,iBAAkB,QAClBC,kBAAmB,KAErBqqB,GAAsB,QAASW,GAOrC,MAAO,CACHD,aAAAA,EACAX,mBAAAA,EACAE,cARkB,kBAA6Bp0B,EAAOwU,EAAiBV,EAAYogB,GASnFG,yBAR6B,6BAAwCr0B,EAAOwU,EAAiBV,EAAYogB,GASzGY,cAAAA,EACAX,oBAAAA,EACAG,eATmB,kBAA6Bt0B,EAAOwU,EAAiBV,EAAYqgB,GAUpFI,0BAT8B,6BAAwCv0B,EAAOwU,EAAiBV,EAAYqgB,OAY5G,GAAqB,CACvB1R,YAAa,kBAEXkT,IAA2B,EAAAlwB,EAAA,KAAW,IAAAC,SAAQ,GAAiB,GAAzB,CAA6C8vB,KChG5E,GAAc,CACvB9G,oBAAqB,CACjBC,KAAM,QAGVC,kBAAmB,CACfC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJ2G,iBAAkB,CACdjH,KAAM,QAEVkH,mBAAoB,CAChBlH,KAAM,OACNQ,gBAAiB,OAErB2G,iBAAkB,CACdnH,KAAM,QAEVzI,YAAa,EACbmJ,qBAAsB,CAClBV,KAAM,QAGVW,mBAAoB,CAChBC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJoG,kBAAmB,CACfpH,KAAM,QAEVqH,oBAAqB,CACjBrH,KAAM,OACNQ,gBAAiB,OAErB8G,kBAAmB,CACftH,KAAM,QAEVmB,MAAO,CACHC,UAAW,CACP5I,QAAS,IAEb6I,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,QAEZE,WAAY,CACR9Q,SAAU,IAGlB+Q,MAAO,CACHL,UAAW,CACP5I,QAAS,IAEb6I,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,UAIP,GAAS,CAClBI,MAAO,CACHxT,UAAWpJ,EAAA,UAEf3U,MAAO,CACH2H,WAAY,IAAMC,EAAA,WC1E1B,MAAMwvB,WAAiC,cACnC92B,cACIE,SAASuH,WACTtH,KAAKmqB,aAAe,gBACpBnqB,KAAKoqB,SAAWhqB,EAAA,EAChBJ,KAAKS,MAAQ,CACTuwB,aAAc,IAAI3oB,IAClBmW,MAAO,GAEXxe,KAAKixB,UAAY,KACb,MAAM,iBAAEoF,EAAgB,mBAAEC,EAAkB,iBAAEC,EAAgB,kBAAEC,EAAiB,oBAAEC,EAAmB,kBAAEC,GAAuB12B,KAAKF,MAC9H82B,EAAWtzB,EAAA,wBACXuzB,EAAkBvzB,EAAA,0BAClBwzB,EAAaxzB,EAAA,2BACbyzB,EAAoBzzB,EAAA,6BACpB0zB,EAAW1zB,EAAA,wBACX2zB,EAAkB3zB,EAAA,0BAElBguB,EAAS,CACX,CACIC,UAAW,gBACX3tB,KAAM8yB,EACNlF,WAAY,CACRvtB,MAAM,QAAoByyB,EAAmBM,GAAU,GAAM,EAAM,EAAG1zB,EAAA,+BACtEmuB,OAAQ,CACJrC,KAAM,yBACNlmB,KAAM,SAEV4hB,SAAS,QAAoB4L,EAAmBO,GAAiB,GAAO,EAAO,IAEnF7jB,MAAO,CACHxP,KAAMlD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,sBAAgC,CAAE+vB,OAAQ,6BAGxF,CACIa,UAAW,eACX3tB,KAAM2yB,EACN/E,WAAY,CACRvtB,MAAM,QAAoBsyB,EAAkBS,GAAU,GAAM,EAAO,EAAG1zB,EAAA,+BACtEmuB,OAAQ,CACJrC,KAAM,wBACNlmB,KAAM,SAEV4hB,SAAS,QAAoByL,EAAkBU,GAAiB,GAAO,IAE3E7jB,MAAO,CACHxP,KAAMlD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,qBAA+B,CAAE+vB,OAAQ,4BAGvF,CACIa,UAAW,kBACX3tB,KAAM6yB,EACNjF,WAAY,CACRvtB,MAAM,QAAoBwyB,EAAqBK,GAAY,GAAM,EAAM,EAAGxzB,EAAA,kCAC1EmuB,OAAQ,CACJrC,KAAM,yBACNlmB,KAAM,QAEV4hB,SAAS,QAAoB2L,EAAqBM,GAAmB,GAAO,EAAO,IAEvF3jB,MAAO,CACHxP,KAAMlD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,wBAAkC,CAAE+vB,OAAQ,6BAG1F,CACIa,UAAW,iBACX3tB,KAAM0yB,EACN9E,WAAY,CACRvtB,MAAM,QAAoBqyB,EAAoBQ,GAAY,GAAM,EAAO,EAAGxzB,EAAA,kCAC1EmuB,OAAQ,CACJrC,KAAM,wBACNlmB,KAAM,QAEV4hB,SAAS,QAAoBwL,EAAoBS,GAAmB,GAAO,IAE/E3jB,MAAO,CACHxP,KAAMlD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,uBAAiC,CAAE+vB,OAAQ,4BAGzF,CACIa,UAAW,gBACX3tB,KAAM4yB,EACNhF,WAAY,CACRvtB,MAAM,QAAoBuyB,EAAmBI,GAAU,GAAM,EAAM,EAAGtzB,EAAA,+BACtEmuB,OAAQ,CACJrC,KAAM,yBACNlmB,KAAM,SAEV4hB,SAAS,QAAoB0L,EAAmBK,GAAiB,GAAO,EAAO,IAEnFzjB,MAAO,CACHxP,KAAMlD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,sBAAgC,CAAE+vB,OAAQ,6BAGxF,CACIa,UAAW,eACX3tB,KAAMyyB,EACN7E,WAAY,CACRvtB,MAAM,QAAoBoyB,EAAkBO,GAAU,GAAM,EAAO,EAAGtzB,EAAA,+BACtEmuB,OAAQ,CACJrC,KAAM,wBACNlmB,KAAM,SAEV4hB,SAAS,QAAoBuL,EAAkBQ,GAAiB,GAAO,IAE3EzjB,MAAO,CACHxP,KAAMlD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,qBAA+B,CAAE+vB,OAAQ,6BAIrFgB,EAAyB1xB,KAAK2xB,4BACpC3xB,KAAKwE,SAAS,CAAEktB,uBAAAA,EAAwBJ,OAAAA,KAE5CtxB,KAAKuqB,SAAW,CAAC+G,EAAQ7Y,KACrB,MAAM,aAAEuY,GAAiBhxB,KAAKS,MAC9B,OAAQ,kBAAoBmxB,EAAA,EAAW,CAAEhuB,KAAOotB,EAAaa,IAAIpZ,GAAuB,CAAC,CAAE4O,EAAG,OAApBiK,EAAO1tB,KAAsBkuB,cAAe,YAAa5uB,IAAKouB,EAAOC,UAAWttB,KAAMqtB,EAAOC,UAAWne,MAAOke,EAAOle,SAGpMpT,KAAK2xB,0BAA4B,KAC7B,MAAM,UAAEI,EAAS,cAAErJ,GAAkB1oB,KAAKF,MAEpCkyB,GAAyB,OAAgB,UAAW,UAC1D,OAAQ,kBAAoBA,EAAwB,CAAEC,gBAAiB,IAAK3K,OAAQ,EAAGC,MAAAA,MAAY,QAAgBA,EAAOwK,EAAWrJ,GAAgBwJ,qBAAqB,EAAMC,iBAAkB,IAAKC,eAAgB,CAC/MvK,OAAQ,IACRC,KAAM,EACNC,MAAO,EACPC,IAAK,MAGjBhoB,KAAKqyB,UAAY,KACb,MAAM,kBAAEnH,GAAsBlrB,KAAKF,OAC7B,aAAEkxB,EAAY,OAAEM,EAAM,MAAE9S,GAAUxe,KAAKS,MACvCkmB,EAAcuE,IAAwC1M,EAAQ,IAAM,eAA0B,GACpG,OAAQ,kBAAoBiI,EAAA,GAAa,CAAE7iB,MAAM,QAAc0tB,EAAQN,GAAetN,OAAQ,GAAIgD,OAAQ,GAAIC,YAAaA,EAAa1iB,KAAM,YAGlJjE,KAAKsyB,kBAAqB7Z,IACtB,MAAMuY,GAAe,QAAiBhxB,KAAKS,MAAM6wB,OAAQtxB,KAAKS,MAAMuwB,aAAcvY,GAClFzY,KAAKwE,SAAS,CAAEwsB,aAAAA,KAEpBhxB,KAAKqqB,aAAe,KAChB,MAAM,MAAE7L,GAAUxe,KAAKS,OACjB,YAAE6pB,EAAc,GAAMtqB,KAAKmqB,aAAatpB,SAAW,GACrDypB,IAAgB9L,GAChBxe,KAAKwE,SAAS,CAAEga,MAAO8L,KAInCziB,oBACI7H,KAAKixB,YACLjxB,KAAKoqB,UAAW,QAAkBpqB,KAAKmqB,aAAatpB,QAASb,KAAKqqB,cAEtEtlB,mBAAmBC,GACXA,EAAUqxB,mBAAqBr2B,KAAKF,MAAMu2B,kBAC1CrxB,EAAUsxB,qBAAuBt2B,KAAKF,MAAMw2B,oBAC5CtxB,EAAUuxB,mBAAqBv2B,KAAKF,MAAMy2B,kBAC1CvxB,EAAUwxB,oBAAsBx2B,KAAKF,MAAM02B,mBAC3CxxB,EAAUyxB,sBAAwBz2B,KAAKF,MAAM22B,qBAC7CzxB,EAAU0xB,oBAAsB12B,KAAKF,MAAM42B,mBAC3C12B,KAAKixB,YAGbnF,uBACQ9rB,KAAKoqB,UACLpqB,KAAKoqB,WAGbmI,aACI,MAAM,mBAAE+D,EAAkB,iBAAEC,EAAgB,oBAAEE,EAAmB,kBAAEC,GAAsB12B,KAAKF,MACxF0yB,EAAqB8D,GAAqB,EAAA7D,EAAA,IAAQ,QAAa6D,GAAoB,GAAM,GAAM,IAAM,EACrGY,EAAmBX,GAAmB,EAAA9D,EAAA,IAAQ,QAAa8D,GAAkB,GAAM,GAAM,IAAM,EAC/F7D,EAAsB+D,GAAsB,EAAAhE,EAAA,IAAQ,QAAagE,GAAqB,GAAM,GAAM,IAAM,EACxGU,EAAoBT,GAAoB,EAAAjE,EAAA,IAAQ,QAAaiE,GAAmB,GAAM,GAAM,IAAM,EACxG,OAAOlE,EAAqB,GAAK0E,EAAmB,GAAKxE,EAAsB,GAAKyE,EAAoB,EAClGnL,KAAK2G,IAAIH,EAAoB0E,EAAkBxE,EAAqByE,GACpE,GAGVvE,YACI,MAAM,aAAE5B,EAAY,OAAEM,GAAWtxB,KAAKS,MAOtC,OANe,OAA2B,CACtCoyB,YAAY,QAAcvB,GAC1BwB,SAAUra,IAAS,QAAeuY,EAAcvY,GAChDsa,WAAY,SACZC,cAAelzB,GAASE,KAAKsyB,kBAAkBxyB,EAAM2Y,SAI7DjT,SACI,MAAM,sBAAEytB,EAAqB,OAAEvP,EAAM,KAAE9gB,EAAI,gBAAEswB,EAAkBxP,EAAM,QAAEkE,EAAU,CAC7EC,OAAQ,IACRC,KAAM,EACNC,MAAO,EACPC,IAAK,GACR,MAAEzoB,EAAK,WAAE4zB,EAAU,WAAEC,GAAgBpzB,KAAKF,OACrC,uBAAE4xB,EAAsB,aAAEV,EAAY,OAAEM,EAAM,MAAE9S,GAAUxe,KAAKS,MAC/D4yB,GAAS,IAAAC,IAAUhC,EAAQN,GAC3BrnB,EAAU3J,KAAKuyB,aACfgB,EAAUvH,KAAK8C,MAAMnlB,EAAU,GAC/B6pB,EAA0BP,GAC1BzU,EAAQ,IACJ0U,EAAkB,GAEtBA,EAEAO,EAAY/B,EACZ,iBAAmBA,EAAwB,CACzCgC,UAAU,QAAgBpC,EAAQN,GAClCpK,eAAiB,kBAAoB+M,EAAA,EAAoB,CAAElM,YAAY,QAAc6J,EAAQN,GAAc,GAAOzxB,MAAOgoB,GAAS3kB,EAAKS,cAAcC,EAAA,qBAA6B,CAAEswB,IAAKrM,EAAMH,aAEjM/gB,EACN,OAAQ,kBAAoB,MAAO,CAAEqJ,UAAW,gBAAiBtO,IAAKpB,KAAKmqB,cACvE,kBAAoB,EAAA7O,MAAO,CAAEC,aAAc,KAAMnI,MAAO,SAAcoI,KAAM,EAAAyF,WAAA,IAAiB1hB,GAC7F,kBAAoB,MAAO,CAAE6T,MAAO1S,OAAOC,OAAOD,OAAOC,OAAO,GAAI,UAAe,CAAE+iB,OAAQ8P,KACzF,kBAAoB,MAAO,CAAEpgB,MAAO,CAAEsQ,OAAAA,EAAQlF,MAAAA,IAC1C,kBAAoBqV,EAAA,EAAO,CAAEC,mBAAoBL,EAAWJ,OAAQA,EAAQU,OAAQ/zB,KAAK4yB,YAAalP,OAAQA,EAAQ8D,gBAAiBxnB,KAAKqyB,YAAa5K,YAAY,QAAc6J,EAAQN,GAAerJ,eAAgB,SAAUC,QAASA,EAASoM,MAAO,IAAYxV,MAAOA,GAC5Q8S,GACIA,EAAOvuB,KAAI,CAACqJ,EAAGqM,IACJzY,KAAKuqB,SAASne,EAAGqM,KAEhC,kBAAoBwb,EAAAC,EAAW,CAAEld,MAAOmc,EAAY/f,MAAO,SAAmB+gB,WAAY,CAAC,EAAGZ,EAAS5pB,KACvG,kBAAoBsqB,EAAAC,EAAW,CAAEE,eAAe,EAAMpd,MAAOoc,EAAYhgB,MAAO,gBAGxG,MAAMgkB,IAAuB,EAAAlxB,EAAA,IAAWywB,IC/NxC,MAAMU,WAAqC,cACvCx3B,cACIE,SAASuH,WACTtH,KAAKqlB,YAAc,IACP,kBAAoB,aAAgB,KACxC,kBAAoB,EAAAC,SAAU,CAAElS,MAAO,gBAAsBoL,MAAO+G,EAAA,OACpE,kBAAoB,EAAAD,SAAU,CAAElS,MAAO,iBAAuBoL,MAAO+G,EAAA,QAGjF1d,oBACI,MAAM,YAAEqb,EAAW,mBAAEyR,EAAkB,oBAAEC,EAAmB,gBAAE3f,EAAe,WAAEV,GAAevU,KAAKF,MACnGojB,EAAYjO,EAAiBV,EAAYogB,GACzCzR,EAAYjO,EAAiBV,EAAYqgB,GAE7C7vB,mBAAmBC,GACf,MAAM,YAAEke,EAAW,mBAAEyR,EAAkB,oBAAEC,EAAmB,gBAAE3f,EAAe,WAAEV,GAAevU,KAAKF,MAC/FkF,EAAU2vB,qBAAuBA,GACjCzR,EAAYjO,EAAiBV,EAAYogB,GAEzC3vB,EAAU4vB,sBAAwBA,GAClC1R,EAAYjO,EAAiBV,EAAYqgB,GAGjDpvB,SACI,MAAM,cAAEqvB,EAAa,yBAAEC,EAAwB,eAAEC,EAAc,0BAAEC,EAAyB,KAAEpyB,GAAS5C,KAAKF,MAEpGu2B,GAAmB,QAAgBxB,EAAe,EAAe,OAAQ,SACzEyB,GAAqB,QAAgBzB,EAAe,EAAe,OAAQ,WAC3E0B,GAAmB,QAAgB1B,EAAe,EAAe,OAAQ,SAEzE2B,GAAoB,QAAgBzB,EAAgB,EAAe,OAAQ,SAC3E0B,GAAsB,QAAgB1B,EAAgB,EAAe,OAAQ,WAC7E2B,GAAoB,QAAgB3B,EAAgB,EAAe,OAAQ,SAC3E/O,EAAa6O,GAAiBA,EAActU,MAAQsU,EAActU,KAAKC,OAASqU,EAActU,KAAKC,MAAMqF,MACzGgP,EAActU,KAAKC,MAAMqF,MAAMpF,MAC/B,GACN,OAAQ,kBAAoB,MAAO,CAAErN,MAAO,kBACxC,kBAAoB,MAAO,CAAEA,MAAO,cAAkD,IAA7B0hB,GACvB,IAA9BE,EAAoDh1B,KAAKqlB,cAAkB,kBAAoB+R,GAAsB,CAAEnE,uBAAuB,EAAMC,gBP9C1I,IO8C6LmD,iBAAkBA,EAAkBC,mBAAoBA,EAAoBC,iBAAkBA,EAAkBxE,UAAWrb,EAAA,GAAagS,cAAe,GAAIhF,OP/CjW,IO+CkY8S,kBAAmBA,EAAmBC,oBAAqBA,EAAqBC,kBAAmBA,EAAmBvD,WAAYvwB,EAAKS,cAAcC,EAAA,kCAA0C8vB,WAAYxwB,EAAKS,cAAcC,EAAA,QAAgB,CAAEmd,OAAO,QAAeuF,UAGzpB,MAAM,IAAkB,SAAsB,CAACvlB,GAASwU,gBAAAA,EAAiBV,WAAAA,MACrE,MAAMlP,GAAQ,QAAWqE,SAASxI,QAC5B6I,GAAkB,QAAmB1E,GACrC2E,GAAU,QAAa3E,GACvB4E,GAAe,QAAgB5E,GAE/BiyB,EAA2B,kBAAf/iB,GAAoE,YAAfA,EACjE8gB,EAAY,CACd3pB,UAAWhL,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAK0E,GAASA,EAAMqG,WAAarG,EAAMqG,WAAcrG,GAASA,EAAM+E,QAAU/E,EAAM+E,OAAOmU,SAAW,CAAE,CAAC,GAAG,eAA4BlZ,EAAM+E,OAAOmU,UAAcvU,GAAW,CAAE,CAACA,QAAU3D,IAAgB0D,GAAmButB,GAAa,CAAE,CAAC,MAAevtB,IAChUwB,SAAU7K,OAAOC,OAAOD,OAAOC,OAAO,GAAKoJ,IAAoButB,GAAa,CAAE,CAAC,MAAevtB,IAAsBC,IAAYD,GAAmB,CAAE,CAACC,GAAUC,KAE9JqrB,EAAe50B,OAAOC,OAAOD,OAAOC,OAAO,GAAI00B,GAAY,CAAEjrB,OAAQ,CACnEC,WAAY,QACZC,iBAAkB,QAClBC,kBAAmB,KAErBoqB,GAAqB,QAASW,GAC9BC,EAAgB70B,OAAOC,OAAOD,OAAOC,OAAO,GAAI00B,GAAY,CAAEjrB,OAAQ,CACpEC,WAAY,QACZC,iBAAkB,QAClBC,kBAAmB,KAErBqqB,GAAsB,QAASW,GAOrC,MAAO,CACHD,aAAAA,EACAX,mBAAAA,EACAE,cARkB,kBAA6Bp0B,EAAOwU,EAAiBV,EAAYogB,GASnFG,yBAR6B,6BAAwCr0B,EAAOwU,EAAiBV,EAAYogB,GASzGY,cAAAA,EACAX,oBAAAA,EACAG,eATmB,kBAA6Bt0B,EAAOwU,EAAiBV,EAAYqgB,GAUpFI,0BAT8B,6BAAwCv0B,EAAOwU,EAAiBV,EAAYqgB,OAY5G,GAAqB,CACvB1R,YAAa,kBAEXqU,IAA2B,EAAArxB,EAAA,KAAW,IAAAC,SAAQ,GAAiB,GAAzB,CAA6CkxB,KC3FzF,MAAMG,WAA4B,cAC9B33B,cACIE,SAASuH,WAETtH,KAAK4tB,aAAgBJ,IACjB,MAAM,SAAElO,EAAQ,KAAE1c,GAAS5C,KAAKF,MAChC,OAAQ,kBAAoB,EAAA6pB,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAtO,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAyF,WAAA,IAAiBre,EAAKS,cAAcC,EAAA,uBAA+B,CAAE9B,MAAOgsB,EAAOjZ,eAC9I,kBAAoB,EAAAsV,SAAU,KAC1B,kBAAoB2L,EAAyB,CAAElW,SAAUA,EAAUrK,gBAAiBuY,EAAOvY,gBAAiBV,WAAYiZ,EAAOjZ,gBAG3IvU,KAAKy3B,cAAiBjK,IAClB,MAAM,SAAElO,EAAQ,KAAE1c,GAAS5C,KAAKF,MAChC,OAAQ,kBAAoB,EAAA6pB,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAtO,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAyF,WAAA,IAAiBre,EAAKS,cAAcC,EAAA,uBAA+B,CAAE9B,MAAOgsB,EAAOjZ,eAC9I,kBAAoB,EAAAsV,SAAU,KAC1B,kBAAoBuM,GAA0B,CAAE9W,SAAUA,EAAUrK,gBAAiBuY,EAAOvY,gBAAiBV,WAAYiZ,EAAOjZ,gBAG5IvU,KAAK03B,cAAiBlK,IAClB,MAAM,KAAE5qB,GAAS5C,KAAKF,MACtB,OAAQ,kBAAoB,EAAA6pB,KAAM,KAC9B,kBAAoB,EAAAC,UAAW,KAC3B,kBAAoB,EAAAtO,MAAO,CAAEC,aAAc,KAAMC,KAAM,EAAAyF,WAAA,IAAiBre,EAAKS,cAAcC,EAAA,uBAA+B,CAAE9B,MAAOgsB,EAAOjZ,eAC9I,kBAAoB,EAAAsV,SAAU,KAC1B,kBAAoB0N,GAA0B,CAAEtiB,gBAAiBuY,EAAOvY,gBAAiBV,WAAYiZ,EAAOjZ,gBAI5Hqa,aAAapB,GACT,OAAQA,EAAOtkB,MACX,IAAK,OACD,OAAOlJ,KAAK4tB,aAAaJ,GAC7B,IAAK,QACD,OAAOxtB,KAAKy3B,cAAcjK,GAC9B,IAAK,QACD,OAAOxtB,KAAK03B,cAAclK,GAC9B,QACI,OAAO,MAGnBhoB,SACI,MAAM,cAAE+oB,EAAa,QAAEC,GAAYxuB,KAAKF,MACxC,OAAQ,kBAAoB,EAAA8sB,KAAM,CAAEC,WAAW,GAAQ2B,EAAQzrB,KAAI2rB,IAC/D,MAAMlB,EAASe,EAAcG,GAC7B,OAAO,kBAAoB,EAAA5B,SAAU,CAAE5pB,IAAK,UAAUwrB,KAAc1uB,KAAK4uB,aAAapB,SAIlG,MAAMmK,IAAqB,EAAAzxB,EAAA,IAAWsxB,K,uGCrD/B,MAAM/wB,EAAS,CAClB0Y,UAAW,CACP7B,UAAW,SACXtJ,aAAc,GAElB4jB,cAAe,CACX9X,SAAU,WACVF,MAAO,UAEXiY,UAAW,CACPzY,UAAW,OAEfG,OAAQ,CACJzY,gBAAiB,SACjB8gB,QAAS,UAEbnI,cAAe,CACXxG,QAAS,OACTyG,eAAgB,iBAEpBoY,kBAAmB,CACf7e,QAAS,OACT8e,UAAW,QAEfC,KAAM,CACFC,cAAe,UAEnBC,SAAU,CACNpY,SAAU,YAEdqY,UAAW,CACPnb,WAAY,QAEhBzd,MAAO,CACHyH,cAAe,Y,4ECvChB,MAAMoxB,EAAgB/yB,IACRA,GAASA,EAAMkG,SAAW7K,OAAOiL,KAAKtG,EAAMkG,UAAY,IACzDiE,MAAKtM,GAAOA,IAAQ,OAE3Bm1B,EAAmBhzB,IAC5B,MAAMqoB,EAAY0K,EAAa/yB,GAC/B,OAAOqoB,EAAYroB,EAAMkG,SAASmiB,QAAarnB,GAEtCiyB,EAAsBjzB,IAC/B,IAAIyb,EACJ,GAAIzb,GAASA,EAAMkG,SACf,IAAK,MAAMvB,KAAWtJ,OAAOiL,KAAKtG,EAAMkG,UACpC,GAAIvB,IAAY,KAAc,CAC1B8W,EAAazb,EAAMkG,SAAS,MAC5B,MAIZ,OAAOuV,GAEEyX,EAAoBlzB,IAC7B,IAAImzB,EACJ,GAAInzB,GAASA,EAAMkG,SACf,IAAK,MAAMvB,KAAWtJ,OAAOiL,KAAKtG,EAAMkG,UAAW,CAC/C,MAAMktB,EAAWzuB,EAAQwB,QAAQ,KACjC,IAAkB,IAAditB,EAAiB,CACjBD,EAAgBxuB,EAAQ+B,UAAU0sB,EAAW,YAC7C,OAIZ,OAAOD,I,wDC9BJ,MAAME,EAAmB,EAAGC,SAAAA,EAAU3hB,MAAAA,EAAOnH,YAAAA,EAAa7F,QAAAA,EAAS3E,MAAAA,MACtE,MAAMuQ,EAAWlV,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI0E,GAASwK,GAAeA,IAAgBmH,GAAS,CAAE,CAAC,MAAmBnH,IAAiB,CAAEtE,SAAU,CAC3J,CAACvB,GAAUgN,KAEnB,MAAO,GAAG2hB,MAAY,QAAc/iB,MAE3BgjB,EAAsB,EAAGD,SAAAA,EAAU9oB,YAAAA,EAAa7F,QAAAA,EAAS8W,WAAAA,EAAY7X,GAAAA,EAAI4vB,UAAAA,EAAWxzB,MAAAA,EAAO9F,MAAAA,EAAO2J,KAAAA,MAC3G,MAAM0M,EAAWlV,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAIkV,KAAKC,MAAMD,KAAKE,UAAU1Q,KAAWwK,GAAeA,IAAgBtQ,GAAS,CAAE,CAAC,MAAmBsQ,IAAkBtQ,GAAS,CAAE,CAAC,MAAoBA,IAAYuhB,GAAc+X,GAAa,CAAE,CAAC,MAAeA,IAAe,CAAEttB,SAAU,CAC5T,CAACvB,GAAUf,KAgBnB,OAdK2M,EAASxL,SACVwL,EAASxL,OAAS,IAET,YAATlB,GACA0M,EAASxL,OAAOmU,QAAUtV,EAC1B2M,EAASrK,SAAW,CAChB,CAAC,MAAeuV,IAGN,wBAAT5X,IACL0M,EAASrK,SAAW,CAChB,CAAC,MAAetC,IAGjB,GAAG0vB,MAAY,QAAc/iB,O,wCC1BjC,MAAMkjB,EAAiB,CAACzzB,EAAO6G,EAAY6sB,KAC9C,MAAMnjB,EAAWlV,OAAOC,OAAO,GAAIkV,KAAKC,MAAMD,KAAKE,UAAU1Q,KAE7D,GAAoB,MAAhB0zB,GAAyD,MAAlCnjB,EAASrK,SAASW,GAA7C,CAGA,GAAI0J,EAASlK,UAAUQ,GAAa,CAChC,IAAI8sB,GAAQ,EACZ,MAAMnuB,EAAU+K,EAASlK,UAAUQ,GACnC,GAAKL,MAAMC,QAAQjB,IAIf,IAAK,MAAMT,KAAUS,EACjB,GAAIT,IAAW2uB,EAAa,CACxBC,GAAQ,EACR,YANRA,EAAQD,IAAgBnjB,EAASlK,UAAUQ,GAU1C8sB,IACDpjB,EAASlK,UAAUQ,GAAc,CAAC0J,EAASlK,UAAUQ,GAAa6sB,SAItEnjB,EAASlK,UAAUQ,GAAc,CAAC6sB,GAEtC,OAAOnjB,IAEEqjB,EAAoB,CAAC5zB,EAAO6G,EAAY6sB,KACjD,MAAMnjB,EAAWlV,OAAOC,OAAO,GAAIkV,KAAKC,MAAMD,KAAKE,UAAU1Q,KAC7D,GAAmB,OAAf6G,EACA0J,EAASlK,eAAYrF,OAEpB,GAAoB,OAAhB0yB,EACLnjB,EAASlK,UAAUQ,QAAc7F,OAEhC,GAAIwF,MAAMC,QAAQ8J,EAASlK,UAAUQ,IAAc,CACpD,MAAMuM,EAAQ7C,EAASlK,UAAUQ,GAAYV,QAAQutB,GACjDtgB,GAAS,IACT7C,EAASlK,UAAUQ,GAAc,IAC1B7G,EAAMqG,UAAUQ,GAAYmO,MAAM,EAAG5B,MACrCpT,EAAMqG,UAAUQ,GAAYmO,MAAM5B,EAAQ,UAKrD7C,EAASlK,UAAUQ,QAAc7F,EAErC,OAAOuP,I,2CCjDJ,MACMsjB,EAAgBjwB,IAAO,CAAG,cAAcA,IACxCuM,EAAU,CACnB2jB,QAAS,CACLC,YAAa,cACbC,oBAAqB,sBACrBC,cAAe,gBACfC,QAAS,UACTC,aAAc,gBAElB9yB,OAAQ,CACJ+yB,WAAY,aACZC,WAAY,cAEhBC,MAAO,CACH5lB,MAAO,QACPE,KAAM,aACN2lB,eAAgB,iBAChBC,eAAgB,iBAChBC,OAAQ,UAEZC,SAAU,CACNA,SAAU,WACVC,SAAU,WACVC,cAAe,iBACfC,OAAQ,UAEZC,WAAY,CACRC,WAAY,aACZC,SAAU,WACVC,aAAc,eACdC,UAAW,YACXC,cAAe,gBACfC,aAAc,kBACdC,aAAc,kBACdC,aAAc,kBACdC,WAAY,aACZC,YAAa,cACbC,YAAa,cACbC,SAAU,WACVC,gBAAiB,kBACjBC,UAAW,aAEf3X,UAAW,CACP4X,QAAS,UACTC,aAAc,eACd1B,WAAY,aACZ2B,oBAAqB,sBACrBR,WAAY,sBACZS,oBAAqB,+BACrBC,iBAAkB,4BAClB5B,WAAY,aACZ6B,WAAY,uBAEhBC,QAAS,CACLC,IAAK,eACLC,KAAM,oBACNC,SAAU,sB,gBCzDX,SAASC,EAAQC,EAAMC,GAC1B,IAAItqB,EAAIqE,KAAKE,UAAU8lB,GACnBpqB,EAAIoE,KAAKE,UAAU+lB,GAOvB,OANKtqB,IACDA,EAAI,IAEHC,IACDA,EAAI,IAEDD,EAAEuqB,MAAM,IAAIxqB,OAAOyqB,KAAK,MAAQvqB,EAAEsqB,MAAM,IAAIxqB,OAAOyqB,KAAK,I","sources":["webpack://koku-ui/./src/pages/state/noData/index.ts","webpack://koku-ui/./src/pages/state/notAvailable/notAvailable.tsx","webpack://koku-ui/./src/pages/state/notAvailable/index.ts","webpack://koku-ui/./src/pages/views/components/resourceTypeahead/resourceInput.tsx","webpack://koku-ui/./src/pages/views/components/resourceTypeahead/resourceTypeahead.tsx","webpack://koku-ui/./src/pages/views/components/dataToolbar/dataToolbar.styles.ts","webpack://koku-ui/./src/pages/views/components/dataToolbar/tagValue.tsx","webpack://koku-ui/./src/pages/views/components/dataToolbar/dataToolbar.tsx","webpack://koku-ui/./src/pages/views/components/export/exportModal.styles.ts","webpack://koku-ui/./src/pages/views/components/export/exportSubmit.tsx","webpack://koku-ui/./src/pages/views/components/export/exportModal.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupBy.styles.ts","webpack://koku-ui/./src/pages/views/components/groupBy/groupByOrg.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupByTag.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupBy.tsx","webpack://koku-ui/./src/pages/views/details/components/actions/actions.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdown.styles.ts","webpack://koku-ui/./src/pages/views/details/components/tag/tag.styles.ts","webpack://koku-ui/./src/pages/views/details/components/tag/tagView.tsx","webpack://koku-ui/./src/pages/views/details/components/tag/tagModal.tsx","webpack://koku-ui/./src/pages/views/details/components/tag/tagLink.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownHeader.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownBase.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/cluster.styles.ts","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterModal.styles.ts","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterView.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterModal.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/cluster.tsx","webpack://koku-ui/./src/pages/views/details/components/costChart/costChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/costChart/costChart.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModal.styles.ts","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModalView.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModal.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryCard.styles.ts","webpack://koku-ui/./src/pages/views/details/components/summary/summaryCard.tsx","webpack://koku-ui/./src/pages/views/details/components/usageChart/usageChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/usageChart/usageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/costOverview/costOverviewBase.tsx","webpack://koku-ui/./src/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack://koku-ui/./src/components/charts/historicalCostChart/historicalCostChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataCostChart.tsx","webpack://koku-ui/./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack://koku-ui/./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack://koku-ui/./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack://koku-ui/./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataBase.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/utils/groupBy.ts","webpack://koku-ui/./src/pages/views/utils/paths.ts","webpack://koku-ui/./src/pages/views/utils/query.ts","webpack://koku-ui/./src/testIds.ts","webpack://koku-ui/./src/utils/equal.ts"],"sourcesContent":["import NoData from './noData';\nexport default NoData;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(Unavailable, null))));\n};\nexport default withRouter(NotAvailable);\n","import NotAvailable from './notAvailable';\nexport default NotAvailable;\n","import { Button, Divider, Menu, MenuContent, MenuItem, MenuList, Popper, TextInputGroup, TextInputGroupMain, TextInputGroupUtilities, } from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport { getQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { resourceActions, resourceSelectors } from 'store/resources';\nimport { noop } from 'utils/noop';\nclass ResourceInputBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.menuRef = React.createRef();\n        this.textInputGroupRef = React.createRef();\n        this.searchTimeout = noop;\n        this.defaultState = {\n            createdOptions: [],\n            isSelectExpanded: false,\n            menuIsOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // apply focus to the text input\n        this.focusTextInput = () => {\n            this.textInputGroupRef.current.querySelector('input').focus();\n        };\n        this.getInputGroup = () => {\n            const { isDisabled, search = '', onSearchChanged } = this.props;\n            return (React.createElement(\"div\", { ref: this.textInputGroupRef },\n                React.createElement(TextInputGroup, { isDisabled: isDisabled },\n                    React.createElement(TextInputGroupMain, { icon: React.createElement(SearchIcon, null), value: search, onChange: onSearchChanged, onFocus: this.openMenu, onKeyDown: this.handleTextInputKeyDown }),\n                    search && search.length && (React.createElement(TextInputGroupUtilities, null,\n                        React.createElement(Button, { variant: \"plain\", onClick: this.handleClearSearch, \"aria-label\": \"Clear button and input\" },\n                            React.createElement(TimesIcon, null)))))));\n        };\n        this.getMenu = () => {\n            const { search } = this.props;\n            return (React.createElement(\"div\", { ref: this.menuRef }, search && search.length && (React.createElement(Menu, { onSelect: this.handleMenuSelect, onKeyDown: this.handleMenuKeyDown },\n                React.createElement(MenuContent, null,\n                    React.createElement(MenuList, null, this.getMenuItems()))))));\n        };\n        this.getMenuItems = () => {\n            const { intl } = this.props;\n            const menuItems = this.getOptions().map(option => (React.createElement(MenuItem, { key: option.key, itemId: option.key }, option.key)));\n            // add a heading to the menu\n            const headingItem = (React.createElement(MenuItem, { isDisabled: true, key: \"heading\" }, menuItems.length ? intl.formatMessage(messages.Suggestions) : intl.formatMessage(messages.NoResultsFound)));\n            if (menuItems.length) {\n                menuItems.unshift(React.createElement(Divider, { key: \"divider\" }));\n            }\n            menuItems.unshift(headingItem);\n            return menuItems;\n        };\n        this.getOptions = () => {\n            const { resource, resourceFetchStatus, search } = this.props;\n            const { createdOptions } = this.state;\n            let options = [];\n            if (resource && resource.data && resource.data.length > 0 && resourceFetchStatus !== 1 /* inProgress */) {\n                options = resource.data.map(item => {\n                    const value = !isNaN(search) ? item.value : item.account_alias || item.cluster_alias || item.value;\n                    return {\n                        key: value,\n                        name: value,\n                    };\n                });\n            }\n            if (createdOptions && createdOptions.length) {\n                const moreOptions = createdOptions.map(val => {\n                    return {\n                        key: val,\n                        name: val,\n                    };\n                });\n                options = [...options, ...moreOptions];\n            }\n            return options;\n        };\n        // Close menu when a click occurs outside of the menu or text input group\n        this.handleMenuClick = event => {\n            if (this.menuRef.current &&\n                !this.menuRef.current.contains(event.target) &&\n                !this.textInputGroupRef.current.contains(event.target)) {\n                this.setState({ menuIsOpen: false });\n            }\n        };\n        // Enable keyboard only usage while focused on the menu\n        this.handleMenuKeyDown = event => {\n            if (event.key === 'Escape') {\n                this.focusTextInput();\n                this.setState({ menuIsOpen: false });\n            }\n            if (event.key === 'Tab') {\n                this.handleClearSearch();\n            }\n        };\n        // Add the text of the selected item\n        this.handleMenuSelect = event => {\n            const { onSelect, search } = this.props;\n            event.stopPropagation();\n            const value = event.target.innerText || search;\n            if (value.trim() === '') {\n                return;\n            }\n            this.setState({ menuIsOpen: false }, () => {\n                if (onSelect) {\n                    onSelect(value);\n                }\n            });\n        };\n        // Enable keyboard only usage while focused on the text input\n        this.handleTextInputKeyDown = event => {\n            switch (event.key) {\n                case 'Enter':\n                    this.handleMenuSelect(event);\n                    break;\n                case 'Escape':\n                    this.focusTextInput();\n                    this.setState({ menuIsOpen: false });\n                    break;\n                case 'ArrowUp':\n                case 'ArrowDown':\n                    // Allow focus on the menu and navigate using the arrow keys\n                    if (this.menuRef.current) {\n                        const firstElement = this.menuRef.current.querySelector('li > button:not(:disabled)');\n                        firstElement && firstElement.focus();\n                    }\n                    break;\n                case 'Tab':\n                    this.handleClearSearch();\n                    break;\n                default:\n                    // Open menu upon any un-designated keys\n                    this.openMenu();\n            }\n        };\n        this.handleClearSearch = () => {\n            const { onClear } = this.props;\n            this.setState({ menuIsOpen: false }, () => {\n                if (onClear) {\n                    onClear();\n                }\n            });\n        };\n        this.openMenu = () => {\n            const { menuIsOpen } = this.state;\n            if (!menuIsOpen) {\n                this.setState({ menuIsOpen: true });\n            }\n        };\n        this.handleClearSearch = this.handleClearSearch.bind(this);\n        this.handleMenuClick = this.handleMenuClick.bind(this);\n        this.handleMenuKeyDown = this.handleMenuKeyDown.bind(this);\n        this.handleMenuSelect = this.handleMenuSelect.bind(this);\n        this.handleTextInputKeyDown = this.handleTextInputKeyDown.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchResource, resourceFetchStatus, resourcePathsType, resourceType, search } = this.props;\n        if (search && prevProps.search !== search && resourceFetchStatus !== 1 /* inProgress */) {\n            clearTimeout(this.searchTimeout);\n            const query = {\n                search,\n            };\n            const queryString = getQuery(query);\n            // Delay was 750ms, but reduced -- https://issues.redhat.com/browse/COST-1742\n            this.searchTimeout = setTimeout(() => {\n                fetchResource(resourcePathsType, resourceType, queryString);\n            }, 625);\n        }\n    }\n    render() {\n        const { menuIsOpen } = this.state;\n        return (React.createElement(Popper, { trigger: this.getInputGroup(), popper: this.getMenu(), appendTo: () => this.textInputGroupRef.current, isVisible: menuIsOpen, onDocumentClick: this.handleMenuClick }));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { resourcePathsType, resourceType, search }) => {\n    const query = {\n        search,\n    };\n    const queryString = getQuery(query);\n    const resource = resourceSelectors.selectResource(state, resourcePathsType, resourceType, queryString);\n    const resourceFetchStatus = resourceSelectors.selectResourceFetchStatus(state, resourcePathsType, resourceType, queryString);\n    return {\n        resource,\n        resourceFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchResource: resourceActions.fetchResource,\n};\nconst ResourceInput = injectIntl(connect(mapStateToProps, mapDispatchToProps)(ResourceInputBase));\nexport { ResourceInput };\n","import React from 'react';\nimport { ResourceInput } from './resourceInput';\n// This wrapper provides text input value as the search prop for ResourceInput.\n// This is used to create a query param to retrieve cached API requests.\nexport class ResourceTypeahead extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            search: undefined,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleOnClear = () => {\n            this.setState({\n                search: undefined,\n            });\n        };\n        this.handleOnSearch = (value) => {\n            this.setState({\n                search: value,\n            });\n        };\n        this.handleOnSelect = (value) => {\n            const { onSelect } = this.props;\n            this.setState({\n                search: undefined,\n            }, () => {\n                if (onSelect) {\n                    onSelect(value);\n                }\n            });\n        };\n        this.handleOnClear = this.handleOnClear.bind(this);\n        this.handleOnSearch = this.handleOnSearch.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { isDisabled, resourcePathsType, resourceType } = this.props;\n        const { search } = this.state;\n        return (React.createElement(ResourceInput, { isDisabled: isDisabled, onClear: this.handleOnClear, onSearchChanged: this.handleOnSearch, onSelect: this.handleOnSelect, resourcePathsType: resourcePathsType, resourceType: resourceType, search: search }));\n    }\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Button, ButtonVariant, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { getQuery, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { intl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nconst tagReportType = \"tag\" /* tag */;\n// If the number of tag keys are greater or equal, then show text input Vs select\n// See https://github.com/project-koku/koku/pull/2069\nconst tagKeyValueLimit = 50;\nclass TagValueBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isTagValueExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.onTagValueChange = value => {\n            const { onTagValueInputChange } = this.props;\n            this.setState({ tagKeyValueInput: value }, () => {\n                if (onTagValueInputChange) {\n                    onTagValueInputChange(value);\n                }\n            });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueExpanded: isOpen,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagQueryString, tagReportFetchStatus, tagReportPathsType } = this.props;\n        if (tagReportFetchStatus !== 1 /* inProgress */) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagQueryString, tagReportFetchStatus, tagReportPathsType } = this.props;\n        if ((prevProps.tagQueryString !== tagQueryString || prevProps.tagReportPathsType !== tagReportPathsType) &&\n            tagReportFetchStatus !== 1 /* inProgress */) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    getTagValueOptions() {\n        const { tagKey, tagReport } = this.props;\n        let data = [];\n        if (tagReport && tagReport.data) {\n            data = [...new Set([...tagReport.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (tagKey === tag.key && tag.values) {\n                    options = tag.values.map(val => {\n                        return {\n                            key: val,\n                            name: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { isDisabled, onTagValueInput, onTagValueSelect, selections, tagKeyValue } = this.props;\n        const { isTagValueExpanded } = this.state;\n        const selectOptions = this.getTagValueOptions().map(selectOption => {\n            return React.createElement(SelectOption, { key: selectOption.key, value: selectOption.key });\n        });\n        if (selectOptions.length > tagKeyValueLimit) {\n            return (React.createElement(InputGroup, null,\n                React.createElement(TextInput, { isDisabled: isDisabled, name: \"tagkeyvalue-input\", id: \"tagkeyvalue-input\", type: \"search\", \"aria-label\": intl.formatMessage(messages.FilterByTagValueAriaLabel), onChange: this.onTagValueChange, value: tagKeyValue, placeholder: intl.formatMessage(messages.FilterByTagValueInputPlaceholder), onKeyDown: evt => onTagValueInput(evt) }),\n                React.createElement(Button, { isDisabled: isDisabled, variant: ButtonVariant.control, \"aria-label\": intl.formatMessage(messages.FilterByTagValueButtonAriaLabel), onClick: evt => onTagValueInput(evt) },\n                    React.createElement(SearchIcon, null))));\n        }\n        return (React.createElement(Select, { isDisabled: isDisabled, variant: SelectVariant.checkbox, \"aria-label\": intl.formatMessage(messages.FilterByTagValueAriaLabel), onToggle: this.onTagValueToggle, onSelect: onTagValueSelect, selections: selections, isOpen: isTagValueExpanded, placeholderText: intl.formatMessage(messages.FilterByTagValuePlaceholder) }, selectOptions));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagKey, tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const endDate = query.end_date;\n    const startDate = query.start_date;\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const tagKeyFilter = tagKey\n        ? {\n            key: tagKey,\n        }\n        : {};\n    const tagQuery = endDate && startDate\n        ? {\n            start_date: startDate,\n            end_date: endDate,\n            filter: Object.assign({}, tagKeyFilter),\n        }\n        : {\n            filter: Object.assign({ resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }, tagKeyFilter),\n        };\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery(Object.assign({}, tagQuery));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        endDate,\n        groupBy,\n        groupByValue,\n        startDate,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagValueConnect = connect(mapStateToProps, mapDispatchToProps)(TagValueBase);\nconst TagValue = injectIntl(TagValueConnect);\nexport { TagValue };\n// https://stage.foo.redhat.com:1337/api/cost-management/v1/tags/openshift/?start_date=2021-11-01&end_date=2021-11-08&key=environment&filter[tag:environment]=Development&filter[project]=*\n// https://stage.foo.redhat.com:1337/api/cost-management/v1/reports/openshift/costs/?filter[limit]=10&filter[offset]=0&filter[tag:environment]=Development&group_by[project]=*&end_date=2021-11-08&start_date=2021-11-01\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport './dataToolbar.scss';\nimport { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, DropdownToggleCheckbox, InputGroup, Select, SelectOption, SelectVariant, TextInput, Toolbar, ToolbarContent, ToolbarFilter, ToolbarGroup, ToolbarItem, ToolbarToggleGroup, } from '@patternfly/react-core';\nimport { ExportIcon } from '@patternfly/react-icons/dist/esm/icons/export-icon';\nimport { FilterIcon } from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { orgUnitIdKey, orgUnitNameKey, tagKey, tagPrefix } from 'api/queries/query';\nimport { isResourceTypeValid } from 'api/resources/resourceUtils';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport { uniq, uniqBy } from 'lodash';\nimport { ResourceTypeahead } from 'pages/views/components/resourceTypeahead/resourceTypeahead';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './dataToolbar.styles';\nimport { TagValue } from './tagValue';\nconst defaultFilters = {\n    tag: {},\n};\nexport class DataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isBulkSelectOpen: false,\n            isCategorySelectOpen: false,\n            isOrgUnitSelectExpanded: false,\n            isTagValueDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n            tagKeyValueInput: '',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy, query } = this.props;\n            if (!categoryOptions) {\n                return 'name';\n            }\n            if (query && query.group_by && query.group_by[orgUnitIdKey]) {\n                return orgUnitIdKey;\n            }\n            for (const option of categoryOptions) {\n                if (groupBy === option.key || (groupBy && groupBy.indexOf(tagPrefix) !== -1 && option.key === tagKey)) {\n                    return option.key;\n                }\n            }\n            return categoryOptions[0].key;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key]) ? [...query.filter_by[key]] : [query.filter_by[key]];\n                    if (key.indexOf(tagPrefix) !== -1) {\n                        filters.tag[key.substring(tagPrefix.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, chip) => {\n            // Todo: workaround for https://github.com/patternfly/patternfly-react/issues/3552\n            // This prevents us from using a localized string, if necessary\n            const filterType = type && type.key ? type.key : type;\n            const id = chip && chip.key ? chip.key : chip;\n            if (filterType) {\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else if (prevState.filters[filterType]) {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType] ? `${tagPrefix}${filterType}` : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        // Bulk select\n        this.getBulkSelect = () => {\n            const { intl, isAllSelected, isBulkSelectDisabled, isDisabled, itemsPerPage, itemsTotal, selectedItems } = this.props;\n            const { isBulkSelectOpen } = this.state;\n            const numSelected = isAllSelected ? itemsTotal : selectedItems ? selectedItems.length : 0;\n            const allSelected = (isAllSelected || numSelected === itemsTotal) && itemsTotal > 0;\n            const anySelected = numSelected > 0;\n            const someChecked = anySelected ? null : false;\n            const isChecked = allSelected ? true : someChecked;\n            const dropdownItems = [\n                React.createElement(DropdownItem, { key: \"item-1\", onClick: () => this.handleOnBulkSelectClicked('none') }, intl.formatMessage(messages.ToolBarBulkSelectNone)),\n                React.createElement(DropdownItem, { key: \"item-2\", onClick: () => this.handleOnBulkSelectClicked('page') }, intl.formatMessage(messages.ToolBarBulkSelectPage, { value: itemsPerPage })),\n                React.createElement(DropdownItem, { key: \"item-3\", onClick: () => this.handleOnBulkSelectClicked('all') }, intl.formatMessage(messages.ToolBarBulkSelectAll, { value: itemsTotal })),\n            ];\n            return (React.createElement(Dropdown, { onSelect: this.handleOnBulkSelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled || isBulkSelectDisabled, splitButtonItems: [\n                        React.createElement(DropdownToggleCheckbox, { id: \"bulk-select\", key: \"bulk-select\", \"aria-label\": intl.formatMessage(anySelected ? messages.ToolBarBulkSelectAriaDeselect : messages.ToolBarBulkSelectAriaSelect), isChecked: isChecked, onClick: () => {\n                                anySelected ? this.handleOnBulkSelectClicked('none') : this.handleOnBulkSelectClicked('all');\n                            } }),\n                    ], onToggle: this.handleOnBulkSelectToggle }, numSelected !== 0 && (React.createElement(React.Fragment, null, intl.formatMessage(messages.Selected, { value: numSelected })))), isOpen: isBulkSelectOpen, dropdownItems: dropdownItems }));\n        };\n        this.handleOnBulkSelectClicked = (action) => {\n            const { onBulkSelected } = this.props;\n            if (onBulkSelected) {\n                onBulkSelected(action);\n            }\n        };\n        this.handleOnBulkSelect = () => {\n            this.setState({\n                isBulkSelectOpen: !this.state.isBulkSelectOpen,\n            });\n        };\n        this.handleOnBulkSelectToggle = isOpen => {\n            this.setState({\n                isBulkSelectOpen: isOpen,\n            });\n        };\n        this.getCategorySelectOptions = () => {\n            const { categoryOptions } = this.props;\n            const options = [];\n            categoryOptions.map(option => {\n                options.push({\n                    toString: () => option.name,\n                    value: option.key,\n                });\n            });\n            return options;\n        };\n        this.handleOnCategorySelect = (event, selection) => {\n            this.setState({\n                categoryInput: '',\n                currentCategory: selection.value,\n                currentTagKey: undefined,\n                isCategorySelectOpen: !this.state.isCategorySelectOpen,\n            });\n        };\n        this.handleOnCategoryToggle = isOpen => {\n            this.setState({\n                isCategorySelectOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = (categoryOption) => {\n            const { intl, isDisabled, resourcePathsType } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            return (React.createElement(ToolbarFilter, { categoryName: categoryOption, chips: filters[categoryOption.key], deleteChip: this.onDelete, key: categoryOption.key, showToolbarItem: currentCategory === categoryOption.key },\n                React.createElement(InputGroup, null, isResourceTypeValid(resourcePathsType, categoryOption.key) ? (React.createElement(ResourceTypeahead, { isDisabled: isDisabled, onSelect: value => this.onCategoryInputSelect(value, categoryOption.key), resourcePathsType: resourcePathsType, resourceType: categoryOption.key })) : (React.createElement(React.Fragment, null,\n                    React.createElement(TextInput, { isDisabled: isDisabled, name: `category-input-${categoryOption.key}`, id: `category-input-${categoryOption.key}`, type: \"search\", \"aria-label\": intl.formatMessage(messages.FilterByInputAriaLabel, { value: categoryOption.key }), onChange: this.handleOnCategoryInputChange, value: categoryInput, placeholder: intl.formatMessage(messages.FilterByPlaceholder, { value: categoryOption.key }), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.key) }),\n                    React.createElement(Button, { isDisabled: isDisabled, variant: ButtonVariant.control, \"aria-label\": intl.formatMessage(messages.FilterByButtonAriaLabel, { value: categoryOption.key }), onClick: evt => this.onCategoryInput(evt, categoryOption.key) },\n                        React.createElement(SearchIcon, null)))))));\n        };\n        this.getDefaultCategoryOptions = () => {\n            const { intl } = this.props;\n            return [{ name: intl.formatMessage(messages.Names, { count: 1 }), key: 'name' }];\n        };\n        this.handleOnCategoryInputChange = (value) => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if ((event && event.key && event.key !== 'Enter') || categoryInput.trim() === '') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, categoryInput]\n                                : [categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        this.onCategoryInputSelect = (value, key) => {\n            const { currentCategory } = this.state;\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { [currentCategory]: prevFilters && prevFilters.includes(value)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, value]\n                                : [value] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, value);\n            });\n        };\n        // Org unit select\n        this.getOrgUnitSelect = () => {\n            const { intl, isDisabled } = this.props;\n            const { currentCategory, filters, isOrgUnitSelectExpanded } = this.state;\n            const options = this.getOrgUnitOptions().map(option => ({\n                id: option.key,\n                toString: () => option.name,\n                compareTo: value => filters[orgUnitIdKey] ? filters[orgUnitIdKey].find(val => val === value.id) : false,\n            }));\n            const chips = []; // Get selected items as PatternFly's ToolbarChip type\n            const selections = []; // Select options and selections must be same type\n            if (filters[orgUnitIdKey] && Array.isArray(filters[orgUnitIdKey])) {\n                filters[orgUnitIdKey].map(id => {\n                    const option = options.find(val => val.id === id);\n                    if (option) {\n                        selections.push(option);\n                        chips.push({\n                            key: option.id,\n                            node: option.toString(),\n                        });\n                    }\n                });\n            }\n            // Todo: selectOverride is a workaround for https://github.com/patternfly/patternfly-react/issues/4477\n            // and https://github.com/patternfly/patternfly-react/issues/6371\n            return (React.createElement(ToolbarFilter, { categoryName: {\n                    key: orgUnitIdKey,\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'org_unit_id' }),\n                }, chips: chips, deleteChip: this.onDelete, key: orgUnitIdKey, showToolbarItem: currentCategory === orgUnitIdKey },\n                React.createElement(Select, { isDisabled: isDisabled, className: \"selectOverride\", variant: SelectVariant.checkbox, \"aria-label\": intl.formatMessage(messages.FilterByOrgUnitAriaLabel), onToggle: this.handleOnOrgUnitToggle, onSelect: this.handleOnOrgUnitSelect, selections: selections, isOpen: isOrgUnitSelectExpanded, placeholderText: intl.formatMessage(messages.FilterByOrgUnitPlaceholder) }, options.map(option => (React.createElement(SelectOption, { description: option.id, key: option.id, value: option }))))));\n        };\n        this.handleOnOrgUnitSelect = (event, selection) => {\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters[orgUnitIdKey] ? prevState.filters[orgUnitIdKey] : [];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { tag: Object.assign({}, prevState.filters.tag), [orgUnitIdKey]: checked\n                            ? [...prevSelections, selection.id]\n                            : prevSelections.filter(value => value !== selection.id) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(orgUnitIdKey, selection.id);\n                }\n                else {\n                    this.onDelete(orgUnitIdKey, selection.id);\n                }\n            });\n        };\n        this.handleOnOrgUnitToggle = isOpen => {\n            this.setState({\n                isOrgUnitSelectExpanded: isOpen,\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { intl, isDisabled } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded } = this.state;\n            if (currentCategory !== tagKey) {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return React.createElement(SelectOption, { key: selectOption.key, value: selectOption.key });\n            });\n            return (React.createElement(ToolbarItem, null,\n                React.createElement(Select, { isDisabled: isDisabled, variant: SelectVariant.typeahead, typeAheadAriaLabel: intl.formatMessage(messages.FilterByTagKeyAriaLabel), onClear: this.handleOnTagKeyClear, onToggle: this.handleOnTagKeyToggle, onSelect: this.handleOnTagKeySelect, isOpen: isTagKeySelectExpanded, placeholderText: intl.formatMessage(messages.FilterByTagKeyPlaceholder), selections: currentTagKey }, selectOptions)));\n        };\n        this.handleOnTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.handleOnTagKeySelect = (event, selection) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.handleOnTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = (tagKeyOption) => {\n            const { tagReportPathsType } = this.props;\n            const { currentCategory, currentTagKey, filters, tagKeyValueInput } = this.state;\n            // Todo: categoryName workaround for https://issues.redhat.com/browse/COST-2094\n            const categoryName = {\n                name: tagKeyOption.name,\n                key: `${tagPrefix}${tagKeyOption.key}`,\n            };\n            return (React.createElement(ToolbarFilter, { categoryName: categoryName, chips: filters.tag[tagKeyOption.key], deleteChip: this.onDelete, key: tagKeyOption.key, showToolbarItem: currentCategory === tagKey && currentTagKey === tagKeyOption.key },\n                React.createElement(TagValue, { onTagValueSelect: this.onTagValueSelect, onTagValueInput: this.onTagValueInput, onTagValueInputChange: this.onTagValueInputChange, selections: filters.tag[tagKeyOption.key] ? filters.tag[tagKeyOption.key] : [], tagKey: currentTagKey, tagKeyValue: tagKeyValueInput, tagReportPathsType: tagReportPathsType })));\n        };\n        this.onTagValueInputChange = value => {\n            this.setState({ tagKeyValueInput: value });\n        };\n        this.onTagValueInput = event => {\n            const { currentTagKey, tagKeyValueInput } = this.state;\n            if ((event.key && event.key !== 'Enter') || tagKeyValueInput.trim() === '') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey] ? prevState.filters.tag[currentTagKey] : [];\n                for (const val of prevSelections) {\n                    if (val === tagKeyValueInput) {\n                        return Object.assign(Object.assign({}, prevState.filters), { tagKeyValueInput: '' });\n                    }\n                }\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { tag: Object.assign(Object.assign({}, prevState.filters.tag), { [currentTagKey]: [...prevSelections, tagKeyValueInput] }) }),\n                    tagKeyValueInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(`${tagPrefix}${currentTagKey}`, tagKeyValueInput);\n            });\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey] ? prevState.filters.tag[currentTagKey] : [];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { tag: Object.assign(Object.assign({}, prevState.filters.tag), { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagPrefix}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        // Column management\n        this.getColumnManagement = () => {\n            const { intl } = this.props;\n            return (React.createElement(ToolbarItem, null,\n                React.createElement(Button, { onClick: this.handleColumnManagementClicked, variant: ButtonVariant.link }, intl.formatMessage(messages.DetailsColumnManagementTitle))));\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isDisabled, isExportDisabled } = this.props;\n            return (React.createElement(ToolbarItem, { spacer: {\n                    default: 'spacerNone',\n                } },\n                React.createElement(Button, { isDisabled: isDisabled || isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.plain },\n                    React.createElement(ExportIcon, null))));\n        };\n        this.handleColumnManagementClicked = () => {\n            this.props.onColumnManagementClicked();\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { categoryOptions, groupBy, orgReport, query, tagReport } = this.props;\n        if (categoryOptions !== prevProps.categoryOptions ||\n            groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (orgReport && !isEqual(orgReport, prevProps.orgReport)) ||\n            (tagReport && !isEqual(tagReport, prevProps.tagReport))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return categoryOptions !== prevProps.categoryOptions || prevProps.groupBy !== groupBy\n                    ? {\n                        categoryInput: '',\n                        currentCategory: this.getDefaultCategory(),\n                        currentOrgUnit: '',\n                        currentTagKey: '',\n                        tagKeyValueInput: '',\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category select\n    getCategorySelect() {\n        const { categoryOptions, isDisabled } = this.props;\n        const { currentCategory, isCategorySelectOpen } = this.state;\n        if (!categoryOptions) {\n            return null;\n        }\n        const selectOptions = this.getCategorySelectOptions();\n        const selection = selectOptions.find((option) => option.value === currentCategory);\n        return (React.createElement(ToolbarItem, null,\n            React.createElement(Select, { id: \"category-select\", isDisabled: isDisabled, isOpen: isCategorySelectOpen, onSelect: this.handleOnCategorySelect, onToggle: this.handleOnCategoryToggle, selections: selection, toggleIcon: React.createElement(FilterIcon, null), variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option }))))));\n    }\n    getOrgUnitOptions() {\n        const { orgReport } = this.props;\n        let options = [];\n        if (!(orgReport && orgReport.data)) {\n            return options;\n        }\n        // Sort all names first\n        const sortedData = orgReport.data.sort((a, b) => {\n            if (a[orgUnitNameKey] < b[orgUnitNameKey]) {\n                return -1;\n            }\n            if (a[orgUnitNameKey] > b[orgUnitNameKey]) {\n                return 1;\n            }\n            return 0;\n        });\n        // Move roots first\n        const roots = sortedData.filter(org => org.level === 0);\n        const filteredOrgs = sortedData.filter(org => org.level !== 0);\n        roots.map(root => {\n            const item = sortedData.find(org => org[orgUnitIdKey] === root[orgUnitIdKey]);\n            filteredOrgs.unshift(item);\n        });\n        if (filteredOrgs.length > 0) {\n            options = filteredOrgs.map(org => {\n                return {\n                    key: org[orgUnitIdKey],\n                    name: org[orgUnitNameKey],\n                };\n            });\n        }\n        return options;\n    }\n    getTagKeyOptions() {\n        const { tagReport } = this.props;\n        let data = [];\n        let options = [];\n        if (!(tagReport && tagReport.data)) {\n            return options;\n        }\n        // If the key_only param is used, we have an array of strings\n        let hasTagKeys = false;\n        for (const item of tagReport.data) {\n            if (item.hasOwnProperty('key')) {\n                hasTagKeys = true;\n                break;\n            }\n        }\n        // Workaround for https://github.com/project-koku/koku/issues/1797\n        if (hasTagKeys) {\n            const keepData = tagReport.data.map(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            (_a) => {\n                var { type } = _a, keepProps = __rest(_a, [\"type\"]);\n                return keepProps;\n            });\n            data = uniqBy(keepData, 'key');\n        }\n        else {\n            data = uniq(tagReport.data);\n        }\n        if (data.length > 0) {\n            options = data.map(item => {\n                const key = hasTagKeys ? item.key : item;\n                return {\n                    key,\n                    name: key,\n                };\n            });\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, dateRange, pagination, showBulkSelect, showColumnManagement, showExport, showFilter, style, } = this.props;\n        const options = categoryOptions ? categoryOptions : this.getDefaultCategoryOptions();\n        // Todo: clearAllFilters workaround https://github.com/patternfly/patternfly-react/issues/4222\n        return (React.createElement(\"div\", { style: style ? style : styles.toolbarContainer },\n            React.createElement(Toolbar, { id: \"details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(ToolbarContent, null,\n                    showBulkSelect && React.createElement(ToolbarItem, { variant: \"bulk-select\" }, this.getBulkSelect()),\n                    showFilter && (React.createElement(ToolbarToggleGroup, { breakpoint: \"xl\", toggleIcon: React.createElement(FilterIcon, null) },\n                        React.createElement(ToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategorySelect(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            this.getOrgUnitSelect(),\n                            options &&\n                                options\n                                    .filter(option => option.key !== tagKey && option.key !== orgUnitIdKey)\n                                    .map(option => this.getCategoryInput(option))))),\n                    (Boolean(showExport) || Boolean(showColumnManagement)) && (React.createElement(ToolbarGroup, null,\n                        Boolean(showExport) && this.getExportButton(),\n                        Boolean(showColumnManagement) && this.getColumnManagement())),\n                    dateRange && React.createElement(ToolbarGroup, null, dateRange),\n                    React.createElement(ToolbarItem, { alignment: { default: 'alignRight' }, variant: \"pagination\" }, pagination)))));\n    }\n}\nconst DataToolbar = injectIntl(DataToolbarBase);\nexport { DataToolbar };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    alert: {\n        marginBottom: global_spacer_md.var,\n    },\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        marginBottom: global_spacer_md.var,\n    },\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { endOfMonth, format, startOfMonth } from 'date-fns';\nimport fileDownload from 'js-file-download';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions, exportSelectors } from 'store/exports';\nimport { getTestProps, testIds } from 'testIds';\nimport { getToday } from 'utils/dateRange';\nconst reportType = \"cost\" /* cost */;\nexport class ExportSubmitBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            fetchReportClicked: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExport = () => {\n            const { report, reportFetchStatus } = this.props;\n            if (report && reportFetchStatus === 2 /* complete */) {\n                fileDownload(report.data, this.getFileName(), 'text/csv');\n                this.handleClose();\n            }\n        };\n        this.getFileName = () => {\n            const { endDate, groupBy, intl, reportPathsType, resolution, startDate } = this.props;\n            // defaultMessage: '<provider>_<groupBy>_<resolution>_<start-date>_<end-date>',\n            const fileName = intl.formatMessage(messages.ExportFileName, {\n                endDate,\n                provider: reportPathsType,\n                groupBy: groupBy.indexOf(tagPrefix) !== -1 ? 'tag' : groupBy,\n                resolution,\n                startDate,\n            });\n            return `${fileName}.csv`;\n        };\n        this.handleClose = () => {\n            const { reportError } = this.props;\n            this.setState(Object.assign({}, this.defaultState), () => {\n                if (!reportError) {\n                    this.props.onClose(false);\n                }\n            });\n        };\n        this.handleFetchReport = () => {\n            const { exportReport, queryString, reportPathsType } = this.props;\n            exportReport(reportPathsType, reportType, queryString);\n            this.setState({\n                fetchReportClicked: true,\n            }, () => {\n                this.getExport();\n            });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError } = this.props;\n        const { fetchReportClicked } = this.state;\n        if (prevProps.report !== report && fetchReportClicked) {\n            this.getExport();\n        }\n        if (reportError) {\n            this.props.onError(reportError);\n        }\n    }\n    render() {\n        const { intl, reportFetchStatus } = this.props;\n        return (React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: reportFetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), intl.formatMessage(messages.ExportDownload)));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const { groupBy, isAllItems, items, query, reportPathsType, resolution, timeScope } = props;\n    let endDate = query.end_date;\n    let startDate = query.start_date;\n    const getQueryString = () => {\n        const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter: Object.assign({ limit: undefined, offset: undefined, resolution: resolution ? resolution : undefined }, (!(startDate && endDate) && { time_scope_value: timeScope === 'previous' ? -2 : -1 })), filter_by: {}, limit: 0, order_by: undefined, perspective: undefined, dateRange: undefined, delta: undefined });\n        // Store filter_by as an array so we can add to it below\n        if (query.filter_by) {\n            for (const key of Object.keys(query.filter_by)) {\n                if (newQuery.filter_by[key] === undefined) {\n                    newQuery.filter_by[key] = [];\n                }\n                newQuery.filter_by[key].push(query.filter_by[key]);\n            }\n        }\n        if (isAllItems) {\n            // Ensure group_by isn't overridden -- org_unit_id is not unique\n            if (groupBy === orgUnitIdKey) {\n                if (newQuery.filter_by[orgUnitIdKey] === undefined) {\n                    newQuery.filter_by[orgUnitIdKey] = [];\n                }\n                newQuery.filter_by[orgUnitIdKey].push(query.group_by[orgUnitIdKey]);\n            }\n        }\n        else {\n            if (groupBy === orgUnitIdKey) {\n                for (const item of items) {\n                    // Note that type only exists when grouping by org units\n                    const type = item.type === 'organizational_unit' ? orgUnitIdKey : item.type;\n                    if (newQuery.filter_by[type] === undefined) {\n                        newQuery.filter_by[type] = [];\n                    }\n                    newQuery.filter_by[type].push(item.id);\n                }\n            }\n            else {\n                for (const item of items) {\n                    if (newQuery.filter_by[groupBy] === undefined) {\n                        newQuery.filter_by[groupBy] = [];\n                    }\n                    newQuery.filter_by[groupBy].push(item.id);\n                }\n            }\n        }\n        return getQuery(newQuery);\n    };\n    const queryString = getQueryString();\n    const report = exportSelectors.selectExport(state, reportPathsType, reportType, queryString);\n    const reportError = exportSelectors.selectExportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = exportSelectors.selectExportFetchStatus(state, reportPathsType, reportType, queryString);\n    if (!(startDate && endDate)) {\n        const isPrevious = timeScope === 'previous';\n        const today = getToday();\n        if (isPrevious) {\n            today.setMonth(today.getMonth() - 1);\n        }\n        endDate = format(isPrevious ? endOfMonth(today) : today, 'yyyy-MM-dd');\n        startDate = format(startOfMonth(today), 'yyyy-MM-dd');\n    }\n    return {\n        endDate,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        startDate,\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportSubmitConnect = connect(mapStateToProps, mapDispatchToProps)(ExportSubmitBase);\nconst ExportSubmit = injectIntl(ExportSubmitConnect);\nexport { ExportSubmit };\n","import { Alert, Button, ButtonVariant, Form, FormGroup, Modal, Radio } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { orderBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions } from 'store/exports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './exportModal.styles';\nimport { ExportSubmit } from './exportSubmit';\nconst resolutionOptions = [\n    { label: messages.ExportResolution, value: 'daily' },\n    { label: messages.ExportResolution, value: 'monthly' },\n];\nconst timeScopeOptions = [\n    { label: messages.ExportTimeScope, value: 'current' },\n    { label: messages.ExportTimeScope, value: 'previous' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            error: undefined,\n            timeScope: 'current',\n            resolution: this.props.resolution || 'monthly',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Reset defult state upon close -- see https://issues.redhat.com/browse/COST-1134\n        this.handleClose = () => {\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleError = (error) => {\n            this.setState({ error });\n        };\n        this.handleMonthChange = (_, event) => {\n            this.setState({ timeScope: event.currentTarget.value });\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleMonthChange = this.handleMonthChange.bind(this);\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    render() {\n        const { groupBy, intl, isAllItems, items, query, reportPathsType, showAggregateType = true, showTimeScope = true, } = this.props;\n        const { error, resolution, timeScope } = this.state;\n        let sortedItems = [...items];\n        if (this.props.isOpen) {\n            if (items && items.length === 0 && isAllItems) {\n                sortedItems = [\n                    {\n                        label: intl.formatMessage(messages.ExportAll),\n                    },\n                ];\n            }\n            else {\n                sortedItems = orderBy(sortedItems, ['label'], ['asc']);\n            }\n        }\n        let selectedLabel = intl.formatMessage(messages.ExportSelected, { groupBy });\n        if (groupBy.indexOf(tagPrefix) !== -1) {\n            selectedLabel = intl.formatMessage(messages.ExportSelected, { groupBy: 'tag' });\n        }\n        const thisMonth = new Date();\n        const lastMonth = new Date().setMonth(thisMonth.getMonth() - 1);\n        const currentMonth = format(thisMonth, 'MMMM yyyy');\n        const previousMonth = format(lastMonth - 1, 'MMMM yyyy');\n        return (React.createElement(Modal, { style: styles.modal, isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.ExportTitle), variant: \"small\", actions: [\n                React.createElement(ExportSubmit, { groupBy: groupBy, isAllItems: isAllItems, items: items, key: \"confirm\", timeScope: showTimeScope ? timeScope : undefined, onClose: this.handleClose, onError: this.handleError, query: query, reportPathsType: reportPathsType, resolution: resolution }),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }), intl.formatMessage(messages.Cancel)),\n            ] },\n            error && React.createElement(Alert, { variant: \"danger\", style: styles.alert, title: intl.formatMessage(messages.ExportError) }),\n            React.createElement(\"div\", { style: styles.title },\n                React.createElement(\"span\", null, intl.formatMessage(messages.ExportHeading, { groupBy }))),\n            React.createElement(Form, { style: styles.form },\n                showAggregateType && (React.createElement(FormGroup, { label: intl.formatMessage(messages.ExportAggregateType), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, { value: option.value }), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": intl.formatMessage(option.label, { value: option.value }) })))))),\n                showTimeScope && (React.createElement(FormGroup, { label: intl.formatMessage(messages.ExportTimeScopeTitle), fieldId: \"timeScope\" },\n                    React.createElement(React.Fragment, null, timeScopeOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `timeScope-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, {\n                            date: option.value === 'previous' ? previousMonth : currentMonth,\n                            value: option.value,\n                        }), value: option.value, checked: timeScope === option.value, name: \"timeScope\", onChange: this.handleMonthChange, \"aria-label\": intl.formatMessage(option.label, {\n                            date: option.value === 'previous' ? previousMonth : currentMonth,\n                            value: option.value,\n                        }) })))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportModalConnect = connect(mapStateToProps, mapDispatchToProps)(ExportModalBase);\nconst ExportModal = injectIntl(ExportModalConnect);\nexport { ExportModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { orgUnitIdKey, orgUnitNameKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByOrgBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            for (const key of groupByKeys) {\n                const index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = queryFromRoute.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.getGroupByItems = () => {\n            const { orgReport } = this.props;\n            if (!(orgReport && orgReport.data)) {\n                return [];\n            }\n            // Sort all names first\n            const sortedData = orgReport.data.sort((a, b) => {\n                if (a[orgUnitNameKey] < b[orgUnitNameKey]) {\n                    return -1;\n                }\n                if (a[orgUnitNameKey] > b[orgUnitNameKey]) {\n                    return 1;\n                }\n                return 0;\n            });\n            // Move roots first\n            const roots = sortedData.filter(org => org.level === 0);\n            const filteredOrgs = sortedData.filter(org => org.level !== 0);\n            roots.map(root => {\n                const item = sortedData.find(org => org[orgUnitIdKey] === root[orgUnitIdKey]);\n                filteredOrgs.unshift(item);\n            });\n            return filteredOrgs.map(org => ({\n                id: org[orgUnitIdKey],\n                toString: () => org[orgUnitNameKey],\n            }));\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection.id,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${orgUnitIdKey}${selection.id}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled = false, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const groupByItems = this.getGroupByItems();\n        const selection = groupByItems.find((item) => item.id === currentItem);\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.FilterByOrgUnitAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.FilterByOrgUnitPlaceholder), selections: selection, variant: SelectVariant.typeahead }, groupByItems.map(item => (React.createElement(SelectOption, { description: item.id, key: item.id, value: item }))))));\n    }\n}\nconst GroupByOrg = injectIntl(GroupByOrgBase);\nexport { GroupByOrg };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { uniq, uniqBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getGroupByItems = () => {\n            const { tagReport } = this.props;\n            if (!(tagReport && tagReport.data)) {\n                return [];\n            }\n            // If the key_only param is used, we have an array of strings\n            let hasTagKeys = false;\n            for (const item of tagReport.data) {\n                if (item.hasOwnProperty('key')) {\n                    hasTagKeys = true;\n                    break;\n                }\n            }\n            // Workaround for https://github.com/project-koku/koku/issues/1797\n            let data = [];\n            if (hasTagKeys) {\n                const keepData = tagReport.data.map(\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                (_a) => {\n                    var { type } = _a, keepProps = __rest(_a, [\"type\"]);\n                    return keepProps;\n                });\n                data = uniqBy(keepData, 'key');\n            }\n            else {\n                data = uniq(tagReport.data);\n            }\n            return data.map(item => {\n                const tagKey = hasTagKeys ? item.key : item;\n                return React.createElement(SelectOption, { key: item.key, value: tagKey });\n            });\n        };\n        this.getCurrentGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy;\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = key.slice(tagPrefix.length);\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${tagPrefix}${selection}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.FilterByTagKeyAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.FilterByTagKeyPlaceholder), selections: currentItem, variant: SelectVariant.typeahead }, this.getGroupByItems())));\n    }\n}\nconst GroupByTag = injectIntl(GroupByTagBase);\nexport { GroupByTag };\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey, parseQuery, tagKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { styles } from './groupBy.styles';\nimport { GroupByOrg } from './groupByOrg';\nimport { GroupByTag } from './groupByTag';\nconst groupByOrgOptions = [{ label: orgUnitIdKey, value: orgUnitIdKey }];\nconst groupByTagOptions = [{ label: tagKey, value: tagKey }];\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n            isGroupByOrgVisible: false,\n            isGroupByTagVisible: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const { defaultItem } = this.state;\n            const queryFromRoute = parseQuery(location.search);\n            if (!(queryFromRoute && queryFromRoute.group_by)) {\n                return defaultItem;\n            }\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            for (const key of groupByKeys) {\n                let index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = tagKey;\n                    this.setState({\n                        isGroupByTagVisible: true,\n                    });\n                    break;\n                }\n                index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = orgUnitIdKey;\n                    this.setState({\n                        isGroupByOrgVisible: true,\n                    });\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : defaultItem;\n        };\n        this.getGroupBy = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isGroupByOpen } = this.state;\n            const selectOptions = this.getGroupByOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"groupBySelect\", isDisabled: isDisabled, isOpen: isGroupByOpen, onSelect: this.handleGroupBySelected, onToggle: this.handleGroupByToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getGroupByOptions = () => {\n            const { options, orgReport, tagReport, intl } = this.props;\n            const allOptions = [...options];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                allOptions.push(...groupByOrgOptions);\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                allOptions.push(...groupByTagOptions);\n            }\n            return allOptions.map(option => ({\n                toString: () => intl.formatMessage(messages.GroupByValuesTitleCase, { value: option.label, count: 1 }),\n                value: option.value,\n            }));\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            if (selection.value === orgUnitIdKey || selection.value === tagKey) {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: selection.value === orgUnitIdKey,\n                    isGroupByTagVisible: selection.value === tagKey,\n                });\n            }\n            else {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                }, () => {\n                    if (onSelected) {\n                        onSelected(selection.value);\n                    }\n                });\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportFetchStatus, orgReportPathsType, showOrgs, showTags, tagQueryString, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        }, () => {\n            if (showOrgs && orgReportFetchStatus !== 1 /* inProgress */) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (showTags && tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, groupBy, orgQueryString, orgReportFetchStatus, orgReportPathsType, perspective, showOrgs, showTags, tagQueryString, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        if (prevProps.groupBy !== groupBy || prevProps.perspective !== perspective) {\n            let options;\n            if (prevProps.perspective !== perspective) {\n                options = {\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                };\n            }\n            this.setState(Object.assign({ currentItem: this.getCurrentGroupBy() }, (options ? options : {})), () => {\n                if (showOrgs && orgReportFetchStatus !== 1 /* inProgress */) {\n                    fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n                }\n                if (showTags && tagReportFetchStatus !== 1 /* inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n    }\n    render() {\n        const { getIdKeyForGroupBy, groupBy, isDisabled = false, onSelected, orgReport, intl, tagReport } = this.props;\n        const { isGroupByOrgVisible, isGroupByTagVisible } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.groupBySelectorLabel }, intl.formatMessage(messages.GroupByLabel)),\n            this.getGroupBy(),\n            Boolean(isGroupByOrgVisible) && (React.createElement(GroupByOrg, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByOrgOptions, orgReport: orgReport })),\n            Boolean(isGroupByTagVisible) && (React.createElement(GroupByTag, { groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByTagOptions, tagReport: tagReport }))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { endDate, startDate, orgReportPathsType, tagReportPathsType }) => {\n    const tagQuery = endDate && startDate\n        ? {\n            start_date: startDate,\n            end_date: endDate,\n        }\n        : {\n            filter: {\n                resolution: 'monthly',\n                time_scope_units: 'month',\n                time_scope_value: -1,\n            },\n        };\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery(Object.assign(Object.assign({}, tagQuery), { key_only: true }));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    const orgQueryString = getQuery({\n    // TBD...\n    });\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    return {\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst GroupByConnect = connect(mapStateToProps, mapDispatchToProps)(GroupByBase);\nconst GroupBy = injectIntl(GroupByConnect);\nexport { GroupBy };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query, reportPathsType } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, redirectToCostModel, history, item: { source_uuid }, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.DetailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], history) }, intl.formatMessage(messages.DetailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport { Actions };\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.GroupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.TagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.TagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.TagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagView = injectIntl(connect()(TagViewBase));\nexport { TagView };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { TagView } from './tagView';\nconst tagReportType = \"tag\" /* tag */;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, query, tagReport, intl } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.TagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagView, { groupBy: groupBy, groupByValue: groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagModalBase));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagReportType = \"tag\" /* tag */;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagReportPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            Boolean(count > 0) && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }), count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagReportPathsType: tagReportPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase));\nexport { TagLink };\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { breakdownDescKey, breakdownTitleKey, getQueryRoute, orgUnitIdKey } from 'api/queries/query';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport { CostType } from 'pages/views/components/costType';\nimport { TagLink } from 'pages/views/details/components/tag/tagLink';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = () => {\n            const { detailsURL, groupBy, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {\n                    [groupByKey]: value,\n                } });\n            // Don't want these params when returning to the details page\n            if (newQuery.filter) {\n                newQuery.filter.account = undefined;\n                newQuery[breakdownDescKey] = undefined;\n                newQuery[orgUnitIdKey] = undefined;\n                newQuery[breakdownTitleKey] = undefined;\n            }\n            return `${detailsURL}?${getQueryRoute(newQuery)}`;\n        };\n        this.getTotalCost = () => {\n            const { report } = this.props;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n            const cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            return cost;\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { onCostTypeSelected } = this.props;\n            if (onCostTypeSelected) {\n                onCostTypeSelected(value);\n            }\n        };\n    }\n    render() {\n        const { description, groupBy, query, intl, showCostType = false, tabs, tagReportPathsType, title } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'project' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount ? 'account' : groupByTag ? 'tag' : groupByOrg ? orgUnitIdKey : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.BreakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            React.createElement(Link, { to: this.buildDetailsLink() }, intl.formatMessage(messages.BreakdownBackToDetails, {\n                                value: intl.formatMessage(messages.BreakdownBackToTitles, { value: tagReportPathsType }),\n                                groupBy: groupByKey,\n                            }))))),\n                isBetaFeature() && React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.BreakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: this.handleCostTypeSelected })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getForDateRangeString(intl.formatMessage(messages.GroupByValuesTitleCase, { value: groupByKey, count: 2 }), messages.BreakdownTotalCostDate, 0)))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, Boolean(showTags) && React.createElement(TagLink, { id: \"tags\", tagReportPathsType: tagReportPathsType }))))));\n    }\n}\nconst BreakdownHeader = injectIntl(BreakdownHeaderBase);\nexport { BreakdownHeader };\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQueryRoute } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './breakdown.styles';\nimport { BreakdownHeader } from './breakdownHeader';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"cost-overview\" /* costOverview */:\n            return 'cost-overview';\n        case \"historical-data\" /* historicalData */:\n            return 'historical-data';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [\n                {\n                    contentRef: React.createRef(),\n                    tab: \"cost-overview\" /* costOverview */,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: \"historical-data\" /* historicalData */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getRouteForQuery = (query) => {\n            const { history } = this.props;\n            return `${history.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"cost-overview\" /* costOverview */) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === \"historical-data\" /* historicalData */) {\n                return historicalDataComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"cost-overview\" /* costOverview */) {\n                return intl.formatMessage(messages.BreakdownCostOverviewTitle);\n            }\n            else if (tab === \"historical-data\" /* historicalData */) {\n                return intl.formatMessage(messages.BreakdownHistoricalDataTitle);\n            }\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Need param to restore cost type upon page refresh\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(this.getRouteForQuery(newQuery));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { location, fetchReport, queryString, reportPathsType, reportType } = this.props;\n            if (location.search) {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { location, report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { description, detailsURL, emptyStateTitle, groupBy, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, showCostType, tagReportPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { description: description, detailsURL: detailsURL, groupBy: groupBy, onCostTypeSelected: this.handleCostTypeSelected, query: query, report: report, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagReportPathsType: tagReportPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nexport default injectIntl(BreakdownBase);\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterViewBase extends React.Component {\n    render() {\n        const { item } = this.props;\n        if (!item.clusters) {\n            return null;\n        }\n        return item.clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterView = injectIntl(ClusterViewBase);\nexport { ClusterView, ClusterViewBase };\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './clusterModal.styles';\nimport { ClusterView } from './clusterView';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, intl } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.DetailsClustersModalTitle, { groupBy, name: item.label }), width: '50%' },\n            React.createElement(ClusterView, { item: item })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getTestProps, testIds } from 'testIds';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, report, intl } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        const item = computedItems && computedItems.length ? computedItems[0] : undefined;\n        if (!item) {\n            return null;\n        }\n        for (const cluster of item.clusters) {\n            const prefix = someClusters.length > 0 ? ', ' : '';\n            const clusterString = `${prefix}${cluster}`;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + clusterString.length > maxChars) {\n                    someClusters.push(clusterString\n                        .slice(0, maxChars - charCount)\n                        .trim()\n                        .concat('...'));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            charCount += clusterString.length;\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            Boolean(someClusters) && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            Boolean(someClusters.length < allClusters.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.cluster_lnk), { href: \"#/\", onClick: this.handleOpen }), intl.formatMessage(messages.DetailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport { Cluster };\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 400,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.MarkupTitle);\n        const rawLabel = intl.formatMessage(messages.RawCostTitle);\n        const usageLabel = intl.formatMessage(messages.UsageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 25, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.BreakdownCostChartAriaDesc), ariaTitle: intl.formatMessage(messages.BreakdownCostBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.BreakdownCostChartTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport { CostChart };\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { ReportSummaryItem, ReportSummaryItems } from 'components/reports/reportSummary';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './summaryModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass SummaryModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString, reportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    render() {\n        const { intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost.total.value : 0, hasTotal ? report.meta.total.cost.total.units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.DetailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: _item.cost.total.value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportGroupBy, reportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalView = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryModalViewBase));\nexport { SummaryModalView };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalView } from './summaryModalView';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.DetailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalView, { reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { ReportSummaryItem, ReportSummaryItems } from 'components/reports/reportSummary';\nimport messages from 'locales/messages';\nimport { SummaryModal } from 'pages/views/details/components/summary/summaryModal';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getTestProps, testIds } from 'testIds';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportGroupBy, reportFetchStatus } = this.props;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: reportItem.cost.total.value })))));\n        };\n        this.getViewAll = () => {\n            const { groupBy, query, reportGroupBy, reportPathsType, intl } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), intl.formatMessage(messages.DetailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { groupBy: groupBy, groupByValue: groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, fetchReport, queryString, reportPathsType, reportType } = this.props;\n        if (prevProps.queryString !== queryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    render() {\n        const { reportGroupBy, reportFetchStatus, intl } = this.props;\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.BreakdownSummaryTitle, { value: reportGroupBy }))),\n            React.createElement(CardBody, null, reportFetchStatus === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, reportGroupBy, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        cost_type: costType,\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        report,\n        reportFetchStatus,\n        reportPathsType,\n        reportType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryBase));\nexport { SummaryCard };\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery } from 'api/queries/query';\nimport { getResizeObserver } from 'components/charts/common/chartUtils';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = groupBy === 'cluster' ? this.getChartDatumWithCapacity() : this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                Boolean(groupBy === 'cluster') && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { report, intl } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        datum.ranges = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n        ];\n        return datum;\n    }\n    getChartDatumWithCapacity() {\n        const { report, intl } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasCapacity = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const capacityUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n        });\n        datum.ranges = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageCapacity, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageCapacity, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                value: Math.trunc(capacity),\n            },\n        ];\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        groupBy,\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase));\nexport { UsageChart };\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { Cluster } from 'pages/views/details/components/cluster/cluster';\nimport { CostChart } from 'pages/views/details/components/costChart/costChart';\nimport { SummaryCard } from 'pages/views/details/components/summary/summaryCard';\nimport { UsageChart } from 'pages/views/details/components/usageChart/usageChart';\nimport { styles } from 'pages/views/details/ocpDetails/detailsHeader.styles';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster chart\n        this.getClusterChart = (widget) => {\n            const { groupBy, report, intl } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.Clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report }))));\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = () => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.BreakdownCostBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.BreakdownCostBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.RawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.RawCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.UsageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.UsageCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.MarkupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.MarkupDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.DocsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.LearnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.CpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.MemoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costType, groupBy, query } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                if (groupById === groupBy ||\n                    (query && query.group_by && query.group_by[orgUnitIdKey]) ||\n                    (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costType: costType, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case \"cluster\" /* cluster */:\n                return this.getClusterChart(widget);\n            case \"cost\" /* cost */:\n                return this.getCostChart();\n            case \"cpuUsage\" /* cpuUsage */:\n                return this.getCpuUsageChart(widget);\n            case \"memoryUsage\" /* memoryUsage */:\n                return this.getMemoryUsageChart(widget);\n            case \"summary\" /* reportSummary */:\n                return this.getSummaryCard(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport { CostOverviewBase };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString } from 'components/charts/common/chartDatumUtils';\nimport { getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData } = this.props;\n            const costKey = messages.ChartCostLegendLabel;\n            const costInfrastructureKey = messages.ChartCostInfrastructureLegendLabel;\n            const costInfrastructureTooltipKey = messages.ChartCostInfrastructureLegendTooltip;\n            const costTooltipKey = messages.ChartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.ChartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.ChartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousInfrastructureCost',\n                    data: previousInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1, messages.ChartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(previousInfrastructureCostData, costInfrastructureTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousInfrastructureCostData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentInfrastructureCost',\n                    data: currentInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false, 0, messages.ChartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(currentInfrastructureCostData, costInfrastructureTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentInfrastructureCostData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 700 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, intl, containerHeight = height, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 700\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport { HistoricalCostChart };\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { transformReport } from 'components/charts/common/chartDatumUtils';\nimport { HistoricalCostChart } from 'components/charts/historicalCostChart';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentData = transformReport(currentReport, 0 /* rolling */, 'date', 'cost');\n        const currentInfrastructureCostData = transformReport(currentReport, 0 /* rolling */, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, 0 /* rolling */, 'date', 'cost');\n        const previousInfrastructureCostData = transformReport(previousReport, 0 /* rolling */, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const test = intl.formatMessage(messages.CurrencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.HistoricalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.HistoricalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const baseQuery = {\n        cost_type: costType,\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.ChartUsageLegendLabel : messages.ChartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.ChartUsageLegendTooltip : messages.ChartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, intl, containerHeight = height, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport { HistoricalTrendChart };\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { transformReport } from 'components/charts/common/chartDatumUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl } = this.props;\n        const isCostChart = reportType === \"cost\" /* cost */;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? 0 /* rolling */ : 1 /* daily */, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? 0 /* rolling */ : 1 /* daily */, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.CurrencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.HistoricalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.Units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.HistoricalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.Units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.HistoricalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const baseQuery = {\n        cost_type: costType,\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getUsageRangeString } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.ChartLimitLegendLabel;\n            const limitTooltipKey = messages.ChartLimitLegendTooltip;\n            const requestKey = messages.ChartRequestsLegendLabel;\n            const requestTooltipKey = messages.ChartRequestsLegendTooltip;\n            const usageKey = messages.ChartUsageLegendLabel;\n            const usageTooltipKey = messages.ChartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.ChartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.ChartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.ChartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.ChartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 900 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, intl, containerHeight = height, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 900\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport { HistoricalUsageChart };\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { transformReport } from 'components/charts/common/chartDatumUtils';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, 1 /* daily */, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, 1 /* daily */, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, 1 /* daily */, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, 1 /* daily */, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, 1 /* daily */, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, 1 /* daily */, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.HistoricalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.Units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === \"instance_type\" /* instanceType */ || reportType === \"storage\" /* storage */;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costType, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.HistoricalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { costType: costType, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.HistoricalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { costType: costType, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.HistoricalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case \"cost\" /* cost */:\n                return this.getCostChart(widget);\n            case \"trend\" /* trend */:\n                return this.getTrendChart(widget);\n            case \"usage\" /* usage */:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport { HistoricalDataBase };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nexport const getGroupById = (query) => {\n    const groupBys = query && query.group_by ? Object.keys(query.group_by) : [];\n    return groupBys.find(key => key !== orgUnitIdKey);\n};\nexport const getGroupByValue = (query) => {\n    const groupById = getGroupById(query);\n    return groupById ? query.group_by[groupById] : undefined;\n};\nexport const getGroupByOrgValue = (query) => {\n    let groupByOrg;\n    if (query && query.group_by) {\n        for (const groupBy of Object.keys(query.group_by)) {\n            if (groupBy === orgUnitIdKey) {\n                groupByOrg = query.group_by[orgUnitIdKey];\n                break;\n            }\n        }\n    }\n    return groupByOrg;\n};\nexport const getGroupByTagKey = (query) => {\n    let groupByTagKey;\n    if (query && query.group_by) {\n        for (const groupBy of Object.keys(query.group_by)) {\n            const tagIndex = groupBy.indexOf(tagPrefix);\n            if (tagIndex !== -1) {\n                groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                break;\n            }\n        }\n    }\n    return groupByTagKey;\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey } from 'api/queries/query';\nexport const getBreakdownPath = ({ basePath, label, description, groupBy, query, }) => {\n    const newQuery = Object.assign(Object.assign(Object.assign({}, query), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n            [groupBy]: label,\n        } });\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const getOrgBreakdownPath = ({ basePath, description, groupBy, groupByOrg, id, orgUnitId, query, title, type, }) => {\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), (groupByOrg && orgUnitId && { [orgUnitIdKey]: orgUnitId })), { group_by: {\n            [groupBy]: id,\n        } });\n    if (!newQuery.filter) {\n        newQuery.filter = {};\n    }\n    if (type === 'account') {\n        newQuery.filter.account = id;\n        newQuery.group_by = {\n            [orgUnitIdKey]: groupByOrg,\n        };\n    }\n    else if (type === 'organizational_unit') {\n        newQuery.group_by = {\n            [orgUnitIdKey]: id,\n        };\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\n","export const addQueryFilter = (query, filterType, filterValue) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    // Filter by * won't generate a new request if group_by * already exists\n    if (filterValue === '*' && newQuery.group_by[filterType] === '*') {\n        return;\n    }\n    if (newQuery.filter_by[filterType]) {\n        let found = false;\n        const filters = newQuery.filter_by[filterType];\n        if (!Array.isArray(filters)) {\n            found = filterValue === newQuery.filter_by[filterType];\n        }\n        else {\n            for (const filter of filters) {\n                if (filter === filterValue) {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        if (!found) {\n            newQuery.filter_by[filterType] = [newQuery.filter_by[filterType], filterValue];\n        }\n    }\n    else {\n        newQuery.filter_by[filterType] = [filterValue];\n    }\n    return newQuery;\n};\nexport const removeQueryFilter = (query, filterType, filterValue) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    if (filterType === null) {\n        newQuery.filter_by = undefined; // Clear all\n    }\n    else if (filterValue === null) {\n        newQuery.filter_by[filterType] = undefined; // Clear all values\n    }\n    else if (Array.isArray(newQuery.filter_by[filterType])) {\n        const index = newQuery.filter_by[filterType].indexOf(filterValue);\n        if (index > -1) {\n            newQuery.filter_by[filterType] = [\n                ...query.filter_by[filterType].slice(0, index),\n                ...query.filter_by[filterType].slice(index + 1),\n            ];\n        }\n    }\n    else {\n        newQuery.filter_by[filterType] = undefined;\n    }\n    return newQuery;\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        cluster_lnk: 'cluster-lnk',\n        historical_data_btn: 'historical-data-btn',\n        show_more_btn: 'show-more-btn',\n        tag_lnk: 'tag-lnk',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return a.split('').sort().join('') === b.split('').sort().join('');\n}\n"],"names":["title","PageHeader","PageHeaderTitle","Main","Unavailable","ResourceInputBase","constructor","props","super","this","menuRef","textInputGroupRef","searchTimeout","noop","defaultState","createdOptions","isSelectExpanded","menuIsOpen","state","Object","assign","focusTextInput","current","querySelector","focus","getInputGroup","isDisabled","search","onSearchChanged","ref","TextInputGroup","TextInputGroupMain","icon","value","onChange","onFocus","openMenu","onKeyDown","handleTextInputKeyDown","length","TextInputGroupUtilities","Button","variant","onClick","handleClearSearch","getMenu","Menu","onSelect","handleMenuSelect","handleMenuKeyDown","MenuContent","MenuList","getMenuItems","intl","menuItems","getOptions","map","option","MenuItem","key","itemId","headingItem","formatMessage","messages","unshift","Divider","resource","resourceFetchStatus","options","data","item","isNaN","account_alias","cluster_alias","name","moreOptions","val","handleMenuClick","event","contains","target","setState","stopPropagation","innerText","trim","firstElement","onClear","bind","componentDidUpdate","prevProps","fetchResource","resourcePathsType","resourceType","clearTimeout","query","queryString","setTimeout","render","Popper","trigger","popper","appendTo","isVisible","onDocumentClick","mapStateToProps","mapDispatchToProps","ResourceInput","injectIntl","connect","ResourceTypeahead","undefined","handleOnClear","handleOnSearch","handleOnSelect","styles","export","marginRight","global_spacer_md","toolbarContainer","backgroundColor","global_BackgroundColor_light_100","paddingBottom","paddingTop","marginLeft","global_spacer_lg","tagReportType","TagValueBase","arguments","isTagValueExpanded","onTagValueChange","onTagValueInputChange","tagKeyValueInput","onTagValueToggle","isOpen","componentDidMount","fetchTag","tagQueryString","tagReportFetchStatus","tagReportPathsType","getTagValueOptions","tagKey","tagReport","Set","tag","values","onTagValueInput","onTagValueSelect","selections","tagKeyValue","selectOptions","selectOption","SelectOption","InputGroup","TextInput","id","type","placeholder","evt","ButtonVariant","Select","SelectVariant","onToggle","placeholderText","location","endDate","end_date","startDate","start_date","groupByOrgValue","groupBy","groupByValue","tagKeyFilter","tagQuery","filter","resolution","time_scope_units","time_scope_value","TagValueConnect","TagValue","defaultFilters","DataToolbarBase","categoryInput","filters","cloneDeep","isBulkSelectOpen","isCategorySelectOpen","isOrgUnitSelectExpanded","isTagValueDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","group_by","indexOf","getActiveFilters","filter_by","keys","forEach","Array","isArray","substring","onDelete","chip","filterType","prevState","s","_filterType","onFilterRemoved","getBulkSelect","isAllSelected","isBulkSelectDisabled","itemsPerPage","itemsTotal","selectedItems","numSelected","anySelected","isChecked","dropdownItems","DropdownItem","handleOnBulkSelectClicked","Dropdown","handleOnBulkSelect","position","DropdownPosition","toggle","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","handleOnBulkSelectToggle","action","onBulkSelected","getCategorySelectOptions","push","toString","handleOnCategorySelect","selection","currentCategory","currentTagKey","handleOnCategoryToggle","getCategoryInput","categoryOption","ToolbarFilter","categoryName","chips","deleteChip","showToolbarItem","onCategoryInputSelect","handleOnCategoryInputChange","onCategoryInput","getDefaultCategoryOptions","count","prevFilters","includes","onFilterAdded","getOrgUnitSelect","getOrgUnitOptions","compareTo","find","node","className","handleOnOrgUnitToggle","handleOnOrgUnitSelect","description","checked","prevSelections","getTagKeySelect","getTagKeyOptions","ToolbarItem","typeAheadAriaLabel","handleOnTagKeyClear","handleOnTagKeyToggle","handleOnTagKeySelect","getTagValueSelect","tagKeyOption","getColumnManagement","handleColumnManagementClicked","getExportButton","isExportDisabled","spacer","default","handleExportClicked","onColumnManagementClicked","onExportClicked","orgReport","currentOrgUnit","getCategorySelect","toggleIcon","sortedData","sort","a","b","roots","org","level","filteredOrgs","root","hasTagKeys","hasOwnProperty","keepData","_a","e","t","p","prototype","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","uniqBy","uniq","dateRange","pagination","showBulkSelect","showColumnManagement","showExport","showFilter","style","Toolbar","clearAllFilters","collapseListedFiltersBreakpoint","ToolbarContent","ToolbarToggleGroup","breakpoint","ToolbarGroup","Boolean","alignment","DataToolbar","alert","marginBottom","form","global_spacer_sm","modal","input","global_spacer_xs","ul","reportType","ExportSubmitBase","stateProps","dispatchProps","fetchReportClicked","getExport","report","reportFetchStatus","getFileName","handleClose","reportPathsType","provider","reportError","onClose","handleFetchReport","exportReport","onError","testIds","isAllItems","items","timeScope","newQuery","JSON","parse","stringify","limit","offset","order_by","perspective","delta","getQueryString","isPrevious","today","setMonth","getMonth","format","endOfMonth","startOfMonth","ExportSubmitConnect","ExportSubmit","resolutionOptions","label","timeScopeOptions","ExportModalBase","error","handleError","handleMonthChange","_","currentTarget","handleResolutionChange","showAggregateType","showTimeScope","sortedItems","orderBy","selectedLabel","thisMonth","Date","lastMonth","currentMonth","previousMonth","Modal","actions","Alert","Form","FormGroup","fieldId","index","Radio","isValid","date","groupItem","ExportModalConnect","ExportModal","groupBySelector","display","alignItems","groupBySelectorLabel","whiteSpace","GroupByOrgBase","defaultItem","isGroupByOpen","getCurrentGroupBy","getIdKeyForGroupBy","queryFromRoute","groupByKeys","getGroupByItems","handleGroupByClear","currentItem","handleGroupBySelected","onSelected","handleGroupByToggle","groupByItems","GroupByOrg","GroupByTagBase","slice","GroupByTag","groupByOrgOptions","groupByTagOptions","orgReportType","GroupByBase","isGroupByOrgVisible","isGroupByTagVisible","getGroupBy","getGroupByOptions","allOptions","fetchOrg","orgQueryString","orgReportFetchStatus","orgReportPathsType","showOrgs","showTags","Title","headingLevel","size","key_only","GroupByConnect","GroupBy","DetailsActionsBase","isDropdownOpen","isExportModalOpen","getExportModal","handleExportModalClose","handleExportModalOpen","handleOnToggle","showPriceListOption","redirectToCostModel","history","source_uuid","component","KebabToggle","isPlain","DetailsActionsConnect","Actions","content","paddingLeft","paddingRight","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","tagLink","tagsContainer","global_spacer_3xl","marginTop","TagViewBase","getDataListItems","result","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","dataListItems","DataList","isCompact","TagView","TagModalBase","getTagValueCount","shouldComponentUpdate","nextProps","account","width","filterByParams","TagModal","TagLinkBase","handleOpen","preventDefault","href","TagLink","cost","global_spacer_xl","costLabel","costValue","textAlign","costLabelDate","costType","header","global_BackgroundColor_100","headerContent","justifyContent","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","BreakdownHeaderBase","buildDetailsLink","detailsURL","groupByKey","getTotalCost","hasCost","meta","total","units","handleCostTypeSelected","onCostTypeSelected","showCostType","filterByAccount","groupByOrg","groupByTag","to","TitleSizes","BreakdownHeader","getIdKeyForTab","tab","BreakdownBase","activeTabKey","getAvailableTabs","contentRef","getRouteForQuery","pathname","getTab","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","availableTabs","TabContent","getTabItem","costOverviewComponent","historicalDataComponent","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","cost_type","replace","tabIndex","updateReport","fetchReport","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","clustersContainer","height","subTitle","ClusterViewBase","clusters","cluster","ClusterView","ClusterModalBase","ClusterModal","ClusterBase","showAll","charCount","someClusters","allClusters","computedItems","getComputedReportItems","idKey","clusterString","concat","Cluster","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","CostChart","mainContent","SummaryModalViewBase","reportGroupBy","hasTotal","status","_item","formatOptions","totalValue","SummaryModalView","SummaryModalBase","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","handleBulletChartModalOpen","ButtonType","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","SummaryCard","capacity","legendSkeleton","UsageChartBase","containerRef","observer","handleResize","clientWidth","getChart","chartDatum","getChartDatumWithCapacity","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasRequest","request","requestUnits","hasCapacity","capacityUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","UsageChart","PLACEHOLDER","CostOverviewsBase","getClusterChart","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","enableFlip","bodyContent","rel","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","usePlaceholder","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","CostOverviewBase","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","initDatum","costKey","costInfrastructureKey","costInfrastructureTooltipKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","HistoricalCostChart","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalTrendChart","HistoricalDataTrendChartBase","isCostChart","Number","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalUsageChart","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTrendChart","getUsageChart","HistoricalDataBase","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle","getGroupById","getGroupByValue","getGroupByOrgValue","getGroupByTagKey","groupByTagKey","tagIndex","getBreakdownPath","basePath","getOrgBreakdownPath","orgUnitId","addQueryFilter","filterValue","found","removeQueryFilter","getTestProps","details","cluster_lnk","historical_data_btn","show_more_btn","tag_lnk","view_all_btn","cancel_btn","submit_btn","login","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop","isEqual","obj1","obj2","split","join"],"sourceRoot":""}