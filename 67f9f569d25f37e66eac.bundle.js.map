{"version":3,"sources":["webpack:///./src/pages/awsDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartLabelTooltip/chartLabelTooltip.tsx","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpOnAwsReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/pages/azureDetails/detailsHeader.styles.ts","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/awsDetails/awsDetails.styles.ts","webpack:///./src/pages/awsDetails/detailsHeader.styles.ts","webpack:///./src/pages/awsDetails/groupBy.styles.ts","webpack:///./src/pages/awsDetails/groupBy.tsx","webpack:///./src/pages/awsDetails/detailsHeader.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.styles.ts","webpack:///./src/pages/awsDetails/detailsTagView.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.tsx","webpack:///./src/pages/awsDetails/exportModal.styles.ts","webpack:///./src/pages/awsDetails/exportModal.tsx","webpack:///./src/pages/awsDetails/historicalChart.styles.ts","webpack:///./src/pages/awsDetails/historicalChart.tsx","webpack:///./src/pages/awsDetails/historicalModal.styles.ts","webpack:///./src/pages/awsDetails/historicalModal.tsx","webpack:///./src/pages/awsDetails/detailsActions.tsx","webpack:///./src/pages/awsDetails/detailsTable.styles.ts","webpack:///./src/pages/awsDetails/detailsTableItem.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.tsx","webpack:///./src/pages/awsDetails/detailsWidget.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetView.tsx","webpack:///./src/pages/awsDetails/detailsWidget.tsx","webpack:///./src/pages/awsDetails/detailsTableItem.tsx","webpack:///./src/pages/awsDetails/detailsTable.tsx","webpack:///./src/pages/awsDetails/detailsToolbar.styles.ts","webpack:///./src/pages/awsDetails/detailsToolbar.tsx","webpack:///./src/pages/awsDetails/awsDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_awsDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpOnAwsReport","utils_getComputedOcpOnAwsReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getDateRangeString","i18next__WEBPACK_IMPORTED_MODULE_5__","t","count","endDate","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getMonthRangeString","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","getTooltipLabel","formatOptions","toString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","__rest","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","ChartLabelTooltip","_a","content","props","react_default","createElement","Tooltip","enableFlip","ChartLabel","assign","LAYOUT_PROPS","padding","theme_koku","area","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpOnAwsReportItems","getUnsortedComputedOcpOnAwsReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","className","minus_icon","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","colorScale","esm","labels","fontFamily","minWidth","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","width","initDatum","currentData","previousData","legendData","chartUtils","push","symbol","setState","chartDatum","charts","show","onClick","handleCostLegendClick","newDatum","index","handleResize","current","clientWidth","getChart","ChartArea","interpolation","getLegend","title","eventHandlers","target","mutation","ChartLegend","events","gutter","labelComponent","chartLabelTooltip","getLegendTooltip","orientation","formatDatumValue","formatDatumOptions","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","result","trim","containerHeight","ChartVoronoiContainer","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","legendVisible","isLegendVisible","ref","Chart","containerComponent","legendComponent","undefined","legendPosition","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","itemsPerRow","marginLeft","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitle","subTitleTooltip","status","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","AwsReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","utils_formatValue","unitsLabel","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","_patternfly_react_styles__WEBPACK_IMPORTED_MODULE_0__","costValue","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_1__","costLabelUnit","costLabelDate","header","backgroundColor","getIdKeyForNavItem","navItem","TertiaryNav","react_router_dom__WEBPACK_IMPORTED_MODULE_9__","react_i18next__WEBPACK_IMPORTED_MODULE_8__","react__WEBPACK_IMPORTED_MODULE_7___default","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","itemId","isActive","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","_patternfly_react_styles__WEBPACK_IMPORTED_MODULE_6__","_pages_azureDetails_detailsHeader_styles__WEBPACK_IMPORTED_MODULE_10__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","handleOnSelect","selectedItem","history","replace","availableNavItems","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","onSelect","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_4__","variant","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_5__","tertiary","val","awsDetails","paddingTop","paginationContainer","pagination","tableContainer","detailsHeader_styles_styles","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","awsQuery","filter","resolution","time_scope_units","time_scope_value","key_only","awsReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","getDropDownTags","Set","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","tertiaryNav","date","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","awsReportSummary","_item","DetailsWidgetModal","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","awsExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","Button","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","awsReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","awsReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","awsDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","sizes","headingLevel","resultsTotal","Chip","awsDetails_reportType","awsDetails_baseQuery","awsDetails_tagKey","awsDetails_mapStateToProps","awsDetails_mapDispatchToProps","getFilterFields","groupByTag","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","newFilterType","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"67f9f569d25f37e66eac.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport AwsDetails from './awsDetails';\nexport default hot(module)(AwsDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpOnAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpOnAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const test = i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n    return test;\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nconst ChartLabelTooltip = (_a) => {\n    var { content } = _a, props = __rest(_a, [\"content\"]);\n    return (React.createElement(Tooltip, { content: content(props.datum), enableFlip: true },\n        React.createElement(ChartLabel, Object.assign({}, props))));\n};\nexport { ChartLabelTooltip };\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpOnAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousData,\n                            name: 'previous',\n                            show: true,\n                            style: chartStyles.previousMonth,\n                        },\n                        {\n                            data: currentData,\n                            name: 'current',\n                            show: true,\n                            style: chartStyles.currentMonth,\n                        },\n                    ],\n                    legend: {\n                        colorScale: chartStyles.colorScale,\n                        data: legendData,\n                        onClick: this.handleCostLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { title } = this.props;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 20, height: 25, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { ChartLabelTooltip } from '../chartLabelTooltip';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            const charts = [\n                {\n                    data: previousData,\n                    name: 'previous',\n                    show: true,\n                    style: chartStyles.previousMonth,\n                },\n                {\n                    data: currentData,\n                    name: 'current',\n                    show: true,\n                    style: chartStyles.currentMonth,\n                },\n            ];\n            const legend = {\n                colorScale: chartStyles.colorScale,\n                data: legendData,\n                onClick: this.handleCostLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            const { legendItemsPerRow } = this.props;\n            if (chartDatum && chartDatum.data && chartDatum.data.length) {\n                const eventHandlers = {\n                    onClick: () => {\n                        return [\n                            {\n                                target: 'data',\n                                mutation: props => {\n                                    chartDatum.onClick(props);\n                                    return null;\n                                },\n                            },\n                        ];\n                    },\n                };\n                return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers,\n                        },\n                        {\n                            target: 'labels',\n                            eventHandlers,\n                        },\n                    ], gutter: 20, height: 25, itemsPerRow: legendItemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits && usage >= 0) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { Nav, NavItem, NavList, NavVariants, Title, TitleSize, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nimport { styles } from '../../pages/azureDetails/detailsHeader.styles';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem },\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, this.getNavItemTitle(navItem))));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    awsDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { parseQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAwsReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'account';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const today = new Date();\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"aws\" /* aws */ })),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('aws_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, t('since_date', { month: today.getMonth(), date: 1 })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('aws_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AwsReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsExportActions, awsExportSelectors } from 'store/awsExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: awsExportSelectors.selectExportError(state),\n        export: awsExportSelectors.selectExport(state),\n        fetchStatus: awsExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: awsExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAwsReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as awsReportsActions from 'store/awsReports/awsReportsActions';\nimport * as awsReportsSelectors from 'store/awsReports/awsReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAwsReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAwsReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAwsReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAwsReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAwsReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAwsReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('aws_details.historical.cost_title'), xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('aws_details.historical.instance_title'), xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('aws_details.historical.storage_title'), xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = awsReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = awsReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = awsReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = awsReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"account\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('aws_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'account', onClick: this.handleWidgetModalOpen }, t('aws_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'account', onClick: this.handleTagModalOpen }, t('aws_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('aws_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('aws_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAwsReportItems } from 'utils/getComputedAwsReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAwsReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */ ? reportItem.cost : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('aws_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('aws_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'account') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('aws_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/awsQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById === 'account' ? 'account_alias' : groupById,\n                        title: t('aws_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAwsReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_on_aws_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const today = new Date();\n            const date = today.getDate();\n            const month = (((today.getMonth() - 1) % 12) + 12) % 12;\n            const value = formatCurrency(Math.abs(item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = 'iconOverride';\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    t('percent', { value: percentage }),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, Boolean(item.deltaPercent !== null && item.deltaValue > 0)\n                    ? Boolean(date < 31)\n                        ? t('aws_details.increase_since_date', { date, month, value })\n                        : t('aws_details.increase_since_last_month', {\n                            date,\n                            month,\n                            value,\n                        })\n                    : Boolean(item.deltaPercent !== null && item.deltaValue < 0)\n                        ? Boolean(date < 31)\n                            ? t('aws_details.decrease_since_date', { date, month, value })\n                            : t('aws_details.decrease_since_last_month', {\n                                date,\n                                month,\n                                value,\n                            })\n                        : t('aws_details.no_change_since_date', { date, month }))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst tagKey = 'or:tag:';\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'account') {\n                return [\n                    {\n                        id: 'account',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.account_select'),\n                        placeholder: t('aws_details.filter.account_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'service') {\n                return [\n                    {\n                        id: 'service',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.service_select'),\n                        placeholder: t('aws_details.filter.service_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'region') {\n                return [\n                    {\n                        id: 'region',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.region_select'),\n                        placeholder: t('aws_details.filter.region_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by account tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('aws_details.filter.name'),\n                        title: t('aws_details.filter.tag_select'),\n                        placeholder: t('aws_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTag = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTag ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('aws_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${filterType}:${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${filterType}:${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/aws?${getQuery(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAwsReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.awsDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n"],"sourceRoot":""}