{"version":3,"sources":["webpack://koku-ui/./node_modules/@redhat-cloud-services/frontend-components/esm/Unavailable/Unavailable.js","webpack://koku-ui/./src/api/providers.ts","webpack://koku-ui/./src/api/queries/query.ts","webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/api/reports/awsReports.ts","webpack://koku-ui/./src/api/reports/azureReports.ts","webpack://koku-ui/./src/api/reports/gcpReports.ts","webpack://koku-ui/./src/api/reports/ocpCloudReports.ts","webpack://koku-ui/./src/api/reports/ocpReports.ts","webpack://koku-ui/./src/api/userAccess.ts","webpack://koku-ui/./src/components/charts/trendChart/trendChart.styles.ts","webpack://koku-ui/./src/components/charts/trendChart/trendChart.tsx","webpack://koku-ui/./src/modules/ocpOverviewWidget/ocpOverviewChart.styles.ts","webpack://koku-ui/./src/modules/ocpOverviewWidget/ocpOverviewChart.tsx","webpack://koku-ui/./src/modules/ocpOverviewWidget/ocpOverviewUtils.ts","webpack://koku-ui/./src/modules/ocpOverviewWidget/ocpOverviewWidget.styles.ts","webpack://koku-ui/./src/modules/ocpOverviewWidget/ocpOverviewWidget.tsx","webpack://koku-ui/./src/pages/state/noData/index.ts","webpack://koku-ui/./src/pages/state/notAvailable/notAvailable.tsx","webpack://koku-ui/./src/pages/state/notAvailable/index.ts","webpack://koku-ui/./src/store/common.ts","webpack://koku-ui/./src/store/providers/providersSelectors.ts","webpack://koku-ui/./src/store/providers/providersActions.ts","webpack://koku-ui/./src/store/providers/providersCommon.ts","webpack://koku-ui/./src/store/providers/providersReducer.ts","webpack://koku-ui/./src/api/reports/awsCloudReports.ts","webpack://koku-ui/./src/api/reports/azureCloudReports.ts","webpack://koku-ui/./src/api/reports/ocpUsageReports.ts","webpack://koku-ui/./src/store/reports/reportCommon.ts","webpack://koku-ui/./src/store/reports/reportSelectors.ts","webpack://koku-ui/./src/store/reports/reportActions.ts","webpack://koku-ui/./src/api/reports/reportUtils.ts","webpack://koku-ui/./src/store/reports/reportReducer.ts","webpack://koku-ui/./src/store/userAccess/userAccessSelectors.ts","webpack://koku-ui/./src/store/userAccess/userAccessActions.ts","webpack://koku-ui/./src/store/userAccess/userAccessCommon.ts","webpack://koku-ui/./src/store/userAccess/userAccessReducer.ts"],"names":["variant","className","icon","headingLevel","size","href","target","rel","fetchProviders","query","insights","window","queryString","chrome","auth","getUser","then","groupByPrefix","tagPrefix","breakdownDescKey","breakdownTitleKey","orgUnitIdKey","orgUnitNameKey","tagKey","getQueryRoute","stringify","encode","indices","getQuery","newQuery","filter_by","Object","assign","JSON","parse","key","keys","group_by","convertFilterByToGroupBy","addGroupByPrefix","length","Array","isArray","indexOf","q","addGroupByPrifix","parseQuery","index","filterByKey","substring","parseFilterByPrefix","groupByKey","parseGroupByPrefix","ignoreQueryPrefix","getUserAccessQuery","ReportTypePaths","runReport","reportType","path","fetchUserAccess","chartStyles","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentMonthData","fill","forecastConeData","strokeWidth","forecastConeDataColorScale","forecastData","forecastDataColorScale","itemsPerRow","previousColorScale","chart_color_black_200","previousMonthData","yAxis","axisLabel","padding","grid","stroke","ticks","tickLabels","fontSize","xAxis","TrendChart","super","arguments","this","containerRef","resizeObserver","noop","navToggle","state","hiddenSeries","Set","width","initDatum","currentData","previousData","showForecast","showSupplementaryLabel","showUsageLegendLabel","props","tooltipKey","series","childName","data","legendItem","name","symbol","type","tooltip","style","push","cursorVoronoiContainer","getCursorVoronoiContainer","setState","initResizeObserve","containerElement","current","ResizeObserver","handleResize","observe","unobserve","addEventListener","removeEventListener","on","handleNavToggle","getAdjustedContainerHeight","adjustContainerHeight","height","containerHeight","adjustedContainerHeight","getChart","ChartArea","has","y","interpolation","formatDatumValue","formatDatumOptions","CursorVoronoiContainer","createContainer","cursorDimension","labels","datum","mouseFollowTooltips","voronoiDimension","voronoiPadding","bottom","left","right","top","getLegend","legendItemsPerRow","ChartLegend","gutter","orientation","handleLegendClick","setTimeout","clientWidth","prevProps","previousDate","getDate","currentDate","forecastDate","Math","max","getInteractiveLegendEvents","chartNames","isHidden","legendName","onLegendClick","title","domain","ge","endDate","getEndDate","midDate","floor","tooltipTitle","day","x","container","disable","labelComponent","ChartLegendTooltip","legendData","undefined","Title","ref","Chart","containerComponent","events","getEvents","legendAllowWrap","legendComponent","legendPosition","theme","map","s","ChartAxis","tickValues","dependentAxis","styles","chartContainer","marginLeft","global_spacer_2xl","chartSkeleton","marginBottom","global_spacer_md","marginTop","global_spacer_3xl","costChart","global_spacer_sm","legendSkeleton","titleContainer","global_spacer_lg","computedReportItem","computedReportItemValue","reportPathsType","OcpOverviewChartBase","stateProps","dispatchProps","defaultState","currentReport","previousReport","units","getUnits","formatValue","getSkeleton","Skeleton","meta","total","updateReport","currentQueryString","fetchReport","previousQueryString","currentReportError","previousReportError","currentReportFetchStatus","previousReportFetchStatus","mapStateToProps","currentQuery","filter","time_scope_units","time_scope_value","resolution","previousQuery","mapDispatchToProps","connect","baseQuery","backgroundColor","marginRight","paddingRight","paddingBottom","paddingTop","chartContent","OcpOverviewWidgetBase","hasCurrentMonthData","providers","result","provider","current_month_data","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","userAccessError","userAccessFetchStatus","userAccess","isLoading","noProviders","find","d","access","count","isOcpAvailable","queryFromRoute","location","search","perspective","dateRange","ocpProvidersQueryString","userAccessQueryString","withRouter","PageHeader","Main","Unavailable","createMapStateToProps","selectProvidersState","selectAddProviderFetchStatus","fetchStatus","get","selectAddProviderError","errors","selectProviders","providerType","byId","selectProvidersFetchStatus","selectProvidersError","fetchProvidersRequest","createAction","fetchProvidersSuccess","fetchProvidersFailure","dispatch","reportId","res","catch","err","stateKey","addProviderKey","awsProvidersQuery","azureProvidersQuery","ocpProvidersQuery","gcpProvidersQuery","getReportId","Map","providersReducer","action","getType","set","payload","reportStateKey","selectReportState","selectReport","selectReportFetchStatus","selectReportError","fetchReportRequest","fetchReportSuccess","fetchReportFailure","getState","report","Date","now","timeRequested","isReportExpired","reportReducer","selectUserAccessState","selectUserAccess","selectUserAccessFetchStatus","selectUserAccessError","fetchUserAccessRequest","fetchUserAccessSuccess","fetchUserAccessFailure","userAccessKey","allUserAccessQuery","userAccessReducer"],"mappings":"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","file":"c9cb8f49f3f47bca3138.bundle.js","sourcesContent":["import React from 'react';\nimport { EmptyState } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js\";\nimport { EmptyStateIcon } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon.js\";\nimport { EmptyStateVariant } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js\";\nimport { EmptyStateBody } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody.js\";\nimport { Title } from \"@patternfly/react-core/dist/esm/components/Title/Title.js\";\nimport ExclamationCircleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon\";\nimport \"../../Unavailable/./Unavailable.css\";\n\nvar Unavailable = function Unavailable() {\n  return /*#__PURE__*/React.createElement(EmptyState, {\n    variant: EmptyStateVariant.large,\n    className: \"ins-c-empty-state__unavailable pf-m-redhat-font\"\n  }, /*#__PURE__*/React.createElement(EmptyStateIcon, {\n    icon: ExclamationCircleIcon\n  }), /*#__PURE__*/React.createElement(Title, {\n    headingLevel: \"h5\",\n    size: \"lg\"\n  }, \"This page is temporarily unavailable\"), /*#__PURE__*/React.createElement(EmptyStateBody, null, \"Try refreshing the page. If the problem persists, contact your organization administrator or visit our\", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://status.redhat.com/\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \" status page\"), \" for known outages.\"));\n};\n\nexport default Unavailable;","import axios from 'axios';\nexport function fetchProviders(query) {\n    const insights = window.insights;\n    const queryString = query ? `?${query}` : '';\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`sources/${queryString}`);\n        });\n    }\n    else {\n        return axios.get(`sources/${queryString}`);\n    }\n}\n","import { parse, stringify } from 'qs';\nexport const groupByPrefix = 'or:'; // logical OR ('or:') or AND ('and:') prefix for group_by\nexport const tagPrefix = 'tag:'; // Tag prefix for group_by\nexport const breakdownDescKey = 'breakdown_desc'; // Used to display a description in the breakdown header\nexport const breakdownGroupByKey = 'breakdown_group_by'; // Used to display a breadcrumb in the breakdown header\nexport const breakdownTitleKey = 'breakdown_title'; // Used to display a title in the breakdown header\nexport const orgUnitIdKey = 'org_unit_id'; // Org unit ID for group_by\nexport const orgUnitNameKey = 'org_unit_name'; // Org unit name for group_by\nexport const tagKey = 'tag'; // Tag key prefix for group_by\n// Adds group_by prefix -- https://github.com/project-koku/koku-ui/issues/704\nexport function addGroupByPrifix(query) {\n    if (!(query && query.group_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {} });\n    for (const key of Object.keys(query.group_by)) {\n        newQuery.group_by[`${groupByPrefix}${key}`] = query.group_by[key];\n    }\n    return newQuery;\n}\n// Converts filter_by props to group_by\nexport function convertFilterByToGroupBy(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: {} });\n    for (const key of Object.keys(query.filter_by)) {\n        if (!newQuery.group_by) {\n            newQuery.group_by = {};\n        }\n        newQuery.group_by[key] = query.filter_by[key];\n    }\n    return newQuery;\n}\n// Returns query without group_by prefix\nexport function getQueryRoute(query) {\n    return stringify(query, { encode: false, indices: false });\n}\n// Returns query and adds group_by prefix\nexport function getQuery(query) {\n    const newQuery = convertFilterByToGroupBy(query);\n    let addGroupByPrefix = false;\n    // Workaround for https://github.com/project-koku/koku/issues/1596\n    if (newQuery && newQuery.group_by) {\n        const keys = Object.keys(newQuery.group_by);\n        if (keys && keys.length > 1) {\n            addGroupByPrefix = true;\n        }\n        else {\n            // Find a tag (#1596) or group_by with multiple keys\n            for (const key of keys) {\n                if ((Array.isArray(newQuery.group_by[key]) && newQuery.group_by[key].length > 1) ||\n                    key.indexOf(tagPrefix) !== -1) {\n                    addGroupByPrefix = true;\n                }\n            }\n        }\n    }\n    // Skip adding group_by prefix for a single group_by\n    const q = addGroupByPrefix ? addGroupByPrifix(newQuery) : newQuery;\n    return stringify(q, { encode: false, indices: false });\n}\n// Returns query without filter_by prefix\nexport function parseFilterByPrefix(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: {} });\n    for (const key of Object.keys(query.filter_by)) {\n        const index = key.indexOf(groupByPrefix);\n        const filterByKey = index !== -1 ? key.substring(index + groupByPrefix.length) : key;\n        newQuery.filter_by[filterByKey] = query.filter_by[key];\n    }\n    return newQuery;\n}\n// Returns query without group_by prefix -- https://github.com/project-koku/koku-ui/issues/704\nexport function parseGroupByPrefix(query) {\n    if (!(query && query.group_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {} });\n    for (const key of Object.keys(query.group_by)) {\n        const index = key.indexOf(groupByPrefix);\n        const groupByKey = index !== -1 ? key.substring(index + groupByPrefix.length) : key;\n        newQuery.group_by[groupByKey] = query.group_by[key];\n    }\n    return newQuery;\n}\nexport function parseQuery(query) {\n    const newQuery = parse(query, { ignoreQueryPrefix: true });\n    return parseFilterByPrefix(parseGroupByPrefix(newQuery));\n}\n","import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/aws/costs/',\n    [\"database\" /* database */]: 'reports/aws/costs/',\n    [\"network\" /* network */]: 'reports/aws/costs/',\n    [\"storage\" /* storage */]: 'reports/aws/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/aws/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/azure/costs/',\n    [\"database\" /* database */]: 'reports/azure/costs/',\n    [\"network\" /* network */]: 'reports/azure/costs/',\n    [\"storage\" /* storage */]: 'reports/azure/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/azure/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/gcp/costs/',\n    [\"database\" /* database */]: 'reports/gcp/costs/',\n    [\"network\" /* network */]: 'reports/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/all/instance-types/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/all/storage/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\n// If the user-access API is called without a query parameter, all types are returned in the response\nexport function fetchUserAccess(query) {\n    const insights = window.insights;\n    const queryString = query ? `?${query}` : '';\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`user-access/${queryString}`);\n        });\n    }\n    else {\n        return axios.get(`user-access/${queryString}`);\n    }\n}\n","import chart_color_black_200 from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport chart_color_green_100 from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport chart_color_green_200 from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport chart_color_green_400 from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport chart_color_green_500 from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    forecastConeData: {\n        fill: chart_color_green_100.value,\n        strokeWidth: 0,\n    },\n    forecastConeDataColorScale: [chart_color_green_100.value],\n    forecastData: {\n        fill: 'none',\n    },\n    forecastDataColorScale: [chart_color_green_200.value],\n    itemsPerRow: 4,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.resizeObserver = noop;\n        this.navToggle = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, forecastData, forecastConeData, previousData, showForecast, showSupplementaryLabel = false, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : showSupplementaryLabel\n                    ? 'chart.cost_supplementary_legend_label'\n                    : 'chart.cost_legend_label';\n            const tooltipKey = showUsageLegendLabel\n                ? 'chart.usage_legend_tooltip'\n                : showSupplementaryLabel\n                    ? 'chart.cost_supplementary_legend_tooltip'\n                    : 'chart.cost_legend_tooltip';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousData, tooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentData, tooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            if (showForecast) {\n                series.push({\n                    childName: 'forecast',\n                    data: forecastData,\n                    legendItem: {\n                        name: getCostRangeString(forecastData, 'chart.cost_forecast_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastData, 'chart.cost_forecast_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastData), { stroke: chartStyles.forecastDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastCone',\n                    data: forecastConeData,\n                    legendItem: {\n                        name: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                            type: 'triangleUp',\n                        },\n                        tooltip: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastConeData), { stroke: chartStyles.forecastConeDataColorScale[0] }),\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.initResizeObserve = () => {\n            const containerElement = this.containerRef.current;\n            const { ResizeObserver } = window;\n            if (containerElement && ResizeObserver) {\n                const resizeObserver = new ResizeObserver(this.handleResize);\n                resizeObserver.observe(containerElement);\n                this.resizeObserver = () => resizeObserver.unobserve(containerElement);\n            }\n            else {\n                this.handleResize();\n                window.addEventListener('resize', this.handleResize);\n                this.resizeObserver = () => window.removeEventListener('resize', this.handleResize);\n                this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n            }\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height, showForecast } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (showForecast) {\n                    if (width < 700) {\n                        adjustedContainerHeight += 25;\n                    }\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 50,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), gutter: 20, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical' }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.initResizeObserve();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.forecastData !== this.props.forecastData ||\n            prevProps.forecastConeData !== this.props.forecastConeData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.resizeObserver) {\n            this.resizeObserver();\n        }\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getEndDate() {\n        const { currentData, forecastData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        const forecastDate = forecastData ? getDate(getDateRange(forecastData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, forecastDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Federated modules may not have access to the i18next package\n        let tooltipTitle;\n        if (i18next && i18next.t) {\n            tooltipTitle = datum => i18next.t('chart.day_of_month_title', { day: datum.x });\n        }\n        else {\n            tooltipTitle = datum => `Day ${datum.x}`;\n        }\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: tooltipTitle })),\n            })\n            : undefined;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nexport { TrendChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { getQuery } from 'api/queries/query';\nimport { transformReport, } from 'components/charts/common/chartDatumUtils';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { formatValue } from 'utils/formatValue';\nimport { chartStyles, styles } from './ocpOverviewChart.styles';\nconst computedReportItem = \"cost\" /* cost */; // cost, supplementary cost, etc.\nconst computedReportItemValue = \"total\" /* total */; // infrastructure usage cost\nconst reportPathsType = \"ocp\" /* ocp */;\nconst reportType = \"cost\" /* cost */;\nclass OcpOverviewChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getChart = () => {\n            const { currentReport, previousReport } = this.props;\n            const units = this.getUnits();\n            const currentData = transformReport(currentReport, 0 /* rolling */, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, 0 /* rolling */, 'date', computedReportItem, computedReportItemValue);\n            return (React.createElement(TrendChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentData: currentData, formatDatumValue: formatValue, height: chartStyles.chartHeight, previousData: previousData, units: units }));\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, size: \"md\" }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, size: \"xs\" })));\n        };\n        this.getUnits = () => {\n            const { currentReport } = this.props;\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            const hasCost = hasTotal &&\n                currentReport.meta.total[computedReportItem] &&\n                currentReport.meta.total[computedReportItem][computedReportItemValue];\n            return hasCost ? unitLookupKey(currentReport.meta.total[computedReportItem][computedReportItemValue].units) : '';\n        };\n        this.updateReport = () => {\n            const { currentQueryString, fetchReport, previousQueryString } = this.props;\n            fetchReport(reportPathsType, reportType, currentQueryString);\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { currentReport, currentReportError, currentQueryString, previousReport, previousReportError, previousQueryString, } = this.props;\n        const newQuery = prevProps.currentQueryString !== currentQueryString || prevProps.previousQueryString !== previousQueryString;\n        const noReport = !(currentReport || previousReport) && !(currentReportError || previousReportError);\n        if (newQuery || noReport) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { currentReportFetchStatus, previousReportFetchStatus, title } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title)),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === 1 /* inProgress */ || previousReportFetchStatus === 1 /* inProgress */\n                    ? this.getSkeleton()\n                    : this.getChart()))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n        },\n    };\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQueryString = getQuery(previousQuery);\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportError = reportSelectors.selectReportError(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportError = reportSelectors.selectReportError(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportError,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportError,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(OcpOverviewChartBase);\n","import { getQueryRoute } from 'api/queries/query';\nexport const baseQuery = {\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'daily',\n    },\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\nexport const isOcpAvailable = (ocpProviders, ocpProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (ocpProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"ocp\" /* ocp */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                ocpProviders !== undefined &&\n                ocpProviders.meta !== undefined &&\n                ocpProviders.meta.count > 0;\n    }\n    return result;\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersActions, providersSelectors } from 'store/providers';\nimport { allUserAccessQuery, userAccessActions, userAccessSelectors } from 'store/userAccess';\nimport OcpOverviewChart from './ocpOverviewChart';\nimport { baseQuery, isOcpAvailable } from './ocpOverviewUtils';\nimport { styles } from './ocpOverviewWidget.styles';\nclass OcpOverviewWidgetBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        // Ensure at least one source provider has data available\n        this.hasCurrentMonthData = (providers) => {\n            let result = false;\n            if (providers && providers.data) {\n                for (const provider of providers.data) {\n                    if (provider.current_month_data) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n        this.updateReport = () => {\n            const { fetchProviders, fetchUserAccess, queryString } = this.props;\n            fetchProviders(\"ocp\" /* ocp */, queryString);\n            fetchUserAccess(\"\" /* all */, queryString);\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, userAccessError, userAccessFetchStatus, userAccess, } = this.props;\n        const isLoading = userAccessFetchStatus === 1 /* inProgress */ || ocpProvidersFetchStatus === 1 /* inProgress */;\n        const title = this.props.title;\n        // Test for no providers\n        const noProviders = !isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess);\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (ocpProvidersError || userAccessError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!this.hasCurrentMonthData(ocpProviders)) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContent },\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(OcpOverviewChart, { title: title }))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    return {\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchProviders: providersActions.fetchProviders,\n    fetchUserAccess: userAccessActions.fetchUserAccess,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(OcpOverviewWidgetBase);\n","import NoData from './noData';\nexport default NoData;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { PageHeaderTitle } from 'components/pageHeaderTitle/pageHeaderTitle';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(Unavailable, null))));\n};\nexport default withRouter(NotAvailable);\n","import NotAvailable from './notAvailable';\nexport default NotAvailable;\n","export const expirationMS = 30 * 60 * 1000; // 30 minutes\nexport function createMapStateToProps(mapStateToProps) {\n    return mapStateToProps;\n}\nexport function createMapDispatchToProps(mapDispatchToProps) {\n    return mapDispatchToProps;\n}\n","import { addProviderKey, getReportId, stateKey } from './providersCommon';\nexport const selectProvidersState = (state) => state[stateKey];\n// Add provider\nexport const selectAddProviderFetchStatus = (state) => selectProvidersState(state).fetchStatus.get(addProviderKey);\nexport const selectAddProviderError = (state) => selectProvidersState(state).errors.get(addProviderKey);\n// Fetch providers\nexport const selectProviders = (state, providerType, query) => selectProvidersState(state).byId.get(getReportId(providerType, query));\nexport const selectProvidersFetchStatus = (state, providerType, query) => selectProvidersState(state).fetchStatus.get(getReportId(providerType, query));\nexport const selectProvidersError = (state, providerType, query) => selectProvidersState(state).errors.get(getReportId(providerType, query));\n","import { fetchProviders as apiGetProviders } from 'api/providers';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './providersCommon';\nexport const fetchProvidersRequest = createAction('providers/fetch/request')();\nexport const fetchProvidersSuccess = createAction('providers/fetch/success')();\nexport const fetchProvidersFailure = createAction('providers/fetch/failure')();\nexport function fetchProviders(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchProvidersRequest(meta));\n        return apiGetProviders(query)\n            .then(res => {\n            dispatch(fetchProvidersSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchProvidersFailure(err, meta));\n        });\n    };\n}\nexport const clearProviderFailure = createAction('providers/clear/failure');\n","export const stateKey = 'providers';\nexport const addProviderKey = 'add-provider';\nexport const awsProvidersQuery = {\n    type: 'AWS',\n};\nexport const azureProvidersQuery = {\n    type: 'AZURE',\n};\nexport const ocpProvidersQuery = {\n    type: 'OCP',\n};\nexport const gcpProvidersQuery = {\n    type: 'GCP',\n};\nexport function getReportId(type, query) {\n    return `${type}--${query}`;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchProvidersFailure, fetchProvidersRequest, fetchProvidersSuccess } from './providersActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function providersReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchProvidersRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchProvidersSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchProvidersFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/aws/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/aws/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/azure/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/azure/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","export const reportStateKey = 'report';\nexport function getReportId(reportPathsType, reportType, query) {\n    return `${reportPathsType}--${reportType}--${query}`;\n}\n","import { getReportId, reportStateKey } from './reportCommon';\nexport const selectReportState = (state) => state[reportStateKey];\nexport const selectReport = (state, reportPathsType, reportType, query) => selectReportState(state).byId.get(getReportId(reportPathsType, reportType, query));\nexport const selectReportFetchStatus = (state, reportPathsType, reportType, query) => selectReportState(state).fetchStatus.get(getReportId(reportPathsType, reportType, query));\nexport const selectReportError = (state, reportPathsType, reportType, query) => selectReportState(state).errors.get(getReportId(reportPathsType, reportType, query));\n","import { runReport } from 'api/reports/reportUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './reportCommon';\nimport { selectReport, selectReportFetchStatus } from './reportSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchReportRequest = createAction('report/request')();\nexport const fetchReportSuccess = createAction('report/success')();\nexport const fetchReportFailure = createAction('report/failure')();\nexport function fetchReport(reportPathsType, reportType, query) {\n    return (dispatch, getState) => {\n        if (!isReportExpired(getState(), reportPathsType, reportType, query)) {\n            return;\n        }\n        const meta = {\n            reportId: getReportId(reportPathsType, reportType, query),\n        };\n        dispatch(fetchReportRequest(meta));\n        runReport(reportPathsType, reportType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchReportSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchReportFailure(err, meta));\n        });\n    };\n}\nfunction isReportExpired(state, reportPathsType, reportType, query) {\n    const report = selectReport(state, reportPathsType, reportType, query);\n    const fetchStatus = selectReportFetchStatus(state, reportPathsType, reportType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!report) {\n        return true;\n    }\n    const now = Date.now();\n    return now > report.timeRequested + expirationMS;\n}\n","import { runReport as runAwsCloudReport } from './awsCloudReports';\nimport { runReport as runAwsReport } from './awsReports';\nimport { runReport as runAzureCloudReport } from './azureCloudReports';\nimport { runReport as runAzureReport } from './azureReports';\nimport { runReport as runGcpReport } from './gcpReports';\nimport { runReport as runOcpCloudReport } from './ocpCloudReports';\nimport { runReport as runOcpReport } from './ocpReports';\nimport { runReport as runOcpUsageReport } from './ocpUsageReports';\nexport function runReport(reportPathsType, reportType, query) {\n    let report;\n    switch (reportPathsType) {\n        case \"aws\" /* aws */:\n            report = runAwsReport(reportType, query);\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            report = runAwsCloudReport(reportType, query);\n            break;\n        case \"azure\" /* azure */:\n            report = runAzureReport(reportType, query);\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            report = runAzureCloudReport(reportType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            report = runGcpReport(reportType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            report = runOcpReport(reportType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            report = runOcpCloudReport(reportType, query);\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            report = runOcpUsageReport(reportType, query);\n            break;\n    }\n    return report;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchReportFailure, fetchReportRequest, fetchReportSuccess } from './reportActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function reportReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchReportRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchReportSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchReportFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { getReportId, stateKey, userAccessKey } from './userAccessCommon';\nexport const selectUserAccessState = (state) => state[stateKey];\n// Add provider\nexport const selectAddProviderFetchStatus = (state) => selectUserAccessState(state).fetchStatus.get(userAccessKey);\nexport const selectAddProviderError = (state) => selectUserAccessState(state).errors.get(userAccessKey);\n// Fetch userAccess\nexport const selectUserAccess = (state, providerType, query) => selectUserAccessState(state).byId.get(getReportId(providerType, query));\nexport const selectUserAccessFetchStatus = (state, providerType, query) => selectUserAccessState(state).fetchStatus.get(getReportId(providerType, query));\nexport const selectUserAccessError = (state, providerType, query) => selectUserAccessState(state).errors.get(getReportId(providerType, query));\n","import { fetchUserAccess as apiGetUserAccess } from 'api/userAccess';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './userAccessCommon';\nexport const fetchUserAccessRequest = createAction('userAccess/fetch/request')();\nexport const fetchUserAccessSuccess = createAction('userAccess/fetch/success')();\nexport const fetchUserAccessFailure = createAction('userAccess/fetch/failure')();\nexport function fetchUserAccess(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchUserAccessRequest(meta));\n        return apiGetUserAccess(query)\n            .then(res => {\n            dispatch(fetchUserAccessSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchUserAccessFailure(err, meta));\n        });\n    };\n}\nexport const clearuserAccessFailure = createAction('userAccess/clear/failure');\n","export const stateKey = 'userAccess';\nexport const userAccessKey = 'user-access';\nexport const allUserAccessQuery = {\n    type: '',\n};\nexport const awsUserAccessQuery = {\n    type: 'AWS',\n};\nexport const azureUserAccessQuery = {\n    type: 'AZURE',\n};\nexport const costModelUserAccessQuery = {\n    type: 'cost_model',\n};\nexport const ocpUserAccessQuery = {\n    type: 'OCP',\n};\nexport const gcpUserAccessQuery = {\n    type: 'GCP',\n};\nexport function getReportId(type, query) {\n    return `${type}--${query}`;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchUserAccessFailure, fetchUserAccessRequest, fetchUserAccessSuccess } from './userAccessActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function userAccessReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchUserAccessRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchUserAccessSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchUserAccessFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n"],"sourceRoot":""}