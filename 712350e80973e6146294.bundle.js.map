{"version":3,"file":"712350e80973e6146294.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/api/queries/providersQuery.ts","webpack://koku-ui/./src/components/export/exportContent.tsx","webpack://koku-ui/./src/components/export/exportDrawer.tsx","webpack://koku-ui/./src/components/export/export.styles.ts","webpack://koku-ui/./src/components/export/exportLink.tsx","webpack://koku-ui/./src/components/permissions/permissionsWrapper.tsx"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nclass ExportContentBase extends React.Component {\n    render() {\n        return React.createElement(\"span\", null, \"Hello\");\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {\n    // TBD...\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExportContent = injectIntl(connect(mapStateToProps, mapDispatchToProps)(ExportContentBase));\nexport { ExportContent };\n","import './export.scss';\nimport { Drawer, DrawerActions, DrawerCloseButton, DrawerContent, DrawerContentBody, DrawerHead, DrawerPanelContent, Title, TitleSizes, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { uiActions, uiSelectors } from 'store/ui';\nimport { ExportContent } from './exportContent';\nclass ExportDrawerBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.drawerRef = React.createRef();\n        this.getPanelContent = () => {\n            const { intl, isOpen } = this.props;\n            return (React.createElement(DrawerPanelContent, null,\n                React.createElement(DrawerHead, null,\n                    React.createElement(\"span\", { tabIndex: isOpen ? 0 : -1, ref: this.drawerRef },\n                        React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes.xl }, intl.formatMessage(messages.ExportAllExports))),\n                    React.createElement(DrawerActions, null,\n                        React.createElement(DrawerCloseButton, { onClick: this.handleClose }))),\n                React.createElement(DrawerContentBody, null,\n                    React.createElement(ExportContent, null))));\n        };\n        this.handleClose = () => {\n            const { closeExportDrawer } = this.props;\n            closeExportDrawer();\n        };\n        this.handleExpand = () => {\n            this.drawerRef.current && this.drawerRef.current.focus();\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        // TBD...\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    componentDidUpdate(prevProps) {\n        // TBD...\n    }\n    render() {\n        const { children, isOpen } = this.props;\n        return (React.createElement(Drawer, { className: \"drawerOverride\", isExpanded: isOpen, onExpand: this.handleExpand },\n            React.createElement(DrawerContent, { panelContent: this.getPanelContent() },\n                React.createElement(DrawerContentBody, null, children))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const isOpen = uiSelectors.selectIsExportDrawerOpen(state);\n    return {\n        isOpen,\n    };\n});\nconst mapDispatchToProps = {\n    closeExportDrawer: uiActions.closeExportDrawer,\n};\nconst ExportDrawer = injectIntl(connect(mapStateToProps, mapDispatchToProps)(ExportDrawerBase));\nexport { ExportDrawer };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    exportIcon: {\n        marginLeft: global_spacer_md.value,\n        marginRight: global_spacer_sm.value,\n    },\n    exportLink: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n};\n","import { Button } from '@patternfly/react-core';\nimport { AngleDoubleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { uiSelectors } from 'store/ui';\nimport { uiActions } from 'store/ui';\nimport { styles } from './export.styles';\nclass ExportLinkBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleToggle = event => {\n            const { closeExportDrawer, isOpen, openExportDrawer } = this.props;\n            if (isOpen) {\n                closeExportDrawer();\n            }\n            else {\n                openExportDrawer();\n            }\n            event.preventDefault();\n            return false;\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.exportLink },\n            React.createElement(Button, { component: \"a\", href: \"#/\", variant: \"link\", onClick: this.handleToggle },\n                React.createElement(\"span\", { style: styles.exportIcon },\n                    React.createElement(AngleDoubleLeftIcon, null)),\n                intl.formatMessage(messages.ExportAllExports))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const isOpen = uiSelectors.selectIsExportDrawerOpen(state);\n    return {\n        isOpen,\n    };\n});\nconst mapDispatchToProps = {\n    closeExportDrawer: uiActions.closeExportDrawer,\n    openExportDrawer: uiActions.openExportDrawer,\n};\nconst ExportLink = injectIntl(connect(mapStateToProps, mapDispatchToProps)(ExportLinkBase));\nexport { ExportLink };\n","import { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { asyncComponent } from 'components/async';\nimport { ExportDrawer } from 'components/export';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { accountSettingsActions, accountSettingsSelectors } from 'store/accountSettings';\nimport { createMapStateToProps } from 'store/common';\nimport { providersActions, providersQuery, providersSelectors } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { userAccessActions, userAccessQuery, userAccessSelectors } from 'store/userAccess';\nconst InactiveSources = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/inactiveSources'));\nconst Permissions = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/permissions'));\nclass PermissionsWrapperBase extends React.Component {\n    componentDidMount() {\n        const { fetchAccountSettings, fetchProviders, fetchUserAccess, providersQueryString, resetState, userAccessQueryString, } = this.props;\n        // Clear cached API responses\n        resetState();\n        // Fetched in order of component usage via render()\n        fetchUserAccess(\"all\" /* all */, userAccessQueryString);\n        fetchProviders(\"all\" /* all */, providersQueryString);\n        fetchAccountSettings();\n    }\n    render() {\n        const { accountSettingsFetchStatus, children, providersFetchStatus, userAccessFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, userAccessFetchStatus === 2 /* complete */ && (React.createElement(Permissions, null, providersFetchStatus === 2 /* complete */ && (React.createElement(ExportDrawer, null,\n            React.createElement(InactiveSources, null),\n            accountSettingsFetchStatus === 2 /* complete */ && children))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const accountSettings = accountSettingsSelectors.selectAccountSettings(state);\n    const accountSettingsError = accountSettingsSelectors.selectAccountSettingsError(state);\n    const accountSettingsFetchStatus = accountSettingsSelectors.selectAccountSettingsFetchStatus(state);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    return {\n        accountSettings,\n        accountSettingsError,\n        accountSettingsFetchStatus,\n        providers,\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchAccountSettings: accountSettingsActions.fetchAccountSettings,\n    fetchProviders: providersActions.fetchProviders,\n    fetchUserAccess: userAccessActions.fetchUserAccess,\n    resetState: uiActions.resetState,\n};\nconst PermissionsWrapperConnect = connect(mapStateToProps, mapDispatchToProps)(PermissionsWrapperBase);\nconst PermissionsWrapper = injectIntl(PermissionsWrapperConnect);\nexport default PermissionsWrapper;\n"],"names":["getProvidersQuery","query","stringify","encode","indices","ExportContentBase","render","mapStateToProps","ExportContent","injectIntl","connect","ExportDrawerBase","constructor","props","super","this","drawerRef","getPanelContent","intl","isOpen","DrawerPanelContent","DrawerHead","tabIndex","ref","Title","headingLevel","size","TitleSizes","formatMessage","messages","DrawerActions","DrawerCloseButton","onClick","handleClose","DrawerContentBody","closeExportDrawer","handleExpand","current","focus","bind","componentDidMount","componentDidUpdate","prevProps","children","Drawer","className","isExpanded","onExpand","DrawerContent","panelContent","state","ui","ExportDrawer","styles","exportIcon","marginLeft","global_spacer_md","marginRight","global_spacer_sm","exportLink","display","alignItems","ExportLinkBase","arguments","handleToggle","event","openExportDrawer","preventDefault","style","Button","component","href","variant","ExportLink","InactiveSources","Permissions","PermissionsWrapperBase","fetchAccountSettings","fetchProviders","fetchUserAccess","providersQueryString","resetState","userAccessQueryString","accountSettingsFetchStatus","providersFetchStatus","userAccessFetchStatus","accountSettings","accountSettingsError","providers","providersError","userAccess","userAccessError","mapDispatchToProps","PermissionsWrapperConnect"],"sourceRoot":""}