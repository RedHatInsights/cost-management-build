{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartLabelTooltip/chartLabelTooltip.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpOnAwsReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummary.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummary.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItem.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItems.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryUsage.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/pages/awsDashboard/awsDashboardWidget.styles.ts","webpack:///./src/pages/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboardWidget.styles.ts","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboardWidget.tsx","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/pages/overview/index.ts"],"names":["unitLookupKey","unit","toLowerCase","formatValue","value","options","lookup","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","Object","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_9__","transformOcpOnAwsReport","utils_getComputedOcpOnAwsReportItems__WEBPACK_IMPORTED_MODULE_8__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getDateRangeString","i18next__WEBPACK_IMPORTED_MODULE_5__","t","count","endDate","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getMonthRangeString","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","getTooltipLabel","formatOptions","toString","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","__webpack_exports__","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","__rest","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","ChartLabelTooltip","_a","content","props","react_default","createElement","Tooltip","enableFlip","ChartLabel","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpOnAwsReportItems","getUnsortedComputedOcpOnAwsReportItems","account_alias","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","instance_type","region","service","styles","StyleSheet","create","container","fontSize","esm","EmptyValueState","className","minus_icon","display","justifyContent","height","marginTop","ErrorState","es","error","icon","error_circle_o_icon","title","subTitle","response","status","ban_icon","EmptyState","EmptyStateIcon","Title","size","EmptyStateBody","LoadingState","binoculars_icon","viewSources","mapStateToProps","common","state","NoProvidersState","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","Link","to","dollar_sign_icon","chartStyles","currentRequestData","fill","stroke","strokeDasharray","currentUsageData","labels","fontFamily","minWidth","previousRequestData","previousUsageData","currentColorScale","previousColorScale","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","minHeight","width","legendTitle","marginBottom","usageChart_UsageChart","containerRef","createRef","initDatum","previousLegendData","chartUtils","push","symbol","previous","charts","show","colorScale","onClick","handlePreviousLegendClick","currentLegendData","current","gutter","handleCurrentLegendClick","setState","newDatum","index","handleResize","clientWidth","getChart","ChartArea","getLegend","ChartLegend","events","target","eventHandlers","mutation","itemsPerRow","labelComponent","chartLabelTooltip","getLegendTooltip","responsive","formatDatumValue","formatDatumOptions","childName","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","maxValue","Math","ceil","currentRequestDate","get_date_default","currentUsageDate","previousRequestDate","previousUsageDate","result","trim","ChartVoronoiContainer","voronoiDimension","legendWidth","getDomain","getEndDate","midDate","floor","ref","Chart","containerComponent","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","isPreviousLegendVisible","isCurrentLegendVisible","previousMonth","currentMonth","trendChart_TrendChart","currentData","previousData","legendData","handleCostLegendClick","orientation","maxCurrent","maxPrevious","previousDate","currentDate","isLegendVisible","chartSkeleton","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitleTooltip","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","marginRight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","AwsReportSummaryDetails","costLabel","reportType","showUnits","usageLabel","emptyValueState","meta","total","usageUnits","unitsLabel","utils_formatValue","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","undefined","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","OcpOnAwsReportSummary","ocpOnAwsReportSummaryAlt_styles_styles","OcpOnAwsReportSummaryAlt","ocpOnAwsReportSummaryDetails_styles_styles","marginLeft","titleContainer","usageText","usageValue","OcpOnAwsReportSummaryDetails","requestLabel","awsReportType","ocpOnAwsReportSummaryItem_styles_styles","OcpOnAwsReportSummaryItemBase","OcpOnAwsReportSummaryItem","ocpOnAwsReportSummaryItems_styles_styles","OcpOnAwsReportSummaryItems","ocpOnAwsReportSummaryTrend_styles_styles","OcpOnAwsReportSummaryTrend","OcpOnAwsReportSummaryUsage","usageChart","OcpReportSummary","ocpReportSummaryAlt_styles_styles","OcpReportSummaryAlt","ocpReportSummaryDetails_styles_styles","OcpReportSummaryDetails","requestValue","ocpReportSummaryItem_styles_styles","OcpReportSummaryItemBase","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","OcpReportSummaryItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","tabItems","getIdKeyForTab","tab","widgetId","widget","awsDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","tabsQuery","currentReport","awsReports","selectReport","currentReportFetchStatus","selectReportFetchStatus","previousReport","tabsReport","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","AwsDashboardWidget","activeTabKey","buildDetailsLink","currentTab","awsQuery","group_by","order_by","trend","getUnits","awsReportSummary","titleKey","getDetails","getDetailsLabel","costKey","usageKey","getDetailsLink","isDetailsLink","handleInsightsNavClick","getDetailsLinkTitle","getHorizontalLayout","getSubTitle","getSubTitleTooltip","getTabs","getTitle","get_month_default","format_default","start_of_month_default","get_year_default","getTab","Tab","eventKey","getTabTitle","getTabItem","availableTabs","topItems","activeTab","isCostReport","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","insights","chrome","appNavClick","secondaryNav","event","tabIndex","isHorizontal","awsDashboard_mapStateToProps","selectWidgets","widgets","selectCurrentWidgets","awsDashboard_awsDashboard","ocpDashboardWidget_styles_styles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpReports","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpQuery","currentInfrastructureData","previousInfrastructureData","ocpReportSummary","requestKey","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","ocpOnAwsDashboardWidget_styles_styles","ocpOnAwsDashboardWidget_getIdKeyForTab","ocpOnAwsDashboardWidget_mapStateToProps","ocpOnAwsDashboard","ocpOnAwsReports","ocpOnAwsDashboardWidget_mapDispatchToProps","OcpOnAwsDashboardWidget","ocpOnAwsQuery","ocpOnAwsReportSummary","ocpOnAwsDashboard_mapStateToProps","ocpOnAwsDashboard_ocpOnAwsDashboard","overview_styles_styles","info","verticalAlign","infoIcon","infoTitle","fontWeight","headerOverride","index_esm","overview_getIdKeyForTab","overview_mapStateToProps","awsProvidersQueryString","providersQuery","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","Overview","showPopover","getAddSourceButton","Button","variant","secondary","getAvailableTabs","contentRef","tabContentId","tabContentRef","getTabContent","val","TabContent","handlePopoverClick","isLoading","noAwsProviders","noOcpProviders","noProviders","showTabs","sizes","Popover","aria-label","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_overview__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"780b5c0d1d912ee5c0ee.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    return lookup;\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpOnAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpOnAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const test = i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n    return test;\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nconst ChartLabelTooltip = (_a) => {\n    var { content } = _a, props = __rest(_a, [\"content\"]);\n    return (React.createElement(Tooltip, { content: content(props.datum), enableFlip: true },\n        React.createElement(ChartLabel, Object.assign({}, props))));\n};\nexport { ChartLabelTooltip };\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage ? value.usage.units : value.cost.units;\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpOnAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage ? value.usage.units : value.cost.units;\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage ? value.usage.units : value.cost.units,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BanIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error && error.response && error.response.status === 401) {\n        icon = BanIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BinocularsIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(EmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_disabled_color_100, global_disabled_color_200, global_FontFamily_sans_serif, global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: ['#A2DA9C', '#88D080', '#6EC664', '#519149', '#3C6C37'],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_100.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n    legend: {\n        display: 'inline-block',\n        fontSize: global_FontSize_md.value,\n        minHeight: '60px',\n        minWidth: '175px',\n        width: '50%',\n    },\n    legendTitle: {\n        fontSize: global_FontSize_md.value,\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, title, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            if (previousUsageData) {\n                const [start] = getMonthRangeString(previousUsageData, 'chart.usage_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousUsageData, true, true, 1),\n                });\n            }\n            if (previousRequestData) {\n                const [start] = getMonthRangeString(previousRequestData, 'chart.requests_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousRequestData, true, true, 1),\n                });\n            }\n            const previous = {\n                charts: [\n                    {\n                        data: previousUsageData,\n                        name: 'previousUsage',\n                        show: true,\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        name: 'previousRequest',\n                        show: true,\n                        style: chartStyles.previousRequestData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.previousColorScale,\n                    data: previousLegendData,\n                    onClick: this.handlePreviousLegendClick,\n                    title,\n                },\n            };\n            const currentLegendData = [];\n            if (currentUsageData) {\n                const [start] = getMonthRangeString(currentUsageData, 'chart.usage_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentUsageData, true, false),\n                });\n            }\n            if (currentRequestData) {\n                const [start] = getMonthRangeString(currentRequestData, 'chart.requests_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentRequestData, true, false),\n                });\n            }\n            const current = {\n                charts: [\n                    {\n                        data: currentUsageData,\n                        name: 'currentUsage',\n                        show: true,\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: currentRequestData,\n                        name: 'currentRequest',\n                        show: true,\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.currentColorScale,\n                    data: currentLegendData,\n                    gutter: 55,\n                    onClick: this.handleCurrentLegendClick,\n                    title,\n                },\n            };\n            this.setState({\n                datum: {\n                    previous,\n                    current,\n                },\n            });\n        };\n        this.handleCurrentLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.current.charts.length) {\n                newDatum.current.charts[props.index].show = !newDatum.current.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.handlePreviousLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.previous.charts.length) {\n                newDatum.previous.charts[props.index].show = !newDatum.previous.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, name: datum.name, key: `usage-chart-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], height: 25, itemsPerRow: 1, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), responsive: false, style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    isCurrentLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.current.legend && datum.current.legend.data) {\n            datum.current.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    isPreviousLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.previous.legend && datum.previous.legend.data) {\n            datum.previous.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const legendWidth = chartStyles.legend.minWidth > width / 2\n            ? chartStyles.legend.minWidth\n            : width / 2;\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, theme: ChartTheme, width: width },\n                Boolean(datum && datum.previous) &&\n                    datum.previous.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                Boolean(datum && datum.current) &&\n                    datum.current.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.previous.legend.title)),\n            Boolean(this.isCurrentLegendVisible() && !this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.current.legend.title)),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) }, this.getLegend(datum.previous.legend, legendWidth))),\n            Boolean(this.isCurrentLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) }, this.getLegend(datum.current.legend, legendWidth)))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_disabled_color_200, global_FontFamily_sans_serif, global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        '#A2DA9C',\n        '#88D080',\n        '#6EC664',\n        '#519149',\n        '#3C6C37',\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    legend: {\n        display: 'inline-block',\n        fontSize: global_FontSize_md.value,\n        marginTop: global_spacer_lg.value,\n        minWidth: '175px',\n    },\n    legendTitle: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, title } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            const cost = {\n                charts: [\n                    {\n                        data: previousData,\n                        name: 'previous',\n                        show: true,\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        name: 'current',\n                        show: true,\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.colorScale,\n                    data: legendData,\n                    onClick: this.handleCostLegendClick,\n                    title,\n                },\n            };\n            this.setState({\n                datum: {\n                    cost,\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.cost.charts.length) {\n                newDatum.cost.charts[props.index].show = !newDatum.cost.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, name: datum.name, key: `trend-chart-${datum.name}-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], gutter: 20, height: 25, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), orientation: width > 150 ? 'horizontal' : 'vertical', responsive: false, style: chartStyles.legend, width: width }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.cost.legend && datum.cost.legend.data) {\n            datum.cost.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const legendWidth = chartStyles.legend.minWidth > width / 2\n            ? chartStyles.legend.minWidth\n            : width / 2;\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, theme: ChartTheme, width: width },\n                Boolean(datum && datum.cost) &&\n                    datum.cost.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })),\n            Boolean(this.isLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) },\n                Boolean(datum.cost.legend.title) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.cost.legend.title)),\n                this.getLegend(datum.cost.legend, legendWidth)))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, t, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits && usage >= 0) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnAwsReportSummary.styles';\nconst OcpOnAwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpOnAwsReportSummary = translate()(OcpOnAwsReportSummaryBase);\nexport { OcpOnAwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnAwsReportSummaryAlt.styles';\nconst OcpOnAwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpOnAwsReportSummaryAlt = translate()(OcpOnAwsReportSummaryAltBase);\nexport { OcpOnAwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    titleContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n    usageText: {\n        marginRight: global_spacer_sm.value,\n    },\n    usageValue: {\n        marginRight: global_spacer_sm.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsReportSummaryDetails.styles';\nconst OcpOnAwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestLabel, showUnits = false, t, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const awsReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (awsReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', formatOptions);\n        }\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.titleContainer) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else if (!awsReportType) {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.titleContainer) },\n                React.createElement(\"div\", { className: css(styles.value, styles.usageValue) },\n                    usage,\n                    React.createElement(\"div\", { className: css(styles.text) },\n                        React.createElement(\"div\", null, usageLabel)))),\n            React.createElement(\"div\", { className: css(styles.titleContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    request,\n                    React.createElement(\"div\", { className: css(styles.text) }, requestLabel)))));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits && usage >= 0) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst OcpOnAwsReportSummaryDetails = translate()(OcpOnAwsReportSummaryDetailsBase);\nexport { OcpOnAwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsReportSummaryItem.styles';\nconst OcpOnAwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpOnAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpOnAwsReportSummaryItem = translate()(OcpOnAwsReportSummaryItemBase);\nexport { OcpOnAwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { styles } from './ocpOnAwsReportSummaryItems.styles';\nclass OcpOnAwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpOnAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpOnAwsReportSummaryItems = translate()(OcpOnAwsReportSummaryItemsBase);\nexport { OcpOnAwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpOnAwsReportSummaryTrend.styles';\nconst OcpOnAwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpOnAwsReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpOnAwsReportSummaryTrend.styles';\nconst OcpOnAwsReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpOnAwsReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    titleContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n    usageText: {\n        marginRight: global_spacer_sm.value,\n    },\n    usageValue: {\n        marginRight: global_spacer_sm.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestLabel, usageLabel, t, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let requestValue = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n            requestValue = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', formatOptions);\n        }\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: css(styles.titleContainer) },\n            React.createElement(\"div\", { className: css(styles.value, styles.usageValue) },\n                Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                        derivedCost,\n                        infrastructureCost,\n                    }), enableFlip: true },\n                    React.createElement(\"div\", null, cost))) : (React.createElement(\"div\", null, usage)),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel)))),\n        React.createElement(\"div\", { className: css(styles.titleContainer) }, Boolean(reportType !== \"cost\" /* cost */) && (React.createElement(\"div\", { className: css(styles.value) },\n            requestValue,\n            React.createElement(\"div\", { className: css(styles.text) }, requestLabel))))));\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_disabled_color_100, global_disabled_color_200, global_FontFamily_sans_serif, global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: ['#A2DA9C', '#88D080', '#6EC664', '#519149', '#3C6C37'],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_100.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n    legendTitle: {\n        fontSize: global_FontSize_md.value,\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_lg.value,\n    },\n    legend: {\n        display: 'inline-block',\n        fontSize: global_FontSize_md.value,\n        minHeight: '60px',\n        minWidth: '200px',\n        width: '50%',\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, title, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            if (previousCostData) {\n                const [start] = getMonthRangeString(previousCostData, 'chart.cost_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousCostData, true, true, 1),\n                });\n            }\n            if (previousInfrastructureCostData) {\n                const [start] = getMonthRangeString(previousInfrastructureCostData, 'chart.cost_infrastructure_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousInfrastructureCostData, true, true, 1),\n                });\n            }\n            const previous = {\n                charts: [\n                    {\n                        data: previousCostData,\n                        name: 'previousCost',\n                        show: true,\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        data: previousInfrastructureCostData,\n                        name: 'previousInfrastructureCost',\n                        show: true,\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.previousColorScale,\n                    data: previousLegendData,\n                    onClick: this.handlePreviousLegendClick,\n                    title,\n                },\n            };\n            const currentLegendData = [];\n            if (currentCostData) {\n                const [start] = getMonthRangeString(currentCostData, 'chart.cost_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentCostData, true, false),\n                });\n            }\n            if (currentInfrastructureCostData) {\n                const [start] = getMonthRangeString(currentInfrastructureCostData, 'chart.cost_infrastructure_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentInfrastructureCostData, true, false),\n                });\n            }\n            const current = {\n                charts: [\n                    {\n                        data: currentCostData,\n                        name: 'currentCost',\n                        show: true,\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        data: currentInfrastructureCostData,\n                        name: 'currentInfrastructureCost',\n                        show: true,\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.currentColorScale,\n                    data: currentLegendData,\n                    gutter: 55,\n                    onClick: this.handleCurrentLegendClick,\n                    title,\n                },\n            };\n            this.setState({\n                datum: {\n                    previous,\n                    current,\n                },\n            });\n        };\n        this.handleCurrentLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.current.charts.length) {\n                newDatum.current.charts[props.index].show = !newDatum.current.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.handlePreviousLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.previous.charts.length) {\n                newDatum.previous.charts[props.index].show = !newDatum.previous.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, name: datum.name, key: `usage-chart-${datum.name}-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], height: 25, itemsPerRow: 1, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), responsive: false, style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    isCurrentLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.current.legend && datum.current.legend.data) {\n            datum.current.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    isPreviousLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.previous.legend && datum.previous.legend.data) {\n            datum.previous.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const legendWidth = chartStyles.legend.minWidth > width / 2\n            ? chartStyles.legend.minWidth\n            : width / 2;\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, theme: ChartTheme, width: width },\n                Boolean(datum && datum.previous) &&\n                    datum.previous.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                Boolean(datum && datum.current) &&\n                    datum.current.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.previous.legend.title)),\n            Boolean(this.isCurrentLegendVisible() && !this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.current.legend.title)),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) }, this.getLegend(datum.previous.legend, legendWidth))),\n            Boolean(this.isCurrentLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) }, this.getLegend(datum.current.legend, legendWidth)))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { transformAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { AwsReportSummary, AwsReportSummaryAlt, AwsReportSummaryDetails, AwsReportSummaryItem, AwsReportSummaryItems, AwsReportSummaryTrend, } from 'components/reports/awsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/awsDashboard';\nimport { awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/aws?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const currentData = transformAwsReport(currentReport, trend.type);\n            const previousData = transformAwsReport(previousReport, trend.type);\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryTrend, { currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, showUnits: details.showUnits, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(180)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('aws_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('aws_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(AwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(75),\n                React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs())));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'aws', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDashboardWidgetBase));\nexport { AwsDashboardWidget, AwsDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst AwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(AwsDashboardBase));\nexport default AwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { transformOcpReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpReportSummary, OcpReportSummaryAlt, OcpReportSummaryDetails, OcpReportSummaryItem, OcpReportSummaryItems, OcpReportSummaryTrend, OcpReportSummaryUsage, } from 'components/reports/ocpReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const reportItem = reportType === \"cost\" /* cost */ ? 'cost' : 'usage';\n            const currentUsageData = transformOcpReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const currentInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const previousInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(OcpReportSummaryTrend, { currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title })) : (React.createElement(OcpReportSummaryUsage, { currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpReportSummaryDetails, { formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(180)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('ocp_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('ocp_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                        ? reportItem.cost\n                        : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(75),\n                React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs())));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id } = this.props;\n            const tab = availableTabs[tabIndex];\n            this.props.updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, widgetId } = this.props;\n        this.props.updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDashboardWidgetBase));\nexport { OcpDashboardWidget, OcpDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst OcpDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(OcpDashboardBase));\nexport default OcpDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport { transformOcpOnAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpOnAwsReportSummary, OcpOnAwsReportSummaryAlt, OcpOnAwsReportSummaryDetails, OcpOnAwsReportSummaryItem, OcpOnAwsReportSummaryItems, OcpOnAwsReportSummaryTrend, OcpOnAwsReportSummaryUsage, } from 'components/reports/ocpOnAwsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsDashboardActions, ocpOnAwsDashboardSelectors, } from 'store/ocpOnAwsDashboard';\nimport { ocpOnAwsReportsSelectors } from 'store/ocpOnAwsReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpOnAwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp-on-aws?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const costReportType = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            const reportItem = costReportType ? 'infrastructureCost' : 'usage';\n            const currentUsageData = transformOcpOnAwsReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpOnAwsReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpOnAwsReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpOnAwsReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const units = this.getUnits();\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"instance_type\" /* instanceType */ ||\n                reportType === \"network\" /* network */ ||\n                reportType === \"storage\" /* storage */) ? (React.createElement(OcpOnAwsReportSummaryTrend, { currentData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) })) : (React.createElement(OcpOnAwsReportSummaryUsage, { currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpOnAwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), showUnits: details.showUnits, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpOnAwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(180)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('ocp_on_aws_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('ocp_on_aws_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpOnAwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpOnAwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.infrastructure_cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: isCostReport ? reportItem.infrastructureCost : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.infrastructure_cost\n                        ? unitLookupKey(currentReport.meta.total.infrastructure_cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpOnAwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(75),\n                this.getTabs()));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp-on-aws', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpOnAwsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpOnAwsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpOnAwsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpOnAwsDashboardActions.fetchWidgetReports,\n    updateTab: ocpOnAwsDashboardActions.changeWidgetTab,\n};\nconst OcpOnAwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpOnAwsDashboardWidgetBase));\nexport { OcpOnAwsDashboardWidget, OcpOnAwsDashboardWidgetBase, };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsDashboardSelectors } from 'store/ocpOnAwsDashboard';\nimport { OcpOnAwsDashboardWidget } from './ocpOnAwsDashboardWidget';\nconst OcpOnAwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpOnAwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(OcpOnAwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpOnAwsDashboardSelectors.selectWidgets(state),\n        widgets: ocpOnAwsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpOnAwsDashboard = translate()(connect(mapStateToProps, {})(OcpOnAwsDashboardBase));\nexport default OcpOnAwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n});\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { Button, ButtonType, ButtonVariant, Popover, Tab, TabContent, Tabs, Title, TitleSize, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsDashboard from 'pages/awsDashboard/awsDashboard';\nimport OcpDashboard from 'pages/ocpDashboard/ocpDashboard';\nimport OcpOnAwsDashboard from 'pages/ocpOnAwsDashboard/ocpOnAwsDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { awsProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { getTestProps, testIds } from 'testIds';\nimport { headerOverride, styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n        case \"ocpOnAws\" /* ocpOnAws */:\n            return 'ocpOnAws';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            showPopover: false,\n        };\n        this.getAddSourceButton = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, { to: \"/sources\" },\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.add_btn), { type: ButtonType.submit, variant: ButtonVariant.secondary }), t('providers.add_source'))));\n        };\n        this.getAvailableTabs = () => {\n            const { awsProviders, ocpProviders } = this.props;\n            const availableTabs = [];\n            if (awsProviders &&\n                awsProviders.meta &&\n                awsProviders.meta.count &&\n                (ocpProviders && ocpProviders.meta && ocpProviders.meta.count)) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocpOnAws\" /* ocpOnAws */,\n                });\n            }\n            if (ocpProviders && ocpProviders.meta && ocpProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (awsProviders && awsProviders.meta && awsProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"aws\" /* aws */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: this.getTabTitle(tab) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"ocpOnAws\" /* ocpOnAws */) {\n                return activeTabKey === index ? React.createElement(OcpOnAwsDashboard, null) : null;\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                return activeTabKey === index ? React.createElement(OcpDashboard, null) : null;\n            }\n            else if (currentTab === \"aws\" /* aws */) {\n                return activeTabKey === index ? React.createElement(AwsDashboard, null) : null;\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"aws\" /* aws */) {\n                return t('overview.aws');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n            else if (tab === \"ocpOnAws\" /* ocpOnAws */) {\n                return t('overview.ocp_on_aws');\n            }\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    render() {\n        const { awsProviders, awsProvidersError, awsProvidersFetchStatus, ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || ocpProvidersError;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = awsProviders !== undefined &&\n            awsProviders.meta !== undefined &&\n            awsProviders.meta.count === 0 &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = ocpProviders !== undefined &&\n            ocpProviders.meta !== undefined &&\n            ocpProviders.meta.count === 0 &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { size: TitleSize['2xl'] },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp_on_aws')),\n                                    React.createElement(\"p\", null, t('overview.ocp_on_aws_desc')),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick }))))),\n                    this.getAddSourceButton()),\n                Boolean(showTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs(availableTabs)))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(OverviewBase));\nexport default Overview;\n","import { hot } from 'react-hot-loader';\nimport Overview from './overview';\nexport default hot(module)(Overview);\n"],"sourceRoot":""}