{"version":3,"sources":["webpack://koku-ui/./src/api/api.ts","webpack://koku-ui/./src/api/costModels.ts","webpack://koku-ui/./src/api/providers.ts","webpack://koku-ui/./src/api/queries/awsQuery.ts","webpack://koku-ui/./src/api/queries/azureQuery.ts","webpack://koku-ui/./src/api/queries/gcpQuery.ts","webpack://koku-ui/./src/api/queries/ibmQuery.ts","webpack://koku-ui/./src/api/queries/ocpCloudQuery.ts","webpack://koku-ui/./src/api/queries/ocpQuery.ts","webpack://koku-ui/./src/api/queries/query.ts","webpack://koku-ui/./src/api/reports/awsOcpReports.ts","webpack://koku-ui/./src/api/reports/awsReports.ts","webpack://koku-ui/./src/api/reports/azureOcpReports.ts","webpack://koku-ui/./src/api/reports/azureReports.ts","webpack://koku-ui/./src/api/reports/gcpOcpReports.ts","webpack://koku-ui/./src/api/reports/gcpReports.ts","webpack://koku-ui/./src/api/reports/ibmReports.ts","webpack://koku-ui/./src/api/reports/ocpCloudReports.ts","webpack://koku-ui/./src/api/reports/ocpReports.ts","webpack://koku-ui/./src/api/resources/awsOcpResource.ts","webpack://koku-ui/./src/api/resources/awsResource.ts","webpack://koku-ui/./src/api/resources/azureOcpResource.ts","webpack://koku-ui/./src/api/resources/azureResource.ts","webpack://koku-ui/./src/api/resources/gcpOcpResource.ts","webpack://koku-ui/./src/api/resources/gcpResource.ts","webpack://koku-ui/./src/api/resources/ibmResource.ts","webpack://koku-ui/./src/api/resources/ocpResource.ts","webpack://koku-ui/./src/api/resources/resourceUtils.ts","webpack://koku-ui/./src/pages/state/maintenance/maintenanceState.tsx","webpack://koku-ui/./src/pages/state/maintenance/index.ts","webpack://koku-ui/./src/pages/state/maintenance/maintenance.tsx","webpack://koku-ui/./src/app.tsx","webpack://koku-ui/./src/components/i18n/intl.ts","webpack://koku-ui/./src/locales/messages.ts","webpack://koku-ui/./src/pages/costModels/createCostModelWizard/parseError.ts","webpack://koku-ui/./src/components/async/asyncComponent/asyncComponent.tsx","webpack://koku-ui/./src/components/async/asyncComponent/index.ts","webpack://koku-ui/./src/components/async/permissionsComponent/permissionsComponent.tsx","webpack://koku-ui/./src/routes.tsx","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/common.ts","webpack://koku-ui/./src/store/costModels/actions.ts","webpack://koku-ui/./src/store/costModels/reducer.ts","webpack://koku-ui/./src/store/costModels/selectors.ts","webpack://koku-ui/./src/store/currency/currencyCommon.ts","webpack://koku-ui/./src/store/currency/currencyActions.ts","webpack://koku-ui/./src/api/currency.ts","webpack://koku-ui/./src/store/currency/currencyReducer.ts","webpack://koku-ui/./src/store/currency/currencySelectors.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardReducer.ts","webpack://koku-ui/./src/store/djangoUtils/pagination.ts","webpack://koku-ui/./src/store/djangoUtils/query.ts","webpack://koku-ui/./src/store/exports/exportCommon.ts","webpack://koku-ui/./src/store/exports/exportSelectors.ts","webpack://koku-ui/./src/store/exports/exportActions.ts","webpack://koku-ui/./src/api/exports/exportUtils.ts","webpack://koku-ui/./src/api/exports/awsExport.ts","webpack://koku-ui/./src/api/exports/awsOcpExport.ts","webpack://koku-ui/./src/api/exports/azureExport.ts","webpack://koku-ui/./src/api/exports/azureOcpExport.ts","webpack://koku-ui/./src/api/exports/gcpExport.ts","webpack://koku-ui/./src/api/exports/gcpOcpExport.ts","webpack://koku-ui/./src/api/exports/ibmExport.ts","webpack://koku-ui/./src/api/exports/ocpCloudExport.ts","webpack://koku-ui/./src/api/exports/ocpExport.ts","webpack://koku-ui/./src/store/exports/exportReducer.ts","webpack://koku-ui/./src/api/forecasts/awsForecast.ts","webpack://koku-ui/./src/api/forecasts/awsOcpForecast.ts","webpack://koku-ui/./src/api/forecasts/azureForecast.ts","webpack://koku-ui/./src/api/forecasts/azureOcpForecast.ts","webpack://koku-ui/./src/api/forecasts/gcpForecast.ts","webpack://koku-ui/./src/api/forecasts/gcpOcpForecast.ts","webpack://koku-ui/./src/api/forecasts/ibmForecast.ts","webpack://koku-ui/./src/api/forecasts/ocpCloudForecast.ts","webpack://koku-ui/./src/api/forecasts/ocpForecast.ts","webpack://koku-ui/./src/store/forecasts/forecastCommon.ts","webpack://koku-ui/./src/store/forecasts/forecastSelectors.ts","webpack://koku-ui/./src/store/forecasts/forecastActions.ts","webpack://koku-ui/./src/api/forecasts/forecastUtils.ts","webpack://koku-ui/./src/store/forecasts/forecastReducer.ts","webpack://koku-ui/./src/store/priceList/reducer.ts","webpack://koku-ui/./src/store/priceList/actions.ts","webpack://koku-ui/./src/store/rootReducer.ts","webpack://koku-ui/./src/store/store.ts","webpack://koku-ui/./src/store/metrics/actions.ts","webpack://koku-ui/./src/api/metrics.ts","webpack://koku-ui/./src/store/metrics/reducer.ts","webpack://koku-ui/./src/store/metrics/selectors.ts","webpack://koku-ui/./src/api/orgs/awsOrgs.ts","webpack://koku-ui/./src/store/orgs/orgCommon.ts","webpack://koku-ui/./src/store/orgs/orgSelectors.ts","webpack://koku-ui/./src/store/orgs/orgActions.ts","webpack://koku-ui/./src/api/orgs/orgUtils.ts","webpack://koku-ui/./src/store/orgs/orgReducer.ts","webpack://koku-ui/./src/store/providers/providersCommon.ts","webpack://koku-ui/./src/store/providers/providersActions.ts","webpack://koku-ui/./src/store/providers/providersReducer.ts","webpack://koku-ui/./src/store/providers/providersSelectors.ts","webpack://koku-ui/./src/store/rbac/actions.ts","webpack://koku-ui/./src/api/rbac.ts","webpack://koku-ui/./src/store/rbac/reducer.ts","webpack://koku-ui/./src/store/rbac/selectors.ts","webpack://koku-ui/./src/api/reports/ocpUsageReports.ts","webpack://koku-ui/./src/store/reports/reportCommon.ts","webpack://koku-ui/./src/store/reports/reportSelectors.ts","webpack://koku-ui/./src/store/reports/reportActions.ts","webpack://koku-ui/./src/api/reports/reportUtils.ts","webpack://koku-ui/./src/store/reports/reportReducer.ts","webpack://koku-ui/./src/store/resources/resourceCommon.ts","webpack://koku-ui/./src/store/resources/resourceSelectors.ts","webpack://koku-ui/./src/store/resources/resourceActions.ts","webpack://koku-ui/./src/store/resources/resourceReducer.ts","webpack://koku-ui/./src/store/sourceSettings/actions.ts","webpack://koku-ui/./src/store/sourceSettings/reducer.ts","webpack://koku-ui/./src/store/sourceSettings/selectors.ts","webpack://koku-ui/./src/api/tags/awsOcpTags.ts","webpack://koku-ui/./src/api/tags/awsTags.ts","webpack://koku-ui/./src/api/tags/azureOcpTags.ts","webpack://koku-ui/./src/api/tags/azureTags.ts","webpack://koku-ui/./src/api/tags/gcpOcpTags.ts","webpack://koku-ui/./src/api/tags/gcpTags.ts","webpack://koku-ui/./src/api/tags/ibmTags.ts","webpack://koku-ui/./src/api/tags/ocpCloudTags.ts","webpack://koku-ui/./src/api/tags/ocpTags.ts","webpack://koku-ui/./src/store/tags/tagCommon.ts","webpack://koku-ui/./src/store/tags/tagSelectors.ts","webpack://koku-ui/./src/store/tags/tagActions.ts","webpack://koku-ui/./src/api/tags/tagUtils.ts","webpack://koku-ui/./src/store/tags/tagReducer.ts","webpack://koku-ui/./src/store/ui/uiReducer.ts","webpack://koku-ui/./src/store/ui/uiActions.ts","webpack://koku-ui/./src/store/userAccess/userAccessCommon.ts","webpack://koku-ui/./src/store/userAccess/userAccessActions.ts","webpack://koku-ui/./src/api/userAccess.ts","webpack://koku-ui/./src/store/userAccess/userAccessReducer.ts","webpack://koku-ui/./src/store/userAccess/userAccessSelectors.ts","webpack://koku-ui/./src/utils/getBaseName.ts"],"names":["initApi","version","authInterceptor","reqConfig","Object","assign","headers","fetchCostModels","query","addCostModel","request","updateCostModel","uuid","deleteCostModel","fetchProviders","insights","window","queryString","chrome","auth","getUser","then","getQuery","getQueryRoute","parseQuery","logicalAndPrefix","tagPrefix","breakdownDescKey","breakdownTitleKey","orgUnitIdKey","orgUnitNameKey","tagKey","stringify","filter_by","newQuery","JSON","parse","undefined","key","keys","filter","Array","isArray","push","convertFilterBy","encode","indices","parseKey","val","index","indexOf","substring","length","filterByKey","parseFilterByPrefix","group_by","groupByKey","parseGroupByPrefix","ignoreQueryPrefix","ReportTypePaths","runReport","reportType","path","ResourceTypePaths","isResourceTypeValid","resourcePathsType","resourceType","result","forecast","MaintenanceStateBase","render","intl","this","props","Maintenance","description","Stack","StackItem","formatMessage","messages","url","href","rel","target","MaintenanceState","injectIntl","withRouter","Main","App","constructor","super","arguments","state","maintenanceMode","componentDidMount","history","location","init","identifyApp","pathname","appAction","appNav","on","event","_a","_b","currRoute","routes","includes","navId","domEvent","appPathname","replace","basename","componentDidUpdate","prevProps","scrollTo","componentWillUnmount","mapStateToProps","mapDispatchToProps","compose","connect","locale","navigator","language","split","getLocale","cache","defaultLocale","onError","console","log","AWS","defaultMessage","id","AWSComputeTitle","AWSCostTrendTitle","AWSDailyCostTrendTitle","AWSDashboardCostTitle","AWSDesc","AWSDetailsTableAriaLabel","AWSDetailsTitle","AWSOcpDashboardCostTitle","Azure","AzureComputeTitle","AzureCostTrendTitle","AzureDailyCostTrendTitle","AzureDashboardCostTitle","AzureDesc","AzureDetailsTableAriaLabel","AzureDetailsTitle","AzureOcpDashboardCostTitle","Back","BreakdownBackToDetails","BreakdownBackToDetailsAriaLabel","BreakdownCostBreakdownAriaLabel","BreakdownCostBreakdownTitle","BreakdownCostChartAriaDesc","BreakdownCostChartTooltip","BreakdownCostOverviewTitle","BreakdownHistoricalDataTitle","BreakdownSummaryTitle","BreakdownTitle","BreakdownTotalCostDate","CalculationType","Cancel","ChartCostForecastConeLegendLabel","ChartCostForecastConeLegendNoDataLabel","ChartCostForecastConeLegendTooltip","ChartCostForecastConeTooltip","ChartCostForecastLegendLabel","ChartCostForecastLegendNoDataLabel","ChartCostForecastLegendTooltip","ChartCostInfrastructureForecastConeLegendLabel","ChartCostInfrastructureForecastConeLegendNoDataLabel","ChartCostInfrastructureForecastConeLegendTooltip","ChartCostInfrastructureForecastLegendLabel","ChartCostInfrastructureForecastLegendNoDataLabel","ChartCostInfrastructureForecastLegendTooltip","ChartCostInfrastructureLegendLabel","ChartCostInfrastructureLegendNoDataLabel","ChartCostInfrastructureLegendTooltip","ChartCostLegendLabel","ChartCostLegendNoDataLabel","ChartCostLegendTooltip","ChartCostSupplementaryLegendLabel","ChartCostSupplementaryLegendNoDataLabel","ChartCostSupplementaryLegendTooltip","ChartDateRange","ChartDayOfTheMonth","ChartLimitLegendLabel","ChartLimitLegendNoDataLabel","ChartLimitLegendTooltip","ChartNoData","ChartOthers","ChartRequestsLegendLabel","ChartRequestsLegendNoDataLabel","ChartRequestsLegendTooltip","ChartUsageLegendLabel","ChartUsageLegendNoDataLabel","ChartUsageLegendTooltip","Close","Clusters","Cost","CostCalculations","CostManagement","CostModels","CostModelsAddTagValues","CostModelsAssignSources","CostModelsAssignSourcesErrorDescription","CostModelsAssignSourcesErrorTitle","CostModelsAssignSourcesParen","CostModelsAssignedSources","CostModelsAvailableSources","CostModelsCanDelete","CostModelsCanNotDelete","CostModelsDelete","CostModelsDeleteDesc","CostModelsDeleteSource","CostModelsDescTooLong","CostModelsDetailsAssignSourcesTitle","CostModelsDistributionDesc","CostModelsDistributionEdit","CostModelsEmptyState","CostModelsEmptyStateDesc","CostModelsEmptyStateLearnMore","CostModelsEnterTagKey","CostModelsEnterTagRate","CostModelsEnterTagValue","CostModelsExamplesDoubleMarkup","CostModelsExamplesNoAdjust","CostModelsExamplesReduceSeventyfive","CostModelsExamplesReduceZero","CostModelsFilterPlaceholder","CostModelsFilterTagKey","CostModelsInfoTooLong","CostModelsLastChange","CostModelsPopover","CostModelsPopoverAriaLabel","CostModelsReadOnly","CostModelsRefreshDialog","CostModelsRequiredField","CostModelsRouterErrorTitle","CostModelsRouterServerError","CostModelsSourceDelete","CostModelsSourceDeleteSource","CostModelsSourceDeleteSourceDesc","CostModelsSourceEmptyStateDesc","CostModelsSourceEmptyStateTitle","CostModelsSourceTableAriaLabel","CostModelsSourceTablePaginationAriaLabel","CostModelsSourceType","CostModelsTableAriaLabel","CostModelsTagRateTableAriaLabel","CostModelsTagRateTableDefault","CostModelsTagRateTableKey","CostModelsTagRateTableRate","CostModelsTagRateTableValue","CostModelsUUIDEmptyState","CostModelsUUIDEmptyStateDesc","CostModelsWizardCreateCostModel","CostModelsWizardCreatePriceList","CostModelsWizardEmptySourceTypeLabel","CostModelsWizardEmptyStateCreate","CostModelsWizardEmptyStateOtherTime","CostModelsWizardEmptyStateSkipStep","CostModelsWizardEmptyStateTitle","CostModelsWizardGeneralInfoTitle","CostModelsWizardNoRatesAdded","CostModelsWizardOnboardAWS","CostModelsWizardOnboardOCP","CostModelsWizardPriceListMetric","CostModelsWizardReviewMarkDiscount","CostModelsWizardReviewStatusSubDetails","CostModelsWizardReviewStatusSubTitle","CostModelsWizardReviewStatusTitle","CostModelsWizardSourceCaption","CostModelsWizardSourceErrorDescription","CostModelsWizardSourceErrorTitle","CostModelsWizardSourceSubtitle","CostModelsWizardSourceTableAriaLabel","CostModelsWizardSourceTableCostModel","CostModelsWizardSourceTableDefaultCostModel","CostModelsWizardSourceTitle","CostModelsWizardSourceWarning","CostModelsWizardStepsGenInfo","CostModelsWizardStepsPriceList","CostModelsWizardStepsReview","CostModelsWizardStepsSources","CostModelsWizardSubTitleTable","CostModelsWizardWarningSources","CpuTitle","Create","CreateCostModelConfirmMsg","CreateCostModelDesc","CreateCostModelExit","CreateCostModelExitYes","CreateCostModelNoContinue","CreateCostModelTitle","CreateRate","Currency","CurrencyAbbreviations","CurrencyOptions","CurrencyUnits","DashboardCumulativeCostComparison","DashboardDailyUsageComparison","DashboardDatabaseTitle","DashboardNetworkTitle","DashboardStorageTitle","DashboardTotalCostTooltip","Delete","Description","DetailsActionsExport","DetailsActionsPriceList","DetailsClustersModalTitle","DetailsColumnManagementTitle","DetailsCostValue","DetailsEmptyState","DetailsMoreClusters","DetailsResourceNames","DetailsSummaryModalTitle","DetailsUnusedRequestsLabel","DetailsUnusedUnits","DetailsUnusedUsageLabel","DetailsUsageCapacity","DetailsUsageLimit","DetailsUsageRequests","DetailsUsageUsage","DetailsViewAll","DiscountMinus","DistributionModelDesc","DistributionType","DocsAddOcpSources","DocsConfigCostModels","DocsCostModelTerminology","DocsUsingCostModels","Edit","EditCostModel","EditMarkup","EditMarkupOrDiscount","EmptyFilterSourceStateSubtitle","EmptyFilterStateSubtitle","EmptyFilterStateTitle","ErrorStateNotAuthorizedDesc","ErrorStateNotAuthorizedTitle","ErrorStateUnexpectedDesc","ErrorStateUnexpectedTitle","ExamplesTitle","ExplorerChartDate","ExplorerChartTitle","ExplorerDateRange","ExplorerMonthDate","ExplorerTableAriaLabel","ExplorerTitle","ExportAggregateType","ExportAll","ExportDownload","ExportError","ExportFileName","ExportHeading","ExportResolution","ExportSelected","ExportTimeScope","ExportTimeScopeTitle","ExportTitle","FilterByButtonAriaLabel","FilterByInputAriaLabel","FilterByOrgUnitAriaLabel","FilterByOrgUnitPlaceholder","FilterByPlaceholder","FilterByTagKeyAriaLabel","FilterByTagKeyPlaceholder","FilterByTagValueAriaLabel","FilterByTagValueButtonAriaLabel","FilterByTagValueInputPlaceholder","FilterByTagValuePlaceholder","FilterByValues","ForDate","GCP","GCPComputeTitle","GCPCostTitle","GCPCostTrendTitle","GCPDailyCostTrendTitle","GCPDesc","GCPDetailsTableAriaLabel","GCPDetailsTitle","GroupByAll","GroupByLabel","GroupByTop","GroupByValueNames","GroupByValues","GroupByValuesTitleCase","HistoricalChartCostLabel","HistoricalChartDayOfMonthLabel","HistoricalChartTitle","HistoricalChartUsageLabel","IBM","IBMComputeTitle","IBMCostTitle","IBMCostTrendTitle","IBMDailyCostTrendTitle","IBMDesc","IBMDetailsTableAriaLabel","IBMDetailsTitle","InactiveSourcesGoTo","InactiveSourcesTitle","InactiveSourcesTitleMultiplier","Infrastructure","LearnMore","LoadingStateDesc","LoadingStateTitle","MaintenanceEmptyStateDesc","MaintenanceEmptyStateInfo","MaintenanceEmptyStateThanks","ManageColumnsAriaLabel","ManageColumnsDesc","ManageColumnsTitle","MarkupDescription","MarkupOrDiscount","MarkupOrDiscountDesc","MarkupOrDiscountModalDesc","MarkupPlus","MarkupTitle","Measurement","MeasurementPlaceholder","MeasurementValues","MemoryTitle","Metric","MetricPlaceholder","MetricValues","MonthOverMonthChange","Names","Next","No","NoDataForDate","NoDataStateDesc","NoDataStateRefresh","NoDataStateTitle","NoProvidersStateAwsDesc","NoProvidersStateAwsTitle","NoProvidersStateAzureDesc","NoProvidersStateAzureTitle","NoProvidersStateGcpDesc","NoProvidersStateGcpTitle","NoProvidersStateGetStarted","NoProvidersStateIbmDesc","NoProvidersStateIbmTitle","NoProvidersStateOcpAddSources","NoProvidersStateOcpDesc","NoProvidersStateOcpTitle","NoProvidersStateOverviewDesc","NoProvidersStateOverviewTitle","NotAuthorizedStateAws","NotAuthorizedStateAzure","NotAuthorizedStateCostModels","NotAuthorizedStateGcp","NotAuthorizedStateIbm","NotAuthorizedStateOcp","OCPCPUUsageAndRequests","OCPCloudDashboardComputeTitle","OCPCloudDashboardCostTitle","OCPCloudDashboardCostTrendTitle","OCPCloudDashboardDailyCostTrendTitle","OCPDailyUsageAndRequestComparison","OCPDashboardCPUUsageAndRequests","OCPDashboardCostTitle","OCPDashboardCostTrendTitle","OCPDashboardDailyCostTitle","OCPDashboardMemoryUsageAndRequests","OCPDashboardVolumeUsageAndRequests","OCPDetailsInfrastructureCost","OCPDetailsInfrastructureCostDesc","OCPDetailsSupplementaryCost","OCPDetailsSupplementaryCostDesc","OCPDetailsTableAriaLabel","OCPDetailsTitle","OCPInfrastructureCostTitle","OCPInfrastructureCostTrendTitle","OCPInfrastructureDailyCostTrendTitle","OCPMemoryUsageAndRequests","OCPSupplementaryCostTitle","OCPSupplementaryCostTrendTitle","OCPSupplementaryDailyCostTrendTitle","OCPUsageCostTitle","OCPUsageDashboardCPUTitle","OCPUsageDashboardCostTrendTitle","OCPVolumeUsageAndRequests","OpenShift","OpenShiftCloudInfrastructure","OpenShiftCloudInfrastructureDesc","OpenShiftDesc","OverviewInfoArialLabel","OverviewTitle","Percent","PercentOfCost","PercentTotalCost","Perspective","PerspectiveValues","PriceList","PriceListAddRate","PriceListDeleteRate","PriceListDeleteRateDesc","PriceListDuplicate","PriceListEditRate","PriceListEmptyRate","PriceListEmptyRateDesc","PriceListNumberRate","PriceListPosNumberRate","Rate","RawCostDescription","RawCostTitle","RbacErrorDescription","RbacErrorTitle","RedHatStatusUrl","Requests","Save","Select","SelectAll","Selected","SinceDate","Sources","Supplementary","TagHeadingKey","TagHeadingTitle","TagHeadingValue","TagNames","ToolBarBulkSelectAll","ToolBarBulkSelectAriaDeselect","ToolBarBulkSelectAriaSelect","ToolBarBulkSelectNone","ToolBarBulkSelectPage","ToolBarPriceListMeasurementPlaceHolder","ToolBarPriceListMetricPlaceHolder","UnitTooltips","Units","Usage","UsageCostDescription","UsageCostTitle","Various","Yes","parseApiError","error","response","data","Error","errors","map","er","source","detail","join","message","asyncComponent","loader","LoadedComponent","Async","isLoading","Comp","default","setState","InactiveSources","Permissions","permissionsComponent","AysncComponent","PermissionsComponent","NotFound","AwsBreakdown","AwsDetails","AzureBreakdown","AzureDetails","Explorer","GcpBreakdown","GcpDetails","IbmBreakdown","IbmDetails","OcpDetails","OcpBreakdown","Overview","CostModelsDetails","CostModel","paths","awsDetails","awsDetailsBreakdown","azureDetails","azureDetailsBreakdown","costModels","explorer","gcpDetails","gcpDetailsBreakdown","ibmDetails","ibmDetailsBreakdown","ocpDetails","ocpDetailsBreakdown","overview","labelKey","component","exact","Routes","Switch","route","Route","awsCostOverviewStateKey","currrentId","getId","costWidget","reportPathsType","type","accountSummaryWidget","reportSummary","reportGroupBy","showWidgetOnGroupBy","regionSummaryWidget","serviceSummaryWidget","defaultState","currentWidgets","widgets","awsCostOverviewReducer","selectAwsCostOverviewState","selectWidgets","selectWidget","selectCurrentWidgets","azureCostOverviewStateKey","azureCostOverviewReducer","selectAzureCostOverviewState","gcpCostOverviewStateKey","projectSummaryWidget","gcpCostOverviewReducer","selectGcpCostOverviewState","ibmCostOverviewStateKey","ibmCostOverviewReducer","selectIbmCostOverviewState","ocpCostOverviewStateKey","clusterWidget","cluster","cpuUsageWidget","usage","showCapacityOnGroupBy","memoryUsageWidget","usePlaceholder","ocpCostOverviewReducer","selectOcpCostOverviewState","awsHistoricalDataStateKey","computeUsageWidget","storageUsageWidget","awsHistoricalDataReducer","selectAwsHistoricalDataState","azureHistoricalDataStateKey","azureHistoricalDataReducer","selectAzureHistoricalDataState","gcpHistoricalDataStateKey","gcpHistoricalDataReducer","selectGcpHistoricalDataState","ibmHistoricalDataStateKey","ibmHistoricalDataReducer","selectIbmHistoricalDataState","ocpHistoricalDataStateKey","ocpHistoricalDataReducer","selectOcpHistoricalDataState","createMapStateToProps","updateFilterToolbar","createAction","selectCostModel","resetCostModel","setCostModelDialog","fetchCostModelsRequest","success","fetchCostModelsSuccess","failure","fetchCostModelsFailure","createAsyncAction","dispatch","res","catch","err","updateCostModelsRequest","updateCostModelsSuccess","updateCostModelsFailure","dialog","name","isOpen","deleteCostModelsRequest","deleteCostModelsSuccess","deleteCostModelsFailure","redirectToCostModelFromSourceUuid","source_uuid","addNotification","title","variant","dismissable","stateKey","status","currentFilterType","currentFilterValue","isDialogOpen","deleteRate","deleteSource","addSource","addRate","updateRate","deleteMarkup","updateMarkup","deleteDistribution","updateDistribution","createWizard","dialogData","update","current","delete","reducer","action","getType","payload","meta","costModelsState","cms","dialogs","stateName","costStatus","costError","costData","costQuery","every","updateProcessing","updateError","updateErr","selected","deleteProcessing","deleteError","fetchCurrencyRequest","fetchCurrencySuccess","fetchCurrencyFailure","reportId","byId","Map","fetchStatus","currencyReducer","set","selectCurrencyState","selectCurrency","get","selectCurrencyFetchStatus","selectCurrencyError","awsDashboardStateKey","awsDashboardDefaultFilters","time_scope_units","time_scope_value","resolution","awsDashboardTabFilters","limit","getQueryForWidget","getQueryForWidgetTabs","widget","currentTab","service","tabsFilter","account","region","instance_type","getGroupByForTab","newFilter","selectAwsDashboardState","selectWidgetQueries","previous","tabs","fetchWidgetForecasts","getState","forecastPathsType","forecastType","fetchWidgetReports","availableTabs","setWidgetTab","changeWidgetTab","tab","computeWidget","titleKey","details","costKey","showUnits","showUsageFirst","showUsageLegendLabel","usageKey","usageValueFormatterOptions","fractionDigits","valueFormatterOptions","trend","computedReportItem","computedReportItemValue","topItems","chartType","costSummaryWidget","adjustContainerHeight","showHorizontal","viewAllPath","computedForecastItem","dailyTitleKey","databaseWidget","networkWidget","storageWidget","awsDashboardReducer","awsOcpDashboardStateKey","awsOcpDashboardDefaultFilters","awsOcpDashboardTabFilters","selectAwsOcpDashboardState","awsOcpDashboardReducer","azureDashboardStateKey","azureDashboardDefaultFilters","azureDashboardTabFilters","service_name","subscription_guid","resource_location","selectAzureDashboardState","virtualMachineWidget","azureDashboardReducer","azureOcpDashboardStateKey","azureOcpDashboardDefaultFilters","azureOcpDashboardTabFilters","selectAzureOcpDashboardState","azureOcpDashboardReducer","gcpDashboardStateKey","gcpDashboardDefaultFilters","gcpDashboardTabFilters","project","selectGcpDashboardState","gcpDashboardReducer","gcpOcpDashboardStateKey","gcpOcpDashboardDefaultFilters","gcpOcpDashboardTabFilters","selectGcpOcpDashboardState","gcpOcpDashboardReducer","ibmDashboardStateKey","ibmDashboardDefaultFilters","ibmDashboardTabFilters","selectIbmDashboardState","ibmDashboardReducer","ocpCloudDashboardStateKey","ocpCloudDashboardDefaultFilters","ocpCloudDashboardTabFilters","selectOcpCloudDashboardState","defaultFilter","ocpCloudDashboardReducer","ocpDashboardStateKey","ocpDashboardDefaultFilters","ocpDashboardTabFilters","node","selectOcpDashboardState","showTooltip","computedForecastInfrastructureItem","cpuWidget","requestValueFormatterOptions","requestKey","memoryWidget","volumeWidget","ocpDashboardReducer","selectPagination","stateProjector","getPagination","page","perPage","count","urlParams","links","next","URLSearchParams","Number","first","selectQuery","params","reduce","acc","curr","search","exportStateKey","getExportId","selectExportState","selectExport","selectExportFetchStatus","selectExportError","fetchExportRequest","fetchExportSuccess","fetchExportFailure","exportReport","report","Date","now","timeRequested","isExportExpired","Accept","exportReducer","ForecastTypePaths","forecastStateKey","getForecastId","selectForecastState","selectForecast","selectForecastFetchStatus","selectForecastError","fetchForecastRequest","fetchForecastSuccess","fetchForecastFailure","fetchForecast","isForecastExpired","forecastId","forecastReducer","rates","fetchPriceListRequest","fetchPriceListSuccess","fetchPriceListFailure","rootReducer","combineReducers","awsOcpDashboard","awsCostOverview","awsDashboard","awsHistoricalData","azureOcpDashboard","azureCostOverview","azureDashboard","azureHistoricalData","currency","gcpCostOverview","gcpDashboard","gcpOcpDashboard","gcpHistoricalData","ibmCostOverview","ibmDashboard","ibmHistoricalData","metrics","ocpCostOverview","ocpDashboard","ocpCloudDashboard","ocpHistoricalData","providerUuid","providers","rbac","ui","userAccess","notifications","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","serialize","middlewares","notificationsMiddleware","configureStore","initialState","enhancer","applyMiddleware","store","createStore","Promise","reject","fetchMetricsRequest","fetchMetricsSuccess","fetchMetricsFailure","fetchMetrics","source_type","fetchRateMetrics","metricsState","metricsPayload","prev","label_metric","label_measurement","maxRate","costTypes","default_cost_type","OrgTypePaths","orgStateKey","getOrgId","orgPathsType","orgType","selectOrgState","selectOrg","selectOrgFetchStatus","selectOrgError","fetchOrgRequest","fetchOrgSuccess","fetchOrgFailure","fetchOrg","orgReport","isOrgExpired","orgId","orgReducer","addProviderKey","awsProvidersQuery","azureProvidersQuery","gcpProvidersQuery","ibmProvidersQuery","ocpProvidersQuery","getReportId","fetchProvidersRequest","fetchProvidersSuccess","fetchProvidersFailure","providersReducer","selectProvidersState","selectAddProviderFetchStatus","selectAddProviderError","selectProviders","providerType","selectProvidersFetchStatus","selectProvidersError","fetchRbacRequest","fetchRbacSuccess","fetchRbacFailure","fetchRbac","async","_insights","getUserPermissions","user","permissions","isOrgAdmin","identity","is_org_admin","getRBAC","selectRbacState","isCostModelWritePermission","costModelPermissions","find","item","permission","startsWith","app","resource","operation","reportStateKey","selectReportState","selectReport","selectReportFetchStatus","selectReportError","fetchReportRequest","fetchReportSuccess","fetchReportFailure","fetchReport","isReportExpired","reportReducer","resourceStateKey","getResourceId","selectResourceState","selectResource","selectResourceFetchStatus","selectResourceError","fetchResourceRequest","fetchResourceSuccess","fetchResourceFailure","fetchResource","isResourceExpired","resourceId","resourceReducer","fetchSourcesRequest","fetchSourcesSuccess","fetchSourcesFailure","fetchSources","sources","sourcesState","srcs","TagTypePaths","tagStateKey","getTagId","tagPathsType","tagType","selectTagState","selectTag","selectTagFetchStatus","selectTagError","fetchTagRequest","fetchTagSuccess","fetchTagFailure","fetchTag","tagReport","isTagExpired","tagId","tagReducer","isExportModalOpen","isProvidersModalOpen","isSidebarOpen","uiReducer","closeProvidersModal","openProvidersModal","toggleSidebar","resetState","allUserAccessQuery","ibmUserAccessQuery","beta","fetchUserAccessRequest","fetchUserAccessSuccess","fetchUserAccessFailure","userAccessReducer","selectUserAccessState","selectUserAccess","selectUserAccessFetchStatus","selectUserAccessError","getBaseName","release","pathName","shift"],"mappings":"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","file":"6e6bfcc5084f2d7ab6c9.bundle.js","sourcesContent":["import { authInterceptor as insightsAuthInterceptor } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport axios from 'axios';\nexport function initApi({ version }) {\n    axios.defaults.baseURL = `/api/cost-management/${version}/`;\n    axios.interceptors.request.use(authInterceptor);\n    axios.interceptors.request.use(insightsAuthInterceptor);\n}\nexport function authInterceptor(reqConfig) {\n    return Object.assign(Object.assign({}, reqConfig), { headers: Object.assign({}, reqConfig.headers) });\n}\n","import axios from 'axios';\nexport function fetchCostModels(query = '') {\n    return axios.get(`cost-models/${query && '?'}${query}`);\n}\nexport function fetchCostModel(uuid) {\n    return axios.get(`cost-models/${uuid}/`);\n}\nexport function addCostModel(request) {\n    return axios.post('cost-models/', request);\n}\nexport function updateCostModel(uuid, request) {\n    return axios.put(`cost-models/${uuid}/`, request);\n}\nexport function deleteCostModel(uuid) {\n    return axios.delete(`cost-models/${uuid}/`);\n}\n","import axios from 'axios';\nexport function fetchProviders(query) {\n    const insights = window.insights;\n    const queryString = query ? `?${query}` : '';\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`sources/${queryString}`);\n        });\n    }\n    else {\n        return axios.get(`sources/${queryString}`);\n    }\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import { parse, stringify } from 'qs';\nexport const logicalOrPrefix = 'or:'; // logical OR prefix for group_by\nexport const logicalAndPrefix = 'and:'; // logical AND prefix for group_by\nexport const tagPrefix = 'tag:'; // Tag prefix for group_by\nexport const breakdownDescKey = 'breakdown_desc'; // Used to display a description in the breakdown header\nexport const breakdownGroupByKey = 'breakdown_group_by'; // Used to display a breadcrumb in the breakdown header\nexport const breakdownTitleKey = 'breakdown_title'; // Used to display a title in the breakdown header\nexport const orgUnitIdKey = 'org_unit_id'; // Org unit ID for group_by\nexport const orgUnitNameKey = 'org_unit_name'; // Org unit name for group_by\nexport const tagKey = 'tag'; // Tag key prefix for group_by\n// Converts filter_by props to filter props\nexport function convertFilterBy(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined });\n    for (const key of Object.keys(query.filter_by)) {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        if (newQuery.filter[key]) {\n            if (!Array.isArray(newQuery.filter[key])) {\n                newQuery.filter[key] = newQuery.filter[key] !== '*' ? [newQuery.filter[key]] : [];\n            }\n            newQuery.filter[key].push(query.filter_by[key]);\n        }\n        else {\n            newQuery.filter[key] = query.filter_by[key];\n        }\n    }\n    return newQuery;\n}\n// filter_by props are converted\nexport function getQuery(query) {\n    return stringify(convertFilterBy(query), { encode: false, indices: false });\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return stringify(query, { encode: false, indices: false });\n}\n// Returns given key without logical OR/AND prefix\nfunction parseKey(val) {\n    let key = val;\n    let index = val.indexOf(logicalOrPrefix);\n    if (index !== -1) {\n        key = val.substring(index + logicalOrPrefix.length);\n    }\n    else {\n        index = val.indexOf(logicalAndPrefix);\n        if (index !== -1) {\n            key = val.substring(index + logicalAndPrefix.length);\n        }\n    }\n    return key;\n}\n// Returns query without filter_by prefix\nexport function parseFilterByPrefix(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: {} });\n    for (const key of Object.keys(query.filter_by)) {\n        const filterByKey = parseKey(key);\n        newQuery.filter_by[filterByKey] = query.filter_by[key];\n    }\n    return newQuery;\n}\n// Returns query without group_by prefix -- https://github.com/project-koku/koku-ui/issues/704\nexport function parseGroupByPrefix(query) {\n    if (!(query && query.group_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {} });\n    for (const key of Object.keys(query.group_by)) {\n        const groupByKey = parseKey(key);\n        newQuery.group_by[groupByKey] = query.group_by[key];\n    }\n    return newQuery;\n}\nexport function parseQuery(query) {\n    const newQuery = parse(query, { ignoreQueryPrefix: true });\n    return parseFilterByPrefix(parseGroupByPrefix(newQuery));\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/aws/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/aws/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/aws/costs/',\n    [\"database\" /* database */]: 'reports/aws/costs/',\n    [\"network\" /* network */]: 'reports/aws/costs/',\n    [\"storage\" /* storage */]: 'reports/aws/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/aws/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/azure/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/azure/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/azure/costs/',\n    [\"database\" /* database */]: 'reports/azure/costs/',\n    [\"network\" /* network */]: 'reports/azure/costs/',\n    [\"storage\" /* storage */]: 'reports/azure/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/azure/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/gcp/costs/',\n    [\"database\" /* database */]: 'reports/gcp/costs/',\n    [\"network\" /* network */]: 'reports/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/gcp/costs/',\n    [\"database\" /* database */]: 'reports/gcp/costs/',\n    [\"network\" /* network */]: 'reports/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\n// Todo: update to use ibm backend apis when they become available\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/gcp/costs/',\n    [\"database\" /* database */]: 'reports/gcp/costs/',\n    [\"network\" /* network */]: 'reports/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/all/instance-types/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/all/storage/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/aws-accounts/',\n    [\"region\" /* region */]: 'resource-types/aws-regions/',\n    [\"service\" /* service */]: 'resource-types/aws-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?openshift=true&${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?openshift=true&${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/aws-accounts/',\n    [\"region\" /* region */]: 'resource-types/aws-regions/',\n    [\"service\" /* service */]: 'resource-types/aws-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"resource_location\" /* resourceLocation */]: 'resource-types/azure-regions/',\n    [\"subscription_guid\" /* subscriptionGuid */]: 'resource-types/azure-subscription-guids/',\n    [\"service_name\" /* serviceName */]: 'resource-types/azure-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?openshift=true&${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?openshift=true&${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"resource_location\" /* resourceLocation */]: 'resource-types/azure-regions/',\n    [\"subscription_guid\" /* subscriptionGuid */]: 'resource-types/azure-subscription-guids/',\n    [\"service_name\" /* serviceName */]: 'resource-types/azure-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/gcp-accounts/',\n    [\"project\" /* project */]: 'resource-types/gcp-projects/',\n    [\"region\" /* region */]: 'resource-types/gcp-regions/',\n    [\"service\" /* service */]: 'resource-types/gcp-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/gcp-accounts/',\n    [\"project\" /* project */]: 'resource-types/gcp-projects/',\n    [\"region\" /* region */]: 'resource-types/gcp-regions/',\n    [\"service\" /* service */]: 'resource-types/gcp-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/gcp-accounts/',\n    [\"project\" /* project */]: 'resource-types/gcp-projects/',\n    [\"region\" /* region */]: 'resource-types/gcp-regions/',\n    [\"service\" /* service */]: 'resource-types/gcp-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"cluster\" /* cluster */]: 'resource-types/openshift-clusters/',\n    [\"node\" /* node */]: 'resource-types/openshift-nodes/',\n    [\"project\" /* project */]: 'resource-types/openshift-projects/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import { runResource as runAwsOcpResource } from './awsOcpResource';\nimport { runResource as runAwsResource } from './awsResource';\nimport { runResource as runAzureOcpResource } from './azureOcpResource';\nimport { runResource as runAzureResource } from './azureResource';\nimport { runResource as runGcpOcpResource } from './gcpOcpResource';\nimport { runResource as runGcpResource } from './gcpResource';\nimport { runResource as runIbmResource } from './ibmResource';\nimport { runResource as runOcpResource } from './ocpResource';\n// Temporary check until typeahead is implemented for all filters\nexport function isResourceTypeValid(resourcePathsType, resourceType) {\n    let result = false;\n    if (resourcePathsType === \"aws\" /* aws */ ||\n        resourcePathsType === \"aws_ocp\" /* awsOcp */ ||\n        resourcePathsType === \"azure\" /* azure */ ||\n        resourcePathsType === \"azure_ocp\" /* azureOcp */ ||\n        resourcePathsType === \"gcp\" /* gcp */ ||\n        resourcePathsType === \"ibm\" /* ibm */ ||\n        resourcePathsType === \"ocp\" /* ocp */) {\n        switch (resourceType) {\n            case \"account\" /* account */:\n            case \"cluster\" /* cluster */:\n            case \"node\" /* node */:\n            case \"project\" /* project */:\n            case \"region\" /* region */:\n            case \"resource_location\" /* resourceLocation */:\n            case \"service\" /* service */:\n            case \"service_name\" /* serviceName */:\n            case \"subscription_guid\" /* subscriptionGuid */:\n                result = true;\n                break;\n        }\n    }\n    return result;\n}\nexport function runResource(resourcePathsType, resourceType, query) {\n    let forecast;\n    switch (resourcePathsType) {\n        case \"aws\" /* aws */:\n            forecast = runAwsResource(resourceType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            forecast = runAwsOcpResource(resourceType, query);\n            break;\n        case \"azure\" /* azure */:\n            forecast = runAzureResource(resourceType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            forecast = runAzureOcpResource(resourceType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            forecast = runGcpResource(resourceType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            forecast = runGcpOcpResource(resourceType, query);\n            break;\n        case \"ibm\" /* ibm */:\n            forecast = runIbmResource(resourceType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            forecast = runOcpResource(resourceType, query);\n            break;\n    }\n    return forecast;\n}\n","import { Stack, StackItem } from '@patternfly/react-core';\nimport Maintenance from '@redhat-cloud-services/frontend-components/Maintenance';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass MaintenanceStateBase extends React.Component {\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(Maintenance, { description: React.createElement(Stack, null,\n                React.createElement(StackItem, null, intl.formatMessage(messages.MaintenanceEmptyStateDesc)),\n                React.createElement(StackItem, null, intl.formatMessage(messages.MaintenanceEmptyStateInfo, {\n                    url: (React.createElement(\"a\", { href: intl.formatMessage(messages.RedHatStatusUrl), rel: \"noreferrer\", target: \"_blank\" }, \"\\\"status page\\\"\")),\n                })),\n                React.createElement(StackItem, null, intl.formatMessage(messages.MaintenanceEmptyStateThanks))) }));\n    }\n}\nconst MaintenanceState = injectIntl(MaintenanceStateBase);\nexport { MaintenanceState };\n","import Maintenance from './maintenance';\nexport default Maintenance;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { MaintenanceState } from './maintenanceState';\nconst Maintenance = () => {\n    return (React.createElement(Main, null,\n        React.createElement(MaintenanceState, null)));\n};\nexport default withRouter(Maintenance);\n","import Maintenance from 'pages/state/maintenance';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { createMapStateToProps } from 'store/common';\nimport { Routes, routes } from './routes';\nexport class App extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Todo: Will Insights provide a flag to enable maintenance mode?\n        // https://docs.google.com/document/d/1VLs7vFczWUzyIpH6EUsTEpJugDsjeuh4a_azs6IJbC0/edit#\n        this.state = { maintenanceMode: false };\n    }\n    componentDidMount() {\n        const { history, location } = this.props;\n        insights.chrome.init();\n        insights.chrome.identifyApp('cost-management');\n        if (location && location.pathname) {\n            insights.chrome.appAction(location.pathname);\n        }\n        this.appNav = insights.chrome.on('APP_NAVIGATION', event => {\n            var _a, _b;\n            let currRoute = routes.find(({ path }) => path.includes(event.navId));\n            /**\n             * Condition is required until new nav changes are propagated to each environment.\n             * Eventually will be avaiable as a hook value to replace event listening.\n             */\n            if (!currRoute && typeof ((_a = event === null || event === void 0 ? void 0 : event.domEvent) === null || _a === void 0 ? void 0 : _a.href) === 'string') {\n                const appPathname = (_b = event === null || event === void 0 ? void 0 : event.domEvent) === null || _b === void 0 ? void 0 : _b.href.replace(this.props.basename.replace(/^\\/beta\\//, '/'), '/');\n                currRoute = routes.find(({ path }) => path.includes(appPathname));\n            }\n            if (event.domEvent && currRoute) {\n                history.push(currRoute.path);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { location } = this.props;\n        if (location && location.pathname !== prevProps.location.pathname) {\n            window.scrollTo(0, 0);\n            insights.chrome.appAction(location.pathname);\n        }\n    }\n    componentWillUnmount() {\n        this.appNav();\n        insights.chrome.appAction(undefined);\n    }\n    render() {\n        const { maintenanceMode } = this.state;\n        const route = maintenanceMode ? React.createElement(Maintenance, null) : React.createElement(Routes, null);\n        return route;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = { history };\nexport default compose(withRouter, connect(mapStateToProps, mapDispatchToProps))(App);\n","import { createIntl, createIntlCache } from 'react-intl';\n// eslint-disable-next-line no-restricted-imports\nimport messages from '../../../locales/data.json';\nconst locale = navigator.language.split(/[-_]/)[0] || 'en';\nexport const getLocale = () => {\n    return locale;\n};\nconst cache = createIntlCache();\nexport const intl = createIntl({\n    defaultLocale: 'en',\n    locale,\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    messages: messages[locale],\n}, cache);\n","/* eslint-disable max-len */\nimport { defineMessages } from 'react-intl';\nexport default defineMessages({\n    AWS: {\n        defaultMessage: 'Amazon Web Services',\n        description: 'Amazon Web Services',\n        id: 'AWS',\n    },\n    AWSComputeTitle: {\n        defaultMessage: 'Compute (EC2) instances usage',\n        description: 'Compute (EC2) instances usage',\n        id: 'AWSComputeTitle',\n    },\n    AWSCostTrendTitle: {\n        defaultMessage: 'Amazon Web Services cumulative cost comparison ({units})',\n        description: 'Amazon Web Services cumulative cost comparison ({units})',\n        id: 'AWSCostTrendTitle',\n    },\n    AWSDailyCostTrendTitle: {\n        defaultMessage: 'Amazon Web Services daily cost comparison ({units})',\n        description: 'Amazon Web Services daily cost comparison ({units})',\n        id: 'AWSDailyCostTrendTitle',\n    },\n    AWSDashboardCostTitle: {\n        defaultMessage: 'Amazon Web Services cost',\n        description: 'Amazon Web Services cost',\n        id: 'AWSDashboardCostTitle',\n    },\n    AWSDesc: {\n        defaultMessage: 'Raw cost from Amazon Web Services infrastructure.',\n        description: 'Raw cost from Amazon Web Services infrastructure.',\n        id: 'AWSDesc',\n    },\n    AWSDetailsTableAriaLabel: {\n        defaultMessage: 'Amazon Web Services details table',\n        description: 'Amazon Web Services details table',\n        id: 'AWSDetailsTable',\n    },\n    AWSDetailsTitle: {\n        defaultMessage: 'Amazon Web Services Details',\n        description: 'Amazon Web Services Details',\n        id: 'AWSDetailsTitle',\n    },\n    AWSOcpDashboardCostTitle: {\n        defaultMessage: 'Amazon Web Services filtered by OpenShift cost',\n        description: 'Amazon Web Services filtered by OpenShift cost',\n        id: 'AWSOcpDashboardCostTitle',\n    },\n    Azure: {\n        defaultMessage: 'Microsoft Azure',\n        description: 'Microsoft Azure',\n        id: 'Azure',\n    },\n    AzureComputeTitle: {\n        defaultMessage: 'Virtual machines usage',\n        description: 'Virtual machines usage',\n        id: 'AzureComputeTitle',\n    },\n    AzureCostTrendTitle: {\n        defaultMessage: 'Microsoft Azure cumulative cost comparison ({units})',\n        description: 'Microsoft Azure cumulative cost comparison ({units})',\n        id: 'AzureCostTrendTitle',\n    },\n    AzureDailyCostTrendTitle: {\n        defaultMessage: 'Microsoft Azure daily cost comparison ({units})',\n        description: 'Microsoft Azure daily cost comparison ({units})',\n        id: 'AzureDailyCostTrendTitle',\n    },\n    AzureDashboardCostTitle: {\n        defaultMessage: 'Microsoft Azure cost',\n        description: 'Microsoft Azure cost',\n        id: 'AzureDashboardCostTitle',\n    },\n    AzureDesc: {\n        defaultMessage: 'Raw cost from Azure infrastructure.',\n        description: 'Raw cost from Azure infrastructure.',\n        id: 'AzureDesc',\n    },\n    AzureDetailsTableAriaLabel: {\n        defaultMessage: 'Microsoft Azure details table',\n        description: 'Microsoft Azure details table',\n        id: 'AzureDetailsTable',\n    },\n    AzureDetailsTitle: {\n        defaultMessage: 'Microsoft Azure details',\n        description: 'Microsoft Azure details',\n        id: 'AzureDetailsTitle',\n    },\n    AzureOcpDashboardCostTitle: {\n        defaultMessage: 'Microsoft Azure filtered by OpenShift cost',\n        description: 'Microsoft Azure filtered by OpenShift cost',\n        id: 'AzureOcpDashboardCostTitle',\n    },\n    Back: {\n        defaultMessage: 'Back',\n        description: 'Back',\n        id: 'Back',\n    },\n    BreakdownBackToDetails: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {Back to {value} account details} ' +\n            'cluster {Back to {value} cluster details} ' +\n            'instance_type {Back to {value} instance type details} ' +\n            'node {Back to {value} node details} ' +\n            'org_unit_id {Back to {value} organizational unit details} ' +\n            'project {Back to {value} project details} ' +\n            'region {Back to {value} region details} ' +\n            'resource_location {Back to {value} region details} ' +\n            'service {Back to {value} service details} ' +\n            'service_name {Back to {value} service details} ' +\n            'subscription_guid {Back to {value} account details} ' +\n            'tag {Cost by tags} ' +\n            'other {}}',\n        description: 'Back to {value} {groupBy} details',\n        id: 'BreakdownBackToDetails',\n    },\n    BreakdownBackToDetailsAriaLabel: {\n        defaultMessage: 'Back to details',\n        description: 'Back to details',\n        id: 'BreakdownBackToDetailsAriaLabel',\n    },\n    BreakdownCostBreakdownAriaLabel: {\n        defaultMessage: 'A description of markup, raw cost and usage cost',\n        description: 'A description of markup, raw cost and usage cost',\n        id: 'BreakdownCostBreakdownAriaLabel',\n    },\n    BreakdownCostBreakdownTitle: {\n        defaultMessage: 'Cost breakdown',\n        description: 'A description of markup, raw cost and usage cost',\n        id: 'BreakdownCostBreakdownTitle',\n    },\n    BreakdownCostChartAriaDesc: {\n        defaultMessage: 'Breakdown of markup, raw, and usage costs',\n        description: 'Breakdown of markup, raw, and usage costs',\n        id: 'BreakdownCostChartAriaDesc',\n    },\n    BreakdownCostChartTooltip: {\n        defaultMessage: '{name}: {value}',\n        description: '{name}: {value}',\n        id: 'BreakdownCostChartTooltip',\n    },\n    BreakdownCostOverviewTitle: {\n        defaultMessage: 'Cost overview',\n        description: 'Cost overview',\n        id: 'BreakdownCostOverviewTitle',\n    },\n    BreakdownHistoricalDataTitle: {\n        defaultMessage: 'Historical data',\n        description: 'Historical data',\n        id: 'BreakdownHistoricalDataTitle',\n    },\n    BreakdownSummaryTitle: {\n        defaultMessage: '{value, select, ' +\n            'account {Cost by accounts} ' +\n            'cluster {Cost by clusters} ' +\n            'instance_type {Cost by instance types} ' +\n            'node {Cost by Node} ' +\n            'org_unit_id {Cost by organizational units} ' +\n            'project {Cost by projects} ' +\n            'region {Cost by regions} ' +\n            'resource_location {Cost by regions} ' +\n            'service {Cost by services} ' +\n            'service_name {Cost by services} ' +\n            'subscription_guid {Cost by accounts} ' +\n            'tag {Cost by tags} ' +\n            'other {}}',\n        description: 'Cost by {value}',\n        id: 'BreakdownSummaryTitle',\n    },\n    BreakdownTitle: {\n        defaultMessage: '{value}',\n        description: 'breakdown title',\n        id: 'BreakdownTitle',\n    },\n    BreakdownTotalCostDate: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {{value} total cost (January {startDate})} other {{value} total cost (January {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {{value} total cost (February {startDate})} other {{value} total cost (February {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {{value} total cost (March {startDate})} other {{value} total cost (March {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {{value} total cost (April {startDate})} other {{value} total cost (April {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {{value} total cost (May {startDate})} other {{value} total cost (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {{value} total cost (June {startDate})} other {{value} total cost (June {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {{value} total cost (July {startDate})} other {{value} total cost (July {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {{value} total cost (August {startDate})} other {{value} total cost (August {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {{value} total cost (September {startDate})} other {{value} total cost (September {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {{value} total cost (October {startDate})} other {{value} total cost (October {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {{value} total cost (November {startDate})} other {{value} total cost (November {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {{value} total cost (December {startDate})} other {{value} total cost (December {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Break down total cost by date',\n        id: 'BreakdownTotalCostDate',\n    },\n    CalculationType: {\n        defaultMessage: 'Calculation type',\n        description: 'Calculation type',\n        id: 'CalculationType',\n    },\n    Cancel: {\n        defaultMessage: 'Cancel',\n        description: 'Cancel',\n        id: 'Cancel',\n    },\n    ChartCostForecastConeLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Cost confidence (Jan {startDate})} other {Cost confidence (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Cost confidence (Feb {startDate})} other {Cost confidence (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Cost confidence (Mar {startDate})} other {Cost confidence (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Cost confidence (Apr {startDate})} other {Cost confidence (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Cost confidence (May {startDate})} other {Cost confidence (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Cost confidence (Jun {startDate})} other {Cost confidence (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Cost confidence (Jul {startDate})} other {Cost confidence (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Cost confidence (Aug {startDate})} other {Cost confidence (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Cost confidence (Sep {startDate})} other {Cost confidence (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Cost confidence (Oct {startDate})} other {Cost confidence (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Cost confidence (Nov {startDate})} other {Cost confidence (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Cost confidence (Dec {startDate})} other {Cost confidence (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Cost forecast cone date label',\n        id: 'ChartCostForecastConeLegendLabel',\n    },\n    ChartCostForecastConeLegendNoDataLabel: {\n        defaultMessage: 'Cost confidence (no data)',\n        description: 'Cost confidence (no data)',\n        id: 'ChartCostForecastConeLegendNoDataLabel',\n    },\n    ChartCostForecastConeLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Cost confidence (Jan)} ' +\n            '1 {Cost confidence (Feb)} ' +\n            '2 {Cost confidence (Mar)} ' +\n            '3 {Cost confidence (Apr)} ' +\n            '4 {Cost confidence (May)} ' +\n            '5 {Cost confidence (Jun)} ' +\n            '6 {Cost confidence (Jul)} ' +\n            '7 {Cost confidence (Aug)} ' +\n            '8 {Cost confidence (Sep)} ' +\n            '9 {Cost confidence (Oct)} ' +\n            '10 {Cost confidence (Nov)} ' +\n            '11 {Cost confidence (Dec)} ' +\n            'other {}}',\n        description: 'Cost confidence forecast date label tooltip',\n        id: 'ChartCostForecastConeLegendTooltip',\n    },\n    ChartCostForecastConeTooltip: {\n        defaultMessage: '{value0} - {value1}',\n        description: '{value0} - {value1}',\n        id: 'ChartCostForecastConeTooltip',\n    },\n    ChartCostForecastLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Cost forecast (Jan {startDate})} other {Cost forecast (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Cost forecast (Feb {startDate})} other {Cost forecast (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Cost forecast (Mar {startDate})} other {Cost forecast (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Cost forecast (Apr {startDate})} other {Cost forecast (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Cost forecast (May {startDate})} other {Cost forecast (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Cost forecast (Jun {startDate})} other {Cost forecast (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Cost forecast (Jul {startDate})} other {Cost forecast (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Cost forecast (Aug {startDate})} other {Cost forecast (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Cost forecast (Sep {startDate})} other {Cost forecast (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Cost forecast (Oct {startDate})} other {Cost forecast (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Cost forecast (Nov {startDate})} other {Cost forecast (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Cost forecast (Dec {startDate})} other {Cost forecast (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Cost forecast date label',\n        id: 'ChartCostForecastLegendLabel',\n    },\n    ChartCostForecastLegendNoDataLabel: {\n        defaultMessage: 'Cost forecast (no data)',\n        description: 'Cost forecast (no data)',\n        id: 'ChartCostForecastLegendNoDataLabel',\n    },\n    ChartCostForecastLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Cost forecast (Jan)} ' +\n            '1 {Cost forecast (Feb)} ' +\n            '2 {Cost forecast (Mar)} ' +\n            '3 {Cost forecast (Apr)} ' +\n            '4 {Cost forecast (May)} ' +\n            '5 {Cost forecast (Jun)} ' +\n            '6 {Cost forecast (Jul)} ' +\n            '7 {Cost forecast (Aug)} ' +\n            '8 {Cost forecast (Sep)} ' +\n            '9 {Cost forecast (Oct)} ' +\n            '10 {Cost forecast (Nov)} ' +\n            '11 {Cost forecast (Dec)} ' +\n            'other {}}',\n        description: 'Cost forecast date label tooltip',\n        id: 'ChartCostForecastLegendTooltip',\n    },\n    ChartCostInfrastructureForecastConeLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Infrastructure confidence (Jan {startDate})} other {Infrastructure confidence (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Infrastructure confidence (Feb {startDate})} other {Infrastructure confidence (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Infrastructure confidence (Mar {startDate})} other {Infrastructure confidence (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Infrastructure confidence (Apr {startDate})} other {Infrastructure confidence (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Infrastructure confidence (May {startDate})} other {Infrastructure confidence (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Infrastructure confidence (Jun {startDate})} other {Infrastructure confidence (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Infrastructure confidence (Jul {startDate})} other {Infrastructure confidence (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Infrastructure confidence (Aug {startDate})} other {Infrastructure confidence (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Infrastructure confidence (Sep {startDate})} other {Infrastructure confidence (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Infrastructure confidence (Oct {startDate})} other {Infrastructure confidence (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Infrastructure confidence (Nov {startDate})} other {Infrastructure confidence (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Infrastructure confidence (Dec {startDate})} other {Infrastructure confidence (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Infrastructure date label',\n        id: 'ChartCostInfrastructureForecastConeLegendLabel',\n    },\n    ChartCostInfrastructureForecastConeLegendNoDataLabel: {\n        defaultMessage: 'Infrastructure confidence (no data)',\n        description: 'Infrastructure confidence (no data)',\n        id: 'ChartCostInfrastructureForecastConeLegendNoDataLabel',\n    },\n    ChartCostInfrastructureForecastConeLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Infrastructure confidence (Jan)} ' +\n            '1 {Infrastructure confidence (Feb)} ' +\n            '2 {Infrastructure confidence (Mar)} ' +\n            '3 {Infrastructure confidence (Apr)} ' +\n            '4 {Infrastructure confidence (May)} ' +\n            '5 {Infrastructure confidence (Jun)} ' +\n            '6 {Infrastructure confidence (Jul)} ' +\n            '7 {Infrastructure confidence (Aug)} ' +\n            '8 {Infrastructure confidence (Sep)} ' +\n            '9 {Infrastructure confidence (Oct)} ' +\n            '10 {Infrastructure confidence (Nov)} ' +\n            '11 {Infrastructure confidence (Dec)} ' +\n            'other {}}',\n        description: 'Infrastructure date label tooltip',\n        id: 'ChartCostInfrastructureForecastConeLegendTooltip',\n    },\n    ChartCostInfrastructureForecastLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Infrastructure forecast (Jan {startDate})} other {Infrastructure forecast (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Infrastructure forecast (Feb {startDate})} other {Infrastructure forecast (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Infrastructure forecast (Mar {startDate})} other {Infrastructure forecast (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Infrastructure forecast (Apr {startDate})} other {Infrastructure forecast (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Infrastructure forecast (May {startDate})} other {Infrastructure forecast (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Infrastructure forecast (Jun {startDate})} other {Infrastructure forecast (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Infrastructure forecast (Jul {startDate})} other {Infrastructure forecast (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Infrastructure forecast (Aug {startDate})} other {Infrastructure forecast (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Infrastructure forecast (Sep {startDate})} other {Infrastructure forecast (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Infrastructure forecast (Oct {startDate})} other {Infrastructure forecast (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Infrastructure forecast (Nov {startDate})} other {Infrastructure forecast (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Infrastructure forecast (Dec {startDate})} other {Infrastructure forecast (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Infrastructure date label',\n        id: 'ChartCostInfrastructureForecastLegendLabel',\n    },\n    ChartCostInfrastructureForecastLegendNoDataLabel: {\n        defaultMessage: 'Infrastructure forecast (no data)',\n        description: 'Infrastructure forecast (no data)',\n        id: 'ChartCostInfrastructureForecastLegendNoDataLabel',\n    },\n    ChartCostInfrastructureForecastLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Infrastructure forecast (Jan)} ' +\n            '1 {Infrastructure forecast (Feb)} ' +\n            '2 {Infrastructure forecast (Mar)} ' +\n            '3 {Infrastructure forecast (Apr)} ' +\n            '4 {Infrastructure forecast (May)} ' +\n            '5 {Infrastructure forecast (Jun)} ' +\n            '6 {Infrastructure forecast (Jul)} ' +\n            '7 {Infrastructure forecast (Aug)} ' +\n            '8 {Infrastructure forecast (Sep)} ' +\n            '9 {Infrastructure forecast (Oct)} ' +\n            '10 {Infrastructure forecast (Nov)} ' +\n            '11 {Infrastructure forecast (Dec)} ' +\n            'other {}}',\n        description: 'Infrastructure date label tooltip',\n        id: 'ChartCostInfrastructureForecastLegendTooltip',\n    },\n    ChartCostInfrastructureLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Infrastructure cost (Jan {startDate})} other {Infrastructure cost (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Infrastructure cost (Feb {startDate})} other {Infrastructure cost (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Infrastructure cost (Mar {startDate})} other {Infrastructure cost (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Infrastructure cost (Apr {startDate})} other {Infrastructure cost (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Infrastructure cost (May {startDate})} other {Infrastructure cost (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Infrastructure cost (Jun {startDate})} other {Infrastructure cost (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Infrastructure cost (Jul {startDate})} other {Infrastructure cost (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Infrastructure cost (Aug {startDate})} other {Infrastructure cost (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Infrastructure cost (Sep {startDate})} other {Infrastructure cost (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Infrastructure cost (Oct {startDate})} other {Infrastructure cost (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Infrastructure cost (Nov {startDate})} other {Infrastructure cost (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Infrastructure cost (Dec {startDate})} other {Infrastructure cost (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Infrastructure cost label',\n        id: 'ChartCostInfrastructureLegendLabel',\n    },\n    ChartCostInfrastructureLegendNoDataLabel: {\n        defaultMessage: 'Infrastructure cost (no data)',\n        description: 'Infrastructure cost (no data)',\n        id: 'ChartCostInfrastructureLegendNoDataLabel',\n    },\n    ChartCostInfrastructureLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Infrastructure cost (Jan)} ' +\n            '1 {Infrastructure cost (Feb)} ' +\n            '2 {Infrastructure cost (Mar)} ' +\n            '3 {Infrastructure cost (Apr)} ' +\n            '4 {Infrastructure cost (May)} ' +\n            '5 {Infrastructure cost (Jun)} ' +\n            '6 {Infrastructure cost (Jul)} ' +\n            '7 {Infrastructure cost (Aug)} ' +\n            '8 {Infrastructure cost (Sep)} ' +\n            '9 {Infrastructure cost (Oct)} ' +\n            '10 {Infrastructure cost (Nov)} ' +\n            '11 {Infrastructure cost (Dec)} ' +\n            'other {}}',\n        description: 'Infrastructure cost label tooltip',\n        id: 'ChartCostInfrastructureLegendTooltip',\n    },\n    ChartCostLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Cost (Jan {startDate})} other {Cost (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Cost (Feb {startDate})} other {Cost (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Cost (Mar {startDate})} other {Cost (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Cost (Apr {startDate})} other {Cost (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Cost (May {startDate})} other {Cost (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Cost (Jun {startDate})} other {Cost (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Cost (Jul {startDate})} other {Cost (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Cost (Aug {startDate})} other {Cost (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Cost (Sep {startDate})} other {Cost (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Cost (Oct {startDate})} other {Cost (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Cost (Nov {startDate})} other {Cost (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Cost (Dec {startDate})} other {Cost (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Cost date label',\n        id: 'ChartCostLegendLabel',\n    },\n    ChartCostLegendNoDataLabel: {\n        defaultMessage: 'Cost (no data)',\n        description: 'Cost (no data)',\n        id: 'ChartCostLegendNoDataLabel',\n    },\n    ChartCostLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Cost (Jan)} ' +\n            '1 {Cost (Feb)} ' +\n            '2 {Cost (Mar)} ' +\n            '3 {Cost (Apr)} ' +\n            '4 {Cost (May)} ' +\n            '5 {Cost (Jun)} ' +\n            '6 {Cost (Jul)} ' +\n            '7 {Cost (Aug)} ' +\n            '8 {Cost (Sep)} ' +\n            '9 {Cost (Oct)} ' +\n            '10 {Cost (Nov)} ' +\n            '11 {Cost (Dec)} ' +\n            'other {}}',\n        description: 'Cost (month)',\n        id: 'ChartCostLegendTooltip',\n    },\n    ChartCostSupplementaryLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Supplementary cost (Jan {startDate})} other {Supplementary cost (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Supplementary cost (Feb {startDate})} other {Supplementary cost (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Supplementary cost (Mar {startDate})} other {Supplementary cost (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Supplementary cost (Apr {startDate})} other {Supplementary cost (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Supplementary cost (May {startDate})} other {Supplementary cost (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Supplementary cost (Jun {startDate})} other {Supplementary cost (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Supplementary cost (Jul {startDate})} other {Supplementary cost (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Supplementary cost (Aug {startDate})} other {Supplementary cost (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Supplementary cost (Sep {startDate})} other {Supplementary cost (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Supplementary cost (Oct {startDate})} other {Supplementary cost (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Supplementary cost (Nov {startDate})} other {Supplementary cost (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Supplementary cost (Dec {startDate})} other {Supplementary cost (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Supplementary cost date label',\n        id: 'ChartCostSupplementaryLegendLabel',\n    },\n    ChartCostSupplementaryLegendNoDataLabel: {\n        defaultMessage: 'Supplementary cost (no data)',\n        description: 'Supplementary cost (no data)',\n        id: 'ChartCostSupplementaryLegendNoDataLabel',\n    },\n    ChartCostSupplementaryLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Supplementary cost (Jan)} ' +\n            '1 {Supplementary cost (Feb)} ' +\n            '2 {Supplementary cost (Mar)} ' +\n            '3 {Supplementary cost (Apr)} ' +\n            '4 {Supplementary cost (May)} ' +\n            '5 {Supplementary cost (Jun)} ' +\n            '6 {Supplementary cost (Jul)} ' +\n            '7 {Supplementary cost (Aug)} ' +\n            '8 {Supplementary cost (Sep)} ' +\n            '9 {Supplementary cost (Oct)} ' +\n            '10 {Supplementary cost (Nov)} ' +\n            '11 {Supplementary cost (Dec)} ' +\n            'other {}}',\n        description: 'Supplementary cost (month)',\n        id: 'ChartCostSupplementaryLegendTooltip',\n    },\n    ChartDateRange: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Jan {startDate} {year}} other {{startDate}-{endDate} Jan {year}}}} ' +\n            '1 {{count, plural, one {Feb {startDate} {year}} other {{startDate}-{endDate} Feb {year}}}} ' +\n            '2 {{count, plural, one {Mar {startDate} {year}} other {{startDate}-{endDate} Mar {year}}}} ' +\n            '3 {{count, plural, one {Apr {startDate} {year}} other {{startDate}-{endDate} Apr {year}}}} ' +\n            '4 {{count, plural, one {May {startDate} {year}} other {{startDate}-{endDate} May {year}}}} ' +\n            '5 {{count, plural, one {Jun {startDate} {year}} other {{startDate}-{endDate} Jun {year}}}} ' +\n            '6 {{count, plural, one {Jul {startDate} {year}} other {{startDate}-{endDate} Jul {year}}}} ' +\n            '7 {{count, plural, one {Aug {startDate} {year}} other {{startDate}-{endDate} Aug {year}}}} ' +\n            '8 {{count, plural, one {Sep {startDate} {year}} other {{startDate}-{endDate} Sep {year}}}} ' +\n            '9 {{count, plural, one {Oct {startDate} {year}} other {{startDate}-{endDate} Oct {year}}}} ' +\n            '10 {{count, plural, one {Nov {startDate} {year}} other {{startDate}-{endDate} Nov {year}}}} ' +\n            '11 {{count, plural, one {Dec {startDate} {year}} other {{startDate}-{endDate} Dec {year}}}} ' +\n            'other {}}',\n        description: 'Date range that handles singular and plural',\n        id: 'ChartDateRange',\n    },\n    ChartDayOfTheMonth: {\n        defaultMessage: 'Day {day}',\n        description: 'The day of the month',\n        id: 'ChartDayOfTheMonth',\n    },\n    ChartLimitLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Limit (Jan {startDate})} other {Limit (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Limit (Feb {startDate})} other {Limit (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Limit (Mar {startDate})} other {Limit (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Limit (Apr {startDate})} other {Limit (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Limit (May {startDate})} other {Limit (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Limit (Jun {startDate})} other {Limit (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Limit (Jul {startDate})} other {Limit (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Limit (Aug {startDate})} other {Limit (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Limit (Sep {startDate})} other {Limit (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Limit (Oct {startDate})} other {Limit (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Limit (Nov {startDate})} other {Limit (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Limit (Dec {startDate})} other {Limit (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Limit date label',\n        id: 'ChartLimitLegendLabel',\n    },\n    ChartLimitLegendNoDataLabel: {\n        defaultMessage: 'Limit (no data)',\n        description: 'Limit (no data)',\n        id: 'ChartLimitLegendNoDataLabel',\n    },\n    ChartLimitLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Limit (Jan)} ' +\n            '1 {Limit (Feb)} ' +\n            '2 {Limit (Mar)} ' +\n            '3 {Limit (Apr)} ' +\n            '4 {Limit (May)} ' +\n            '5 {Limit (Jun)} ' +\n            '6 {Limit (Jul)} ' +\n            '7 {Limit (Aug)} ' +\n            '8 {Limit (Sep)} ' +\n            '9 {Limit (Oct)} ' +\n            '10 {Limit (Nov)} ' +\n            '11 {Limit (Dec)} ' +\n            'other {}}',\n        description: 'Limit (month)',\n        id: 'ChartLimitLegendTooltip',\n    },\n    ChartNoData: {\n        defaultMessage: 'no data',\n        description: 'no data',\n        id: 'ChartNoData',\n    },\n    ChartOthers: {\n        defaultMessage: '{count, plural, one {{count} Other} other {{count} Others}}',\n        description: 'Other || Others',\n        id: 'ChartOthers',\n    },\n    ChartRequestsLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Requests (Jan {startDate})} other {Requests (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Requests (Feb {startDate})} other {Requests (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Requests (Mar {startDate})} other {Requests (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Requests (Apr {startDate})} other {Requests (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Requests (May {startDate})} other {Requests (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Requests (Jun {startDate})} other {Requests (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Requests (Jul {startDate})} other {Requests (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Requests (Aug {startDate})} other {Requests (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Requests (Sep {startDate})} other {Requests (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Requests (Oct {startDate})} other {Requests (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Requests (Nov {startDate})} other {Requests (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Requests (Dec {startDate})} other {Requests (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Requests date label',\n        id: 'ChartRequestLegendLabel',\n    },\n    ChartRequestsLegendNoDataLabel: {\n        defaultMessage: 'Requests (no data)',\n        description: 'Requests (no data)',\n        id: 'ChartRequestsLegendNoDataLabel',\n    },\n    ChartRequestsLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Requests (Jan)} ' +\n            '1 {Requests (Feb)} ' +\n            '2 {Requests (Mar)} ' +\n            '3 {Requests (Apr)} ' +\n            '4 {Requests (May)} ' +\n            '5 {Requests (Jun)} ' +\n            '6 {Requests (Jul)} ' +\n            '7 {Requests (Aug)} ' +\n            '8 {Requests (Sep)} ' +\n            '9 {Requests (Oct)} ' +\n            '10 {Requests (Nov)} ' +\n            '11 {Requests (Dec)} ' +\n            'other {}}',\n        description: 'Requests (month)',\n        id: 'ChartRequestLegendTooltip',\n    },\n    ChartUsageLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Usage (Jan {startDate})} other {Usage (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Usage (Feb {startDate})} other {Usage (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Usage (Mar {startDate})} other {Usage (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Usage (Apr {startDate})} other {Usage (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Usage (May {startDate})} other {Usage (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Usage (Jun {startDate})} other {Usage (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Usage (Jul {startDate})} other {Usage (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Usage (Aug {startDate})} other {Usage (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Usage (Sep {startDate})} other {Usage (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Usage (Oct {startDate})} other {Usage (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Usage (Nov {startDate})} other {Usage (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Usage (Dec {startDate})} other {Usage (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Usage (month {startDate})',\n        id: 'ChartUsageLegendLabel',\n    },\n    ChartUsageLegendNoDataLabel: {\n        defaultMessage: 'Usage (no data)',\n        description: 'Usage (no data)',\n        id: 'ChartUsageLegendNoDataLabel',\n    },\n    ChartUsageLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Usage (Jan)} ' +\n            '1 {Usage (Feb)} ' +\n            '2 {Usage (Mar)} ' +\n            '3 {Usage (Apr)} ' +\n            '4 {Usage (May)} ' +\n            '5 {Usage (Jun)} ' +\n            '6 {Usage (Jul)} ' +\n            '7 {Usage (Aug)} ' +\n            '8 {Usage (Sep)} ' +\n            '9 {Usage (Oct)} ' +\n            '10 {Usage (Nov)} ' +\n            '11 {Usage (Dec)} ' +\n            'other {}}',\n        description: 'Usage (month)',\n        id: 'ChartUsageLegendTooltip',\n    },\n    Close: {\n        defaultMessage: 'Close',\n        description: 'Close',\n        id: 'Close',\n    },\n    Clusters: {\n        defaultMessage: 'Clusters',\n        description: 'Clusters',\n        id: 'Clusters',\n    },\n    Cost: {\n        defaultMessage: 'Cost',\n        description: 'Cost',\n        id: 'Cost',\n    },\n    CostCalculations: {\n        defaultMessage: 'Cost calculations',\n        description: 'Cost calculations',\n        id: 'CostCalculations',\n    },\n    CostManagement: {\n        defaultMessage: 'Cost Management',\n        description: 'Cost Management',\n        id: 'CostManagement',\n    },\n    CostModels: {\n        defaultMessage: 'Cost Models',\n        description: 'Cost Models',\n        id: 'CostModels',\n    },\n    CostModelsAddTagValues: {\n        defaultMessage: 'Add more tag values',\n        description: 'Add more tag values',\n        id: 'CostModelsAddTagValues',\n    },\n    CostModelsAssignSources: {\n        defaultMessage: '{count, plural, one {Assign source} other {Assign sources}}',\n        description: 'Assign sources -- plural or singular',\n        id: 'CostModelsAssignSources',\n    },\n    CostModelsAssignSourcesErrorDescription: {\n        defaultMessage: 'You cannot assign a source at this time. Try refreshing this page. If the problem persists, contact your organization administrator or visit our {url} for known outages.',\n        description: 'You cannot assign a source at this time',\n        id: 'CostModelsAssignSourcesErrorDescription',\n    },\n    CostModelsAssignSourcesErrorTitle: {\n        defaultMessage: 'This action is temporarily unavailable',\n        description: 'This action is temporarily unavailable',\n        id: 'CostModelsAssignSourcesErrorTitle',\n    },\n    CostModelsAssignSourcesParen: {\n        defaultMessage: 'Assign source(s)',\n        description: 'Assign source(s)',\n        id: 'CostModelsAssignSourcesParen',\n    },\n    CostModelsAssignedSources: {\n        defaultMessage: 'Assigned sources',\n        description: 'Assigned sourcess',\n        id: 'CostModelsAssignedSources',\n    },\n    CostModelsAvailableSources: {\n        defaultMessage: 'The following sources are assigned to my production cost model:',\n        description: 'The following sources are assigned to my production cost model:',\n        id: 'CostModelsAvailableSources',\n    },\n    CostModelsCanDelete: {\n        defaultMessage: 'This action will delete {name} cost model from the system. This action cannot be undone',\n        description: 'This action will delete {name} cost model from the system. This action cannot be undone',\n        id: 'CostModelsCanDelete',\n    },\n    CostModelsCanNotDelete: {\n        defaultMessage: 'The following sources are assigned to {name} cost model:',\n        description: 'The following sources are assigned to {name} cost model:',\n        id: 'CostModelsCanNotDelete',\n    },\n    CostModelsDelete: {\n        defaultMessage: 'Delete cost model',\n        description: 'Delete cost model',\n        id: 'CostModelsDelete',\n    },\n    CostModelsDeleteDesc: {\n        defaultMessage: 'This action will delete {costModel} cost model from the system. This action cannot be undone.',\n        description: 'This action will delete {costModel} cost model from the system. This action cannot be undone.',\n        id: 'CostModelsDeleteDesc',\n    },\n    CostModelsDeleteSource: {\n        defaultMessage: 'You must unassign any sources before you can delete this cost model.',\n        description: 'You must unassign any sources before you can delete this cost model.',\n        id: 'CostModelsDeleteSource',\n    },\n    CostModelsDescTooLong: {\n        defaultMessage: 'Should not exceed 500 characters',\n        description: 'Should not exceed 500 characters',\n        id: 'CostModelsDescTooLong',\n    },\n    CostModelsDetailsAssignSourcesTitle: {\n        defaultMessage: 'Assign sources',\n        description: 'Assign sources',\n        id: 'CostModelsDetailsAssignSourcesTitle',\n    },\n    CostModelsDistributionDesc: {\n        defaultMessage: 'The following is the type of metric that is set to be used when distributing costs to the project level breakdowns.',\n        description: 'The following is the type of metric that is set to be used when distributing costs to the project level breakdowns.',\n        id: 'CostModelsDistributionDesc',\n    },\n    CostModelsDistributionEdit: {\n        defaultMessage: 'Edit distribution',\n        description: 'Edit distribution',\n        id: 'CostModelsDistributionEdit',\n    },\n    CostModelsEmptyState: {\n        defaultMessage: 'What is your hybrid cloud costing you?',\n        description: 'What is your hybrid cloud costing you?',\n        id: 'CostModelsEmptyState',\n    },\n    CostModelsEmptyStateDesc: {\n        defaultMessage: 'Create a cost model to start calculating your hybrid cloud costs using custom price lists, markups, or both. Click on the button below to begin the journey.',\n        description: 'Create a cost model to start calculating your hybrid cloud costs using custom price lists, markups, or both. Click on the button below to begin the journey.',\n        id: 'CostModelsEmptyStateDesc',\n    },\n    CostModelsEmptyStateLearnMore: {\n        defaultMessage: 'Read about setting up a cost model',\n        description: 'Read about setting up a cost model',\n        id: 'CostModelsEmptyStateLearnMore',\n    },\n    CostModelsEnterTagKey: {\n        defaultMessage: 'Enter a tag key',\n        description: 'Enter a tag key',\n        id: 'CostModelsEnterTagKey',\n    },\n    CostModelsEnterTagRate: {\n        defaultMessage: 'Enter rate by tag',\n        description: 'Enter rate by tag',\n        id: 'CostModelsEnterTagRate',\n    },\n    CostModelsEnterTagValue: {\n        defaultMessage: 'Enter a tag value',\n        description: 'Enter a tag value',\n        id: 'CostModelsEnterTagValue',\n    },\n    CostModelsExamplesDoubleMarkup: {\n        defaultMessage: 'A markup rate of (+) 100% doubles the base costs of your source(s).',\n        description: 'A markup rate of (+) 100% doubles the base costs of your source(s).',\n        id: 'CostModelsExamplesDoubleMarkup',\n    },\n    CostModelsExamplesNoAdjust: {\n        defaultMessage: 'A markup or discount rate of (+/-) 0% (the default) makes no adjustments to the base costs of your source(s).',\n        description: 'A markup or discount rate of (+/-) 0% (the default) makes no adjustments to the base costs of your source(s).',\n        id: 'CostModelsExamplesNoAdjust',\n    },\n    CostModelsExamplesReduceSeventyfive: {\n        defaultMessage: 'A discount rate of (-) 25% reduces the base costs of your source(s) to 75% of the original value.',\n        description: 'A discount rate of (-) 25% reduces the base costs of your source(s) to 75% of the original value.',\n        id: 'CostModelsExamplesReduceSeventyfive',\n    },\n    CostModelsExamplesReduceZero: {\n        defaultMessage: 'A discount rate of (-) 100% reduces the base costs of your source(s) to 0.',\n        description: 'A discount rate of (-) 100% reduces the base costs of your source(s) to 0.',\n        id: 'CostModelsExamplesReduceZero',\n    },\n    CostModelsFilterPlaceholder: {\n        defaultMessage: 'Filter by name...',\n        description: 'Filter by name',\n        id: 'CostModelsFilterPlaceholder',\n    },\n    CostModelsFilterTagKey: {\n        defaultMessage: 'Filter by tag key',\n        description: 'Filter by tag key',\n        id: 'CostModelsFilterTagKey',\n    },\n    CostModelsInfoTooLong: {\n        defaultMessage: 'Should not exceed 100 characters',\n        description: 'Should not exceed 100 characters',\n        id: 'CostModelsInfoTooLong',\n    },\n    CostModelsLastChange: {\n        defaultMessage: 'Last change',\n        description: 'Last change',\n        id: 'CostModelsLastChange',\n    },\n    CostModelsPopover: {\n        defaultMessage: 'A cost model allows you to associate a price to metrics provided by your sources to charge for utilization of resources. {learnMore}',\n        description: 'A cost model allows you to associate a price to metrics provided by your sources to charge for utilization of resources. {learnMore}',\n        id: 'CostModelsPopover',\n    },\n    CostModelsPopoverAriaLabel: {\n        defaultMessage: 'Cost model info popover',\n        description: 'Cost model info popover',\n        id: 'CostModelsPopoverAriaLabel',\n    },\n    CostModelsReadOnly: {\n        defaultMessage: 'You have read only permissions',\n        description: 'You have read only permissions',\n        id: 'CostModelsReadOnly',\n    },\n    CostModelsRefreshDialog: {\n        defaultMessage: 'Refresh this dialog',\n        description: 'Refresh this dialog',\n        id: 'CostModelsRefreshDialog',\n    },\n    CostModelsRequiredField: {\n        defaultMessage: 'This field is required',\n        description: 'This field is required',\n        id: 'CostModelsRequiredField',\n    },\n    CostModelsRouterErrorTitle: {\n        defaultMessage: 'Fail routing to cost model',\n        description: 'cost models router error title',\n        id: 'CostModelsRouterErrorTitle',\n    },\n    CostModelsRouterServerError: {\n        defaultMessage: 'Server error: could not get the cost model.',\n        description: 'Server error: could not get the cost model.',\n        id: 'CostModelsRouterServerError',\n    },\n    CostModelsSourceDelete: {\n        defaultMessage: 'Unassign',\n        description: 'Unassign',\n        id: 'CostModelsSourceDelete',\n    },\n    CostModelsSourceDeleteSource: {\n        defaultMessage: 'Unassign source',\n        description: 'Unassign source',\n        id: 'CostModelsSourceDeleteSource',\n    },\n    CostModelsSourceDeleteSourceDesc: {\n        defaultMessage: 'This will remove the assignment of {source} from the {costModel} cost model. You can then assign the cost model to a new source.',\n        description: 'This will remove the assignment of {source} from the {costModel} cost model. You can then assign the cost model to a new source.',\n        id: 'CostModelsSourceDeleteSourceDesc',\n    },\n    CostModelsSourceEmptyStateDesc: {\n        defaultMessage: 'Select the source(s) you want to apply this cost model to.',\n        description: 'Select the source(s) you want to apply this cost model to.',\n        id: 'CostModelsSourceEmptyStateDesc',\n    },\n    CostModelsSourceEmptyStateTitle: {\n        defaultMessage: 'No sources are assigned',\n        description: 'No sources are assigned',\n        id: 'CostModelsSourceEmptyStateTitle',\n    },\n    CostModelsSourceTableAriaLabel: {\n        defaultMessage: 'Sources table',\n        description: 'Sources table',\n        id: 'CostModelsSourcesTableAriaLabel',\n    },\n    CostModelsSourceTablePaginationAriaLabel: {\n        defaultMessage: 'Sources table pagination controls',\n        description: 'Sources table pagination controls',\n        id: 'CostModelsSourceTablePaginationAriaLabel',\n    },\n    CostModelsSourceType: {\n        defaultMessage: 'Source type',\n        description: 'Source type',\n        id: 'CostModelsSourceType',\n    },\n    CostModelsTableAriaLabel: {\n        defaultMessage: 'Cost models table',\n        description: 'Cost models table',\n        id: 'CostModelsTableAriaLabel',\n    },\n    CostModelsTagRateTableAriaLabel: {\n        defaultMessage: 'Tag rates',\n        description: 'Tag rates',\n        id: 'CostModelsTagRateTableAriaLabel',\n    },\n    CostModelsTagRateTableDefault: {\n        defaultMessage: 'Default',\n        description: 'Default',\n        id: 'CostModelsTagRateTableDefault',\n    },\n    CostModelsTagRateTableKey: {\n        defaultMessage: 'Tag key',\n        description: 'Tag key',\n        id: 'CostModelsTagRateTableKey',\n    },\n    CostModelsTagRateTableRate: {\n        defaultMessage: 'Rate',\n        description: 'Rate',\n        id: 'CostModelsTagRateTableRate',\n    },\n    CostModelsTagRateTableValue: {\n        defaultMessage: 'Tag value',\n        description: 'Tag value',\n        id: 'CostModelsTagRateTableValue',\n    },\n    CostModelsUUIDEmptyState: {\n        defaultMessage: 'Cost model can not be found',\n        description: 'Cost model can not be found',\n        id: 'CostModelsUUIDEmptyState',\n    },\n    CostModelsUUIDEmptyStateDesc: {\n        defaultMessage: 'Cost model with uuid: {uuid} does not exist.',\n        description: 'Cost model with uuid: {uuid} does not exist.',\n        id: 'CostModelsUUIDEmptyStateDesc',\n    },\n    CostModelsWizardCreateCostModel: {\n        defaultMessage: 'Create cost model',\n        description: 'Create cost model',\n        id: 'CostModelsWizardCreateCostModel',\n    },\n    CostModelsWizardCreatePriceList: {\n        defaultMessage: 'Create a price list',\n        description: 'Create a price list',\n        id: 'CostModelsWizardCreatePriceList',\n    },\n    CostModelsWizardEmptySourceTypeLabel: {\n        defaultMessage: 'Select source type',\n        description: 'Select source type',\n        id: 'CostModelsWizardEmptySourceTypeLabel',\n    },\n    CostModelsWizardEmptyStateCreate: {\n        defaultMessage: 'To create a price list, begin by clicking the {value} button.',\n        description: 'To create a price list, begin by clicking the {Create rate} button.',\n        id: 'CostModelsWizardEmptyStateCreate',\n    },\n    CostModelsWizardEmptyStateOtherTime: {\n        defaultMessage: 'You can create a price list or modify one at a later time.',\n        description: 'You can create a price list or modify one at a later time.',\n        id: 'CostModelsWizardEmptyStateOtherTime',\n    },\n    CostModelsWizardEmptyStateSkipStep: {\n        defaultMessage: 'To skip this step, click the {value} button.',\n        description: 'To skip this step, click the {next} button.',\n        id: 'CostModelsWizardEmptyStateSkipStep',\n    },\n    CostModelsWizardEmptyStateTitle: {\n        defaultMessage: 'A price list has not been created.',\n        description: 'A price list has not been created.',\n        id: 'CostModelsWizardEmptyStateTitle',\n    },\n    CostModelsWizardGeneralInfoTitle: {\n        defaultMessage: 'Enter general information',\n        description: 'Enter general information',\n        id: 'CostModelsWizardGeneralInfoTitle',\n    },\n    CostModelsWizardNoRatesAdded: {\n        defaultMessage: 'No rates were added to the price list',\n        description: 'No rates were added to the price list',\n        id: 'CostModelsWizardNoRatesAdded',\n    },\n    CostModelsWizardOnboardAWS: {\n        defaultMessage: 'Amazon Web Services (AWS)',\n        description: 'Amazon Web Services (AWS)',\n        id: 'CostModelsWizardOnboardAWS',\n    },\n    CostModelsWizardOnboardOCP: {\n        defaultMessage: 'Red Hat OpenShift Container Platform',\n        description: 'Red Hat OpenShift Container Platform',\n        id: 'CostModelsWizardOnboardOCP',\n    },\n    CostModelsWizardPriceListMetric: {\n        defaultMessage: 'Select the metric you want to assign a price to, and specify a measurement unit and rate. You can optionally set multiple rates for particular tags.',\n        description: 'Select the metric you want to assign a price to, and specify a measurement unit and rate. You can optionally set multiple rates for particular tags.',\n        id: 'CostModelsWizardPriceListMetric',\n    },\n    CostModelsWizardReviewMarkDiscount: {\n        defaultMessage: 'Markup/Discount',\n        description: 'No Markup/Discount',\n        id: 'CostModelsWizardReviewMarkDiscount',\n    },\n    CostModelsWizardReviewStatusSubDetails: {\n        defaultMessage: 'Review and confirm your cost model configuration and assignments. Click {create} to create the cost model, or {back} to revise.',\n        description: 'Review and confirm your cost model configuration and assignments. Click {Create} to create the cost model, or {Back} to revise.',\n        id: 'CostModelsWizardReviewStatusSubDetails',\n    },\n    CostModelsWizardReviewStatusSubTitle: {\n        defaultMessage: 'Costs for resources connected to the assigned sources will now be calculated using the newly created {value} cost model.',\n        description: 'Costs for resources connected to the assigned sources will now be calculated using the newly created {value} cost model.',\n        id: 'CostModelsWizardReviewStatusSubTitle',\n    },\n    CostModelsWizardReviewStatusTitle: {\n        defaultMessage: 'Creation successful',\n        description: 'Creation successful',\n        id: 'CostModelsWizardReviewStatusTitle',\n    },\n    CostModelsWizardSourceCaption: {\n        defaultMessage: '{value, select, ' +\n            'aws {Select from the following Amazon Web Services sources:} ' +\n            'azure {Select from the following Microsoft Azure sources:} ' +\n            'gcp {Select from the following Google Cloud Platform sources:} ' +\n            'ocp {Select from the following Red Hat OpenShift sources:} ' +\n            'other {}}',\n        description: 'Select from the following {value} sources:',\n        id: 'CostModelsWizardSourceCaption',\n    },\n    CostModelsWizardSourceErrorDescription: {\n        defaultMessage: 'Try refreshing this step or you can skip this step (as it is optional) and assign the source to the cost model at a later time. If the problem persists, contact your organization administrator or visit our {url} for known outages.',\n        description: 'This step is temporarily unavailable',\n        id: 'CostModelsWizardSourceErrorDescription',\n    },\n    CostModelsWizardSourceErrorTitle: {\n        defaultMessage: 'This step is temporarily unavailable',\n        description: 'This step is temporarily unavailable',\n        id: 'CostModelsWizardSourceErrorTitle',\n    },\n    CostModelsWizardSourceSubtitle: {\n        defaultMessage: 'Select one or more sources to this cost model. You can skip this step and assign the cost model to a source at a later time. A source will be unavailable for selection if a cost model is already assigned to it.',\n        description: 'Select one or more sources to this cost model. You can skip this step and assign the cost model to a source at a later time. A source will be unavailable for selection if a cost model is already assigned to it.',\n        id: 'CostModelsWizardSourceSubtitle',\n    },\n    CostModelsWizardSourceTableAriaLabel: {\n        defaultMessage: 'Assign sources to cost model table',\n        description: 'Assign sources to cost model table',\n        id: 'CostModelsWizardSourceTableAriaLabel',\n    },\n    CostModelsWizardSourceTableCostModel: {\n        defaultMessage: 'Cost model assigned',\n        description: 'Cost model assigned',\n        id: 'CostModelsWizardSourceTableCostModel',\n    },\n    CostModelsWizardSourceTableDefaultCostModel: {\n        defaultMessage: 'Default cost model',\n        description: 'Default cost model',\n        id: 'CostModelsWizardSourceTableDefaultCostModel',\n    },\n    CostModelsWizardSourceTitle: {\n        defaultMessage: 'Assign sources to the cost model (optional)',\n        description: 'Assign sources to the cost model (optional)',\n        id: 'CostModelsWizardSourceTitle',\n    },\n    CostModelsWizardSourceWarning: {\n        defaultMessage: 'This source is assigned to {costModel} cost model. You will have to unassigned it first',\n        description: 'This source is assigned to {costModel} cost model. You will have to unassigned it first',\n        id: 'CostModelsWizardSourceWarning',\n    },\n    CostModelsWizardStepsGenInfo: {\n        defaultMessage: 'Enter information',\n        description: 'Enter information',\n        id: 'CostModelsWizardStepsGenInfo',\n    },\n    CostModelsWizardStepsPriceList: {\n        defaultMessage: 'Price list',\n        description: 'Price list',\n        id: 'CostModelsWizardStepsPriceList',\n    },\n    CostModelsWizardStepsReview: {\n        defaultMessage: 'Review details',\n        description: 'Review details',\n        id: 'CostModelsWizardStepsReview',\n    },\n    CostModelsWizardStepsSources: {\n        defaultMessage: 'Assign a source to the cost model',\n        description: 'Assign a source to the cost model',\n        id: 'CostModelsWizardStepsSources',\n    },\n    CostModelsWizardSubTitleTable: {\n        defaultMessage: 'The following is a list of rates you have set so far for this price list.',\n        description: 'The following is a list of rates you have set so far for this price list.',\n        id: 'CostModelsWizardSubTitleTable',\n    },\n    CostModelsWizardWarningSources: {\n        defaultMessage: 'Cannot assign cost model to a source that is already assigned to another one',\n        description: 'No Cannot assign cost model to a source that is already assigned to another one',\n        id: 'CostModelsWizardWarningSources',\n    },\n    CpuTitle: {\n        defaultMessage: 'CPU',\n        description: 'CPU',\n        id: 'CPUTitle',\n    },\n    Create: {\n        defaultMessage: 'Create',\n        description: 'Create',\n        id: 'Create',\n    },\n    CreateCostModelConfirmMsg: {\n        defaultMessage: 'Are you sure you want to stop creating a cost model? All settings will be discarded.',\n        description: 'Are you sure you want to stop creating a cost model? All settings will be discarded.',\n        id: 'CreateCostModelConfirmMsg',\n    },\n    CreateCostModelDesc: {\n        defaultMessage: 'A cost model allows you to associate a price to metrics provided by your sources to charge for utilization of resources.',\n        description: 'A cost model allows you to associate a price to metrics provided by your sources to charge for utilization of resources.',\n        id: 'CreateCostModelDesc',\n    },\n    CreateCostModelExit: {\n        defaultMessage: 'Exit cost model creation',\n        description: 'Exit cost model creation',\n        id: 'CreateCostModelExit',\n    },\n    CreateCostModelExitYes: {\n        defaultMessage: 'Yes, I want to exit',\n        description: 'Yes, I want to exit',\n        id: 'CreateCostModelExitYes',\n    },\n    CreateCostModelNoContinue: {\n        defaultMessage: 'No, I want to continue',\n        description: 'No, I want to continue',\n        id: 'CreateCostModelNoContinue',\n    },\n    CreateCostModelTitle: {\n        defaultMessage: 'Create a cost model',\n        description: 'Create a cost model',\n        id: 'CreateCostModelTitle',\n    },\n    CreateRate: {\n        defaultMessage: 'Create rate',\n        description: 'Create rate',\n        id: 'CreateRate',\n    },\n    Currency: {\n        defaultMessage: 'Currency',\n        description: 'Currency',\n        id: 'Currency',\n    },\n    CurrencyAbbreviations: {\n        defaultMessage: '{symbol, select, ' +\n            'billion {{value} B} ' +\n            'million {{value} M} ' +\n            'quadrillion {{value} q} ' +\n            'thousand {{value} K} ' +\n            'trillion {{value} t} ' +\n            'other {}}',\n        description: 'str.match(/([\\\\D]*)([\\\\d.,]+)([\\\\D]*)/)',\n        id: 'CurrencyAbbreviations',\n    },\n    CurrencyOptions: {\n        defaultMessage: '{units, select, ' +\n            'AUD {AUD (AU$) - Australian Dollar}' +\n            'CAD {CAD (C$) - Canadian Dollar}' +\n            'CHF {CHF (CHF) - Swiss Franc}' +\n            'CNY {CNY (CN¥) - Chinese Yuan}' +\n            'DKK {DKK (Dkr) - Danish Krone}' +\n            'EUR {EUR (€) - Euro}' +\n            'GBP {GBP (£) - British Pound}' +\n            'HKD {HKD (HK$) - Hong Kong Dollar}' +\n            'JPY {JPY (¥) - Japanese Yen}' +\n            'NOK {NOK (Nkr) - Norwegian Krone}' +\n            'NZD {NZD (NZ$) - New Zealand Dollar}' +\n            'SEK {SEK (Skr) - Swedish Krona}' +\n            'SGD {SGD (S$) - Singapore Dollar}' +\n            'USD {USD ($) - United States Dollar} ' +\n            'ZAR {ZAR (R) - South African Rand}' +\n            'other {}}',\n        description: 'return the proper unit label based on key: \"units\"',\n        id: 'CurrencyOptions',\n    },\n    CurrencyUnits: {\n        defaultMessage: '{units, select, ' +\n            'AUD {AU$}' +\n            'CAD {C$}' +\n            'CHF {CHF}' +\n            'CNY {CN¥}' +\n            'DKK {Dkr}' +\n            'EUR {€}' +\n            'GBP {£}' +\n            'HKD {HK$}' +\n            'JPY {¥}' +\n            'NOK {Nkr}' +\n            'NZD {NZ$}' +\n            'SEK {Skr}' +\n            'SGD {S$}' +\n            'USD {$USD} ' +\n            'ZAR {R}' +\n            'other {}}',\n        description: 'return the proper unit label based on key: \"units\"',\n        id: 'CurrencyUnits',\n    },\n    DashboardCumulativeCostComparison: {\n        defaultMessage: 'Cumulative cost comparison ({units})',\n        description: 'Cumulative cost comparison ({units})',\n        id: 'DashboardCumulativeCostComparison',\n    },\n    DashboardDailyUsageComparison: {\n        defaultMessage: 'Daily usage comparison ({units})',\n        description: 'Daily usage comparison ({units})',\n        id: 'DashboardDailyUsageComparison',\n    },\n    DashboardDatabaseTitle: {\n        defaultMessage: 'Database services cost',\n        description: 'Database services cost',\n        id: 'DashboardDatabaseTitle',\n    },\n    DashboardNetworkTitle: {\n        defaultMessage: 'Network services cost',\n        description: 'Network services cost',\n        id: 'DashboardNetworkTitle',\n    },\n    DashboardStorageTitle: {\n        defaultMessage: 'Storage services usage',\n        description: 'Storage services usage',\n        id: 'DashboardStorageTitle',\n    },\n    DashboardTotalCostTooltip: {\n        defaultMessage: 'This total cost is the sum of the infrastructure cost {infrastructureCost} and supplementary cost {supplementaryCost}',\n        description: 'total cost is the sum of the infrastructure cost and supplementary cost',\n        id: 'DashboardTotalCostTooltip',\n    },\n    Delete: {\n        defaultMessage: 'Delete',\n        description: 'Delete',\n        id: 'Delete',\n    },\n    Description: {\n        defaultMessage: 'Description',\n        description: 'Description',\n        id: 'Description',\n    },\n    DetailsActionsExport: {\n        defaultMessage: 'Export data',\n        description: 'Export data',\n        id: 'DetailsActionsExport',\n    },\n    DetailsActionsPriceList: {\n        defaultMessage: 'View all price lists',\n        description: 'View all price lists',\n        id: 'DetailsActionsPriceList',\n    },\n    DetailsClustersModalTitle: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {account {name} clusters} ' +\n            'cluster {cluster {name} clusters} ' +\n            'instance_type {instance type {name} clusters} ' +\n            'node {node {name} clusters} ' +\n            'org_unit_id {organizational unit {name} clusters} ' +\n            'project {project {name} clusters} ' +\n            'region {region {name} clusters} ' +\n            'resource_location {region {name} clusters} ' +\n            'service {service {name} clusters} ' +\n            'service_name {service {name} clusters} ' +\n            'subscription_guid {account {name} clusters} ' +\n            'tag {tags {name} clusters} ' +\n            'other {}}',\n        description: '{groupBy} {name} clusters',\n        id: 'DetailsClustersModalTitle',\n    },\n    DetailsColumnManagementTitle: {\n        defaultMessage: 'Manage columns',\n        description: 'Manage columns',\n        id: 'DetailsColumnManagementTitle',\n    },\n    DetailsCostValue: {\n        defaultMessage: 'Cost: {value}',\n        description: 'Cost value',\n        id: 'DetailsCostValue',\n    },\n    DetailsEmptyState: {\n        defaultMessage: 'Processing data to generate a list of all services that sums to a total cost...',\n        description: 'Processing data to generate a list of all services that sums to a total cost...',\n        id: 'DetailsEmptyState',\n    },\n    DetailsMoreClusters: {\n        defaultMessage: ', {value} more...',\n        description: ', {value} more...',\n        id: 'DetailsMoreClusters',\n    },\n    DetailsResourceNames: {\n        defaultMessage: '{value, select, ' +\n            'account {Account names} ' +\n            'cluster {Cluster names} ' +\n            'instance_type {Instance type names} ' +\n            'node {Node names} ' +\n            'org_unit_id {Organizational unit names} ' +\n            'project {Project names} ' +\n            'region {Region names} ' +\n            'resource_location {Region names} ' +\n            'service {Service names} ' +\n            'service_name {Service names} ' +\n            'subscription_guid {Account names} ' +\n            'tag {Tag names} ' +\n            'other {}}',\n        description: 'details table resource names',\n        id: 'DetailsResourceNames',\n    },\n    DetailsSummaryModalTitle: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {{name} accounts} ' +\n            'cluster {{name} clusters} ' +\n            'instance_type {{name} instance types} ' +\n            'node {{name} nodes} ' +\n            'org_unit_id {{name} organizational units} ' +\n            'project {{name} projects} ' +\n            'region {{name} regions} ' +\n            'resource_location {{name} regions} ' +\n            'service {{name} services} ' +\n            'service_name {{name} services} ' +\n            'subscription_guid {{name} accounts} ' +\n            'tag {{name} tags} ' +\n            'other {}}',\n        description: ', {value} more...',\n        id: 'DetailsSummaryModalTitle',\n    },\n    DetailsUnusedRequestsLabel: {\n        defaultMessage: 'Unrequested capacity',\n        description: 'Unrequested capacity',\n        id: 'DetailsUnusedRequestsLabel',\n    },\n    DetailsUnusedUnits: {\n        defaultMessage: '{units} ({percentage}% of capacity)',\n        description: '{units} ({percentage}% of capacity)',\n        id: 'DetailsUnusedUsageUnits',\n    },\n    DetailsUnusedUsageLabel: {\n        defaultMessage: 'Unused capacity',\n        description: 'Unused capacity',\n        id: 'DetailsUnusedUsageLabel',\n    },\n    DetailsUsageCapacity: {\n        defaultMessage: 'Capacity - {value} {units}',\n        description: 'Capacity - {value} {units}',\n        id: 'DetailsUsageCapacity',\n    },\n    DetailsUsageLimit: {\n        defaultMessage: 'Limit - {value} {units}',\n        description: 'Limit - {value} {units}',\n        id: 'DetailsUsageLimit',\n    },\n    DetailsUsageRequests: {\n        defaultMessage: 'Requests - {value} {units}',\n        description: 'Requests - {value} {units}',\n        id: 'DetailsUsageRequests',\n    },\n    DetailsUsageUsage: {\n        defaultMessage: 'Usage - {value} {units}',\n        description: 'Usage - {value} {units}',\n        id: 'DetailsUsageUsage',\n    },\n    DetailsViewAll: {\n        defaultMessage: '{value, select, ' +\n            'account {View all accounts} ' +\n            'cluster {View all clusters} ' +\n            'instance_type {View all instance types} ' +\n            'node {View all nodes} ' +\n            'org_unit_id {View all organizational units} ' +\n            'project {View all projects} ' +\n            'region {View all regions} ' +\n            'resource_location {View all regions} ' +\n            'service {View all Services} ' +\n            'service_name {View all services} ' +\n            'subscription_guid {View all accounts} ' +\n            'tag {View all tags} ' +\n            'other {}}',\n        description: 'View all {value}',\n        id: 'DetailsViewAll',\n    },\n    DiscountMinus: {\n        defaultMessage: 'Discount (-)',\n        description: 'Discount (-)',\n        id: 'DiscountMinus',\n    },\n    DistributionModelDesc: {\n        defaultMessage: 'This choice is for users to direct how their raw costs are distributed either by CPU or Memory on the project level breakdowns.',\n        description: 'This choice is for users to direct how their raw costs are distributed either by CPU or Memory on the project level breakdowns.',\n        id: 'DistributionModelDesc',\n    },\n    DistributionType: {\n        defaultMessage: 'Distribution type',\n        description: 'Distribution type',\n        id: 'DistributionType',\n    },\n    DocsAddOcpSources: {\n        defaultMessage: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/adding_an_openshift_container_platform_source_to_cost_management',\n        description: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/adding_an_openshift_container_platform_source_to_cost_management',\n        id: 'DocsAddOcpSources',\n    },\n    DocsConfigCostModels: {\n        defaultMessage: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/using_cost_models/index#assembly-setting-up-cost-models',\n        description: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/using_cost_models/index#assembly-setting-up-cost-models',\n        id: 'DocsConfigCostModels',\n    },\n    DocsCostModelTerminology: {\n        defaultMessage: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/using_cost_models/index#cost-model-terminology',\n        description: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/using_cost_models/index#cost-model-terminology',\n        id: 'DocsCostModelTerminology',\n    },\n    DocsUsingCostModels: {\n        defaultMessage: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/using_cost_models',\n        description: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/using_cost_models',\n        id: 'DocsUsingCostModels',\n    },\n    Edit: {\n        defaultMessage: 'Edit',\n        description: 'Edit',\n        id: 'Edit',\n    },\n    EditCostModel: {\n        defaultMessage: 'Edit cost model',\n        description: 'Edit cost model',\n        id: 'EditCostModel',\n    },\n    EditMarkup: {\n        defaultMessage: 'Edit markup',\n        description: 'Edit markup',\n        id: 'EditMarkup',\n    },\n    EditMarkupOrDiscount: {\n        defaultMessage: 'Edit markup or discount',\n        description: 'Edit markup or discount',\n        id: 'EditMarkupOrDiscount',\n    },\n    EmptyFilterSourceStateSubtitle: {\n        defaultMessage: 'Sorry, no source with the given filter was found.',\n        description: 'Sorry, no source with the given filter was found.',\n        id: 'EmptyFilterSourceStateSubtitle',\n    },\n    EmptyFilterStateSubtitle: {\n        defaultMessage: 'Sorry, no data with the given filter was found.',\n        description: 'Sorry, no data with the given filter was found.',\n        id: 'EmptyFilterStateSubtitle',\n    },\n    EmptyFilterStateTitle: {\n        defaultMessage: 'No match found',\n        description: 'No match found',\n        id: 'EmptyFilterStateTitle',\n    },\n    ErrorStateNotAuthorizedDesc: {\n        defaultMessage: 'Contact the cost management administrator to provide access to this application',\n        description: 'Contact the cost management administrator to provide access to this application',\n        id: 'ErrorStateNotAuthorizedDesc',\n    },\n    ErrorStateNotAuthorizedTitle: {\n        defaultMessage: \"You don't have access to the Cost management application\",\n        description: \"You don't have access to the Cost management application\",\n        id: 'ErrorStateNotAuthorizedTitle',\n    },\n    ErrorStateUnexpectedDesc: {\n        defaultMessage: 'We encountered an unexpected error. Contact your administrator.',\n        description: 'We encountered an unexpected error. Contact your administrator.',\n        id: 'ErrorStateUnexpectedDesc',\n    },\n    ErrorStateUnexpectedTitle: {\n        defaultMessage: 'Oops!',\n        description: 'Oops!',\n        id: 'ErrorStateUnexpectedTitle',\n    },\n    ExamplesTitle: {\n        defaultMessage: 'Examples',\n        description: 'Examples',\n        id: 'ExamplesTitle',\n    },\n    ExplorerChartDate: {\n        defaultMessage: '{month, select, ' +\n            '0 {Jan {date}} ' +\n            '1 {Feb {date}} ' +\n            '2 {Mar {date}} ' +\n            '3 {Apr {date}} ' +\n            '4 {May {date}} ' +\n            '5 {Jun {date}} ' +\n            '6 {Jul {date}} ' +\n            '7 {Aug {date}} ' +\n            '8 {Sep {date}} ' +\n            '9 {Oct {date}} ' +\n            '10 {Nov {date}} ' +\n            '11 {Dec {date}} ' +\n            'other {}}',\n        description: 'Month {date}',\n        id: 'ExplorerDateColumn',\n    },\n    ExplorerChartTitle: {\n        defaultMessage: '{value, select, ' +\n            'aws {Amazon Web Services - Top 5 Costliest} ' +\n            'aws_ocp {Amazon Web Services filtered by OpenShift - Top 5 Costliest} ' +\n            'azure {Microsoft Azure - Top 5 Costliest} ' +\n            'azure_ocp {Microsoft Azure filtered by OpenShift - Top 5 Costliest} ' +\n            'gcp {Google Cloud Platform - Top 5 Costliest} ' +\n            'gcp_ocp {Google Cloud Platform filtered by OpenShift - Top 5 Costliest} ' +\n            'ibm {IBM Cloud - Top 5 Costliest} ' +\n            'ocp {All OpenShift - Top 5 Costliest} ' +\n            'ocp_cloud {All cloud filtered by OpenShift - Top 5 Costliest} ' +\n            'other {}}',\n        description: 'Explorer chart title',\n        id: 'ExplorerChartTitle',\n    },\n    ExplorerDateRange: {\n        defaultMessage: '{value, select, ' +\n            'current_month_to_date {Month to date} ' +\n            'last_sixty_days {Last 60 days} ' +\n            'last_thirty_days {Last 30 days} ' +\n            'previous_month_to_date {Previous month and month to date} ' +\n            'other {}}',\n        description: 'date range based on {value}',\n        id: 'ExplorerDateRange',\n    },\n    ExplorerMonthDate: {\n        defaultMessage: '{month} {date}',\n        description: 'Cost {month} {date}',\n        id: 'ExplorerMonthDate',\n    },\n    ExplorerTableAriaLabel: {\n        defaultMessage: 'Cost Explorer table',\n        description: 'Cost Explorer table',\n        id: 'ExplorerTableAriaLabel',\n    },\n    ExplorerTitle: {\n        defaultMessage: 'Cost Explorer',\n        description: 'Cost Explorer title',\n        id: 'ExplorerTitle',\n    },\n    ExportAggregateType: {\n        defaultMessage: 'Select aggregate type',\n        description: 'Export aggregate type',\n        id: 'ExportAggregateType',\n    },\n    ExportAll: {\n        defaultMessage: 'All',\n        description: 'Export all',\n        id: 'ExportAll',\n    },\n    ExportDownload: {\n        defaultMessage: 'Generate and download',\n        description: 'Export download',\n        id: 'ExportDownload',\n    },\n    ExportError: {\n        defaultMessage: 'Something went wrong, please try fewer selections',\n        description: 'Export error',\n        id: 'ExportError',\n    },\n    ExportFileName: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {{resolution, select, daily {{provider}-accounts-daily-{date}} monthly {{provider}-accounts-monthly-{date}} other {}}} ' +\n            'cluster {{resolution, select, daily {{provider}-clusters-daily-{date}} monthly {{provider}-clusters-monthly-{date}} other {}}} ' +\n            'instance_type {{resolution, select, daily {{provider}-instances-daily-{date}} monthly {{provider}-instances-monthly-{date}} other {}}} ' +\n            'node {{resolution, select, daily {{provider}-node-daily-{date}} monthly {{provider}-node-monthly-{date}} other {}}} ' +\n            'org_unit_id {{resolution, select, daily {{provider}-org_units-daily-{date}} monthly {{provider}-org_units-monthly-{date}} other {}}} ' +\n            'project {{resolution, select, daily {{provider}-projects-daily-{date}} monthly {{provider}-projects-monthly-{date}} other {}}} ' +\n            'region {{resolution, select, daily {{provider}-regions-daily-{date}} monthly {{provider}-regions-monthly-{date}} other {}}} ' +\n            'resource_location {{resolution, select, daily {{provider}-regions-daily-{date}} monthly {{provider}-regions-monthly-{date}} other {}}} ' +\n            'service {{resolution, select, daily {{provider}-services-daily-{date}} monthly {{provider}-services-monthly-{date}} other {}}} ' +\n            'service_name {{resolution, select, daily {{provider}-services-daily-{date}} monthly {{provider}-services-monthly-{date}} other {}}} ' +\n            'subscription_guid {{resolution, select, daily {{provider}-accounts-daily-{date}} monthly {{provider}-accounts-monthly-{date}} other {}}} ' +\n            'tag {{resolution, select, daily {{provider}-tags-daily-{date}} monthly {{provider}-tags-monthly-{date}} other {}}} ' +\n            'other {}}',\n        description: 'Export file name',\n        id: 'ExportFileName',\n    },\n    ExportHeading: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {Aggregates of the following accounts will be exported to a .csv file.} ' +\n            'cluster {Aggregates of the following clusters will be exported to a .csv file.} ' +\n            'instance_type {Aggregates of the following instance types will be exported to a .csv file.} ' +\n            'node {Aggregates of the following nodes will be exported to a .csv file.} ' +\n            'org_unit_id {Aggregates of the following organizational units will be exported to a .csv file.} ' +\n            'project {Aggregates of the following projects will be exported to a .csv file.} ' +\n            'region {Aggregates of the following regions will be exported to a .csv file.} ' +\n            'resource_location {Aggregates of the regions will be exported to a .csv file.} ' +\n            'service {Aggregates of the following services will be exported to a .csv file.} ' +\n            'service_name {Aggregates of the following services will be exported to a .csv file.} ' +\n            'subscription_guid {Aggregates of the following accounts will be exported to a .csv file.} ' +\n            'tag {Aggregates of the following tags will be exported to a .csv file.} ' +\n            'other {}}',\n        description: 'Export heading',\n        id: 'ExportHeading',\n    },\n    ExportResolution: {\n        defaultMessage: '{value, select, daily {Daily} monthly {Monthly} other {}}',\n        description: 'Export file name',\n        id: 'ExportResolution',\n    },\n    ExportSelected: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {Selected accounts} ' +\n            'cluster {Selected clusters} ' +\n            'instance_type {Selected instance types} ' +\n            'node {Selected nodes} ' +\n            'org_unit_id {Selected organizational units} ' +\n            'project {Selected projects} ' +\n            'region {Selected regions} ' +\n            'resource_location {Selected regions} ' +\n            'service {Selected services} ' +\n            'service_name {Selected services} ' +\n            'subscription_guid {Selected accounts} ' +\n            'tag {Selected tags} ' +\n            'other {}}',\n        description: 'Selected items for export',\n        id: 'ExportSelected',\n    },\n    ExportTimeScope: {\n        defaultMessage: '{value, select, current {Current {date}} previous {Previous {date}} other {}}',\n        description: 'Export time scope',\n        id: 'ExportTimeScope',\n    },\n    ExportTimeScopeTitle: {\n        defaultMessage: 'Select month',\n        description: 'Export time scope title',\n        id: 'ExportTimeScopeTitle',\n    },\n    ExportTitle: {\n        defaultMessage: 'Export',\n        description: 'Export title',\n        id: 'ExportTitle',\n    },\n    FilterByButtonAriaLabel: {\n        defaultMessage: '{value, select, ' +\n            'account {Filter button for account name} ' +\n            'cluster {Filter button for cluster name} ' +\n            'name {Filter button for name name} ' +\n            'node {Filter button for node name} ' +\n            'org_unit_id {Filter button for organizational unit name} ' +\n            'project {Filter button for project name} ' +\n            'region {Filter button for region name} ' +\n            'resource_location {Filter button for region name} ' +\n            'service {Filter button for service name} ' +\n            'service_name {Filter button for service_name name} ' +\n            'subscription_guid {Filter button for account name} ' +\n            'tag {Filter button for tag name} ' +\n            'other {}}',\n        description: 'Filter button for \"value\" name',\n        id: 'FilterByButtonAriaLabel',\n    },\n    FilterByInputAriaLabel: {\n        defaultMessage: '{value, select, ' +\n            'account {Input for account name} ' +\n            'cluster {Input for cluster name} ' +\n            'name {Input for name name} ' +\n            'node {Input for node name} ' +\n            'org_unit_id {Input for organizational unit name} ' +\n            'project {Input for project name} ' +\n            'region {Input for region name} ' +\n            'resource_location {Input for region name} ' +\n            'service {Input for service name} ' +\n            'service_name {Input for service_name name} ' +\n            'subscription_guid {Input for account name} ' +\n            'tag {Input for tag name} ' +\n            'other {}}',\n        description: 'Input for {value} name',\n        id: 'FilterByInputAriaLabel',\n    },\n    FilterByOrgUnitAriaLabel: {\n        defaultMessage: 'Organizational units',\n        description: 'Organizational units',\n        id: 'FilterByOrgUnitAriaLabel',\n    },\n    FilterByOrgUnitPlaceholder: {\n        defaultMessage: 'Choose unit',\n        description: 'Choose unit',\n        id: 'FilterByOrgUnitPlaceholder',\n    },\n    FilterByPlaceholder: {\n        defaultMessage: '{value, select, ' +\n            'account {Filter by account} ' +\n            'cluster {Filter by cluster} ' +\n            'description {Filter by description} ' +\n            'name {Filter by name} ' +\n            'node {Filter by node} ' +\n            'org_unit_id {Filter by organizational unit} ' +\n            'project {Filter by project} ' +\n            'region {Filter by region} ' +\n            'resource_location {Filter by region} ' +\n            'service {Filter by service} ' +\n            'service_name {Filter by service} ' +\n            'source_type {Filter by source type} ' +\n            'subscription_guid {Filter by account} ' +\n            'tag {Filter by tag} ' +\n            'other {}}',\n        description: 'Filter by \"value\"',\n        id: 'FilterByPlaceholder',\n    },\n    FilterByTagKeyAriaLabel: {\n        defaultMessage: 'Tag keys',\n        description: 'Tag keys',\n        id: 'FilterByTagKeyAriaLabel',\n    },\n    FilterByTagKeyPlaceholder: {\n        defaultMessage: 'Choose key',\n        description: 'Choose key',\n        id: 'FilterByTagKeyPlaceholder',\n    },\n    FilterByTagValueAriaLabel: {\n        defaultMessage: 'Tag values',\n        description: 'Tag values',\n        id: 'FilterByTagValueAriaLabel',\n    },\n    FilterByTagValueButtonAriaLabel: {\n        defaultMessage: 'Filter button for tag value',\n        description: 'Filter button for tag value',\n        id: 'FilterByTagValueButtonAriaLabel',\n    },\n    FilterByTagValueInputPlaceholder: {\n        defaultMessage: 'Filter by value',\n        description: 'Filter by value',\n        id: 'FilterByTagValueInputPlaceholder',\n    },\n    FilterByTagValuePlaceholder: {\n        defaultMessage: 'Choose value',\n        description: 'Choose value',\n        id: 'FilterByTagValuePlaceholder',\n    },\n    FilterByValues: {\n        defaultMessage: '{value, select, ' +\n            'account {Account} ' +\n            'cluster {Cluster} ' +\n            'name {Name} ' +\n            'node {Node} ' +\n            'org_unit_id {Organizational unit} ' +\n            'project {Project} ' +\n            'region {Region} ' +\n            'resource_location {Region} ' +\n            'service {Service} ' +\n            'service_name {Service} ' +\n            'subscription_guid {Account} ' +\n            'tag {Tag} ' +\n            'other {}}',\n        description: 'Filter by values',\n        id: 'FilterByValues',\n    },\n    ForDate: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {{value} for January {startDate}} other {{value} for January {startDate}-{endDate}}}} ' +\n            '1 {{count, plural, one {{value} for February {startDate}} other {{value} for February {startDate}-{endDate}}}} ' +\n            '2 {{count, plural, one {{value} for March {startDate}} other {{value} for March {startDate}-{endDate}}}} ' +\n            '3 {{count, plural, one {{value} for April {startDate}} other {{value} for April {startDate}-{endDate}}}} ' +\n            '4 {{count, plural, one {{value} for May {startDate}} other {{value} for May {startDate}-{endDate}}}} ' +\n            '5 {{count, plural, one {{value} for June {startDate}} other {{value} for June {startDate}-{endDate}}}} ' +\n            '6 {{count, plural, one {{value} for July {startDate}} other {{value} for July {startDate}-{endDate}}}} ' +\n            '7 {{count, plural, one {{value} for August {startDate}} other {{value} for August {startDate}-{endDate}}}} ' +\n            '8 {{count, plural, one {{value} for September {startDate}} other {{value} for September {startDate}-{endDate}}}} ' +\n            '9 {{count, plural, one {{value} for October {startDate}} other {{value} for October {startDate}-{endDate}}}} ' +\n            '10 {{count, plural, one {{value} for November {startDate}} other {{value} for November {startDate}-{endDate}}}} ' +\n            '11 {{count, plural, one {{value} for December {startDate}} other {{value} for December {startDate}-{endDate}}}} ' +\n            'other {}}',\n        description: '{value} for date range',\n        id: 'ForDate',\n    },\n    GCP: {\n        defaultMessage: 'Google Cloud Platform',\n        description: 'Google Cloud Platform',\n        id: 'GCP',\n    },\n    GCPComputeTitle: {\n        defaultMessage: 'Compute instances usage',\n        description: 'Compute instances usage',\n        id: 'GCPComputeTitle',\n    },\n    GCPCostTitle: {\n        defaultMessage: 'Google Cloud Platform Services cost',\n        description: 'Google Cloud Platform Services cost',\n        id: 'GCPCostTitle',\n    },\n    GCPCostTrendTitle: {\n        defaultMessage: 'Google Cloud Platform Services cumulative cost comparison ({units})',\n        description: 'Google Cloud Platform Services cumulative cost comparison ({units})',\n        id: 'GCPCostTrendTitle',\n    },\n    GCPDailyCostTrendTitle: {\n        defaultMessage: 'Google Cloud Platform Services daily cost comparison ({units})',\n        description: 'Google Cloud Platform Services daily cost comparison ({units})',\n        id: 'GCPDailyCostTrendTitle',\n    },\n    GCPDesc: {\n        defaultMessage: 'Raw cost from Google Cloud Platform infrastructure.',\n        description: 'Raw cost from Google Cloud Platform infrastructure.',\n        id: 'GCPDesc',\n    },\n    GCPDetailsTableAriaLabel: {\n        defaultMessage: 'Google Cloud Platform details table',\n        description: 'Google Cloud Platform details table',\n        id: 'GCPDetailsTable',\n    },\n    GCPDetailsTitle: {\n        defaultMessage: 'Google Cloud Platform Details',\n        description: 'Google Cloud Platform Details',\n        id: 'GCPDetailsTitle',\n    },\n    GroupByAll: {\n        defaultMessage: '{value, select, ' +\n            'account {{count, plural, one {All Account} other {All Accounts}}} ' +\n            'cluster {{count, plural, one {All Cluster} other {All Clusters}}} ' +\n            'instance_type {{count, plural, one {All Instance type} other {All Instance types}}} ' +\n            'node {{count, plural, one {All Node} other {All Node}}} ' +\n            'org_unit_id {{count, plural, one {All Organizational unit} other {All Organizational units}}} ' +\n            'project {{count, plural, one {All Project} other {All Projects}}} ' +\n            'region {{count, plural, one {All Region} other {All Regions}}} ' +\n            'resource_location {{count, plural, one {All Region} other {All Regions}}} ' +\n            'service {{count, plural, one {All Service} other {All Services}}} ' +\n            'service_name {{count, plural, one {All Service} other {All Services}}} ' +\n            'subscription_guid {{count, plural, one {All Account} other {All Accounts}}} ' +\n            'tag {{count, plural, one {All Tag} other {All Tags}}} ' +\n            'other {}}',\n        description: 'All group by value',\n        id: 'GroupByAll',\n    },\n    GroupByLabel: {\n        defaultMessage: 'Group by',\n        description: 'group by label',\n        id: 'GroupByLabel',\n    },\n    GroupByTop: {\n        defaultMessage: '{value, select, ' +\n            'account {{count, plural, one {Top account} other {Top accounts}}} ' +\n            'cluster {{count, plural, one {Top cluster} other {Top clusters}}} ' +\n            'instance_type {{count, plural, one {Top instance type} other {Top instance types}}} ' +\n            'node {{count, plural, one {Top node} other {Top node}}} ' +\n            'org_unit_id {{count, plural, one {Top organizational unit} other {Top organizational units}}} ' +\n            'project {{count, plural, one {Top project} other {Top projects}}} ' +\n            'region {{count, plural, one {Top region} other {Top regions}}} ' +\n            'resource_location {{count, plural, one {Top region} other {Top regions}}} ' +\n            'service {{count, plural, one {Top service} other {Top services}}} ' +\n            'service_name {{count, plural, one {Top service} other {Top services}}} ' +\n            'subscription_guid {{count, plural, one {Top account} other {Top accounts}}} ' +\n            'tag {{count, plural, one {Top tag} other {Top tags}}} ' +\n            'other {}}',\n        description: 'Top group by value',\n        id: 'GroupByTop',\n    },\n    GroupByValueNames: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {Account names} ' +\n            'cluster {Cluster names} ' +\n            'instance_type {Instance type names} ' +\n            'node {Node names} ' +\n            'org_unit_id {Organizational unit names} ' +\n            'project {Project names} ' +\n            'region {Region names} ' +\n            'resource_location {Region names} ' +\n            'service {Service names} ' +\n            'service_name {Service names} ' +\n            'subscription_guid {Account names} ' +\n            'tag {Tag names} ' +\n            'other {}}',\n        description: 'Selected items for export',\n        id: 'GroupByValueNames',\n    },\n    GroupByValues: {\n        defaultMessage: '{value, select, ' +\n            'account {{count, plural, one {account} other {accounts}}} ' +\n            'cluster {{count, plural, one {cluster} other {clusters}}} ' +\n            'instance_type {{count, plural, one {instance type} other {instance types}}} ' +\n            'node {{count, plural, one {node} other {node}}} ' +\n            'org_unit_id {{count, plural, one {organizational unit} other {organizational units}}} ' +\n            'project {{count, plural, one {project} other {projects}}} ' +\n            'region {{count, plural, one {region} other {regions}}} ' +\n            'resource_location {{count, plural, one {region} other {regions}}} ' +\n            'service {{count, plural, one {service} other {services}}} ' +\n            'service_name {{count, plural, one {service} other {services}}} ' +\n            'subscription_guid {{count, plural, one {account} other {accounts}}} ' +\n            'tag {{count, plural, one {tag} other {tags}}} ' +\n            'other {}}',\n        description: 'Group by values',\n        id: 'GroupByValues',\n    },\n    GroupByValuesTitleCase: {\n        defaultMessage: '{value, select, ' +\n            'account {{count, plural, one {Account} other {Accounts}}} ' +\n            'cluster {{count, plural, one {Cluster} other {Clusters}}} ' +\n            'instance_type {{count, plural, one {Instance type} other {Instance types}}} ' +\n            'node {{count, plural, one {Node} other {Node}}} ' +\n            'org_unit_id {{count, plural, one {Organizational unit} other {Organizational units}}} ' +\n            'project {{count, plural, one {Project} other {Projects}}} ' +\n            'region {{count, plural, one {Region} other {Regions}}} ' +\n            'resource_location {{count, plural, one {Region} other {Regions}}} ' +\n            'service {{count, plural, one {Service} other {Services}}} ' +\n            'service_name {{count, plural, one {Service} other {Services}}} ' +\n            'subscription_guid {{count, plural, one {Account} other {Accounts}}} ' +\n            'tag {{count, plural, one {Tag} other {Tags}}} ' +\n            'other {}}',\n        description: 'Group by values',\n        id: 'GroupByValuesTitleCase',\n    },\n    HistoricalChartCostLabel: {\n        defaultMessage: 'Cost ({units})',\n        description: 'Cost ({units})',\n        id: 'HistoricalChartCostLabel',\n    },\n    HistoricalChartDayOfMonthLabel: {\n        defaultMessage: 'Day of Month',\n        description: 'Day of Month',\n        id: 'HistoricalChartDayOfMonthLabel',\n    },\n    HistoricalChartTitle: {\n        defaultMessage: '{value, select, ' +\n            'cost {Cost comparison} ' +\n            'cpu {CPU usage, request, and limit comparison} ' +\n            'instance_type {Compute usage comparison} ' +\n            'memory {Memory usage, request, and limit comparison} ' +\n            'modal {{name} daily usage comparison} ' +\n            'storage {Storage usage comparison} ' +\n            'other {}}',\n        description: 'historical chart titles',\n        id: 'HistoricalChartTitle',\n    },\n    HistoricalChartUsageLabel: {\n        defaultMessage: '{value, select, instance_type {hrs} storage {gb-mo} other {}}',\n        description: 'historical chart usage labels',\n        id: 'HistoricalChartUsageLabel',\n    },\n    IBM: {\n        defaultMessage: 'IBM Cloud',\n        description: 'IBM Cloud',\n        id: 'IBM',\n    },\n    IBMComputeTitle: {\n        defaultMessage: 'Compute instances usage',\n        description: 'Compute instances usage',\n        id: 'IBMComputeTitle',\n    },\n    IBMCostTitle: {\n        defaultMessage: 'IBM Cloud Services cost',\n        description: 'IBM Cloud Services cost',\n        id: 'IBMCostTitle',\n    },\n    IBMCostTrendTitle: {\n        defaultMessage: 'IBM Cloud Services cumulative cost comparison ({units})',\n        description: 'IBM Cloud Services cumulative cost comparison ({units})',\n        id: 'IBMCostTrendTitle',\n    },\n    IBMDailyCostTrendTitle: {\n        defaultMessage: 'IBM Cloud Services daily cost comparison ({units})',\n        description: 'IBM Cloud Services daily cost comparison ({units})',\n        id: 'IBMDailyCostTrendTitle',\n    },\n    IBMDesc: {\n        defaultMessage: 'Raw cost from IBM Cloud infrastructure.',\n        description: 'Raw cost from IBM Cloud infrastructure.',\n        id: 'IBMDesc',\n    },\n    IBMDetailsTableAriaLabel: {\n        defaultMessage: 'IBM Cloud details table',\n        description: 'IBM Cloud details table',\n        id: 'IBMDetailsTable',\n    },\n    IBMDetailsTitle: {\n        defaultMessage: 'IBM Cloud Details',\n        description: 'IBM details title',\n        id: 'IBMDetailsTitle',\n    },\n    InactiveSourcesGoTo: {\n        defaultMessage: 'Go to Sources for more information',\n        description: 'Go to Sources for more information',\n        id: 'InactiveSourcesGoTo',\n    },\n    InactiveSourcesTitle: {\n        defaultMessage: 'A problem was detected with {value}',\n        description: 'A problem was detected with {value}',\n        id: 'InactiveSourcesGoTitle',\n    },\n    InactiveSourcesTitleMultiplier: {\n        defaultMessage: 'A problem was detected with the following sources',\n        description: 'A problem was detected with the following sources',\n        id: 'InactiveSourcesTitleMultiplier',\n    },\n    Infrastructure: {\n        defaultMessage: 'Infrastructure',\n        description: 'Infrastructure',\n        id: 'Infrastructure',\n    },\n    LearnMore: {\n        defaultMessage: 'Learn more',\n        description: 'Learn more',\n        id: 'LearnMore',\n    },\n    LoadingStateDesc: {\n        defaultMessage: 'Searching for your sources. Do not refresh the browser',\n        description: 'Searching for your sources. Do not refresh the browser',\n        id: 'LoadingStateDesc',\n    },\n    LoadingStateTitle: {\n        defaultMessage: 'Looking for sources...',\n        description: 'Looking for sources',\n        id: 'LoadingStateTitle',\n    },\n    MaintenanceEmptyStateDesc: {\n        defaultMessage: 'Cost Management is currently undergoing scheduled maintenance and will be unavailable from 13:00 - 19:00 UTC (09:00 AM - 03:00 PM EDT).',\n        description: 'Cost Management is currently undergoing scheduled maintenance',\n        id: 'MaintenanceEmptyStateDesc',\n    },\n    MaintenanceEmptyStateInfo: {\n        defaultMessage: 'For more information visit {url}',\n        description: 'more information url',\n        id: 'MaintenanceEmptyStateInfo',\n    },\n    MaintenanceEmptyStateThanks: {\n        defaultMessage: 'We will be back soon. Thank you for your patience!',\n        description: 'thanks you for your patience',\n        id: 'MaintenanceEmptyStateThanks',\n    },\n    ManageColumnsAriaLabel: {\n        defaultMessage: 'Table column management',\n        description: 'Table column management',\n        id: 'ManageColumnsAriaLabel',\n    },\n    ManageColumnsDesc: {\n        defaultMessage: 'Selected categories will be displayed in the table',\n        description: 'Selected categories will be displayed in the table',\n        id: 'ManageColumnsDesc',\n    },\n    ManageColumnsTitle: {\n        defaultMessage: 'Manage columns',\n        description: 'Manage columns',\n        id: 'ManageColumnsTitle',\n    },\n    MarkupDescription: {\n        defaultMessage: 'The portion of cost calculated by applying markup or discount to infrastructure raw cost in the cost management application',\n        description: 'The portion of cost calculated by applying markup or discount to infrastructure raw cost in the cost management application',\n        id: 'MarkupDescription',\n    },\n    MarkupOrDiscount: {\n        defaultMessage: 'Markup or Discount',\n        description: 'Markup or Discount',\n        id: 'MarkupOrDiscount',\n    },\n    MarkupOrDiscountDesc: {\n        defaultMessage: 'This Percentage is applied to raw cost calculations by multiplying the cost with this percentage. Costs calculated from price list rates will not be effected.',\n        description: 'This Percentage is applied to raw cost calculations by multiplying the cost with this percentage. Costs calculated from price list rates will not be effected.',\n        id: 'MarkupOrDiscountDesc',\n    },\n    MarkupOrDiscountModalDesc: {\n        defaultMessage: 'Use markup/discount to manipulate how the raw costs are being calculated for your sources. Note, costs calculated from price list rates will not be affected by this.',\n        description: 'Use markup/discount to manipulate how the raw costs are being calculated for your sources. Note, costs calculated from price list rates will not be affected by this.',\n        id: 'MarkupOrDiscountModalDesc',\n    },\n    MarkupPlus: {\n        defaultMessage: 'Markup (+)',\n        description: 'Markup (+)',\n        id: 'MarkupPlus',\n    },\n    MarkupTitle: {\n        defaultMessage: 'Markup',\n        description: 'Markup',\n        id: 'MarkupTitle',\n    },\n    Measurement: {\n        defaultMessage: 'Measurement',\n        description: 'Measurement',\n        id: 'Measurement',\n    },\n    MeasurementPlaceholder: {\n        defaultMessage: 'Filter by measurements',\n        description: 'Filter by measurements',\n        id: 'MeasurementPlaceholder',\n    },\n    MeasurementValues: {\n        defaultMessage: '{value, select, ' +\n            'count {{count, plural, one {Count} other {Count ({units})}}} ' +\n            'request {{count, plural, one {Request} other {Request ({units})}}} ' +\n            'usage {{count, plural, one {Usage} other {Usage ({units})}}} ' +\n            'other {}}',\n        description: 'Measurement values',\n        id: 'MeasurementValues',\n    },\n    MemoryTitle: {\n        defaultMessage: 'Memory',\n        description: 'Memory',\n        id: 'MemoryTitle',\n    },\n    Metric: {\n        defaultMessage: 'Metric',\n        description: 'Metric',\n        id: 'Metric',\n    },\n    MetricPlaceholder: {\n        defaultMessage: 'Filter by metrics',\n        description: 'Filter by metrics',\n        id: 'MetricPlaceholder',\n    },\n    MetricValues: {\n        defaultMessage: '{value, select, ' +\n            'cpu {CPU} ' +\n            'cluster {Cluster} ' +\n            'memory {Memory} ' +\n            'node {Node} ' +\n            'persistent_volume_claims {Persistent volume claims} ' +\n            'storage {Storage} ' +\n            'other {}}',\n        description: 'Metric values',\n        id: 'MetricValues',\n    },\n    MonthOverMonthChange: {\n        defaultMessage: 'Month over month change',\n        description: 'Month over month change',\n        id: 'MonthOverMonthChange',\n    },\n    Names: {\n        defaultMessage: '{count, plural, one {Name} other {Names}}',\n        description: 'Name plural or singular',\n        id: 'Name',\n    },\n    Next: {\n        defaultMessage: 'next',\n        description: 'next',\n        id: 'Next',\n    },\n    No: {\n        defaultMessage: 'no',\n        description: 'no',\n        id: 'No',\n    },\n    NoDataForDate: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {No data available for Jan {startDate}} other {No data available for Jan {startDate}-{endDate}}}} ' +\n            '1 {{count, plural, one {No data available for Feb {startDate}} other {No data available for Feb {startDate}-{endDate}}}} ' +\n            '2 {{count, plural, one {No data available for Mar {startDate}} other {No data available for Mar {startDate}-{endDate}}}} ' +\n            '3 {{count, plural, one {No data available for Apr {startDate}} other {No data available for Apr {startDate}-{endDate}}}} ' +\n            '4 {{count, plural, one {No data available for May {startDate}} other {No data available for May {startDate}-{endDate}}}} ' +\n            '5 {{count, plural, one {No data available for Jun {startDate}} other {No data available for Jun {startDate}-{endDate}}}} ' +\n            '6 {{count, plural, one {No data available for Jul {startDate}} other {No data available for Jul {startDate}-{endDate}}}} ' +\n            '7 {{count, plural, one {No data available for Aug {startDate}} other {No data available for Aug {startDate}-{endDate}}}} ' +\n            '8 {{count, plural, one {No data available for Sep {startDate}} other {No data available for Sep {startDate}-{endDate}}}} ' +\n            '9 {{count, plural, one {No data available for Oct {startDate}} other {No data available for Oct {startDate}-{endDate}}}} ' +\n            '10 {{count, plural, one {No data available for Nov {startDate}} other {No data available for Nov {startDate}-{endDate}}}} ' +\n            '11 {{count, plural, one {No data available for Dec {startDate}} other {No data available for Dec {startDate}-{endDate}}}} ' +\n            'other {}}',\n        description: 'No data available for date range',\n        id: 'NoDataForDate',\n    },\n    NoDataStateDesc: {\n        defaultMessage: 'We have detected a source, but we are not done processing the incoming data. The time to process could take up to 24 hours. Try refreshing the page at a later time.',\n        description: 'still processing request, 24 hour message',\n        id: 'NoDataStateDesc',\n    },\n    NoDataStateRefresh: {\n        defaultMessage: 'Refresh this page',\n        description: 'Refresh this page',\n        id: 'NoDataStateRefresh',\n    },\n    NoDataStateTitle: {\n        defaultMessage: 'Still processing the data',\n        description: 'Still processing the data',\n        id: 'NoDataStateTitle',\n    },\n    NoProvidersStateAwsDesc: {\n        defaultMessage: 'Add an Amazon Web Services account to see a total cost breakdown of your spend by accounts, organizational units, services, regions, or tags.',\n        description: 'Add an Amazon Web Services account to see a total cost breakdown of your spend by accounts, organizational units, services, regions, or tags.',\n        id: 'NoProvidersStateAwsDesc',\n    },\n    NoProvidersStateAwsTitle: {\n        defaultMessage: 'Track your Amazon Web Services spending!',\n        description: 'Track your Amazon Web Services spending!',\n        id: 'NoProvidersStateAwsTitle',\n    },\n    NoProvidersStateAzureDesc: {\n        defaultMessage: 'Add a Microsoft Azure account to see a total cost breakdown of your spend by accounts, services, regions, or tags.',\n        description: 'Add a Microsoft Azure account to see a total cost breakdown of your spend by accounts, services, regions, or tags.',\n        id: 'NoProvidersStateAzureDesc',\n    },\n    NoProvidersStateAzureTitle: {\n        defaultMessage: 'Track your Microsoft Azure spending!',\n        description: 'Track your Microsoft Azure spending!',\n        id: 'NoProvidersStateAzureTitle',\n    },\n    NoProvidersStateGcpDesc: {\n        defaultMessage: 'Add a Google Cloud Platform account to see a total cost breakdown of your spend by accounts, services, regions, or tags.',\n        description: 'Add a Google Cloud Platform account to see a total cost breakdown of your spend by accounts, services, regions, or tags.',\n        id: 'NoProvidersStateGcpDesc',\n    },\n    NoProvidersStateGcpTitle: {\n        defaultMessage: 'Track your Google Cloud Platform spending!',\n        description: 'Track your Google Cloud Platform spending!',\n        id: 'NoProvidersStateGcpTitle',\n    },\n    NoProvidersStateGetStarted: {\n        defaultMessage: 'Get started with Sources',\n        description: 'Get started with Sources',\n        id: 'NoProvidersStateGetStarted',\n    },\n    NoProvidersStateIbmDesc: {\n        defaultMessage: 'Add an IBM Cloud account to see a total cost breakdown of your spend by accounts, services, regions, or tags.',\n        description: 'Add an IBM Cloud account to see a total cost breakdown of your spend by accounts, services, regions, or tags.',\n        id: 'NoProvidersStateIbmDesc',\n    },\n    NoProvidersStateIbmTitle: {\n        defaultMessage: 'Track your IBM Cloud spending!',\n        description: 'Track your IBM Cloud spending!',\n        id: 'NoProvidersStateIbmTitle',\n    },\n    NoProvidersStateOcpAddSources: {\n        defaultMessage: 'Add an OpenShift cluster to Cost Management',\n        description: 'Add an OpenShift cluster to Cost Management',\n        id: 'NoProvidersStateOcpAddSources',\n    },\n    NoProvidersStateOcpDesc: {\n        defaultMessage: 'Add an OpenShift Container Platform cluster to see a total cost breakdown of your pods by cluster, node, project, or labels.',\n        description: 'Add an OpenShift Container Platform cluster to see a total cost breakdown of your pods by cluster, node, project, or labels.',\n        id: 'NoProvidersStateOcpDesc',\n    },\n    NoProvidersStateOcpTitle: {\n        defaultMessage: 'Track your OpenShift spending!',\n        description: 'Track your OpenShift spending!',\n        id: 'NoProvidersStateOcpTitle',\n    },\n    NoProvidersStateOverviewDesc: {\n        defaultMessage: 'Add a source, like an OpenShift Container Platform cluster or a cloud services account, to see a total cost breakdown as well as usage information like instance counts and storage.',\n        description: 'Add a source, like an OpenShift Container Platform cluster or a cloud services account, to see a total cost breakdown as well as usage information like instance counts and storage.',\n        id: 'NoProvidersStateOverviewDesc',\n    },\n    NoProvidersStateOverviewTitle: {\n        defaultMessage: 'Track your spending!',\n        description: 'Track your spending!',\n        id: 'NoProvidersStateOverviewTitle',\n    },\n    NotAuthorizedStateAws: {\n        defaultMessage: 'Amazon Web Services in Cost Management',\n        description: 'Amazon Web Services in Cost Management',\n        id: 'NoAuthorizedStateAws',\n    },\n    NotAuthorizedStateAzure: {\n        defaultMessage: 'Microsoft Azure in Cost Management',\n        description: 'Microsoft Azure in Cost Management',\n        id: 'NotAuthorizedStateAzure',\n    },\n    NotAuthorizedStateCostModels: {\n        defaultMessage: 'Cost Models in Cost Management',\n        description: 'Cost Models in Cost Management',\n        id: 'NotAuthorizedStateCostModels',\n    },\n    NotAuthorizedStateGcp: {\n        defaultMessage: 'Google Cloud Platform in Cost Management',\n        description: 'Google Cloud Platform in Cost Management',\n        id: 'NotAuthorizedStateGcp',\n    },\n    NotAuthorizedStateIbm: {\n        defaultMessage: 'IBM Cloud in Cost Management',\n        description: 'IBM Cloud in Cost Management',\n        id: 'NotAuthorizedStateIbm',\n    },\n    NotAuthorizedStateOcp: {\n        defaultMessage: 'OpenShift in Cost Management',\n        description: 'OpenShift in Cost Management',\n        id: 'NotAuthorizedStateOcp',\n    },\n    OCPCPUUsageAndRequests: {\n        defaultMessage: 'CPU usage and requests',\n        description: 'CPU usage and requests',\n        id: 'OCPCPUUsageAndRequests',\n    },\n    OCPCloudDashboardComputeTitle: {\n        defaultMessage: 'Compute services usage',\n        description: 'Compute services usage',\n        id: 'OCPCloudDashboardComputeTitle',\n    },\n    OCPCloudDashboardCostTitle: {\n        defaultMessage: 'All cloud filtered by OpenShift cost',\n        description: 'All cloud filtered by OpenShift cost',\n        id: 'OCPCloudDashboardCostTitle',\n    },\n    OCPCloudDashboardCostTrendTitle: {\n        defaultMessage: 'All cloud filtered by OpenShift cumulative cost comparison ({units})',\n        description: 'All cloud filtered by OpenShift cumulative cost comparison ({units})',\n        id: 'OCPCloudDashboardCostTrendTitle',\n    },\n    OCPCloudDashboardDailyCostTrendTitle: {\n        defaultMessage: 'All cloud filtered by OpenShift daily cost comparison ({units})',\n        description: 'All cloud filtered by OpenShift daily cost comparison ({units})',\n        id: 'OCPCloudDashboardDailyCostTrendTitle',\n    },\n    OCPDailyUsageAndRequestComparison: {\n        defaultMessage: 'Daily usage and requests comparison ({units})',\n        description: 'Daily usage and requests comparison',\n        id: 'OCPDailyUsageAndRequestComparison',\n    },\n    OCPDashboardCPUUsageAndRequests: {\n        defaultMessage: 'OpenShift CPU usage and requests',\n        description: 'OpenShift CPU usage and requests',\n        id: 'OCPDashboardCPUUsageAndRequests',\n    },\n    OCPDashboardCostTitle: {\n        defaultMessage: 'All OpenShift cost',\n        description: 'All OpenShift cost',\n        id: 'OCPDashboardCostTitle',\n    },\n    OCPDashboardCostTrendTitle: {\n        defaultMessage: 'All OpenShift cumulative cost comparison ({units})',\n        description: 'All OpenShift cumulative cost comparison in units',\n        id: 'OCPDashboardCostTrendTitle',\n    },\n    OCPDashboardDailyCostTitle: {\n        defaultMessage: 'All OpenShift daily cost comparison ({units})',\n        description: 'All OpenShift daily cost comparison in units',\n        id: 'OCPDashboardDailyCostTitle',\n    },\n    OCPDashboardMemoryUsageAndRequests: {\n        defaultMessage: 'OpenShift Memory usage and requests',\n        description: 'OpenShift Memory usage and requests',\n        id: 'OCPDashboardMemoryUsageAndRequests',\n    },\n    OCPDashboardVolumeUsageAndRequests: {\n        defaultMessage: 'OpenShift Volume usage and requests',\n        description: 'OpenShift Volume usage and requests',\n        id: 'OCPUsageAndRequests',\n    },\n    OCPDetailsInfrastructureCost: {\n        defaultMessage: 'Infrastructure cost',\n        description: 'Infrastructure cost',\n        id: 'OCPDetailsInfrastructureCost',\n    },\n    OCPDetailsInfrastructureCostDesc: {\n        defaultMessage: 'The cost based on raw usage data from the underlying infrastructure.',\n        description: 'The cost based on raw usage data from the underlying infrastructure.',\n        id: 'OCPDetailsInfrastructureCostDesc',\n    },\n    OCPDetailsSupplementaryCost: {\n        defaultMessage: 'Infrastructure cost',\n        description: 'Infrastructure cost',\n        id: 'OCPDetailsSupplementaryCost',\n    },\n    OCPDetailsSupplementaryCostDesc: {\n        defaultMessage: 'All costs not directly attributed to the infrastructure. These costs are determined by applying a price list within a cost model to OpenShift cluster metrics.',\n        description: 'All costs not directly attributed to the infrastructure. These costs are determined by applying a price list within a cost model to OpenShift cluster metrics.',\n        id: 'OCPDetailsSupplementaryCostDesc',\n    },\n    OCPDetailsTableAriaLabel: {\n        defaultMessage: 'OpenShift details table',\n        description: 'OpenShift details table',\n        id: 'OCPDetailsTable',\n    },\n    OCPDetailsTitle: {\n        defaultMessage: 'OpenShift details',\n        description: 'OpenShift details title',\n        id: 'OCPDetailsTitle',\n    },\n    OCPInfrastructureCostTitle: {\n        defaultMessage: 'OpenShift infrastructure cost',\n        description: 'OpenShift infrastructure cost',\n        id: 'OCPInfrastructureCostTitle',\n    },\n    OCPInfrastructureCostTrendTitle: {\n        defaultMessage: 'OpenShift cumulative infrastructure cost comparison ({units})',\n        description: 'OpenShift cumulative infrastructure cost comparison with units',\n        id: 'OCPInfrastructureCostTrendTitle',\n    },\n    OCPInfrastructureDailyCostTrendTitle: {\n        defaultMessage: 'OpenShift daily infrastructure cost comparison ({units})',\n        description: 'OpenShift daily infrastructure cost comparison with units',\n        id: 'OCPInfrastructureDailyCostTrendTitle',\n    },\n    OCPMemoryUsageAndRequests: {\n        defaultMessage: 'Memory usage and requests',\n        description: 'Memory usage and requests',\n        id: 'OCPMemoryUsageAndRequests',\n    },\n    OCPSupplementaryCostTitle: {\n        defaultMessage: 'OpenShift supplementary cost',\n        description: 'OpenShift supplementary cost',\n        id: 'OCPSupplementaryCostTitle',\n    },\n    OCPSupplementaryCostTrendTitle: {\n        defaultMessage: 'OpenShift cumulative supplementary cost comparison ({units})',\n        description: 'OpenShift cumulative supplementary cost comparison with units',\n        id: 'OCPSupplementaryCostTrendTitle',\n    },\n    OCPSupplementaryDailyCostTrendTitle: {\n        defaultMessage: 'OpenShift daily supplementary cost comparison ({units})',\n        description: 'OpenShift daily supplementary cost comparison with units',\n        id: 'OCPSupplementaryDailyCostTrendTitle',\n    },\n    OCPUsageCostTitle: {\n        defaultMessage: 'OpenShift usage cost',\n        description: 'OpenShift usage cost',\n        id: 'OCPUsageCostTitle',\n    },\n    OCPUsageDashboardCPUTitle: {\n        defaultMessage: 'OpenShift CPU usage and requests',\n        description: 'OpenShift CPU usage and requests',\n        id: 'OCPUsageDashboardCPUTitle',\n    },\n    OCPUsageDashboardCostTrendTitle: {\n        defaultMessage: 'Metering cumulative cost comparison ({units})',\n        description: 'Metering cumulative cost comparison with units',\n        id: 'OCPUsageDashboardCostTrendTitle',\n    },\n    OCPVolumeUsageAndRequests: {\n        defaultMessage: 'Volume usage and requests',\n        description: 'Volume usage and requests',\n        id: 'OCPVolumeUsageAndRequests',\n    },\n    OpenShift: {\n        defaultMessage: 'OpenShift',\n        description: 'OpenShift',\n        id: 'OpenShift',\n    },\n    OpenShiftCloudInfrastructure: {\n        defaultMessage: 'OpenShift cloud infrastructure',\n        description: 'OpenShift cloud infrastructure',\n        id: 'OpenShiftCloudInfrastructure',\n    },\n    OpenShiftCloudInfrastructureDesc: {\n        defaultMessage: 'Infrastructure cost attributed to OpenShift Container Platform, based on a subset of cloud cost data.',\n        description: 'Infrastructure cost attributed to OpenShift Container Platform, based on a subset of cloud cost data.',\n        id: 'OpenShiftCloudInfrastructureDesc',\n    },\n    OpenShiftDesc: {\n        defaultMessage: 'Total cost for OpenShift Container Platform, comprising the infrastructure cost and cost calculated from metrics.',\n        description: 'Total cost for OpenShift Container Platform, comprising the infrastructure cost and cost calculated from metrics.',\n        id: 'OpenShiftDesc',\n    },\n    OverviewInfoArialLabel: {\n        defaultMessage: 'A description of perspectives',\n        description: 'A description of perspectives',\n        id: 'OverviewInfoArialLabel',\n    },\n    OverviewTitle: {\n        defaultMessage: 'Cost Management Overview',\n        description: 'Cost Management Overview',\n        id: 'OverviewTitle',\n    },\n    Percent: {\n        defaultMessage: '{value} %',\n        description: 'percent value',\n        id: 'Percent',\n    },\n    PercentOfCost: {\n        defaultMessage: '{value} % of cost',\n        description: '{value} % of cost',\n        id: 'PercentOfCost',\n    },\n    PercentTotalCost: {\n        defaultMessage: '{value} {units} ({percent} %)',\n        description: '{value} {units} ({percent} %)',\n        id: 'PercentTotalCost',\n    },\n    Perspective: {\n        defaultMessage: 'Perspective',\n        description: 'Perspective dropdown label',\n        id: 'Perspective',\n    },\n    PerspectiveValues: {\n        defaultMessage: '{value, select, ' +\n            'aws {Amazon Web Services} ' +\n            'aws_ocp {Amazon Web Services filtered by OpenShift} ' +\n            'azure {Microsoft Azure} ' +\n            'azure_ocp {Microsoft Azure filtered by OpenShift} ' +\n            'gcp {Google Cloud Platform} ' +\n            'gcp_ocp {Google Cloud Platform filtered by OpenShift} ' +\n            'ibm {IBM Cloud} ' +\n            'ocp {All OpenShift} ' +\n            'ocp_cloud {All cloud filtered by OpenShift} ' +\n            'other {}}',\n        description: 'Perspective values',\n        id: 'PerspectiveValues',\n    },\n    PriceList: {\n        defaultMessage: 'Price list',\n        description: 'Price list',\n        id: 'PriceList',\n    },\n    PriceListAddRate: {\n        defaultMessage: 'Add rate',\n        description: 'Add rate',\n        id: 'PriceListAddRate',\n    },\n    PriceListDeleteRate: {\n        defaultMessage: 'Delete rate',\n        description: 'Delete rate',\n        id: 'PriceListDeleteRate',\n    },\n    PriceListDeleteRateDesc: {\n        defaultMessage: '{count, plural, one {This action will remove {metric} rate from {costModel}} other {This action will remove {metric} rate from {costModel}, which is assigned to the following sources:}}',\n        description: 'This action will remove {metric} rate from {costModel}, which is assigned to the following sources:',\n        id: 'PriceListDesc',\n    },\n    PriceListDuplicate: {\n        defaultMessage: 'This tag key is already in use',\n        description: 'This tag key is already in use',\n        id: 'PriceListDuplicate',\n    },\n    PriceListEditRate: {\n        defaultMessage: 'Edit rate',\n        description: 'Edit rate',\n        id: 'PriceListEditRate',\n    },\n    PriceListEmptyRate: {\n        defaultMessage: 'No rates are set',\n        description: 'No rates are set',\n        id: 'PriceListEmptyRate',\n    },\n    PriceListEmptyRateDesc: {\n        defaultMessage: 'To add rates to the price list, click on the \"Add\" rate button above.',\n        description: 'To add rates to the price list, click on the \"Add\" rate button above.',\n        id: 'PriceListEmptyRateDesc',\n    },\n    PriceListNumberRate: {\n        defaultMessage: 'Rate must be a number',\n        description: 'Rate must be a number',\n        id: 'PriceListNumberRate',\n    },\n    PriceListPosNumberRate: {\n        defaultMessage: 'Rate must be a positive number',\n        description: 'Rate must be a positive number',\n        id: 'PriceListPosNumberRate',\n    },\n    Rate: {\n        defaultMessage: 'Rate',\n        description: 'Rate',\n        id: 'Rate',\n    },\n    RawCostDescription: {\n        defaultMessage: 'The costs reported by a cloud provider without any cost model calculations applied.',\n        description: 'The costs reported by a cloud provider without any cost model calculations applied.',\n        id: 'RawCostDescription',\n    },\n    RawCostTitle: {\n        defaultMessage: 'Raw cost',\n        description: 'Raw cost',\n        id: 'RawCostTitle',\n    },\n    RbacErrorDescription: {\n        defaultMessage: 'There was a problem receiving user permissions. Refreshing this page may fix it. If it does not, please contact your admin.',\n        description: 'rbac error description',\n        id: 'RbacErrorDescription',\n    },\n    RbacErrorTitle: {\n        defaultMessage: 'Failed to get RBAC information',\n        description: 'rbac error title',\n        id: 'RbacErrorTitle',\n    },\n    RedHatStatusUrl: {\n        defaultMessage: 'https://status.redhat.com',\n        description: 'Red Hat status url for cloud services',\n        id: 'RedHatStatusUrl',\n    },\n    Requests: {\n        defaultMessage: 'Requests',\n        description: 'Requests',\n        id: 'Requests',\n    },\n    Save: {\n        defaultMessage: 'Save',\n        description: 'Save',\n        id: 'Save',\n    },\n    Select: {\n        defaultMessage: 'Select...',\n        description: 'Select...',\n        id: 'Select',\n    },\n    SelectAll: {\n        defaultMessage: 'Select all',\n        description: 'Select all',\n        id: 'SelectAll',\n    },\n    Selected: {\n        defaultMessage: '{value} selected',\n        description: '{value} selected',\n        id: 'Selected',\n    },\n    SinceDate: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {January {startDate}} other {January {startDate}-{endDate}}}} ' +\n            '1 {{count, plural, one {February {startDate}} other {February {startDate}-{endDate}}}} ' +\n            '2 {{count, plural, one {March {startDate}} other {March {startDate}-{endDate}}}} ' +\n            '3 {{count, plural, one {April {startDate}} other {April {startDate}-{endDate}}}} ' +\n            '4 {{count, plural, one {May {startDate}} other {May {startDate}-{endDate}}}} ' +\n            '5 {{count, plural, one {June {startDate}} other {June {startDate}-{endDate}}}} ' +\n            '6 {{count, plural, one {July {startDate}} other {July {startDate}-{endDate}}}} ' +\n            '7 {{count, plural, one {August {startDate}} other {August {startDate}-{endDate}}}} ' +\n            '8 {{count, plural, one {September {startDate}} other {September {startDate}-{endDate}}}} ' +\n            '9 {{count, plural, one {October {startDate}} other {October {startDate}-{endDate}}}} ' +\n            '10 {{count, plural, one {November {startDate}} other {November {startDate}-{endDate}}}} ' +\n            '11 {{count, plural, one {December {startDate}} other {December {startDate}-{endDate}}}} ' +\n            'other {}}',\n        description: 'SinceDate',\n        id: 'SinceDate',\n    },\n    Sources: {\n        defaultMessage: 'Sources',\n        description: 'Sources',\n        id: 'Sources',\n    },\n    Supplementary: {\n        defaultMessage: 'Supplementary',\n        description: 'Supplementary',\n        id: 'Supplementary',\n    },\n    TagHeadingKey: {\n        defaultMessage: 'Key',\n        description: 'Key',\n        id: 'TagHeadingKey',\n    },\n    TagHeadingTitle: {\n        defaultMessage: 'Tags ({value})',\n        description: 'Tags ({value})',\n        id: 'TagHeadingTitle',\n    },\n    TagHeadingValue: {\n        defaultMessage: 'Value',\n        description: 'Value',\n        id: 'TagHeadingValue',\n    },\n    TagNames: {\n        defaultMessage: 'Tag names',\n        description: 'Tag Names',\n        id: 'TagNames',\n    },\n    ToolBarBulkSelectAll: {\n        defaultMessage: 'Select all ({value} items)',\n        description: 'Select all ({value} items)',\n        id: 'ToolBarBulkSelectAll',\n    },\n    ToolBarBulkSelectAriaDeselect: {\n        defaultMessage: 'Deselect all items',\n        description: 'Deselect all items',\n        id: 'ToolBarBulkSelectAriaDeselect',\n    },\n    ToolBarBulkSelectAriaSelect: {\n        defaultMessage: 'Select all items',\n        description: 'Select all items',\n        id: 'ToolBarBulkSelectAriaSelect',\n    },\n    ToolBarBulkSelectNone: {\n        defaultMessage: 'Select none (0 items)',\n        description: 'Select none (0 items)',\n        id: 'ToolBarBulkSelectNone',\n    },\n    ToolBarBulkSelectPage: {\n        defaultMessage: 'Select page ({value} items)',\n        description: 'Select page ({value} items)',\n        id: 'ToolBarBulkSelectPage',\n    },\n    ToolBarPriceListMeasurementPlaceHolder: {\n        defaultMessage: 'Filter by measurements',\n        description: 'Filter by measurements',\n        id: 'ToolBarPriceListMeasurementPlaceHolder',\n    },\n    ToolBarPriceListMetricPlaceHolder: {\n        defaultMessage: 'Filter by metrics',\n        description: 'Filter by metrics',\n        id: 'ToolBarPriceListMetricPlaceHolder',\n    },\n    UnitTooltips: {\n        defaultMessage: '{units, select, ' +\n            'core_hours {{value} core-hours} ' +\n            'gb {{value} GB} ' +\n            'gb_hours {{value} GB-hours} ' +\n            'gb_mo {{value} GB-month} ' +\n            'gibibyte_month {{value} GiB-month} ' +\n            'hour {{value} hours} ' +\n            'hrs {{value} hours} ' +\n            'vm_hours {{value} VM-hours} ' +\n            'other {{value}}}',\n        description: 'return value and unit based on key: \"units\"',\n        id: 'UnitTooltips',\n    },\n    Units: {\n        defaultMessage: '{units, select, ' +\n            'core_hours {core-hours} ' +\n            'gb {GB} ' +\n            'gb_hours {GB-hours} ' +\n            'gb_mo {GB-month} ' +\n            'gibibyte_month {GiB-month} ' +\n            'hour {hours} ' +\n            'hrs {hours} ' +\n            'vm_hours {VM-hours} ' +\n            'other {}}',\n        description: 'return the proper unit label based on key: \"units\"',\n        id: 'Units',\n    },\n    Usage: {\n        defaultMessage: 'Usage',\n        description: 'Usage',\n        id: 'Usage',\n    },\n    UsageCostDescription: {\n        defaultMessage: 'The portion of cost calculated by applying hourly and/or monthly price list rates to metrics.',\n        description: 'The portion of cost calculated by applying hourly and/or monthly price list rates to metrics.',\n        id: 'UsageCostDescription',\n    },\n    UsageCostTitle: {\n        defaultMessage: 'Usage cost',\n        description: 'Usage cost',\n        id: 'UsageCostTitle',\n    },\n    Various: {\n        defaultMessage: 'Various',\n        description: 'Various',\n        id: 'Various',\n    },\n    Yes: {\n        defaultMessage: 'Yes',\n        description: 'Yes',\n        id: 'Yes',\n    },\n});\n","export const parseApiError = error => {\n    if (error.response && error.response.data) {\n        if (error.response.data.Error) {\n            return error.response.data.Error;\n        }\n        if (error.response.data.errors) {\n            return error.response.data.errors.map(er => `${er.source}: ${er.detail}`).join(', ');\n        }\n    }\n    else if (error.message) {\n        return error.message;\n    }\n    return 'unknown';\n};\n","import React from 'react';\nexport function asyncComponent(loader) {\n    let LoadedComponent = null;\n    class Async extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                isLoading: !LoadedComponent,\n            };\n        }\n        componentDidMount() {\n            if (!this.state.isLoading) {\n                return;\n            }\n            loader().then(Comp => {\n                LoadedComponent = Comp.default ? Comp.default : Comp;\n                this.setState({ isLoading: false });\n            });\n        }\n        render() {\n            const { isLoading } = this.state;\n            return isLoading ? null : React.createElement(LoadedComponent, Object.assign({}, this.props));\n        }\n    }\n    return Async;\n}\n","import { asyncComponent } from './asyncComponent';\nexport default asyncComponent;\n","import asyncComponent from 'components/async/asyncComponent';\nimport React from 'react';\nconst InactiveSources = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/inactiveSources'));\nconst Permissions = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/async/permissionsComponent'));\n// Permissions component wrapper for AsyncComponent\nexport function permissionsComponent(AysncComponent) {\n    class PermissionsComponent extends React.Component {\n        render() {\n            return (React.createElement(Permissions, null,\n                React.createElement(InactiveSources, Object.assign({}, this.props)),\n                React.createElement(AysncComponent, Object.assign({}, this.props))));\n        }\n    }\n    return PermissionsComponent;\n}\n","import { asyncComponent } from 'components/async/asyncComponent/asyncComponent';\nimport { permissionsComponent } from 'components/async/permissionsComponent/permissionsComponent';\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nconst NotFound = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'pages/state/notFound'));\nconst AwsBreakdown = asyncComponent(() => import(/* webpackChunkName: \"aws\" */ 'pages/views/details/awsBreakdown'));\nconst AwsDetails = asyncComponent(() => import(/* webpackChunkName: \"aws\" */ 'pages/views/details/awsDetails'));\nconst AzureBreakdown = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ 'pages/views/details/azureBreakdown'));\nconst AzureDetails = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ 'pages/views/details/azureDetails'));\nconst Explorer = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ 'pages/views/explorer/explorer'));\nconst GcpBreakdown = asyncComponent(() => import(/* webpackChunkName: \"gcp\" */ 'pages/views/details/gcpBreakdown'));\nconst GcpDetails = asyncComponent(() => import(/* webpackChunkName: \"gcp\" */ 'pages/views/details/gcpDetails'));\nconst IbmBreakdown = asyncComponent(() => import(/* webpackChunkName: \"ibm\" */ 'pages/views/details/ibmBreakdown'));\nconst IbmDetails = asyncComponent(() => import(/* webpackChunkName: \"ibm\" */ 'pages/views/details/ibmDetails'));\nconst OcpDetails = asyncComponent(() => import(/* webpackChunkName: \"ocp\" */ 'pages/views/details/ocpDetails'));\nconst OcpBreakdown = asyncComponent(() => import(/* webpackChunkName: \"ocp\" */ 'pages/views/details/ocpBreakdown'));\nconst Overview = asyncComponent(() => import(/* webpackChunkName: \"overview\" */ 'pages/views/overview'));\nconst CostModelsDetails = asyncComponent(() => import(/* webpackChunkName: \"costModels\" */ 'pages/costModels/costModelsDetails'));\n// import(/* webpackChunkName: \"costModels\" */ './pages/costModels/costModelList')\nconst CostModel = asyncComponent(() => import(/* webpackChunkName: \"costModel\" */ 'pages/costModels/costModel'));\n// For syncing with permissions\nconst paths = {\n    awsDetails: '/aws',\n    awsDetailsBreakdown: '/aws/breakdown',\n    azureDetails: '/azure',\n    azureDetailsBreakdown: '/azure/breakdown',\n    costModels: '/cost-models',\n    explorer: '/explorer',\n    gcpDetails: '/gcp',\n    gcpDetailsBreakdown: '/gcp/breakdown',\n    ibmDetails: '/ibm',\n    ibmDetailsBreakdown: '/ibm/breakdown',\n    ocpDetails: '/ocp',\n    ocpDetailsBreakdown: '/ocp/breakdown',\n    overview: '/',\n};\nconst routes = [\n    {\n        path: paths.overview,\n        labelKey: 'cost_management_overview',\n        component: permissionsComponent(Overview),\n        exact: true,\n    },\n    {\n        path: paths.costModels,\n        labelKey: 'navigation.cost_models',\n        component: permissionsComponent(CostModelsDetails),\n        exact: true,\n    },\n    {\n        path: `${paths.costModels}/:uuid`,\n        labelKey: 'navigation.cost_models',\n        component: permissionsComponent(CostModel),\n        exact: true,\n    },\n    {\n        path: paths.awsDetails,\n        labelKey: 'navigation.aws_details',\n        component: permissionsComponent(AwsDetails),\n        exact: true,\n    },\n    {\n        path: paths.awsDetailsBreakdown,\n        labelKey: 'navigation.aws_details_breakdown',\n        component: permissionsComponent(AwsBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.azureDetails,\n        labelKey: 'navigation.azure_details',\n        component: permissionsComponent(AzureDetails),\n        exact: true,\n    },\n    {\n        path: paths.azureDetailsBreakdown,\n        labelKey: 'navigation.azure_details_breakdown',\n        component: permissionsComponent(AzureBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.explorer,\n        labelKey: 'navigation.explorer',\n        component: permissionsComponent(Explorer),\n        exact: true,\n    },\n    {\n        path: paths.gcpDetails,\n        labelKey: 'navigation.gcp_details',\n        component: permissionsComponent(GcpDetails),\n        exact: true,\n    },\n    {\n        path: paths.gcpDetailsBreakdown,\n        labelKey: 'navigation.gcp_details_breakdown',\n        component: permissionsComponent(GcpBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.ibmDetails,\n        labelKey: 'navigation.ibm_details',\n        component: permissionsComponent(IbmDetails),\n        exact: true,\n    },\n    {\n        path: paths.ibmDetailsBreakdown,\n        labelKey: 'navigation.ibm_details_breakdown',\n        component: permissionsComponent(IbmBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.ocpDetails,\n        labelKey: 'navigation.ocp_details',\n        component: permissionsComponent(OcpDetails),\n        exact: true,\n    },\n    {\n        path: paths.ocpDetailsBreakdown,\n        labelKey: 'navigation.ocp_details_breakdown',\n        component: permissionsComponent(OcpBreakdown),\n        exact: true,\n    },\n];\nconst Routes = () => (React.createElement(Switch, null,\n    routes.map(route => (React.createElement(Route, Object.assign({ key: route.path }, route)))),\n    React.createElement(Route, { component: NotFound })));\nexport { paths, Routes, routes };\n","export const awsCostOverviewStateKey = 'awsCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['region', 'service', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'service', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['region', 'account', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, regionSummaryWidget, serviceSummaryWidget } from './awsCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, accountSummaryWidget.id, serviceSummaryWidget.id, regionSummaryWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function awsCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { awsCostOverviewStateKey } from './awsCostOverviewCommon';\nexport const selectAwsCostOverviewState = (state) => state[awsCostOverviewStateKey];\nexport const selectWidgets = (state) => selectAwsCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsCostOverviewState(state).currentWidgets;\n","export const azureCostOverviewStateKey = 'azureCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'subscription_guid',\n        showWidgetOnGroupBy: ['resource_location', 'service_name', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'resource_location',\n        showWidgetOnGroupBy: ['subscription_guid', 'service_name', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service_name',\n        showWidgetOnGroupBy: ['resource_location', 'subscription_guid', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, regionSummaryWidget, serviceSummaryWidget, } from './azureCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, accountSummaryWidget.id, serviceSummaryWidget.id, regionSummaryWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function azureCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { azureCostOverviewStateKey } from './azureCostOverviewCommon';\nexport const selectAzureCostOverviewState = (state) => state[azureCostOverviewStateKey];\nexport const selectWidgets = (state) => selectAzureCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureCostOverviewState(state).currentWidgets;\n","export const gcpCostOverviewStateKey = 'gcpCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['project', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['account', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'project', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['project', 'region', 'account', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, projectSummaryWidget, regionSummaryWidget, serviceSummaryWidget, } from './gcpCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costWidget.id,\n        accountSummaryWidget.id,\n        projectSummaryWidget.id,\n        serviceSummaryWidget.id,\n        regionSummaryWidget.id,\n    ],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function gcpCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { gcpCostOverviewStateKey } from './gcpCostOverviewCommon';\nexport const selectGcpCostOverviewState = (state) => state[gcpCostOverviewStateKey];\nexport const selectWidgets = (state) => selectGcpCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpCostOverviewState(state).currentWidgets;\n","export const ibmCostOverviewStateKey = 'ibmCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['project', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['account', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'project', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['project', 'region', 'account', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, projectSummaryWidget, regionSummaryWidget, serviceSummaryWidget, } from './ibmCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costWidget.id,\n        accountSummaryWidget.id,\n        projectSummaryWidget.id,\n        serviceSummaryWidget.id,\n        regionSummaryWidget.id,\n    ],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function ibmCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { ibmCostOverviewStateKey } from './ibmCostOverviewCommon';\nexport const selectIbmCostOverviewState = (state) => state[ibmCostOverviewStateKey];\nexport const selectWidgets = (state) => selectIbmCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectIbmCostOverviewState(state).currentWidgets;\n","export const ocpCostOverviewStateKey = 'ocpCostOverview';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const clusterWidget = {\n    id: getId(),\n    cluster: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['project'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cluster\" /* cluster */,\n};\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const cpuUsageWidget = {\n    id: getId(),\n    usage: {\n        showCapacityOnGroupBy: ['cluster'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    type: \"cpuUsage\" /* cpuUsage */,\n};\nexport const memoryUsageWidget = {\n    id: getId(),\n    usage: {\n        showCapacityOnGroupBy: ['cluster'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    type: \"memoryUsage\" /* memoryUsage */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['cluster'],\n        usePlaceholder: true,\n    },\n    reportType: \"cost\" /* cost */,\n    reportPathsType: \"ocp\" /* ocp */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { clusterWidget, costWidget, cpuUsageWidget, memoryUsageWidget, projectSummaryWidget, } from './ocpCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, clusterWidget.id, projectSummaryWidget.id, cpuUsageWidget.id, memoryUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [clusterWidget.id]: clusterWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [cpuUsageWidget.id]: cpuUsageWidget,\n        [memoryUsageWidget.id]: memoryUsageWidget,\n    },\n};\nexport function ocpCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { ocpCostOverviewStateKey } from './ocpCostOverviewCommon';\nexport const selectOcpCostOverviewState = (state) => state[ocpCostOverviewStateKey];\nexport const selectWidgets = (state) => selectOcpCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpCostOverviewState(state).currentWidgets;\n","export const awsHistoricalDataStateKey = 'awsHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"usage\" /* usage */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"storage\" /* storage */,\n    type: \"usage\" /* usage */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './awsHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function awsHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { awsHistoricalDataStateKey } from './awsHistoricalDataCommon';\nexport const selectAwsHistoricalDataState = (state) => state[awsHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectAwsHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsHistoricalDataState(state).currentWidgets;\n","export const azureHistoricalDataStateKey = 'azureHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"usage\" /* usage */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"storage\" /* storage */,\n    type: \"usage\" /* usage */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './azureHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function azureHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { azureHistoricalDataStateKey } from './azureHistoricalDataCommon';\nexport const selectAzureHistoricalDataState = (state) => state[azureHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectAzureHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureHistoricalDataState(state).currentWidgets;\n","export const gcpHistoricalDataStateKey = 'gcpHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"trend\" /* trend */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"storage\" /* storage */,\n    type: \"trend\" /* trend */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './gcpHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function gcpHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { gcpHistoricalDataStateKey } from './gcpHistoricalDataCommon';\nexport const selectGcpHistoricalDataState = (state) => state[gcpHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectGcpHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpHistoricalDataState(state).currentWidgets;\n","export const ibmHistoricalDataStateKey = 'ibmHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"trend\" /* trend */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"storage\" /* storage */,\n    type: \"trend\" /* trend */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './ibmHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function ibmHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { ibmHistoricalDataStateKey } from './ibmHistoricalDataCommon';\nexport const selectIbmHistoricalDataState = (state) => state[ibmHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectIbmHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectIbmHistoricalDataState(state).currentWidgets;\n","export const ocpHistoricalDataStateKey = 'ocpHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const cpuUsageWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    type: \"usage\" /* usage */,\n};\nexport const memoryUsageWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    type: \"usage\" /* usage */,\n};\n","import { costWidget, cpuUsageWidget, memoryUsageWidget } from './ocpHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, cpuUsageWidget.id, memoryUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [cpuUsageWidget.id]: cpuUsageWidget,\n        [memoryUsageWidget.id]: memoryUsageWidget,\n    },\n};\nexport function ocpHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { ocpHistoricalDataStateKey } from './ocpHistoricalDataCommon';\nexport const selectOcpHistoricalDataState = (state) => state[ocpHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectOcpHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpHistoricalDataState(state).currentWidgets;\n","export const expirationMS = 30 * 60 * 1000; // 30 minutes\nexport function createMapStateToProps(mapStateToProps) {\n    return mapStateToProps;\n}\nexport function createMapDispatchToProps(mapDispatchToProps) {\n    return mapDispatchToProps;\n}\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { deleteCostModel as apiDeleteCostModel, fetchCostModels as apiGetCostModels, updateCostModel as apiUpdateCostModel, } from 'api/costModels';\nimport { intl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport { createAction, createAsyncAction } from 'typesafe-actions';\nexport const updateFilterToolbar = createAction('fetch/costModels/filter')();\nexport const selectCostModel = createAction('select/costModels')();\nexport const resetCostModel = createAction('reset/costModels')();\nexport const setCostModelDialog = createAction('display/costModels/dialog')();\nexport const { request: fetchCostModelsRequest, success: fetchCostModelsSuccess, failure: fetchCostModelsFailure, } = createAsyncAction('fetch/costModels/request', 'fetch/costModels/success', 'fetch/costModels/failure')();\nexport const fetchCostModels = (query = '') => {\n    return (dispatch) => {\n        dispatch(fetchCostModelsRequest());\n        return apiGetCostModels(query)\n            .then(res => {\n            dispatch(fetchCostModelsSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchCostModelsFailure(err));\n        });\n    };\n};\nexport const { request: updateCostModelsRequest, success: updateCostModelsSuccess, failure: updateCostModelsFailure, } = createAsyncAction('update/costModels/request', 'update/costModels/success', 'update/costModels/failure')();\nexport const updateCostModel = (uuid, request, dialog = null) => {\n    return (dispatch) => {\n        dispatch(updateCostModelsRequest());\n        return apiUpdateCostModel(uuid, request)\n            .then(res => {\n            dispatch(updateCostModelsSuccess(res));\n            if (dialog !== null) {\n                fetchCostModels(`uuid=${uuid}`)(dispatch);\n                dispatch(setCostModelDialog({ name: dialog, isOpen: false }));\n            }\n        })\n            .catch(err => {\n            dispatch(updateCostModelsFailure(err));\n        });\n    };\n};\nexport const { request: deleteCostModelsRequest, success: deleteCostModelsSuccess, failure: deleteCostModelsFailure, } = createAsyncAction('delete/costModels/request', 'delete/costModels/success', 'delete/costModels/failure')();\nexport const deleteCostModel = (uuid, dialog = '', history = null) => {\n    return (dispatch) => {\n        dispatch(deleteCostModelsRequest());\n        return apiDeleteCostModel(uuid)\n            .then(() => {\n            dispatch(deleteCostModelsSuccess());\n            dispatch(resetCostModel());\n            fetchCostModels()(dispatch);\n            if (dialog !== null) {\n                if (dialog === 'deleteCostModel' && history) {\n                    history.push('/cost-models');\n                }\n                dispatch(setCostModelDialog({ name: dialog, isOpen: false }));\n            }\n        })\n            .catch(err => {\n            dispatch(deleteCostModelsFailure(err));\n        });\n    };\n};\nexport const redirectToCostModelFromSourceUuid = (source_uuid, history) => {\n    return (dispatch) => {\n        return apiGetCostModels(`source_uuid=${source_uuid}`)\n            .then(res => {\n            const uuid = res.data.data[0].uuid;\n            history.push(`/cost-models/${uuid}`);\n        })\n            .catch(() => {\n            dispatch(addNotification({\n                title: intl.formatMessage(messages.CostModelsRouterErrorTitle),\n                description: intl.formatMessage(messages.CostModelsRouterServerError),\n                variant: 'danger',\n                dismissable: true,\n            }));\n        });\n    };\n};\n","import { getType } from 'typesafe-actions';\nimport { deleteCostModelsFailure, deleteCostModelsRequest, deleteCostModelsSuccess, fetchCostModelsFailure, fetchCostModelsRequest, fetchCostModelsSuccess, resetCostModel, selectCostModel, setCostModelDialog, updateCostModelsFailure, updateCostModelsRequest, updateCostModelsSuccess, updateFilterToolbar, } from './actions';\nexport const stateKey = 'costModels';\nexport const defaultState = {\n    costModels: null,\n    error: null,\n    status: 0 /* none */,\n    currentFilterType: 'name',\n    currentFilterValue: '',\n    isDialogOpen: {\n        deleteRate: false,\n        deleteSource: false,\n        addSource: false,\n        addRate: false,\n        updateRate: false,\n        deleteCostModel: false,\n        updateCostModel: false,\n        deleteMarkup: false,\n        updateMarkup: false,\n        deleteDistribution: false,\n        updateDistribution: false,\n        createWizard: false,\n    },\n    dialogData: null,\n    update: {\n        error: null,\n        status: 0 /* none */,\n        current: null,\n    },\n    delete: {\n        error: null,\n        status: 0 /* none */,\n    },\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(resetCostModel):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { current: null }) });\n        case getType(selectCostModel):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { current: action.payload }) });\n        case getType(updateCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { status: 1 /* inProgress */ }) });\n        case getType(updateCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { update: {\n                    error: null,\n                    status: 2 /* complete */,\n                    current: action.payload.data,\n                } });\n        case getType(updateCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { status: 2 /* complete */, error: action.payload }) });\n        case getType(fetchCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { currentFilterValue: '', status: 2 /* complete */, error: null, costModels: action.payload.data });\n        case getType(fetchCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        case getType(deleteCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { delete: Object.assign(Object.assign({}, state.delete), { status: 1 /* inProgress */ }) });\n        case getType(deleteCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { delete: {\n                    error: null,\n                    status: 2 /* complete */,\n                } });\n        case getType(deleteCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { delete: {\n                    status: 2 /* complete */,\n                    error: action.payload,\n                } });\n        case getType(updateFilterToolbar):\n            return Object.assign(Object.assign({}, state), action.payload);\n        case getType(setCostModelDialog):\n            return Object.assign(Object.assign({}, state), { isDialogOpen: Object.assign(Object.assign({}, state.isDialogOpen), { [action.payload.name]: action.payload.isOpen }), dialogData: action.payload.meta });\n        default:\n            return state;\n    }\n};\n","import { parseApiError } from 'pages/costModels/createCostModelWizard/parseError';\nimport { selectPagination } from 'store/djangoUtils/pagination';\nimport { selectQuery } from 'store/djangoUtils/query';\nimport { stateKey } from './reducer';\nexport const costModelsState = (state) => state[stateKey];\nexport const costModels = (state) => {\n    const cms = costModelsState(state).costModels;\n    if (cms) {\n        return cms.data;\n    }\n    return [];\n};\nexport const isDialogOpen = (state) => {\n    const dialogs = costModelsState(state).isDialogOpen;\n    return (type) => {\n        switch (type) {\n            case 'markup': {\n                const { deleteMarkup, updateMarkup } = dialogs;\n                return { deleteMarkup, updateMarkup };\n            }\n            case 'distribution': {\n                const { deleteDistribution, updateDistribution } = dialogs;\n                return { deleteDistribution, updateDistribution };\n            }\n            case 'costmodel': {\n                const { deleteCostModel, updateCostModel, createWizard } = dialogs;\n                return { deleteCostModel, updateCostModel, createWizard };\n            }\n            case 'sources': {\n                const { deleteSource, addSource } = dialogs;\n                return { deleteSource, addSource };\n            }\n            case 'rate': {\n                const { addRate, updateRate, deleteRate } = dialogs;\n                return { addRate, updateRate, deleteRate };\n            }\n            default:\n                return costModelsState(state).isDialogOpen;\n        }\n    };\n};\nexport const status = (state) => costModelsState(state).status;\nexport const error = (state) => costModelsState(state).error;\nexport const stateName = (state) => {\n    const costStatus = status(state);\n    const costError = error(state);\n    const costData = costModels(state);\n    const costQuery = query(state);\n    if (costStatus !== 2 /* complete */) {\n        return 'loading';\n    }\n    if (costError !== null) {\n        return 'failure';\n    }\n    if (costData.length > 0) {\n        return 'success';\n    }\n    const hasNoFilters = Object.keys(costQuery).every(key => {\n        switch (key) {\n            case 'description':\n            case 'name':\n            case 'source_type':\n                return costQuery[key] === null;\n            default:\n                return true;\n        }\n    });\n    if (hasNoFilters) {\n        return 'empty';\n    }\n    return 'no-match';\n};\nexport const currentFilterValue = (state) => costModelsState(state).currentFilterValue;\nexport const currentFilterType = (state) => costModelsState(state).currentFilterType;\nexport const query = selectQuery((state) => costModelsState(state).costModels, ['ordering', 'name', 'source_type', 'description', 'offset', 'limit']);\nexport const pagination = selectPagination((state) => costModelsState(state).costModels);\nexport const dialogData = (state) => costModelsState(state).dialogData;\nexport const updateProcessing = (state) => costModelsState(state).update.status === 1 /* inProgress */;\nexport const updateError = (state) => {\n    const updateErr = costModelsState(state).update.error;\n    if (updateErr === null) {\n        return '';\n    }\n    return parseApiError(updateErr);\n};\nexport const selected = (state) => {\n    return costModelsState(state).update.current;\n};\nexport const deleteProcessing = (state) => costModelsState(state).delete.status === 1 /* inProgress */;\nexport const deleteError = (state) => {\n    const err = costModelsState(state).delete.error;\n    if (err === null) {\n        return '';\n    }\n    return parseApiError(err);\n};\n","export const stateKey = 'currency';\nexport const currencyKey = 'currency';\nexport function getReportId() {\n    return `currency`;\n}\n","import { fetchCurrency as apiGetCurrency } from 'api/currency';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './currencyCommon';\nexport const fetchCurrencyRequest = createAction('currency/fetch/request')();\nexport const fetchCurrencySuccess = createAction('currency/fetch/success')();\nexport const fetchCurrencyFailure = createAction('currency/fetch/failure')();\nexport function fetchCurrency() {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(),\n        };\n        dispatch(fetchCurrencyRequest(meta));\n        return apiGetCurrency()\n            .then(res => {\n            dispatch(fetchCurrencySuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchCurrencyFailure(err, meta));\n        });\n    };\n}\n","import axios from 'axios';\nexport function fetchCurrency() {\n    const insights = window.insights;\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`currency/?limit=20`);\n        });\n    }\n    else {\n        return axios.get(`currency/?limit=20`);\n    }\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchCurrencyFailure, fetchCurrencyRequest, fetchCurrencySuccess } from './currencyActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function currencyReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchCurrencyRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchCurrencySuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchCurrencyFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { getReportId, stateKey } from './currencyCommon';\nexport const selectCurrencyState = (state) => state[stateKey];\n// Fetch currency\nexport const selectCurrency = (state) => selectCurrencyState(state).byId.get(getReportId());\nexport const selectCurrencyFetchStatus = (state) => selectCurrencyState(state).fetchStatus.get(getReportId());\nexport const selectCurrencyError = (state) => selectCurrencyState(state).errors.get(getReportId());\n","import { getQuery } from 'api/queries/awsQuery';\nexport const awsDashboardStateKey = 'awsDashboard';\nexport const awsDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const awsDashboardTabFilters = Object.assign(Object.assign({}, awsDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = awsDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = awsDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { awsDashboardDefaultFilters, awsDashboardStateKey, awsDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './awsDashboardCommon';\nexport const selectAwsDashboardState = (state) => state[awsDashboardStateKey];\nexport const selectWidgets = (state) => selectAwsDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, awsDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, awsDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './awsDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('awsDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nimport { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: messages.AWSComputeTitle,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    tabsFilter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.instanceType,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.AWSDashboardCostTitle,\n    forecastPathsType: \"aws\" /* aws */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: messages.Cost,\n        showHorizontal: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n        viewAllPath: paths.awsDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.AWSDailyCostTrendTitle,\n        titleKey: messages.AWSCostTrendTitle,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    tabsFilter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    tabsFilter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"accounts\" /* accounts */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './awsDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './awsDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function awsDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/awsQuery';\nexport const awsOcpDashboardStateKey = 'awsOcpDashboard';\nexport const awsOcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const awsOcpDashboardTabFilters = Object.assign(Object.assign({}, awsOcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = awsOcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = awsOcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { awsOcpDashboardDefaultFilters, awsOcpDashboardStateKey, awsOcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './awsOcpDashboardCommon';\nexport const selectAwsOcpDashboardState = (state) => state[awsOcpDashboardStateKey];\nexport const selectWidgets = (state) => selectAwsOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, awsOcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, awsOcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './awsOcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('awsOcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: messages.AWSComputeTitle,\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    tabsFilter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AwsOcpDashboardTab.instanceType,\n    //   AwsOcpDashboardTab.accounts,\n    //   AwsOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.AWSOcpDashboardCostTitle,\n    forecastPathsType: \"aws_ocp\" /* awsOcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: messages.Cost,\n        showHorizontal: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.AWSDailyCostTrendTitle,\n        titleKey: messages.AWSCostTrendTitle,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    tabsFilter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AwsOcpDashboardTab.services,\n    //   AwsOcpDashboardTab.accounts,\n    //   AwsOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonOcpFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    tabsFilter: {\n        service: 'AmazonVPC,AmazonOcpFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AwsOcpDashboardTab.services,\n    //   AwsOcpDashboardTab.accounts,\n    //   AwsOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AwsOcpDashboardTab.services,\n    //   AwsOcpDashboardTab.accounts,\n    //   AwsOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"accounts\" /* accounts */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './awsOcpDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './awsOcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function awsOcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/azureQuery';\nexport const azureDashboardStateKey = 'azureDashboard';\nexport const azureDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const azureDashboardTabFilters = Object.assign(Object.assign({}, azureDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"service_names\" /* service_names */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service_name: widget.tabsFilter && widget.tabsFilter.service_name ? widget.tabsFilter.service_name : '*',\n            };\n        case \"subscription_guids\" /* subscription_guids */:\n            return { subscription_guid: '*' };\n        case \"resource_locations\" /* resource_locations */:\n            return { resource_location: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = azureDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = azureDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"service_names\" /* service_names */ && widget.tabsFilter && widget.tabsFilter.service_name) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { azureDashboardDefaultFilters, azureDashboardStateKey, azureDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './azureDashboardCommon';\nexport const selectAzureDashboardState = (state) => state[azureDashboardStateKey];\nexport const selectWidgets = (state) => selectAzureDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, azureDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, azureDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './azureDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('azureDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nimport { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.AzureDashboardCostTitle,\n    forecastPathsType: \"azure\" /* azure */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: messages.Cost,\n        showHorizontal: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n        viewAllPath: paths.azureDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.AzureDailyCostTrendTitle,\n        titleKey: messages.AzureCostTrendTitle,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    availableTabs: [\n        \"service_names\" /* service_names */,\n        \"subscription_guids\" /* subscription_guids */,\n        \"resource_locations\" /* resource_locations */,\n    ],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    tabsFilter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service_name: 'Storage',\n    },\n    tabsFilter: {\n        service_name: 'Storage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"subscription_guids\" /* subscription_guids */,\n};\nexport const virtualMachineWidget = {\n    id: getId(),\n    titleKey: messages.AzureComputeTitle,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service_name: 'Virtual Machines',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Machines',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.instanceType,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './azureDashboardActions';\nimport { costSummaryWidget, databaseWidget, networkWidget, storageWidget, virtualMachineWidget, } from './azureDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costSummaryWidget.id,\n        virtualMachineWidget.id,\n        storageWidget.id,\n        networkWidget.id,\n        databaseWidget.id,\n    ],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [virtualMachineWidget.id]: virtualMachineWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function azureDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/azureQuery';\nexport const azureOcpDashboardStateKey = 'azureOcpDashboard';\nexport const azureOcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const azureOcpDashboardTabFilters = Object.assign(Object.assign({}, azureOcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"service_names\" /* service_names */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service_name: widget.tabsFilter && widget.tabsFilter.service_name ? widget.tabsFilter.service_name : '*',\n            };\n        case \"subscription_guids\" /* subscription_guids */:\n            return { subscription_guid: '*' };\n        case \"resource_locations\" /* resource_locations */:\n            return { resource_location: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = azureOcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = azureOcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"service_names\" /* service_names */ && widget.tabsFilter && widget.tabsFilter.service_name) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { azureOcpDashboardDefaultFilters, azureOcpDashboardStateKey, azureOcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './azureOcpDashboardCommon';\nexport const selectAzureOcpDashboardState = (state) => state[azureOcpDashboardStateKey];\nexport const selectWidgets = (state) => selectAzureOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, azureOcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, azureOcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './azureOcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('azureOcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.AzureOcpDashboardCostTitle,\n    forecastPathsType: \"azure_ocp\" /* azureOcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: messages.Cost,\n        showHorizontal: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.AzureDailyCostTrendTitle,\n        titleKey: messages.AzureCostTrendTitle,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    availableTabs: [\n        \"service_names\" /* service_names */,\n        \"subscription_guids\" /* subscription_guids */,\n        \"resource_locations\" /* resource_locations */,\n    ],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    tabsFilter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AzureOcpDashboardTab.service_names,\n    //   AzureOcpDashboardTab.subscription_guids,\n    //   AzureOcpDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AzureOcpDashboardTab.service_names,\n    //   AzureOcpDashboardTab.subscription_guids,\n    //   AzureOcpDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service_name: 'Storage',\n    },\n    tabsFilter: {\n        service_name: 'Storage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AzureOcpDashboardTab.service_names,\n    //   AzureOcpDashboardTab.subscription_guids,\n    //   AzureOcpDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"subscription_guids\" /* subscription_guids */,\n};\nexport const virtualMachineWidget = {\n    id: getId(),\n    titleKey: messages.AzureComputeTitle,\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service_name: 'Virtual Machines',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Machines',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   AzureOcpDashboardTab.instanceType,\n    //   AzureOcpDashboardTab.subscription_guids,\n    //   AzureOcpDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './azureOcpDashboardActions';\nimport { costSummaryWidget, databaseWidget, networkWidget, storageWidget, virtualMachineWidget, } from './azureOcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costSummaryWidget.id,\n        virtualMachineWidget.id,\n        storageWidget.id,\n        networkWidget.id,\n        databaseWidget.id,\n    ],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [virtualMachineWidget.id]: virtualMachineWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function azureOcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/gcpQuery';\nexport const gcpDashboardStateKey = 'gcpDashboard';\nexport const gcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const gcpDashboardTabFilters = Object.assign(Object.assign({}, gcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = gcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = gcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { gcpDashboardDefaultFilters, gcpDashboardStateKey, gcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './gcpDashboardCommon';\nexport const selectGcpDashboardState = (state) => state[gcpDashboardStateKey];\nexport const selectWidgets = (state) => selectGcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, gcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, gcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './gcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('gcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nimport { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: messages.GCPComputeTitle,\n    forecastPathsType: \"gcp\" /* gcp */,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'Compute Engine',\n    },\n    tabsFilter: {\n        service: 'Compute Engine',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.instanceType,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.GCPCostTitle,\n    forecastPathsType: \"gcp\" /* gcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: messages.Cost,\n        showHorizontal: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n        viewAllPath: paths.gcpDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.GCPDailyCostTrendTitle,\n        titleKey: messages.GCPCostTrendTitle,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"projects\" /* projects */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    tabsFilter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    tabsFilter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './gcpDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './gcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [storageWidget.id]: storageWidget,\n        [networkWidget.id]: networkWidget,\n        [databaseWidget.id]: databaseWidget,\n    },\n};\nexport function gcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/gcpQuery';\nexport const gcpOcpDashboardStateKey = 'gcpOcpDashboard';\nexport const gcpOcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const gcpOcpDashboardTabFilters = Object.assign(Object.assign({}, gcpOcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = gcpOcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = gcpOcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { gcpOcpDashboardDefaultFilters, gcpOcpDashboardStateKey, gcpOcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './gcpOcpDashboardCommon';\nexport const selectGcpOcpDashboardState = (state) => state[gcpOcpDashboardStateKey];\nexport const selectWidgets = (state) => selectGcpOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, gcpOcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, gcpOcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './gcpOcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('gcpOcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: messages.GCPComputeTitle,\n    forecastPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'Compute Engine',\n    },\n    tabsFilter: {\n        service: 'Compute Engine',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   GcpOcpDashboardTab.instanceType,\n    //   GcpOcpDashboardTab.accounts,\n    //   GcpOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.GCPCostTitle,\n    forecastPathsType: \"gcp_ocp\" /* gcpOcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: messages.Cost,\n        showHorizontal: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.GCPDailyCostTrendTitle,\n        titleKey: messages.GCPCostTrendTitle,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"projects\" /* projects */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    tabsFilter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   GcpOcpDashboardTab.services,\n    //   GcpOcpDashboardTab.accounts,\n    //   GcpOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    tabsFilter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   GcpOcpDashboardTab.services,\n    //   GcpOcpDashboardTab.accounts,\n    //   GcpOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   GcpOcpDashboardTab.services,\n    //   GcpOcpDashboardTab.accounts,\n    //   GcpOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './gcpOcpDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './gcpOcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [storageWidget.id]: storageWidget,\n        [networkWidget.id]: networkWidget,\n        [databaseWidget.id]: databaseWidget,\n    },\n};\nexport function gcpOcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ibmQuery';\nexport const ibmDashboardStateKey = 'ibmDashboard';\nexport const ibmDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ibmDashboardTabFilters = Object.assign(Object.assign({}, ibmDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ibmDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ibmDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ibmDashboardDefaultFilters, ibmDashboardStateKey, ibmDashboardTabFilters, } from './ibmDashboardCommon';\nexport const selectIbmDashboardState = (state) => state[ibmDashboardStateKey];\nexport const selectWidgets = (state) => selectIbmDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectIbmDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, ibmDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ibmDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ibmDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ibmDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nimport { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: messages.IBMComputeTitle,\n    forecastPathsType: \"gcp\" /* ibm */,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'Compute Engine',\n    },\n    tabsFilter: {\n        service: 'Compute Engine',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.instanceType,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.IBMCostTitle,\n    forecastPathsType: \"gcp\" /* ibm */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: messages.Cost,\n        showHorizontal: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n        viewAllPath: paths.ibmDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.IBMDailyCostTrendTitle,\n        titleKey: messages.IBMCostTrendTitle,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"projects\" /* projects */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    tabsFilter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.services,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    tabsFilter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.services,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.services,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ibmDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './ibmDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [storageWidget.id]: storageWidget,\n        [networkWidget.id]: networkWidget,\n        [databaseWidget.id]: databaseWidget,\n    },\n};\nexport function ibmDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpCloudQuery';\nexport const ocpCloudDashboardStateKey = 'ocpCloudDashboard';\nexport const ocpCloudDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpCloudDashboardTabFilters = Object.assign(Object.assign({}, ocpCloudDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpCloudDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpCloudDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpCloudDashboardDefaultFilters, ocpCloudDashboardStateKey, ocpCloudDashboardTabFilters, } from './ocpCloudDashboardCommon';\nexport const selectOcpCloudDashboardState = (state) => state[ocpCloudDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpCloudDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpCloudDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpCloudDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpCloudDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpCloudDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpCloudDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.OCPCloudDashboardCostTitle,\n    forecastPathsType: \"ocp_cloud\" /* ocpCloud */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: messages.Cost,\n        showHorizontal: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.OCPCloudDashboardDailyCostTrendTitle,\n        titleKey: messages.OCPCloudDashboardCostTrendTitle,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\n// Cloud widgets\nexport const computeWidget = {\n    id: getId(),\n    titleKey: messages.OCPCloudDashboardComputeTitle,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB' +\n            'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway' +\n            'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    chartType: \"trend\" /* trend */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpCloudDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './ocpCloudDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function ocpCloudDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpQuery';\nexport const ocpDashboardStateKey = 'ocpDashboard';\nexport const ocpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpDashboardTabFilters = Object.assign(Object.assign({}, ocpDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(tab) {\n    switch (tab) {\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"clusters\" /* clusters */:\n            return { cluster: '*' };\n        case \"nodes\" /* nodes */:\n            return { node: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpDashboardDefaultFilters) {\n    const query = {\n        filter,\n        group_by: getGroupByForTab(widget.currentTab),\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpDashboardDefaultFilters, ocpDashboardStateKey, ocpDashboardTabFilters, } from './ocpDashboardCommon';\nexport const selectOcpDashboardState = (state) => state[ocpDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nimport { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.OCPDashboardCostTitle,\n    forecastPathsType: \"ocp\" /* ocp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: messages.Cost,\n        showHorizontal: true,\n        showTooltip: true,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n        viewAllPath: paths.ocpDetails,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedForecastInfrastructureItem: \"infrastructure\" /* infrastructure */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.OCPDashboardDailyCostTitle,\n        titleKey: messages.OCPDashboardCostTrendTitle,\n        type: 0 /* rolling */,\n        valueFormatterOptions: {},\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    availableTabs: [\"projects\" /* projects */, \"clusters\" /* clusters */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const cpuWidget = {\n    id: getId(),\n    titleKey: messages.OCPCPUUsageAndRequests,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    details: {\n        requestValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: messages.Requests,\n        showUnits: true,\n        showUsageFirst: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 0,\n        },\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.OCPDailyUsageAndRequestComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const memoryWidget = {\n    id: getId(),\n    titleKey: messages.OCPMemoryUsageAndRequests,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    details: {\n        requestValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: messages.Requests,\n        showUnits: true,\n        showUsageFirst: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 0,\n        },\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.OCPDailyUsageAndRequestComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const volumeWidget = {\n    id: getId(),\n    titleKey: messages.OCPVolumeUsageAndRequests,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"volume\" /* volume */,\n    details: {\n        requestValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: messages.Requests,\n        showUnits: true,\n        showUsageFirst: true,\n        usageKey: messages.Usage,\n        usageValueFormatterOptions: {\n            fractionDigits: 0,\n        },\n        valueFormatterOptions: {\n            fractionDigits: 0,\n        },\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.OCPDailyUsageAndRequestComparison,\n        type: 1 /* daily */,\n        valueFormatterOptions: {\n            fractionDigits: 2,\n        },\n    },\n    topItems: {\n        valueFormatterOptions: {},\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpDashboardActions';\nimport { costSummaryWidget, cpuWidget, memoryWidget, volumeWidget } from './ocpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, cpuWidget.id, memoryWidget.id, volumeWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [cpuWidget.id]: cpuWidget,\n        [memoryWidget.id]: memoryWidget,\n        [volumeWidget.id]: volumeWidget,\n    },\n};\nexport function ocpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","export const selectPagination = (stateProjector) => {\n    return (state) => {\n        return getPagination(stateProjector(state));\n    };\n};\nexport const getPagination = (payload) => {\n    if (payload === null) {\n        return {\n            page: 1,\n            perPage: 1,\n            count: 0,\n        };\n    }\n    let urlParams = null;\n    if (payload.links.next !== null) {\n        urlParams = new URLSearchParams(payload.links.next.split('?')[1]);\n        const limit = Number(urlParams.get('limit'));\n        const offset = Number(urlParams.get('offset')) - limit;\n        return {\n            page: offset / limit + 1,\n            perPage: limit,\n            count: payload.meta.count,\n        };\n    }\n    if (payload.links.previous !== null) {\n        urlParams = new URLSearchParams(payload.links.previous.split('?')[1]);\n        const limit = Number(urlParams.get('limit'));\n        const offset = Number(urlParams.get('offset')) + limit;\n        return {\n            page: offset / limit + 1,\n            perPage: limit,\n            count: payload.meta.count,\n        };\n    }\n    urlParams = new URLSearchParams(payload.links.first.split('?')[1]);\n    return {\n        page: 1,\n        perPage: Number(urlParams.get('limit')),\n        count: payload.meta.count,\n    };\n};\n","export const selectQuery = (stateProjector, keys) => {\n    return (state) => {\n        const params = getQuery(stateProjector(state));\n        return keys.reduce((acc, curr) => {\n            return Object.assign(Object.assign({}, acc), { [curr]: params.get(curr) });\n        }, {});\n    };\n};\nconst getQuery = (payload) => {\n    if (payload === null) {\n        return new URLSearchParams();\n    }\n    const [, search] = payload.links.first.split('?');\n    return new URLSearchParams(search);\n};\n","export const exportStateKey = 'export';\nexport function getExportId(reportPathsType, reportType, query) {\n    return `${reportPathsType}-${reportType}--${query}`;\n}\n","import { exportStateKey, getExportId } from './exportCommon';\nexport const selectExportState = (state) => state[exportStateKey];\nexport const selectExport = (state, reportPathsType, reportType, query) => selectExportState(state).byId.get(getExportId(reportPathsType, reportType, query));\nexport const selectExportFetchStatus = (state, reportPathsType, reportType, query) => selectExportState(state).fetchStatus.get(getExportId(reportPathsType, reportType, query));\nexport const selectExportError = (state, reportPathsType, reportType, query) => selectExportState(state).errors.get(getExportId(reportPathsType, reportType, query));\n","import { runExport } from 'api/exports/exportUtils';\nimport { getExportId } from 'store/exports/exportCommon';\nimport { selectExport, selectExportFetchStatus } from 'store/exports/exportSelectors';\nimport { createAction } from 'typesafe-actions';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchExportRequest = createAction('report/request')();\nexport const fetchExportSuccess = createAction('report/success')();\nexport const fetchExportFailure = createAction('report/failure')();\nexport function exportReport(reportPathsType, reportType, query) {\n    return (dispatch, getState) => {\n        if (!isExportExpired(getState(), reportPathsType, reportType, query)) {\n            return;\n        }\n        const meta = {\n            reportId: getExportId(reportPathsType, reportType, query),\n        };\n        dispatch(fetchExportRequest(meta));\n        runExport(reportPathsType, reportType, query)\n            .then(res => {\n            dispatch(fetchExportSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchExportFailure(err, meta));\n        });\n    };\n}\nfunction isExportExpired(state, reportPathsType, reportType, query) {\n    const report = selectExport(state, reportPathsType, reportType, query);\n    const fetchStatus = selectExportFetchStatus(state, reportPathsType, reportType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!report) {\n        return true;\n    }\n    const now = Date.now();\n    return now > report.timeRequested + expirationMS;\n}\n","import { runExport as runAwsExport } from './awsExport';\nimport { runExport as runAwsOcpExport } from './awsOcpExport';\nimport { runExport as runAzureExport } from './azureExport';\nimport { runExport as runAzureOcpExport } from './azureOcpExport';\nimport { runExport as runGcpExport } from './gcpExport';\nimport { runExport as runGcpOcpExport } from './gcpOcpExport';\nimport { runExport as runIbmExport } from './ibmExport';\nimport { runExport as runOcpCloudExport } from './ocpCloudExport';\nimport { runExport as runOcpExport } from './ocpExport';\nexport function runExport(reportPathsType, reportType, query) {\n    let report;\n    switch (reportPathsType) {\n        case \"aws\" /* aws */:\n            report = runAwsExport(reportType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            report = runAwsOcpExport(reportType, query);\n            break;\n        case \"azure\" /* azure */:\n            report = runAzureExport(reportType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            report = runAzureOcpExport(reportType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            report = runGcpExport(reportType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            report = runGcpOcpExport(reportType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            report = runIbmExport(reportType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            report = runOcpCloudExport(reportType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            report = runOcpExport(reportType, query);\n            break;\n    }\n    return report;\n}\n","import { ReportTypePaths } from 'api/reports/awsReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/awsOcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/azureReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/azureOcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/gcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/gcpOcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ibmReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ocpCloudReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ocpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchExportFailure, fetchExportRequest, fetchExportSuccess } from './exportActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function exportReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchExportRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchExportSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, {\n                    data: action.payload,\n                    timeRequested: Date.now(),\n                }), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchExportFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/aws/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/aws/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/azure/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/azure/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/gcp/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/gcp/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/ibm/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/all/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/costs/',\n    [\"infrastructure\" /* infrastructure */]: 'forecasts/openshift/costs/',\n    [\"supplementary\" /* supplementary */]: 'forecasts/openshift/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","export const forecastStateKey = 'forecast';\nexport function getForecastId(forecastPathsType, forecastType, query) {\n    return `${forecastPathsType}--${forecastType}--${query}`;\n}\n","import { forecastStateKey, getForecastId } from './forecastCommon';\nexport const selectForecastState = (state) => state[forecastStateKey];\nexport const selectForecast = (state, forecastPathsType, forecastType, query) => selectForecastState(state).byId.get(getForecastId(forecastPathsType, forecastType, query));\nexport const selectForecastFetchStatus = (state, forecastPathsType, forecastType, query) => selectForecastState(state).fetchStatus.get(getForecastId(forecastPathsType, forecastType, query));\nexport const selectForecastError = (state, forecastPathsType, forecastType, query) => selectForecastState(state).errors.get(getForecastId(forecastPathsType, forecastType, query));\n","import { runForecast } from 'api/forecasts/forecastUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getForecastId } from './forecastCommon';\nimport { selectForecast, selectForecastFetchStatus } from './forecastSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchForecastRequest = createAction('forecast/request')();\nexport const fetchForecastSuccess = createAction('forecast/success')();\nexport const fetchForecastFailure = createAction('forecast/failure')();\nexport function fetchForecast(forecastPathsType, forecastType, query) {\n    return (dispatch, getState) => {\n        if (!isForecastExpired(getState(), forecastPathsType, forecastType, query)) {\n            return;\n        }\n        const meta = {\n            forecastId: getForecastId(forecastPathsType, forecastType, query),\n        };\n        dispatch(fetchForecastRequest(meta));\n        runForecast(forecastPathsType, forecastType, query)\n            .then(res => {\n            dispatch(fetchForecastSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchForecastFailure(err, meta));\n        });\n    };\n}\nfunction isForecastExpired(state, forecastPathsType, forecastType, query) {\n    const forecast = selectForecast(state, forecastPathsType, forecastType, query);\n    const fetchStatus = selectForecastFetchStatus(state, forecastPathsType, forecastType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!forecast) {\n        return true;\n    }\n    const now = Date.now();\n    return now > forecast.timeRequested + expirationMS;\n}\n","import { runForecast as runAwsForecast } from './awsForecast';\nimport { runForecast as runAwsOcpForecast } from './awsOcpForecast';\nimport { runForecast as runAzureForecast } from './azureForecast';\nimport { runForecast as runAzureOcpForecast } from './azureOcpForecast';\nimport { runForecast as runGcpForecast } from './gcpForecast';\nimport { runForecast as runGcpOcpForecast } from './gcpOcpForecast';\nimport { runForecast as runIbmForecast } from './ibmForecast';\nimport { runForecast as runOcpCloudForecast } from './ocpCloudForecast';\nimport { runForecast as runOcpForecast } from './ocpForecast';\nexport function runForecast(forecastPathsType, forecastType, query) {\n    let forecast;\n    switch (forecastPathsType) {\n        case \"aws\" /* aws */:\n            forecast = runAwsForecast(forecastType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            forecast = runAwsOcpForecast(forecastType, query);\n            break;\n        case \"azure\" /* azure */:\n            forecast = runAzureForecast(forecastType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            forecast = runAzureOcpForecast(forecastType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            forecast = runGcpForecast(forecastType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            forecast = runGcpOcpForecast(forecastType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            forecast = runIbmForecast(forecastType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            forecast = runOcpForecast(forecastType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            forecast = runOcpCloudForecast(forecastType, query);\n            break;\n    }\n    return forecast;\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchForecastFailure, fetchForecastRequest, fetchForecastSuccess } from './forecastActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function forecastReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchForecastRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.forecastId, 1 /* inProgress */) });\n        case getType(fetchForecastSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.forecastId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.forecastId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.forecastId, null) });\n        case getType(fetchForecastFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.forecastId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.forecastId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchPriceListFailure, fetchPriceListRequest, fetchPriceListSuccess } from './actions';\nexport const stateKey = 'priceList';\nexport const defaultState = {\n    rates: new Map(),\n    error: new Map(),\n    status: new Map(),\n};\nexport function reducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchPriceListRequest):\n            return Object.assign(Object.assign({}, state), { status: new Map(state.status).set(action.payload.providerUuid, 1 /* inProgress */) });\n        case getType(fetchPriceListSuccess):\n            return Object.assign(Object.assign({}, state), { status: new Map(state.status).set(action.meta.providerUuid, 2 /* complete */), rates: new Map(state.rates).set(action.meta.providerUuid, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), error: new Map(state.error).set(action.meta.providerUuid, null) });\n        case getType(fetchPriceListFailure):\n            return Object.assign(Object.assign({}, state), { error: new Map(state.error).set(action.meta.providerUuid, action.payload), status: new Map(state.status).set(action.meta.providerUuid, 2 /* complete */) });\n        default:\n            return state;\n    }\n}\n","import { fetchRate } from 'api/rates';\nimport { expirationMS } from 'store/common';\nimport { createAction } from 'typesafe-actions';\nimport { cachedRates, status } from './selectors';\nexport const fetchPriceListRequest = createAction('priceList/request')();\nexport const fetchPriceListSuccess = createAction('priceList/success')();\nexport const fetchPriceListFailure = createAction('priceList/failure')();\nfunction isExpired(state, meta) {\n    const cachedData = cachedRates(state, meta.providerUuid);\n    const reqStatus = status(state, meta.providerUuid);\n    if (reqStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!cachedData) {\n        return true;\n    }\n    const now = Date.now();\n    return now > cachedData.timeRequested + expirationMS;\n}\nexport function fetchPriceList(providerUuid) {\n    const meta = { providerUuid };\n    return (dispatch, getState) => {\n        if (!isExpired(getState(), meta)) {\n            return;\n        }\n        dispatch(fetchPriceListRequest(meta));\n        return fetchRate(providerUuid)\n            .then(res => {\n            dispatch(fetchPriceListSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchPriceListFailure(err, meta));\n        });\n    };\n}\n","import { notifications } from '@redhat-cloud-services/frontend-components-notifications';\nimport { combineReducers } from 'redux';\nimport { awsCostOverviewReducer, awsCostOverviewStateKey } from 'store/breakdown/costOverview/awsCostOverview';\nimport { azureCostOverviewReducer, azureCostOverviewStateKey } from 'store/breakdown/costOverview/azureCostOverview';\nimport { gcpCostOverviewReducer, gcpCostOverviewStateKey } from 'store/breakdown/costOverview/gcpCostOverview';\nimport { ibmCostOverviewReducer, ibmCostOverviewStateKey } from 'store/breakdown/costOverview/ibmCostOverview';\nimport { ocpCostOverviewReducer, ocpCostOverviewStateKey } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { awsHistoricalDataReducer, awsHistoricalDataStateKey } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { azureHistoricalDataReducer, azureHistoricalDataStateKey, } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { gcpHistoricalDataReducer, gcpHistoricalDataStateKey } from 'store/breakdown/historicalData/gcpHistoricalData';\nimport { ibmHistoricalDataReducer, ibmHistoricalDataStateKey } from 'store/breakdown/historicalData/ibmHistoricalData';\nimport { ocpHistoricalDataReducer, ocpHistoricalDataStateKey } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { costModelsReducer, costModelsStateKey } from 'store/costModels';\nimport { awsDashboardReducer, awsDashboardStateKey } from 'store/dashboard/awsDashboard';\nimport { awsOcpDashboardReducer, awsOcpDashboardStateKey } from 'store/dashboard/awsOcpDashboard';\nimport { azureDashboardReducer, azureDashboardStateKey } from 'store/dashboard/azureDashboard';\nimport { azureOcpDashboardReducer, azureOcpDashboardStateKey } from 'store/dashboard/azureOcpDashboard';\nimport { gcpDashboardReducer, gcpDashboardStateKey } from 'store/dashboard/gcpDashboard';\nimport { gcpOcpDashboardReducer, gcpOcpDashboardStateKey } from 'store/dashboard/gcpOcpDashboard';\nimport { ibmDashboardReducer, ibmDashboardStateKey } from 'store/dashboard/ibmDashboard';\nimport { ocpCloudDashboardReducer, ocpCloudDashboardStateKey } from 'store/dashboard/ocpCloudDashboard';\nimport { ocpDashboardReducer, ocpDashboardStateKey } from 'store/dashboard/ocpDashboard';\nimport { exportReducer, exportStateKey } from 'store/exports';\nimport { forecastReducer, forecastStateKey } from 'store/forecasts';\nimport { orgReducer, orgStateKey } from 'store/orgs';\nimport { priceListReducer, priceListStateKey } from 'store/priceList';\nimport { reportReducer, reportStateKey } from 'store/reports';\nimport { resourceReducer, resourceStateKey } from 'store/resources';\nimport { sourcesReducer, sourcesStateKey } from 'store/sourceSettings';\nimport { tagReducer, tagStateKey } from 'store/tags';\nimport { currencyReducer, currencyStateKey } from './currency';\nimport { metricsReducer, metricsStateKey } from './metrics';\nimport { providersReducer, providersStateKey } from './providers';\nimport { rbacReducer, rbacStateKey } from './rbac';\nimport { uiReducer, uiStateKey } from './ui';\nimport { userAccessReducer, userAccessStateKey } from './userAccess';\nexport const rootReducer = combineReducers({\n    [awsOcpDashboardStateKey]: awsOcpDashboardReducer,\n    [awsCostOverviewStateKey]: awsCostOverviewReducer,\n    [awsDashboardStateKey]: awsDashboardReducer,\n    [awsHistoricalDataStateKey]: awsHistoricalDataReducer,\n    [azureOcpDashboardStateKey]: azureOcpDashboardReducer,\n    [azureCostOverviewStateKey]: azureCostOverviewReducer,\n    [azureDashboardStateKey]: azureDashboardReducer,\n    [azureHistoricalDataStateKey]: azureHistoricalDataReducer,\n    [costModelsStateKey]: costModelsReducer,\n    [currencyStateKey]: currencyReducer,\n    [exportStateKey]: exportReducer,\n    [gcpCostOverviewStateKey]: gcpCostOverviewReducer,\n    [gcpDashboardStateKey]: gcpDashboardReducer,\n    [gcpOcpDashboardStateKey]: gcpOcpDashboardReducer,\n    [gcpHistoricalDataStateKey]: gcpHistoricalDataReducer,\n    [ibmCostOverviewStateKey]: ibmCostOverviewReducer,\n    [ibmDashboardStateKey]: ibmDashboardReducer,\n    [ibmHistoricalDataStateKey]: ibmHistoricalDataReducer,\n    [metricsStateKey]: metricsReducer,\n    [ocpCostOverviewStateKey]: ocpCostOverviewReducer,\n    [ocpDashboardStateKey]: ocpDashboardReducer,\n    [ocpCloudDashboardStateKey]: ocpCloudDashboardReducer,\n    [ocpHistoricalDataStateKey]: ocpHistoricalDataReducer,\n    [orgStateKey]: orgReducer,\n    [priceListStateKey]: priceListReducer,\n    [providersStateKey]: providersReducer,\n    [rbacStateKey]: rbacReducer,\n    [reportStateKey]: reportReducer,\n    [forecastStateKey]: forecastReducer,\n    [resourceStateKey]: resourceReducer,\n    [sourcesStateKey]: sourcesReducer,\n    [tagStateKey]: tagReducer,\n    [uiStateKey]: uiReducer,\n    [userAccessStateKey]: userAccessReducer,\n    notifications,\n});\n","import { notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications';\nimport axios from 'axios';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './rootReducer';\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ serialize: true })\n    : compose;\nexport const middlewares = [thunk, notificationsMiddleware()];\nexport function configureStore(initialState) {\n    const enhancer = composeEnhancers(applyMiddleware(...middlewares));\n    const store = createStore(rootReducer, initialState, enhancer);\n    axios.interceptors.response.use(null, error => {\n        return Promise.reject(error);\n    });\n    return store;\n}\n","import { fetchRateMetrics } from 'api/metrics';\nimport { createAsyncAction } from 'typesafe-actions';\nexport const { request: fetchMetricsRequest, success: fetchMetricsSuccess, failure: fetchMetricsFailure, } = createAsyncAction('fetch/metrics/request', 'fetch/metrics/success', 'fetch/metrics/failure')();\nexport const fetchMetrics = (source_type = '') => {\n    return (dispatch) => {\n        dispatch(fetchMetricsRequest());\n        return fetchRateMetrics(source_type)\n            .then(res => {\n            dispatch(fetchMetricsSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchMetricsFailure(err));\n        });\n    };\n};\n","import axios from 'axios';\nexport function fetchRateMetrics(source_type = '') {\n    const query = source_type ? `?source_type=${source_type}` : '';\n    return axios.get(`metrics/${query}`);\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchMetricsFailure, fetchMetricsRequest, fetchMetricsSuccess } from './actions';\nexport const stateKey = 'metrics';\nexport const defaultState = {\n    error: null,\n    status: 0 /* none */,\n    metrics: null,\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(fetchMetricsSuccess):\n            return {\n                error: null,\n                status: 2 /* complete */,\n                metrics: action.payload.data,\n            };\n        case getType(fetchMetricsFailure):\n            return {\n                status: 2 /* complete */,\n                error: action.payload,\n                metrics: null,\n            };\n        case getType(fetchMetricsRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        default:\n            return state;\n    }\n};\n","import { parseApiError } from 'pages/costModels/createCostModelWizard/parseError';\nimport { stateKey } from './reducer';\nexport const metricsState = (state) => state[stateKey];\nexport const status = (state) => metricsState(state).status;\nexport const error = (state) => {\n    const err = metricsState(state).error;\n    if (err === null) {\n        return '';\n    }\n    return parseApiError(err);\n};\nexport const metrics = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return {};\n    }\n    return metricsPayload.data.reduce((acc, curr) => {\n        const prev = acc[curr.label_metric] ? Object.assign({}, acc[curr.label_metric]) : {};\n        return Object.assign(Object.assign({}, acc), { [curr.label_metric]: Object.assign(Object.assign({}, prev), { [curr.label_measurement]: curr }) });\n    }, {});\n};\nexport const maxRate = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return 0;\n    }\n    return metricsPayload.data.length;\n};\nexport const costTypes = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return [];\n    }\n    return metricsPayload.data.reduce((acc, curr) => {\n        if (acc.includes(curr.default_cost_type)) {\n            return acc;\n        }\n        return [curr.default_cost_type, ...acc];\n    }, []);\n};\n","import axios from 'axios';\nexport const OrgTypePaths = {\n    [\"org\" /* org */]: 'organizations/aws/',\n};\nexport function runOrg(orgType, query) {\n    const path = OrgTypePaths[orgType];\n    return axios.get(`${path}?${query}`);\n}\n","export const orgStateKey = 'org';\nexport function getOrgId(orgPathsType, orgType, query) {\n    return `${orgPathsType}--${orgType}--${query}`;\n}\n","import { getOrgId, orgStateKey } from './orgCommon';\nexport const selectOrgState = (state) => state[orgStateKey];\nexport const selectOrg = (state, orgPathsType, orgType, query) => selectOrgState(state).byId.get(getOrgId(orgPathsType, orgType, query));\nexport const selectOrgFetchStatus = (state, orgPathsType, orgType, query) => selectOrgState(state).fetchStatus.get(getOrgId(orgPathsType, orgType, query));\nexport const selectOrgError = (state, orgPathsType, orgType, query) => selectOrgState(state).errors.get(getOrgId(orgPathsType, orgType, query));\n","import { runOrg } from 'api/orgs/orgUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getOrgId } from './orgCommon';\nimport { selectOrg, selectOrgFetchStatus } from './orgSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchOrgRequest = createAction('org/request')();\nexport const fetchOrgSuccess = createAction('org/success')();\nexport const fetchOrgFailure = createAction('org/failure')();\nexport function fetchOrg(orgPathsType, orgType, query) {\n    return (dispatch, getState) => {\n        if (!isOrgExpired(getState(), orgPathsType, orgType, query)) {\n            return;\n        }\n        const meta = {\n            orgId: getOrgId(orgPathsType, orgType, query),\n        };\n        dispatch(fetchOrgRequest(meta));\n        runOrg(orgPathsType, orgType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchOrgSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchOrgFailure(err, meta));\n        });\n    };\n}\nfunction isOrgExpired(state, orgPathsType, orgType, query) {\n    const orgReport = selectOrg(state, orgPathsType, orgType, query);\n    const fetchStatus = selectOrgFetchStatus(state, orgPathsType, orgType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!orgReport) {\n        return true;\n    }\n    const now = Date.now();\n    return now > orgReport.timeRequested + expirationMS;\n}\n","import { runOrg as runAwsOrg } from './awsOrgs';\nexport function runOrg(orgPathsType, orgType, query) {\n    let orgReport;\n    switch (orgPathsType) {\n        case \"aws\" /* aws */:\n            orgReport = runAwsOrg(orgType, query);\n            break;\n    }\n    return orgReport;\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchOrgFailure, fetchOrgRequest, fetchOrgSuccess } from './orgActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function orgReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchOrgRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.orgId, 1 /* inProgress */) });\n        case getType(fetchOrgSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.orgId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.orgId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.orgId, null) });\n        case getType(fetchOrgFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.orgId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.orgId, action.payload) });\n        default:\n            return state;\n    }\n}\n","export const stateKey = 'providers';\nexport const addProviderKey = 'add-provider';\nexport const awsProvidersQuery = {\n    type: 'AWS',\n};\nexport const azureProvidersQuery = {\n    type: 'AZURE',\n};\nexport const gcpProvidersQuery = {\n    type: 'GCP',\n};\nexport const ibmProvidersQuery = {\n    type: 'IBM',\n};\nexport const ocpProvidersQuery = {\n    type: 'OCP',\n};\nexport function getReportId(type, query) {\n    return `${type}--${query}`;\n}\n","import { fetchProviders as apiGetProviders } from 'api/providers';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './providersCommon';\nexport const fetchProvidersRequest = createAction('providers/fetch/request')();\nexport const fetchProvidersSuccess = createAction('providers/fetch/success')();\nexport const fetchProvidersFailure = createAction('providers/fetch/failure')();\nexport function fetchProviders(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchProvidersRequest(meta));\n        return apiGetProviders(query)\n            .then(res => {\n            dispatch(fetchProvidersSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchProvidersFailure(err, meta));\n        });\n    };\n}\nexport const clearProviderFailure = createAction('providers/clear/failure');\n","import { getType } from 'typesafe-actions';\nimport { fetchProvidersFailure, fetchProvidersRequest, fetchProvidersSuccess } from './providersActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function providersReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchProvidersRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchProvidersSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchProvidersFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { addProviderKey, getReportId, stateKey } from './providersCommon';\nexport const selectProvidersState = (state) => state[stateKey];\n// Add provider\nexport const selectAddProviderFetchStatus = (state) => selectProvidersState(state).fetchStatus.get(addProviderKey);\nexport const selectAddProviderError = (state) => selectProvidersState(state).errors.get(addProviderKey);\n// Fetch providers\nexport const selectProviders = (state, providerType, query) => selectProvidersState(state).byId.get(getReportId(providerType, query));\nexport const selectProvidersFetchStatus = (state, providerType, query) => selectProvidersState(state).fetchStatus.get(getReportId(providerType, query));\nexport const selectProvidersError = (state, providerType, query) => selectProvidersState(state).errors.get(getReportId(providerType, query));\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { getRBAC } from 'api/rbac';\nimport { intl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport { createAsyncAction } from 'typesafe-actions';\nexport const { request: fetchRbacRequest, success: fetchRbacSuccess, failure: fetchRbacFailure, } = createAsyncAction('fetch/RBAC/request', 'fetch/RBAC/success', 'fetch/RBAC/failure')();\nexport const fetchRbac = () => {\n    return (dispatch) => {\n        dispatch(fetchRbacRequest());\n        return getRBAC()\n            .then(res => {\n            dispatch(fetchRbacSuccess(res));\n        })\n            .catch(err => {\n            dispatch(addNotification({\n                title: intl.formatMessage(messages.RbacErrorTitle),\n                description: intl.formatMessage(messages.RbacErrorDescription),\n                variant: 'danger',\n                dismissable: true,\n            }));\n            dispatch(fetchRbacFailure(err));\n        });\n    };\n};\n","export async function getRBAC() {\n    const _insights = window.insights;\n    if (_insights &&\n        _insights.chrome &&\n        _insights.chrome.auth &&\n        _insights.chrome.auth.getUser &&\n        _insights.chrome.getUserPermissions) {\n        const user = await _insights.chrome.auth.getUser();\n        const permissions = await _insights.chrome.getUserPermissions();\n        return {\n            isOrgAdmin: user.identity.user.is_org_admin,\n            permissions,\n        };\n    }\n    return { isOrgAdmin: false, permissions: null };\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchRbacFailure, fetchRbacRequest, fetchRbacSuccess } from './actions';\nexport const stateKey = 'RBAC';\nexport const defaultState = {\n    isOrgAdmin: false,\n    permissions: null,\n    status: 0 /* none */,\n    error: null,\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(fetchRbacRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchRbacSuccess):\n            return Object.assign(Object.assign({}, action.payload), { status: 2 /* complete */, error: null });\n        case getType(fetchRbacFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        default:\n            return state;\n    }\n};\n","import { stateKey } from './reducer';\nexport const selectRbacState = (state) => state[stateKey];\nexport const isCostModelWritePermission = (state) => {\n    const { isOrgAdmin, permissions } = selectRbacState(state);\n    if (isOrgAdmin === true) {\n        return true;\n    }\n    if (!permissions) {\n        return false;\n    }\n    const costModelPermissions = permissions.find(item => item.permission.startsWith('cost-management'));\n    if (!costModelPermissions) {\n        return false;\n    }\n    const [app, resource, operation] = costModelPermissions.permission.split(':');\n    if (app === 'cost-management' && resource === '*' && operation === '*') {\n        return true;\n    }\n    if ((resource === 'rate' || resource === 'cost_model') && operation === 'write') {\n        return true;\n    }\n    return false;\n};\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","export const reportStateKey = 'report';\nexport function getReportId(reportPathsType, reportType, query) {\n    return `${reportPathsType}--${reportType}--${query}`;\n}\n","import { getReportId, reportStateKey } from './reportCommon';\nexport const selectReportState = (state) => state[reportStateKey];\nexport const selectReport = (state, reportPathsType, reportType, query) => selectReportState(state).byId.get(getReportId(reportPathsType, reportType, query));\nexport const selectReportFetchStatus = (state, reportPathsType, reportType, query) => selectReportState(state).fetchStatus.get(getReportId(reportPathsType, reportType, query));\nexport const selectReportError = (state, reportPathsType, reportType, query) => selectReportState(state).errors.get(getReportId(reportPathsType, reportType, query));\n","import { runReport } from 'api/reports/reportUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './reportCommon';\nimport { selectReport, selectReportFetchStatus } from './reportSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchReportRequest = createAction('report/request')();\nexport const fetchReportSuccess = createAction('report/success')();\nexport const fetchReportFailure = createAction('report/failure')();\nexport function fetchReport(reportPathsType, reportType, query) {\n    return (dispatch, getState) => {\n        if (!isReportExpired(getState(), reportPathsType, reportType, query)) {\n            return;\n        }\n        const meta = {\n            reportId: getReportId(reportPathsType, reportType, query),\n        };\n        dispatch(fetchReportRequest(meta));\n        runReport(reportPathsType, reportType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchReportSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchReportFailure(err, meta));\n        });\n    };\n}\nfunction isReportExpired(state, reportPathsType, reportType, query) {\n    const report = selectReport(state, reportPathsType, reportType, query);\n    const fetchStatus = selectReportFetchStatus(state, reportPathsType, reportType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!report) {\n        return true;\n    }\n    const now = Date.now();\n    return now > report.timeRequested + expirationMS;\n}\n","import { runReport as runAwsOcpReport } from './awsOcpReports';\nimport { runReport as runAwsReport } from './awsReports';\nimport { runReport as runAzureOcpReport } from './azureOcpReports';\nimport { runReport as runAzureReport } from './azureReports';\nimport { runReport as runGcpOcpReport } from './gcpOcpReports';\nimport { runReport as runGcpReport } from './gcpReports';\nimport { runReport as runIbmReport } from './ibmReports';\nimport { runReport as runOcpCloudReport } from './ocpCloudReports';\nimport { runReport as runOcpReport } from './ocpReports';\nimport { runReport as runOcpUsageReport } from './ocpUsageReports';\nexport function runReport(reportPathsType, reportType, query) {\n    let report;\n    switch (reportPathsType) {\n        case \"aws\" /* aws */:\n            report = runAwsReport(reportType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            report = runAwsOcpReport(reportType, query);\n            break;\n        case \"azure\" /* azure */:\n            report = runAzureReport(reportType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            report = runAzureOcpReport(reportType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            report = runGcpReport(reportType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            report = runGcpOcpReport(reportType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            report = runIbmReport(reportType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            report = runOcpReport(reportType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            report = runOcpCloudReport(reportType, query);\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            report = runOcpUsageReport(reportType, query);\n            break;\n    }\n    return report;\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchReportFailure, fetchReportRequest, fetchReportSuccess } from './reportActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function reportReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchReportRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchReportSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchReportFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","export const resourceStateKey = 'resource';\nexport function getResourceId(resourcePathsType, resourceType, query) {\n    return `${resourcePathsType}--${resourceType}--${query}`;\n}\n","import { getResourceId, resourceStateKey } from './resourceCommon';\nexport const selectResourceState = (state) => state[resourceStateKey];\nexport const selectResource = (state, resourcePathsType, resourceType, query) => selectResourceState(state).byId.get(getResourceId(resourcePathsType, resourceType, query));\nexport const selectResourceFetchStatus = (state, resourcePathsType, resourceType, query) => selectResourceState(state).fetchStatus.get(getResourceId(resourcePathsType, resourceType, query));\nexport const selectResourceError = (state, resourcePathsType, resourceType, query) => selectResourceState(state).errors.get(getResourceId(resourcePathsType, resourceType, query));\n","import { runResource } from 'api/resources/resourceUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getResourceId } from './resourceCommon';\nimport { selectResource, selectResourceFetchStatus } from './resourceSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchResourceRequest = createAction('resource/request')();\nexport const fetchResourceSuccess = createAction('resource/success')();\nexport const fetchResourceFailure = createAction('resource/failure')();\nexport function fetchResource(resourcePathsType, resourceType, query) {\n    return (dispatch, getState) => {\n        if (!isResourceExpired(getState(), resourcePathsType, resourceType, query)) {\n            return;\n        }\n        const meta = {\n            resourceId: getResourceId(resourcePathsType, resourceType, query),\n        };\n        dispatch(fetchResourceRequest(meta));\n        runResource(resourcePathsType, resourceType, query)\n            .then(res => {\n            dispatch(fetchResourceSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchResourceFailure(err, meta));\n        });\n    };\n}\nfunction isResourceExpired(state, resourcePathsType, resourceType, query) {\n    const resource = selectResource(state, resourcePathsType, resourceType, query);\n    const fetchStatus = selectResourceFetchStatus(state, resourcePathsType, resourceType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!resource) {\n        return true;\n    }\n    const now = Date.now();\n    return now > resource.timeRequested + expirationMS;\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchResourceFailure, fetchResourceRequest, fetchResourceSuccess } from './resourceActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function resourceReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchResourceRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.resourceId, 1 /* inProgress */) });\n        case getType(fetchResourceSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.resourceId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.resourceId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.resourceId, null) });\n        case getType(fetchResourceFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.resourceId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.resourceId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { fetchProviders as apiGetSources } from 'api/providers';\nimport { createAction, createAsyncAction } from 'typesafe-actions';\nexport const updateFilterToolbar = createAction('fetch/source/filter')();\nexport const { request: fetchSourcesRequest, success: fetchSourcesSuccess, failure: fetchSourcesFailure, } = createAsyncAction('fetch/source/request', 'fetch/source/success', 'fetch/source/failure')();\nexport const fetchSources = (query = '') => {\n    return (dispatch) => {\n        dispatch(fetchSourcesRequest());\n        return apiGetSources(query)\n            .then(res => {\n            dispatch(fetchSourcesSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchSourcesFailure(err));\n        });\n    };\n};\n","import { getType } from 'typesafe-actions';\nimport { fetchSourcesFailure, fetchSourcesRequest, fetchSourcesSuccess, updateFilterToolbar } from './actions';\nexport const stateKey = 'sources';\nexport const defaultState = {\n    sources: null,\n    error: null,\n    status: 0 /* none */,\n    currentFilterType: 'name',\n    currentFilterValue: '',\n    filter: '',\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(fetchSourcesRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchSourcesSuccess):\n            return Object.assign(Object.assign({}, state), { currentFilterValue: '', filter: state.currentFilterValue, status: 2 /* complete */, error: null, sources: action.payload.data });\n        case getType(fetchSourcesFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        case getType(updateFilterToolbar):\n            return Object.assign(Object.assign({}, state), action.payload);\n        default:\n            return state;\n    }\n};\n","import { selectPagination } from 'store/djangoUtils/pagination';\nimport { selectQuery } from 'store/djangoUtils/query';\nimport { stateKey } from './reducer';\nexport const sourcesState = (state) => state[stateKey];\nexport const sources = (state) => {\n    const srcs = sourcesState(state).sources;\n    if (srcs) {\n        return srcs.data;\n    }\n    return [];\n};\nexport const status = (state) => sourcesState(state).status;\nexport const error = (state) => sourcesState(state).error;\nexport const currentFilterValue = (state) => sourcesState(state).currentFilterValue;\nexport const currentFilterType = (state) => sourcesState(state).currentFilterType;\nexport const filter = (state) => sourcesState(state).filter;\nexport const query = selectQuery((state) => sourcesState(state).sources, ['name', 'type', 'offset', 'limit']);\nexport const pagination = selectPagination((state) => sourcesState(state).sources);\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/infrastructures/aws/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/aws/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/infrastructures/azure/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/azure/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/gcp/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/gcp/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/ibm/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/infrastructures/all/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","export const tagStateKey = 'tag';\nexport function getTagId(tagPathsType, tagType, query) {\n    return `${tagPathsType}--${tagType}--${query}`;\n}\n","import { getTagId, tagStateKey } from './tagCommon';\nexport const selectTagState = (state) => state[tagStateKey];\nexport const selectTag = (state, tagPathsType, tagType, query) => selectTagState(state).byId.get(getTagId(tagPathsType, tagType, query));\nexport const selectTagFetchStatus = (state, tagPathsType, tagType, query) => selectTagState(state).fetchStatus.get(getTagId(tagPathsType, tagType, query));\nexport const selectTagError = (state, tagPathsType, tagType, query) => selectTagState(state).errors.get(getTagId(tagPathsType, tagType, query));\n","import { runTag } from 'api/tags/tagUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getTagId } from './tagCommon';\nimport { selectTag, selectTagFetchStatus } from './tagSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchTagRequest = createAction('tag/request')();\nexport const fetchTagSuccess = createAction('tag/success')();\nexport const fetchTagFailure = createAction('tag/failure')();\nexport function fetchTag(tagPathsType, tagType, query) {\n    return (dispatch, getState) => {\n        if (!isTagExpired(getState(), tagPathsType, tagType, query)) {\n            return;\n        }\n        const meta = {\n            tagId: getTagId(tagPathsType, tagType, query),\n        };\n        dispatch(fetchTagRequest(meta));\n        runTag(tagPathsType, tagType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchTagSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchTagFailure(err, meta));\n        });\n    };\n}\nfunction isTagExpired(state, tagPathsType, tagType, query) {\n    const tagReport = selectTag(state, tagPathsType, tagType, query);\n    const fetchStatus = selectTagFetchStatus(state, tagPathsType, tagType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!tagReport) {\n        return true;\n    }\n    const now = Date.now();\n    return now > tagReport.timeRequested + expirationMS;\n}\n","import { runTag as runAwsOcpTag } from './awsOcpTags';\nimport { runTag as runAwsTag } from './awsTags';\nimport { runTag as runAzureOcpTag } from './azureOcpTags';\nimport { runTag as runAzureTag } from './azureTags';\nimport { runTag as runGcpOcpTag } from './gcpOcpTags';\nimport { runTag as runGcpTag } from './gcpTags';\nimport { runTag as runIbmTag } from './ibmTags';\nimport { runTag as runOcpCloudTag } from './ocpCloudTags';\nimport { runTag as runOcpTag } from './ocpTags';\nexport function runTag(tagPathsType, tagType, query) {\n    let tagReport;\n    switch (tagPathsType) {\n        case \"aws\" /* aws */:\n            tagReport = runAwsTag(tagType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            tagReport = runAwsOcpTag(tagType, query);\n            break;\n        case \"azure\" /* azure */:\n            tagReport = runAzureTag(tagType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            tagReport = runAzureOcpTag(tagType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            tagReport = runGcpTag(tagType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            tagReport = runGcpOcpTag(tagType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            tagReport = runIbmTag(tagType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            tagReport = runOcpTag(tagType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            tagReport = runOcpCloudTag(tagType, query);\n            break;\n    }\n    return tagReport;\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchTagFailure, fetchTagRequest, fetchTagSuccess } from './tagActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function tagReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchTagRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.tagId, 1 /* inProgress */) });\n        case getType(fetchTagSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.tagId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.tagId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.tagId, null) });\n        case getType(fetchTagFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.tagId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.tagId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { getType } from 'typesafe-actions';\nimport { closeProvidersModal, openProvidersModal, toggleSidebar } from './uiActions';\nexport const defaultState = {\n    isExportModalOpen: false,\n    isProvidersModalOpen: false,\n    isSidebarOpen: false,\n};\nexport const stateKey = 'ui';\nexport function uiReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(closeProvidersModal):\n            return Object.assign(Object.assign({}, state), { isProvidersModalOpen: false });\n        case getType(openProvidersModal):\n            return Object.assign(Object.assign({}, state), { isProvidersModalOpen: true });\n        case getType(toggleSidebar):\n            return Object.assign(Object.assign({}, state), { isSidebarOpen: !state.isSidebarOpen });\n        default:\n            return state;\n    }\n}\n","import { createAction } from 'typesafe-actions';\nexport const closeProvidersModal = createAction('ui/close_providers_modal')();\nexport const openProvidersModal = createAction('ui/open_providers_modal')();\nexport const toggleSidebar = createAction('ui/toggle_sidebar')();\nexport const resetState = createAction('ui/reset_state')();\nexport function resetReportState() {\n    return dispatch => {\n        dispatch(resetState());\n    };\n}\n","export const stateKey = 'userAccess';\nexport const userAccessKey = 'user-access';\nexport const allUserAccessQuery = {\n    type: '',\n};\nexport const awsUserAccessQuery = {\n    type: 'AWS',\n};\nexport const azureUserAccessQuery = {\n    type: 'AZURE',\n};\nexport const costModelUserAccessQuery = {\n    type: 'cost_model',\n};\nexport const ocpUserAccessQuery = {\n    type: 'OCP',\n};\nexport const gcpUserAccessQuery = {\n    type: 'GCP',\n};\nexport const ibmUserAccessQuery = {\n    type: 'IBM',\n    beta: true,\n};\nexport function getReportId(type, query) {\n    return `${type}--${query}`;\n}\n","import { fetchUserAccess as apiGetUserAccess } from 'api/userAccess';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './userAccessCommon';\nexport const fetchUserAccessRequest = createAction('userAccess/fetch/request')();\nexport const fetchUserAccessSuccess = createAction('userAccess/fetch/success')();\nexport const fetchUserAccessFailure = createAction('userAccess/fetch/failure')();\nexport function fetchUserAccess(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchUserAccessRequest(meta));\n        return apiGetUserAccess(query)\n            .then(res => {\n            dispatch(fetchUserAccessSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchUserAccessFailure(err, meta));\n        });\n    };\n}\n","import axios from 'axios';\n// If the user-access API is called without a query parameter, all types are returned in the response\nexport function fetchUserAccess(query) {\n    const insights = window.insights;\n    const queryString = query ? `?${query}` : '';\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`user-access/${queryString}`);\n        });\n    }\n    else {\n        return axios.get(`user-access/${queryString}`);\n    }\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchUserAccessFailure, fetchUserAccessRequest, fetchUserAccessSuccess } from './userAccessActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function userAccessReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchUserAccessRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchUserAccessSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchUserAccessFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { getReportId, stateKey } from './userAccessCommon';\nexport const selectUserAccessState = (state) => state[stateKey];\n// Fetch userAccess\nexport const selectUserAccess = (state, providerType, query) => selectUserAccessState(state).byId.get(getReportId(providerType, query));\nexport const selectUserAccessFetchStatus = (state, providerType, query) => selectUserAccessState(state).fetchStatus.get(getReportId(providerType, query));\nexport const selectUserAccessError = (state, providerType, query) => selectUserAccessState(state).errors.get(getReportId(providerType, query));\n","export const getBaseName = pathname => {\n    let release = '/';\n    const pathName = pathname.split('/');\n    pathName.shift();\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n    if (pathName[1]) {\n        return `${release}${pathName[0]}/${pathName[1]}`;\n    }\n    return `${release}${pathName[0]}`;\n};\n"],"sourceRoot":""}