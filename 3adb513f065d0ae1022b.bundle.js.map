{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardBase.tsx","webpack://koku-ui/./src/pages/views/overview/components/chartComparison.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidgetBase.tsx","webpack://koku-ui/./src/pages/views/overview/awsCloudDashboard/awsCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsCloudDashboard/awsCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureCloudDashboard/azureCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureCloudDashboard/azureCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpSupplementaryDashboard/ocpSupplementaryDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpSupplementaryDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpUsageDashboard/ocpUsageDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpUsageDashboard/ocpUsageDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpUsageDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/overview.styles.ts","webpack://koku-ui/./src/pages/views/overview/overview.tsx","webpack://koku-ui/./src/pages/views/overview/index.ts"],"names":["getUserAccessQuery","query","stringify","encode","indices","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","PerspectiveBase","super","arguments","this","defaultState","isPerspectiveOpen","state","Object","assign","getDropDownItems","options","props","map","option","DropdownItem","component","key","value","onClick","handleClick","t","label","getCurrentLabel","currentItem","onItemClicked","handleSelect","setState","handleToggle","isDisabled","dropdownItems","style","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","Perspective","withTranslation","DashboardBase","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","isChartComparisonOpen","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","tabs","marginTop","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","currentInfrastructureData","previousInfrastructureData","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","forecastInfrastructureData","computedForecastInfrastructureItem","ReportSummaryComponent","currentInfrastructureCostData","forecastConeData","forecastInfrastructureConeData","formatDatumValue","formatValue","formatDatumOptions","formatOptions","previousInfrastructureCostData","showForecast","undefined","currentData","previousData","showUsageLegendLabel","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","length","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","push","unshift","confidence_max","confidence_min","infrastructure","supplementary","title","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","Link","to","handleInsightsNavClick","getDetailsLinkTitle","groupBy","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","subTitle","getSubTitle","getTabs","getTitle","today","month","endDate","format","startDate","startOfMonth","count","getDate","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","id","toString","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","appNavId","insights","chrome","appNavClick","secondaryNav","event","tabIndex","updateTab","fetchForecasts","fetchReports","mapStateToProps","widget","awsCloudDashboard","queries","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsCloudDashboardWidget","connect","awsDashboard","AwsDashboardWidget","azureCloudDashboard","AzureCloudDashboardWidget","azureDashboard","AzureDashboardWidget","gcpDashboard","GcpDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","ocpSupplementaryDashboard","OcpSupplementaryDashboardWidget","ocpUsageDashboard","OcpUsageDashboardWidget","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","perspective","global_spacer_lg","ocpOptions","infrastructureAllCloudOptions","infrastructureAwsOptions","infrastructureAwsCloudOptions","infrastructureAzureOptions","infrastructureAzureCloudOptions","infrastructureGcpOptions","infrastructureOcpOptions","OverviewBase","getAvailableTabs","isAwsAvailable","isAzureAvailable","isGcpAvailable","isOcpAvailable","isOcpCloudAvailable","contentRef","getCurrentTab","getDefaultInfrastructurePerspective","getDefaultOcpPerspective","getPerspective","currentInfrastructurePerspective","currentOcpPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","TabContent","ref","hasCurrentMonthData","providers","result","provider","current_month_data","awsProviders","azureProviders","gcpProviders","ocpProviders","emptyTab","noData","showReload","userAccess","find","d","access","prevProps","awsProvidersFetchStatus","azureProvidersFetchStatus","gcpProvidersFetchStatus","ocpProvidersFetchStatus","userAccessFetchStatus","isLoading","noAwsProviders","noAzureProviders","noGcpProviders","noOcpProviders","noProviders","className","Title","headingLevel","size","Popover","enableFlip","bodyContent","Button","variant","ButtonVariant","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ocpProvidersQueryString","userAccessQueryString","userAccessError"],"mappings":"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","file":"3adb513f065d0ae1022b.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled, t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = withTranslation()(PerspectiveBase);\nexport { Perspective };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isChartComparisonOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isChartComparisonOpen: !this.state.isChartComparisonOpen,\n            });\n        };\n        this.handleToggle = isChartComparisonOpen => {\n            this.setState({\n                isChartComparisonOpen,\n            });\n        };\n    }\n    render() {\n        // const { t } = this.props;\n        const { isChartComparisonOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isChartComparisonOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst ChartComparison = withTranslation()(ChartComparisonBase);\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformForecast, transformForecastCone, transformReport, } from 'components/charts/common/chartDatumUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport { format, getDate, getMonth, startOfMonth } from 'date-fns';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        this.getChartComparison = () => {\n            const { t, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getUnits();\n            const cumulativeTitle = t(trend.titleKey, { units: t(`units.${units}`) });\n            const dailyTitle = t(trend.dailyTitleKey, { units: t(`units.${units}`) });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* cumulative */ },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, type, 'date', 'infrastructure', computedReportItemValue);\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const forecastInfrastructureData = this.getForecastData(currentReport, trend.computedForecastInfrastructureItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, forecastInfrastructureConeData: forecastInfrastructureData.forecastConeData, forecastInfrastructureData: forecastInfrastructureData.forecastData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getUnits();\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: units })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                    }\n                    // For cumulative data, show continuous line from current report to forecast\n                    if (type === 0 /* rolling */) {\n                        newForecast.data.unshift({\n                            date: lastReported,\n                            values: [\n                                {\n                                    date: lastReported,\n                                    cost: {\n                                        confidence_max: {\n                                            value: 0,\n                                        },\n                                        confidence_min: {\n                                            value: 0,\n                                        },\n                                        total: {\n                                            value: total,\n                                            units: 'USD',\n                                        },\n                                    },\n                                    infrastructure: {\n                                        confidence_max: {\n                                            value: 0,\n                                        },\n                                        confidence_min: {\n                                            value: 0,\n                                        },\n                                        total: {\n                                            value: total,\n                                            units: 'USD',\n                                        },\n                                    },\n                                    supplementary: {\n                                        confidence_max: {\n                                            value: 0,\n                                        },\n                                        confidence_min: {\n                                            value: 0,\n                                        },\n                                        total: {\n                                            value: total,\n                                            units: 'USD',\n                                        },\n                                    },\n                                },\n                            ],\n                        });\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            // Cost data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: units }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            const units = this.getUnits();\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: details.units, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab)));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = format(today, 'd');\n            const startDate = format(startOfMonth(today), 'd');\n            return t('dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: details.units ? details.units : this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = format(today, 'Do');\n            const startDate = format(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            let units;\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                units = hasUsage ? unitLookupKey(currentReport.meta.total.usage.units) : '';\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                units = hasCost ? unitLookupKey(currentReport.meta.total[computedReportItem][computedReportItemValue].units) : '';\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleInsightsNavClick = () => {\n            const { details } = this.props;\n            if (details.appNavId) {\n                insights.chrome.appNavClick({\n                    id: details.appNavId,\n                    secondaryNav: true,\n                });\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardActions, awsCloudDashboardSelectors, } from 'store/dashboard/awsCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsCloudDashboardActions.fetchWidgetReports,\n    updateTab: awsCloudDashboardActions.changeWidgetTab,\n};\nconst AwsCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardSelectors } from 'store/dashboard/awsCloudDashboard';\nimport { AwsCloudDashboardWidget } from './awsCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsCloudDashboardWidget,\n        selectWidgets: awsCloudDashboardSelectors.selectWidgets(state),\n        widgets: awsCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsCloudDashboard;\n","import AwsCloudDashboard from './awsCloudDashboard';\nexport default AwsCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsDashboard;\n","import AwsDashboard from './awsDashboard';\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardActions, azureCloudDashboardSelectors, } from 'store/dashboard/azureCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureCloudDashboardActions.fetchWidgetReports,\n    updateTab: azureCloudDashboardActions.changeWidgetTab,\n};\nconst AzureCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardSelectors } from 'store/dashboard/azureCloudDashboard';\nimport { AzureCloudDashboardWidget } from './azureCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureCloudDashboardWidget,\n        selectWidgets: azureCloudDashboardSelectors.selectWidgets(state),\n        widgets: azureCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureCloudDashboard;\n","import AzureCloudDashboard from './azureCloudDashboard';\nexport default AzureCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureDashboard;\n","import AzureDashboard from './azureDashboard';\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default GcpDashboard;\n","import GcpDashboard from './gcpDashboard';\nexport default GcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpCloudDashboard;\n","import OcpCloudDashboard from './ocpCloudDashboard';\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpDashboard;\n","import OcpDashboard from './ocpDashboard';\nexport default OcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardActions, ocpSupplementaryDashboardSelectors, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpSupplementaryDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpSupplementaryDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpSupplementaryDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpSupplementaryDashboardActions.fetchWidgetReports,\n    updateTab: ocpSupplementaryDashboardActions.changeWidgetTab,\n};\nconst OcpSupplementaryDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpSupplementaryDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardSelectors } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { OcpSupplementaryDashboardWidget } from './ocpSupplementaryDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpSupplementaryDashboardWidget,\n        selectWidgets: ocpSupplementaryDashboardSelectors.selectWidgets(state),\n        widgets: ocpSupplementaryDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpSupplementaryDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpSupplementaryDashboard;\n","import OcpSupplementaryDashboard from './ocpSupplementaryDashboard';\nexport default OcpSupplementaryDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardActions, ocpUsageDashboardSelectors, } from 'store/dashboard/ocpUsageDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpUsageDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpUsageDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpUsageDashboardActions.fetchWidgetReports,\n    updateTab: ocpUsageDashboardActions.changeWidgetTab,\n};\nconst OcpUsageDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpUsageDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardSelectors } from 'store/dashboard/ocpUsageDashboard';\nimport { OcpUsageDashboardWidget } from './ocpUsageDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpUsageDashboardWidget,\n        selectWidgets: ocpUsageDashboardSelectors.selectWidgets(state),\n        widgets: ocpUsageDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpUsageDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpUsageDashboard;\n","import OcpUsageDashboard from './ocpUsageDashboard';\nexport default OcpUsageDashboard;\n","import global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    perspective: {\n        marginTop: global_spacer_lg.value,\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport AwsCloudDashboard from 'pages/views/overview/awsCloudDashboard';\nimport AwsDashboard from 'pages/views/overview/awsDashboard';\nimport AzureCloudDashboard from 'pages/views/overview/azureCloudDashboard';\nimport AzureDashboard from 'pages/views/overview/azureDashboard';\nimport GcpDashboard from 'pages/views/overview/gcpDashboard';\nimport OcpCloudDashboard from 'pages/views/overview/ocpCloudDashboard';\nimport OcpDashboard from 'pages/views/overview/ocpDashboard';\nimport OcpSupplementaryDashboard from 'pages/views/overview/ocpSupplementaryDashboard';\nimport OcpUsageDashboard from 'pages/views/overview/ocpUsageDashboard';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [\n    { label: 'overview.perspective.all', value: 'all' },\n    { label: 'overview.perspective.supplementary', value: 'supplementary' },\n];\n// Infrastructure all cloud options\nconst infrastructureAllCloudOptions = [{ label: 'overview.perspective.all_cloud', value: 'all_cloud' }];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: 'overview.perspective.aws', value: 'aws' }];\n// Infrastructure AWS cloud options\nconst infrastructureAwsCloudOptions = [{ label: 'overview.perspective.aws_cloud', value: 'aws_cloud' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: 'overview.perspective.azure', value: 'azure' }];\n// Infrastructure Azure cloud options\nconst infrastructureAzureCloudOptions = [{ label: 'overview.perspective.azure_cloud', value: 'azure_cloud' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: 'overview.perspective.gcp', value: 'gcp' }];\n// Infrastructure Ocp options\nconst infrastructureOcpOptions = [{ label: 'overview.perspective.ocp_usage', value: 'ocp_usage' }];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isGcpAvailable = this.isGcpAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            if (isOcpAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (isAwsAvailable || isAzureAvailable || isGcpAvailable || isOcpCloudAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isGcpAvailable = this.isGcpAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            const showOcpOnly = isOcpAvailable && !(isAwsAvailable || isAzureAvailable || isGcpAvailable || isOcpCloudAvailable);\n            const showInfrastructureOnly = !isOcpAvailable && (isAwsAvailable || isAzureAvailable || isGcpAvailable || isOcpCloudAvailable);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isGcpAvailable = this.isGcpAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all_cloud\" /* allCloud */;\n            }\n            if (isAwsAvailable) {\n                return \"aws\" /* aws */;\n            }\n            if (isAzureAvailable) {\n                return \"azure\" /* azure */;\n            }\n            if (isGcpAvailable) {\n                return \"gcp\" /* gcp */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all\" /* all */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isGcpAvailable = this.isGcpAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (!(isAwsAvailable || isAzureAvailable || isGcpAvailable || isOcpAvailable)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (isOcpAvailable) {\n                    options.push(...infrastructureAllCloudOptions);\n                }\n                if (isAwsAvailable) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (isOcpAvailable && isAwsAvailable) {\n                    options.push(...infrastructureAwsCloudOptions);\n                }\n                if (isGcpAvailable) {\n                    options.push(...infrastructureGcpOptions);\n                }\n                if (isAzureAvailable) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (isOcpAvailable && isAzureAvailable) {\n                    options.push(...infrastructureAzureCloudOptions);\n                }\n                if (isOcpAvailable) {\n                    options.push(...infrastructureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        // Ensure at least one source provider has data available\n        this.hasCurrentMonthData = (providers) => {\n            let result = false;\n            if (providers && providers.data) {\n                for (const provider of providers.data) {\n                    if (provider.current_month_data) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, gcpProviders, ocpProviders } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"all_cloud\" /* allCloud */) {\n                    return this.hasCurrentMonthData(ocpProviders) ? React.createElement(OcpCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    return this.hasCurrentMonthData(awsProviders) ? React.createElement(AwsDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_cloud\" /* awsCloud */) {\n                    return this.hasCurrentMonthData(awsProviders) ? React.createElement(AwsCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* gcp */) {\n                    return this.hasCurrentMonthData(gcpProviders) ? React.createElement(GcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    return this.hasCurrentMonthData(azureProviders) ? React.createElement(AzureDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_cloud\" /* azureCloud */) {\n                    return this.hasCurrentMonthData(azureProviders) ? React.createElement(AzureCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ocp_usage\" /* ocpUsage */) {\n                    return this.hasCurrentMonthData(ocpProviders) ? React.createElement(OcpUsageDashboard, null) : noData;\n                }\n                else {\n                    return this.hasCurrentMonthData(ocpProviders) ? React.createElement(OcpCloudDashboard, null) : noData; // default\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                if (currentOcpPerspective === \"all\" /* all */) {\n                    return this.hasCurrentMonthData(ocpProviders) ? React.createElement(OcpDashboard, null) : noData;\n                }\n                else if (currentOcpPerspective === \"supplementary\" /* supplementary */) {\n                    return this.hasCurrentMonthData(ocpProviders) ? React.createElement(OcpSupplementaryDashboard, null) : noData;\n                }\n                else {\n                    return this.hasCurrentMonthData(ocpProviders) ? React.createElement(OcpDashboard, null) : noData; // default\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return t('overview.infrastructure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            const data = userAccess.data.find(d => d.type === \"aws\" /* aws */);\n            const isUserAccessAllowed = data && data.access;\n            // providers API returns empty data array for no sources\n            return (isUserAccessAllowed &&\n                awsProviders !== undefined &&\n                awsProviders.meta !== undefined &&\n                awsProviders.meta.count > 0);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            const data = userAccess.data.find(d => d.type === \"azure\" /* azure */);\n            const isUserAccessAllowed = data && data.access;\n            // providers API returns empty data array for no sources\n            return (isUserAccessAllowed &&\n                azureProviders !== undefined &&\n                azureProviders.meta !== undefined &&\n                azureProviders.meta.count > 0);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            const data = userAccess.data.find(d => d.type === \"gcp\" /* gcp */);\n            const isUserAccessAllowed = data && data.access;\n            // providers API returns empty data array for no sources\n            return (isUserAccessAllowed &&\n                gcpProviders !== undefined &&\n                gcpProviders.meta !== undefined &&\n                gcpProviders.meta.count > 0);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            const data = userAccess.data.find(d => d.type === \"ocp\" /* ocp */);\n            const isUserAccessAllowed = data && data.access;\n            // providers API returns empty data array for no sources\n            return (isUserAccessAllowed &&\n                ocpProviders !== undefined &&\n                ocpProviders.meta !== undefined &&\n                ocpProviders.meta.count > 0);\n        };\n        this.isOcpCloudAvailable = () => {\n            return this.isAwsAvailable() && this.isOcpAvailable();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { awsProviders, azureProviders, gcpProviders, ocpProviders, userAccess } = this.props;\n        // Note: User access and providers are fetched via the Permissions and InactiveSources components used by all routes\n        if (prevProps.userAccess !== userAccess ||\n            prevProps.awsProviders !== awsProviders ||\n            prevProps.azureProviders !== azureProviders ||\n            prevProps.gcpProviders !== gcpProviders ||\n            prevProps.ocpProviders !== ocpProviders) {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ocpProvidersFetchStatus, userAccessFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */;\n        // Test for no providers\n        const noAwsProviders = !this.isAwsAvailable() && awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && azureProvidersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && gcpProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noOcpProviders;\n        const title = t('navigation.overview');\n        if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light headerOverride}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { headingLevel: \"h2\", size: \"2xl\" },\n                        t('overview.title'),\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.gcp')),\n                                    React.createElement(\"p\", null, t('overview.gcp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null)))))),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.perspective }, this.getPerspective())),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst Overview = withTranslation()(connect(mapStateToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n"],"sourceRoot":""}