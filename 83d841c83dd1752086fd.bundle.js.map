{"version":3,"file":"83d841c83dd1752086fd.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/state/noData/index.ts","webpack://koku-ui/./src/pages/state/notAvailable/notAvailable.tsx","webpack://koku-ui/./src/pages/state/notAvailable/index.ts","webpack://koku-ui/./src/pages/views/components/resourceTypeahead/resourceSelect.tsx","webpack://koku-ui/./src/pages/views/components/resourceTypeahead/resourceTypeahead.tsx","webpack://koku-ui/./src/pages/views/components/dataToolbar/dataToolbar.styles.ts","webpack://koku-ui/./src/pages/views/components/dataToolbar/tagValue.tsx","webpack://koku-ui/./src/pages/views/components/dataToolbar/dataToolbar.tsx","webpack://koku-ui/./src/pages/views/components/export/exportModal.styles.ts","webpack://koku-ui/./src/pages/views/components/export/exportSubmit.tsx","webpack://koku-ui/./src/pages/views/components/export/exportModal.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupBy.styles.ts","webpack://koku-ui/./src/pages/views/components/groupBy/groupByOrg.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupByTag.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupBy.tsx","webpack://koku-ui/./src/pages/views/details/components/actions/actions.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdown.styles.ts","webpack://koku-ui/./src/pages/views/details/components/tag/tag.styles.ts","webpack://koku-ui/./src/pages/views/details/components/tag/tagView.tsx","webpack://koku-ui/./src/pages/views/details/components/tag/tagModal.tsx","webpack://koku-ui/./src/pages/views/details/components/tag/tagLink.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownHeader.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownBase.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/cluster.styles.ts","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterModal.styles.ts","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterView.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterModal.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/cluster.tsx","webpack://koku-ui/./src/pages/views/details/components/costChart/costChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/costChart/costChart.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModal.styles.ts","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModalView.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModal.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryCard.styles.ts","webpack://koku-ui/./src/pages/views/details/components/summary/summaryCard.tsx","webpack://koku-ui/./src/pages/views/details/components/usageChart/usageChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/usageChart/usageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/costOverview/costOverviewBase.tsx","webpack://koku-ui/./src/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack://koku-ui/./src/components/charts/historicalCostChart/historicalCostChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataCostChart.tsx","webpack://koku-ui/./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack://koku-ui/./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack://koku-ui/./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack://koku-ui/./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataBase.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/utils/groupBy.ts","webpack://koku-ui/./src/pages/views/utils/paths.ts","webpack://koku-ui/./src/pages/views/utils/query.ts","webpack://koku-ui/./src/testIds.ts","webpack://koku-ui/./src/utils/equal.ts"],"sourcesContent":["import NoData from './noData';\nexport default NoData;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(Unavailable, null))));\n};\nexport default withRouter(NotAvailable);\n","import NotAvailable from './notAvailable';\nexport default NotAvailable;\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { resourceActions, resourceSelectors } from 'store/resources';\nclass ResourceSelectBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            createdOptions: [],\n            isSelectExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getOptions = () => {\n            const { resource, resourceFetchStatus, search } = this.props;\n            const { createdOptions } = this.state;\n            let options = [];\n            if (resource && resource.data && resource.data.length > 0 && resourceFetchStatus !== 1 /* inProgress */) {\n                options = resource.data.map(item => {\n                    const value = !isNaN(search) ? item.value : item.account_alias || item.cluster_alias || item.value;\n                    return {\n                        key: value,\n                        name: value,\n                    };\n                });\n            }\n            if (createdOptions && createdOptions.length) {\n                const moreOptions = createdOptions.map(val => {\n                    return {\n                        key: val,\n                        name: val,\n                    };\n                });\n                options = [...options, ...moreOptions];\n            }\n            return options;\n        };\n        this.getSelectOptions = () => {\n            const options = this.getOptions();\n            return options.map(option => {\n                return React.createElement(SelectOption, { key: option.key, value: option.key });\n            });\n        };\n        this.handleOnCreateOption = value => {\n            const { createdOptions } = this.state;\n            if (value.trim() === '') {\n                return;\n            }\n            let options = [...createdOptions];\n            if (options.length > 4) {\n                options = options.slice(1, options.length);\n            }\n            options.push(value);\n            this.setState({\n                createdOptions: options,\n            });\n        };\n        this.handleOnClear = () => {\n            const { onSearchChanged } = this.props;\n            if (onSearchChanged) {\n                onSearchChanged(undefined);\n            }\n            this.setState({\n                isSelectExpanded: false,\n            });\n        };\n        this.handleOnFilter = event => {\n            if (event === null) {\n                return null;\n            }\n            return this.getSelectOptions();\n        };\n        this.handleOnSelect = (event, value) => {\n            const { onSelect } = this.props;\n            if (value.trim() === '') {\n                return;\n            }\n            if (onSelect) {\n                onSelect(value);\n            }\n            this.setState({\n                isSelectExpanded: !this.state.isSelectExpanded,\n            });\n        };\n        this.handleOnToggle = isOpen => {\n            this.setState({\n                isSelectExpanded: isOpen,\n            });\n        };\n        this.handleOnTypeaheadInputChanged = value => {\n            const { onSearchChanged } = this.props;\n            onSearchChanged(value);\n        };\n        this.handleOnClear = this.handleOnClear.bind(this);\n        this.handleOnCreateOption = this.handleOnCreateOption.bind(this);\n        this.handleOnFilter = this.handleOnFilter.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnTypeaheadInputChanged = this.handleOnTypeaheadInputChanged.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchResource, resourceFetchStatus, resourcePathsType, resourceType, search } = this.props;\n        if (search && prevProps.search !== search && resourceFetchStatus !== 1 /* inProgress */) {\n            const query = {\n                search,\n            };\n            const queryString = getQuery(query);\n            fetchResource(resourcePathsType, resourceType, queryString);\n        }\n    }\n    render() {\n        const { intl, isDisabled, resourceType } = this.props;\n        const { isSelectExpanded } = this.state;\n        const selectOptions = this.getSelectOptions();\n        return (React.createElement(Select, { isCreatable: true, isDisabled: isDisabled, isInputValuePersisted: false, isOpen: isSelectExpanded, onCreateOption: this.handleOnCreateOption, onClear: this.handleOnClear, onFilter: this.handleOnFilter, onSelect: this.handleOnSelect, onToggle: this.handleOnToggle, onTypeaheadInputChanged: this.handleOnTypeaheadInputChanged, placeholderText: intl.formatMessage(messages.FilterByPlaceholder, { value: resourceType }), typeAheadAriaLabel: intl.formatMessage(messages.FilterByInputAriaLabel, { value: resourceType }), variant: SelectVariant.typeahead }, selectOptions));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { resourcePathsType, resourceType, search }) => {\n    const query = {\n        search,\n    };\n    const queryString = getQuery(query);\n    const resource = resourceSelectors.selectResource(state, resourcePathsType, resourceType, queryString);\n    const resourceFetchStatus = resourceSelectors.selectResourceFetchStatus(state, resourcePathsType, resourceType, queryString);\n    return {\n        resource,\n        resourceFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchResource: resourceActions.fetchResource,\n};\nconst ResourceSelect = injectIntl(connect(mapStateToProps, mapDispatchToProps)(ResourceSelectBase));\nexport { ResourceSelect };\n","import React from 'react';\nimport { noop } from 'utils/noop';\nimport { ResourceSelect } from './resourceSelect';\nexport class ResourceTypeahead extends React.Component {\n    constructor(props) {\n        super(props);\n        this.searchTimeout = noop;\n        this.defaultState = {\n        // TBD ...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleOnSearch = (value) => {\n            clearTimeout(this.searchTimeout);\n            // Delay was 750ms, but reduced -- https://issues.redhat.com/browse/COST-1742\n            this.searchTimeout = setTimeout(() => {\n                this.setState({\n                    currentSearch: value,\n                });\n            }, 625);\n        };\n        this.handleOnSelect = (value) => {\n            const { onSelect } = this.props;\n            if (onSelect) {\n                onSelect(value);\n            }\n            this.setState({\n                currentSearch: undefined,\n            });\n        };\n        this.handleOnSearch = this.handleOnSearch.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { isDisabled, resourcePathsType, resourceType } = this.props;\n        const { currentSearch } = this.state;\n        return (React.createElement(ResourceSelect, { isDisabled: isDisabled, onSearchChanged: this.handleOnSearch, onSelect: this.handleOnSelect, resourcePathsType: resourcePathsType, resourceType: resourceType, search: currentSearch }));\n    }\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Button, ButtonVariant, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { getQuery, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { intl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nconst tagReportType = \"tag\" /* tag */;\n// If the number of tag keys are greater or equal, then show text input Vs select\n// See https://github.com/project-koku/koku/pull/2069\nconst tagKeyValueLimit = 50;\nclass TagValueBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isTagValueExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.onTagValueChange = value => {\n            const { onTagValueInputChange } = this.props;\n            this.setState({ tagKeyValueInput: value }, () => {\n                if (onTagValueInputChange) {\n                    onTagValueInputChange(value);\n                }\n            });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueExpanded: isOpen,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, tagQueryString, tagReportFetchStatus, tagReportPathsType } = this.props;\n        if (tagReportFetchStatus !== 1 /* inProgress */) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, tagQueryString, tagReportFetchStatus, tagReportPathsType } = this.props;\n        if ((prevProps.tagQueryString !== tagQueryString || prevProps.tagReportPathsType !== tagReportPathsType) &&\n            tagReportFetchStatus !== 1 /* inProgress */) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n    }\n    getTagValueOptions() {\n        const { tagKey, tagReport } = this.props;\n        let data = [];\n        if (tagReport && tagReport.data) {\n            data = [...new Set([...tagReport.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (tagKey === tag.key && tag.values) {\n                    options = tag.values.map(val => {\n                        return {\n                            key: val,\n                            name: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { isDisabled, onTagValueInput, onTagValueSelect, selections, tagKeyValue } = this.props;\n        const { isTagValueExpanded } = this.state;\n        const selectOptions = this.getTagValueOptions().map(selectOption => {\n            return React.createElement(SelectOption, { key: selectOption.key, value: selectOption.key });\n        });\n        if (selectOptions.length > tagKeyValueLimit) {\n            return (React.createElement(InputGroup, null,\n                React.createElement(TextInput, { isDisabled: isDisabled, name: \"tagkeyvalue-input\", id: \"tagkeyvalue-input\", type: \"search\", \"aria-label\": intl.formatMessage(messages.FilterByTagValueAriaLabel), onChange: this.onTagValueChange, value: tagKeyValue, placeholder: intl.formatMessage(messages.FilterByTagValueInputPlaceholder), onKeyDown: evt => onTagValueInput(evt) }),\n                React.createElement(Button, { isDisabled: isDisabled, variant: ButtonVariant.control, \"aria-label\": intl.formatMessage(messages.FilterByTagValueButtonAriaLabel), onClick: evt => onTagValueInput(evt) },\n                    React.createElement(SearchIcon, null))));\n        }\n        return (React.createElement(Select, { isDisabled: isDisabled, variant: SelectVariant.checkbox, \"aria-label\": intl.formatMessage(messages.FilterByTagValueAriaLabel), onToggle: this.onTagValueToggle, onSelect: onTagValueSelect, selections: selections, isOpen: isTagValueExpanded, placeholderText: intl.formatMessage(messages.FilterByTagValuePlaceholder) }, selectOptions));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagKey, tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const endDate = query.end_date;\n    const startDate = query.start_date;\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const tagKeyFilter = tagKey\n        ? {\n            key: tagKey,\n        }\n        : {};\n    const tagQuery = endDate && startDate\n        ? {\n            start_date: startDate,\n            end_date: endDate,\n            filter: Object.assign({}, tagKeyFilter),\n        }\n        : {\n            filter: Object.assign({ resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }, tagKeyFilter),\n        };\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery(Object.assign({}, tagQuery));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    return {\n        endDate,\n        groupBy,\n        groupByValue,\n        startDate,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagValueConnect = connect(mapStateToProps, mapDispatchToProps)(TagValueBase);\nconst TagValue = injectIntl(TagValueConnect);\nexport { TagValue };\n// https://stage.foo.redhat.com:1337/api/cost-management/v1/tags/openshift/?start_date=2021-11-01&end_date=2021-11-08&key=environment&filter[tag:environment]=Development&filter[project]=*\n// https://stage.foo.redhat.com:1337/api/cost-management/v1/reports/openshift/costs/?filter[limit]=10&filter[offset]=0&filter[tag:environment]=Development&group_by[project]=*&end_date=2021-11-08&start_date=2021-11-01\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport './dataToolbar.scss';\nimport { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, DropdownToggleCheckbox, InputGroup, Select, SelectOption, SelectVariant, TextInput, Toolbar, ToolbarContent, ToolbarFilter, ToolbarGroup, ToolbarItem, ToolbarToggleGroup, } from '@patternfly/react-core';\nimport { ExportIcon } from '@patternfly/react-icons/dist/esm/icons/export-icon';\nimport { FilterIcon } from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { orgUnitIdKey, orgUnitNameKey, tagKey, tagPrefix } from 'api/queries/query';\nimport { isResourceTypeValid } from 'api/resources/resourceUtils';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport { uniq, uniqBy } from 'lodash';\nimport { ResourceTypeahead } from 'pages/views/components/resourceTypeahead/resourceTypeahead';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './dataToolbar.styles';\nimport { TagValue } from './tagValue';\nconst defaultFilters = {\n    tag: {},\n};\nexport class DataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isBulkSelectOpen: false,\n            isCategorySelectOpen: false,\n            isOrgUnitSelectExpanded: false,\n            isTagValueDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n            tagKeyValueInput: '',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy, query } = this.props;\n            if (!categoryOptions) {\n                return 'name';\n            }\n            if (query && query.group_by && query.group_by[orgUnitIdKey]) {\n                return orgUnitIdKey;\n            }\n            for (const option of categoryOptions) {\n                if (groupBy === option.key || (groupBy && groupBy.indexOf(tagPrefix) !== -1 && option.key === tagKey)) {\n                    return option.key;\n                }\n            }\n            return categoryOptions[0].key;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key]) ? [...query.filter_by[key]] : [query.filter_by[key]];\n                    if (key.indexOf(tagPrefix) !== -1) {\n                        filters.tag[key.substring(tagPrefix.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, chip) => {\n            // Todo: workaround for https://github.com/patternfly/patternfly-react/issues/3552\n            // This prevents us from using a localized string, if necessary\n            const filterType = type && type.key ? type.key : type;\n            const id = chip && chip.key ? chip.key : chip;\n            if (filterType) {\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else if (prevState.filters[filterType]) {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType] ? `${tagPrefix}${filterType}` : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        // Bulk select\n        this.getBulkSelect = () => {\n            const { intl, isAllSelected, isBulkSelectDisabled, isDisabled, itemsPerPage, itemsTotal, selectedItems } = this.props;\n            const { isBulkSelectOpen } = this.state;\n            const numSelected = isAllSelected ? itemsTotal : selectedItems ? selectedItems.length : 0;\n            const allSelected = (isAllSelected || numSelected === itemsTotal) && itemsTotal > 0;\n            const anySelected = numSelected > 0;\n            const someChecked = anySelected ? null : false;\n            const isChecked = allSelected ? true : someChecked;\n            const dropdownItems = [\n                React.createElement(DropdownItem, { key: \"item-1\", onClick: () => this.handleOnBulkSelectClicked('none') }, intl.formatMessage(messages.ToolBarBulkSelectNone)),\n                React.createElement(DropdownItem, { key: \"item-2\", onClick: () => this.handleOnBulkSelectClicked('page') }, intl.formatMessage(messages.ToolBarBulkSelectPage, { value: itemsPerPage })),\n                React.createElement(DropdownItem, { key: \"item-3\", onClick: () => this.handleOnBulkSelectClicked('all') }, intl.formatMessage(messages.ToolBarBulkSelectAll, { value: itemsTotal })),\n            ];\n            return (React.createElement(Dropdown, { onSelect: this.handleOnBulkSelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled || isBulkSelectDisabled, splitButtonItems: [\n                        React.createElement(DropdownToggleCheckbox, { id: \"bulk-select\", key: \"bulk-select\", \"aria-label\": intl.formatMessage(anySelected ? messages.ToolBarBulkSelectAriaDeselect : messages.ToolBarBulkSelectAriaSelect), isChecked: isChecked, onClick: () => {\n                                anySelected ? this.handleOnBulkSelectClicked('none') : this.handleOnBulkSelectClicked('all');\n                            } }),\n                    ], onToggle: this.handleOnBulkSelectToggle }, numSelected !== 0 && (React.createElement(React.Fragment, null, intl.formatMessage(messages.Selected, { value: numSelected })))), isOpen: isBulkSelectOpen, dropdownItems: dropdownItems }));\n        };\n        this.handleOnBulkSelectClicked = (action) => {\n            const { onBulkSelected } = this.props;\n            if (onBulkSelected) {\n                onBulkSelected(action);\n            }\n        };\n        this.handleOnBulkSelect = () => {\n            this.setState({\n                isBulkSelectOpen: !this.state.isBulkSelectOpen,\n            });\n        };\n        this.handleOnBulkSelectToggle = isOpen => {\n            this.setState({\n                isBulkSelectOpen: isOpen,\n            });\n        };\n        this.getCategorySelectOptions = () => {\n            const { categoryOptions } = this.props;\n            const options = [];\n            categoryOptions.map(option => {\n                options.push({\n                    toString: () => option.name,\n                    value: option.key,\n                });\n            });\n            return options;\n        };\n        this.handleOnCategorySelect = (event, selection) => {\n            this.setState({\n                categoryInput: '',\n                currentCategory: selection.value,\n                currentTagKey: undefined,\n                isCategorySelectOpen: !this.state.isCategorySelectOpen,\n            });\n        };\n        this.handleOnCategoryToggle = isOpen => {\n            this.setState({\n                isCategorySelectOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = (categoryOption) => {\n            const { intl, isDisabled, resourcePathsType } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            return (React.createElement(ToolbarFilter, { categoryName: categoryOption, chips: filters[categoryOption.key], deleteChip: this.onDelete, key: categoryOption.key, showToolbarItem: currentCategory === categoryOption.key },\n                React.createElement(InputGroup, null, isResourceTypeValid(resourcePathsType, categoryOption.key) ? (React.createElement(ResourceTypeahead, { isDisabled: isDisabled, onSelect: value => this.onCategoryInputSelect(value, categoryOption.key), resourcePathsType: resourcePathsType, resourceType: categoryOption.key })) : (React.createElement(React.Fragment, null,\n                    React.createElement(TextInput, { isDisabled: isDisabled, name: `category-input-${categoryOption.key}`, id: `category-input-${categoryOption.key}`, type: \"search\", \"aria-label\": intl.formatMessage(messages.FilterByInputAriaLabel, { value: categoryOption.key }), onChange: this.handleOnCategoryInputChange, value: categoryInput, placeholder: intl.formatMessage(messages.FilterByPlaceholder, { value: categoryOption.key }), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.key) }),\n                    React.createElement(Button, { isDisabled: isDisabled, variant: ButtonVariant.control, \"aria-label\": intl.formatMessage(messages.FilterByButtonAriaLabel, { value: categoryOption.key }), onClick: evt => this.onCategoryInput(evt, categoryOption.key) },\n                        React.createElement(SearchIcon, null)))))));\n        };\n        this.getDefaultCategoryOptions = () => {\n            const { intl } = this.props;\n            return [{ name: intl.formatMessage(messages.Names, { count: 1 }), key: 'name' }];\n        };\n        this.handleOnCategoryInputChange = (value) => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if ((event && event.key && event.key !== 'Enter') || categoryInput.trim() === '') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, categoryInput]\n                                : [categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        this.onCategoryInputSelect = (value, key) => {\n            const { currentCategory } = this.state;\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { [currentCategory]: prevFilters && prevFilters.includes(value)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, value]\n                                : [value] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, value);\n            });\n        };\n        // Org unit select\n        this.getOrgUnitSelect = () => {\n            const { intl, isDisabled } = this.props;\n            const { currentCategory, filters, isOrgUnitSelectExpanded } = this.state;\n            const options = this.getOrgUnitOptions().map(option => ({\n                id: option.key,\n                toString: () => option.name,\n                compareTo: value => filters[orgUnitIdKey] ? filters[orgUnitIdKey].find(val => val === value.id) : false,\n            }));\n            const chips = []; // Get selected items as PatternFly's ToolbarChip type\n            const selections = []; // Select options and selections must be same type\n            if (filters[orgUnitIdKey] && Array.isArray(filters[orgUnitIdKey])) {\n                filters[orgUnitIdKey].map(id => {\n                    const option = options.find(val => val.id === id);\n                    if (option) {\n                        selections.push(option);\n                        chips.push({\n                            key: option.id,\n                            node: option.toString(),\n                        });\n                    }\n                });\n            }\n            // Todo: selectOverride is a workaround for https://github.com/patternfly/patternfly-react/issues/4477\n            // and https://github.com/patternfly/patternfly-react/issues/6371\n            return (React.createElement(ToolbarFilter, { categoryName: {\n                    key: orgUnitIdKey,\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'org_unit_id' }),\n                }, chips: chips, deleteChip: this.onDelete, key: orgUnitIdKey, showToolbarItem: currentCategory === orgUnitIdKey },\n                React.createElement(Select, { isDisabled: isDisabled, className: \"selectOverride\", variant: SelectVariant.checkbox, \"aria-label\": intl.formatMessage(messages.FilterByOrgUnitAriaLabel), onToggle: this.handleOnOrgUnitToggle, onSelect: this.handleOnOrgUnitSelect, selections: selections, isOpen: isOrgUnitSelectExpanded, placeholderText: intl.formatMessage(messages.FilterByOrgUnitPlaceholder) }, options.map(option => (React.createElement(SelectOption, { description: option.id, key: option.id, value: option }))))));\n        };\n        this.handleOnOrgUnitSelect = (event, selection) => {\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters[orgUnitIdKey] ? prevState.filters[orgUnitIdKey] : [];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { tag: Object.assign({}, prevState.filters.tag), [orgUnitIdKey]: checked\n                            ? [...prevSelections, selection.id]\n                            : prevSelections.filter(value => value !== selection.id) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(orgUnitIdKey, selection.id);\n                }\n                else {\n                    this.onDelete(orgUnitIdKey, selection.id);\n                }\n            });\n        };\n        this.handleOnOrgUnitToggle = isOpen => {\n            this.setState({\n                isOrgUnitSelectExpanded: isOpen,\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { intl, isDisabled } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded } = this.state;\n            if (currentCategory !== tagKey) {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return React.createElement(SelectOption, { key: selectOption.key, value: selectOption.key });\n            });\n            return (React.createElement(ToolbarItem, null,\n                React.createElement(Select, { isDisabled: isDisabled, variant: SelectVariant.typeahead, typeAheadAriaLabel: intl.formatMessage(messages.FilterByTagKeyAriaLabel), onClear: this.handleOnTagKeyClear, onToggle: this.handleOnTagKeyToggle, onSelect: this.handleOnTagKeySelect, isOpen: isTagKeySelectExpanded, placeholderText: intl.formatMessage(messages.FilterByTagKeyPlaceholder), selections: currentTagKey }, selectOptions)));\n        };\n        this.handleOnTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.handleOnTagKeySelect = (event, selection) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.handleOnTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = (tagKeyOption) => {\n            const { tagReportPathsType } = this.props;\n            const { currentCategory, currentTagKey, filters, tagKeyValueInput } = this.state;\n            // Todo: categoryName workaround for https://issues.redhat.com/browse/COST-2094\n            const categoryName = {\n                name: tagKeyOption.name,\n                key: `${tagPrefix}${tagKeyOption.key}`,\n            };\n            return (React.createElement(ToolbarFilter, { categoryName: categoryName, chips: filters.tag[tagKeyOption.key], deleteChip: this.onDelete, key: tagKeyOption.key, showToolbarItem: currentCategory === tagKey && currentTagKey === tagKeyOption.key },\n                React.createElement(TagValue, { onTagValueSelect: this.onTagValueSelect, onTagValueInput: this.onTagValueInput, onTagValueInputChange: this.onTagValueInputChange, selections: filters.tag[tagKeyOption.key] ? filters.tag[tagKeyOption.key] : [], tagKey: currentTagKey, tagKeyValue: tagKeyValueInput, tagReportPathsType: tagReportPathsType })));\n        };\n        this.onTagValueInputChange = value => {\n            this.setState({ tagKeyValueInput: value });\n        };\n        this.onTagValueInput = event => {\n            const { currentTagKey, tagKeyValueInput } = this.state;\n            if ((event.key && event.key !== 'Enter') || tagKeyValueInput.trim() === '') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey] ? prevState.filters.tag[currentTagKey] : [];\n                for (const val of prevSelections) {\n                    if (val === tagKeyValueInput) {\n                        return Object.assign(Object.assign({}, prevState.filters), { tagKeyValueInput: '' });\n                    }\n                }\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { tag: Object.assign(Object.assign({}, prevState.filters.tag), { [currentTagKey]: [...prevSelections, tagKeyValueInput] }) }),\n                    tagKeyValueInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(`${tagPrefix}${currentTagKey}`, tagKeyValueInput);\n            });\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey] ? prevState.filters.tag[currentTagKey] : [];\n                return {\n                    filters: Object.assign(Object.assign({}, prevState.filters), { tag: Object.assign(Object.assign({}, prevState.filters.tag), { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagPrefix}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        // Column management\n        this.getColumnManagement = () => {\n            const { intl } = this.props;\n            return (React.createElement(ToolbarItem, null,\n                React.createElement(Button, { onClick: this.handleColumnManagementClicked, variant: ButtonVariant.link }, intl.formatMessage(messages.DetailsColumnManagementTitle))));\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isDisabled, isExportDisabled } = this.props;\n            return (React.createElement(ToolbarItem, { spacer: {\n                    default: 'spacerNone',\n                } },\n                React.createElement(Button, { isDisabled: isDisabled || isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.plain },\n                    React.createElement(ExportIcon, null))));\n        };\n        this.handleColumnManagementClicked = () => {\n            this.props.onColumnManagementClicked();\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { categoryOptions, groupBy, orgReport, query, tagReport } = this.props;\n        if (categoryOptions !== prevProps.categoryOptions ||\n            groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (orgReport && !isEqual(orgReport, prevProps.orgReport)) ||\n            (tagReport && !isEqual(tagReport, prevProps.tagReport))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return categoryOptions !== prevProps.categoryOptions || prevProps.groupBy !== groupBy\n                    ? {\n                        categoryInput: '',\n                        currentCategory: this.getDefaultCategory(),\n                        currentOrgUnit: '',\n                        currentTagKey: '',\n                        tagKeyValueInput: '',\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category select\n    getCategorySelect() {\n        const { categoryOptions, isDisabled } = this.props;\n        const { currentCategory, isCategorySelectOpen } = this.state;\n        if (!categoryOptions) {\n            return null;\n        }\n        const selectOptions = this.getCategorySelectOptions();\n        const selection = selectOptions.find((option) => option.value === currentCategory);\n        return (React.createElement(ToolbarItem, null,\n            React.createElement(Select, { id: \"category-select\", isDisabled: isDisabled, isOpen: isCategorySelectOpen, onSelect: this.handleOnCategorySelect, onToggle: this.handleOnCategoryToggle, selections: selection, toggleIcon: React.createElement(FilterIcon, null), variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option }))))));\n    }\n    getOrgUnitOptions() {\n        const { orgReport } = this.props;\n        let options = [];\n        if (!(orgReport && orgReport.data)) {\n            return options;\n        }\n        // Sort all names first\n        const sortedData = orgReport.data.sort((a, b) => {\n            if (a[orgUnitNameKey] < b[orgUnitNameKey]) {\n                return -1;\n            }\n            if (a[orgUnitNameKey] > b[orgUnitNameKey]) {\n                return 1;\n            }\n            return 0;\n        });\n        // Move roots first\n        const roots = sortedData.filter(org => org.level === 0);\n        const filteredOrgs = sortedData.filter(org => org.level !== 0);\n        roots.map(root => {\n            const item = sortedData.find(org => org[orgUnitIdKey] === root[orgUnitIdKey]);\n            filteredOrgs.unshift(item);\n        });\n        if (filteredOrgs.length > 0) {\n            options = filteredOrgs.map(org => {\n                return {\n                    key: org[orgUnitIdKey],\n                    name: org[orgUnitNameKey],\n                };\n            });\n        }\n        return options;\n    }\n    getTagKeyOptions() {\n        const { tagReport } = this.props;\n        let data = [];\n        let options = [];\n        if (!(tagReport && tagReport.data)) {\n            return options;\n        }\n        // If the key_only param is used, we have an array of strings\n        let hasTagKeys = false;\n        for (const item of tagReport.data) {\n            if (item.hasOwnProperty('key')) {\n                hasTagKeys = true;\n                break;\n            }\n        }\n        // Workaround for https://github.com/project-koku/koku/issues/1797\n        if (hasTagKeys) {\n            const keepData = tagReport.data.map(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            (_a) => {\n                var { type } = _a, keepProps = __rest(_a, [\"type\"]);\n                return keepProps;\n            });\n            data = uniqBy(keepData, 'key');\n        }\n        else {\n            data = uniq(tagReport.data);\n        }\n        if (data.length > 0) {\n            options = data.map(item => {\n                const key = hasTagKeys ? item.key : item;\n                return {\n                    key,\n                    name: key,\n                };\n            });\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, dateRange, pagination, showBulkSelect, showColumnManagement, showExport, showFilter, style, } = this.props;\n        const options = categoryOptions ? categoryOptions : this.getDefaultCategoryOptions();\n        // Todo: clearAllFilters workaround https://github.com/patternfly/patternfly-react/issues/4222\n        return (React.createElement(\"div\", { style: style ? style : styles.toolbarContainer },\n            React.createElement(Toolbar, { id: \"details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(ToolbarContent, null,\n                    showBulkSelect && React.createElement(ToolbarItem, { variant: \"bulk-select\" }, this.getBulkSelect()),\n                    showFilter && (React.createElement(ToolbarToggleGroup, { breakpoint: \"xl\", toggleIcon: React.createElement(FilterIcon, null) },\n                        React.createElement(ToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategorySelect(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            this.getOrgUnitSelect(),\n                            options &&\n                                options\n                                    .filter(option => option.key !== tagKey && option.key !== orgUnitIdKey)\n                                    .map(option => this.getCategoryInput(option))))),\n                    (Boolean(showExport) || Boolean(showColumnManagement)) && (React.createElement(ToolbarGroup, null,\n                        Boolean(showExport) && this.getExportButton(),\n                        Boolean(showColumnManagement) && this.getColumnManagement())),\n                    dateRange && React.createElement(ToolbarGroup, null, dateRange),\n                    React.createElement(ToolbarItem, { alignment: { default: 'alignRight' }, variant: \"pagination\" }, pagination)))));\n    }\n}\nconst DataToolbar = injectIntl(DataToolbarBase);\nexport { DataToolbar };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    alert: {\n        marginBottom: global_spacer_md.var,\n    },\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        marginBottom: global_spacer_md.var,\n    },\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { endOfMonth, format, startOfMonth } from 'date-fns';\nimport fileDownload from 'js-file-download';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions, exportSelectors } from 'store/exports';\nimport { getTestProps, testIds } from 'testIds';\nimport { getToday } from 'utils/dateRange';\nconst reportType = \"cost\" /* cost */;\nexport class ExportSubmitBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            fetchReportClicked: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExport = () => {\n            const { report, reportFetchStatus } = this.props;\n            if (report && reportFetchStatus === 2 /* complete */) {\n                fileDownload(report.data, this.getFileName(), 'text/csv');\n                this.handleClose();\n            }\n        };\n        this.getFileName = () => {\n            const { endDate, groupBy, intl, reportPathsType, resolution, startDate } = this.props;\n            // defaultMessage: '<provider>_<groupBy>_<resolution>_<start-date>_<end-date>',\n            const fileName = intl.formatMessage(messages.ExportFileName, {\n                endDate,\n                provider: reportPathsType,\n                groupBy: groupBy.indexOf(tagPrefix) !== -1 ? 'tag' : groupBy,\n                resolution,\n                startDate,\n            });\n            return `${fileName}.csv`;\n        };\n        this.handleClose = () => {\n            const { reportError } = this.props;\n            this.setState(Object.assign({}, this.defaultState), () => {\n                if (!reportError) {\n                    this.props.onClose(false);\n                }\n            });\n        };\n        this.handleFetchReport = () => {\n            const { exportReport, queryString, reportPathsType } = this.props;\n            exportReport(reportPathsType, reportType, queryString);\n            this.setState({\n                fetchReportClicked: true,\n            }, () => {\n                this.getExport();\n            });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError } = this.props;\n        const { fetchReportClicked } = this.state;\n        if (prevProps.report !== report && fetchReportClicked) {\n            this.getExport();\n        }\n        if (reportError) {\n            this.props.onError(reportError);\n        }\n    }\n    render() {\n        const { intl, reportFetchStatus } = this.props;\n        return (React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: reportFetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), intl.formatMessage(messages.ExportDownload)));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const { groupBy, isAllItems, items, query, reportPathsType, resolution, timeScope } = props;\n    let endDate = query.end_date;\n    let startDate = query.start_date;\n    const getQueryString = () => {\n        const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter: Object.assign({ limit: undefined, offset: undefined, resolution: resolution ? resolution : undefined }, (!(startDate && endDate) && { time_scope_value: timeScope === 'previous' ? -2 : -1 })), filter_by: {}, limit: 0, order_by: undefined, perspective: undefined, dateRange: undefined, delta: undefined });\n        // Store filter_by as an array so we can add to it below\n        if (query.filter_by) {\n            for (const key of Object.keys(query.filter_by)) {\n                if (newQuery.filter_by[key] === undefined) {\n                    newQuery.filter_by[key] = [];\n                }\n                newQuery.filter_by[key].push(query.filter_by[key]);\n            }\n        }\n        if (isAllItems) {\n            // Ensure group_by isn't overridden -- org_unit_id is not unique\n            if (groupBy === orgUnitIdKey) {\n                if (newQuery.filter_by[orgUnitIdKey] === undefined) {\n                    newQuery.filter_by[orgUnitIdKey] = [];\n                }\n                newQuery.filter_by[orgUnitIdKey].push(query.group_by[orgUnitIdKey]);\n            }\n        }\n        else {\n            if (groupBy === orgUnitIdKey) {\n                for (const item of items) {\n                    // Note that type only exists when grouping by org units\n                    const type = item.type === 'organizational_unit' ? orgUnitIdKey : item.type;\n                    if (newQuery.filter_by[type] === undefined) {\n                        newQuery.filter_by[type] = [];\n                    }\n                    newQuery.filter_by[type].push(item.id);\n                }\n            }\n            else {\n                for (const item of items) {\n                    if (newQuery.filter_by[groupBy] === undefined) {\n                        newQuery.filter_by[groupBy] = [];\n                    }\n                    newQuery.filter_by[groupBy].push(item.id);\n                }\n            }\n        }\n        return getQuery(newQuery);\n    };\n    const queryString = getQueryString();\n    const report = exportSelectors.selectExport(state, reportPathsType, reportType, queryString);\n    const reportError = exportSelectors.selectExportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = exportSelectors.selectExportFetchStatus(state, reportPathsType, reportType, queryString);\n    if (!(startDate && endDate)) {\n        const isPrevious = timeScope === 'previous';\n        const today = getToday();\n        if (isPrevious) {\n            today.setMonth(today.getMonth() - 1);\n        }\n        endDate = format(isPrevious ? endOfMonth(today) : today, 'yyyy-MM-dd');\n        startDate = format(startOfMonth(today), 'yyyy-MM-dd');\n    }\n    return {\n        endDate,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        startDate,\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportSubmitConnect = connect(mapStateToProps, mapDispatchToProps)(ExportSubmitBase);\nconst ExportSubmit = injectIntl(ExportSubmitConnect);\nexport { ExportSubmit };\n","import { Alert, Button, ButtonVariant, Form, FormGroup, Modal, Radio } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { orderBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions } from 'store/exports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './exportModal.styles';\nimport { ExportSubmit } from './exportSubmit';\nconst resolutionOptions = [\n    { label: messages.ExportResolution, value: 'daily' },\n    { label: messages.ExportResolution, value: 'monthly' },\n];\nconst timeScopeOptions = [\n    { label: messages.ExportTimeScope, value: 'current' },\n    { label: messages.ExportTimeScope, value: 'previous' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            error: undefined,\n            timeScope: 'current',\n            resolution: this.props.resolution || 'monthly',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Reset defult state upon close -- see https://issues.redhat.com/browse/COST-1134\n        this.handleClose = () => {\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleError = (error) => {\n            this.setState({ error });\n        };\n        this.handleMonthChange = (_, event) => {\n            this.setState({ timeScope: event.currentTarget.value });\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleMonthChange = this.handleMonthChange.bind(this);\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    render() {\n        const { groupBy, intl, isAllItems, items, query, reportPathsType, showAggregateType = true, showTimeScope = true, } = this.props;\n        const { error, resolution, timeScope } = this.state;\n        let sortedItems = [...items];\n        if (this.props.isOpen) {\n            if (items && items.length === 0 && isAllItems) {\n                sortedItems = [\n                    {\n                        label: intl.formatMessage(messages.ExportAll),\n                    },\n                ];\n            }\n            else {\n                sortedItems = orderBy(sortedItems, ['label'], ['asc']);\n            }\n        }\n        let selectedLabel = intl.formatMessage(messages.ExportSelected, { groupBy });\n        if (groupBy.indexOf(tagPrefix) !== -1) {\n            selectedLabel = intl.formatMessage(messages.ExportSelected, { groupBy: 'tag' });\n        }\n        const thisMonth = new Date();\n        const lastMonth = new Date().setMonth(thisMonth.getMonth() - 1);\n        const currentMonth = format(thisMonth, 'MMMM yyyy');\n        const previousMonth = format(lastMonth - 1, 'MMMM yyyy');\n        return (React.createElement(Modal, { style: styles.modal, isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.ExportTitle), variant: \"small\", actions: [\n                React.createElement(ExportSubmit, { groupBy: groupBy, isAllItems: isAllItems, items: items, key: \"confirm\", timeScope: showTimeScope ? timeScope : undefined, onClose: this.handleClose, onError: this.handleError, query: query, reportPathsType: reportPathsType, resolution: resolution }),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }), intl.formatMessage(messages.Cancel)),\n            ] },\n            error && React.createElement(Alert, { variant: \"danger\", style: styles.alert, title: intl.formatMessage(messages.ExportError) }),\n            React.createElement(\"div\", { style: styles.title },\n                React.createElement(\"span\", null, intl.formatMessage(messages.ExportHeading, { groupBy }))),\n            React.createElement(Form, { style: styles.form },\n                showAggregateType && (React.createElement(FormGroup, { label: intl.formatMessage(messages.ExportAggregateType), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, { value: option.value }), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": intl.formatMessage(option.label, { value: option.value }) })))))),\n                showTimeScope && (React.createElement(FormGroup, { label: intl.formatMessage(messages.ExportTimeScopeTitle), fieldId: \"timeScope\" },\n                    React.createElement(React.Fragment, null, timeScopeOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `timeScope-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, {\n                            date: option.value === 'previous' ? previousMonth : currentMonth,\n                            value: option.value,\n                        }), value: option.value, checked: timeScope === option.value, name: \"timeScope\", onChange: this.handleMonthChange, \"aria-label\": intl.formatMessage(option.label, {\n                            date: option.value === 'previous' ? previousMonth : currentMonth,\n                            value: option.value,\n                        }) })))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportModalConnect = connect(mapStateToProps, mapDispatchToProps)(ExportModalBase);\nconst ExportModal = injectIntl(ExportModalConnect);\nexport { ExportModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { orgUnitIdKey, orgUnitNameKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByOrgBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            for (const key of groupByKeys) {\n                const index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = queryFromRoute.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.getGroupByItems = () => {\n            const { orgReport } = this.props;\n            if (!(orgReport && orgReport.data)) {\n                return [];\n            }\n            // Sort all names first\n            const sortedData = orgReport.data.sort((a, b) => {\n                if (a[orgUnitNameKey] < b[orgUnitNameKey]) {\n                    return -1;\n                }\n                if (a[orgUnitNameKey] > b[orgUnitNameKey]) {\n                    return 1;\n                }\n                return 0;\n            });\n            // Move roots first\n            const roots = sortedData.filter(org => org.level === 0);\n            const filteredOrgs = sortedData.filter(org => org.level !== 0);\n            roots.map(root => {\n                const item = sortedData.find(org => org[orgUnitIdKey] === root[orgUnitIdKey]);\n                filteredOrgs.unshift(item);\n            });\n            return filteredOrgs.map(org => ({\n                id: org[orgUnitIdKey],\n                toString: () => org[orgUnitNameKey],\n            }));\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection.id,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${orgUnitIdKey}${selection.id}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled = false, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const groupByItems = this.getGroupByItems();\n        const selection = groupByItems.find((item) => item.id === currentItem);\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.FilterByOrgUnitAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.FilterByOrgUnitPlaceholder), selections: selection, variant: SelectVariant.typeahead }, groupByItems.map(item => (React.createElement(SelectOption, { description: item.id, key: item.id, value: item }))))));\n    }\n}\nconst GroupByOrg = injectIntl(GroupByOrgBase);\nexport { GroupByOrg };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { uniq, uniqBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getGroupByItems = () => {\n            const { tagReport } = this.props;\n            if (!(tagReport && tagReport.data)) {\n                return [];\n            }\n            // If the key_only param is used, we have an array of strings\n            let hasTagKeys = false;\n            for (const item of tagReport.data) {\n                if (item.hasOwnProperty('key')) {\n                    hasTagKeys = true;\n                    break;\n                }\n            }\n            // Workaround for https://github.com/project-koku/koku/issues/1797\n            let data = [];\n            if (hasTagKeys) {\n                const keepData = tagReport.data.map(\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                (_a) => {\n                    var { type } = _a, keepProps = __rest(_a, [\"type\"]);\n                    return keepProps;\n                });\n                data = uniqBy(keepData, 'key');\n            }\n            else {\n                data = uniq(tagReport.data);\n            }\n            return data.map(item => {\n                const tagKey = hasTagKeys ? item.key : item;\n                return React.createElement(SelectOption, { key: item.key, value: tagKey });\n            });\n        };\n        this.getCurrentGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy;\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = key.slice(tagPrefix.length);\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${tagPrefix}${selection}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.FilterByTagKeyAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.FilterByTagKeyPlaceholder), selections: currentItem, variant: SelectVariant.typeahead }, this.getGroupByItems())));\n    }\n}\nconst GroupByTag = injectIntl(GroupByTagBase);\nexport { GroupByTag };\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey, parseQuery, tagKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { styles } from './groupBy.styles';\nimport { GroupByOrg } from './groupByOrg';\nimport { GroupByTag } from './groupByTag';\nconst groupByOrgOptions = [{ label: orgUnitIdKey, value: orgUnitIdKey }];\nconst groupByTagOptions = [{ label: tagKey, value: tagKey }];\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n            isGroupByOrgVisible: false,\n            isGroupByTagVisible: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const { defaultItem } = this.state;\n            const queryFromRoute = parseQuery(location.search);\n            if (!(queryFromRoute && queryFromRoute.group_by)) {\n                return defaultItem;\n            }\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            for (const key of groupByKeys) {\n                let index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = tagKey;\n                    this.setState({\n                        isGroupByTagVisible: true,\n                    });\n                    break;\n                }\n                index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = orgUnitIdKey;\n                    this.setState({\n                        isGroupByOrgVisible: true,\n                    });\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : defaultItem;\n        };\n        this.getGroupBy = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isGroupByOpen } = this.state;\n            const selectOptions = this.getGroupByOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"groupBySelect\", isDisabled: isDisabled, isOpen: isGroupByOpen, onSelect: this.handleGroupBySelected, onToggle: this.handleGroupByToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getGroupByOptions = () => {\n            const { options, orgReport, tagReport, intl } = this.props;\n            const allOptions = [...options];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                allOptions.push(...groupByOrgOptions);\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                allOptions.push(...groupByTagOptions);\n            }\n            return allOptions.map(option => ({\n                toString: () => intl.formatMessage(messages.GroupByValuesTitleCase, { value: option.label, count: 1 }),\n                value: option.value,\n            }));\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            if (selection.value === orgUnitIdKey || selection.value === tagKey) {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: selection.value === orgUnitIdKey,\n                    isGroupByTagVisible: selection.value === tagKey,\n                });\n            }\n            else {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                }, () => {\n                    if (onSelected) {\n                        onSelected(selection.value);\n                    }\n                });\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportFetchStatus, orgReportPathsType, showOrgs, showTags, tagQueryString, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        }, () => {\n            if (showOrgs && orgReportFetchStatus !== 1 /* inProgress */) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (showTags && tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, groupBy, orgQueryString, orgReportFetchStatus, orgReportPathsType, perspective, showOrgs, showTags, tagQueryString, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        if (prevProps.groupBy !== groupBy || prevProps.perspective !== perspective) {\n            let options;\n            if (prevProps.perspective !== perspective) {\n                options = {\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                };\n            }\n            this.setState(Object.assign({ currentItem: this.getCurrentGroupBy() }, (options ? options : {})), () => {\n                if (showOrgs && orgReportFetchStatus !== 1 /* inProgress */) {\n                    fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n                }\n                if (showTags && tagReportFetchStatus !== 1 /* inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n    }\n    render() {\n        const { getIdKeyForGroupBy, groupBy, isDisabled = false, onSelected, orgReport, intl, tagReport } = this.props;\n        const { isGroupByOrgVisible, isGroupByTagVisible } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.groupBySelectorLabel }, intl.formatMessage(messages.GroupByLabel)),\n            this.getGroupBy(),\n            Boolean(isGroupByOrgVisible) && (React.createElement(GroupByOrg, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByOrgOptions, orgReport: orgReport })),\n            Boolean(isGroupByTagVisible) && (React.createElement(GroupByTag, { groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByTagOptions, tagReport: tagReport }))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { endDate, startDate, orgReportPathsType, tagReportPathsType }) => {\n    const tagQuery = endDate && startDate\n        ? {\n            start_date: startDate,\n            end_date: endDate,\n        }\n        : {\n            filter: {\n                resolution: 'monthly',\n                time_scope_units: 'month',\n                time_scope_value: -1,\n            },\n        };\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery(Object.assign(Object.assign({}, tagQuery), { key_only: true }));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    const orgQueryString = getQuery({\n    // TBD...\n    });\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    return {\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst GroupByConnect = connect(mapStateToProps, mapDispatchToProps)(GroupByBase);\nconst GroupBy = injectIntl(GroupByConnect);\nexport { GroupBy };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query, reportPathsType } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, redirectToCostModel, history, item: { source_uuid }, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.DetailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], history) }, intl.formatMessage(messages.DetailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport { Actions };\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.GroupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.TagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.TagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.TagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagView = injectIntl(connect()(TagViewBase));\nexport { TagView };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { TagView } from './tagView';\nconst tagReportType = \"tag\" /* tag */;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, query, tagReport, intl } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.TagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagView, { groupBy: groupBy, groupByValue: groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagModalBase));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagReportType = \"tag\" /* tag */;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagReportPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            Boolean(count > 0) && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }), count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagReportPathsType: tagReportPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase));\nexport { TagLink };\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_md.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { breakdownDescKey, breakdownTitleKey, getQueryRoute, orgUnitIdKey } from 'api/queries/query';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport { CostType } from 'pages/views/components/costType';\nimport { TagLink } from 'pages/views/details/components/tag/tagLink';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = () => {\n            const { detailsURL, groupBy, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {\n                    [groupByKey]: value,\n                } });\n            // Don't want these params when returning to the details page\n            if (newQuery.filter) {\n                newQuery.filter.account = undefined;\n                newQuery[breakdownDescKey] = undefined;\n                newQuery[orgUnitIdKey] = undefined;\n                newQuery[breakdownTitleKey] = undefined;\n            }\n            return `${detailsURL}?${getQueryRoute(newQuery)}`;\n        };\n        this.getTotalCost = () => {\n            const { report } = this.props;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n            const cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            return cost;\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { onCostTypeSelected } = this.props;\n            if (onCostTypeSelected) {\n                onCostTypeSelected(value);\n            }\n        };\n    }\n    render() {\n        const { description, groupBy, query, intl, showCostType = false, tabs, tagReportPathsType, title } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'project' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount ? 'account' : groupByTag ? 'tag' : groupByOrg ? orgUnitIdKey : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.BreakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            React.createElement(Link, { to: this.buildDetailsLink() }, intl.formatMessage(messages.BreakdownBackToDetails, {\n                                value: intl.formatMessage(messages.BreakdownBackToTitles, { value: tagReportPathsType }),\n                                groupBy: groupByKey,\n                            }))))),\n                isBetaFeature() && React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] },\n                    intl.formatMessage(messages.BreakdownTitle, { value: title }),\n                    description && React.createElement(\"div\", { style: styles.infoDescription }, description),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: this.handleCostTypeSelected })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getForDateRangeString(intl.formatMessage(messages.GroupByValuesTitleCase, { value: groupByKey, count: 2 }), messages.BreakdownTotalCostDate, 0)))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, Boolean(showTags) && React.createElement(TagLink, { id: \"tags\", tagReportPathsType: tagReportPathsType }))))));\n    }\n}\nconst BreakdownHeader = injectIntl(BreakdownHeaderBase);\nexport { BreakdownHeader };\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQueryRoute } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './breakdown.styles';\nimport { BreakdownHeader } from './breakdownHeader';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"cost-overview\" /* costOverview */:\n            return 'cost-overview';\n        case \"historical-data\" /* historicalData */:\n            return 'historical-data';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [\n                {\n                    contentRef: React.createRef(),\n                    tab: \"cost-overview\" /* costOverview */,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: \"historical-data\" /* historicalData */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getRouteForQuery = (query) => {\n            const { history } = this.props;\n            return `${history.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"cost-overview\" /* costOverview */) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === \"historical-data\" /* historicalData */) {\n                return historicalDataComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"cost-overview\" /* costOverview */) {\n                return intl.formatMessage(messages.BreakdownCostOverviewTitle);\n            }\n            else if (tab === \"historical-data\" /* historicalData */) {\n                return intl.formatMessage(messages.BreakdownHistoricalDataTitle);\n            }\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Need param to restore cost type upon page refresh\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(this.getRouteForQuery(newQuery));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { location, fetchReport, queryString, reportPathsType, reportType } = this.props;\n            if (location.search) {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { location, report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { description, detailsURL, emptyStateTitle, groupBy, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, showCostType, tagReportPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { description: description, detailsURL: detailsURL, groupBy: groupBy, onCostTypeSelected: this.handleCostTypeSelected, query: query, report: report, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagReportPathsType: tagReportPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nexport default injectIntl(BreakdownBase);\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterViewBase extends React.Component {\n    render() {\n        const { item } = this.props;\n        if (!item.clusters) {\n            return null;\n        }\n        return item.clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterView = injectIntl(ClusterViewBase);\nexport { ClusterView, ClusterViewBase };\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './clusterModal.styles';\nimport { ClusterView } from './clusterView';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, intl } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.DetailsClustersModalTitle, { groupBy, name: item.label }), width: '50%' },\n            React.createElement(ClusterView, { item: item })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getTestProps, testIds } from 'testIds';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, report, intl } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        const item = computedItems && computedItems.length ? computedItems[0] : undefined;\n        if (!item) {\n            return null;\n        }\n        for (const cluster of item.clusters) {\n            const prefix = someClusters.length > 0 ? ', ' : '';\n            const clusterString = `${prefix}${cluster}`;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + clusterString.length > maxChars) {\n                    someClusters.push(clusterString\n                        .slice(0, maxChars - charCount)\n                        .trim()\n                        .concat('...'));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            charCount += clusterString.length;\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            Boolean(someClusters) && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            Boolean(someClusters.length < allClusters.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.cluster_lnk), { href: \"#/\", onClick: this.handleOpen }), intl.formatMessage(messages.DetailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport { Cluster };\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 400,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.MarkupTitle);\n        const rawLabel = intl.formatMessage(messages.RawCostTitle);\n        const usageLabel = intl.formatMessage(messages.UsageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 25, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.BreakdownCostChartAriaDesc), ariaTitle: intl.formatMessage(messages.BreakdownCostBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.BreakdownCostChartTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport { CostChart };\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { ReportSummaryItem, ReportSummaryItems } from 'components/reports/reportSummary';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './summaryModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass SummaryModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString, reportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    render() {\n        const { intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost.total.value : 0, hasTotal ? report.meta.total.cost.total.units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.DetailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: _item.cost.total.value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportGroupBy, reportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalView = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryModalViewBase));\nexport { SummaryModalView };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalView } from './summaryModalView';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.DetailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalView, { reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { ReportSummaryItem, ReportSummaryItems } from 'components/reports/reportSummary';\nimport messages from 'locales/messages';\nimport { SummaryModal } from 'pages/views/details/components/summary/summaryModal';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getTestProps, testIds } from 'testIds';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportGroupBy, reportFetchStatus } = this.props;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: reportItem.cost.total.value })))));\n        };\n        this.getViewAll = () => {\n            const { groupBy, query, reportGroupBy, reportPathsType, intl } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), intl.formatMessage(messages.DetailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { groupBy: groupBy, groupByValue: groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, fetchReport, queryString, reportPathsType, reportType } = this.props;\n        if (prevProps.queryString !== queryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    render() {\n        const { reportGroupBy, reportFetchStatus, intl } = this.props;\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.BreakdownSummaryTitle, { value: reportGroupBy }))),\n            React.createElement(CardBody, null, reportFetchStatus === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, reportGroupBy, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        cost_type: costType,\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        report,\n        reportFetchStatus,\n        reportPathsType,\n        reportType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryBase));\nexport { SummaryCard };\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery } from 'api/queries/query';\nimport { getResizeObserver } from 'components/charts/common/chartUtils';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = groupBy === 'cluster' ? this.getChartDatumWithCapacity() : this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                Boolean(groupBy === 'cluster') && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { report, intl } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        datum.ranges = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n        ];\n        return datum;\n    }\n    getChartDatumWithCapacity() {\n        const { report, intl } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasCapacity = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const capacityUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n        });\n        datum.ranges = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageCapacity, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageCapacity, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                value: Math.trunc(capacity),\n            },\n        ];\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        groupBy,\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase));\nexport { UsageChart };\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { Cluster } from 'pages/views/details/components/cluster/cluster';\nimport { CostChart } from 'pages/views/details/components/costChart/costChart';\nimport { SummaryCard } from 'pages/views/details/components/summary/summaryCard';\nimport { UsageChart } from 'pages/views/details/components/usageChart/usageChart';\nimport { styles } from 'pages/views/details/ocpDetails/detailsHeader.styles';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster chart\n        this.getClusterChart = (widget) => {\n            const { groupBy, report, intl } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.Clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report }))));\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = () => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.BreakdownCostBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.BreakdownCostBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.RawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.RawCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.UsageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.UsageCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.MarkupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.MarkupDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.DocsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.LearnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.CpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.MemoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costType, groupBy, query } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                if (groupById === groupBy ||\n                    (query && query.group_by && query.group_by[orgUnitIdKey]) ||\n                    (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costType: costType, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case \"cluster\" /* cluster */:\n                return this.getClusterChart(widget);\n            case \"cost\" /* cost */:\n                return this.getCostChart();\n            case \"cpuUsage\" /* cpuUsage */:\n                return this.getCpuUsageChart(widget);\n            case \"memoryUsage\" /* memoryUsage */:\n                return this.getMemoryUsageChart(widget);\n            case \"summary\" /* reportSummary */:\n                return this.getSummaryCard(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport { CostOverviewBase };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString } from 'components/charts/common/chartDatumUtils';\nimport { getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData } = this.props;\n            const costKey = messages.ChartCostLegendLabel;\n            const costInfrastructureKey = messages.ChartCostInfrastructureLegendLabel;\n            const costInfrastructureTooltipKey = messages.ChartCostInfrastructureLegendTooltip;\n            const costTooltipKey = messages.ChartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.ChartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.ChartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousInfrastructureCost',\n                    data: previousInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1, messages.ChartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(previousInfrastructureCostData, costInfrastructureTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousInfrastructureCostData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentInfrastructureCost',\n                    data: currentInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false, 0, messages.ChartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(currentInfrastructureCostData, costInfrastructureTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentInfrastructureCostData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 700 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, intl, containerHeight = height, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 700\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport { HistoricalCostChart };\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { transformReport } from 'components/charts/common/chartDatumUtils';\nimport { HistoricalCostChart } from 'components/charts/historicalCostChart';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentData = transformReport(currentReport, 0 /* rolling */, 'date', 'cost');\n        const currentInfrastructureCostData = transformReport(currentReport, 0 /* rolling */, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, 0 /* rolling */, 'date', 'cost');\n        const previousInfrastructureCostData = transformReport(previousReport, 0 /* rolling */, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const test = intl.formatMessage(messages.CurrencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.HistoricalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.HistoricalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const baseQuery = {\n        cost_type: costType,\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.ChartUsageLegendLabel : messages.ChartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.ChartUsageLegendTooltip : messages.ChartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, intl, containerHeight = height, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport { HistoricalTrendChart };\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { transformReport } from 'components/charts/common/chartDatumUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl } = this.props;\n        const isCostChart = reportType === \"cost\" /* cost */;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? 0 /* rolling */ : 1 /* daily */, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? 0 /* rolling */ : 1 /* daily */, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.CurrencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.HistoricalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.Units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.HistoricalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.Units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.HistoricalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const baseQuery = {\n        cost_type: costType,\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange } from 'components/charts/common/chartDatumUtils';\nimport { getUsageRangeString } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.ChartLimitLegendLabel;\n            const limitTooltipKey = messages.ChartLimitLegendTooltip;\n            const requestKey = messages.ChartRequestsLegendLabel;\n            const requestTooltipKey = messages.ChartRequestsLegendTooltip;\n            const usageKey = messages.ChartUsageLegendLabel;\n            const usageTooltipKey = messages.ChartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.ChartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.ChartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.ChartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.ChartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 900 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, intl, containerHeight = height, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 900\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport { HistoricalUsageChart };\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport { transformReport } from 'components/charts/common/chartDatumUtils';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, 1 /* daily */, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, 1 /* daily */, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, 1 /* daily */, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, 1 /* daily */, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, 1 /* daily */, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, 1 /* daily */, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.HistoricalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.Units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === \"instance_type\" /* instanceType */ || reportType === \"storage\" /* storage */;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costType, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.HistoricalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { costType: costType, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.HistoricalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { costType: costType, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.HistoricalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case \"cost\" /* cost */:\n                return this.getCostChart(widget);\n            case \"trend\" /* trend */:\n                return this.getTrendChart(widget);\n            case \"usage\" /* usage */:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport { HistoricalDataBase };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nexport const getGroupById = (query) => {\n    const groupBys = query && query.group_by ? Object.keys(query.group_by) : [];\n    return groupBys.find(key => key !== orgUnitIdKey);\n};\nexport const getGroupByValue = (query) => {\n    const groupById = getGroupById(query);\n    return groupById ? query.group_by[groupById] : undefined;\n};\nexport const getGroupByOrgValue = (query) => {\n    let groupByOrg;\n    if (query && query.group_by) {\n        for (const groupBy of Object.keys(query.group_by)) {\n            if (groupBy === orgUnitIdKey) {\n                groupByOrg = query.group_by[orgUnitIdKey];\n                break;\n            }\n        }\n    }\n    return groupByOrg;\n};\nexport const getGroupByTagKey = (query) => {\n    let groupByTagKey;\n    if (query && query.group_by) {\n        for (const groupBy of Object.keys(query.group_by)) {\n            const tagIndex = groupBy.indexOf(tagPrefix);\n            if (tagIndex !== -1) {\n                groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                break;\n            }\n        }\n    }\n    return groupByTagKey;\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey } from 'api/queries/query';\nexport const getBreakdownPath = ({ basePath, label, description, groupBy, query, }) => {\n    const newQuery = Object.assign(Object.assign(Object.assign({}, query), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n            [groupBy]: label,\n        } });\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const getOrgBreakdownPath = ({ basePath, description, groupBy, groupByOrg, id, orgUnitId, query, title, type, }) => {\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), (groupByOrg && orgUnitId && { [orgUnitIdKey]: orgUnitId })), { group_by: {\n            [groupBy]: id,\n        } });\n    if (!newQuery.filter) {\n        newQuery.filter = {};\n    }\n    if (type === 'account') {\n        newQuery.filter.account = id;\n        newQuery.group_by = {\n            [orgUnitIdKey]: groupByOrg,\n        };\n    }\n    else if (type === 'organizational_unit') {\n        newQuery.group_by = {\n            [orgUnitIdKey]: id,\n        };\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\n","export const addQueryFilter = (query, filterType, filterValue) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    // Filter by * won't generate a new request if group_by * already exists\n    if (filterValue === '*' && newQuery.group_by[filterType] === '*') {\n        return;\n    }\n    if (newQuery.filter_by[filterType]) {\n        let found = false;\n        const filters = newQuery.filter_by[filterType];\n        if (!Array.isArray(filters)) {\n            found = filterValue === newQuery.filter_by[filterType];\n        }\n        else {\n            for (const filter of filters) {\n                if (filter === filterValue) {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        if (!found) {\n            newQuery.filter_by[filterType] = [newQuery.filter_by[filterType], filterValue];\n        }\n    }\n    else {\n        newQuery.filter_by[filterType] = [filterValue];\n    }\n    return newQuery;\n};\nexport const removeQueryFilter = (query, filterType, filterValue) => {\n    const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n    if (filterType === null) {\n        newQuery.filter_by = undefined; // Clear all\n    }\n    else if (filterValue === null) {\n        newQuery.filter_by[filterType] = undefined; // Clear all values\n    }\n    else if (Array.isArray(newQuery.filter_by[filterType])) {\n        const index = newQuery.filter_by[filterType].indexOf(filterValue);\n        if (index > -1) {\n            newQuery.filter_by[filterType] = [\n                ...query.filter_by[filterType].slice(0, index),\n                ...query.filter_by[filterType].slice(index + 1),\n            ];\n        }\n    }\n    else {\n        newQuery.filter_by[filterType] = undefined;\n    }\n    return newQuery;\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        cluster_lnk: 'cluster-lnk',\n        historical_data_btn: 'historical-data-btn',\n        show_more_btn: 'show-more-btn',\n        tag_lnk: 'tag-lnk',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return a.split('').sort().join('') === b.split('').sort().join('');\n}\n"],"names":["title","PageHeader","PageHeaderTitle","Main","Unavailable","ResourceSelectBase","constructor","props","super","this","defaultState","createdOptions","isSelectExpanded","state","Object","assign","getOptions","resource","resourceFetchStatus","search","options","data","length","map","item","value","isNaN","account_alias","cluster_alias","key","name","moreOptions","val","getSelectOptions","option","SelectOption","handleOnCreateOption","trim","slice","push","setState","handleOnClear","onSearchChanged","undefined","handleOnFilter","event","handleOnSelect","onSelect","handleOnToggle","isOpen","handleOnTypeaheadInputChanged","bind","componentDidUpdate","prevProps","fetchResource","resourcePathsType","resourceType","query","render","intl","isDisabled","selectOptions","Select","isCreatable","isInputValuePersisted","onCreateOption","onClear","onFilter","onToggle","onTypeaheadInputChanged","placeholderText","formatMessage","messages","typeAheadAriaLabel","variant","SelectVariant","mapStateToProps","queryString","mapDispatchToProps","ResourceSelect","injectIntl","connect","ResourceTypeahead","searchTimeout","noop","handleOnSearch","clearTimeout","setTimeout","currentSearch","styles","export","marginRight","global_spacer_md","toolbarContainer","backgroundColor","global_BackgroundColor_light_100","paddingBottom","paddingTop","marginLeft","global_spacer_lg","tagReportType","TagValueBase","arguments","isTagValueExpanded","onTagValueChange","onTagValueInputChange","tagKeyValueInput","onTagValueToggle","componentDidMount","fetchTag","tagQueryString","tagReportFetchStatus","tagReportPathsType","getTagValueOptions","tagKey","tagReport","Set","tag","values","onTagValueInput","onTagValueSelect","selections","tagKeyValue","selectOption","InputGroup","TextInput","id","type","onChange","placeholder","onKeyDown","evt","Button","ButtonVariant","onClick","location","endDate","end_date","startDate","start_date","groupByOrgValue","groupBy","groupByValue","tagKeyFilter","tagQuery","filter","resolution","time_scope_units","time_scope_value","TagValueConnect","TagValue","defaultFilters","DataToolbarBase","categoryInput","filters","cloneDeep","isBulkSelectOpen","isCategorySelectOpen","isOrgUnitSelectExpanded","isTagValueDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","group_by","indexOf","getActiveFilters","filter_by","keys","forEach","Array","isArray","substring","onDelete","chip","filterType","prevState","s","_filterType","onFilterRemoved","getBulkSelect","isAllSelected","isBulkSelectDisabled","itemsPerPage","itemsTotal","selectedItems","numSelected","anySelected","isChecked","dropdownItems","DropdownItem","handleOnBulkSelectClicked","Dropdown","handleOnBulkSelect","position","DropdownPosition","toggle","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","handleOnBulkSelectToggle","action","onBulkSelected","getCategorySelectOptions","toString","handleOnCategorySelect","selection","currentCategory","currentTagKey","handleOnCategoryToggle","getCategoryInput","categoryOption","ToolbarFilter","categoryName","chips","deleteChip","showToolbarItem","onCategoryInputSelect","handleOnCategoryInputChange","onCategoryInput","getDefaultCategoryOptions","count","prevFilters","includes","onFilterAdded","getOrgUnitSelect","getOrgUnitOptions","compareTo","find","node","className","handleOnOrgUnitToggle","handleOnOrgUnitSelect","description","checked","target","prevSelections","getTagKeySelect","getTagKeyOptions","ToolbarItem","handleOnTagKeyClear","handleOnTagKeyToggle","handleOnTagKeySelect","getTagValueSelect","tagKeyOption","getColumnManagement","handleColumnManagementClicked","getExportButton","isExportDisabled","spacer","default","handleExportClicked","onColumnManagementClicked","onExportClicked","orgReport","currentOrgUnit","getCategorySelect","toggleIcon","sortedData","sort","a","b","roots","org","level","filteredOrgs","root","unshift","hasTagKeys","hasOwnProperty","keepData","_a","e","t","p","prototype","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","uniqBy","uniq","dateRange","pagination","showBulkSelect","showColumnManagement","showExport","showFilter","style","Toolbar","clearAllFilters","collapseListedFiltersBreakpoint","ToolbarContent","ToolbarToggleGroup","breakpoint","ToolbarGroup","Boolean","alignment","DataToolbar","alert","marginBottom","form","global_spacer_sm","modal","input","global_spacer_xs","ul","reportType","ExportSubmitBase","stateProps","dispatchProps","fetchReportClicked","getExport","report","reportFetchStatus","getFileName","handleClose","reportPathsType","provider","reportError","onClose","handleFetchReport","exportReport","onError","testIds","isAllItems","items","timeScope","newQuery","JSON","parse","stringify","limit","offset","order_by","perspective","delta","getQueryString","isPrevious","today","setMonth","getMonth","format","endOfMonth","startOfMonth","ExportSubmitConnect","ExportSubmit","resolutionOptions","label","timeScopeOptions","ExportModalBase","error","handleError","handleMonthChange","_","currentTarget","handleResolutionChange","showAggregateType","showTimeScope","sortedItems","orderBy","selectedLabel","thisMonth","Date","lastMonth","currentMonth","previousMonth","Modal","actions","Alert","Form","FormGroup","fieldId","index","Radio","isValid","date","groupItem","ExportModalConnect","ExportModal","groupBySelector","display","alignItems","groupBySelectorLabel","whiteSpace","GroupByOrgBase","defaultItem","isGroupByOpen","getCurrentGroupBy","getIdKeyForGroupBy","queryFromRoute","groupByKeys","getGroupByItems","handleGroupByClear","currentItem","handleGroupBySelected","onSelected","handleGroupByToggle","groupByItems","GroupByOrg","GroupByTagBase","GroupByTag","groupByOrgOptions","groupByTagOptions","orgReportType","GroupByBase","isGroupByOrgVisible","isGroupByTagVisible","getGroupBy","getGroupByOptions","allOptions","fetchOrg","orgQueryString","orgReportFetchStatus","orgReportPathsType","showOrgs","showTags","Title","headingLevel","size","key_only","GroupByConnect","GroupBy","DetailsActionsBase","isDropdownOpen","isExportModalOpen","getExportModal","handleExportModalClose","handleExportModalOpen","showPriceListOption","redirectToCostModel","history","source_uuid","component","KebabToggle","isPlain","DetailsActionsConnect","Actions","content","paddingLeft","paddingRight","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","tagLink","tagsContainer","global_spacer_3xl","marginTop","TagViewBase","getDataListItems","result","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","dataListItems","DataList","isCompact","TagView","TagModalBase","getTagValueCount","shouldComponentUpdate","nextProps","account","width","filterByParams","TagModal","TagLinkBase","handleOpen","preventDefault","href","TagLink","cost","global_spacer_xl","costLabel","costValue","textAlign","costLabelDate","costType","header","global_BackgroundColor_100","headerContent","justifyContent","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","BreakdownHeaderBase","buildDetailsLink","detailsURL","groupByKey","getTotalCost","hasCost","meta","total","units","handleCostTypeSelected","onCostTypeSelected","showCostType","filterByAccount","groupByOrg","groupByTag","to","TitleSizes","BreakdownHeader","getIdKeyForTab","tab","BreakdownBase","activeTabKey","getAvailableTabs","contentRef","getRouteForQuery","pathname","getTab","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","availableTabs","TabContent","ref","getTabItem","costOverviewComponent","historicalDataComponent","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","cost_type","replace","tabIndex","updateReport","fetchReport","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","clustersContainer","height","subTitle","ClusterViewBase","clusters","cluster","ClusterView","ClusterModalBase","ClusterModal","ClusterBase","showAll","charCount","someClusters","allClusters","computedItems","getComputedReportItems","idKey","clusterString","concat","Cluster","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","CostChart","mainContent","SummaryModalViewBase","reportGroupBy","hasTotal","status","_item","formatOptions","totalValue","SummaryModalView","SummaryModalBase","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","handleBulletChartModalOpen","ButtonType","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","SummaryCard","capacity","legendSkeleton","UsageChartBase","containerRef","observer","handleResize","clientWidth","current","getChart","chartDatum","getChartDatumWithCapacity","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasRequest","request","requestUnits","hasCapacity","capacityUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","UsageChart","PLACEHOLDER","CostOverviewsBase","getClusterChart","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","enableFlip","bodyContent","rel","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","usePlaceholder","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","CostOverviewBase","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","initDatum","costKey","costInfrastructureKey","costInfrastructureTooltipKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","HistoricalCostChart","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalTrendChart","HistoricalDataTrendChartBase","isCostChart","Number","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalUsageChart","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTrendChart","getUsageChart","HistoricalDataBase","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle","getGroupById","getGroupByValue","getGroupByOrgValue","getGroupByTagKey","groupByTagKey","tagIndex","getBreakdownPath","basePath","getOrgBreakdownPath","orgUnitId","addQueryFilter","filterValue","found","removeQueryFilter","getTestProps","details","cluster_lnk","historical_data_btn","show_more_btn","tag_lnk","view_all_btn","cancel_btn","submit_btn","login","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop","isEqual","obj1","obj2","split","join"],"sourceRoot":""}