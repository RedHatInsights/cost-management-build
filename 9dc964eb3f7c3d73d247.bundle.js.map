{"version":3,"sources":["webpack://koku-ui/./src/pages/views/details/ocpBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/ocpBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/index.ts","webpack://koku-ui/./src/pages/views/details/components/columnManagement/columnManagementModal.tsx","webpack://koku-ui/./src/utils/computedReport/getComputedOcpReportItems.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/ocpDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/ocpDetails.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/index.ts"],"names":["mapStateToProps","state","props","selectWidgets","ocpCostOverview","widgets","CostOverview","withTranslation","connect","ocpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","t","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","initHiddenColumns","options","hiddenColumns","Set","map","option","hidden","add","value","ColumnManagementModalBase","constructor","stateProps","dispatchProps","super","this","defaultState","getHidden","result","delete","isHidden","has","handleChange","checked","event","target","id","setState","handleClose","onClose","handleSave","onSave","selectAll","componentDidUpdate","prevProps","render","Modal","TextContent","Text","component","TextVariants","Button","isInline","onClick","variant","isOpen","actions","key","ButtonVariant","DataList","isCompact","DataListItem","DataListItemRow","DataListCheck","name","onChange","DataListItemCells","dataListCells","DataListCell","htmlFor","label","ColumnManagementModalConnect","ColumnManagementModal","getIdKeyForGroupBy","project","cluster","node","baseQuery","delta","groupByOptions","DetailsHeaderBase","arguments","onGroupByClicked","providersError","showContent","meta","count","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","formatValue","units","style","Title","headingLevel","size","isDisabled","onItemClicked","showTags","Boolean","Tooltip","content","enableFlip","Popover","bodyContent","DetailsHeader","styles","emptyState","backgroundColor","global_BackgroundColor_light_100","display","justifyContent","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","DetailsTableColumnIds","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","item","index","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getSupplementaryCost","getTotalCost","getActions","Link","to","basePath","toString","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","filteredColumns","column","filteredRows","_a","row","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","cell","sortBy","showPriceListOption","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","percentValue","toFixed","keys","tagIndex","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","ininfoArrow","getSortBy","direction","SortByDirection","order_by","c","handleOnSelect","isSelected","rowId","onSelected","items","handleOnSort","onSort","bind","componentDidMount","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExport","showFilter","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","paddingBottom","global_spacer_lg","ocpDetails","minHeight","paginationContainer","marginLeft","marginRight","padding","global_spacer_md","tableContainer","limit","offset","defaultColumnOptions","OcpDetails","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","handleColumnManagementModalClose","handleColumnManagementModalSave","getComputedItems","getExportModal","computedItems","isAllItems","handleExportModalClose","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"mappings":"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","file":"9dc964eb3f7c3d73d247.bundle.js","sourcesContent":["import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ocpDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"ocp\" /* ocp */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.ocp_details'),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"ocp\" /* ocp */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"ocp\" /* ocp */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OcpBreakdown;\n","import OcpBreakdown from './ocpBreakdown';\nexport default OcpBreakdown;\n","import { Button, ButtonVariant, DataList, DataListCell, DataListCheck, DataListItem, DataListItemCells, DataListItemRow, Modal, Text, TextContent, TextVariants, } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport const initHiddenColumns = (options) => {\n    const hiddenColumns = new Set();\n    options.map(option => {\n        if (option.hidden) {\n            hiddenColumns.add(option.value);\n        }\n    });\n    return hiddenColumns;\n};\nexport class ColumnManagementModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            hiddenColumns: initHiddenColumns(this.props.options),\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            const result = new Set(hiddenColumns);\n            if (!result.delete(value)) {\n                result.add(value);\n            }\n            return result;\n        };\n        this.isHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            return hiddenColumns.has(value);\n        };\n        this.handleChange = (checked, event) => {\n            const hiddenColumns = this.getHidden(event.target.id);\n            this.setState({ hiddenColumns });\n        };\n        this.handleClose = () => {\n            // Reset defult state upon close\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleSave = () => {\n            const { hiddenColumns } = this.state;\n            this.props.onSave(hiddenColumns);\n            this.handleClose();\n        };\n        this.selectAll = () => {\n            this.setState({ hiddenColumns: new Set() });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { options } = this.props;\n        if (prevProps.options !== options) {\n            const hiddenColumns = initHiddenColumns(options);\n            this.setState({ hiddenColumns });\n        }\n    }\n    render() {\n        const { options, t } = this.props;\n        return (React.createElement(Modal, { description: React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.p }, \"Selected categories will be displayed in the table.\"),\n                React.createElement(Button, { isInline: true, onClick: this.selectAll, variant: \"link\" }, t('details.column_management.select_all'))), \n            // style={styles.modal}\n            isOpen: this.props.isOpen, onClose: this.handleClose, title: t('details.column_management.title'), variant: \"small\", actions: [\n                React.createElement(Button, { key: \"save\", onClick: this.handleSave, variant: ButtonVariant.link }, t('details.column_management.save')),\n                React.createElement(Button, { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, t('details.column_management.cancel')),\n            ] },\n            React.createElement(DataList, { \"aria-label\": t('details.column_management.aria_label'), id: \"table-column-management\", isCompact: true }, options.map(option => (React.createElement(DataListItem, { \"aria-labelledby\": option.value, key: option.value },\n                React.createElement(DataListItemRow, null,\n                    React.createElement(DataListCheck, { \"aria-labelledby\": option.value, checked: !this.isHidden(option.value), name: option.value, id: option.value, onChange: this.handleChange }),\n                    React.createElement(DataListItemCells, { dataListCells: [\n                            React.createElement(DataListCell, { id: \"table-column-management-item1\", key: \"table-column-management-item1\" },\n                                React.createElement(\"label\", { htmlFor: \"check1\" }, t(option.label))),\n                        ] }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ColumnManagementModalConnect = connect(mapStateToProps, mapDispatchToProps)(ColumnManagementModalBase);\nconst ColumnManagementModal = withTranslation()(ColumnManagementModalConnect);\nexport { ColumnManagementModal };\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Button, ButtonVariant, Popover, Title, Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = \"ocp\" /* ocp */;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatValue(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatValue(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatValue(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('ocp_details.title')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('dashboard.total_cost_tooltip', {\n                            supplementaryCost,\n                            infrastructureCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit },\n                        t('cost'),\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('ocp_details.supplementary_cost')),\n                                    React.createElement(\"p\", null, t('ocp_details.supplementary_cost_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('ocp_details.infrastructure_cost')),\n                                    React.createElement(\"p\", null, t('ocp_details.infrastructure_cost_desc'))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport './detailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = \"ocp\" /* ocp */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { hiddenColumns, isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: t('details.tag_names'),\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        title: t('ocp_details.infrastructure_cost'),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        title: t('ocp_details.supplementary_cost'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        title: t('ocp_details.infrastructure_cost'),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        title: t('ocp_details.supplementary_cost'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.ocpDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        { title: React.createElement(\"div\", null, InfrastructureCost), id: DetailsTableColumnIds.infrastructure },\n                        { title: React.createElement(\"div\", null, supplementaryCost), id: DetailsTableColumnIds.supplementary },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 7 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id));\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id));\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                loadingRows,\n                rows: filteredRows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, item: item, providerType: \"ocp\" /* ocp */, query: query, reportPathsType: reportPathsType, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"ocp\" /* ocp */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { tagReport, t } = this.props;\n            const options = [\n                { name: t('filter_by.values.cluster'), key: 'cluster' },\n                { name: t('filter_by.values.node'), key: 'node' },\n                { name: t('filter_by.values.project'), key: 'project' },\n                { name: t('filter_by.values.tag'), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"ocp\" /* ocp */, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { cloneDeep } from 'lodash';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { ColumnManagementModal, initHiddenColumns, } from 'pages/views/details/components/columnManagement/columnManagementModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: 'details.month_over_month_change', value: DetailsTableColumnIds.monthOverMonth },\n    { label: 'ocp_details.infrastructure_cost', value: DetailsTableColumnIds.infrastructure, hidden: true },\n    { label: 'ocp_details.supplementary_cost', value: DetailsTableColumnIds.supplementary, hidden: true },\n];\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"ocp\" /* ocp */;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.ocp_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"ocp\" /* ocp */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n","import OcpDetails from './ocpDetails';\nexport default OcpDetails;\n"],"sourceRoot":""}