{"version":3,"sources":["webpack:///./src/utils/sort.ts","webpack:///./src/utils/getComputedReportItems.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/components/commonChart/chartUtils.ts","webpack:///./src/components/textInput/textInput.styles.ts","webpack:///./src/components/textInput/textInput.tsx","webpack:///./src/components/commonChart/chartLegend.tsx","webpack:///./src/components/commonChart/chart.styles.ts","webpack:///./src/components/commonChart/chartLegendItem.styles.ts","webpack:///./src/components/commonChart/chartLegendItem.tsx","webpack:///./src/components/commonChart/chartTitle.tsx","webpack:///./src/pages/costDetails/costDetails.styles.ts","webpack:///./src/components/pieChart/pieChart.styles.ts","webpack:///./src/components/pieChart/pieChart.tsx","webpack:///./src/pages/costDetails/detailChart.tsx","webpack:///./src/pages/costDetails/detailItem.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/pages/costDetails/detailsToolbar.tsx","webpack:///./src/pages/costDetails/costDetails.tsx","webpack:///./src/pages/costDetails/index.ts"],"names":["getValueForItem","item","options","key","groups","getComputedReportItems","report","idKey","labelKey","sortKey","sortDirection","array","direction","sort","a","b","aVal","bVal","getUnsortedComputedReportItems","itemMap","visitDataPoint","dataPoint","values","forEach","value","total","id","label","account_alias","Object","assign","units","group","data","getIdKeyForGroupBy","groupBy","account","instance_type","region","service","formatValue","unit","lookup","split","toLowerCase","fValue","formatCurrency","formatStorage","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","transformReport","type","computedItems","utils_getComputedReportItems__WEBPACK_IMPORTED_MODULE_3__","map","i","createDatum","reduce","acc","d","prevValue","length","y","computedItem","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","parseFloat","name","getDateRangeString","datums","start","end","today","Date","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_2___default","getDatumDateRange","monthName","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","startDate","endDate","getTooltipLabel","datum","formatOptions","toString","styles","StyleSheet","create","textInput","width","fontSize","esm","paddingTop","paddingRight","paddingBottom","paddingLeft","lineHeight","outline","border",":focus","borderColor","flat","borderBottom","join","error","__rest","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","textInput_TextInput","react_default","Component","[object Object]","super","arguments","this","handleChange","evt","props","onChange","currentTarget","handleKeyPressed","onKeyPress","preventDefault","_a","className","isFlat","isError","createElement","legend","display","alignItems","ChartLegend","children","styling","Boolean","chartStyles","padding","strokeWidth","fillOpacity","tooltipText","fill","tooltipFlyout","previousMonth","stroke","currentMonth","chartLegendItem_styles_styles","reportSummaryTrend",":not(foo) svg","overflow",":not(foo) text","legendItem","color","var","marginRight","height","borderWidth","borderStyle","currentColor","backgroundColor","previousColor","ChartLegendItem","isCurrent","index","chartUtils","chartTitle_styles","chartTitle","marginBottom","ChartTitle","content","costDetailsPage","minHeight","header","justifyContent","headerLeft","flex","headerRight","totalLabel","totalValue","marginTop","totalLabelUnit","totalLabelDate","groupBySelector","groupBySelectorLabel","innerGroupBySelector","innerGroupBySelectorLabel","toolbarContainer","listViewOverride","index_esm","toolbarOverride","top","bottom","pie","pieChart_styles_styles","pieGroup","float","position","marginLeft","left","pieChart_PieChart","containerRef","createRef","state","formatDatumValue","formatDatumOptions","handleResize","setState","current","clientWidth","nextProps","setTimeout","window","addEventListener","removeEventListener","title","currentData","legendData","symbol","ref","victory_pie","colorScale","labels","labelComponent","victory_tooltip","cornerRadius","flyoutStyle","victory_legend","standalone","gutter","commonChart","reportType","mapStateToProps","common","queryString","reports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","DetailsChart","es","react_redux_es","prevProps","currentGroupBy","groupByOptions","DetailsItem","expanded","handleExpand","getQueryString","handleExpandClose","handleSelectChange","event","groupByKey","parentQuery","newQuery","filter","time_scope_units","time_scope_value","resolution","limit","group_by","api_query","parentGroupBy","defaultGroupBy","getDefaultGroupBy","ListView","Item","heading","checkboxInput","actions","InfoItem","stacked","onExpand","onExpandClose","Row","Col","option","isEqual","obj1","obj2","JSON","stringify","detailsToolbar_DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentSortType","sortField","isSortNumeric","isNumeric","isSortAscending","query","order_by","currentViewType","filterCategory","undefined","addQuery","keys","Array","isArray","field","getFilter","push","clearFilters","onFilterRemoved","filterAdded","filterValue","getAccountId","onFilterAdded","getAccountAlias","accounts","alias","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","slice","onValueKeyPress","stopPropagation","removeFilter","updated","selectFilterType","filterType","toggleCurrentSortDirection","onSortChanged","updateCurrentSortType","sortType","updateCurrentValue","prevState","cacheReport","placeholder","Toolbar","Filter","TypeSelector","filterTypes","onFilterTypeSelected","renderInput","Sort","sortTypes","sortFields","onSortTypeSelected","DirectionSelector","isAscending","onClick","Button","variant","link","Icon","Results","resultsTotal","ActiveLabel","List","onRemove","filterData","href","defaultProps","onActionPerformed","helpers","costDetails_reportType","baseQuery","costDetails_groupByOptions","costDetails_mapStateToProps","queryFromRoute","location","search","costDetails_mapDispatchToProps","__webpack_exports__","stateProps","dispatchProps","history","replace","getRouteForQuery","updateReport","getFilterFields","groupById","getSortTypes","bind","includes","filteredQuery","exportText","Title","size","month","getMonth","date","Fragment","groupItem","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_costDetails__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"0FAAA,SAAAA,EAAAC,EAAAC,GACA,oBAAAD,EACA,OAAAA,EAGA,OAAAA,EADAC,EAAAC,qGCHA,MAAAC,GAAA,kDACA,SAAAC,GAAAC,OAAwCA,EAAAC,QAAAC,WAAAD,EAAAE,UAAA,QAAAC,gBAAA,IACxC,ODIA,SAAAC,EAAAT,GACA,MAAAU,UAAWA,EAAA,GAA0BV,MACrC,UAAAS,GAAAE,KAAA,CAAAC,EAAAC,KACA,MAAAC,EACAhB,EADA,IAAAY,EACAE,EACAC,EADAb,GAEAe,EACAjB,EADA,IAAAY,EACAG,EACAD,EADAZ,GAEA,OAAAc,EAAAC,GACA,EAEAD,EAAAC,EACA,EAEA,ICnBAJ,CAAAK,GACAZ,SACAC,QACAC,WACAE,gBACAD,aAEAN,IAAAM,EACAG,UAAAF,IAGA,SAAAQ,GAAAZ,OAAgDA,EAAAC,QAAAC,WAAAD,IAChD,IAAAD,EACA,SAEA,MAAAa,KACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAC,QAAAC,IACA,MAAAC,EAAAD,EAAAC,MACAC,EAAAF,EAAAjB,GACA,IAAAoB,EAAAH,EAAAhB,GACA,YAAAA,GAAAgB,EAAAI,gBACAD,EAAAH,EAAAI,eAEAT,EAAAO,GASAP,EAAAO,GAAAG,OAAAC,UAA8CX,EAAAO,IAAgBD,MAAAN,EAAAO,GAAAD,UAR9DN,EAAAO,IACAA,KACAD,QACAE,QACAI,MAAAP,EAAAO,SAOA3B,EAAAmB,QAAAS,IACA,GAAAX,EAAAW,GACA,OAAAX,EAAAW,GAAAT,QAAAH,MAKA,OADAd,EAAA2B,KAAAV,QAAAH,GACAS,OAAAP,OAAAH,GAEA,SAAAe,EAAAC,MACA,OAAAA,EAAAC,QACA,UAEAD,EAAAE,cACA,gBAEAF,EAAAG,OACA,SAEAH,EAAAI,QACA,UAEA,0GC9DA,MAAAC,EAAA,CAAAhB,EAAAiB,EAAAvC,QACA,MAAAwC,EAAAD,KAAAE,MAAA,QAAAC,cACAC,EAAArB,GAAA,EACA,OAAAkB,GACA,UACA,OAAAI,EAAAD,EAAAH,EAAAxC,GACA,SACA,OAAA6C,EAAAF,EAAAH,EAAAxC,GACA,QACA,OAAA8C,EAAAH,EAAAH,EAAAxC,KAGA8C,EAAA,CAAAxB,EAAAyB,GAA6CC,uBAC7C1B,EAAA2B,QAAAD,GAEAJ,EAAA,CAAAtB,EAAAyB,GAA8CC,iBAAA,SAC9C,IAAAL,EAAArB,EAIA,OAHAA,IACAqB,EAAA,GAEAA,EAAAO,eAAA,MACAC,MAAA,WACAC,SAAA,MACAC,sBAAAL,EACAM,sBAAAN,KAGAH,EAAA,CAAAvB,EAAAyB,GAA6CC,iBAAA,QAC7C1B,EAAA2B,QAAAD,wMCxBA,SAAAO,EAAAnD,EAAAoD,EAAA,EAAAvD,EAAA,QACA,IAAAG,EACA,SAEA,MAAAqD,EAAA9B,OAAA+B,EAAA,EAAA/B,EACAvB,SACAC,MAAAJ,EACAM,QAAA,KACAC,cAAA,IAEA,WAAAgD,EACAC,EAAAE,IAAAC,GAAAC,EAAAD,EAAArC,MAAAqC,EAAA3D,IAEA,IAAAuD,EACAC,EAAAE,IAAAC,GAAAC,EAAAD,EAAArC,MAAAqC,EAAA3D,IAEAwD,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAzC,MAAAyC,EAAA/D,SAGA,SAAA4D,EAAAvC,EAAA8C,EAAA/D,EAAA,QAEA,OACAgE,EAFA,SAAAhE,EAAAiE,IAAAF,EAAA5C,IAAA4C,EAAA3C,MAGA0C,EAAAI,WAAAjD,EAAA2B,QAAA,IACAhD,IAAAmE,EAAA5C,GACAgD,KAAAJ,EAAA5C,GACAK,MAAAuC,EAAAvC,OAaA,SAAA4C,EAAAC,GACA,MAAAC,EAAAC,GAXA,SAAAF,GACA,IAAAA,EAAAR,OAAA,CACA,MAAAW,EAAA,IAAAC,KAEA,OADAC,IAAAF,GACAA,GAIA,OAFA,IAAAC,KAAAJ,EAAA,GAAAzE,IAAA,aACA,IAAA6E,KAAAJ,IAAAR,OAAA,GAAAjE,IAAA,cAIA+E,CAAAN,GACAO,EAAAC,IAAAP,EAAA,OACAQ,EAAAb,IAAAK,GACAS,EAAAd,IAAAM,GACA,SAAcK,KAAaX,IAAAK,KAAiBQ,IAAAC,QAA8BA,IAAQ,KAElF,SAAAC,EAAAC,EAAAhD,EAAAiD,EAAAlF,EAAA,QACA,IAAAiF,EAAArF,IACA,SAEA,YAAAI,EAAA,CAEA,SADA6E,IAAAI,EAAArF,IAAA,kBAC2BqC,EAAAgD,EAAAnB,EAAAmB,EAAAzD,MAAA0D,KAE3B,OAAAD,EAAArF,IAAAuF,oFC1DA,MAAAC,EAAAC,EAAA,EAAAC,QACAC,WACAC,MAAA,OACAC,SAAAC,EAAA,EAAAzE,MACA0E,WAAAD,EAAA,EAAAzE,MACA2E,aAAAF,EAAA,EAAAzE,MACA4E,cAAAH,EAAA,EAAAzE,MACA6E,YAAAJ,EAAA,EAAAzE,MACA8E,WAAA,OACAC,QAAA,EACAC,UAAmBP,EAAA,EAAAzE,eAAqCyE,EAAA,EAAAzE,QACxDiF,UACAC,YAAAT,EAAA,EAAAzE,QAGAmF,MACAH,OAAA,OACAI,cACAX,EAAA,EAAAzE,MACA,QACAyE,EAAA,EAAAzE,OACAqF,KAAA,KACAJ,UACAG,cACAX,EAAA,EAAAzE,MACA,QACAyE,EAAA,EAAAzE,OACAqF,KAAA,OAGAC,OACAJ,YAAAT,EAAA,EAAAzE,MACAiF,UACAC,YAAAT,EAAA,EAAAzE,UCnCA,IAAAuF,EAAA,SAAAC,EAAAC,GACA,IAAAC,KACA,QAAAC,KAAAH,EAAAnF,OAAAuF,UAAAC,eAAAC,KAAAN,EAAAG,IAAAF,EAAAM,QAAAJ,GAAA,IACAD,EAAAC,GAAAH,EAAAG,IACA,SAAAH,GAAA,mBAAAnF,OAAA2F,sBACA,KAAA1D,EAAA,MAAAqD,EAAAtF,OAAA2F,sBAAAR,GAA4DlD,EAAAqD,EAAA/C,OAAcN,IAAAmD,EAAAM,QAAAJ,EAAArD,IAAA,IAC1EoD,EAAAC,EAAArD,IAAAkD,EAAAG,EAAArD,KACA,OAAAoD,SAKAO,UAAAC,EAAA5G,EAAA6G,UACAC,cACAC,SAAAC,WACAC,KAAAC,aAAA,CAAAC,IACAF,KAAAG,MAAAC,SAAAF,EAAAG,cAAA5G,MAAAyG,KAEAF,KAAAM,iBAAA,CAAAJ,IACAF,KAAAG,MAAAI,YAAA,UAAAL,EAAA9H,MACA8H,EAAAM,iBACAR,KAAAG,MAAAI,WAAAL,MAIAL,SACA,MAAAY,EAAAT,KAAAG,OAAAO,UAAgCA,EAAAC,SAAAC,WAA6BH,EAAAN,EAAAnB,EAAAyB,GAAA,iCAC7D,OAAAd,EAAA5G,EAAA8H,cAAA,QAAA/G,OAAAC,UAA6DoG,GAAUO,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA4G,EAAA9C,EAAAG,UAAA4C,GAAA/C,EAAAgB,KAAAgC,GAAAhD,EAAAmB,OAAAqB,SAAAJ,KAAAC,aAAAM,WAAAP,KAAAM,oHCxBvE,MAAA1C,EAAAC,EAAA,EAAAC,QACAgD,QACAC,QAAA,OACAC,WAAA,YAGAC,EAAA,EAAsBC,WAAA5F,YACtB,MAAA6F,EAAAC,QAAA9F,IAAA8F,QAAA9F,EAAAwF,QAAAxF,EAAAwF,OAAAlD,EAAAkD,OACA,OAAAnB,EAAA5G,EAAA8H,cAAA,OAAuCH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAAqH,IAA0BD,iBCTjE,MAAAG,GACAC,QAAA,EACArH,OACAC,MAAeqH,YAAA,EAAAC,YAAA,KAEfC,aACAxD,SAAA,OACAyD,KAAAxD,EAAA,EAAAzE,OAEAkI,eAAoBD,KAAAxD,EAAA,EAAAzE,OACpBmI,eACA1H,MACAwH,KAAAxD,EAAA,EAAAzE,MACAoI,OAAA3D,EAAA,EAAAzE,QAGAqI,cACA5H,MACAwH,KAAAxD,EAAA,EAAAzE,MACAoI,OAAA3D,EAAA,EAAAzE,SClBAsI,GDsBAlE,EAAA,EAAAC,QACAkE,oBACAC,iBACAC,SAAA,WAEAC,kBACAlE,SAAA,OACA5B,OAAA,WC7BAwB,EAAA,EAAAC,QACAsE,YACArB,QAAA,OACAC,WAAA,SACA/C,SAAAC,EAAA,EAAAzE,MACA4I,MAAAnE,EAAA,EAAAoE,IACAC,YAAArE,EAAA,EAAAzE,OAEA4I,OACAG,OAAA,GACAxE,MAAA,GACAuE,YAAArE,EAAA,EAAAzE,MACAgJ,YAAAvE,EAAA,EAAAzE,MACAiJ,YAAA,SAEAC,cACAC,gBAAAvB,EAAAS,aAAA5H,KAAAwH,KACA/C,YAAA0C,EAAAS,aAAA5H,KAAA2H,QAEAgB,eACAD,gBAAAvB,EAAAO,cAAA1H,KAAAwH,KACA/C,YAAA0C,EAAAO,cAAA1H,KAAA2H,wBCpBA,MAAAiB,EAAA,EAA0B5I,OAAA6I,YAAAvK,QAAA,OAAAwK,QAAA1H,YAC1B,IAAApB,GAAA,IAAAA,EAAAmC,OACA,OAAAsD,EAAA5G,EAAA8H,cAAA,YAEA,MAAAM,EAAAC,QAAA9F,IAAA8F,QAAA9F,EAAA8G,YACA9G,EAAA8G,WACAL,EAAAK,WACA,YAAA5J,EAAA,CACA,MAAAoB,EAAAE,OAAAmJ,EAAA,EAAAnJ,CAAAI,GACA,OAAAyF,EAAA5G,EAAA8H,cAAA,OAA4CH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAAqH,IAC5CxB,EAAA5G,EAAA8H,cAAA,OAAwCH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAAiI,EAAAM,MAAAU,EAAAhB,EAAAY,aAAAZ,EAAAc,iBACxCjJ,GAGA,OAAA+F,EAAA5G,EAAA8H,cAAA,OAA4CzI,IAAA8B,EAAA8I,GAAA5K,IAAAsI,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAAqH,IAC5CxB,EAAA5G,EAAA8H,cAAA,OAAwCH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAAiI,EAAAM,MAAAU,EAAAhB,EAAAY,aAAAZ,EAAAc,iBACxC3I,EAAA8I,GAAA5K,MChBA8K,EAAArF,EAAA,EAAAC,QACAqF,YACAlF,SAAAC,EAAA,EAAAzE,MACA2J,aAAAlF,EAAA,EAAAzE,SAGA4J,EAAA,EAAqBnC,cAAWvB,EAAA5G,EAAA8H,cAAA,OAAkCH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAAoJ,EAAAC,aAAoCjC,+PCPtG,MAAAtD,EAAAC,EAAA,EAAAC,QACAwF,SACAV,gBAAA1E,EAAA,EAAAoE,IACAnE,WAAAD,EAAA,EAAAzE,MACA+I,OAAA,QAEAe,iBACAX,gBAAA1E,EAAA,EAAAoE,IACAkB,UAAA,QAEAC,QACA1C,QAAA,OACA2C,eAAA,gBACApC,QAAApD,EAAA,EAAAoE,IACAM,gBAAA1E,EAAA,EAAAoE,KAEAqB,YACAC,KAAA,GAEAC,aACA9C,QAAA,OACA2C,eAAA,YAEAhK,OACAqH,QAAA,OACAC,WAAA,UAEA8C,cACAC,YACAC,UAAA,EACAZ,aAAA,EACAb,YAAArE,EAAA,EAAAoE,KAEA2B,gBACAhG,SAAAC,EAAA,EAAAzE,MACA4I,MAAAnE,EAAA,EAAAoE,KAEA4B,gBACAjG,SAAAC,EAAA,EAAAzE,MACA4I,MAAAnE,EAAA,EAAAoE,KAEA6B,iBACApD,QAAA,OACAC,WAAA,UAEAoD,sBACAhB,aAAA,EACAb,YAAArE,EAAA,EAAAoE,KAEA+B,sBACAtD,QAAA,OACAC,WAAA,SACA/C,SAAAC,EAAA,EAAAzE,OAEA6K,2BACAlB,aAAA,EACAb,YAAArE,EAAA,EAAAoE,KAEAiC,kBACA3B,gBAAA1E,EAAA,EAAAzE,SAGA+K,EAAAC,EAAA;;eAEevG,EAAA,EAAAzE;sBACOyE,EAAA,EAAAzE;IAClByE,EAAA,EAAAvB,SAA0BuB,EAAA,EAAAzE;IAC1ByE,EAAA,EAAAvB,SAA0BuB,EAAA,EAAAzE;;;;;;;kBAOZyE,EAAA,EAAAzE;;;;;;;;;;mBAUCyE,EAAA,EAAAzE;;;;;iBAKFyE,EAAA,EAAAzE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBAsEIyE,EAAA,EAAAzE;iBACJyE,EAAA,EAAAzE;;;;iBAIAyE,EAAA,EAAAzE;aACJyE,EAAA,EAAAzE;;;;eAIEyE,EAAA,EAAAzE,SAA0ByE,EAAA,EAAAzE;;;;;;uBAMlByE,EAAA,EAAAzE,SAA0ByE,EAAA,EAAAzE;;;;;mBAK9ByE,EAAA,EAAAzE;qBACEyE,EAAA,EAAAzE;;;;;;;;;;;;;eAaNyE,EAAA,EAAAzE,SAA0ByE,EAAA,EAAAzE;QACjCyE,EAAA,EAAAzE,SAA0ByE,EAAA,EAAAzE;cACpByE,EAAA,EAAAzE,UAA2ByE,EAAA,EAAAzE,UAA2ByE,EAAA,EAAAzE,UAA2ByE,EAAA,EAAAzE;;;QAGvFyE,EAAA,EAAAzE;QACAyE,EAAA,EAAAzE;;;;;;;;;;kBAUUyE,EAAA,EAAAzE;;;;QAIVyE,EAAA,EAAAzE;QACAyE,EAAA,EAAAzE;;;;EAKRiL,EAAAD,EAAA;iBACiBvG,EAAA,EAAAzE;kBACCyE,EAAA,EAAAzE;sBACIyE,EAAA,EAAAzE;eACPyE,EAAA,EAAAzE;;;;;;;;;;;aAWFyE,EAAA,EAAAzE;oBACOyE,EAAA,EAAAzE;;;;;;mBAMDyE,EAAA,EAAAzE;sBACGyE,EAAA,EAAAzE;;;;;;;;;;;;aAYTyE,EAAA,EAAAzE;mBACMyE,EAAA,EAAAzE;;;;iBAIFyE,EAAA,EAAAzE;aACJyE,EAAA,EAAAzE;;;;;;;;;;qBAUQyE,EAAA,EAAAzE;;;;iBAIJyE,EAAA,EAAAzE;;oBAEGyE,EAAA,EAAAzE;qBACCyE,EAAA,EAAAzE;;;;;;uBAMEyE,EAAA,EAAAzE;QACfyE,EAAA,EAAAzE;;;;;;iBAMSyE,EAAA,EAAAzE;eACFyE,EAAA,EAAAzE;kBACGyE,EAAA,EAAAzE;mBACCyE,EAAA,EAAAzE;;;;;;;;mBAQAyE,EAAA,EAAAzE;qBACEyE,EAAA,EAAAzE;qBACAyE,EAAA,EAAAzE;;;;qBAIAyE,EAAA,EAAAzE;;;;qBAIAyE,EAAA,EAAAzE;;;;mBAIFyE,EAAA,EAAAzE;uBACIyE,EAAA,EAAAzE;;;;;;;qBAOFyE,EAAA,EAAAzE;;;mECrUrB,MAAA4H,GACAC,SAAcqD,IAAA,EAAAC,OAAA,GACdC,KACA3K,MACAqH,YAAA,EACAC,YAAA,GACAK,OAAA3D,EAAA,EAAAzE,QAGAgI,aACAxD,SAAAC,EAAA,EAAAzE,MACAiI,KAAAxD,EAAA,EAAAzE,OAEAkI,eAAoBE,OAAA3D,EAAA,EAAAzE,QAEpBqL,EAAAjH,EAAA,EAAAC,QACAiH,UACAhE,QAAA,OACAiE,MAAA,OACAC,SAAA,WACA9G,WAAA,OACA+G,WAAA,OACAC,KAAA,WAGAtH,EAAA,EAAAC,QACAgD,QACAC,QAAA,QACAC,WAAA,UAEAoB,YACArB,QAAA,OACAC,WAAA,SACA/C,SAAAC,EAAA,EAAAzE,MACA4I,MAAAnE,EAAA,EAAAoE,IACAC,YAAArE,EAAA,EAAAzE,eC9BA2L,UAAAzF,EAAA5G,EAAA6G,UACAC,cACAC,SAAAC,WACAC,KAAAqF,aAAA1F,EAAA5G,EAAAuM,YACAtF,KAAAuF,OACAvH,MAAA,GAEAgC,KAAAxC,gBAAA,CAAAC,IACA,MAAA+H,iBAAmBA,EAAAC,qBAAArL,WAAgD4F,KAAAG,MAEnE,OADArG,OAAAmJ,EAAA,EAAAnJ,CAAA2D,EAAA+H,EAAAC,EAAArL,KAGA4F,KAAA0F,aAAA,MACA1F,KAAA2F,UAA2B3H,MAAAgC,KAAAqF,aAAAO,QAAAC,gBAG3BhG,sBAAAiG,GACA,QAAAA,EAAA5L,KAKA2F,oBACAkG,WAAA,KACA/F,KAAA2F,UAA2B3H,MAAAgC,KAAAqF,aAAAO,QAAAC,cAC3BG,OAAAC,iBAAA,SAAAjG,KAAA0F,gBAGA7F,uBACAmG,OAAAE,oBAAA,SAAAlG,KAAA0F,cAEA7F,SACA,MAAAsG,MAAeA,EAAA3D,SAAAxE,QAAA9D,OAAAE,WAAsC4F,KAAAG,MACrDiG,EAAAtM,OAAAmJ,EAAA,EAAAnJ,CAAAI,EAAA,EAAAE,GACAiM,EAAAD,EAAAtK,IAAA5D,KACAyE,KAAAzE,EAAAyE,KAAAgB,WAAA,KAAA7D,OAAAW,EAAA,EAAAX,CAAA5B,EAAAoE,GAAA,IACAgK,QAAqB3K,KAAA,aAGrB,OAAAgE,EAAA5G,EAAA8H,cAAA,OAA4CH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAAgL,EAAAC,UAAAwB,IAAAvG,KAAAqF,cAC5CjE,QAAAgF,EAAA/J,SAAAsD,EAAA5G,EAAA8H,cAAA2F,EAAA,GAA6ElF,QAAAD,EAAAC,QAAAkB,SAAAxE,QAAAyI,WAF7E,OAE6EnL,MAAA+F,EAAAwD,IAAA3K,KAAAkM,EAAAM,OAAA1G,KAAAxC,gBAAAmJ,eAAAhH,EAAA5G,EAAA8H,cAAA+F,EAAA,GAA+MC,aAAA,EAAAC,YAAAzF,EAAAM,kBAC5RhC,EAAA5G,EAAA8H,cAAA,OAAwC7C,MAAA,IAAAwE,OAAA,KAA0BpB,QAAAgF,EAAA/J,SAAAsD,EAAA5G,EAAA8H,cAAAkG,EAAA,GAAsE3O,IAAA+N,EAAAa,YAAA,EAAAP,WAHxI,OAGwIjK,EAAA,EAAAF,EAAA,EAAA2K,OAAA,GAAA/M,KAAAmM,KACxI1G,EAAA5G,EAAA8H,cAAAqG,EAAA,OAAAf,KC1CA,MAAAgB,EAAA,OAkBA,MAAAC,EAAAtN,OAAAuN,EAAA,EAAAvN,CAAA,CAAAyL,GAAuD+B,kBAGvD,OAAY/O,OAFZgP,EAAA,EAAAC,aAAAjC,EAAA,OAAA+B,GAEYG,kBADZF,EAAA,EAAAG,wBAAAnC,EAAA,OAAA+B,MAGAK,GACAC,YAAAL,EAAA,EAAAK,aAEAC,EAAA/N,OAAAgO,EAAA,EAAAhO,UAAAiO,EAAA,EAAAjO,CAAAsN,EAAAO,EAAA7N,eAzBA6F,EAAA5G,EAAA6G,UACAC,oBACA,MAAAtH,OAAeA,EAAA+O,eAAsBtH,KAAAG,MACrC5H,GACAyH,KAAAG,MAAAyH,YAAAT,EAAAG,GAGAzH,mBAAAmI,GACAA,EAAAV,cAAAtH,KAAAG,MAAAmH,aACAtH,KAAAG,MAAAyH,YAAAT,EAAAnH,KAAAG,MAAAmH,aAGAzH,SACA,MAAAoI,eAAeA,EAAA1P,UAAyByH,KAAAG,MACxC,OAAAR,EAAA5G,EAAA8H,cAAAuE,GAA+C5C,OAAA,IAAAxE,MAAA,IAAA9D,KAAA3B,EAAAiN,iBAAA/K,EAAA,EAAAL,QAAA6N,QCZ/CC,IACKtO,MAAA,UAAAH,MAAA,YACAG,MAAA,UAAAH,MAAA,YACAG,MAAA,SAAAH,MAAA,WA0FL,MAAA0O,EAAArO,OAAAgO,EAAA,EAAAhO,UAAAiO,EAAA,EAAAjO,iBAxFA6F,EAAA5G,EAAA6G,UACAC,cACAC,SAAAC,WACAC,KAAAuF,OACA6C,UAAA,GAEApI,KAAAqI,aAAA,MACA,MAAAJ,eAAmBA,GAAiBjI,KAAAuF,MACpC+B,EAAAtH,KAAAsI,eAAAL,GACAjI,KAAA2F,UAA2ByC,UAAA,EAAAd,kBAE3BtH,KAAAuI,kBAAA,MACAvI,KAAA2F,UAA2ByC,UAAA,MAE3BpI,KAAAwI,mBAAA,CAAAC,IACA,MAAAC,EAAAD,EAAApI,cACA5G,MACA6N,EAAAtH,KAAAsI,eAAAI,GACA1I,KAAA2F,UAA2BsC,eAAAS,EAAApB,kBAG3BzH,eAAAzF,GACA,MAAAuO,YAAeA,EAAAzQ,QAAoB8H,KAAAG,MAEnCyI,GACAC,QACAC,iBAAA,QACAC,kBAAA,EACAC,WAAA,UACAC,MAAA,GAEAC,UAAuBrJ,CARvB/F,OAAAxB,EAAA,EAAAwB,CAAA6O,EAAAO,WAQuBhR,EAAAyB,GAAAkG,CAAAzF,GAAA,MAEvB,OAAAN,OAAAqP,EAAA,EAAArP,CAAA8O,GAEA/I,oBACA,MAAAuJ,cAAeA,GAAgBpJ,KAAAG,MAC/B,IAAA/F,EAAA,GACA,OAAAgP,GACA,cACAhP,EAAA,UACA,MACA,cAGA,aACAA,EAAA,UAGA,OAAAA,EAEAyF,oBACA,MAAAwJ,EAAArJ,KAAAsJ,oBACAhC,EAAAtH,KAAAsI,eAAAe,GACArJ,KAAA2F,UAAuBsC,eAAAoB,EAAA/B,gBAEvBzH,mBAAAmI,GACA,GAAAhI,KAAAG,MAAAiJ,gBAAApB,EAAAoB,cAAA,CACA,MAAAC,EAAArJ,KAAAsJ,oBACAtJ,KAAA2F,UAA2BsC,eAAAoB,KAG3BxJ,SACA,MAAAV,EAAeA,EAAAjH,OAAAkR,gBAAA1P,SAAgCsG,KAAAG,OAC/C8H,eAAeA,EAAAX,eAA8BtH,KAAAuF,MAC7C,OAAA5F,EAAA5G,EAAA8H,cAAA0I,EAAA,EAAAC,MAAoDpR,IAAAF,EAAA0B,MAAA6P,QAAAvR,EAAA0B,MAAA8P,cAAA/J,EAAA5G,EAAA8H,cAAA,SAAoFlF,KAAA,aAAmBgO,SAC3JhK,EAAA5G,EAAA8H,cAAA0I,EAAA,EAAAK,UAAwDxR,IAAA,IAAAyR,SAAA,GACxDlK,EAAA5G,EAAA8H,cAAA,cAAA/G,OAAAW,EAAA,EAAAX,CAAA5B,EAAAwB,QACAiG,EAAA5G,EAAA8H,cAAA,aACA3I,EAAAwB,QAAA,KAAA0B,QAAA,GACA+D,EAAA,sBACA2K,SAAA9J,KAAAqI,aAAA0B,cAAA/J,KAAAuI,mBACA5I,EAAA5G,EAAA8H,cAAAmJ,EAAA,OACArK,EAAA5G,EAAA8H,cAAAoJ,EAAA,OACAtK,EAAA5G,EAAA8H,cAAA,WACAlB,EAAA5G,EAAA8H,cAAA,OAAoDH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAAyG,uBACpD1E,EAAA5G,EAAA8H,cAAA,SAA0DH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAA0G,4BAC1DnF,EAAA,kBACA,KACAQ,EAAA5G,EAAA8H,cAAA,UAA2DlH,GAAAzB,EAAA0B,MAAA1B,EAAA0B,MAAA+D,WAAA,GAAAyC,SAAAJ,KAAAwI,oBAAiFN,EAAApM,IAAAoO,IAC5I,GAAAA,EAAAzQ,QAAA2P,EACA,OAAAzJ,EAAA5G,EAAA8H,cAAA,UAA2EzI,IAAA8R,EAAAzQ,YAAAyQ,EAAAzQ,OAAyC0F,qBAAuB+K,EAAAtQ,cAG3IwH,QAAA6G,IACA7G,QAAAkG,IAAA3H,EAAA5G,EAAA8H,cAAAgH,GAAwFP,cAAAW,4FCpGxF,SAAAkC,EAAAC,EAAAC,GACA,IAAAtR,EAAAuR,KAAAC,UAAAH,GACApR,EAAAsR,KAAAC,UAAAF,GAOA,OANAtR,IACAA,EAAA,IAEAC,IACAA,EAAA,IAEAD,EACA6B,MAAA,IACA9B,OACAgG,KAAA,MACA9F,EACA4B,MAAA,IACA9B,OACAgG,KAAA,UCXA0L,UAAA7K,EAAA5G,EAAA6G,UACAC,cACAC,SAAAC,WACAC,KAAAuF,OACAkF,iBACAC,kBAAA1K,KAAAG,MAAAwK,aAAA,GACAC,aAAA,GACAC,gBAAA7K,KAAAG,MAAA2K,UACAC,cAAA/K,KAAAG,MAAA2K,UAAAE,UACAC,kBAAAjL,KAAAG,MAAA+K,OACA,SAAAlL,KAAAG,MAAA+K,MAAAC,SAAAnL,KAAAG,MAAA2K,UAAAnR,KACAyR,gBAAA,OACAC,oBAAAC,EACA/S,YAAA+S,GAEAtL,KAAAuL,SAAA,CAAAL,IACA,MAAAT,KACA3Q,OAAA0R,KAAAN,EAAAhC,UAAA1P,QAAApB,IACA,SAAA8S,EAAAhC,SAAA9Q,GACA,GAAAqT,MAAAC,QAAAR,EAAAhC,SAAA9Q,IACA8S,EAAAhC,SAAA9Q,GAAAoB,QAAAC,IACA,MAAAkS,EAAAvT,EAAAuB,IAAAvB,EACAyQ,EAAA7I,KAAA4L,UAAAD,EAAAlS,GACAgR,EAAAoB,KAAAhD,SAGA,CACA,MAAA8C,EAAAvT,EAAAuB,IAAAvB,EACAyQ,EAAA7I,KAAA4L,UAAAD,EAAAT,EAAAhC,SAAA9Q,IACAqS,EAAAoB,KAAAhD,MAIA7I,KAAA2F,UAA2B8E,oBAE3BzK,KAAA8L,aAAA,CAAArD,IACA,MAAAiC,kBAAmBA,GAAoB1K,KAAAuF,MACvCvF,KAAA2F,UAA2B8E,mBAC3BzK,KAAAG,MAAA4L,gBAAArB,EAAA/Q,GAAA,IACA8O,EAAAjI,mBAGAR,KAAAgM,YAAA,EAAAL,EAAAlS,KACA,MAAAiR,kBAAmBA,GAAoB1K,KAAAuF,MACvC0G,EAAAjM,KAAAkM,aAAAP,EAAAhS,GAAAF,GACAuG,KAAAG,MAAAgM,cAAAzB,EAAA/Q,GAAAsS,KAGAjM,KAAAoM,gBAAA,EAAAT,EAAAlS,KACA,MAAAlB,OAAmBA,GAASyH,KAAAuF,MAC5B,IAAA0G,EAAAxS,EAaA,OAZAlB,KAAA2B,MAAA,YAAAyR,GACApT,EAAA2B,KAAAV,QAAAU,IACAA,EAAAmS,SAAA7S,QAAA6S,IACAA,EAAA9S,OAAAC,QAAAD,IACA,GAAAA,EAAAc,UAAAZ,GAAAF,EAAAM,cAEA,OADAoS,EAAA1S,EAAAM,eACA,QAMAoS,IAGAjM,KAAAkM,aAAA,EAAAP,EAAAlS,KACA,MAAAlB,OAAmBA,GAASyH,KAAAuF,MAC5B,IAAA0G,EAAAxS,EAaA,OAZAlB,KAAA2B,MAAA,YAAAyR,GACApT,EAAA2B,KAAAV,QAAAU,IACAA,EAAAmS,SAAA7S,QAAA6S,IACAA,EAAA9S,OAAAC,QAAAD,IACA,GAAAA,EAAAM,gBAAAJ,GAAAF,EAAAc,QAEA,OADA4R,EAAA1S,EAAAc,SACA,QAMA4R,IAEAjM,KAAA4L,UAAA,EAAAD,EAAAlS,KACA,MAAAiR,kBAAmBA,GAAoB1K,KAAAuF,MACvC+G,EAAAtM,KAAAoM,gBAAAT,EAAAlS,GACA8S,EAAAvM,KAAAwM,eAAAb,EAAAW,GACA,OACAX,MAAAjB,EAAA/Q,GACAC,MAAA2S,EACA9S,WAGAuG,KAAAwM,eAAA,EAAAb,EAAAlS,KACA,IAAAgT,EAAA,GAmBA,OAZAA,GALAA,EADAd,EAAAxF,MACAwF,EAAAxF,MAGAwF,GAGAe,OAAA,GAAAC,cAAAF,EAAAG,MAAA,QACAnT,EAAA4R,eACAoB,MAAiChT,EAAA4R,eAAAlF,OACjC1M,EAAA4R,kBAA4C5R,EAAAwS,YAAA9F,OAAA1M,EAAAwS,cAE5CxS,EAAA0M,MACAsG,GAAAhT,EAAA0M,MAGAsG,GAAAhT,EAEAgT,IAEAzM,KAAA6M,gBAAA,CAAA3N,IACA,MAAA0L,aAAmBA,EAAAF,qBAAkC1K,KAAAuF,MACrD,UAAArG,EAAA9G,KAAAwS,KAAAvO,OAAA,IACA2D,KAAA2F,UAA+BiF,aAAA,KAC/B5K,KAAAgM,YAAAtB,EAAAE,GACA1L,EAAA4N,kBACA5N,EAAAsB,oBAGAR,KAAA+M,aAAAlE,KACA,MAAA4B,cAAmBA,GAAgBzK,KAAAuF,MACnCvC,EAAAyH,EAAAjL,QAAAqJ,GACA,GAAA7F,GAAA,GACA,MAAAgK,MACAvC,EAAAmC,MAAA,EAAA5J,MACAyH,EAAAmC,MAAA5J,EAAA,IAEAhD,KAAA2F,UAA+B8E,cAAAuC,IAC/BhN,KAAAG,MAAA4L,gBAAAlD,EAAA8C,MAAA9C,EAAApP,UAGAuG,KAAAiN,iBAAAC,KACA,MAAAxC,kBAAmBA,GAAoB1K,KAAAuF,MACvCmF,IAAAwC,GACAlN,KAAA2F,UACAiF,aAAA,GACAF,kBAAAwC,MAIAlN,KAAAmN,2BAAA,MACA,MAAAtC,gBAAmBA,EAAAI,mBAAmCjL,KAAAuF,MACtDvF,KAAA2F,UAA2BsF,qBAC3BjL,KAAAG,MAAAiN,cAAAvC,EAAAlR,IAAAsR,KAEAjL,KAAAqN,sBAAAC,KAEAtN,KAAA2F,UACAkF,gBAAAyC,EACAvC,cAAAuC,EAAAtC,UACAC,iBAJA,IAMAjL,KAAAG,MAAAiN,cAAAE,EAAA3T,IANA,KAQAqG,KAAAuN,mBAAA,CAAA3C,IACA5K,KAAA2F,UAA2BiF,mBAG3B/K,mBAAAmI,EAAAwF,GACA,MAAA7C,aAAeA,EAAAO,QAAA3S,SAAAuS,aAAyC9K,KAAAG,MACxDsN,EAAA,OAAAzN,KAAAuF,MAAAhN,QAAA2S,EAAAhC,SAAA7O,SACA9B,GAAA4R,EAAA5R,EAAAyP,EAAAzP,UAAAkV,IAGAA,EACAzN,KAAA2F,UACApN,UACiB,KACjByH,KAAAuL,SAAAL,KAIAlL,KAAAuL,SAAAL,GAEAf,EAAAQ,EAAA3C,EAAA2C,eACA3K,KAAA2F,UACA+E,kBAAA1K,KAAAG,MAAAwK,aAAA,KAGAR,EAAAW,EAAA9C,EAAA8C,YACA9K,KAAA2F,UACAkF,gBAAAC,EACAG,kBAAAC,GAAA,SAAAA,EAAAC,SAAAL,EAAAnR,QAKAkG,cACA,MAAA6K,kBAAeA,EAAAE,gBAAkC5K,KAAAuF,MACjD,OAAAmF,EAGA/K,EAAA5G,EAAA8H,cAAA9C,EAAA,GAAgDqC,SAAAJ,KAAAuN,mBAAAhN,WAAAP,KAAA6M,gBAAAa,YAAAhD,EAAAgD,YAAA/R,KAAA,OAAAlC,MAAAmR,IAFhD,KAIA/K,SACA,MAAA4K,cAAeA,EAAAC,oBAAAG,kBAAAE,gBAAAE,mBAAqFjL,KAAAuF,MACpG,OAAA5F,EAAA5G,EAAA8H,cAAA8M,EAAA,OACAhO,EAAA5G,EAAA8H,cAAA+M,EAAA,OACAjO,EAAA5G,EAAA8H,cAAA+M,EAAA,EAAAC,cAA0DC,YAAA9N,KAAAG,MAAAwK,aAAAD,oBAAAqD,qBAAA/N,KAAAiN,mBAC1DjN,KAAAgO,eACArO,EAAA5G,EAAA8H,cAAAoN,EAAA,OACAtO,EAAA5G,EAAA8H,cAAAoN,EAAA,EAAAJ,cAAwDK,UAAAlO,KAAAG,MAAAgO,WAAAtD,kBAAAuD,mBAAApO,KAAAqN,wBACxD1N,EAAA5G,EAAA8H,cAAAoN,EAAA,EAAAI,mBAA6DrD,UAAAD,EAAAuD,YAAArD,EAAAsD,QAAAvO,KAAAmN,8BAC7DxN,EAAA5G,EAAA8H,cAAA,OAAwCH,UAAA,cACxCf,EAAA5G,EAAA8H,cAAA2N,EAAA,GAA6CC,QAAAD,EAAA,EAAAE,MAC7C/O,EAAA5G,EAAA8H,cAAA8N,EAAA,GAA+ChS,KAAA,aAC/C,YACA8N,GACA,IAAAA,EAAApO,QAAAsD,EAAA5G,EAAA8H,cAAA8M,EAAA,EAAAiB,QAAA,KACAjP,EAAA5G,EAAA8H,cAAA,UACAb,KAAAG,MAAA0O,aACA,aACApE,GACAA,EAAApO,OAAA,GAAAsD,EAAA5G,EAAA8H,cAAA8M,EAAA,EAAAiB,QAAA,KACAjP,EAAA5G,EAAA8H,cAAA,UACAb,KAAAG,MAAA0O,aACA,YACAlP,EAAA5G,EAAA8H,cAAA+M,EAAA,EAAAkB,YAAA,wBACAnP,EAAA5G,EAAA8H,cAAA+M,EAAA,EAAAmB,KAAA,KAAAtE,EAAA3O,IAAA,CAAA5D,EAAA8K,IAAArD,EAAA5G,EAAA8H,cAAA+M,EAAA,EAAApE,MAA6HpR,IAAA4K,EAAAgM,SAAAhP,KAAA+M,aAAAkC,WAAA/W,GAA4DA,EAAA0B,SACzL+F,EAAA5G,EAAA8H,cAAA,KAA0CqO,KAAA,IAAAX,QAAAvO,KAAA8L,cAAwC,wBAGlFtB,EAAA2E,cAA+BC,kBAAAC,EAAA,GC1N/B,MAAAC,EAAA,OACAC,GACA1G,QACAC,iBAAA,QACAC,kBAAA,EACAC,WAAA,WAEAE,UACA7O,QAAA,KAEA8Q,UACAzR,MAAA,SAGA8V,IACK5V,MAAA,UAAAH,MAAA,YACAG,MAAA,UAAAH,MAAA,YACAG,MAAA,SAAAH,MAAA,WA4NL,MAAAgW,EAAA3V,OAAAuN,EAAA,EAAAvN,CAAA,CAAAyL,EAAApF,KACA,MAAAuP,EAAA5V,OAAAqP,EAAA,EAAArP,CAAAqG,EAAAwP,SAAAC,QACA1E,GACArC,OAAA/O,OAAAC,UAAgCwV,EAAA1G,OAAA6G,EAAA7G,QAChCK,SAAAwG,EAAAxG,UAAAqG,EAAArG,SACAiC,SAAAuE,EAAAvE,UAAAoE,EAAApE,UAEA7D,EAAAxN,OAAAqP,EAAA,EAAArP,CAAAoR,GAGA,OACA3S,OAHAgP,EAAA,EAAAC,aAAAjC,EAAA,OAAA+B,GAIAG,kBAHAF,EAAA,EAAAG,wBAAAnC,EAAA,OAAA+B,GAIAA,cACA4D,WAGA2E,GACAjI,YAAAL,EAAA,EAAAK,aAEAkI,EAAA,EAAAhW,OAAAgO,EAAA,EAAAhO,EAAA,CAAAA,OAAAiO,EAAA,EAAAjO,CAAA2V,EAAAI,EAAA/V,eA9OA6F,EAAA5G,EAAA6G,UACAC,YAAAkQ,EAAAC,GACAlQ,MAAAiQ,EAAAC,GACAhQ,KAAAwI,mBAAA,CAAAC,IACA,MAAAwH,QAAmBA,GAAUjQ,KAAAG,MAG7ByI,GACAM,UACArJ,CAJA4I,EAAApI,cACA5G,OAGA,KAEA0R,UAA2BzR,MAAA,SAE3BuW,EAAAC,QAAAlQ,KAAAmQ,iBAAAvH,MAEA5I,KAAAoQ,aAAA,MACA,MAAAlF,MAAmBA,EAAAyE,WAAA/H,cAAAqI,UAAA3I,eAAqDtH,KAAAG,MACxEwP,EAAAC,OAOAhI,EAAA0H,EAAAhI,GANA2I,EAAAC,QAAAlQ,KAAAmQ,kBACAjH,SAAAgC,EAAAhC,SACAiC,UAA+BzR,MAAA,aAO/BsG,KAAAqQ,gBAAA,CAAAC,IACA,MAAAnR,EAAmBA,GAAIa,KAAAG,MACvB,kBAAAmQ,IAGA3W,GAAA,UACAwM,MAAAhH,EAAA,sCACAuO,YAAAvO,EAAA,2CACA+N,WAAA,SAIA,YAAAoD,IAGA3W,GAAA,UACAwM,MAAAhH,EAAA,sCACAuO,YAAAvO,EAAA,2CACA+N,WAAA,SAIA,WAAAoD,IAGA3W,GAAA,SACAwM,MAAAhH,EAAA,qCACAuO,YAAAvO,EAAA,0CACA+N,WAAA,cAMAlN,KAAAuQ,aAAA,CAAAD,IACA,MAAAnR,EAAmBA,GAAIa,KAAAG,MACvB,kBAAAmQ,IAGA3W,GAAA,gBACAqR,WAAA,EACA7E,MAAAhH,EAAA,6BAGAxF,GAAA,QACAqR,WAAA,EACA7E,MAAAhH,EAAA,6BAIA,YAAAmR,IAGA3W,GAAA,UACAqR,WAAA,EACA7E,MAAAhH,EAAA,6BAGAxF,GAAA,QACAqR,WAAA,EACA7E,MAAAhH,EAAA,6BAIA,WAAAmR,IAGA3W,GAAA,SACAqR,WAAA,EACA7E,MAAAhH,EAAA,6BAGAxF,GAAA,QACAqR,WAAA,EACA7E,MAAAhH,EAAA,kCAMAa,KAAAmM,cAAAnM,KAAAmM,cAAAqE,KAAAxQ,MACAA,KAAA+L,gBAAA/L,KAAA+L,gBAAAyE,KAAAxQ,MACAA,KAAAoN,cAAApN,KAAAoN,cAAAoD,KAAAxQ,MAEAH,oBACAG,KAAAoQ,eACApQ,KAAA2F,aAEA9F,mBAAAmI,GACA,MAAA2H,SAAeA,EAAApX,SAAA+O,eAAgCtH,KAAAG,MAC/C6H,EAAAV,iBAAA/O,GAAAoX,EAAAC,QACA5P,KAAAoQ,eAGAvQ,iBAAAqL,GACA,eAAwBpR,OAAAqP,EAAA,EAAArP,CAAAoR,KAExBrL,cAAAqN,EAAAjB,GACA,MAAAgE,QAAeA,EAAA/E,SAAiBlL,KAAAG,MAChC+K,EAAAhC,SAAAgE,GACA,MAAAhC,EAAAhC,SAAAgE,GACAhC,EAAAhC,SAAAgE,GAAAjB,EAEAf,EAAAhC,SAAAgE,GAAAuD,SAAAxE,KACAf,EAAAhC,SAAAgE,IAAAhC,EAAAhC,SAAAgE,GAAAjB,IAIAf,EAAAhC,SAAAgE,IAAAjB,GAEA,MAAAyE,EAAA1Q,KAAAmQ,iBAAAjF,GACA+E,EAAAC,QAAAQ,GAEA7Q,gBAAAqN,EAAAjB,GACA,MAAAgE,QAAeA,EAAA/E,SAAiBlL,KAAAG,MAChC,QAAA8L,GAAAR,MAAAC,QAAAR,EAAAhC,SAAAgE,IAGA,CACA,MAAAlK,EAAAkI,EAAAhC,SAAAgE,GAAA1N,QAAAyM,GACA,GAAAjJ,GAAA,GACA,MAAAgK,MACA9B,EAAAhC,SAAAgE,GAAAN,MAAA,EAAA5J,MACAkI,EAAAhC,SAAAgE,GAAAN,MAAA5J,EAAA,IAEAkI,EAAAhC,SAAAgE,GAAAF,QATA9B,EAAAhC,SAAAgE,GAAA,IAYA,MAAAwD,EAAA1Q,KAAAmQ,iBAAAjF,GACA+E,EAAAC,QAAAQ,GAEA7Q,cAAAyN,EAAArC,GACA,MAAAgF,QAAeA,EAAA/E,SAAiBlL,KAAAG,MAChC+K,EAAAC,YACAD,EAAAC,SAAAmC,GAAArC,EAAA,aACA,MAAAyF,EAAA1Q,KAAAmQ,iBAAAjF,GACA+E,EAAAC,QAAAQ,GAEA7Q,SACA,MAAAtH,OAAeA,EAAA2S,QAAA/L,KAAmBa,KAAAG,MAClCmQ,EAAAxW,OAAAxB,EAAA,EAAAwB,CAAAoR,EAAAhC,UACAyB,EAAA3K,KAAAqQ,gBAAAC,GACAnC,EAAAnO,KAAAuQ,aAAAD,GACAtT,EAAA,IAAAC,KACArB,EAAA9B,OAAAxB,EAAA,EAAAwB,EACAvB,SACAC,MAAA8X,IAEA,IAAAxF,EAAAqD,EAAA,GACA,UAAAxC,KAAAwC,EACA,GAAAjD,EAAAC,UAAAD,EAAAC,SAAAQ,EAAAhS,IAAA,CACAmR,EAAAa,EACA,MAGA,MAAAgF,EAAAxR,EAAA,4BACA,OAAAQ,EAAA5G,EAAA8H,cAAA,OAA4CH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAA2F,kBAC5C5D,EAAA5G,EAAA8H,cAAA,UAA2CH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAA6F,SAC3C9D,EAAA5G,EAAA8H,cAAA,WACAlB,EAAA5G,EAAA8H,cAAA+P,EAAA,GAAgDC,KAAA,OAAc1R,EAAA,uBAC9DQ,EAAA5G,EAAA8H,cAAA,OAAgDH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAAuG,kBAChDxE,EAAA5G,EAAA8H,cAAA,SAAsDH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAAwG,uBACtDjF,EAAA,kBACA,KACAQ,EAAA5G,EAAA8H,cAAA,UAAuDpH,MAAA6W,EAAAlQ,SAAAJ,KAAAwI,oBAAsDgH,EAAA1T,IAAAoO,GAAAvK,EAAA5G,EAAA8H,cAAA,UAA+DzI,IAAA8R,EAAAzQ,YAAAyQ,EAAAzQ,OAAyC0F,qBAAuB+K,EAAAtQ,cAC5OwH,QAAA7I,IAAAoH,EAAA5G,EAAA8H,cAAA,OAAgEH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAAlE,QAChEiG,EAAA5G,EAAA8H,cAAA+P,EAAA,GAAgDlQ,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAAmG,YAAA8M,KAAA,OAAiD/W,OAAAW,EAAA,EAAAX,CAAAvB,EAAAmB,MAAAD,QACjGkG,EAAA5G,EAAA8H,cAAA,OAAgDH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAAkG,aAChDnE,EAAA5G,EAAA8H,cAAA,OAAoDH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAAqG,iBAAwC9E,EAAA,eAC5FQ,EAAA5G,EAAA8H,cAAA,OAAoDH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAAsG,iBAAwC/E,EAAA,cAAmB2R,MAAA9T,EAAA+T,WAAAC,KAAA,QAC/GrR,EAAA5G,EAAA8H,cAAA,OAAwCH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAA0F,UACxC3D,EAAA5G,EAAA8H,cAAA,OAA4CH,UAAA5G,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAA2G,mBAC5C5E,EAAA5G,EAAA8H,cAAA,OAAgDH,UAAAgE,GAChD/E,EAAA5G,EAAA8H,cAAA2J,GAA6DmG,aAAAhG,eAAAwB,cAAAnM,KAAAmM,cAAAJ,gBAAA/L,KAAA+L,gBAAAqB,cAAApN,KAAAoN,cAAAtC,YAAAqD,aAAA5V,SAAAsW,aAAAjT,EAAAS,OAAA6O,YAC7DvL,EAAA5G,EAAA8H,cAAA,OAA4CH,UAAA8D,GAC5C7E,EAAA5G,EAAA8H,cAAA0I,EAAA,OACA5J,EAAA5G,EAAA8H,cAAA0I,EAAA,EAAAC,MAA4DpR,IAAA,cAAAqR,QAAAtK,EAAA,kCAC5D/E,QAAAkW,IAC6B5G,cAAA/J,EAAA5G,EAAA8H,cAAA,SAAgDlF,KAAA,aAAmBgO,SAChGhK,EAAA5G,EAAA8H,cAAA0I,EAAA,EAAAK,UAAwExR,IAAA,KACxEuH,EAAA5G,EAAA8H,cAAA,cACA1B,EAAA,kCACAiC,QAAA7I,IAAAoH,EAAA5G,EAAA8H,cAAAlB,EAAA5G,EAAAkY,SAAA,KAAA9R,EAAA,qCACAzF,MAAAI,OAAAW,EAAA,EAAAX,CAAAvB,EAAAmB,MAAAD,eAGAmC,EAAAE,IAAA,CAAAoV,EAAAlO,IACArD,EAAA5G,EAAA8H,cAAAsH,GAAsE/P,IAAA4K,EAAA2F,YAAAuC,EAAA9B,cAAAkH,EAAApY,KAAAgZ,EAAAxX,MAAAnB,EAAAmB,MAAAD,2FCrPtEqW,EAAA,QAAAhW,OAAAqX,EAAA,IAAArX,CAAAsX,EAAA,CAAAC,EAAA","file":"3285d0f0495ee54d0fa9.bundle.js","sourcesContent":["function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","import { sort } from './sort';\nconst groups = ['services', 'accounts', 'instance_types', 'regions'];\nexport function getComputedReportItems({ report, idKey, labelKey = idKey, sortKey = 'total', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const total = value.total;\n                const id = value[idKey];\n                let label = value[labelKey];\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        id,\n                        total,\n                        label,\n                        units: value.units,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { total: itemMap[id].total + total });\n            });\n        }\n        groups.forEach(group => {\n            if (dataPoint[group]) {\n                return dataPoint[group].forEach(visitDataPoint);\n            }\n        });\n    };\n    report.data.forEach(visitDataPoint);\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","export const formatValue = (value, unit, options = {}) => {\n    const lookup = unit && unit.split('-')[0].toLowerCase();\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n            return formatStorage(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, _unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatStorage = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","import format from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport startOfMonth from 'date-fns/start_of_month';\nimport { getComputedReportItems, } from 'utils/getComputedReportItems';\nexport function transformReport(report, type = 1 /* daily */, key = 'date') {\n    if (!report) {\n        return [];\n    }\n    const computedItems = getComputedReportItems({\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    });\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d.total, d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    return {\n        x: xVal,\n        y: parseFloat(value.toFixed(2)),\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums) {\n    if (!datums.length) {\n        const today = new Date();\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRangeString(datums) {\n    const [start, end] = getDatumDateRange(datums);\n    const monthName = format(start, 'MMM');\n    const startDate = getDate(start);\n    const endDate = getDate(end);\n    return `${monthName} ${getDate(start)}${startDate !== endDate ? ` - ${endDate}` : ''}`;\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'MMM D YYYY');\n        return `${date}: ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BorderColor, global_BorderColor_dark, global_BorderWidth_md, global_BorderWidth_sm, global_danger_color_100, global_danger_color_200, global_FontSize_md, global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    textInput: {\n        width: '100%',\n        fontSize: global_FontSize_md.value,\n        paddingTop: global_spacer_xs.value,\n        paddingRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xs.value,\n        paddingLeft: global_spacer_sm.value,\n        lineHeight: '24px',\n        outline: 0,\n        border: `${global_BorderWidth_sm.value} solid ${global_BorderColor.value}`,\n        ':focus': {\n            borderColor: global_BorderColor_dark.value,\n        },\n    },\n    flat: {\n        border: 'none',\n        borderBottom: [\n            global_BorderWidth_sm.value,\n            'solid',\n            global_BorderColor.value,\n        ].join(' '),\n        ':focus': {\n            borderBottom: [\n                global_BorderWidth_md.value,\n                'solid',\n                global_BorderColor_dark.value,\n            ].join(' '),\n        },\n    },\n    error: {\n        borderColor: global_danger_color_100.value,\n        ':focus': {\n            borderColor: global_danger_color_200.value,\n        },\n    },\n});\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './textInput.styles';\nexport class TextInput extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleChange = (evt) => {\n            this.props.onChange(evt.currentTarget.value, evt);\n        };\n        this.handleKeyPressed = (evt) => {\n            if (this.props.onKeyPress && evt.key === 'Enter') {\n                evt.preventDefault();\n                this.props.onKeyPress(evt);\n            }\n        };\n    }\n    render() {\n        const _a = this.props, { className, isFlat, isError } = _a, props = __rest(_a, [\"className\", \"isFlat\", \"isError\"]);\n        return (React.createElement(\"input\", Object.assign({}, props, { className: css(className, styles.textInput, isFlat && styles.flat, isError && styles.error), onChange: this.handleChange, onKeyPress: this.handleKeyPressed })));\n    }\n}\n","import { css } from '@patternfly/react-styles';\nimport { StyleSheet } from '@patternfly/react-styles';\nimport React from 'react';\nconst styles = StyleSheet.create({\n    legend: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n});\nconst ChartLegend = ({ children, style }) => {\n    const styling = Boolean(style) && Boolean(style.legend) ? style.legend : styles.legend;\n    return React.createElement(\"div\", { className: css(styling) }, children);\n};\nexport { ChartLegend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_dark_100, global_Color_light_100, global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    padding: 8,\n    group: {\n        data: { strokeWidth: 2, fillOpacity: 0.4 },\n    },\n    tooltipText: {\n        fontSize: '14px',\n        fill: global_Color_light_100.value,\n    },\n    tooltipFlyout: { fill: global_Color_dark_100.value },\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    reportSummaryTrend: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        ':not(foo) text': {\n            fontSize: '12px',\n            length: '12px',\n        },\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BorderWidth_sm, global_Color_200, global_FontSize_xs, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { chartStyles } from './chart.styles';\nexport const styles = StyleSheet.create({\n    legendItem: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginRight: global_spacer_md.value,\n    },\n    color: {\n        height: 10,\n        width: 10,\n        marginRight: global_spacer_sm.value,\n        borderWidth: global_BorderWidth_sm.value,\n        borderStyle: 'solid',\n    },\n    currentColor: {\n        backgroundColor: chartStyles.currentMonth.data.fill,\n        borderColor: chartStyles.currentMonth.data.stroke,\n    },\n    previousColor: {\n        backgroundColor: chartStyles.previousMonth.data.fill,\n        borderColor: chartStyles.previousMonth.data.stroke,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './chartLegendItem.styles';\nimport { getDateRangeString } from './chartUtils';\nconst ChartLegendItem = ({ data, isCurrent, idKey = 'date', index, style, }) => {\n    if (!data || data.length === 0) {\n        return React.createElement(\"div\", null);\n    }\n    const styling = Boolean(style) && Boolean(style.legendItem)\n        ? style.legendItem\n        : styles.legendItem;\n    if (idKey === 'date') {\n        const label = getDateRangeString(data);\n        return (React.createElement(\"div\", { className: css(styling) },\n            React.createElement(\"div\", { className: css(styles.color, isCurrent ? styles.currentColor : styles.previousColor) }),\n            label));\n    }\n    else {\n        return (React.createElement(\"div\", { key: data[index].key, className: css(styling) },\n            React.createElement(\"div\", { className: css(styles.color, isCurrent ? styles.currentColor : styles.previousColor) }),\n            data[index].key));\n    }\n};\nexport { ChartLegendItem };\n","import { css } from '@patternfly/react-styles';\nimport { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_xs, global_spacer_sm } from '@patternfly/react-tokens';\nimport React from 'react';\nconst styles = StyleSheet.create({\n    chartTitle: {\n        fontSize: global_FontSize_xs.value,\n        marginBottom: global_spacer_sm.value,\n    },\n});\nconst ChartTitle = ({ children }) => (React.createElement(\"div\", { className: css(styles.chartTitle) }, children));\nexport { ChartTitle };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_BackgroundColor_300, global_BorderRadius_sm, global_BoxShadow_sm, global_Color_100, global_Color_200, global_Color_light_100, global_Color_light_200, global_disabled_color_100, global_FontSize_lg, global_FontSize_md, global_FontSize_sm, global_FontSize_xs, global_FontWeight_bold, global_FontWeight_normal, global_LineHeight_md, global_primary_color_100, global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.var,\n        paddingTop: global_spacer_xl.value,\n        height: '100%',\n    },\n    costDetailsPage: {\n        backgroundColor: global_BackgroundColor_300.var,\n        minHeight: '100%',\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    headerLeft: {\n        flex: 1,\n    },\n    headerRight: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    total: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    totalLabel: {},\n    totalValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    totalLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    totalLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    innerGroupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: global_FontSize_sm.value,\n    },\n    innerGroupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_300.value,\n    },\n});\nexport const listViewOverride = css `\n  min-height: 100%;\n  padding: 0 ${global_spacer_xl.value};\n  background-color: ${global_Color_light_200.value};\n  ${global_Color_100.name}: ${global_Color_light_100.value};\n  ${global_Color_200.name}: ${global_Color_light_200.value};\n\n  .list-view-pf {\n    margin-top: 0;\n  }\n  .list-group-item:hover {\n    background-color: #fff;\n    box-shadow: ${global_BoxShadow_sm.value};\n    z-index: 1;\n  }\n\n  & * {\n    // outline: 1px solid blue;\n  }\n\n  .list-group-item-heading,\n  strong {\n    font-weight: ${global_FontWeight_normal.value};\n    word-break: break-word;\n  }\n\n  .list-group-item-heading {\n    font-size: ${global_FontSize_md.value};\n  }\n\n  .list-view-pf-main-info {\n    padding: 0;\n  }\n\n  .list-view-pf-actions,\n  .fa-angle-right {\n    margin: 0;\n  }\n\n  input[type='checkbox'] {\n    margin: 0;\n  }\n\n  .list-view-pf-description {\n    display: inline-flex;\n    margin-left: 0;\n    float: none;\n  }\n\n  .list-view-pf-additional-info {\n    flex: 0 0 40%;\n    float: none;\n    width: auto;\n  }\n\n  .list-view-pf-actions {\n    flex: 0 0 25%;\n  }\n\n  .list-group-item-header {\n    display: flex;\n    align-items: center;\n  }\n\n  & .list-view-pf-main-info {\n    flex: 1;\n  }\n\n  .list-view-pf-checkbox {\n    border: none;\n    margin-top: 0;\n    margin-bottom: 0;\n    display: inline-flex;\n    align-items: center;\n  }\n\n  .list-view-pf-expand {\n    min-width: 1.5rem;\n    margin-top: 0;\n    margin-bottom: 0;\n    display: inline-flex;\n    align-items: center;\n  }\n\n  .list-view-pf-additional-info-item {\n    align-items: flex-start;\n    text-align: left;\n    word-break: break-word;\n  }\n\n  .list-view-pf-actions .list-view-pf-additional-info-item {\n    align-items: flex-end;\n  }\n\n  .list-view-pf-additional-info-item strong {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    font-size: ${global_FontSize_md.value};\n  }\n\n  .list-view-pf-additional-info-item span {\n    font-size: ${global_FontSize_xs.value};\n    color: ${global_disabled_color_100.value};\n  }\n\n  .list-group-item {\n    padding: ${global_spacer_lg.value} ${global_spacer_xl.value};\n    border-bottom: 2px solid #f2f2f2;\n  }\n\n  .list-group-item:first-child {\n    border-top: 0;\n    padding: 0.55rem ${global_spacer_lg.value} ${global_spacer_xs.value} 3.5rem;\n\n    &,\n    .list-group-item-heading,\n    .list-view-pf-additional-info-item strong {\n      font-size: ${global_FontSize_sm.value};\n      font-weight: ${global_FontWeight_bold.value};\n    }\n\n    .list-view-pf-additional-info {\n      transform: translateX(-0.55rem);\n    }\n\n    .list-view-pf-actions .list-view-pf-additional-info-item {\n      float: right;\n    }\n  }\n\n  .list-group-item-container {\n    padding: ${global_spacer_lg.value} ${global_spacer_3xl.value}\n      ${global_spacer_lg.value} ${global_spacer_3xl.value};\n    margin: ${global_spacer_lg.value} -${global_spacer_xl.value} -${global_spacer_lg.value} -${global_spacer_xl.value};\n    background-image: linear-gradient(\n      to right,\n      ${global_primary_color_100.value},\n      ${global_primary_color_100.value} 3px,\n      transparent 3px\n    );\n  }\n\n  .list-group-item.list-view-pf-expand-active {\n    background-color: #fff;\n  }\n\n  .list-view-pf-expand-active {\n    box-shadow: ${global_BoxShadow_sm.value};\n    z-index: 1;\n    background-image: linear-gradient(\n      to right,\n      ${global_primary_color_100.value},\n      ${global_primary_color_100.value} 3px,\n      transparent 3px\n    );\n  }\n`;\nexport const toolbarOverride = css `\n  margin-left: ${global_spacer_xl.value};\n  margin-right: ${global_spacer_xl.value};\n  background-color: ${global_Color_light_100.value};\n  font-size: ${global_FontSize_xs.value};\n\n  .pf-c-button {\n    border-radius: 0;\n    padding-left: 0;\n    padding-right: 0;\n    display: inline-flex;\n    align-items: center;\n  }\n\n  .fa-download {\n    color: ${global_Color_100.value};\n    margin-right: ${global_spacer_sm.value};\n    font-size: 1.125rem;\n  }\n\n  .toolbar-pf-actions {\n    display: flex;\n    padding-top: ${global_spacer_sm.value};\n    padding-bottom: ${global_spacer_sm.value};\n  }\n\n  .form-group {\n    border: none;\n  }\n\n  .btn {\n    line-height: 28px;\n  }\n\n  .btn-link {\n    color: ${global_Color_200.value};\n    margin-left: ${global_spacer_sm.value};\n  }\n\n  .btn-link .fa {\n    font-size: ${global_FontSize_lg.value};\n    color: ${global_Color_100.value};\n  }\n\n  .pf-m-plain {\n    padding: 0;\n    display: flex;\n    align-items: center;\n  }\n\n  .dropdown .btn {\n    border-radius: ${global_BorderRadius_sm.value};\n    background: transparent;\n    box-shadow: none;\n    border-color: #c7c7c7;\n    font-size: ${global_FontSize_md.value};\n    font-weight: 500;\n    padding-left: ${global_spacer_sm.value};\n    padding-right: ${global_spacer_sm.value};\n  }\n\n  input[type='text'] {\n    border-color: #c7c7c7;\n    border-left: none;\n    border-radius: 0 ${global_BorderRadius_sm.value}\n      ${global_BorderRadius_sm.value} 0;\n  }\n\n  /* filter results */\n\n  .toolbar-pf-results {\n    font-size: ${global_FontSize_sm.value};\n    padding: ${global_spacer_sm.value} 0;\n    line-heght: ${global_LineHeight_md.value};\n    font-weight: ${global_FontWeight_normal.value};\n\n    .col-sm-12 {\n      display: flex;\n      align-items: center;\n    }\n\n    h5 {\n      font-size: ${global_FontSize_sm.value};\n      font-weight: ${global_FontWeight_normal.value};\n      line-height: ${global_LineHeight_md.value};\n    }\n\n    .filter-pf-active-label {\n      line-height: ${global_LineHeight_md.value};\n    }\n\n    .list-inline {\n      line-height: ${global_LineHeight_md.value};\n    }\n\n    .label {\n      font-size: ${global_FontSize_xs.value};\n      border-radius: ${global_BorderRadius_sm.value};\n      display: inline-flex;\n      align-items: center;\n    }\n\n    .pf-remove-button {\n      display: inline-flex;\n      font-weight: ${global_FontWeight_normal.value};\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_dark_100, global_Color_light_100, global_FontSize_xs, global_primary_color_200, global_spacer_md, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    padding: { top: 8, bottom: 8 },\n    pie: {\n        data: {\n            strokeWidth: 0,\n            fillOpacity: 0.7,\n            stroke: global_primary_color_200.value,\n        },\n    },\n    tooltipText: {\n        fontSize: global_FontSize_xs.value,\n        fill: global_Color_light_100.value,\n    },\n    tooltipFlyout: { stroke: global_Color_dark_100.value },\n};\nexport const styles = StyleSheet.create({\n    pieGroup: {\n        display: 'flex',\n        float: 'left',\n        position: 'relative',\n        paddingTop: '2rem',\n        marginLeft: '2rem',\n        left: '-40px',\n    },\n});\nexport const legendStyles = StyleSheet.create({\n    legend: {\n        display: 'block',\n        alignItems: 'center',\n    },\n    legendItem: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_dark_100.var,\n        marginRight: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { ChartTitle } from 'components/commonChart';\nimport { getTooltipLabel, transformReport, } from 'components/commonChart/chartUtils';\nimport React from 'react';\nimport { formatCurrency } from 'utils/formatValue';\nimport { VictoryLegend, VictoryPie, VictoryTooltip } from 'victory';\nimport { chartStyles, styles } from './pieChart.styles';\nclass PieChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions, groupBy } = this.props;\n            const label = getTooltipLabel(datum, formatDatumValue, formatDatumOptions, groupBy);\n            return label;\n        };\n        this.handleResize = () => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n        };\n    }\n    shouldComponentUpdate(nextProps) {\n        if (!nextProps.data) {\n            return false;\n        }\n        return true;\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n            window.addEventListener('resize', this.handleResize);\n        });\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    render() {\n        const { title, height, width, data, groupBy } = this.props;\n        const currentData = transformReport(data, 2 /* monthly */, groupBy);\n        const legendData = currentData.map(item => ({\n            name: item.name.toString() + ' (' + formatCurrency(item.y) + ')',\n            symbol: { type: 'square' },\n        }));\n        const colors = 'cool';\n        return (React.createElement(\"div\", { className: css(styles.pieGroup), ref: this.containerRef },\n            Boolean(currentData.length) && (React.createElement(VictoryPie, { padding: chartStyles.padding, height: height, width: width, colorScale: colors, style: chartStyles.pie, data: currentData, labels: this.getTooltipLabel, labelComponent: React.createElement(VictoryTooltip, { cornerRadius: 0, flyoutStyle: chartStyles.tooltipFlyout }) })),\n            React.createElement(\"svg\", { width: 300, height: 250 }, Boolean(currentData.length) && (React.createElement(VictoryLegend, { key: title, standalone: false, colorScale: colors, x: 0, y: 0, gutter: 20, data: legendData }))),\n            React.createElement(ChartTitle, null, title)));\n    }\n}\nexport { PieChart };\n","import { PieChart } from 'components/pieChart/pieChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportsActions, reportsSelectors } from 'store/reports';\nimport { formatValue } from 'utils/formatValue';\nconst reportType = \"cost\" /* cost */;\nclass DetailsChartBase extends React.Component {\n    componentDidMount() {\n        const { report, queryString } = this.props;\n        if (!report) {\n            this.props.fetchReport(reportType, queryString);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.queryString !== this.props.queryString) {\n            this.props.fetchReport(reportType, this.props.queryString);\n        }\n    }\n    render() {\n        const { currentGroupBy, report } = this.props;\n        return (React.createElement(PieChart, { height: 150, width: 400, data: report, formatDatumValue: formatValue, groupBy: currentGroupBy }));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { queryString }) => {\n    const report = reportsSelectors.selectReport(state, \"cost\" /* cost */, queryString);\n    const reportFetchStatus = reportsSelectors.selectReportFetchStatus(state, \"cost\" /* cost */, queryString);\n    return { report, reportFetchStatus };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart, DetailsChartBase };\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/query';\nimport { Col, ListView, Row } from 'patternfly-react';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, } from 'utils/getComputedReportItems';\nimport { styles } from './costDetails.styles';\nimport { DetailsChart } from './detailChart';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nclass DetailsItemBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            expanded: false,\n        };\n        this.handleExpand = () => {\n            const { currentGroupBy } = this.state;\n            const queryString = this.getQueryString(currentGroupBy);\n            this.setState({ expanded: true, queryString });\n        };\n        this.handleExpandClose = () => {\n            this.setState({ expanded: false });\n        };\n        this.handleSelectChange = (event) => {\n            const groupByKey = event.currentTarget\n                .value;\n            const queryString = this.getQueryString(groupByKey);\n            this.setState({ currentGroupBy: groupByKey, queryString });\n        };\n    }\n    getQueryString(groupBy) {\n        const { parentQuery, item } = this.props;\n        const groupById = getIdKeyForGroupBy(parentQuery.group_by);\n        const newQuery = {\n            filter: {\n                time_scope_units: 'month',\n                time_scope_value: -1,\n                resolution: 'monthly',\n                limit: 5,\n            },\n            group_by: { [groupById]: item.id, [groupBy]: '*' },\n        };\n        return getQuery(newQuery);\n    }\n    getDefaultGroupBy() {\n        const { parentGroupBy } = this.props;\n        let groupBy = '';\n        switch (parentGroupBy) {\n            case 'account':\n                groupBy = 'service';\n                break;\n            case 'service':\n                groupBy = 'account';\n                break;\n            case 'region':\n                groupBy = 'account';\n                break;\n        }\n        return groupBy;\n    }\n    componentDidMount() {\n        const defaultGroupBy = this.getDefaultGroupBy();\n        const queryString = this.getQueryString(defaultGroupBy);\n        this.setState({ currentGroupBy: defaultGroupBy, queryString });\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.parentGroupBy !== prevProps.parentGroupBy) {\n            const defaultGroupBy = this.getDefaultGroupBy();\n            this.setState({ currentGroupBy: defaultGroupBy });\n        }\n    }\n    render() {\n        const { t, item, parentGroupBy, total } = this.props;\n        const { currentGroupBy, queryString } = this.state;\n        return (React.createElement(ListView.Item, { key: item.label, heading: item.label, checkboxInput: React.createElement(\"input\", { type: \"checkbox\" }), actions: [\n                React.createElement(ListView.InfoItem, { key: \"1\", stacked: true },\n                    React.createElement(\"strong\", null, formatCurrency(item.total)),\n                    React.createElement(\"span\", null,\n                        ((item.total / total) * 100).toFixed(2),\n                        t('percent_of_cost'))),\n            ], onExpand: this.handleExpand, onExpandClose: this.handleExpandClose },\n            React.createElement(Row, null,\n                React.createElement(Col, null,\n                    React.createElement(\"div\", null,\n                        React.createElement(\"div\", { className: css(styles.innerGroupBySelector) },\n                            React.createElement(\"label\", { className: css(styles.innerGroupBySelectorLabel) },\n                                t('group_by.label'),\n                                \":\"),\n                            React.createElement(\"select\", { id: item.label ? item.label.toString() : '', onChange: this.handleSelectChange }, groupByOptions.map(option => {\n                                if (option.value !== parentGroupBy) {\n                                    return (React.createElement(\"option\", { key: option.value, value: option.value }, t(`group_by.values.${option.label}`)));\n                                }\n                            }))),\n                        Boolean(currentGroupBy) &&\n                            Boolean(queryString) && (React.createElement(DetailsChart, { queryString: queryString, currentGroupBy: currentGroupBy })))))));\n    }\n}\nconst DetailsItem = translate()(connect()(DetailsItemBase));\nexport { DetailsItem, DetailsItemBase };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import React from 'react';\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport { TextInput } from 'components/textInput';\nimport { Filter, Icon, noop, Sort, Toolbar } from 'patternfly-react';\nimport { isEqual } from 'utils/equal';\nexport class DetailsToolbar extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentSortType: this.props.sortField,\n            isSortNumeric: this.props.sortField.isNumeric,\n            isSortAscending: !(this.props.query &&\n                this.props.query.order_by[this.props.sortField.id] === 'desc'),\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterValue = this.getAccountId(field.id, value);\n            this.props.onFilterAdded(currentFilterType.id, filterValue);\n        };\n        // Temporary workaround until API supports filtering on account aliases\n        this.getAccountAlias = (field, value) => {\n            const { report } = this.state;\n            let filterValue = value;\n            if (report && report.data && field === 'account') {\n                report.data.forEach(data => {\n                    data.accounts.forEach(accounts => {\n                        accounts.values.forEach(values => {\n                            if (values.account === value && values.account_alias) {\n                                filterValue = values.account_alias;\n                                return false;\n                            }\n                        });\n                    });\n                });\n            }\n            return filterValue;\n        };\n        // Temporary workaround until API supports filtering on account aliases\n        this.getAccountId = (field, value) => {\n            const { report } = this.state;\n            let filterValue = value;\n            if (report && report.data && field === 'account') {\n                report.data.forEach(data => {\n                    data.accounts.forEach(accounts => {\n                        accounts.values.forEach(values => {\n                            if (values.account_alias === value && values.account) {\n                                filterValue = values.account;\n                                return false;\n                            }\n                        });\n                    });\n                });\n            }\n            return filterValue;\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const alias = this.getAccountAlias(field, value);\n            const filterLabel = this.getFilterLabel(field, alias);\n            return {\n                field: currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            filterText =\n                filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.toggleCurrentSortDirection = () => {\n            const { currentSortType, isSortAscending } = this.state;\n            this.setState({ isSortAscending: !isSortAscending });\n            this.props.onSortChanged(currentSortType.id, !isSortAscending);\n        };\n        this.updateCurrentSortType = sortType => {\n            const isSortAscending = true;\n            this.setState({\n                currentSortType: sortType,\n                isSortNumeric: sortType.isNumeric,\n                isSortAscending,\n            });\n            this.props.onSortChanged(sortType.id, isSortAscending);\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report, sortField } = this.props;\n        const cacheReport = this.state.report === null && query.group_by.account;\n        if (report && (!isEqual(report, prevProps.report) || cacheReport)) {\n            // Cache inital report containing so we can find account aliases after multiple filters\n            // are applied -- a filtered report won't contain all accounts.\n            if (cacheReport) {\n                this.setState({\n                    report,\n                }, () => {\n                    this.addQuery(query);\n                });\n            }\n            else {\n                this.addQuery(query);\n            }\n            if (!isEqual(filterFields, prevProps.filterFields)) {\n                this.setState({\n                    currentFilterType: this.props.filterFields[0],\n                });\n            }\n            if (!isEqual(sortField, prevProps.sortField)) {\n                this.setState({\n                    currentSortType: sortField,\n                    isSortAscending: !(query && query.order_by[sortField.id] === 'desc'),\n                });\n            }\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, type: \"text\", value: currentValue }));\n    }\n    render() {\n        const { activeFilters, currentFilterType, currentSortType, isSortNumeric, isSortAscending, } = this.state;\n        return (React.createElement(Toolbar, null,\n            React.createElement(Filter, null,\n                React.createElement(Filter.TypeSelector, { filterTypes: this.props.filterFields, currentFilterType: currentFilterType, onFilterTypeSelected: this.selectFilterType }),\n                this.renderInput()),\n            React.createElement(Sort, null,\n                React.createElement(Sort.TypeSelector, { sortTypes: this.props.sortFields, currentSortType: currentSortType, onSortTypeSelected: this.updateCurrentSortType }),\n                React.createElement(Sort.DirectionSelector, { isNumeric: isSortNumeric, isAscending: isSortAscending, onClick: this.toggleCurrentSortDirection })),\n            React.createElement(\"div\", { className: \"form-group\" },\n                React.createElement(Button, { variant: ButtonVariant.link },\n                    React.createElement(Icon, { name: \"download\" }),\n                    \"Export\")),\n            !activeFilters ||\n                (activeFilters.length === 0 && (React.createElement(Toolbar.Results, null,\n                    React.createElement(\"h5\", null,\n                        this.props.resultsTotal,\n                        \" Results\")))),\n            activeFilters &&\n                activeFilters.length > 0 && (React.createElement(Toolbar.Results, null,\n                React.createElement(\"h5\", null,\n                    this.props.resultsTotal,\n                    \" Results\"),\n                React.createElement(Filter.ActiveLabel, null, \"Active Filters:\"),\n                React.createElement(Filter.List, null, activeFilters.map((item, index) => (React.createElement(Filter.Item, { key: index, onRemove: this.removeFilter, filterData: item }, item.label)))),\n                React.createElement(\"a\", { href: \"#\", onClick: this.clearFilters }, \"Clear All Filters\")))));\n    }\n}\nDetailsToolbar.defaultProps = { onActionPerformed: noop };\n","import { Title } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/query';\nimport { ListView } from 'patternfly-react';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportsActions, reportsSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedReportItems, } from 'utils/getComputedReportItems';\nimport { listViewOverride, styles, toolbarOverride, } from './costDetails.styles';\nimport { DetailsItem } from './detailItem';\nimport { DetailsToolbar } from './detailsToolbar';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        total: 'desc',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nclass CostDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.handleSelectChange = (event) => {\n            const { history } = this.props;\n            const groupByKey = event.currentTarget\n                .value;\n            const newQuery = {\n                group_by: {\n                    [groupByKey]: '*',\n                },\n                order_by: { total: 'desc' },\n            };\n            history.replace(this.getRouteForQuery(newQuery));\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { total: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'account') {\n                return [\n                    {\n                        id: 'account',\n                        title: t('cost_details.filter.account_select'),\n                        placeholder: t('cost_details.filter.account_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'service') {\n                return [\n                    {\n                        id: 'service',\n                        title: t('cost_details.filter.service_select'),\n                        placeholder: t('cost_details.filter.service_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'region') {\n                return [\n                    {\n                        id: 'region',\n                        title: t('cost_details.filter.region_select'),\n                        placeholder: t('cost_details.filter.region_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getSortTypes = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'account') {\n                return [\n                    {\n                        id: 'account_alias',\n                        isNumeric: false,\n                        title: t('cost_details.order.name'),\n                    },\n                    {\n                        id: 'total',\n                        isNumeric: true,\n                        title: t('cost_details.order.cost'),\n                    },\n                ];\n            }\n            else if (groupById === 'service') {\n                return [\n                    {\n                        id: 'service',\n                        isNumeric: false,\n                        title: t('cost_details.order.name'),\n                    },\n                    {\n                        id: 'total',\n                        isNumeric: true,\n                        title: t('cost_details.order.cost'),\n                    },\n                ];\n            }\n            else if (groupById === 'region') {\n                return [\n                    {\n                        id: 'region',\n                        isNumeric: false,\n                        title: t('cost_details.order.name'),\n                    },\n                    {\n                        id: 'total',\n                        isNumeric: true,\n                        title: t('cost_details.order.cost'),\n                    },\n                ];\n            }\n            return [];\n        };\n        this.onFilterAdded = this.onFilterAdded.bind(this);\n        this.onFilterRemoved = this.onFilterRemoved.bind(this);\n        this.onSortChanged = this.onSortChanged.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n        this.setState({});\n    }\n    componentDidUpdate(prevProps) {\n        const { location, report, queryString } = this.props;\n        if (prevProps.queryString !== queryString || !report || !location.search) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query) {\n        return `/cost?${getQuery(query)}`;\n    }\n    onFilterAdded(filterType, filterValue) {\n        const { history, query } = this.props;\n        if (query.group_by[filterType]) {\n            if (query.group_by[filterType] === '*') {\n                query.group_by[filterType] = filterValue;\n            }\n            else if (!query.group_by[filterType].includes(filterValue)) {\n                query.group_by[filterType] = [query.group_by[filterType], filterValue];\n            }\n        }\n        else {\n            query.group_by[filterType] = [filterValue];\n        }\n        const filteredQuery = this.getRouteForQuery(query);\n        history.replace(filteredQuery);\n    }\n    onFilterRemoved(filterType, filterValue) {\n        const { history, query } = this.props;\n        if (filterValue === '' || !Array.isArray(query.group_by[filterType])) {\n            query.group_by[filterType] = '*';\n        }\n        else {\n            const index = query.group_by[filterType].indexOf(filterValue);\n            if (index > -1) {\n                const updated = [\n                    ...query.group_by[filterType].slice(0, index),\n                    ...query.group_by[filterType].slice(index + 1),\n                ];\n                query.group_by[filterType] = updated;\n            }\n        }\n        const filteredQuery = this.getRouteForQuery(query);\n        history.replace(filteredQuery);\n    }\n    onSortChanged(sortType, isSortAscending) {\n        const { history, query } = this.props;\n        query.order_by = {};\n        query.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n        const filteredQuery = this.getRouteForQuery(query);\n        history.replace(filteredQuery);\n    }\n    render() {\n        const { report, query, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const filterFields = this.getFilterFields(groupById);\n        const sortFields = this.getSortTypes(groupById);\n        const today = new Date();\n        const computedItems = getUnsortedComputedReportItems({\n            report,\n            idKey: groupById,\n        });\n        let sortField = sortFields[0];\n        for (const field of sortFields) {\n            if (query.order_by && query.order_by[field.id]) {\n                sortField = field;\n                break;\n            }\n        }\n        const exportText = t('cost_details.export_link');\n        return (React.createElement(\"div\", { className: css(styles.costDetailsPage) },\n            React.createElement(\"header\", { className: css(styles.header) },\n                React.createElement(\"div\", null,\n                    React.createElement(Title, { size: \"2xl\" }, t('cost_details.title')),\n                    React.createElement(\"div\", { className: css(styles.groupBySelector) },\n                        React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                            t('group_by.label'),\n                            \":\"),\n                        React.createElement(\"select\", { value: groupById, onChange: this.handleSelectChange }, groupByOptions.map(option => (React.createElement(\"option\", { key: option.value, value: option.value }, t(`group_by.values.${option.label}`))))))),\n                Boolean(report) && (React.createElement(\"div\", { className: css(styles.total) },\n                    React.createElement(Title, { className: css(styles.totalValue), size: \"4xl\" }, formatCurrency(report.total.value)),\n                    React.createElement(\"div\", { className: css(styles.totalLabel) },\n                        React.createElement(\"div\", { className: css(styles.totalLabelUnit) }, t('total_cost')),\n                        React.createElement(\"div\", { className: css(styles.totalLabelDate) }, t('since_date', { month: today.getMonth(), date: 1 })))))),\n            React.createElement(\"div\", { className: css(styles.content) },\n                React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n                    React.createElement(\"div\", { className: toolbarOverride },\n                        React.createElement(DetailsToolbar, { exportText: exportText, filterFields: filterFields, onFilterAdded: this.onFilterAdded, onFilterRemoved: this.onFilterRemoved, onSortChanged: this.onSortChanged, sortField: sortField, sortFields: sortFields, report: report, resultsTotal: computedItems.length, query: query }))),\n                React.createElement(\"div\", { className: listViewOverride },\n                    React.createElement(ListView, null,\n                        React.createElement(ListView.Item, { key: \"header_item\", heading: t('cost_details.name_column_title', {\n                                groupBy: groupById,\n                            }), checkboxInput: React.createElement(\"input\", { type: \"checkbox\" }), actions: [\n                                React.createElement(ListView.InfoItem, { key: \"1\" },\n                                    React.createElement(\"strong\", null,\n                                        t('cost_details.cost_column_title'),\n                                        Boolean(report) && (React.createElement(React.Fragment, null, t('cost_details.cost_column_subtitle', {\n                                            total: formatCurrency(report.total.value),\n                                        }))))),\n                            ] }),\n                        computedItems.map((groupItem, index) => {\n                            return (React.createElement(DetailsItem, { key: index, parentQuery: query, parentGroupBy: groupById, item: groupItem, total: report.total.value }));\n                        }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(props.location.search);\n    const query = {\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportsSelectors.selectReport(state, \"cost\" /* cost */, queryString);\n    const reportFetchStatus = reportsSelectors.selectReportFetchStatus(state, \"cost\" /* cost */, queryString);\n    return {\n        report,\n        reportFetchStatus,\n        queryString,\n        query,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(CostDetails));\n","import { hot } from 'react-hot-loader';\nimport CostDetails from './costDetails';\nexport default hot(module)(CostDetails);\n"],"sourceRoot":""}