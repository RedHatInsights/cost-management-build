{"version":3,"sources":["webpack:///./src/pages/azureDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.tsx","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/azureDetails/azureDetails.styles.ts","webpack:///./src/pages/azureDetails/detailsHeader.styles.ts","webpack:///./src/pages/azureDetails/groupBy.styles.ts","webpack:///./src/pages/azureDetails/groupBy.tsx","webpack:///./src/pages/azureDetails/detailsHeader.tsx","webpack:///./src/pages/azureDetails/detailsTagModal.styles.ts","webpack:///./src/pages/azureDetails/detailsTagView.tsx","webpack:///./src/pages/azureDetails/detailsTagModal.tsx","webpack:///./src/pages/azureDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/azureDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/azureDetails/detailsWidgetModal.tsx","webpack:///./src/pages/azureDetails/exportModal.styles.ts","webpack:///./src/pages/azureDetails/exportModal.tsx","webpack:///./src/pages/azureDetails/historicalChart.styles.ts","webpack:///./src/pages/azureDetails/historicalChart.tsx","webpack:///./src/pages/azureDetails/historicalModal.styles.ts","webpack:///./src/pages/azureDetails/historicalModal.tsx","webpack:///./src/pages/azureDetails/detailsActions.tsx","webpack:///./src/pages/azureDetails/detailsTable.styles.ts","webpack:///./src/pages/azureDetails/detailsTableItem.styles.ts","webpack:///./src/pages/azureDetails/detailsTag.styles.ts","webpack:///./src/pages/azureDetails/detailsTag.tsx","webpack:///./src/pages/azureDetails/detailsWidget.styles.ts","webpack:///./src/pages/azureDetails/detailsWidgetView.tsx","webpack:///./src/pages/azureDetails/detailsWidget.tsx","webpack:///./src/pages/azureDetails/detailsTableItem.tsx","webpack:///./src/pages/azureDetails/detailsTable.tsx","webpack:///./src/pages/azureDetails/detailsToolbar.styles.ts","webpack:///./src/pages/azureDetails/filterBy.styles.ts","webpack:///./src/pages/azureDetails/filterBy.tsx","webpack:///./src/pages/azureDetails/detailsToolbar.tsx","webpack:///./src/pages/azureDetails/azureDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_azureDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","tags","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","getForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getSinceDateRangeString","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","itemsPerRow","marginLeft","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AzureReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","azureReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AzureReportSummaryAlt","tabs","Grid","GridItem","lg","xl","azureReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","AzureReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","_units","utils_formatValue","unitsLabel","azureReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AzureReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AzureReportSummaryItem","azureReportSummaryItems_styles_styles","skeleton","AzureReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","azureReportSummaryTrend_styles_styles","AzureReportSummaryTrend","trendChart","getIdKeyForNavItem","navItem","TertiaryNav","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","react_i18next__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_4___default","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","itemId","isActive","handleOnSelect","selectedItem","history","replace","availableNavItems","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","onSelect","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","variant","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","tertiary","val","azureDetails","backgroundColor","content","paddingTop","paginationContainer","pagination","tableContainer","detailsHeader_styles_styles","costValue","costLabelUnit","costLabelDate","header","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","azureQuery","filter","resolution","time_scope_units","time_scope_value","key_only","azureReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","onClick","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","tertiaryNav","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tag","isArray","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","azureReportSummary","_item","DetailsWidgetModal","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","azureExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","Button","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","azureReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","azureReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","azureDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","addTag","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","showPercentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","toolbarContainer","paddingLeft","filterBy_styles_styles","filterContainer","filterByOptions","filterBy_reportType","filterBy_tagKey","filterBy_mapStateToProps","filterBy_mapDispatchToProps","FilterBy","isFilterByOpen","isFilterByTagOpen","getFilterBy","getSelectOptions","getFilterByTag","getSelectTagOptions","getSelectOption","getSelectItems","SelectOption","getSelectTagItems","handleFilterBySelect","selection","isPlaceholder","handleFilterByTagSelect","currentTagItem","handleFilterByToggle","handleFilterByTagToggle","filterByTag","Select","isExpanded","selections","selectConstants","single","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","currentValue","currentViewType","filterCategory","addQuery","filter_by","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","placeholder","TextInput","onKeyPress","isExportDisabled","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","azureDetails_reportType","azureDetails_baseQuery","azureDetails_tagKey","azureDetails_mapStateToProps","azureDetails_mapDispatchToProps","groupByTag","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","newFilterType","found","filters","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"487d4ffd90f0c57c6604.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport AzureDetails from './azureDetails';\nexport default hot(module)(AzureDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummary.styles';\nconst AzureReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AzureReportSummary = translate()(AzureReportSummaryBase);\nexport { AzureReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummaryAlt.styles';\nconst AzureReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AzureReportSummaryAlt = translate()(AzureReportSummaryAltBase);\nexport { AzureReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryDetails.styles';\nconst AzureReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (report.meta.total.usage && report.meta.total.usage.value) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Work around for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage : 0, report.meta.total.count ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    (units ||\n                        (report &&\n                            report.meta &&\n                            report.meta.total.usage &&\n                            report.meta.total.usage.value >= 0))) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AzureReportSummaryDetails = translate()(AzureReportSummaryDetailsBase);\nexport { AzureReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryItem.styles';\nconst AzureReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAzureReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AzureReportSummaryItem = translate()(AzureReportSummaryItemBase);\nexport { AzureReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureReportSummaryItems.styles';\nclass AzureReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAzureReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AzureReportSummaryItems = translate()(AzureReportSummaryItemsBase);\nexport { AzureReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './azureReportSummaryTrend.styles';\nconst AzureReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AzureReportSummaryTrend };\n","import { Nav, NavItem, NavList, NavVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem }, this.getNavItemTitle(navItem)));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    azureDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { parseQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAzureReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'subscription_guid';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('navigation.cloud_details')),\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"azure\" /* azure */ })),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('azure_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = azureReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    if (Array.isArray(tag.values)) {\n                        for (const val of tag.values) {\n                            tags.push(`${tag.key}: ${val}`);\n                        }\n                    }\n                    else {\n                        tags.push(`${tag.key}: ${tag.values}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            subscription_guid: account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/azureQuery';\nimport { AzureReportSummaryItem, AzureReportSummaryItems, } from 'components/reports/azureReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('azure_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AzureReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AzureReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureExportActions, azureExportSelectors } from 'store/azureExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: azureExportSelectors.selectExportError(state),\n        export: azureExportSelectors.selectExport(state),\n        fetchStatus: azureExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: azureExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAzureReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as azureReportsActions from 'store/azureReports/azureReportsActions';\nimport * as azureReportsSelectors from 'store/azureReports/azureReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAzureReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAzureReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAzureReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAzureReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAzureReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAzureReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('azure_details.historical.cost_title'), xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('azure_details.historical.instance_title'), showUsageLegendLabel: true, xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('azure_details.historical.storage_title'), showUsageLegendLabel: true, xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = azureReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = azureReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = azureReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = azureReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = azureReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = azureReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureDashboardSelectors } from 'store/azureDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"subscription_guid\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('azure_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'subscription_guid', onClick: this.handleWidgetModalOpen }, t('azure_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'subscription_guid', onClick: this.handleTagModalOpen }, t('azure_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('azure_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        const addTag = (tag, val) => {\n            const prefix = someTags.length > 0 ? ', ' : '';\n            const tagString = `${prefix}${tag.key}: ${val}`;\n            if (showAll) {\n                someTags.push(tagString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + tagString.length > maxChars) {\n                    someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                }\n                else {\n                    someTags.push(tagString);\n                }\n            }\n            charCount += tagString.length;\n            allTags.push(`${tag.key}: ${val}`);\n        };\n        if (report) {\n            for (const tag of report.data) {\n                if (!Array.isArray(tag.values)) {\n                    addTag(tag, tag.values);\n                }\n                else {\n                    for (const val of tag.values) {\n                        addTag(tag, val);\n                    }\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('azure_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            subscription_guid: account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        subscription_guid: account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/azureQuery';\nimport { AzureReportSummaryItem, AzureReportSummaryItems, } from 'components/reports/azureReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAzureReportItems } from 'utils/getComputedAzureReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAzureReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AzureReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                    ? reportItem.cost\n                    : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('azure_details.view_all', {\n                        value: t(`group_by.top_values.${groupBy}`),\n                    })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AzureReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"service_names\" /* service_names */,\n            \"subscription_guids\" /* subscription_guids */,\n            \"resource_locations\" /* resource_locations */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('azure_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'subscription_guid') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('azure_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/azureQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('azure_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAzureReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                    Boolean(showPercentage && item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(showPercentage && item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    filterContainer: {\n        display: 'inline-flex',\n    },\n});\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { styles } from './filterBy.styles';\nconst filterByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n    { label: 'tags', value: 'tags' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass FilterByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isFilterByOpen: false,\n            isFilterByTagOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getFilterBy = () => {\n            const { groupBy } = this.props;\n            // Find i18n string\n            const items = this.getSelectOptions();\n            for (const item of items) {\n                if (groupBy === item.id ||\n                    (groupBy.indexOf(tagKey) !== -1 && item.id === 'tags')) {\n                    return item;\n                }\n            }\n            return null;\n        };\n        this.getFilterByTag = () => {\n            const { groupBy } = this.props;\n            // Find i18n string\n            const items = this.getSelectTagOptions();\n            for (const item of items) {\n                if (groupBy === item.id) {\n                    return item;\n                }\n            }\n            return items[0];\n        };\n        this.getSelectOption = (id, label) => {\n            return {\n                id,\n                toString: () => label,\n            };\n        };\n        this.getSelectItems = () => {\n            return this.getSelectOptions().map(option => (React.createElement(SelectOption, { key: option.id, value: option })));\n        };\n        this.getSelectTagItems = () => {\n            return this.getSelectTagOptions().map(option => (React.createElement(SelectOption, { key: option.id, value: option })));\n        };\n        this.getSelectOptions = () => {\n            const { t } = this.props;\n            return filterByOptions.map(option => {\n                return this.getSelectOption(`${option.value}`, t(`group_by.values.${option.label}`));\n            });\n        };\n        this.getSelectTagOptions = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => {\n                    return this.getSelectOption(`${tagKey}${val}`, t('group_by.tag', { key: val }));\n                });\n            }\n            else {\n                return [];\n            }\n        };\n        this.handleFilterBySelect = (event, selection, isPlaceholder) => {\n            const { groupBy, onItemClicked } = this.props;\n            let selected = selection;\n            if (selection.id === 'tags') {\n                const items = this.getSelectTagOptions();\n                if (groupBy.indexOf(tagKey) !== -1) {\n                    for (const item of items) {\n                        if (groupBy === item.id) {\n                            selected = item;\n                        }\n                    }\n                }\n                else {\n                    selected = items[0];\n                }\n            }\n            if (onItemClicked) {\n                onItemClicked(selected.id);\n            }\n            this.setState({\n                currentItem: selection,\n                isFilterByOpen: false,\n            });\n        };\n        this.handleFilterByTagSelect = (event, selection, isPlaceholder) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.id);\n            }\n            this.setState({\n                currentTagItem: selection,\n                isFilterByTagOpen: false,\n            });\n        };\n        this.handleFilterByToggle = isFilterByOpen => {\n            this.setState({\n                isFilterByOpen,\n            });\n        };\n        this.handleFilterByTagToggle = isFilterByTagOpen => {\n            this.setState({\n                isFilterByTagOpen,\n            });\n        };\n        this.handleFilterBySelect = this.handleFilterBySelect.bind(this);\n        this.handleFilterByTagSelect = this.handleFilterByTagSelect.bind(this);\n        this.handleFilterByTagToggle = this.handleFilterByTagToggle.bind(this);\n        this.handleFilterByToggle = this.handleFilterByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getFilterBy(),\n            currentTagItem: this.getFilterByTag(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, reportFetchStatus, groupBy, queryString } = this.props;\n        if (prevProps.groupBy !== groupBy ||\n            prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n        if (prevProps.groupBy !== groupBy ||\n            prevProps.queryString !== queryString ||\n            prevProps.reportFetchStatus !== reportFetchStatus) {\n            this.setState({\n                currentItem: this.getFilterBy(),\n                currentTagItem: this.getFilterByTag(),\n            });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, currentTagItem, isFilterByOpen, isFilterByTagOpen, } = this.state;\n        const filterByTag = currentItem && currentItem.id ? currentItem.id === 'tags' : false;\n        return (React.createElement(\"div\", { className: css(styles.filterContainer) },\n            React.createElement(Select, { \"aria-label\": t('azure_details.toolbar.filter_type_aria_label'), onSelect: this.handleFilterBySelect, onToggle: this.handleFilterByToggle, isExpanded: isFilterByOpen, selections: currentItem, variant: SelectVariant.single }, this.getSelectItems()),\n            Boolean(filterByTag) && (React.createElement(Select, { \"aria-label\": t('azure_details.toolbar.filter_tag_type_aria_label'), onSelect: this.handleFilterByTagSelect, onToggle: this.handleFilterByTagToggle, isExpanded: isFilterByTagOpen, selections: currentTagItem, variant: SelectVariant.single }, this.getSelectTagItems()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst FilterBy = translate()(connect(mapStateToProps, mapDispatchToProps)(FilterByBase));\nexport { FilterBy };\n","import { Button, ButtonVariant, Chip, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nimport { FilterBy } from './filterBy';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.groupBy,\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            if (query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    if (Array.isArray(query.filter_by[key])) {\n                        query.filter_by[key].forEach(value => {\n                            const field = key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key;\n                        const filter = this.getFilter(field, query.filter_by[key]);\n                        activeFilters.push(filter);\n                    }\n                });\n            }\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(this.props.groupBy, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType, value);\n        };\n        this.getFilter = (field, value) => {\n            const filterLabel = this.getFilterLabel(field, value);\n            const result = {\n                field,\n                label: filterLabel,\n                value,\n            };\n            return result;\n        };\n        this.getFilterLabel = (field, value) => {\n            const { t } = this.props;\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                // Normalize account, region, and service filters\n                switch (field) {\n                    case 'resource_location':\n                        filterText = t('azure_details.filter.region_select');\n                        break;\n                    case 'subscription_guid':\n                        filterText = t('azure_details.filter.account_select');\n                        break;\n                    case 'service_name':\n                        filterText = t('azure_details.filter.service_select');\n                        break;\n                    default:\n                        filterText = field;\n                }\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(4) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = (filterType) => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (groupBy !== prevProps.groupBy) {\n            this.setState({\n                currentFilterType: groupBy,\n            });\n        }\n    }\n    renderInput() {\n        const { t } = this.props;\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        const index = currentFilterType ? currentFilterType.indexOf(tagKey) : -1;\n        const placeholder = index === 0\n            ? t('azure_details.filter.tag_placeholder')\n            : t(`azure_details.filter.${currentFilterType}_placeholder`);\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: placeholder, value: currentValue }));\n    }\n    render() {\n        const { groupBy, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('azure_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FilterBy, { groupBy: groupBy, onItemClicked: this.selectFilterType })),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('azure_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('azure_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('azure_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('azure_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('azure_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery, } from 'api/azureQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { exportText: t('azure_details.export_link'), groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[newFilterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[newFilterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[newFilterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[newFilterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[newFilterType] = [\n                        newQuery.filter_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (!Array.isArray(newQuery.filter_by[newFilterType])) {\n                newQuery.filter_by[newFilterType] = undefined;\n            }\n            else {\n                const index = newQuery.filter_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[newFilterType] = [\n                        ...query.filter_by[newFilterType].slice(0, index),\n                        ...query.filter_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/azure?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAzureReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.azureDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = azureReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n"],"sourceRoot":""}