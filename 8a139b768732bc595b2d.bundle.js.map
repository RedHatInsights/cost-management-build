{"version":3,"file":"8a139b768732bc595b2d.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/state/noData/index.ts","webpack://koku-ui/./src/pages/views/components/export/exportModal.styles.ts","webpack://koku-ui/./src/pages/views/components/export/exportSubmit.tsx","webpack://koku-ui/./src/pages/views/components/export/exportModal.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupBy.styles.ts","webpack://koku-ui/./src/pages/views/components/groupBy/groupByOrg.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupByTag.tsx","webpack://koku-ui/./src/pages/views/components/groupBy/groupBy.tsx","webpack://koku-ui/./src/pages/views/details/components/actions/actions.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdown.styles.ts","webpack://koku-ui/./src/pages/views/details/components/tag/tag.styles.ts","webpack://koku-ui/./src/pages/views/details/components/tag/tagContent.tsx","webpack://koku-ui/./src/pages/views/details/components/tag/tagModal.tsx","webpack://koku-ui/./src/pages/views/details/components/tag/tagLink.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownHeader.tsx","webpack://koku-ui/./src/pages/views/details/components/breakdown/breakdownBase.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/cluster.styles.ts","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterContent.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterModal.styles.ts","webpack://koku-ui/./src/pages/views/details/components/cluster/clusterModal.tsx","webpack://koku-ui/./src/pages/views/details/components/cluster/cluster.tsx","webpack://koku-ui/./src/pages/views/details/components/costChart/costChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/costChart/costChart.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModal.styles.ts","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModalContent.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryModal.tsx","webpack://koku-ui/./src/pages/views/details/components/summary/summaryCard.styles.ts","webpack://koku-ui/./src/pages/views/details/components/summary/summaryCard.tsx","webpack://koku-ui/./src/pages/views/details/components/usageChart/usageChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/usageChart/usageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/costOverview/costOverviewBase.tsx","webpack://koku-ui/./src/pages/views/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/historicalCostChart/historicalCostChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalChart.styles.ts","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataCostChart.tsx","webpack://koku-ui/./src/pages/views/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataTrendChart.tsx","webpack://koku-ui/./src/pages/views/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack://koku-ui/./src/pages/views/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataUsageChart.tsx","webpack://koku-ui/./src/pages/views/details/components/historicalData/historicalDataBase.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/utils/paths.ts","webpack://koku-ui/./src/testIds.ts"],"sourcesContent":["import NoData from './noData';\nexport default NoData;\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    alert: {\n        marginBottom: global_spacer_md.var,\n    },\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        marginBottom: global_spacer_md.var,\n    },\n};\n","import { Button, ButtonVariant } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { endOfMonth, format, startOfMonth } from 'date-fns';\nimport fileDownload from 'js-file-download';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions, exportSelectors } from 'store/export';\nimport { getTestProps, testIds } from 'testIds';\nimport { getToday } from 'utils/dateRange';\nconst reportType = \"cost\" /* cost */;\nexport class ExportSubmitBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            fetchReportClicked: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExport = () => {\n            const { report, reportFetchStatus } = this.props;\n            if (report && reportFetchStatus === 2 /* complete */) {\n                fileDownload(report.data, this.getFileName(), 'text/csv');\n                this.handleClose();\n            }\n        };\n        this.getFileName = () => {\n            const { endDate, groupBy, intl, reportPathsType, resolution, startDate } = this.props;\n            // defaultMessage: '<provider>_<groupBy>_<resolution>_<start-date>_<end-date>',\n            const fileName = intl.formatMessage(messages.ExportFileName, {\n                endDate,\n                provider: reportPathsType,\n                groupBy: groupBy.indexOf(tagPrefix) !== -1 ? 'tag' : groupBy,\n                resolution,\n                startDate,\n            });\n            return `${fileName}.csv`;\n        };\n        this.handleClose = () => {\n            const { reportError } = this.props;\n            this.setState(Object.assign({}, this.defaultState), () => {\n                if (!reportError) {\n                    this.props.onClose(false);\n                }\n            });\n        };\n        this.handleFetchReport = () => {\n            const { exportReport, queryString, reportPathsType } = this.props;\n            exportReport(reportPathsType, reportType, queryString);\n            this.setState({\n                fetchReportClicked: true,\n            }, () => {\n                this.getExport();\n            });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError } = this.props;\n        const { fetchReportClicked } = this.state;\n        if (prevProps.report !== report && fetchReportClicked) {\n            this.getExport();\n        }\n        if (reportError) {\n            this.props.onError(reportError);\n        }\n    }\n    render() {\n        const { intl, reportFetchStatus } = this.props;\n        return (React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: reportFetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), intl.formatMessage(messages.ExportsDownload)));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const { groupBy, isAllItems, items, query, reportPathsType, resolution, timeScope } = props;\n    let endDate = query.end_date;\n    let startDate = query.start_date;\n    const getQueryString = () => {\n        const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter: Object.assign({ limit: undefined, offset: undefined, resolution: resolution ? resolution : undefined }, (!(startDate && endDate) && { time_scope_value: timeScope === 'previous' ? -2 : -1 })), filter_by: {}, limit: 0, order_by: undefined, perspective: undefined, dateRange: undefined, delta: undefined });\n        // Store filter_by as an array so we can add to it below\n        if (query.filter_by) {\n            for (const key of Object.keys(query.filter_by)) {\n                if (newQuery.filter_by[key] === undefined) {\n                    newQuery.filter_by[key] = [];\n                }\n                newQuery.filter_by[key].push(query.filter_by[key]);\n            }\n        }\n        if (isAllItems) {\n            // Ensure group_by isn't overridden -- org_unit_id is not unique\n            if (groupBy === orgUnitIdKey) {\n                if (newQuery.filter_by[orgUnitIdKey] === undefined) {\n                    newQuery.filter_by[orgUnitIdKey] = [];\n                }\n                newQuery.filter_by[orgUnitIdKey].push(query.group_by[orgUnitIdKey]);\n            }\n        }\n        else {\n            if (groupBy === orgUnitIdKey) {\n                for (const item of items) {\n                    // Note that type only exists when grouping by org units\n                    const type = item.type === 'organizational_unit' ? orgUnitIdKey : item.type;\n                    if (newQuery.filter_by[type] === undefined) {\n                        newQuery.filter_by[type] = [];\n                    }\n                    newQuery.filter_by[type].push(item.id);\n                }\n            }\n            else {\n                for (const item of items) {\n                    if (newQuery.filter_by[groupBy] === undefined) {\n                        newQuery.filter_by[groupBy] = [];\n                    }\n                    newQuery.filter_by[groupBy].push(item.id);\n                }\n            }\n        }\n        return getQuery(newQuery);\n    };\n    const queryString = getQueryString();\n    const report = exportSelectors.selectExport(state, reportPathsType, reportType, queryString);\n    const reportError = exportSelectors.selectExportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = exportSelectors.selectExportFetchStatus(state, reportPathsType, reportType, queryString);\n    if (!(startDate && endDate)) {\n        const isPrevious = timeScope === 'previous';\n        const today = getToday();\n        if (isPrevious) {\n            today.setMonth(today.getMonth() - 1);\n        }\n        endDate = format(isPrevious ? endOfMonth(today) : today, 'yyyy-MM-dd');\n        startDate = format(startOfMonth(today), 'yyyy-MM-dd');\n    }\n    return {\n        endDate,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        startDate,\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportSubmitConnect = connect(mapStateToProps, mapDispatchToProps)(ExportSubmitBase);\nconst ExportSubmit = injectIntl(ExportSubmitConnect);\nexport { ExportSubmit };\n","import { Alert, Button, ButtonVariant, Form, FormGroup, Modal, Radio } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { orderBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { exportActions } from 'store/export';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './exportModal.styles';\nimport { ExportSubmit } from './exportSubmit';\nconst resolutionOptions = [\n    { label: messages.ExportResolution, value: 'daily' },\n    { label: messages.ExportResolution, value: 'monthly' },\n];\nconst timeScopeOptions = [\n    { label: messages.ExportTimeScope, value: 'current' },\n    { label: messages.ExportTimeScope, value: 'previous' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            error: undefined,\n            timeScope: 'current',\n            resolution: this.props.resolution || 'monthly',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Reset defult state upon close -- see https://issues.redhat.com/browse/COST-1134\n        this.handleClose = () => {\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleError = (error) => {\n            this.setState({ error });\n        };\n        this.handleMonthChange = (_, event) => {\n            this.setState({ timeScope: event.currentTarget.value });\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleMonthChange = this.handleMonthChange.bind(this);\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    render() {\n        const { groupBy, intl, isAllItems, items, query, reportPathsType, showAggregateType = true, showTimeScope = true, } = this.props;\n        const { error, resolution, timeScope } = this.state;\n        let sortedItems = [...items];\n        if (this.props.isOpen) {\n            if (items && items.length === 0 && isAllItems) {\n                sortedItems = [\n                    {\n                        label: intl.formatMessage(messages.ExportAll),\n                    },\n                ];\n            }\n            else {\n                sortedItems = orderBy(sortedItems, ['label'], ['asc']);\n            }\n        }\n        let selectedLabel = intl.formatMessage(messages.ExportSelected, { groupBy });\n        if (groupBy.indexOf(tagPrefix) !== -1) {\n            selectedLabel = intl.formatMessage(messages.ExportSelected, { groupBy: 'tag' });\n        }\n        const thisMonth = new Date();\n        const lastMonth = new Date().setMonth(thisMonth.getMonth() - 1);\n        const currentMonth = format(thisMonth, 'MMMM yyyy');\n        const previousMonth = format(lastMonth - 1, 'MMMM yyyy');\n        return (React.createElement(Modal, { style: styles.modal, isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.ExportTitle), variant: \"small\", actions: [\n                React.createElement(ExportSubmit, { groupBy: groupBy, isAllItems: isAllItems, items: items, key: \"confirm\", timeScope: showTimeScope ? timeScope : undefined, onClose: this.handleClose, onError: this.handleError, query: query, reportPathsType: reportPathsType, resolution: resolution }),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }), intl.formatMessage(messages.Cancel)),\n            ] },\n            error && React.createElement(Alert, { variant: \"danger\", style: styles.alert, title: intl.formatMessage(messages.ExportError) }),\n            React.createElement(\"div\", { style: styles.title },\n                React.createElement(\"span\", null, intl.formatMessage(messages.ExportHeading, { groupBy }))),\n            React.createElement(Form, { style: styles.form },\n                showAggregateType && (React.createElement(FormGroup, { label: intl.formatMessage(messages.ExportAggregateType), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, { value: option.value }), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": intl.formatMessage(option.label, { value: option.value }) })))))),\n                showTimeScope && (React.createElement(FormGroup, { label: intl.formatMessage(messages.ExportTimeScopeTitle), fieldId: \"timeScope\" },\n                    React.createElement(React.Fragment, null, timeScopeOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `timeScope-${index}`, isValid: option.value !== undefined, label: intl.formatMessage(option.label, {\n                            date: option.value === 'previous' ? previousMonth : currentMonth,\n                            value: option.value,\n                        }), value: option.value, checked: timeScope === option.value, name: \"timeScope\", onChange: this.handleMonthChange, \"aria-label\": intl.formatMessage(option.label, {\n                            date: option.value === 'previous' ? previousMonth : currentMonth,\n                            value: option.value,\n                        }) })))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n    exportReport: exportActions.exportReport,\n};\nconst ExportModalConnect = connect(mapStateToProps, mapDispatchToProps)(ExportModalBase);\nconst ExportModal = injectIntl(ExportModalConnect);\nexport { ExportModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n};\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { orgUnitIdKey, orgUnitNameKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByOrgBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            for (const key of groupByKeys) {\n                const index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = queryFromRoute.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.getGroupByItems = () => {\n            const { orgReport } = this.props;\n            if (!(orgReport && orgReport.data)) {\n                return [];\n            }\n            // Sort all names first\n            const sortedData = orgReport.data.sort((a, b) => {\n                if (a[orgUnitNameKey] < b[orgUnitNameKey]) {\n                    return -1;\n                }\n                if (a[orgUnitNameKey] > b[orgUnitNameKey]) {\n                    return 1;\n                }\n                return 0;\n            });\n            // Move roots first\n            const roots = sortedData.filter(org => org.level === 0);\n            const filteredOrgs = sortedData.filter(org => org.level !== 0);\n            roots.map(root => {\n                const item = sortedData.find(org => org[orgUnitIdKey] === root[orgUnitIdKey]);\n                filteredOrgs.unshift(item);\n            });\n            return filteredOrgs.map(org => ({\n                id: org[orgUnitIdKey],\n                toString: () => org[orgUnitNameKey],\n            }));\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection.id,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${orgUnitIdKey}${selection.id}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled = false, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const groupByItems = this.getGroupByItems();\n        const selection = groupByItems.find((item) => item.id === currentItem);\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.FilterByOrgUnitAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.FilterByOrgUnitPlaceholder), selections: selection, variant: SelectVariant.typeahead }, groupByItems.map(item => (React.createElement(SelectOption, { description: item.id, key: item.id, value: item }))))));\n    }\n}\nconst GroupByOrg = injectIntl(GroupByOrgBase);\nexport { GroupByOrg };\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { uniq, uniqBy } from 'lodash';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './groupBy.styles';\nclass GroupByTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getGroupByItems = () => {\n            const { tagReport } = this.props;\n            if (!(tagReport && tagReport.data)) {\n                return [];\n            }\n            // If the key_only param is used, we have an array of strings\n            let hasTagKeys = false;\n            for (const item of tagReport.data) {\n                if (item.hasOwnProperty('key')) {\n                    hasTagKeys = true;\n                    break;\n                }\n            }\n            // Workaround for https://github.com/project-koku/koku/issues/1797\n            let data = [];\n            if (hasTagKeys) {\n                const keepData = tagReport.data.map(\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                (_a) => {\n                    var { type } = _a, keepProps = __rest(_a, [\"type\"]);\n                    return keepProps;\n                });\n                data = uniqBy(keepData, 'key');\n            }\n            else {\n                data = uniq(tagReport.data);\n            }\n            return data.map(item => {\n                const tagKey = hasTagKeys ? item.key : item;\n                return React.createElement(SelectOption, { key: item.key, value: tagKey });\n            });\n        };\n        this.getCurrentGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            let groupBy;\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = key.slice(tagPrefix.length);\n                    break;\n                }\n            }\n            return groupBy;\n        };\n        this.handleGroupByClear = () => {\n            this.setState({\n                currentItem: undefined,\n            });\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            this.setState({\n                currentItem: selection,\n                isGroupByOpen: false,\n            });\n            if (onSelected) {\n                onSelected(`${tagPrefix}${selection}`);\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({ isGroupByOpen });\n        };\n        this.handleGroupByClear = this.handleGroupByClear.bind(this);\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { groupBy } = this.props;\n        if (prevProps.groupBy !== groupBy) {\n            this.setState({ currentItem: this.getCurrentGroupBy() });\n        }\n    }\n    render() {\n        const { isDisabled, intl } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Select, { \"aria-label\": intl.formatMessage(messages.FilterByTagKeyAriaLabel), isDisabled: isDisabled, onClear: this.handleGroupByClear, onToggle: this.handleGroupByToggle, onSelect: this.handleGroupBySelected, isOpen: isGroupByOpen, placeholderText: intl.formatMessage(messages.FilterByTagKeyPlaceholder), selections: currentItem, variant: SelectVariant.typeahead }, this.getGroupByItems())));\n    }\n}\nconst GroupByTag = injectIntl(GroupByTagBase);\nexport { GroupByTag };\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport { getQuery, orgUnitIdKey, parseQuery, tagKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { styles } from './groupBy.styles';\nimport { GroupByOrg } from './groupByOrg';\nimport { GroupByTag } from './groupByTag';\nconst groupByOrgOptions = [{ label: orgUnitIdKey, value: orgUnitIdKey }];\nconst groupByTagOptions = [{ label: tagKey, value: tagKey }];\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            defaultItem: this.props.groupBy || this.props.options[0].value,\n            isGroupByOpen: false,\n            isGroupByOrgVisible: false,\n            isGroupByTagVisible: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getCurrentGroupBy = () => {\n            const { getIdKeyForGroupBy } = this.props;\n            const { defaultItem } = this.state;\n            const queryFromRoute = parseQuery(location.search);\n            if (!(queryFromRoute && queryFromRoute.group_by)) {\n                return defaultItem;\n            }\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by ? Object.keys(queryFromRoute.group_by) : [];\n            for (const key of groupByKeys) {\n                let index = key.indexOf(tagPrefix);\n                if (index !== -1) {\n                    groupBy = tagKey;\n                    this.setState({\n                        isGroupByTagVisible: true,\n                    });\n                    break;\n                }\n                index = key.indexOf(orgUnitIdKey);\n                if (index !== -1) {\n                    groupBy = orgUnitIdKey;\n                    this.setState({\n                        isGroupByOrgVisible: true,\n                    });\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : defaultItem;\n        };\n        this.getGroupBy = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isGroupByOpen } = this.state;\n            const selectOptions = this.getGroupByOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"groupBySelect\", isDisabled: isDisabled, isOpen: isGroupByOpen, onSelect: this.handleGroupBySelected, onToggle: this.handleGroupByToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getGroupByOptions = () => {\n            const { options, orgReport, tagReport, intl } = this.props;\n            const allOptions = [...options];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                allOptions.push(...groupByOrgOptions);\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                allOptions.push(...groupByTagOptions);\n            }\n            return allOptions.map(option => ({\n                toString: () => intl.formatMessage(messages.GroupByValuesTitleCase, { value: option.label, count: 1 }),\n                value: option.value,\n            }));\n        };\n        this.handleGroupBySelected = (event, selection) => {\n            const { onSelected } = this.props;\n            if (selection.value === orgUnitIdKey || selection.value === tagKey) {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: selection.value === orgUnitIdKey,\n                    isGroupByTagVisible: selection.value === tagKey,\n                });\n            }\n            else {\n                this.setState({\n                    currentItem: selection.value,\n                    isGroupByOpen: false,\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                }, () => {\n                    if (onSelected) {\n                        onSelected(selection.value);\n                    }\n                });\n            }\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupBySelected = this.handleGroupBySelected.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportFetchStatus, orgReportPathsType, showOrgs, showTags, tagQueryString, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        this.setState({\n            currentItem: this.getCurrentGroupBy(),\n        }, () => {\n            if (showOrgs && orgReportFetchStatus !== 1 /* inProgress */) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (showTags && tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, groupBy, orgQueryString, orgReportFetchStatus, orgReportPathsType, perspective, showOrgs, showTags, tagQueryString, tagReportFetchStatus, tagReportPathsType, } = this.props;\n        if (prevProps.groupBy !== groupBy || prevProps.perspective !== perspective) {\n            let options;\n            if (prevProps.perspective !== perspective) {\n                options = {\n                    isGroupByOrgVisible: false,\n                    isGroupByTagVisible: false,\n                };\n            }\n            this.setState(Object.assign({ currentItem: this.getCurrentGroupBy() }, (options ? options : {})), () => {\n                if (showOrgs && orgReportFetchStatus !== 1 /* inProgress */) {\n                    fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n                }\n                if (showTags && tagReportFetchStatus !== 1 /* inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n                }\n            });\n        }\n    }\n    render() {\n        const { getIdKeyForGroupBy, groupBy, isDisabled = false, onSelected, orgReport, intl, tagReport } = this.props;\n        const { isGroupByOrgVisible, isGroupByTagVisible } = this.state;\n        return (React.createElement(\"div\", { style: styles.groupBySelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.groupBySelectorLabel }, intl.formatMessage(messages.GroupByLabel)),\n            this.getGroupBy(),\n            Boolean(isGroupByOrgVisible) && (React.createElement(GroupByOrg, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByOrgOptions, orgReport: orgReport })),\n            Boolean(isGroupByTagVisible) && (React.createElement(GroupByTag, { groupBy: groupBy, isDisabled: isDisabled, onSelected: onSelected, options: groupByTagOptions, tagReport: tagReport }))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { endDate, startDate, orgReportPathsType, tagReportPathsType }) => {\n    const tagQuery = endDate && startDate\n        ? {\n            start_date: startDate,\n            end_date: endDate,\n        }\n        : {\n            filter: {\n                resolution: 'monthly',\n                time_scope_units: 'month',\n                time_scope_value: -1,\n            },\n        };\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery(Object.assign(Object.assign({}, tagQuery), { key_only: true }));\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    const orgQueryString = getQuery({\n    // TBD...\n    });\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    return {\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst GroupByConnect = connect(mapStateToProps, mapDispatchToProps)(GroupByBase);\nconst GroupBy = injectIntl(GroupByConnect);\nexport { GroupBy };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { costModelsActions } from 'store/costModels';\nclass DetailsActionsBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query, reportPathsType } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, isDisabled, showPriceListOption, intl, redirectToCostModel, history, item: { source_uuid }, } = this.props;\n        // tslint:disable:jsx-wrap-multiline\n        const items = [\n            React.createElement(DropdownItem, { component: \"button\", isDisabled: isDisabled, key: \"export-action\", onClick: this.handleExportModalOpen }, intl.formatMessage(messages.DetailsActionsExport)),\n        ];\n        if (showPriceListOption) {\n            items.unshift(React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: isDisabled || groupBy.includes(tagPrefix) || source_uuid.length === 0, onClick: () => redirectToCostModel(source_uuid[0], history) }, intl.formatMessage(messages.DetailsActionsPriceList)));\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: items }),\n            this.getExportModal()));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n    redirectToCostModel: costModelsActions.redirectToCostModelFromSourceUuid,\n};\nconst DetailsActionsConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsActionsBase);\nconst Actions = injectIntl(withRouter(DetailsActionsConnect));\nexport { Actions };\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingLeft: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    dataListHeading: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    groupByHeading: {\n        marginBottom: global_spacer_lg.value,\n    },\n    tagLink: {\n        marginLeft: global_spacer_sm.value,\n    },\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { styles } from './tag.styles';\nclass TagContentBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDataListItems = () => {\n            const { tagReport } = this.props;\n            const result = [];\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    for (const val of item.values) {\n                        const id = `${item.key}:${val}`;\n                        result.push(React.createElement(DataListItem, { \"aria-labelledby\": id, key: `${id}-item` },\n                            React.createElement(DataListItemRow, null,\n                                React.createElement(DataListItemCells, { dataListCells: [\n                                        React.createElement(DataListCell, { key: `${id}-cell1` },\n                                            React.createElement(\"span\", { id: id }, item.key)),\n                                        React.createElement(DataListCell, { key: `${id}-cell2` }, val),\n                                    ] }))));\n                    }\n                }\n            }\n            return result;\n        };\n    }\n    render() {\n        const { groupBy, groupByValue, intl } = this.props;\n        const dataListItems = this.getDataListItems();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { style: styles.dataListHeading }, intl.formatMessage(messages.GroupByValues, { value: groupBy, count: 1 }))),\n            React.createElement(\"div\", { style: styles.groupByHeading },\n                React.createElement(\"span\", null, groupByValue)),\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.TagNames), isCompact: true },\n                React.createElement(DataListItem, { \"aria-labelledby\": \"heading1\" },\n                    React.createElement(DataListItemRow, null,\n                        React.createElement(DataListItemCells, { dataListCells: [\n                                React.createElement(DataListCell, { key: \"primary content\" },\n                                    React.createElement(\"span\", { id: \"heading1\", style: styles.dataListHeading }, intl.formatMessage(messages.TagHeadingKey))),\n                                React.createElement(DataListCell, { key: \"secondary content\" },\n                                    React.createElement(\"span\", { id: \"heading2\", style: styles.dataListHeading }, intl.formatMessage(messages.TagHeadingValue))),\n                            ] }))),\n                dataListItems.map(item => item))));\n    }\n}\nconst TagContent = injectIntl(connect()(TagContentBase));\nexport { TagContent };\n","import { Modal } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { TagContent } from './tagContent';\nconst tagReportType = \"tag\" /* tag */;\nclass TagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTagValueCount = () => {\n            const { tagReport } = this.props;\n            let count = 0;\n            if (tagReport) {\n                for (const item of tagReport.data) {\n                    if (item.values) {\n                        count += item.values.length;\n                    }\n                }\n            }\n            return count;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, query, tagReport, intl } = this.props;\n        // Match page header description\n        const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n        return (React.createElement(Modal, { isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.TagHeadingTitle, { value: this.getTagValueCount() }), width: '50%' },\n            React.createElement(TagContent, { groupBy: groupBy, groupByValue: groupByValue, tagReport: tagReport })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagModal = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagModalBase));\nexport { TagModal };\n","import { TagIcon } from '@patternfly/react-icons/dist/esm/icons/tag-icon';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './tag.styles';\nimport { TagModal } from './tagModal';\nconst tagReportType = \"tag\" /* tag */;\nclass TagLinkBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, queryString, tagReportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n    }\n    render() {\n        const { id, tagReport, tagReportPathsType } = this.props;\n        const { isOpen } = this.state;\n        let count = 0;\n        if (tagReport) {\n            for (const item of tagReport.data) {\n                if (item.values) {\n                    count += item.values.length;\n                }\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.tagsContainer, id: id },\n            Boolean(count > 0) && (React.createElement(React.Fragment, null,\n                React.createElement(TagIcon, null),\n                React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen, style: styles.tagLink }), count))),\n            React.createElement(TagModal, { isOpen: isOpen, onClose: this.handleClose, tagReportPathsType: tagReportPathsType })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { tagReportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    // Prune unsupported tag params from filter_by\n    const filterByParams = query && query.filter_by ? query.filter_by : {};\n    for (const key of Object.keys(filterByParams)) {\n        if (key.indexOf(tagPrefix) !== -1) {\n            filterByParams[key] = undefined;\n        }\n    }\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, filterByParams), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && groupBy.indexOf(tagPrefix) === -1 && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst TagLink = injectIntl(connect(mapStateToProps, mapDispatchToProps)(TagLinkBase));\nexport { TagLink };\n","import global_BackgroundColor_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    cost: {\n        marginTop: global_spacer_xl.var,\n    },\n    costLabel: {\n        marginTop: global_spacer_xs.var,\n    },\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        textAlign: 'right',\n    },\n    costLabelDate: {\n        textAlign: 'right',\n    },\n    costType: {\n        marginTop: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_100.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tabs: {\n        display: 'flex',\n    },\n    tag: {\n        marginLeft: global_spacer_lg.var,\n    },\n    title: {\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_xs.var,\n    },\n};\n","import './breakdownHeader.scss';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { AngleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport { breakdownDescKey, breakdownTitleKey, getQueryRoute, orgUnitIdKey } from 'api/queries/query';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport { Currency } from 'pages/components/currency';\nimport { CostType } from 'pages/views/components/costType';\nimport { TagLink } from 'pages/views/details/components/tag/tagLink';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './breakdownHeader.styles';\nclass BreakdownHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.buildDetailsLink = () => {\n            const { detailsURL, groupBy, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Retrieve org unit used by the details page\n            if (query[orgUnitIdKey]) {\n                groupByKey = orgUnitIdKey;\n                value = query[orgUnitIdKey];\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {\n                    [groupByKey]: value,\n                } });\n            // Don't want these params when returning to the details page\n            if (newQuery.filter) {\n                newQuery.filter.account = undefined;\n                newQuery[breakdownDescKey] = undefined;\n                newQuery[orgUnitIdKey] = undefined;\n                newQuery[breakdownTitleKey] = undefined;\n            }\n            return `${detailsURL}?${getQueryRoute(newQuery)}`;\n        };\n        this.getTotalCost = () => {\n            const { report } = this.props;\n            const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n            const cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            return cost;\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { onCostTypeSelected } = this.props;\n            if (onCostTypeSelected) {\n                onCostTypeSelected(value);\n            }\n        };\n    }\n    render() {\n        const { description, groupBy, query, intl, showCostType = false, tabs, tagReportPathsType, title } = this.props;\n        const filterByAccount = query && query.filter ? query.filter.account : undefined;\n        const groupByOrg = getGroupByOrgValue(query);\n        const groupByTag = getGroupByTagKey(query);\n        const showTags = filterByAccount ||\n            groupBy === 'account' ||\n            groupBy === 'project' ||\n            groupBy === 'gcp_project' ||\n            groupBy === 'subscription_guid';\n        // i18n groupBy key\n        const groupByKey = filterByAccount ? 'account' : groupByTag ? 'tag' : groupByOrg ? orgUnitIdKey : groupBy;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"nav\", { \"aria-label\": intl.formatMessage(messages.BreakdownBackToDetailsAriaLabel), className: \"breadcrumbOverride\" },\n                    React.createElement(\"ol\", { className: \"pf-c-breadcrumb__list\" },\n                        React.createElement(\"li\", { className: \"pf-c-breadcrumb__item\" },\n                            React.createElement(\"span\", { className: \"pf-c-breadcrumb__item-divider\" },\n                                React.createElement(AngleLeftIcon, null)),\n                            React.createElement(Link, { to: this.buildDetailsLink() }, intl.formatMessage(messages.BreakdownBackToDetails, {\n                                value: intl.formatMessage(messages.BreakdownBackToTitles, { value: tagReportPathsType }),\n                                groupBy: groupByKey,\n                            }))))),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isBetaFeature() && React.createElement(Currency, null),\n                    isBetaFeature() && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.title },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        intl.formatMessage(messages.BreakdownTitle, { value: title }),\n                        description && React.createElement(\"div\", { style: styles.infoDescription }, description)),\n                    showCostType && (React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: this.handleCostTypeSelected })))),\n                React.createElement(\"div\", { style: styles.cost },\n                    React.createElement(\"div\", { style: styles.costLabel },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] },\n                            React.createElement(\"span\", null, this.getTotalCost()))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getForDateRangeString(intl.formatMessage(messages.GroupByValuesTitleCase, { value: groupByKey, count: 2 }), messages.BreakdownTotalCostDate, 0)))),\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.tabs },\n                    tabs,\n                    React.createElement(\"div\", { style: styles.tag }, Boolean(showTags) && React.createElement(TagLink, { id: \"tags\", tagReportPathsType: tagReportPathsType }))))));\n    }\n}\nconst BreakdownHeader = injectIntl(BreakdownHeaderBase);\nexport { BreakdownHeader };\n","import { Tab, TabContent, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQueryRoute } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './breakdown.styles';\nimport { BreakdownHeader } from './breakdownHeader';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"cost-overview\" /* costOverview */:\n            return 'cost-overview';\n        case \"historical-data\" /* historicalData */:\n            return 'historical-data';\n    }\n};\nclass BreakdownBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [\n                {\n                    contentRef: React.createRef(),\n                    tab: \"cost-overview\" /* costOverview */,\n                },\n                {\n                    contentRef: React.createRef(),\n                    tab: \"historical-data\" /* historicalData */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getRouteForQuery = (query) => {\n            const { history } = this.props;\n            return `${history.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { costOverviewComponent, historicalDataComponent } = this.props;\n            const { activeTabKey } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"cost-overview\" /* costOverview */) {\n                return costOverviewComponent;\n            }\n            else if (currentTab === \"historical-data\" /* historicalData */) {\n                return historicalDataComponent;\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"cost-overview\" /* costOverview */) {\n                return intl.formatMessage(messages.BreakdownCostOverviewTitle);\n            }\n            else if (tab === \"historical-data\" /* historicalData */) {\n                return intl.formatMessage(messages.BreakdownHistoricalDataTitle);\n            }\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Need param to restore cost type upon page refresh\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(this.getRouteForQuery(newQuery));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.updateReport = () => {\n            const { location, fetchReport, queryString, reportPathsType, reportType } = this.props;\n            if (location.search) {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { location, report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        if (newQuery || noReport || noLocation) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { description, detailsURL, emptyStateTitle, groupBy, providers, providersFetchStatus, providerType, query, report, reportError, reportFetchStatus, showCostType, tagReportPathsType, title, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: emptyStateTitle });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: providerType, title: emptyStateTitle });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(BreakdownHeader, { description: description, detailsURL: detailsURL, groupBy: groupBy, onCostTypeSelected: this.handleCostTypeSelected, query: query, report: report, showCostType: showCostType, tabs: this.getTabs(availableTabs), tagReportPathsType: tagReportPathsType, title: title }),\n            React.createElement(\"div\", { style: styles.content }, this.getTabContent(availableTabs))));\n    }\n}\nexport default injectIntl(BreakdownBase);\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    clustersContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nclass ClusterContentBase extends React.Component {\n    render() {\n        const { item } = this.props;\n        if (!item.clusters) {\n            return null;\n        }\n        return item.clusters.map((cluster, index) => React.createElement(\"div\", { key: `cluster-${index}` }, cluster));\n    }\n}\nconst ClusterContent = injectIntl(ClusterContentBase);\nexport { ClusterContent, ClusterContentBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nexport const styles = {\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n};\n","import './clusterModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { ClusterContent } from './clusterContent';\nimport { styles } from './clusterModal.styles';\nclass ClusterModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, intl } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", style: styles.modal, isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.DetailsClustersModalTitle, { groupBy, name: item.label }), width: '50%' },\n            React.createElement(ClusterContent, { item: item })));\n    }\n}\nconst ClusterModal = injectIntl(ClusterModalBase);\nexport { ClusterModal };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getTestProps, testIds } from 'testIds';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './cluster.styles';\nimport { ClusterModal } from './clusterModal';\nclass ClusterBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    render() {\n        const { groupBy, report, intl } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someClusters = [];\n        const allClusters = [];\n        const computedItems = getComputedReportItems({\n            report,\n            idKey: groupBy,\n        });\n        const item = computedItems && computedItems.length ? computedItems[0] : undefined;\n        if (!item) {\n            return null;\n        }\n        for (const cluster of item.clusters) {\n            const prefix = someClusters.length > 0 ? ', ' : '';\n            const clusterString = `${prefix}${cluster}`;\n            if (showAll) {\n                someClusters.push(clusterString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + clusterString.length > maxChars) {\n                    someClusters.push(clusterString\n                        .slice(0, maxChars - charCount)\n                        .trim()\n                        .concat('...'));\n                }\n                else {\n                    someClusters.push(clusterString);\n                }\n            }\n            charCount += clusterString.length;\n            allClusters.push(cluster);\n        }\n        return (React.createElement(\"div\", { style: styles.clustersContainer },\n            Boolean(someClusters) && someClusters.map((cluster, index) => React.createElement(\"span\", { key: index }, cluster)),\n            Boolean(someClusters.length < allClusters.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.cluster_lnk), { href: \"#/\", onClick: this.handleOpen }), intl.formatMessage(messages.DetailsMoreClusters, { value: allClusters.length - someClusters.length }))),\n            React.createElement(ClusterModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst Cluster = injectIntl(ClusterBase);\nexport { Cluster };\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const chartStyles = {\n    chartHeight: 150,\n    chartWidth: 400,\n    subTitle: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n};\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChartLabel, ChartLegend, ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { Skeleton } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrency } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Override legend layout\n        this.getLegendLabel = () => {\n            return (_a) => {\n                var { values } = _a, props = __rest(_a, [\"values\"]);\n                return (React.createElement(ChartLabel, Object.assign({}, props, { style: [{ fontWeight: chartStyles.subTitle.fontWeight }, {}], text: [values[props.index], props.text] })));\n            };\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md })));\n        };\n    }\n    render() {\n        const { report, reportFetchStatus, intl } = this.props;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost;\n        const hasMarkup = hasCost && report.meta.total.cost.markup;\n        const hasRaw = hasCost && report.meta.total.cost.raw;\n        const hasUsage = hasCost && report.meta.total.cost.usage;\n        const markupUnits = hasMarkup ? report.meta.total.cost.markup.units : 'USD';\n        const rawUnits = hasRaw ? report.meta.total.cost.raw.units : 'USD';\n        const usageUnits = hasUsage ? report.meta.total.cost.usage.units : 'USD';\n        const markupValue = hasMarkup ? report.meta.total.cost.markup.value : 0;\n        const rawValue = hasRaw ? report.meta.total.cost.raw.value : 0;\n        const usageValue = hasUsage ? report.meta.total.cost.usage.value : 0;\n        const markup = formatCurrency(hasMarkup ? report.meta.total.cost.markup.value : 0, markupUnits);\n        const raw = formatCurrency(hasRaw ? report.meta.total.cost.raw.value : 0, rawUnits);\n        const usage = formatCurrency(hasUsage ? report.meta.total.cost.usage.value : 0, usageUnits);\n        const markupLabel = intl.formatMessage(messages.MarkupTitle);\n        const rawLabel = intl.formatMessage(messages.RawCostTitle);\n        const usageLabel = intl.formatMessage(messages.UsageCostTitle);\n        // Override legend label layout\n        const LegendLabel = this.getLegendLabel();\n        const Legend = (React.createElement(ChartLegend, { gutter: 25, itemsPerRow: 2, labelComponent: React.createElement(LegendLabel, { dy: 10, lineHeight: 1.5, values: [raw, markup, usage] }), rowGutter: 20 }));\n        return (React.createElement(\"div\", { style: { height: chartStyles.chartHeight, width: chartStyles.chartWidth } }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartPie, { ariaDesc: intl.formatMessage(messages.BreakdownCostChartAriaDesc), ariaTitle: intl.formatMessage(messages.BreakdownCostBreakdownTitle), constrainToVisibleArea: true, data: [\n                { x: rawLabel, y: rawValue, units: rawUnits },\n                { x: markupLabel, y: markupValue, units: markupUnits },\n                { x: usageLabel, y: usageValue, units: usageUnits },\n            ], height: chartStyles.chartHeight, labels: ({ datum }) => intl.formatMessage(messages.BreakdownCostChartTooltip, {\n                name: datum.x,\n                value: formatCurrency(datum.y, datum.units),\n            }), legendComponent: Legend, legendData: [\n                {\n                    name: rawLabel,\n                },\n                {\n                    name: markupLabel,\n                },\n                {\n                    name: usageLabel,\n                },\n            ], legendOrientation: \"vertical\", legendPosition: \"right\", padding: {\n                bottom: 20,\n                left: 0,\n                right: 275,\n                top: 20,\n            }, themeColor: ChartThemeColor.green, width: chartStyles.chartWidth }))));\n    }\n}\nconst CostChart = injectIntl(CostChartBase);\nexport { CostChart };\n","import global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const styles = {\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { ReportSummaryItem, ReportSummaryItems } from 'pages/views/components/reports/reportSummary';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './summaryModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass SummaryModalContentBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString, reportPathsType } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    render() {\n        const { intl, report, reportGroupBy, reportFetchStatus } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const cost = formatCurrency(hasTotal ? report.meta.total.cost.total.value : 0, hasTotal ? report.meta.total.cost.total.units : 'USD');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.subTitle },\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.xl }, intl.formatMessage(messages.DetailsCostValue, { value: cost }))),\n            React.createElement(\"div\", { style: styles.mainContent },\n                React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(ReportSummaryItem, { key: _item.id, formatOptions: {}, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: _item.cost.total.value })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportGroupBy, reportPathsType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryModalContent = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryModalContentBase));\nexport { SummaryModalContent };\n","import './summaryModal.scss';\nimport { Modal } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { SummaryModalContent } from './summaryModalContent';\nclass SummaryModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { groupByValue, isOpen } = this.props;\n        return nextProps.groupByValue !== groupByValue || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupByValue, intl, isOpen, reportGroupBy, reportPathsType } = this.props;\n        return (React.createElement(Modal, { className: \"modalOverride\", isOpen: isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.DetailsSummaryModalTitle, {\n                groupBy: reportGroupBy,\n                name: groupByValue,\n            }), variant: \"large\" },\n            React.createElement(SummaryModalContent, { reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n    }\n}\nconst SummaryModal = injectIntl(SummaryModalBase);\nexport { SummaryModal };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    card: {},\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-15px',\n    },\n};\n","import { Button, ButtonType, ButtonVariant, Card, CardBody, CardFooter, CardTitle, Skeleton, Title, TitleSizes, } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { ReportSummaryItem, ReportSummaryItems } from 'pages/views/components/reports/reportSummary';\nimport { SummaryModal } from 'pages/views/details/components/summary/summaryModal';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getTestProps, testIds } from 'testIds';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './summaryCard.styles';\nclass SummaryBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isBulletChartModalOpen: false,\n        };\n        this.getItems = () => {\n            const { report, reportGroupBy } = this.props;\n            const computedItems = getComputedReportItems({\n                report,\n                idKey: reportGroupBy,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportGroupBy, reportFetchStatus } = this.props;\n            return (React.createElement(ReportSummaryItems, { idKey: reportGroupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(ReportSummaryItem, { formatOptions: {}, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : undefined, totalValue: report.meta.total.cost.total.value, units: report.meta.total.cost.total.units, value: reportItem.cost.total.value })))));\n        };\n        this.getViewAll = () => {\n            const { groupBy, query, reportGroupBy, reportPathsType, intl } = this.props;\n            const { isBulletChartModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id === 'Other' || id === 'Others';\n                }\n            });\n            if (otherIndex !== -1) {\n                // Match page header description\n                const groupByValue = query && query.filter && query.filter.account ? query.filter.account : this.props.groupByValue;\n                return (React.createElement(\"div\", { style: styles.viewAllContainer },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleBulletChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), intl.formatMessage(messages.DetailsViewAll, { value: reportGroupBy })),\n                    React.createElement(SummaryModal, { groupBy: groupBy, groupByValue: groupByValue, isOpen: isBulletChartModalOpen, onClose: this.handleBulletChartModalClose, query: query, reportGroupBy: reportGroupBy, reportPathsType: reportPathsType })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleBulletChartModalClose = (isOpen) => {\n            this.setState({ isBulletChartModalOpen: isOpen });\n        };\n        this.handleBulletChartModalOpen = event => {\n            this.setState({ isBulletChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, fetchReport, queryString, reportPathsType, reportType } = this.props;\n        if (prevProps.queryString !== queryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    render() {\n        const { reportGroupBy, reportFetchStatus, intl } = this.props;\n        return (React.createElement(Card, { style: styles.card },\n            React.createElement(CardTitle, null,\n                React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.BreakdownSummaryTitle, { value: reportGroupBy }))),\n            React.createElement(CardBody, null, reportFetchStatus === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.skeleton, width: skeletonWidth.md }))) : (this.getSummary())),\n            React.createElement(CardFooter, null, this.getViewAll())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, reportGroupBy, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        cost_type: costType,\n        filter: {\n            limit: 3,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupBy && { [groupBy]: groupByValue })),\n        group_by: Object.assign({}, (reportGroupBy && { [reportGroupBy]: '*' })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        groupBy,\n        groupByValue,\n        query,\n        queryString,\n        report,\n        reportFetchStatus,\n        reportPathsType,\n        reportType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst SummaryCard = injectIntl(connect(mapStateToProps, mapDispatchToProps)(SummaryBase));\nexport { SummaryCard };\n","import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    capacity: {\n        fontWeight: global_FontWeight_bold.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { ChartBullet } from '@patternfly/react-charts';\nimport { Grid, GridItem, Skeleton } from '@patternfly/react-core';\nimport { parseQuery } from 'api/queries/ocpQuery';\nimport { getQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { getResizeObserver } from 'pages/views/components/charts/common/chartUtils';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatPercentage, formatUnits, unitsLookupKey } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { styles } from './usageChart.styles';\nclass UsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n        this.getChart = () => {\n            const { groupBy, reportFetchStatus, report } = this.props;\n            const { width } = this.state;\n            const chartDatum = groupBy === 'cluster' ? this.getChartDatumWithCapacity() : this.getChartDatum();\n            if (!report || chartDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", { className: \"chartOverride\" }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                Boolean(groupBy === 'cluster') && this.getFreeSpace(),\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: chartDatum.limit.value\n                        ? [\n                            {\n                                tooltip: chartDatum.limit.tooltip,\n                                y: chartDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: chartDatum.limit.value ? [{ name: chartDatum.limit.legend }] : [], height: this.getChartHeight(), labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(chartDatum) ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 0,\n                    }, primarySegmentedMeasureData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: chartDatum.usage.length\n                        ? chartDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: chartDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: chartDatum.ranges[0].tooltip,\n                                y: chartDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: chartDatum.ranges.length ? [{ name: chartDatum.ranges[0].legend }] : [], width: width })))));\n        };\n        this.getChartHeight = () => {\n            const { groupBy } = this.props;\n            const { width } = this.state;\n            if (groupBy === 'cluster') {\n                return width > 950 ? 115 : width > 450 ? 150 : 210;\n            }\n            else {\n                return width > 700 ? 115 : width > 450 ? 150 : 180;\n            }\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 950 ? 4 : width > 700 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, queryString);\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString, reportPathsType, reportType } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(reportPathsType, reportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getChartDatum() {\n        const { report, intl } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        datum.ranges = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n        ];\n        return datum;\n    }\n    getChartDatumWithCapacity() {\n        const { report, intl } = this.props;\n        const datum = {\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasLimit ? report.meta.total.limit.units : undefined),\n        });\n        datum.limit = {\n            legend: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: intl.formatMessage(messages.DetailsUsageLimit, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasCapacity = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const capacityUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasCapacity ? report.meta.total.capacity.units : undefined),\n        });\n        datum.ranges = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageCapacity, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageCapacity, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                value: Math.trunc(capacity),\n            },\n        ];\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        datum.usage = [\n            {\n                legend: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageUsage, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: intl.formatMessage(messages.DetailsUsageRequests, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace() {\n        const { report, intl } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasRequest = hasTotal && report.meta.total.request && report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasRequest ? report.meta.total.request.units : undefined),\n        });\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = intl.formatMessage(messages.Units, {\n            units: unitsLookupKey(hasUsage ? report.meta.total.usage.units : undefined),\n        });\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedUsageLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedUsageCapacity, usageUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedUnits, {\n                    percentage: formatPercentage(unusedUsageCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: usageUnits,\n                }))),\n            React.createElement(GridItem, { md: 12, lg: 6 },\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedRequestsLabel)),\n                React.createElement(\"div\", { style: styles.capacity }, formatUnits(unusedRequestCapacity, requestUnits)),\n                React.createElement(\"div\", null, intl.formatMessage(messages.DetailsUnusedUnits, {\n                    percentage: formatPercentage(unusedRequestCapacityPercentage, {\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    }),\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef }, this.getChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        groupBy,\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst UsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(UsageChartBase));\nexport { UsageChart };\n","import { Button, ButtonVariant, Card, CardBody, CardTitle, Grid, GridItem, Popover, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { Cluster } from 'pages/views/details/components/cluster/cluster';\nimport { CostChart } from 'pages/views/details/components/costChart/costChart';\nimport { SummaryCard } from 'pages/views/details/components/summary/summaryCard';\nimport { UsageChart } from 'pages/views/details/components/usageChart/usageChart';\nimport { styles } from 'pages/views/details/ocpDetails/detailsHeader.styles';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nconst PLACEHOLDER = 'placeholder';\nclass CostOverviewsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cluster chart\n        this.getClusterChart = (widget) => {\n            const { groupBy, report, intl } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.cluster.showWidgetOnGroupBy) {\n                if (groupById === groupBy || (groupById === tagPrefix && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(Card, null,\n                    React.createElement(CardTitle, null,\n                        React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.Clusters))),\n                    React.createElement(CardBody, null,\n                        React.createElement(Cluster, { groupBy: widget.cluster.reportGroupBy, report: report }))));\n            }\n            return null;\n        };\n        // Returns cost breakdown chart\n        this.getCostChart = () => {\n            const { report, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg },\n                        intl.formatMessage(messages.BreakdownCostBreakdownTitle),\n                        React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.BreakdownCostBreakdownAriaLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.RawCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.RawCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.UsageCostTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.UsageCostDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.MarkupTitle)),\n                                React.createElement(\"p\", null, intl.formatMessage(messages.MarkupDescription)),\n                                React.createElement(\"br\", null),\n                                React.createElement(\"a\", { href: intl.formatMessage(messages.DocsCostModelTerminology), rel: \"noreferrer\", target: \"_blank\" }, intl.formatMessage(messages.LearnMore))) },\n                            React.createElement(Button, { variant: ButtonVariant.plain },\n                                React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                React.createElement(CardBody, null,\n                    React.createElement(CostChart, { report: report }))));\n        };\n        // Returns CPU usage chart\n        this.getCpuUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.CpuTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns memory usage chart\n        this.getMemoryUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.MemoryTitle))),\n                React.createElement(CardBody, null,\n                    React.createElement(UsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns summary card widget\n        this.getSummaryCard = (widget) => {\n            const { costType, groupBy, query } = this.props;\n            let showWidget = false;\n            for (const groupById of widget.reportSummary.showWidgetOnGroupBy) {\n                if (groupById === groupBy ||\n                    (query && query.group_by && query.group_by[orgUnitIdKey]) ||\n                    (groupById === tagPrefix && groupBy && groupBy.indexOf(tagPrefix) !== -1)) {\n                    showWidget = true;\n                    break;\n                }\n            }\n            if (showWidget) {\n                return (React.createElement(SummaryCard, { costType: costType, reportGroupBy: widget.reportSummary.reportGroupBy, reportPathsType: widget.reportPathsType, reportType: widget.reportType }));\n            }\n            else if (widget.reportSummary.usePlaceholder) {\n                return PLACEHOLDER;\n            }\n            return null;\n        };\n        // Helper to fill grid columns instead of rows, based on the order defined by the reducer\n        this.getWidgetsColumns = () => {\n            const { selectWidgets, widgets } = this.props;\n            const visibleWidgets = [];\n            widgets.map(widgetId => {\n                const widget = selectWidgets[widgetId];\n                const renderedWidget = this.renderWidget(widget);\n                if (renderedWidget !== null) {\n                    visibleWidgets.push(renderedWidget);\n                }\n            });\n            const rows = Math.floor(visibleWidgets.length / 2) + (visibleWidgets.length % 2);\n            const leftColumnWidgets = [];\n            const rightColumnWidgets = [];\n            for (let i = 0; i < rows; i++) {\n                if (visibleWidgets[i] !== PLACEHOLDER) {\n                    leftColumnWidgets.push(visibleWidgets[i]);\n                }\n                if (i + rows < visibleWidgets.length) {\n                    if (visibleWidgets[i + rows] !== PLACEHOLDER) {\n                        rightColumnWidgets.push(visibleWidgets[i + rows]);\n                    }\n                }\n            }\n            return { leftColumnWidgets, rightColumnWidgets };\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case \"cluster\" /* cluster */:\n                return this.getClusterChart(widget);\n            case \"cost\" /* cost */:\n                return this.getCostChart();\n            case \"cpuUsage\" /* cpuUsage */:\n                return this.getCpuUsageChart(widget);\n            case \"memoryUsage\" /* memoryUsage */:\n                return this.getMemoryUsageChart(widget);\n            case \"summary\" /* reportSummary */:\n                return this.getSummaryCard(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        // Sort widgets vertically\n        const { leftColumnWidgets, rightColumnWidgets } = this.getWidgetsColumns();\n        return (React.createElement(Grid, { hasGutter: true },\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, leftColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                }))),\n            React.createElement(GridItem, { lg: 12, xl: 6 },\n                React.createElement(Grid, { hasGutter: true }, rightColumnWidgets.map((widget, index) => {\n                    return React.createElement(GridItem, { key: `widget-${index}` }, widget);\n                })))));\n    }\n}\nconst CostOverviewBase = injectIntl(CostOverviewsBase);\nexport { CostOverviewBase };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentCostData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport { default as ChartTheme } from 'pages/views/components/charts/chartTheme';\nimport { getCostRangeString } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getDateRange } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'pages/views/components/charts/common/chartUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData } = this.props;\n            const costKey = messages.ChartCostLegendLabel;\n            const costInfrastructureKey = messages.ChartCostInfrastructureLegendLabel;\n            const costInfrastructureTooltipKey = messages.ChartCostInfrastructureLegendTooltip;\n            const costTooltipKey = messages.ChartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1, messages.ChartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false, 0, messages.ChartCostLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousInfrastructureCost',\n                    data: previousInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1, messages.ChartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(previousInfrastructureCostData, costInfrastructureTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousInfrastructureCostData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentInfrastructureCost',\n                    data: currentInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false, 0, messages.ChartCostInfrastructureLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(currentInfrastructureCostData, costInfrastructureTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentInfrastructureCostData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 700 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0 ? Math.max(currentRequestDate, previousRequestDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, intl, containerHeight = height, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 700\n                ? containerHeight - 25\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalCostChart = injectIntl(HistoricalCostChartBase);\nexport { HistoricalCostChart };\n","import global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { transformReport } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { HistoricalCostChart } from 'pages/views/components/charts/historicalCostChart';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataCostChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentData = transformReport(currentReport, 0 /* rolling */, 'date', 'cost');\n        const currentInfrastructureCostData = transformReport(currentReport, 0 /* rolling */, 'date', 'infrastructure');\n        // Previous data\n        const previousData = transformReport(previousReport, 0 /* rolling */, 'date', 'cost');\n        const previousInfrastructureCostData = transformReport(previousReport, 0 /* rolling */, 'date', 'infrastructure');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const test = intl.formatMessage(messages.CurrencyUnits, { units: costUnits });\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.costChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight - 25, currentCostData: currentData, currentInfrastructureCostData: currentInfrastructureCostData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, previousCostData: previousData, previousInfrastructureCostData: previousInfrastructureCostData, xAxisLabel: intl.formatMessage(messages.HistoricalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.HistoricalChartCostLabel, {\n                    units: test,\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const baseQuery = {\n        cost_type: costType,\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataCostChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataCostChartBase));\nexport { HistoricalDataCostChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport { default as ChartTheme } from 'pages/views/components/charts/chartTheme';\nimport { getCostRangeString, getDateRange } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'pages/views/components/charts/common/chartUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false } = this.props;\n            const key = showUsageLegendLabel ? messages.ChartUsageLegendLabel : messages.ChartCostLegendLabel;\n            const toolTipKey = showUsageLegendLabel ? messages.ChartUsageLegendTooltip : messages.ChartCostLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousData, toolTipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false, 0, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentData, toolTipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 120,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: legendItemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData || prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, previousDate) : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { height, intl, containerHeight = height, padding = {\n            bottom: 120,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: containerHeight }) },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalTrendChart = injectIntl(HistoricalTrendChartBase);\nexport { HistoricalTrendChart };\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { transformReport } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { HistoricalTrendChart } from 'pages/views/components/charts/historicalTrendChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataTrendChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, costType, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString || prevProps.costType !== costType) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, reportType, intl } = this.props;\n        const isCostChart = reportType === \"cost\" /* cost */;\n        // Current data\n        const currentData = transformReport(currentReport, isCostChart ? 0 /* rolling */ : 1 /* daily */, 'date', isCostChart ? 'cost' : 'usage');\n        const previousData = transformReport(previousReport, isCostChart ? 0 /* rolling */ : 1 /* daily */, 'date', isCostChart ? 'cost' : 'usage');\n        const costUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.cost\n            ? currentReport.meta.total.cost.total.units\n            : 'USD';\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : undefined;\n        let yAxisLabel;\n        if (isCostChart) {\n            const units = intl.formatMessage(messages.CurrencyUnits, { units: costUnits });\n            yAxisLabel = intl.formatMessage(messages.HistoricalChartCostLabel, { units });\n        }\n        else if (usageUnits && Number.isNaN(Number(currentReport.meta.total.usage.units))) {\n            yAxisLabel = intl.formatMessage(messages.Units, { units: unitsLookupKey(usageUnits) });\n        }\n        else {\n            const units = intl.formatMessage(messages.HistoricalChartUsageLabel, { value: reportType });\n            yAxisLabel = intl.formatMessage(messages.Units, { units: unitsLookupKey(units) });\n        }\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.trendChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight - 50, currentData: currentData, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, previousData: previousData, units: isCostChart ? costUnits : usageUnits, xAxisLabel: intl.formatMessage(messages.HistoricalChartDayOfMonthLabel), yAxisLabel: yAxisLabel })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { costType, reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const baseQuery = {\n        cost_type: costType,\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataTrendChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataTrendChartBase));\nexport { HistoricalDataTrendChart };\n","import { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport { global_spacer_lg } from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport { global_spacer_sm } from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    currentCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        fill: 'none',\n    },\n    currentRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    currentUsageData: {\n        fill: 'none',\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        fill: 'none',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        fill: 'none',\n    },\n    previousRequestData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    previousUsageData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = {\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n};\n","import 'pages/views/components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { Title, TitleSizes } from '@patternfly/react-core';\nimport { getDate } from 'date-fns';\nimport messages from 'locales/messages';\nimport { default as ChartTheme } from 'pages/views/components/charts/chartTheme';\nimport { getDateRange } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getUsageRangeString } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { getChartNames, getDomain, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isSeriesHidden, } from 'pages/views/components/charts/common/chartUtils';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { noop } from 'utils/noop';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = messages.ChartLimitLegendLabel;\n            const limitTooltipKey = messages.ChartLimitLegendTooltip;\n            const requestKey = messages.ChartRequestsLegendLabel;\n            const requestTooltipKey = messages.ChartRequestsLegendTooltip;\n            const usageKey = messages.ChartUsageLegendLabel;\n            const usageTooltipKey = messages.ChartUsageLegendTooltip;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousUsageData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false, 0, messages.ChartUsageLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentUsageData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1, messages.ChartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousRequestData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false, 0, messages.ChartRequestsLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentRequestData), { stroke: chartStyles.currentColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'previousLimit',\n                    data: previousLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(previousLimitData, limitKey, true, true, 1, messages.ChartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousLimitData, limitTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousLimitData), { stroke: chartStyles.previousColorScale[2] }),\n                    },\n                },\n                {\n                    childName: 'currentLimit',\n                    data: currentLimitData,\n                    legendItem: {\n                        name: getUsageRangeString(currentLimitData, limitKey, true, false, 0, messages.ChartLimitLegendNoDataLabel),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[2],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentLimitData, limitTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentLimitData), { stroke: chartStyles.currentColorScale[2] }),\n                    },\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 130,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { hiddenSeries, series, width } = this.state;\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 900 ? chartStyles.itemsPerRow : 2;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    render() {\n        const { adjustContainerHeight, height, intl, containerHeight = height, padding = {\n            bottom: 130,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        const domain = getDomain(series, hiddenSeries);\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 900\n                ? containerHeight - 50\n                : containerHeight\n            : containerHeight;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef },\n            React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: TitleSizes.xl }, title),\n            React.createElement(\"div\", { style: Object.assign(Object.assign({}, styles.chart), { height: adjustedContainerHeight }) },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis }))))));\n    }\n}\nconst HistoricalUsageChart = injectIntl(HistoricalUsageChartBase);\nexport { HistoricalUsageChart };\n","import { Skeleton } from '@patternfly/react-core';\nimport { getQuery, logicalAndPrefix, orgUnitIdKey, parseQuery } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { transformReport } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { HistoricalUsageChart } from 'pages/views/components/charts/historicalUsageChart';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { formatUnits, unitsLookupKey } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './historicalChart.styles';\nclass HistoricalDataUsageChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        fetchReport(reportPathsType, reportType, currentQueryString);\n        fetchReport(reportPathsType, reportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString, reportPathsType, reportType } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(reportPathsType, reportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(reportPathsType, reportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentReport, currentReportFetchStatus, previousReport, previousReportFetchStatus, intl } = this.props;\n        // Current data\n        const currentLimitData = transformReport(currentReport, 1 /* daily */, 'date', 'limit');\n        const currentRequestData = transformReport(currentReport, 1 /* daily */, 'date', 'request');\n        const currentUsageData = transformReport(currentReport, 1 /* daily */, 'date', 'usage');\n        // Previous data\n        const previousLimitData = transformReport(previousReport, 1 /* daily */, 'date', 'limit');\n        const previousRequestData = transformReport(previousReport, 1 /* daily */, 'date', 'request');\n        const previousUsageData = transformReport(previousReport, 1 /* daily */, 'date', 'usage');\n        const usageUnits = currentReport && currentReport.meta && currentReport.meta.total && currentReport.meta.total.usage\n            ? currentReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { style: styles.chartContainer },\n            React.createElement(\"div\", { style: styles.usageChart }, currentReportFetchStatus === 1 /* inProgress */ &&\n                previousReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentLimitData, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatter: formatUnits, formatOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousLimitData, previousRequestData: previousRequestData, previousUsageData: previousUsageData, xAxisLabel: intl.formatMessage(messages.HistoricalChartDayOfMonthLabel), yAxisLabel: intl.formatMessage(messages.Units, { units: unitsLookupKey(usageUnits) }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { reportPathsType, reportType }) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    // instance-types and storage APIs must filter org units\n    const useFilter = reportType === \"instance_type\" /* instanceType */ || reportType === \"storage\" /* storage */;\n    const baseQuery = {\n        filter_by: Object.assign(Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })), (groupBy && { [groupBy]: undefined })), (groupByOrgValue && useFilter && { [orgUnitIdKey]: groupByOrgValue })),\n        group_by: Object.assign(Object.assign({}, (groupByOrgValue && !useFilter && { [orgUnitIdKey]: groupByOrgValue })), (groupBy && !groupByOrgValue && { [groupBy]: groupByValue })),\n    };\n    const currentQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        } });\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = Object.assign(Object.assign({}, baseQuery), { filter: {\n            resolution: 'daily',\n            time_scope_units: 'month',\n            time_scope_value: -2,\n        } });\n    const previousQueryString = getQuery(previousQuery);\n    // Current report\n    const currentReport = reportSelectors.selectReport(state, reportPathsType, reportType, currentQueryString);\n    const currentReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, currentQueryString);\n    // Previous report\n    const previousReport = reportSelectors.selectReport(state, reportPathsType, reportType, previousQueryString);\n    const previousReportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, previousQueryString);\n    return {\n        currentQuery,\n        currentQueryString,\n        currentReport,\n        currentReportFetchStatus,\n        previousQuery,\n        previousQueryString,\n        previousReport,\n        previousReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst HistoricalDataUsageChart = injectIntl(connect(mapStateToProps, mapDispatchToProps)(HistoricalDataUsageChartBase));\nexport { HistoricalDataUsageChart };\n","import { Card, CardBody, CardTitle, Grid, GridItem, Title, TitleSizes } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { HistoricalDataCostChart } from './historicalDataCostChart';\nimport { HistoricalDataTrendChart } from './historicalDataTrendChart';\nimport { HistoricalDataUsageChart } from './historicalDataUsageChart';\nclass HistoricalDatasBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Returns cost chart\n        this.getCostChart = (widget) => {\n            const { costType, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.HistoricalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataCostChart, { costType: costType, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns trend chart\n        this.getTrendChart = (widget) => {\n            const { costType, intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.HistoricalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataTrendChart, { costType: costType, reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n        // Returns usage chart\n        this.getUsageChart = (widget) => {\n            const { intl } = this.props;\n            return (React.createElement(Card, null,\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: TitleSizes.lg }, intl.formatMessage(messages.HistoricalChartTitle, { value: widget.reportType }))),\n                React.createElement(CardBody, null,\n                    React.createElement(HistoricalDataUsageChart, { reportPathsType: widget.reportPathsType, reportType: widget.reportType }))));\n        };\n    }\n    // Returns rendered widget based on type\n    renderWidget(widget) {\n        switch (widget.type) {\n            case \"cost\" /* cost */:\n                return this.getCostChart(widget);\n            case \"trend\" /* trend */:\n                return this.getTrendChart(widget);\n            case \"usage\" /* usage */:\n                return this.getUsageChart(widget);\n            default:\n                return null;\n        }\n    }\n    render() {\n        const { selectWidgets, widgets } = this.props;\n        return (React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n            const widget = selectWidgets[widgetId];\n            return React.createElement(GridItem, { key: `widget-${widgetId}` }, this.renderWidget(widget));\n        })));\n    }\n}\nconst HistoricalDataBase = injectIntl(HistoricalDatasBase);\nexport { HistoricalDataBase };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    info: {\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey } from 'api/queries/query';\nexport const getBreakdownPath = ({ basePath, label, description, groupBy, query, }) => {\n    const newQuery = Object.assign(Object.assign(Object.assign({}, query), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n            [groupBy]: label,\n        } });\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\nexport const getOrgBreakdownPath = ({ basePath, description, groupBy, groupByOrg, id, orgUnitId, query, title, type, }) => {\n    const newQuery = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), (groupByOrg && orgUnitId && { [orgUnitIdKey]: orgUnitId })), { group_by: {\n            [groupBy]: id, // This may be overridden below\n        } });\n    if (!newQuery.filter) {\n        newQuery.filter = {};\n    }\n    if (type === 'account') {\n        newQuery.filter.account = id;\n        newQuery.group_by = {\n            [orgUnitIdKey]: groupByOrg,\n        };\n    }\n    else if (type === 'organizational_unit') {\n        newQuery.group_by = {\n            [orgUnitIdKey]: id,\n        };\n    }\n    return `${basePath}?${getQueryRoute(newQuery)}`;\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        cluster_lnk: 'cluster-lnk',\n        historical_data_btn: 'historical-data-btn',\n        show_more_btn: 'show-more-btn',\n        tag_lnk: 'tag-lnk',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n"],"names":["styles","alert","marginBottom","global_spacer_md","form","marginLeft","global_spacer_sm","modal","input","marginRight","global_spacer_xs","ul","title","reportType","ExportSubmitBase","constructor","stateProps","dispatchProps","super","this","defaultState","fetchReportClicked","state","Object","assign","getExport","report","reportFetchStatus","props","data","getFileName","handleClose","endDate","groupBy","intl","reportPathsType","resolution","startDate","formatMessage","messages","provider","indexOf","reportError","setState","onClose","handleFetchReport","exportReport","queryString","componentDidUpdate","prevProps","onError","render","Button","testIds","isDisabled","key","onClick","variant","ButtonVariant","mapStateToProps","isAllItems","items","query","timeScope","end_date","start_date","newQuery","JSON","parse","stringify","filter","limit","undefined","offset","time_scope_value","filter_by","order_by","perspective","dateRange","delta","keys","push","group_by","item","type","id","getQueryString","isPrevious","today","setMonth","getMonth","format","endOfMonth","startOfMonth","mapDispatchToProps","ExportSubmitConnect","connect","ExportSubmit","injectIntl","resolutionOptions","label","value","timeScopeOptions","ExportModalBase","error","handleError","handleMonthChange","_","event","currentTarget","handleResolutionChange","bind","showAggregateType","showTimeScope","sortedItems","isOpen","length","orderBy","selectedLabel","thisMonth","Date","lastMonth","currentMonth","previousMonth","Modal","style","actions","Alert","Form","FormGroup","fieldId","map","option","index","Radio","isValid","checked","name","onChange","date","groupItem","ExportModalConnect","ExportModal","groupBySelector","display","alignItems","groupBySelectorLabel","whiteSpace","GroupByOrgBase","defaultItem","options","isGroupByOpen","getCurrentGroupBy","getIdKeyForGroupBy","queryFromRoute","location","search","groupByKeys","getGroupByItems","orgReport","sortedData","sort","a","b","roots","org","level","filteredOrgs","root","find","unshift","toString","handleGroupByClear","currentItem","handleGroupBySelected","selection","onSelected","handleGroupByToggle","componentDidMount","groupByItems","Select","onClear","onToggle","onSelect","placeholderText","selections","SelectVariant","SelectOption","description","GroupByOrg","GroupByTagBase","tagReport","hasTagKeys","hasOwnProperty","keepData","_a","s","e","t","p","prototype","call","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","uniqBy","uniq","tagKey","slice","GroupByTag","groupByOrgOptions","groupByTagOptions","orgReportType","tagReportType","GroupByBase","isGroupByOrgVisible","isGroupByTagVisible","getGroupBy","selectOptions","getGroupByOptions","allOptions","count","fetchOrg","fetchTag","orgQueryString","orgReportFetchStatus","orgReportPathsType","showOrgs","showTags","tagQueryString","tagReportFetchStatus","tagReportPathsType","Title","headingLevel","size","Boolean","tagQuery","time_scope_units","key_only","GroupByConnect","GroupBy","DetailsActionsBase","isDropdownOpen","isExportModalOpen","getExportModal","handleExportModalClose","handleExportModalOpen","handleOnSelect","handleOnToggle","showPriceListOption","redirectToCostModel","history","source_uuid","DropdownItem","component","includes","Dropdown","toggle","KebabToggle","isPlain","position","dropdownItems","DetailsActionsConnect","Actions","content","paddingBottom","global_spacer_lg","paddingLeft","paddingRight","paddingTop","dataListHeading","fontWeight","global_FontWeight_bold","groupByHeading","tagLink","tagsContainer","global_spacer_3xl","marginTop","TagContentBase","arguments","getDataListItems","result","val","values","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","groupByValue","dataListItems","DataList","isCompact","TagContent","TagModalBase","getTagValueCount","shouldComponentUpdate","nextProps","account","width","groupByOrgValue","filterByParams","TagModal","TagLinkBase","handleOpen","preventDefault","href","TagLink","cost","global_spacer_xl","costLabel","costValue","textAlign","costLabelDate","costType","header","backgroundColor","global_BackgroundColor_100","headerContent","justifyContent","headerContentRight","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","tabs","tag","BreakdownHeaderBase","buildDetailsLink","detailsURL","groupByKey","getTotalCost","hasCost","meta","total","units","handleCostTypeSelected","onCostTypeSelected","showCostType","filterByAccount","groupByOrg","groupByTag","className","to","TitleSizes","BreakdownHeader","getIdKeyForTab","tab","BreakdownBase","activeTabKey","getAvailableTabs","contentRef","getRouteForQuery","pathname","getTab","Tab","eventKey","tabContentId","tabContentRef","TabTitleText","getTabTitle","getTabContent","availableTabs","TabContent","ref","getTabItem","costOverviewComponent","historicalDataComponent","emptyTab","currentTab","getTabs","Tabs","activeKey","handleTabClick","cost_type","replace","tabIndex","updateReport","fetchReport","noReport","noLocation","emptyStateTitle","providers","providersFetchStatus","providerType","clustersContainer","ClusterContentBase","clusters","cluster","ClusterContent","height","subTitle","ClusterModalBase","ClusterModal","ClusterBase","showAll","charCount","someClusters","allClusters","computedItems","getComputedReportItems","idKey","clusterString","trim","concat","Cluster","chartStyles","chartHeight","chartWidth","chartSkeleton","CostChartBase","getLegendLabel","ChartLabel","text","getSkeleton","Skeleton","skeleton","hasMarkup","markup","hasRaw","raw","hasUsage","usage","markupUnits","rawUnits","usageUnits","markupValue","rawValue","usageValue","markupLabel","rawLabel","usageLabel","LegendLabel","Legend","ChartLegend","gutter","itemsPerRow","labelComponent","dy","lineHeight","rowGutter","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","legendComponent","legendData","legendOrientation","legendPosition","padding","bottom","left","right","top","themeColor","ChartTheme","CostChart","mainContent","SummaryModalContentBase","reportGroupBy","hasTotal","status","_item","formatOptions","totalValue","SummaryModalContent","SummaryModalBase","SummaryModal","card","viewAllContainer","SummaryBase","isBulletChartModalOpen","getItems","getSummary","reportItem","getViewAll","findIndex","handleBulletChartModalOpen","ButtonType","handleBulletChartModalClose","Card","CardTitle","CardBody","CardFooter","SummaryCard","capacity","legendSkeleton","UsageChartBase","containerRef","observer","noop","handleResize","clientWidth","current","getChart","chartDatum","getChartDatumWithCapacity","getChartDatum","getFreeSpace","ChartBullet","comparativeErrorMeasureData","tooltip","comparativeErrorMeasureLegendData","legend","getChartHeight","legendItemsPerRow","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","hasRange","range","componentWillUnmount","hasLimit","Math","trunc","limitUnits","hasRequest","request","requestUnits","hasCapacity","capacityUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","Grid","hasGutter","GridItem","md","lg","percentage","minimumFractionDigits","maximumFractionDigits","UsageChart","PLACEHOLDER","CostOverviewsBase","getClusterChart","widget","showWidget","groupById","showWidgetOnGroupBy","getCostChart","Popover","enableFlip","bodyContent","rel","target","getCpuUsageChart","getMemoryUsageChart","getSummaryCard","reportSummary","usePlaceholder","getWidgetsColumns","selectWidgets","widgets","visibleWidgets","widgetId","renderedWidget","renderWidget","rows","floor","leftColumnWidgets","rightColumnWidgets","xl","CostOverviewBase","currentCapacityData","fill","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","currentInfrastructureCostData","strokeDasharray","currentCostData","previousCapacityData","previousColorScale","chart_color_blue_100","chart_color_blue_200","chart_color_blue_300","chart_color_blue_400","chart_color_blue_500","previousInfrastructureCostData","previousCostData","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","chart","HistoricalCostChartBase","hiddenSeries","Set","initDatum","costKey","costInfrastructureKey","costInfrastructureTooltipKey","costTooltipKey","series","childName","legendItem","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","ChartArea","has","interpolation","formatter","CursorVoronoiContainer","cursorDimension","mouseFollowTooltips","voronoiDimension","voronoiPadding","getLegend","handleLegendClick","getEndDate","currentRequestDate","getDate","previousRequestDate","max","getEvents","chartNames","isHidden","legendName","onLegendClick","adjustContainerHeight","containerHeight","xAxisLabel","yAxisLabel","domain","ge","midDate","adjustedContainerHeight","container","disable","ChartLegendTooltip","day","Chart","containerComponent","events","theme","ChartAxis","C","tickValues","dependentAxis","HistoricalCostChart","chartContainer","costChart","trendChart","usageChart","HistoricalDataCostChartBase","currentQueryString","previousQueryString","currentReport","currentReportFetchStatus","previousReport","previousReportFetchStatus","currentData","previousData","costUnits","test","baseQuery","currentQuery","previousQuery","HistoricalDataCostChart","currentMonthData","previousMonthData","HistoricalTrendChartBase","showUsageLegendLabel","toolTipKey","previousDate","currentDate","HistoricalTrendChart","HistoricalDataTrendChartBase","isCostChart","Number","isNaN","HistoricalDataTrendChart","currentLimitData","currentRequestData","currentUsageData","previousLimitData","previousRequestData","previousUsageData","HistoricalUsageChartBase","limitKey","limitTooltipKey","requestKey","requestTooltipKey","usageKey","usageTooltipKey","currentUsageDate","previousUsageDate","HistoricalUsageChart","HistoricalDataUsageChartBase","useFilter","HistoricalDataUsageChart","HistoricalDatasBase","getTrendChart","getUsageChart","HistoricalDataBase","costLabelUnit","dateTitle","headerContentLeft","minHeight","info","verticalAlign","infoIcon","infoTitle","getBreakdownPath","basePath","getOrgBreakdownPath","orgUnitId","getTestProps","details","cluster_lnk","historical_data_btn","show_more_btn","tag_lnk","view_all_btn","export","cancel_btn","submit_btn","login","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop"],"sourceRoot":""}