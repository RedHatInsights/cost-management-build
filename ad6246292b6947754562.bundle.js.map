{"version":3,"file":"ad6246292b6947754562.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardBase.tsx","webpack://koku-ui/./src/pages/views/overview/components/chartComparison.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidgetBase.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/overview.styles.ts","webpack://koku-ui/./src/pages/views/overview/overview.tsx","webpack://koku-ui/./src/api/queries/overviewQuery.ts","webpack://koku-ui/./src/pages/views/overview/index.ts"],"sourcesContent":["import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.Perspective)),\n            this.getSelect()));\n    }\n}\nconst Perspective = injectIntl(PerspectiveBase);\nexport { Perspective };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType })))));\n    }))));\nexport { DashboardBase };\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport { transformForecast, transformForecastCone, transformReport, } from 'pages/views/components/charts/common/chartDatumUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'pages/views/components/reports/reportSummary';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* cumulative */, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartFormatter, currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, type, 'date', 'infrastructure', computedReportItemValue);\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const forecastInfrastructureData = this.getForecastData(currentReport, trend.computedForecastInfrastructureItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, forecastInfrastructureConeData: forecastInfrastructureData.forecastConeData, forecastInfrastructureData: forecastInfrastructureData.forecastData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatCurrency, height: height, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    const units = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.units\n                        : 'USD';\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === 0 /* rolling */) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { chartFormatter, currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === \"usage\" /* usage */) {\n                return intl.formatMessage(messages.Units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.CurrencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, fetchReports, fetchForecasts, trend, widgetId } = this.props;\n        if (prevProps.costType !== costType) {\n            fetchReports(widgetId);\n            if (trend.computedForecastItem !== undefined) {\n                fetchForecasts(widgetId);\n            }\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import AwsDashboard from './awsDashboard';\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import AwsOcpDashboard from './awsOcpDashboard';\nexport default AwsOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import AzureDashboard from './azureDashboard';\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import AzureOcpDashboard from './azureOcpDashboard';\nexport default AzureOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"gcp_projects\" /* gcpProjects */:\n            return 'gcp_project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import GcpDashboard from './gcpDashboard';\nexport default GcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"gcp_projects\" /* gcpProjects */:\n            return 'gcp_project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import GcpOcpDashboard from './gcpOcpDashboard';\nexport default GcpOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import IbmDashboard from './ibmDashboard';\nexport default IbmDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","import OcpCloudDashboard from './ocpCloudDashboard';\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","import OcpDashboard from './ocpDashboard';\nexport default OcpDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport messages from 'locales/messages';\nimport { Currency } from 'pages/components/currency';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport { CostType } from 'pages/views/components/costType';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport AwsDashboard from 'pages/views/overview/awsDashboard';\nimport AwsOcpDashboard from 'pages/views/overview/awsOcpDashboard';\nimport AzureDashboard from 'pages/views/overview/azureDashboard';\nimport AzureOcpDashboard from 'pages/views/overview/azureOcpDashboard';\nimport GcpDashboard from 'pages/views/overview/gcpDashboard';\nimport GcpOcpDashboard from 'pages/views/overview/gcpOcpDashboard';\nimport IbmDashboard from 'pages/views/overview/ibmDashboard';\nimport OcpCloudDashboard from 'pages/views/overview/ocpCloudDashboard';\nimport OcpDashboard from 'pages/views/overview/ocpDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isFeatureVisible } from 'utils/feature';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable, } from 'utils/userAccess';\nimport { styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [{ label: messages.PerspectiveValues, value: 'ocp' }];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.PerspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.PerspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.PerspectiveValues, value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.PerspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.PerspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.PerspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.PerspectiveValues, value: 'ocp_cloud' }];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === \"aws\" /* aws */) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { onSelect: this.handleCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = hasOcp && !(hasAws || hasAzure || hasGcp || hasIbm || hasOcpCloud);\n            const showInfrastructureOnly = !hasOcp && (hasAws || hasAzure || hasGcp || hasIbm || hasOcpCloud);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case \"aws\" /* aws */:\n                case \"aws_ocp\" /* awsOcp */:\n                case \"azure\" /* azure */:\n                case \"azure_ocp\" /* azureOcp */:\n                case \"gcp\" /* gcp */:\n                case \"gcp_ocp\" /* gcpOcp */:\n                case \"ibm\" /* ibm */:\n                case \"ibm_ocp\" /* ibmOcp */:\n                case \"ocp_cloud\" /* ocpCloud */:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return \"ocp_cloud\" /* ocpCloud */;\n            }\n            if (this.isAwsAvailable()) {\n                return \"aws\" /* aws */;\n            }\n            if (this.isAzureAvailable()) {\n                return \"azure\" /* azure */;\n            }\n            if (this.isGcpAvailable()) {\n                return \"gcp\" /* gcp */;\n            }\n            if (this.isIbmAvailable()) {\n                return \"ibm\" /* ibm */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case \"ocp\" /* ocp */:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return \"ocp\" /* ocp */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            // Note: No need to test OCP on cloud here, since that requires at least one provider\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOcp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (this.isOcpCloudAvailable()) {\n                    options.push(...infrastructureOcpCloudOptions);\n                }\n                if (hasAws) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (this.isAwsOcpAvailable()) {\n                    options.push(...infrastructureAwsOcpOptions);\n                }\n                if (hasGcp) {\n                    options.push(...infrastructureGcpOptions);\n                }\n                if (isFeatureVisible(\"gcp_ocp\" /* gcpOcp */) && this.isGcpOcpAvailable()) {\n                    options.push(...infrastructureGcpOcpOptions);\n                }\n                if (hasIbm) {\n                    options.push(...infrastructureIbmOptions);\n                }\n                // Todo: Show in-progress features in beta environment only\n                if (isFeatureVisible(\"ibm\" /* ibm */) && this.isIbmOcpAvailable()) {\n                    options.push(...infrastructureIbmOcpOptions);\n                }\n                if (hasAzure) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (this.isAzureOcpAvailable()) {\n                    options.push(...infrastructureAzureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onSelected: this.handlePerspectiveSelected, options: options }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { history } = this.props;\n            return `${history.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, costType, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"ocp_cloud\" /* ocpCloud */) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_ocp\" /* awsOcp */) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* gcp */) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp_ocp\" /* gcpOcp */) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ibm\" /* ibm */) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_ocp\" /* azureOcp */) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === \"ocp\" /* ocp */) {\n                    return hasData ? React.createElement(OcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return intl.formatMessage(messages.Infrastructure);\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return intl.formatMessage(messages.OpenShift);\n            }\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Needed to force tab items to update\n            this.setState({ costType: value }, () => {\n                // Need param to restore cost type upon page refresh\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n                history.replace(this.getRouteForQuery(newQuery));\n            });\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { history, query } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value });\n                history.replace(this.getRouteForQuery(newQuery));\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { history, query } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    history.replace(this.getRouteForQuery(newQuery));\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, userAccessFetchStatus } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noAwsProviders = !this.isAwsAvailable() && providersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && providersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && providersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const isLoading = providersFetchStatus === 1 /* inProgress */ || userAccessFetchStatus === 1 /* inProgress */;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.OverviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.OverviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.GCP)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.GCPDesc)),\n                                    isFeatureVisible(\"ibm\" /* ibm */) && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.IBM)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.IBMDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.AWS)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.AWSDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.Azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.AzureDesc))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(\"div\", { style: styles.headerContentRight }, isFeatureVisible(\"currency\" /* currency */) && React.createElement(Currency, null))),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = queryFromRoute.perspective;\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const query = Object.assign(Object.assign(Object.assign({}, (perspective && { perspective })), { tabKey }), (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(query);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, \"aws\" /* aws */),\n        azureProviders: filterProviders(providers, \"azure\" /* azure */),\n        gcpProviders: filterProviders(providers, \"gcp\" /* gcp */),\n        ibmProviders: filterProviders(providers, \"ibm\" /* ibm */),\n        ocpProviders: filterProviders(providers, \"ocp\" /* ocp */),\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        queryString,\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OverviewBase));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import Overview from './overview';\nexport default Overview;\n"],"names":["styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelectOptions","intl","options","props","selections","map","option","push","toString","formatMessage","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","variant","SelectVariant","SelectOption","key","event","onSelected","setState","render","Title","headingLevel","size","messages","Perspective","injectIntl","DashboardBase","costType","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","default","undefined","onItemClicked","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","comparisonContainer","tabs","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showInfrastructureLabel","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getFormattedUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","chartFormatter","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","currentInfrastructureData","previousInfrastructureData","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","forecastInfrastructureData","computedForecastInfrastructureItem","ReportSummaryComponent","currentInfrastructureCostData","forecastConeData","forecastInfrastructureConeData","formatOptions","formatter","format","previousInfrastructureCostData","showForecast","currentData","previousData","showUsageLegendLabel","getUnits","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","title","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","to","getDetailsLinkTitle","count","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","tabIndex","updateTab","componentDidMount","fetchForecasts","fetchReports","componentDidUpdate","prevProps","mapStateToProps","widget","awsDashboard","queries","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsDashboardWidget","connect","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","alignSelf","flexGrow","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_lg","headerContent","justifyContent","headerContentLeft","headerContentRight","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","main","paddingBottom","paddingTop","ocpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOcpCloudAvailable","getCostType","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","handleCostTypeSelected","hasAws","hasAzure","hasGcp","hasIbm","hasOcp","hasOcpCloud","getDefaultInfrastructurePerspective","perspective","getDefaultOcpPerspective","ocpProviders","userAccess","getPerspective","isAwsOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","isAzureOcpAvailable","handlePerspectiveSelected","getRouteForQuery","query","history","location","pathname","getQueryRoute","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","newQuery","JSON","parse","stringify","cost_type","replace","tabKey","hasAwsOcp","hasAzureOcp","hasGcpOcp","hasIbmOcp","providers","providersFetchStatus","userAccessFetchStatus","noAwsProviders","noAzureProviders","noGcpProviders","noIbmProviders","noOcpProviders","noProviders","isLoading","TitleSizes","Popover","enableFlip","bodyContent","Button","ButtonVariant","queryFromRoute","parseQuery","search","Number","isNaN","queryString","getQuery","providersQueryString","providersError","userAccessQueryString","userAccessError"],"sourceRoot":""}