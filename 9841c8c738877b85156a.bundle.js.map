{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/components/commonChart/chartUtils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/sort.ts","webpack:///./src/testIds.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/victory/path-helpers.ts","webpack:///./src/components/victory/victoryPoint.tsx","webpack:///./src/components/trendChart/trendChart.styles.ts","webpack:///./src/components/trendChart/trendChart.tsx","webpack:///./src/components/tabs/tabContent.tsx","webpack:///./src/components/tabs/tabItem.styles.ts","webpack:///./src/components/tabs/tabItem.tsx","webpack:///./src/components/tabs/tabNavigation.styles.ts","webpack:///./src/components/tabs/tabNavigation.tsx","webpack:///./src/components/tabs/tabs.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/usageChart/usageChart.styles.ts","webpack:///./src/components/usageChart/usageChart.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/components/link/link.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/overview/emptyState.styles.ts","webpack:///./src/pages/overview/emptyState.tsx","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/components/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/pages/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/ocpDashboard/index.ts","webpack:///./src/pages/awsDashboard/index.ts","webpack:///./src/pages/overview/index.ts"],"names":["unitLookupKey","unit","split","toLowerCase","formatValue","value","options","lookup","fValue","formatCurrency","formatStorage","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","transformAwsReport","report","type","key","items","idKey","sortKey","sortDirection","computedItems","Object","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_6__","map","i","createDatum","total","reduce","acc","d","prevValue","length","y","transformOcpReport","reportItem","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_7__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","id","label","Number","parseFloat","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","start","end","today","Date","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getDateRangeString","current","monthName","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","startDate","endDate","i18next__WEBPACK_IMPORTED_MODULE_4__","t","date","getDateString","month","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_5__","getTooltipLabel","formatOptions","toString","day","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","direction","itemMap","visitDataPoint","dataPoint","values","capacity","charge","cluster_alias","limit","request","usage","assign","app","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","getIdKeyForGroupBy","groupBy","project","cluster","node","getValueForItem","item","sort","array","a","b","aVal","bVal","__webpack_require__","__webpack_exports__","getTestProps","data-testid","testIds","details","historical_data_btn","tag_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","providers","add_btn","bucket_input","empty_state_add_btn","name_input","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop","groups","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account_alias","group","account","instance_type","region","service","path_helpers","[object Object]","size","baseSize","lineHeight","x0","y1","distance","padding","victoryPoint_VictoryPoint","point","props","symbol","propTypes","prop_types_default","oneOfType","oneOf","func","chartStyles","axis","axisLabel","grid","stroke","ticks","tickLabels","fontSize","colorScale","esm","legend","labels","fontFamily","previousMonth","fill","currentMonth","styles","StyleSheet","create","chartContainer",":not(foo) svg","overflow","display","marginBottom","trendChart_TrendChart","react_default","Component","super","arguments","this","containerRef","createRef","state","width","initDatum","currentData","previousData","title","legendData","push","chartUtils","cost","charts","show","onClick","handleCostLegendClick","setState","newDatum","index","handleResize","clientWidth","getChart","createElement","ChartArea","getLegend","ChartLegend","containerComponent","ChartContainer","responsive","events","target","eventHandlers","mutation","gutter","height","orientation","theme","ChartTheme","light","blue","formatDatumValue","formatDatumOptions","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","result","trim","container","ChartVoronoiContainer","legendWidth","minWidth","legendContainer","getDomain","className","ref","Chart","Boolean","chart","victory_axis","dependentAxis","isLegendVisible","TabContent","content","role","tabItem","position","flexGrow","textAlign","cursor","marginTop","tabItemShrink","flexShrink","marginRight","selected","backgroundImage","tabItem_TabItem","handleClick","onSelect","isSelected","isShrink","aria-selected","tabIndex","tabNavigation_styles_styles","tabNavigation","alignItems","tabNavigation_TabNavigation","handleKeyDown","event","includes","tabs","onChange","modifier","newIndex","findIndex","onKeyDown","tab","Tabs","selectedTab","find","reportSummary","subtitle","color","var","OcpReportSummary","es","subTitle","detailsLink","children","status","Card","CardHeader","Title","CardBody","CardFooter","ocpReportSummaryDetails_styles_styles","requestedValue","marginLeft","text","paddingBottom","titleContainer","usageText","OcpReportSummaryDetails","reportType","requestLabel","requestValue","Fragment","ocpReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpReportSummaryItem","totalValue","percentVal","percentLabel","Progress","sm","defaultProps","v","ocpReportSummaryItems_OcpReportSummaryItems","nextProps","otherIndex","slice","getItems","OcpReportSummaryTrend","trendChart","currentRequestData","strokeDasharray","currentUsageData","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_styles_styles","usageChart_UsageChart","previousLegendData","dist_es","previous","handlePreviousLegendClick","currentLegendData","handleCurrentLegendClick","dataComponent","victoryPoint","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","isPreviousLegendVisible","isCurrentLegendVisible","OcpReportSummaryUsage","CastedButton","Button","link_Link","component","Link","variant","getIdKeyForTab","mapStateToProps","common","widgetId","widget","ocpDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","tabsQuery","ocpReports","selectReport","selectReportFetchStatus","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","OcpDashboardWidget","react_redux_es","getTabTitle","getDetailsLinkTitle","buildDetailsLink","ocpQuery","group_by","order_by","renderTab","tabData","topItems","currentTab","ocpReportSummary","handleTabChange","tabId","titleKey","trend","availableTabs","get_month_default","format_default","start_of_month_default","count","get_date_default","detailLabel","requestLabelKey","components_link","to","undefined","components_tabs","ocpDashboard_mapStateToProps","widgets","selectCurrentWidgets","OcpDashboard","openProvidersModal","ui","Grid","GridItem","xl","lg","card","justifyContent","cardBody","primaryAction","EmptyState","md","dollar_sign_icon","store_providers","selectProviders","results","showAWSTab","showOCPTab","providersFetchStatus","selectProvidersFetchStatus","Overview","awsDashboard","addSourceBtn","secondary","AwsReportSummary","awsReportSummaryDetails_styles_styles","reportSummaryDetails","AwsReportSummaryDetails","awsReportSummaryItem_styles_styles","AwsReportSummaryItem","awsReportSummaryItems_AwsReportSummaryItems","AwsReportSummaryTrend","awsReports","AwsDashboardWidget","awsQuery","utils_formatValue","context","labelKeyContext","trendTitle","awsDashboard_mapStateToProps","AwsDashboard","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpDashboard__WEBPACK_IMPORTED_MODULE_1__","_awsDashboard__WEBPACK_IMPORTED_MODULE_1__","_overview__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"9841c8c738877b85156a.bundle.js","sourcesContent":["export const unitLookupKey = unit => unit ? unit.split('-')[0].toLowerCase() : '';\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n            return formatStorage(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, _unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatStorage = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d.total, d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'charge') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false) {\n    const [start, end] = getDatumDateRange(datums);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, current = false) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth);\n    const monthName = format(start, 'MMM');\n    const startDate = getDate(start);\n    const endDate = getDate(end);\n    if (current) {\n        return i18next.t(`date.range_current`, {\n            date: getDateString(startDate),\n            month: startDate !== endDate ? monthName : '',\n        });\n    }\n    return i18next.t(`date.range_full`, {\n        endDate: getDateString(endDate),\n        startDate: getDateString(startDate),\n        month: startDate !== endDate ? monthName : '',\n    });\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'hrs':\n            case 'gb':\n                return i18next.t(`units.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'MMM D YYYY');\n        return `${date}: ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\nfunction getDateString(date) {\n    const day = date % 10;\n    if (day === 1) {\n        return i18next.t(`date.first`, { date });\n    }\n    else if (day === 2) {\n        return i18next.t(`date.second`, { date });\n    }\n    else if (day === 3) {\n        return i18next.t(`date.third`, { date });\n    }\n    return i18next.t(`date.tenth`, { date });\n}\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'charge', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity;\n                const charge = value.charge;\n                const id = value[idKey];\n                let label = value[labelKey];\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                const limit = value.limit;\n                const request = value.request;\n                const usage = value.usage;\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        app: value.app,\n                        capacity,\n                        charge,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        id,\n                        label,\n                        limit,\n                        request,\n                        units: value.units || usage ? 'GB' : 'USD',\n                        usage,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { capacity: itemMap[id].capacity + capacity, charge: itemMap[id].charge + charge, limit: itemMap[id].limit + limit, request: itemMap[id].request + request, usage: itemMap[id].usage + usage });\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_btn: 'tag-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import { sort } from './sort';\nconst groups = ['services', 'accounts', 'instance_types', 'regions'];\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'total', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const total = value.total;\n                const id = value[idKey];\n                let label = value[labelKey];\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        id,\n                        total,\n                        label,\n                        units: value.units,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { total: itemMap[id].total + total });\n            });\n        }\n        groups.forEach(group => {\n            if (dataPoint[group]) {\n                return dataPoint[group].forEach(visitDataPoint);\n            }\n        });\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","// import pathHelpers from 'victory-core/src/victory-primitives/path-helpers';\n// Todo: Move this functionality to PF4 react-charts package\nexport default {\n    // Todo: Our jest config fails to process the import in path-helpers\n    // ...pathHelpers,\n    dash(x, y, size) {\n        const baseSize = 1.1 * size;\n        const lineHeight = baseSize - baseSize * 0.3;\n        const x0 = x - baseSize;\n        const y1 = y + lineHeight / 2;\n        const distance = (x + baseSize - x0) * 0.3;\n        const padding = distance / 3;\n        return `M ${x0}, ${y1}\n      h${distance}\n      v-${lineHeight}\n      h-${distance}\n      z\n      M ${x0 + distance + padding}, ${y1}\n      h${distance}\n      v-${lineHeight}\n      h-${distance}\n      z\n      M ${x0 + distance * 2 + padding * 2}, ${y1}\n      h${distance}\n      v-${lineHeight}\n      h-${distance}\n      z`;\n    },\n    minus(x, y, size) {\n        const baseSize = 1.1 * size;\n        const lineHeight = baseSize - baseSize * 0.3;\n        const x0 = x - baseSize;\n        const y1 = y + lineHeight / 2;\n        const distance = x + baseSize - x0;\n        return `M ${x0}, ${y1}\n      h${distance}\n      v-${lineHeight}\n      h-${distance}\n      z`;\n    },\n};\n","import PropTypes from 'prop-types';\nimport { Point } from 'victory';\nimport pathHelpers from './path-helpers';\n// Todo: Move this functionality to PF4 react-charts package\nclass VictoryPoint extends Point {\n    getPath(props) {\n        return pathHelpers[`${props.symbol}`](props.x, props.y, props.size);\n    }\n}\nVictoryPoint.propTypes = Object.assign({}, Point.propTypes, { symbol: PropTypes.oneOfType([\n        PropTypes.oneOf([\n            // Todo: Not importing all due to jest issue\n            // 'circle',\n            // 'diamond',\n            // 'plus',\n            'minus',\n            // 'square',\n            // 'star',\n            // 'triangleDown',\n            // 'triangleUp',\n            'dash',\n        ]),\n        PropTypes.func,\n    ]) });\nexport default VictoryPoint;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_disabled_color_200, global_FontFamily_sans_serif, global_FontSize_md, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    axis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        '#A2DA9C',\n        '#88D080',\n        '#6EC664',\n        '#519149',\n        '#3C6C37',\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    legend: {\n        display: 'inline-block',\n        fontSize: global_FontSize_md.value,\n        marginBottom: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartContainer, ChartLegend, ChartTheme, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { getDateRangeString, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/commonChart/chartUtils';\nimport React from 'react';\nimport { VictoryAxis } from 'victory';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, title } = this.props;\n            const legendData = [];\n            if (previousData && previousData.length) {\n                legendData.push({\n                    name: getDateRangeString(previousData, true, true),\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (currentData && currentData.length) {\n                legendData.push({\n                    name: getDateRangeString(currentData, true, false, true),\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            const cost = {\n                charts: [\n                    {\n                        data: previousData,\n                        show: true,\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        show: true,\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.colorScale,\n                    data: legendData,\n                    onClick: this.handleCostLegendClick,\n                    title,\n                },\n            };\n            this.setState({\n                datum: {\n                    cost,\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.cost.charts.length) {\n                newDatum.cost.charts[props.index].show = !newDatum.cost.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, key: `trend-chart-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(ChartLegend, { colorScale: datum.colorScale, containerComponent: React.createElement(ChartContainer, { responsive: false }), data: datum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], gutter: 5, height: 50, orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend, theme: ChartTheme.light.blue, width: width }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    isLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.cost.legend && datum.cost.legend.data) {\n            datum.cost.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel });\n        const legendWidth = styles.legend.minWidth > width / 2\n            ? styles.legendContainer.minWidth\n            : width / 2;\n        const domain = this.getDomain();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, width: width },\n                Boolean(datum && datum.cost) &&\n                    datum.cost.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(VictoryAxis, { style: chartStyles.axis }),\n                React.createElement(VictoryAxis, { dependentAxis: true, style: chartStyles.axis })),\n            Boolean(this.isLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) },\n                Boolean(datum.cost.legend.title) && (React.createElement(\"div\", null, datum.cost.legend.title)),\n                this.getLegend(datum.cost.legend, legendWidth)))));\n    }\n}\nexport { TrendChart };\n","import React from 'react';\nexport const TabContent = ({ data }) => {\n    const content = typeof data.content === 'function' ? data.content(data) : data.content;\n    return React.createElement(\"div\", { role: \"tabpanel\" }, content);\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_md, global_primary_color_100, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabItem: {\n        position: 'relative',\n        flexGrow: 1,\n        textAlign: 'center',\n        fontSize: global_FontSize_md.value,\n        padding: global_spacer_sm.value,\n        cursor: 'pointer',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    tabItemShrink: {\n        flexGrow: '0',\n        flexShrink: '2',\n        marginRight: '20px',\n    },\n    selected: {\n        backgroundImage: `linear-gradient(to top, ${global_primary_color_100.value} 2px, transparent 2px)`,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './tabItem.styles';\nclass TabItem extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleClick = () => {\n            const { onSelect, data } = this.props;\n            onSelect(data.id);\n        };\n    }\n    render() {\n        const { data, isSelected, isShrink } = this.props;\n        return (React.createElement(\"div\", { role: \"tab\", onClick: this.handleClick, \"aria-selected\": isSelected, tabIndex: isSelected ? 0 : -1, className: css(styles.tabItem, isSelected && styles.selected, isShrink && styles.tabItemShrink) }, data.label));\n    }\n}\nexport { TabItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '../../../node_modules/@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabNavigation: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginBottom: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { TabItem } from './tabItem';\nimport { styles } from './tabNavigation.styles';\nclass TabNavigation extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleKeyDown = (event) => {\n            if (!['ArrowRight', 'ArrowLeft'].includes(event.key)) {\n                return;\n            }\n            const { selected, tabs, onChange } = this.props;\n            const modifier = event.key === 'ArrowRight' ? 1 : -1;\n            const selectedIndex = tabs.findIndex(t => t.id === selected.id);\n            const newIndex = selectedIndex + modifier;\n            if (newIndex < 0 || newIndex > tabs.length - 1) {\n                return;\n            }\n            onChange(tabs[newIndex].id);\n        };\n    }\n    render() {\n        const { isShrink, tabs, selected, onChange } = this.props;\n        return (React.createElement(\"div\", { role: \"tablist\", className: css(styles.tabNavigation), onKeyDown: this.handleKeyDown }, tabs.map(tab => (React.createElement(TabItem, { isShrink: isShrink, onSelect: onChange, key: tab.id, data: tab, isSelected: tab.id === selected.id })))));\n    }\n}\nexport { TabNavigation };\n","import React from 'react';\nimport { TabContent } from './tabContent';\nimport { TabNavigation } from './tabNavigation';\nconst Tabs = ({ isShrink, selected, tabs, onChange }) => {\n    if (tabs.length === 0) {\n        return React.createElement(\"div\", null, \"No data was found\");\n    }\n    const selectedTab = tabs.find(tab => tab.id === selected);\n    return (React.createElement(\"div\", null,\n        React.createElement(TabNavigation, { isShrink: isShrink, tabs: tabs, selected: selectedTab || tabs[0], onChange: onChange }),\n        React.createElement(TabContent, { data: selectedTab || tabs[0] })));\n};\nexport { Tabs };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ title, subTitle, detailsLink, children, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? `${t('loading')}...` : children),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    requestedValue: {\n        marginLeft: global_spacer_sm.value,\n    },\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    titleContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n    usageText: {\n        marginRight: global_spacer_sm.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetails = ({ label, formatValue, formatOptions, report, reportType = \"charge\" /* charge */, requestLabel, }) => {\n    let value = '----';\n    let requestValue = '----';\n    if (report && report.total) {\n        if (reportType === \"charge\" /* charge */) {\n            const units = report.total.units ? report.total.units : 'USD';\n            value = formatValue(report.total.charge, units, formatOptions);\n        }\n        else {\n            const units = report.total.units ? report.total.units : 'GB';\n            value = formatValue(report.total.usage, units, formatOptions);\n            requestValue = formatValue(report.total.request, units, formatOptions);\n        }\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: css(styles.titleContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                value,\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, label)))),\n        React.createElement(\"div\", { className: css(styles.titleContainer) }, Boolean(reportType !== \"charge\" /* charge */) && (React.createElement(\"div\", { className: css(styles.value, styles.requestedValue) },\n            requestValue,\n            React.createElement(\"div\", { className: css(styles.text) }, requestLabel))))));\n};\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItem = ({ label, value, totalValue, formatValue, units, formatOptions, }) => {\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = `${formatValue(value, units, formatOptions)} (${percentVal}%)`;\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItem.defaultProps = {\n    formatValue: v => v,\n};\nexport { OcpReportSummaryItem };\n","import React from 'react';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nclass OcpReportSummaryItems extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => i.id === 'Other');\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return null;\n        }\n        const items = this.getItems();\n        return React.createElement(\"ul\", null, children({ items }));\n    }\n}\nexport { OcpReportSummaryItems, };\n","import React from 'react';\nimport { TrendChart } from '../trendChart';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(TrendChart, Object.assign({ height: 75 }, props))));\nexport { OcpReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_disabled_color_100, global_disabled_color_200, global_FontFamily_sans_serif, global_FontSize_md, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    axis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: ['#A2DA9C', '#88D080', '#6EC664', '#519149', '#3C6C37'],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_100.value,\n    ],\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    legend: {\n        display: 'inline-block',\n        fontSize: global_FontSize_md.value,\n        marginBottom: global_spacer_lg.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n});\n","import { Chart, ChartArea, ChartContainer, ChartLegend, ChartTheme, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { getDateRangeString, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/commonChart/chartUtils';\nimport VictoryPoint from 'components/victory/victoryPoint';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { VictoryAxis } from 'victory';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const previousLegendData = [];\n            if (previousUsageData) {\n                previousLegendData.push({\n                    name: i18next.t(`chart.used`),\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (previousRequestData) {\n                previousLegendData.push({\n                    name: i18next.t(`chart.requested`),\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n            }\n            const previous = {\n                charts: [\n                    {\n                        data: previousUsageData,\n                        show: true,\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        show: true,\n                        style: chartStyles.previousRequestData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.previousColorScale,\n                    data: previousLegendData,\n                    onClick: this.handlePreviousLegendClick,\n                    title: getDateRangeString(previousUsageData, true, true),\n                },\n            };\n            const currentLegendData = [];\n            if (currentUsageData) {\n                currentLegendData.push({\n                    name: i18next.t(`chart.used`),\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (currentRequestData) {\n                currentLegendData.push({\n                    name: i18next.t(`chart.requested`),\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n            }\n            const current = {\n                charts: [\n                    {\n                        data: currentUsageData,\n                        show: true,\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: currentRequestData,\n                        show: true,\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.currentColorScale,\n                    data: currentLegendData,\n                    gutter: 55,\n                    onClick: this.handleCurrentLegendClick,\n                    title: getDateRangeString(currentUsageData, true, false),\n                },\n            };\n            this.setState({\n                datum: {\n                    previous,\n                    current,\n                },\n            });\n        };\n        this.handleCurrentLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.current.charts.length) {\n                newDatum.current.charts[props.index].show = !newDatum.current.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.handlePreviousLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.previous.charts.length) {\n                newDatum.previous.charts[props.index].show = !newDatum.previous.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, key: `usage-chart-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(ChartLegend, { colorScale: datum.colorScale, containerComponent: React.createElement(ChartContainer, { responsive: false }), data: datum.data, dataComponent: React.createElement(VictoryPoint, null), events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], height: 25, orientation: \"horizontal\", style: chartStyles.legend, theme: ChartTheme.light.blue }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    isCurrentLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.current.legend && datum.current.legend.data) {\n            datum.current.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    isPreviousLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.previous.legend && datum.previous.legend.data) {\n            datum.previous.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel });\n        const legendWidth = styles.legend.minWidth > width / 2\n            ? styles.legendContainer.minWidth\n            : width / 2;\n        const domain = this.getDomain();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, width: width },\n                Boolean(datum && datum.previous) &&\n                    datum.previous.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                Boolean(datum && datum.current) &&\n                    datum.current.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(VictoryAxis, { style: chartStyles.axis }),\n                React.createElement(VictoryAxis, { dependentAxis: true, style: chartStyles.axis })),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) },\n                Boolean(datum.previous.legend.title) && (React.createElement(\"div\", null, datum.previous.legend.title)),\n                this.getLegend(datum.previous.legend, legendWidth))),\n            Boolean(this.isCurrentLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) },\n                Boolean(datum.current.legend.title) && (React.createElement(\"div\", null, datum.current.legend.title)),\n                this.getLegend(datum.current.legend, legendWidth)))));\n    }\n}\nexport { UsageChart };\n","import React from 'react';\nimport { UsageChart } from '../usageChart';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(UsageChart, Object.assign({ height: 75 }, props))));\nexport { OcpReportSummaryUsage };\n","import { Button } from '@patternfly/react-core';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nconst CastedButton = Button;\nconst Link = props => (React.createElement(CastedButton, Object.assign({ component: RouterLink, variant: \"link\" }, props)));\nexport { Link };\n","import { getQuery, parseQuery } from 'api/ocpQuery';\nimport { transformOcpReport } from 'components/commonChart/chartUtils';\nimport { Link } from 'components/link';\nimport { OcpReportSummary, OcpReportSummaryDetails, OcpReportSummaryItem, OcpReportSummaryItems, OcpReportSummaryTrend, OcpReportSummaryUsage, } from 'components/ocpReportSummary';\nimport { Tabs } from 'components/tabs';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue } from 'utils/formatValue';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/ocp?${getQuery({\n                group_by: groupBy,\n                order_by: { charge: 'desc' },\n            })}`;\n        };\n        this.renderTab = (tabData) => {\n            const { reportType, tabs, topItems } = this.props;\n            const currentTab = tabData.id;\n            return (React.createElement(OcpReportSummaryItems, { idKey: getIdKeyForTab(currentTab), report: tabs }, ({ items }) => items.map(tabItem => (React.createElement(OcpReportSummaryItem, { key: tabItem.id, formatOptions: topItems.formatOptions, formatValue: formatValue, label: tabItem.label.toString(), totalValue: reportType === \"charge\" /* charge */\n                    ? tabs.total.charge\n                    : tabs.total.usage, units: tabItem.units, value: reportType === \"charge\" /* charge */\n                    ? tabItem.charge\n                    : tabItem.usage })))));\n        };\n        this.handleTabChange = (tabId) => {\n            this.props.updateTab(this.props.id, tabId);\n        };\n    }\n    componentDidMount() {\n        const { fetchReports, widgetId } = this.props;\n        fetchReports(widgetId);\n    }\n    render() {\n        const { t, titleKey, trend, details, current, previous, availableTabs, currentTab, reportType, status, } = this.props;\n        const today = new Date();\n        const month = getMonth(today);\n        const endDate = formatDate(today, 'Do');\n        const startDate = formatDate(startOfMonth(today), 'Do');\n        const title = t(titleKey, { endDate, month, startDate });\n        const subTitle = t('ocp_dashboard.widget_subtitle', {\n            endDate,\n            month,\n            startDate,\n            count: getDate(today),\n        });\n        const detailLabel = t(details.labelKey);\n        const requestLabel = t(details.requestLabelKey);\n        const detailsLink = reportType === \"charge\" /* charge */ && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab)));\n        const reportItem = reportType === \"charge\" /* charge */ ? 'charge' : 'usage';\n        const currentUsageData = transformOcpReport(current, trend.type, 'date', reportItem);\n        const previousUsageData = transformOcpReport(previous, trend.type, 'date', reportItem);\n        const currentRequestData = reportType !== \"charge\" /* charge */\n            ? transformOcpReport(current, trend.type, 'date', 'request')\n            : undefined;\n        const previousRequestData = reportType !== \"charge\" /* charge */\n            ? transformOcpReport(previous, trend.type, 'date', 'request')\n            : undefined;\n        return (React.createElement(OcpReportSummary, { title: title, subTitle: subTitle, detailsLink: detailsLink, status: status },\n            React.createElement(OcpReportSummaryDetails, { report: current, reportType: reportType, formatValue: formatValue, label: detailLabel, formatOptions: details.formatOptions, requestLabel: requestLabel }),\n            Boolean(reportType === \"charge\" /* charge */) ? (React.createElement(OcpReportSummaryTrend, { title: t(trend.titleKey), currentData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, previousData: previousUsageData })) : (React.createElement(OcpReportSummaryUsage, { currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, previousRequestData: previousRequestData, previousUsageData: previousUsageData })),\n            React.createElement(Tabs, { tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, current: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), previous: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabs: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), status: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDashboardWidgetBase));\nexport { OcpDashboardWidget, OcpDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { uiActions } from 'store/ui';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst OcpDashboardBase = ({ t, openProvidersModal, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        return (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(OcpDashboardBase));\nexport default OcpDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200 } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    card: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '75vh',\n        marginTop: '30px',\n    },\n    cardBody: {\n        textAlign: 'center',\n    },\n    primaryAction: {\n        marginTop: '60px',\n    },\n    subtitle: {\n        color: global_Color_200.var,\n        marginTop: '30px',\n    },\n    title: {\n        marginTop: '30px',\n    },\n});\n","import { Card, Grid, GridItem, Title } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyState.styles';\nconst EmptyState = ({ primaryAction, subTitle, title, }) => (React.createElement(\"div\", null,\n    React.createElement(Card, { className: css(styles.card) },\n        React.createElement(\"div\", { className: css(styles.cardBody) },\n            React.createElement(Grid, { gutter: \"lg\" },\n                React.createElement(GridItem, { md: 1, lg: 2 }),\n                React.createElement(GridItem, { md: 10, lg: 8 },\n                    React.createElement(DollarSignIcon, { size: \"xl\" }),\n                    React.createElement(Title, { className: css(styles.title), size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n                    Boolean(primaryAction) && (React.createElement(\"div\", { className: css(styles.primaryAction) }, primaryAction))),\n                React.createElement(GridItem, { md: 1, lg: 2 }))))));\nexport { EmptyState };\n","import { Button, ButtonType, ButtonVariant, Grid, GridItem, Title, TitleSize, } from '@patternfly/react-core';\nimport { Tabs } from 'components/tabs';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersSelectors } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { getTestProps, testIds } from 'testIds';\nimport AwsDashboard from '../awsDashboard';\nimport OcpDashboard from '../ocpDashboard';\nimport { EmptyState } from './emptyState';\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            currentTab: \"aws\" /* aws */,\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"aws\" /* aws */) {\n                return t('overview.aws');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.renderTab = (tabData) => {\n            const currentTab = tabData.id;\n            if (currentTab === \"aws\" /* aws */) {\n                return React.createElement(AwsDashboard, null);\n            }\n            else {\n                return React.createElement(OcpDashboard, null);\n            }\n        };\n        this.handleTabChange = (tabId) => {\n            this.setState({ currentTab: tabId });\n        };\n    }\n    render() {\n        const { availableTabs, openProvidersModal, providers, providersFetchStatus, t, } = this.props;\n        const { currentTab } = this.state;\n        const addSourceBtn = (React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.add_btn), { onClick: openProvidersModal, type: ButtonType.submit, variant: ButtonVariant.secondary }), t('providers.add_source')));\n        return (React.createElement(\"div\", { className: \"pf-l-page__main-section pf-u-pb-xl pf-u-px-xl\" },\n            React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                React.createElement(Title, { size: TitleSize.lg }, t('overview.title')),\n                addSourceBtn),\n            React.createElement(\"div\", null, Boolean(providers &&\n                providers.count > 0 &&\n                providersFetchStatus === 2 /* complete */) ? (React.createElement(Tabs, { isShrink: Boolean(true), tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })) : (React.createElement(Grid, { gutter: \"lg\" },\n                React.createElement(GridItem, null,\n                    React.createElement(EmptyState, { primaryAction: addSourceBtn, title: t('overview.empty_state_title'), subTitle: t('overview.empty_state_desc') })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const availableTabs = [];\n    const providers = providersSelectors.selectProviders(state);\n    if (providers && providers.results) {\n        let showAWSTab = false;\n        let showOCPTab = false;\n        for (const result of providers.results) {\n            if (result.type === 'AWS') {\n                showAWSTab = true;\n            }\n            else if (result.type === 'OCP') {\n                showOCPTab = true;\n            }\n        }\n        if (showAWSTab) {\n            availableTabs.push(\"aws\" /* aws */);\n        }\n        if (showOCPTab) {\n            availableTabs.push(\"ocp\" /* ocp */);\n        }\n    }\n    return {\n        availableTabs,\n        providers,\n        providersFetchStatus: providersSelectors.selectProvidersFetchStatus(state),\n    };\n});\nconst Overview = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(OverviewBase));\nexport default Overview;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ title, subTitle, detailsLink, children, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? `${t('loading')}...` : children),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetails = ({ label, formatValue, formatOptions, report, }) => {\n    let value = '----';\n    if (report) {\n        value = report.total\n            ? formatValue(report.total.value, report.total.units, formatOptions)\n            : 0;\n    }\n    return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n        React.createElement(\"div\", { className: css(styles.value) }, value),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, label))));\n};\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItem = ({ label, value, totalValue, formatValue, units, formatOptions, }) => {\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = `${formatValue(value, units, formatOptions)} (${percentVal}%)`;\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItem.defaultProps = {\n    formatValue: v => v,\n};\nexport { AwsReportSummaryItem };\n","import React from 'react';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nclass AwsReportSummaryItems extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => i.id === 'Other');\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return null;\n        }\n        const items = this.getItems();\n        return React.createElement(\"ul\", null, children({ items }));\n    }\n}\nexport { AwsReportSummaryItems, };\n","import React from 'react';\nimport { TrendChart } from '../trendChart';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(TrendChart, Object.assign({ height: 75 }, props))));\nexport { AwsReportSummaryTrend };\n","import { getQuery, parseQuery } from 'api/awsQuery';\nimport { AwsReportSummary, AwsReportSummaryDetails, AwsReportSummaryItem, AwsReportSummaryItems, AwsReportSummaryTrend, } from 'components/awsReportSummary';\nimport { transformAwsReport } from 'components/commonChart/chartUtils';\nimport { Link } from 'components/link';\nimport { Tabs } from 'components/tabs';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/awsDashboard';\nimport { awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/aws?${getQuery({\n                group_by: groupBy,\n                order_by: { total: 'desc' },\n            })}`;\n        };\n        this.renderTab = (tabData) => {\n            const { tabs, topItems } = this.props;\n            const currentTab = tabData.id;\n            return (React.createElement(AwsReportSummaryItems, { idKey: getIdKeyForTab(currentTab), report: tabs }, ({ items }) => items.map(tabItem => (React.createElement(AwsReportSummaryItem, { key: tabItem.id, formatOptions: topItems.formatOptions, formatValue: formatValue, label: tabItem.label.toString(), totalValue: tabs.total.value, units: tabItem.units, value: tabItem.total })))));\n        };\n        this.handleTabChange = (tabId) => {\n            this.props.updateTab(this.props.id, tabId);\n        };\n    }\n    componentDidMount() {\n        const { fetchReports, widgetId } = this.props;\n        fetchReports(widgetId);\n    }\n    render() {\n        const { t, titleKey, trend, details, current, previous, availableTabs, currentTab, reportType, status, } = this.props;\n        const today = new Date();\n        const month = getMonth(today);\n        const endDate = formatDate(today, 'Do');\n        const startDate = formatDate(startOfMonth(today), 'Do');\n        const title = t(titleKey, { endDate, month, startDate });\n        const subTitle = t('aws_dashboard.widget_subtitle', {\n            endDate,\n            month,\n            startDate,\n            count: getDate(today),\n        });\n        const detailLabel = t(details.labelKey, {\n            context: details.labelKeyContext,\n        });\n        const detailsLink = reportType === \"cost\" /* cost */ && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab)));\n        const trendTitle = t(trend.titleKey);\n        const currentData = transformAwsReport(current, trend.type);\n        const previousData = transformAwsReport(previous, trend.type);\n        return (React.createElement(AwsReportSummary, { title: title, subTitle: subTitle, detailsLink: detailsLink, status: status },\n            React.createElement(AwsReportSummaryDetails, { report: current, formatValue: formatValue, label: detailLabel, formatOptions: details.formatOptions }),\n            React.createElement(AwsReportSummaryTrend, { title: trendTitle, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, previousData: previousData }),\n            React.createElement(Tabs, { tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, current: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), previous: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabs: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), status: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDashboardWidgetBase));\nexport { AwsDashboardWidget, AwsDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { uiActions } from 'store/ui';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst AwsDashboardBase = ({ t, openProvidersModal, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        return (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(AwsDashboardBase));\nexport default AwsDashboard;\n","import { hot } from 'react-hot-loader';\nimport OcpDashboard from './ocpDashboard';\nexport default hot(module)(OcpDashboard);\n","import { hot } from 'react-hot-loader';\nimport AwsDashboard from './awsDashboard';\nexport default hot(module)(AwsDashboard);\n","import { hot } from 'react-hot-loader';\nimport Overview from './overview';\nexport default hot(module)(Overview);\n"],"sourceRoot":""}