{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartLabelTooltip/chartLabelTooltip.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpOnAwsReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummary.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummary.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItem.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItems.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryUsage.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/components/link/link.tsx","webpack:///./src/pages/awsDashboard/awsDashboardWidget.styles.ts","webpack:///./src/pages/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboardWidget.styles.ts","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboardWidget.tsx","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/pages/overview/index.ts"],"names":["unitLookupKey","unit","toLowerCase","formatValue","value","options","lookup","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","check_box_3","check_box_4","check_box_5","check_box_all","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","Object","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_9__","transformOcpOnAwsReport","utils_getComputedOcpOnAwsReportItems__WEBPACK_IMPORTED_MODULE_8__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getDateRangeString","i18next__WEBPACK_IMPORTED_MODULE_5__","t","count","endDate","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getMonthRangeString","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","getTooltipLabel","formatOptions","toString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","__webpack_exports__","__rest","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","ChartLabelTooltip","_a","content","props","react_default","createElement","Tooltip","enableFlip","ChartLabel","assign","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpOnAwsReportItems","getUnsortedComputedOcpOnAwsReportItems","account_alias","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","instance_type","region","service","styles","StyleSheet","create","container","display","justifyContent","height","marginTop","ErrorState","es","error","icon","error_circle_o_icon","title","subTitle","response","status","ban_icon","className","EmptyState","EmptyStateIcon","Title","size","EmptyStateBody","LoadingState","binoculars_icon","mapStateToProps","common","state","NoProvidersState","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getAddSourceButton","Button","onClick","variant","primary","dollar_sign_icon","chartStyles","currentRequestData","fill","stroke","strokeDasharray","currentUsageData","legend","labels","fontFamily","esm","fontSize","minWidth","previousRequestData","previousUsageData","currentColorScale","previousColorScale","tooltip","flyoutStyle","strokeWidth","padding","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","minHeight","width","legendTitle","marginBottom","usageChart_UsageChart","containerRef","createRef","initDatum","previousLegendData","chartUtils","push","symbol","previous","charts","show","colorScale","handlePreviousLegendClick","currentLegendData","current","gutter","handleCurrentLegendClick","setState","newDatum","index","handleResize","clientWidth","getChart","ChartArea","getLegend","ChartLegend","events","target","eventHandlers","mutation","itemsPerRow","labelComponent","chartLabelTooltip","getLegendTooltip","formatDatumValue","formatDatumOptions","childName","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","maxValue","Math","ceil","currentRequestDate","get_date_default","currentUsageDate","previousRequestDate","previousUsageDate","result","trim","ChartVoronoiContainer","ChartTooltip","pointerWidth","voronoiDimension","legendWidth","getDomain","getEndDate","midDate","floor","ref","Chart","containerComponent","Boolean","chart","ChartAxis","tickValues","dependentAxis","isPreviousLegendVisible","isCurrentLegendVisible","previousMonth","currentMonth","trendChart_TrendChart","currentData","previousData","legendData","handleCostLegendClick","orientation","maxCurrent","maxPrevious","previousDate","currentDate","isLegendVisible","chartSkeleton","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitleTooltip","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","marginRight","valueContainer","AwsReportSummaryDetails","costLabel","reportType","showUnits","usageLabel","meta","total","usageUnits","unitsLabel","utils_formatValue","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","undefined","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","OcpOnAwsReportSummary","ocpOnAwsReportSummaryAlt_styles_styles","OcpOnAwsReportSummaryAlt","ocpOnAwsReportSummaryDetails_styles_styles","marginLeft","titleContainer","usageText","usageValue","OcpOnAwsReportSummaryDetails","requestLabel","awsReportType","ocpOnAwsReportSummaryItem_styles_styles","OcpOnAwsReportSummaryItemBase","OcpOnAwsReportSummaryItem","ocpOnAwsReportSummaryItems_styles_styles","OcpOnAwsReportSummaryItems","ocpOnAwsReportSummaryTrend_styles_styles","OcpOnAwsReportSummaryTrend","OcpOnAwsReportSummaryUsage","usageChart","OcpReportSummary","ocpReportSummaryAlt_styles_styles","OcpReportSummaryAlt","ocpReportSummaryDetails_styles_styles","OcpReportSummaryDetails","requestValue","ocpReportSummaryItem_styles_styles","OcpReportSummaryItemBase","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","OcpReportSummaryItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","CastedButton","link_Link","component","Link","tabItems","getIdKeyForTab","tab","widgetId","widget","awsDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","tabsQuery","currentReport","awsReports","selectReport","currentReportFetchStatus","selectReportFetchStatus","previousReport","tabsReport","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","AwsDashboardWidget","activeTabKey","buildDetailsLink","awsQuery","group_by","order_by","handleTabClick","event","tabIndex","availableTabs","trend","getUnits","awsReportSummary","titleKey","getDetails","getDetailsLabel","costKey","usageKey","getDetailsLink","currentTab","isDetailsLink","to","getDetailsLinkTitle","getHorizontalLayout","getSubTitle","getSubTitleTooltip","getTabs","getTitle","get_month_default","format_default","start_of_month_default","get_year_default","getTab","Tab","eventKey","getTabTitle","getTabItem","topItems","activeTab","isCostReport","Tabs","isFilled","activeKey","onSelect","getVerticalLayout","isHorizontal","awsDashboard_mapStateToProps","selectWidgets","widgets","selectCurrentWidgets","awsDashboard_awsDashboard","ocpDashboardWidget_styles_styles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpReports","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpQuery","currentInfrastructureData","previousInfrastructureData","ocpReportSummary","requestKey","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","ocpOnAwsDashboardWidget_styles_styles","ocpOnAwsDashboardWidget_getIdKeyForTab","ocpOnAwsDashboardWidget_mapStateToProps","ocpOnAwsDashboard","ocpOnAwsReports","ocpOnAwsDashboardWidget_mapDispatchToProps","OcpOnAwsDashboardWidget","ocpOnAwsQuery","ocpOnAwsReportSummary","ocpOnAwsDashboard_mapStateToProps","ocpOnAwsDashboard_ocpOnAwsDashboard","overview_styles_styles","info","verticalAlign","infoTitle","fontWeight","headerOverride","index_esm","overview_getIdKeyForTab","overview_mapStateToProps","awsProvidersQueryString","providersQuery","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","Overview","showPopover","secondary","getAvailableTabs","contentRef","tabContentId","tabContentRef","getTabContent","val","TabContent","handlePopoverClick","isLoading","noAwsProviders","noOcpProviders","noProviders","showTabs","sizes","Popover","aria-label","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_overview__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"8e3367fe4e11c8bc1046.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    return lookup;\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, _unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        check_box_3: 'check-box-3',\n        check_box_4: 'check-box-4',\n        check_box_5: 'check-box-5',\n        check_box_all: 'check-box-all',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpOnAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpOnAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const test = i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n    return test;\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nconst ChartLabelTooltip = (_a) => {\n    var { content } = _a, props = __rest(_a, [\"content\"]);\n    return (React.createElement(Tooltip, { content: content(props.datum), enableFlip: true },\n        React.createElement(ChartLabel, Object.assign({}, props))));\n};\nexport { ChartLabelTooltip };\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage ? value.usage.units : value.cost.units;\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpOnAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage ? value.usage.units : value.cost.units;\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage ? value.usage.units : value.cost.units,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BanIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error && error.response && error.response.status === 401) {\n        icon = BanIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BinocularsIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(EmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { Button, ButtonType, ButtonVariant, EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAddSourceButton = () => {\n            const { openProvidersModal, t } = this.props;\n            return (React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.add_btn), { onClick: openProvidersModal, type: ButtonType.submit, variant: ButtonVariant.primary }), t('providers.add_source')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                this.getAddSourceButton())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { c_background_image_BackgroundColor, global_Color_light_200, global_disabled_color_100, global_disabled_color_200, global_FontFamily_sans_serif, global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: ['#A2DA9C', '#88D080', '#6EC664', '#519149', '#3C6C37'],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_100.value,\n    ],\n    tooltip: {\n        flyoutStyle: {\n            fill: c_background_image_BackgroundColor.value,\n            strokeWidth: 0,\n        },\n        style: {\n            fill: global_Color_light_200.value,\n            padding: 18,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n    legend: {\n        display: 'inline-block',\n        fontSize: global_FontSize_md.value,\n        minHeight: '60px',\n        minWidth: '175px',\n        width: '50%',\n    },\n    legendTitle: {\n        fontSize: global_FontSize_md.value,\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartTooltip, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, title, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            if (previousUsageData) {\n                const [start] = getMonthRangeString(previousUsageData, 'chart.usage_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousUsageData, true, true, 1),\n                });\n            }\n            if (previousRequestData) {\n                const [start] = getMonthRangeString(previousRequestData, 'chart.requests_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousRequestData, true, true, 1),\n                });\n            }\n            const previous = {\n                charts: [\n                    {\n                        data: previousUsageData,\n                        name: 'previousUsage',\n                        show: true,\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        name: 'previousRequest',\n                        show: true,\n                        style: chartStyles.previousRequestData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.previousColorScale,\n                    data: previousLegendData,\n                    onClick: this.handlePreviousLegendClick,\n                    title,\n                },\n            };\n            const currentLegendData = [];\n            if (currentUsageData) {\n                const [start] = getMonthRangeString(currentUsageData, 'chart.usage_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentUsageData, true, false),\n                });\n            }\n            if (currentRequestData) {\n                const [start] = getMonthRangeString(currentRequestData, 'chart.requests_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentRequestData, true, false),\n                });\n            }\n            const current = {\n                charts: [\n                    {\n                        data: currentUsageData,\n                        name: 'currentUsage',\n                        show: true,\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: currentRequestData,\n                        name: 'currentRequest',\n                        show: true,\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.currentColorScale,\n                    data: currentLegendData,\n                    gutter: 55,\n                    onClick: this.handleCurrentLegendClick,\n                    title,\n                },\n            };\n            this.setState({\n                datum: {\n                    previous,\n                    current,\n                },\n            });\n        };\n        this.handleCurrentLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.current.charts.length) {\n                newDatum.current.charts[props.index].show = !newDatum.current.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.handlePreviousLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.previous.charts.length) {\n                newDatum.previous.charts[props.index].show = !newDatum.previous.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, name: datum.name, key: `usage-chart-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], height: 25, itemsPerRow: 1, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    isCurrentLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.current.legend && datum.current.legend.data) {\n            datum.current.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    isPreviousLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.previous.legend && datum.previous.legend.data) {\n            datum.previous.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labelComponent: React.createElement(ChartTooltip, { flyoutStyle: chartStyles.tooltip.flyoutStyle, pointerWidth: 20, style: chartStyles.tooltip.style }), labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const legendWidth = chartStyles.legend.minWidth > width / 2\n            ? chartStyles.legend.minWidth\n            : width / 2;\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, width: width },\n                Boolean(datum && datum.previous) &&\n                    datum.previous.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                Boolean(datum && datum.current) &&\n                    datum.current.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.previous.legend.title)),\n            Boolean(this.isCurrentLegendVisible() && !this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.current.legend.title)),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) }, this.getLegend(datum.previous.legend, legendWidth))),\n            Boolean(this.isCurrentLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) }, this.getLegend(datum.current.legend, legendWidth)))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { c_background_image_BackgroundColor, global_Color_light_200, global_disabled_color_200, global_FontFamily_sans_serif, global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        '#A2DA9C',\n        '#88D080',\n        '#6EC664',\n        '#519149',\n        '#3C6C37',\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    tooltip: {\n        flyoutStyle: {\n            fill: c_background_image_BackgroundColor.value,\n            strokeWidth: 0,\n        },\n        style: {\n            fill: global_Color_light_200.value,\n            padding: 18,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    legend: {\n        display: 'inline-block',\n        fontSize: global_FontSize_md.value,\n        marginTop: global_spacer_lg.value,\n        minWidth: '175px',\n    },\n    legendTitle: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartTooltip, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, title } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            const cost = {\n                charts: [\n                    {\n                        data: previousData,\n                        name: 'previous',\n                        show: true,\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        name: 'current',\n                        show: true,\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.colorScale,\n                    data: legendData,\n                    onClick: this.handleCostLegendClick,\n                    title,\n                },\n            };\n            this.setState({\n                datum: {\n                    cost,\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.cost.charts.length) {\n                newDatum.cost.charts[props.index].show = !newDatum.cost.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, name: datum.name, key: `trend-chart-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], gutter: 20, height: 25, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend, width: width }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.cost.legend && datum.cost.legend.data) {\n            datum.cost.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labelComponent: React.createElement(ChartTooltip, { flyoutStyle: chartStyles.tooltip.flyoutStyle, pointerWidth: 20, style: chartStyles.tooltip.style }), labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const legendWidth = chartStyles.legend.minWidth > width / 2\n            ? chartStyles.legend.minWidth\n            : width / 2;\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, width: width },\n                Boolean(datum && datum.cost) &&\n                    datum.cost.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })),\n            Boolean(this.isLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) },\n                Boolean(datum.cost.legend.title) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.cost.legend.title)),\n                this.getLegend(datum.cost.legend, legendWidth)))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, t, usageLabel, }) => {\n    let cost = '----';\n    let usage = '----';\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnAwsReportSummary.styles';\nconst OcpOnAwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpOnAwsReportSummary = translate()(OcpOnAwsReportSummaryBase);\nexport { OcpOnAwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnAwsReportSummaryAlt.styles';\nconst OcpOnAwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpOnAwsReportSummaryAlt = translate()(OcpOnAwsReportSummaryAltBase);\nexport { OcpOnAwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    titleContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n    usageText: {\n        marginRight: global_spacer_sm.value,\n    },\n    usageValue: {\n        marginRight: global_spacer_sm.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsReportSummaryDetails.styles';\nconst OcpOnAwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestLabel, showUnits = false, t, usageLabel, }) => {\n    let cost = '----';\n    let request = '----';\n    let usage = '----';\n    const awsReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (awsReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', formatOptions);\n        }\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.titleContainer) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else if (!awsReportType) {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.titleContainer) },\n                React.createElement(\"div\", { className: css(styles.value, styles.usageValue) },\n                    usage,\n                    React.createElement(\"div\", { className: css(styles.text) },\n                        React.createElement(\"div\", null, usageLabel)))),\n            React.createElement(\"div\", { className: css(styles.titleContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    request,\n                    React.createElement(\"div\", { className: css(styles.text) }, requestLabel)))));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst OcpOnAwsReportSummaryDetails = translate()(OcpOnAwsReportSummaryDetailsBase);\nexport { OcpOnAwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsReportSummaryItem.styles';\nconst OcpOnAwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpOnAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpOnAwsReportSummaryItem = translate()(OcpOnAwsReportSummaryItemBase);\nexport { OcpOnAwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { styles } from './ocpOnAwsReportSummaryItems.styles';\nclass OcpOnAwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpOnAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpOnAwsReportSummaryItems = translate()(OcpOnAwsReportSummaryItemsBase);\nexport { OcpOnAwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpOnAwsReportSummaryTrend.styles';\nconst OcpOnAwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpOnAwsReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpOnAwsReportSummaryTrend.styles';\nconst OcpOnAwsReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpOnAwsReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    titleContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n    usageText: {\n        marginRight: global_spacer_sm.value,\n    },\n    usageValue: {\n        marginRight: global_spacer_sm.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestLabel, usageLabel, t, }) => {\n    let cost = '----';\n    let usage = '----';\n    let derivedCost = '----';\n    let infrastructureCost = '----';\n    let requestValue = '----';\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n            requestValue = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', formatOptions);\n        }\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: css(styles.titleContainer) },\n            React.createElement(\"div\", { className: css(styles.value, styles.usageValue) },\n                Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                        derivedCost,\n                        infrastructureCost,\n                    }), enableFlip: true },\n                    React.createElement(\"div\", null, cost))) : (React.createElement(\"div\", null, usage)),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel)))),\n        React.createElement(\"div\", { className: css(styles.titleContainer) }, Boolean(reportType !== \"cost\" /* cost */) && (React.createElement(\"div\", { className: css(styles.value) },\n            requestValue,\n            React.createElement(\"div\", { className: css(styles.text) }, requestLabel))))));\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { c_background_image_BackgroundColor, global_Color_light_200, global_disabled_color_100, global_disabled_color_200, global_FontFamily_sans_serif, global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: ['#A2DA9C', '#88D080', '#6EC664', '#519149', '#3C6C37'],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_100.value,\n    ],\n    tooltip: {\n        flyoutStyle: {\n            fill: c_background_image_BackgroundColor.value,\n            strokeWidth: 0,\n        },\n        style: {\n            fill: global_Color_light_200.value,\n            padding: 18,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n    legendTitle: {\n        fontSize: global_FontSize_md.value,\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_lg.value,\n    },\n    legend: {\n        display: 'inline-block',\n        fontSize: global_FontSize_md.value,\n        minHeight: '60px',\n        minWidth: '200px',\n        width: '50%',\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartTooltip, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, title, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            if (previousCostData) {\n                const [start] = getMonthRangeString(previousCostData, 'chart.cost_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousCostData, true, true, 1),\n                });\n            }\n            if (previousInfrastructureCostData) {\n                const [start] = getMonthRangeString(previousInfrastructureCostData, 'chart.cost_infrastructure_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousInfrastructureCostData, true, true, 1),\n                });\n            }\n            const previous = {\n                charts: [\n                    {\n                        data: previousCostData,\n                        name: 'previousCost',\n                        show: true,\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        data: previousInfrastructureCostData,\n                        name: 'previousInfrastructureCost',\n                        show: true,\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.previousColorScale,\n                    data: previousLegendData,\n                    onClick: this.handlePreviousLegendClick,\n                    title,\n                },\n            };\n            const currentLegendData = [];\n            if (currentCostData) {\n                const [start] = getMonthRangeString(currentCostData, 'chart.cost_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentCostData, true, false),\n                });\n            }\n            if (currentInfrastructureCostData) {\n                const [start] = getMonthRangeString(currentInfrastructureCostData, 'chart.cost_infrastructure_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentInfrastructureCostData, true, false),\n                });\n            }\n            const current = {\n                charts: [\n                    {\n                        data: currentCostData,\n                        name: 'currentCost',\n                        show: true,\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        data: currentInfrastructureCostData,\n                        name: 'currentInfrastructureCost',\n                        show: true,\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.currentColorScale,\n                    data: currentLegendData,\n                    gutter: 55,\n                    onClick: this.handleCurrentLegendClick,\n                    title,\n                },\n            };\n            this.setState({\n                datum: {\n                    previous,\n                    current,\n                },\n            });\n        };\n        this.handleCurrentLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.current.charts.length) {\n                newDatum.current.charts[props.index].show = !newDatum.current.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.handlePreviousLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.previous.charts.length) {\n                newDatum.previous.charts[props.index].show = !newDatum.previous.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, name: datum.name, key: `usage-chart-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], height: 25, itemsPerRow: 1, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    isCurrentLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.current.legend && datum.current.legend.data) {\n            datum.current.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    isPreviousLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.previous.legend && datum.previous.legend.data) {\n            datum.previous.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labelComponent: React.createElement(ChartTooltip, { flyoutStyle: chartStyles.tooltip.flyoutStyle, pointerWidth: 20, style: chartStyles.tooltip.style }), labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const legendWidth = chartStyles.legend.minWidth > width / 2\n            ? chartStyles.legend.minWidth\n            : width / 2;\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, width: width },\n                Boolean(datum && datum.previous) &&\n                    datum.previous.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                Boolean(datum && datum.current) &&\n                    datum.current.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.previous.legend.title)),\n            Boolean(this.isCurrentLegendVisible() && !this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.current.legend.title)),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) }, this.getLegend(datum.previous.legend, legendWidth))),\n            Boolean(this.isCurrentLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) }, this.getLegend(datum.current.legend, legendWidth)))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { Button } from '@patternfly/react-core';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nconst CastedButton = Button;\nconst Link = props => (React.createElement(CastedButton, Object.assign({ component: RouterLink, variant: \"link\" }, props)));\nexport { Link };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/awsQuery';\nimport { transformAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { Link } from 'components/link';\nimport { AwsReportSummary, AwsReportSummaryAlt, AwsReportSummaryDetails, AwsReportSummaryItem, AwsReportSummaryItems, AwsReportSummaryTrend, } from 'components/reports/awsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/awsDashboard';\nimport { awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/aws?${getQuery({\n                group_by: groupBy,\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getChart = (height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const currentData = transformAwsReport(currentReport, trend.type);\n            const previousData = transformAwsReport(previousReport, trend.type);\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryTrend, { currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, showUnits: details.showUnits, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(180)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('aws_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('aws_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(AwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(75),\n                React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs())));\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDashboardWidgetBase));\nexport { AwsDashboardWidget, AwsDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst AwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(AwsDashboardBase));\nexport default AwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/ocpQuery';\nimport { transformOcpReport } from 'components/charts/commonChart/chartUtils';\nimport { Link } from 'components/link';\nimport { OcpReportSummary, OcpReportSummaryAlt, OcpReportSummaryDetails, OcpReportSummaryItem, OcpReportSummaryItems, OcpReportSummaryTrend, OcpReportSummaryUsage, } from 'components/reports/ocpReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/ocp?${getQuery({\n                group_by: groupBy,\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id } = this.props;\n            const tab = availableTabs[tabIndex];\n            this.props.updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getChart = (height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const reportItem = reportType === \"cost\" /* cost */ ? 'cost' : 'usage';\n            const currentUsageData = transformOcpReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const currentInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const previousInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const units = this.getUnits();\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(OcpReportSummaryTrend, { currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) })) : (React.createElement(OcpReportSummaryUsage, { currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpReportSummaryDetails, { formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(180)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('ocp_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('ocp_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                        ? reportItem.cost\n                        : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(75),\n                React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs())));\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, widgetId } = this.props;\n        this.props.updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDashboardWidgetBase));\nexport { OcpDashboardWidget, OcpDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst OcpDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(OcpDashboardBase));\nexport default OcpDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/ocpOnAwsQuery';\nimport { transformOcpOnAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { Link } from 'components/link';\nimport { OcpOnAwsReportSummary, OcpOnAwsReportSummaryAlt, OcpOnAwsReportSummaryDetails, OcpOnAwsReportSummaryItem, OcpOnAwsReportSummaryItems, OcpOnAwsReportSummaryTrend, OcpOnAwsReportSummaryUsage, } from 'components/reports/ocpOnAwsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsDashboardActions, ocpOnAwsDashboardSelectors, } from 'store/ocpOnAwsDashboard';\nimport { ocpOnAwsReportsSelectors } from 'store/ocpOnAwsReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpOnAwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/ocp?${getQuery({\n                group_by: groupBy,\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getChart = (height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const costReportType = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            const reportItem = costReportType ? 'infrastructureCost' : 'usage';\n            const currentUsageData = transformOcpOnAwsReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpOnAwsReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpOnAwsReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpOnAwsReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const units = this.getUnits();\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"instance_type\" /* instanceType */ ||\n                reportType === \"network\" /* network */ ||\n                reportType === \"storage\" /* storage */) ? (React.createElement(OcpOnAwsReportSummaryTrend, { currentData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) })) : (React.createElement(OcpOnAwsReportSummaryUsage, { currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpOnAwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), showUnits: details.showUnits, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpOnAwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(180)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('ocp_on_aws_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('ocp_on_aws_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpOnAwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpOnAwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.infrastructure_cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: isCostReport ? reportItem.infrastructureCost : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.infrastructure_cost\n                        ? unitLookupKey(currentReport.meta.total.infrastructure_cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpOnAwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(75),\n                this.getTabs()));\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpOnAwsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpOnAwsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpOnAwsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpOnAwsDashboardActions.fetchWidgetReports,\n    updateTab: ocpOnAwsDashboardActions.changeWidgetTab,\n};\nconst OcpOnAwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpOnAwsDashboardWidgetBase));\nexport { OcpOnAwsDashboardWidget, OcpOnAwsDashboardWidgetBase, };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsDashboardSelectors } from 'store/ocpOnAwsDashboard';\nimport { OcpOnAwsDashboardWidget } from './ocpOnAwsDashboardWidget';\nconst OcpOnAwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpOnAwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(OcpOnAwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpOnAwsDashboardSelectors.selectWidgets(state),\n        widgets: ocpOnAwsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpOnAwsDashboard = translate()(connect(mapStateToProps, {})(OcpOnAwsDashboardBase));\nexport default OcpOnAwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_sm } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n});\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { Button, ButtonType, ButtonVariant, Popover, Tab, TabContent, Tabs, Title, TitleSize, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsDashboard from 'pages/awsDashboard/awsDashboard';\nimport OcpDashboard from 'pages/ocpDashboard/ocpDashboard';\nimport OcpOnAwsDashboard from 'pages/ocpOnAwsDashboard/ocpOnAwsDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { awsProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { getTestProps, testIds } from 'testIds';\nimport { headerOverride, styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n        case \"ocpOnAws\" /* ocpOnAws */:\n            return 'ocpOnAws';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            showPopover: false,\n        };\n        this.getAddSourceButton = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, { to: \"/sources\" },\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.add_btn), { type: ButtonType.submit, variant: ButtonVariant.secondary }), t('providers.add_source'))));\n        };\n        this.getAvailableTabs = () => {\n            const { awsProviders, ocpProviders } = this.props;\n            const availableTabs = [];\n            if (awsProviders &&\n                awsProviders.meta &&\n                awsProviders.meta.count &&\n                (ocpProviders && ocpProviders.meta && ocpProviders.meta.count)) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocpOnAws\" /* ocpOnAws */,\n                });\n            }\n            if (ocpProviders && ocpProviders.meta && ocpProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (awsProviders && awsProviders.meta && awsProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"aws\" /* aws */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: this.getTabTitle(tab) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"ocpOnAws\" /* ocpOnAws */) {\n                return activeTabKey === index ? React.createElement(OcpOnAwsDashboard, null) : null;\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                return activeTabKey === index ? React.createElement(OcpDashboard, null) : null;\n            }\n            else if (currentTab === \"aws\" /* aws */) {\n                return activeTabKey === index ? React.createElement(AwsDashboard, null) : null;\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"aws\" /* aws */) {\n                return t('overview.aws');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n            else if (tab === \"ocpOnAws\" /* ocpOnAws */) {\n                return t('overview.ocp_on_aws');\n            }\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    render() {\n        const { awsProviders, awsProvidersError, awsProvidersFetchStatus, ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || ocpProvidersError;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = awsProviders !== undefined &&\n            awsProviders.meta !== undefined &&\n            awsProviders.meta.count === 0 &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = ocpProviders !== undefined &&\n            ocpProviders.meta !== undefined &&\n            ocpProviders.meta.count === 0 &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { size: TitleSize.lg },\n                        t('overview.title'),\n                        React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp_on_aws')),\n                                React.createElement(\"p\", null, t('overview.ocp_on_aws_desc')),\n                                React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp')),\n                                React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.aws')),\n                                React.createElement(\"p\", null, t('overview.aws_desc'))) },\n                            React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick }))),\n                    this.getAddSourceButton()),\n                Boolean(showTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs(availableTabs)))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(OverviewBase));\nexport default Overview;\n","import { hot } from 'react-hot-loader';\nimport Overview from './overview';\nexport default hot(module)(Overview);\n"],"sourceRoot":""}