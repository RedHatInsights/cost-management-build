{"version":3,"sources":["webpack://koku-ui/./src/pages/views/details/awsBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/awsBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAwsReportItems.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/awsDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/awsDetails.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/index.ts"],"names":["mapStateToProps","state","props","selectWidgets","awsCostOverview","widgets","CostOverview","withTranslation","connect","awsHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupByOrgValue","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","account","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","t","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","instance_type","org_unit_id","region","service","styles","awsDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","cost","display","alignItems","costLabel","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costLabelDate","global_Color_200","header","justifyContent","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","onGroupByClicked","providersError","this","showContent","meta","count","hasCost","total","style","Title","headingLevel","size","isDisabled","onItemClicked","options","orgReportPathsType","showOrgs","showTags","Boolean","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","super","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByOrg","groupByTagKey","orderBy","transforms","sortable","idKey","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","basePath","id","orgUnitId","type","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","setState","sortBy","disabled","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","keys","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","length","DetailsTable","orgReportType","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","orgReport","tagReport","fetchOrg","fetchTag","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","showBulkSelect","showExport","showFilter","orgReportFetchStatus","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AwsDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","isOpen","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","indexOf","slice","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"mappings":"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","file":"47c47c8a7836a1c313cb.bundle.js","sourcesContent":["import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsCostOverviewSelectors } from 'store/breakdown/costOverview/awsCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsCostOverviewSelectors.selectWidgets(state),\n        widgets: awsCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsHistoricalDataSelectors } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsHistoricalDataSelectors.selectWidgets(state),\n        widgets: awsHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey, logicalAndPrefix, orgUnitIdKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.awsDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"aws\" /* aws */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, query: query, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.aws_details'),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"aws\" /* aws */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"aws\" /* aws */,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AwsBreakdown = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AwsBreakdown;\n","import AwsBreakdown from './awsBreakdown';\nexport default AwsBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    awsDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst orgReportPathsType = \"aws\" /* aws */;\nconst tagReportPathsType = \"aws\" /* aws */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.aws_details')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, orgReportPathsType: orgReportPathsType, showOrgs: true, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit }, t('details.total_cost')),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './awsDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { getOrgBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"aws\" /* aws */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        title: groupByOrg ? t('aws_details.org_unit_column_title') : t('details.tag_names'),\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById === 'account' ? 'account_alias' : groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                let name = (React.createElement(Link, { to: getOrgBreakdownPath({\n                        basePath: paths.awsDetailsBreakdown,\n                        description: item.id,\n                        groupBy: groupById,\n                        groupByOrg,\n                        id: item.id,\n                        orgUnitId: getGroupByOrgValue(query),\n                        query,\n                        title: item.label,\n                        type: item.type,\n                    }) }, label));\n                if (label === `no-${groupById}` || label === `no-${groupByTagKey}`) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index, disabled = false) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: disabled, item: item, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/awsQuery';\nimport { orgUnitIdKey, tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst orgReportPathsType = \"aws\" /* aws */;\nconst orgReportType = \"org\" /* org */;\nconst tagReportPathsType = \"aws\" /* aws */;\nconst tagReportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, t, tagReport } = this.props;\n            const options = [\n                { name: t('filter_by.values.account'), key: 'account' },\n                { name: t('filter_by.values.service'), key: 'service' },\n                { name: t('filter_by.values.region'), key: 'region' },\n            ];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: t('filter_by.values.org_unit_id'),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: t('filter_by.values.tag'), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, queryString } = this.props;\n        fetchOrg(orgReportPathsType, orgReportType, queryString);\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgReport, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchOrg(orgReportPathsType, orgReportType, queryString);\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, orgReport, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, pagination: pagination, query: query, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        orgReport,\n        orgReportFetchStatus,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"aws\" /* aws */;\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupBy = groupByTagKey || groupById;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupBy === orgUnitIdKey ? 'org_entities' : groupBy,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.aws_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"aws\" /* aws */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.awsDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n","import AwsDetails from './awsDetails';\nexport default AwsDetails;\n"],"sourceRoot":""}