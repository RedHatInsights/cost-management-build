{"version":3,"sources":["webpack:///./src/pages/ocpDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsTagView.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpDetails/exportModal.styles.ts","webpack:///./src/pages/ocpDetails/exportModal.tsx","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/pages/ocpDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpDetails/historicalChart.tsx","webpack:///./src/pages/ocpDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpDetails/historicalModal.tsx","webpack:///./src/pages/ocpDetails/noRatesState.styles.ts","webpack:///./src/pages/ocpDetails/noRatesState.tsx","webpack:///./src/pages/ocpDetails/priceListTable.tsx","webpack:///./src/pages/ocpDetails/priceListModal.tsx","webpack:///./src/pages/ocpDetails/detailsActions.tsx","webpack:///./src/pages/ocpDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.tsx","webpack:///./src/pages/ocpDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidget.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpDetails/detailsTable.tsx","webpack:///./src/pages/ocpDetails/detailsToolbar.styles.ts","webpack:///./src/pages/ocpDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpDetails/ocpDetails.styles.ts","webpack:///./src/pages/ocpDetails/ocpDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getSinceDateRangeString","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","isEqual","obj1","obj2","JSON","stringify","split","join","chartStyles","currentRequestData","fill","stroke","strokeDasharray","currentUsageData","itemsPerRow","labels","fontFamily","esm","minWidth","legendColorScale","previousRequestData","previousUsageData","currentColorScale","previousColorScale","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","usageChart_UsageChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","setState","series","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","legendItemsPerRow","ChartLegend","colorScale","getLegendData","gutter","formatDatumValue","formatDatumOptions","childName","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","_","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","maxValue","Math","ceil","currentRequestDate","get_date_default","currentUsageDate","previousRequestDate","previousUsageDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpReportSummary","children","detailsLink","subTitle","subTitleTooltip","status","Card","CardHeader","Boolean","Tooltip","content","enableFlip","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","OcpReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","OcpReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","getCostLayout","ocpReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","skeleton","OcpReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","costKey","responsive","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","marginLeft","historicalUsageChart_HistoricalUsageChart","maxCurrentLimit","maxPreviousLimit","xAxisLabel","yAxisLabel","costValue","costLabelUnit","costLabelDate","header","backgroundColor","info","verticalAlign","infoIcon","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","ocpQuery","filter","resolution","time_scope_units","time_scope_value","key_only","ocpReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","onClick","getDropDownTags","val","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","showPopover","handlePopoverClick","show","onGroupByClicked","showContent","sizes","Popover","aria-label","bodyContent","info_circle_icon","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","query","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","ocpReportSummary","_item","DetailsWidgetModal","parentGroupBy","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","currentTarget","sortedItems","selectedLabel","actions","Button","variant","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","groupItem","historicalCostChart_styles_styles","historicalCostChart_HistoricalCostChart","historicalChart_styles_chartStyles","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpReportsActions","HistoricalChart","getSkeleton","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpDashboard","selectCurrentWidgets","HistoricalModal","noRatesState_styles_styles","NoRatesState","money_check_alt_icon","metric","priceListTable","rates","notAvailableText","Table","cells","rows","range_unit","value_unit","range_value","period","Header","Body","priceListModal","priceListProvider","find","p","providerUuid","uuid","priceList","store_priceList","ratesPerProvider","priceListError","priceListStatus","fetch","fetchPriceList","errorState","priceListRates","close","renderContent","detailsActions_tagKey","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isPriceListModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getPriceListModal","handlePriceListModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handlePriceListModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","trunc","limitUnits","requestUnits","cpuDatum","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","summary","viewAllContainer","detailsWidget_reportType","detailsWidget_mapStateToProps","detailsWidget_mapDispatchToProps","DetailsWidget","isDetailsChartModalOpen","currentTab","getSummary","getViewAll","handleDetailsChartModalOpen","button","handleDetailsChartModalClose","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getDerivedCost","getTotalCost","getActions","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","iconOverride","getSortBy","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","detailsToolbar_styles_styles","paginationContainer","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","pagination","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","ocpDetails_styles_styles","ocpDetails","tableContainer","ocpDetails_reportType","ocpDetails_tagKey","ocpDetails_baseQuery","ocpDetails_mapStateToProps","ocpDetails_mapDispatchToProps","getFilterFields","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","history","newFilterType","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","noProvidersState","loadingState"],"mappings":"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","file":"3901ba62317b138a77bd.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpDetails from './ocpDetails';\nexport default hot(module)(OcpDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                derivedCost,\n                infrastructureCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", responsive: false, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                    {\n                        data: previousLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(previousLimitData, limitKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousLimitData,\n                    },\n                    {\n                        data: currentLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(currentLimitData, limitKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentLimitData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_md, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infrastructureCost: {\n        marginTop: global_spacer_xl.value,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { parseQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Popover, Title, TitleSize, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let derivedCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            cost = formatValue(report.meta.total.derived_cost ? report.meta.total.cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            derivedCost = formatValue(report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0, report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.units\n                : 'USD');\n        }\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_details.title')),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('ocp_details.total_cost_tooltip', {\n                            derivedCost,\n                            infrastructureCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) },\n                        t('ocp_details.total_cost'),\n                        React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"div\", null, t('ocp_details.derived_cost_title')),\n                                    React.createElement(\"div\", null, t('ocp_details.derived_cost_desc')),\n                                    React.createElement(\"div\", { className: css(styles.infrastructureCost) }, t('ocp_details.infrastructure_cost_title')),\n                                    React.createElement(\"div\", null, t('ocp_details.infrastructure_cost_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetView } from './detailsWidgetView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.widget_modal_title', {\n                parentGroupBy,\n                name: item.label,\n                groupBy,\n            }) },\n            React.createElement(DetailsWidgetView, { groupBy: parentGroupBy, item: item })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpExportActions, ocpExportSelectors } from 'store/ocpExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpExportSelectors.selectExportError(state),\n        export: ocpExportSelectors.selectExport(state),\n        fetchStatus: ocpExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport { getCostRangeString, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 700\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !==\n                this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxCurrentRequest = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxPreviousLimit = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxPreviousRequest = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxPreviousLimit, maxPreviousRequest);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData, } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0\n            ? Math.max(currentRequestDate, previousRequestDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalCostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalCostChart } from 'components/charts/historicalCostChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpReportsActions from 'store/ocpReports/ocpReportsActions';\nimport * as ocpReportsSelectors from 'store/ocpReports/ocpReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const currentInfrastructureCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        const previousCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousInfrastructureCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { containerHeight: chartStyles.chartContainerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureCostData, title: t('ocp_details.historical.cost_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_details.historical.cpu_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_details.historical.memory_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '50vh',\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, TitleSize, } from '@patternfly/react-core';\nimport { MoneyCheckAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './noRatesState.styles';\nconst NoRatesStateBase = ({ t, cluster }) => {\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: MoneyCheckAltIcon }),\n            React.createElement(Title, { size: TitleSize.lg }, t('no_rates_state.title')),\n            React.createElement(EmptyStateBody, null, t('no_rates_state.desc', { cluster })))));\n};\nexport const NoRatesState = translate()(NoRatesStateBase);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport React from 'react';\nimport { formatCurrency } from 'utils/formatValue';\nfunction getUsageRangeText(metric, t) {\n    return metric.range_value[0] === null && metric.range_value[1] === null\n        ? t('ocp_details.price_list.modal.no_range_set')\n        : `${metric.range_value[0] || ' '} - ${metric.range_value[2] || ' '} ${metric.range_unit}`;\n}\nconst PriceListTable = ({ rates, t }) => {\n    const notAvailableText = t('ocp_details.price_list.modal.not_available');\n    return (React.createElement(Table, { \"aria-label\": \"price-list-table\", cells: [\n            t('ocp_details.price_list.modal.metric'),\n            t('ocp_details.price_list.modal.value'),\n            t('ocp_details.price_list.modal.applied_usage_range'),\n            t('ocp_details.price_list.modal.applied_usage_date_range'),\n        ], rows: rates.map(metric => [\n            t(`ocp_details.price_list.modal.${metric.display}`, {\n                index: metric.index + 1,\n                unit: metric.range_unit,\n            }),\n            metric.value\n                ? formatCurrency(metric.value, metric.value_unit)\n                : notAvailableText,\n            getUsageRangeText(metric, t),\n            t(`ocp_details.price_list.modal.${metric.period}`),\n        ]) },\n        React.createElement(TableHeader, null),\n        React.createElement(TableBody, null)));\n};\nexport default PriceListTable;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { priceListActions, priceListSelectors } from 'store/priceList';\nimport { providersSelectors } from 'store/providers';\nimport { styles as chartStyles } from './historicalChart.styles';\nimport { modalOverride, styles } from './historicalModal.styles';\nimport { NoRatesState } from './noRatesState';\nimport PriceListTable from './priceListTable';\nclass PriceListModalBase extends React.Component {\n    componentDidUpdate() {\n        const { fetch, isOpen, providers, priceListStatus: status, name, } = this.props;\n        if (isOpen && status !== 1 /* inProgress */) {\n            const priceListProvider = providers.data.find(p => p.name === name);\n            fetch(priceListProvider ? priceListProvider.uuid : null);\n        }\n    }\n    renderContent() {\n        const { t, providers, name, priceListStatus, priceListError, priceList, } = this.props;\n        if (priceListStatus !== 2 /* complete */) {\n            return (React.createElement(Skeleton, { className: css(chartStyles.chartSkeleton), size: SkeletonSize.md }));\n        }\n        if (priceListError !== null) {\n            return React.createElement(ErrorState, { error: priceListError });\n        }\n        const priceListProvider = providers.data.find(p => p.name === name);\n        const priceListRates = priceListProvider && priceList[priceListProvider.uuid];\n        return priceListRates ? (React.createElement(PriceListTable, { t: t, rates: priceListRates })) : (React.createElement(NoRatesState, { cluster: name.toString() }));\n    }\n    render() {\n        const { t, isOpen, close, name } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: () => close(false), title: t('ocp_details.price_list.modal.title', { name }) }, this.renderContent()));\n    }\n}\nconst PriceListModal = connect(createMapStateToProps((state, props) => {\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, 'type=OCP');\n    const priceListProvider = providers.data.find(p => p.name === props.name);\n    const providerUuid = priceListProvider ? priceListProvider.uuid : null;\n    return {\n        priceList: priceListSelectors.ratesPerProvider(state, providerUuid),\n        priceListError: priceListSelectors.error(state, providerUuid),\n        priceListStatus: priceListSelectors.status(state, providerUuid),\n        providers,\n    };\n}), {\n    fetch: priceListActions.fetchPriceList,\n})(translate()(PriceListModalBase));\nexport default PriceListModal;\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nimport PriceListModal from './priceListModal';\nconst tagKey = 'or:tag:';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isPriceListModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getPriceListModal = () => {\n            const { item: { label }, } = this.props;\n            return (React.createElement(PriceListModal, { name: label, isOpen: this.state.isPriceListModalOpen, close: this.handlePriceListModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handlePriceListModalClose = (isOpen) => {\n            this.setState({ isPriceListModalOpen: isOpen });\n        };\n        this.handlePriceListModalOpen = () => {\n            this.setState({ isPriceListModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handlePriceListModalClose = this.handlePriceListModalClose.bind(this);\n        this.handlePriceListModalOpen = this.handlePriceListModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: groupBy.includes(tagKey), onClick: this.handlePriceListModalOpen }, t('ocp_details.actions.price_list')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal(),\n            this.getPriceListModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        if (report && report.meta && report.meta.total) {\n            if (report.meta.total.limit !== null) {\n                const limit = Math.trunc(report.meta.total.limit.value);\n                const limitUnits = t(`units.${unitLookupKey(report.meta.total.limit.units)}`);\n                datum.limit = {\n                    legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    value: Math.trunc(limit),\n                };\n            }\n            if (report.meta.total.request !== null) {\n                const request = Math.trunc(report.meta.total.request.value);\n                const requestUnits = t(`units.${unitLookupKey(report.meta.total.request.units)}`);\n                datum.ranges = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        value: Math.trunc(request),\n                    },\n                ];\n            }\n            if (report.meta.total.usage !== null) {\n                const usage = Math.trunc(report.meta.total.usage.value);\n                const usageUnits = t(`units.${unitLookupKey(report.meta.total.usage.units)}`);\n                datum.usage = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        value: Math.trunc(usage),\n                    },\n                ];\n            }\n        }\n        return datum;\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                    ? [\n                        {\n                            tooltip: cpuDatum.limit.tooltip,\n                            y: cpuDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value ? [{ name: cpuDatum.limit.legend }] : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: cpuDatum.usage.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.usage[0].tooltip,\n                            y: cpuDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                    ? [{ name: cpuDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: cpuDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.ranges[0].tooltip,\n                            y: cpuDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                    ? [{ name: cpuDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width })))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                    ? [\n                        {\n                            tooltip: memoryDatum.limit.tooltip,\n                            y: memoryDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                    ? [{ name: memoryDatum.limit.legend }]\n                    : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: memoryDatum.usage.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.usage[0].tooltip,\n                            y: memoryDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                    ? [{ name: memoryDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: memoryDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.ranges[0].tooltip,\n                            y: memoryDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                    ? [{ name: memoryDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    summary: {\n        paddingTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpReportItems } from 'utils/getComputedOcpReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isDetailsChartModalOpen: false,\n        };\n        this.getItems = (currentTab) => {\n            const { report } = this.props;\n            const computedItems = getComputedOcpReportItems({\n                report,\n                idKey: currentTab,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportFetchStatus, t } = this.props;\n            return (React.createElement(React.Fragment, null,\n                t('group_by.details', { groupBy: 'project' }),\n                React.createElement(\"div\", { className: css(styles.summary) },\n                    React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(OcpReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label.toString(), totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost })))),\n                    this.getViewAll())));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, t } = this.props;\n            const { isDetailsChartModalOpen } = this.state;\n            const currentTab = 'project';\n            const computedItems = this.getItems(currentTab);\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleDetailsChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_details.view_all', { value: currentTab })),\n                    React.createElement(DetailsWidgetModal, { groupBy: currentTab, isOpen: isDetailsChartModalOpen, item: item, onClose: this.handleDetailsChartModalClose, parentGroupBy: groupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleDetailsChartModalClose = (isOpen) => {\n            this.setState({ isDetailsChartModalOpen: isOpen });\n        };\n        this.handleDetailsChartModalOpen = event => {\n            this.setState({ isDetailsChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { reportFetchStatus } = this.props;\n        return (React.createElement(\"div\", null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (this.getSummary())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        Boolean(groupBy === 'cluster') && (React.createElement(DetailsWidget, { groupBy: groupBy, item: item })))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst DetailsTableItem = translate()(connect()(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'infrastructure_cost',\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'derived_cost',\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const derivedCost = this.getDerivedCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, InfrastructureCost) },\n                        { title: React.createElement(\"div\", null, derivedCost) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getDerivedCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.derivedCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.derivedCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructureCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.infrastructureCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = 'iconOverride';\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    Boolean(percentage > 0)\n                        ? t('percent', { value: percentage })\n                        : t('percent_zero'),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'or:tag:';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'cluster') {\n                return [\n                    {\n                        id: 'cluster',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.cluster_select'),\n                        placeholder: t('ocp_details.filter.cluster_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'node') {\n                return [\n                    {\n                        id: 'node',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.node_select'),\n                        placeholder: t('ocp_details.filter.node_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'project') {\n                return [\n                    {\n                        id: 'project',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.project_select'),\n                        placeholder: t('ocp_details.filter.project_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by project tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.tag_select'),\n                        placeholder: t('ocp_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTagKey ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp?${getQuery(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n"],"sourceRoot":""}