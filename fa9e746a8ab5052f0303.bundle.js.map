{"version":3,"sources":["webpack:///./src/pages/ocpDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsTagView.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpDetails/exportModal.styles.ts","webpack:///./src/pages/ocpDetails/exportModal.tsx","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/pages/ocpDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpDetails/historicalChart.tsx","webpack:///./src/pages/ocpDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpDetails/historicalModal.tsx","webpack:///./src/pages/ocpDetails/noRatesState.styles.ts","webpack:///./src/pages/ocpDetails/noRatesState.tsx","webpack:///./src/pages/ocpDetails/priceListTable.tsx","webpack:///./src/pages/ocpDetails/priceListModal.tsx","webpack:///./src/pages/ocpDetails/detailsActions.tsx","webpack:///./src/pages/ocpDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.tsx","webpack:///./src/pages/ocpDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidget.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpDetails/detailsTable.tsx","webpack:///./src/pages/ocpDetails/detailsToolbar.styles.ts","webpack:///./src/pages/ocpDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpDetails/ocpDetails.styles.ts","webpack:///./src/pages/ocpDetails/ocpDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","getForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getSinceDateRangeString","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","isEqual","obj1","obj2","JSON","stringify","split","join","chartStyles","currentRequestData","fill","stroke","strokeDasharray","currentUsageData","itemsPerRow","labels","fontFamily","esm","minWidth","legendColorScale","previousRequestData","previousUsageData","currentColorScale","previousColorScale","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","usageChart_UsageChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","setState","series","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","legendItemsPerRow","ChartLegend","colorScale","getLegendData","gutter","formatDatumValue","formatDatumOptions","childName","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","_","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","maxValue","Math","ceil","currentRequestDate","get_date_default","currentUsageDate","previousRequestDate","previousUsageDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","OcpReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","OcpReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","Tooltip","content","enableFlip","getCostLayout","ocpReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","skeleton","OcpReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","costKey","responsive","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","marginLeft","historicalUsageChart_HistoricalUsageChart","maxCurrentLimit","maxPreviousLimit","xAxisLabel","yAxisLabel","costValue","costLabelUnit","costLabelDate","header","backgroundColor","info","verticalAlign","infoIcon","infoTitle","fontWeight","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","ocpQuery","filter","resolution","time_scope_units","time_scope_value","key_only","ocpReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","onClick","getDropDownTags","val","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","showPopover","handlePopoverClick","show","onGroupByClicked","showContent","sizes","Popover","aria-label","bodyContent","info_circle_icon","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","query","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","ocpReportSummary","_item","DetailsWidgetModal","parentGroupBy","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","currentTarget","sortedItems","selectedLabel","actions","Button","variant","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","groupItem","historicalCostChart_styles_styles","historicalCostChart_HistoricalCostChart","historicalChart_styles_chartStyles","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpReportsActions","HistoricalChart","getSkeleton","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpDashboard","selectCurrentWidgets","HistoricalModal","noRatesState_styles_styles","NoRatesState","money_check_alt_icon","metric","priceListTable","rates","notAvailableText","Table","cells","rows","range_unit","value_unit","range_value","period","Header","Body","priceListModal","priceListProvider","find","p","providerUuid","uuid","priceList","store_priceList","ratesPerProvider","priceListError","priceListStatus","fetch","fetchPriceList","errorState","priceListRates","close","renderContent","detailsActions_tagKey","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isPriceListModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getPriceListModal","handlePriceListModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handlePriceListModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","hasTotal","hasLimit","trunc","limitUnits","hasRequest","requestUnits","hasUsage","cpuDatum","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","summary","viewAllContainer","detailsWidget_reportType","detailsWidget_mapStateToProps","detailsWidget_mapDispatchToProps","DetailsWidget","isDetailsChartModalOpen","currentTab","getSummary","getViewAll","handleDetailsChartModalOpen","button","handleDetailsChartModalClose","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getDerivedCost","getTotalCost","getActions","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","iconOverride","getSortBy","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","detailsToolbar_styles_styles","paginationContainer","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","pagination","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","ocpDetails_styles_styles","ocpDetails","tableContainer","ocpDetails_reportType","ocpDetails_tagKey","ocpDetails_baseQuery","ocpDetails_mapStateToProps","ocpDetails_mapDispatchToProps","getFilterFields","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","history","newFilterType","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","noProvidersState","loadingState"],"mappings":"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","file":"fa9e746a8ab5052f0303.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpDetails from './ocpDetails';\nexport default hot(module)(OcpDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                derivedCost,\n                infrastructureCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", responsive: false, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                    {\n                        data: previousLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(previousLimitData, limitKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousLimitData,\n                    },\n                    {\n                        data: currentLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(currentLimitData, limitKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentLimitData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_md, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { parseQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Popover, Title, TitleSize, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let derivedCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            cost = formatValue(report.meta.total.derived_cost ? report.meta.total.cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            derivedCost = formatValue(report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0, report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.units\n                : 'USD');\n        }\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_details.title')),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('ocp_details.total_cost_tooltip', {\n                            derivedCost,\n                            infrastructureCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) },\n                        t('ocp_details.total_cost'),\n                        React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_details.derived_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_details.derived_cost_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_details.infrastructure_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_details.infrastructure_cost_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetView } from './detailsWidgetView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.widget_modal_title', {\n                parentGroupBy,\n                name: item.label,\n                groupBy,\n            }) },\n            React.createElement(DetailsWidgetView, { groupBy: parentGroupBy, item: item })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpExportActions, ocpExportSelectors } from 'store/ocpExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpExportSelectors.selectExportError(state),\n        export: ocpExportSelectors.selectExport(state),\n        fetchStatus: ocpExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport { getCostRangeString, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 700\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !==\n                this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxCurrentRequest = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxPreviousLimit = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxPreviousRequest = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxPreviousLimit, maxPreviousRequest);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData, } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0\n            ? Math.max(currentRequestDate, previousRequestDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalCostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalCostChart } from 'components/charts/historicalCostChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpReportsActions from 'store/ocpReports/ocpReportsActions';\nimport * as ocpReportsSelectors from 'store/ocpReports/ocpReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const currentInfrastructureCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        const previousCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousInfrastructureCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { containerHeight: chartStyles.chartContainerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureCostData, title: t('ocp_details.historical.cost_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_details.historical.cpu_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_details.historical.memory_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '50vh',\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, TitleSize, } from '@patternfly/react-core';\nimport { MoneyCheckAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './noRatesState.styles';\nconst NoRatesStateBase = ({ t, cluster }) => {\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: MoneyCheckAltIcon }),\n            React.createElement(Title, { size: TitleSize.lg }, t('no_rates_state.title')),\n            React.createElement(EmptyStateBody, null, t('no_rates_state.desc', { cluster })))));\n};\nexport const NoRatesState = translate()(NoRatesStateBase);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport React from 'react';\nimport { formatCurrency } from 'utils/formatValue';\nfunction getUsageRangeText(metric, t) {\n    return metric.range_value[0] === null && metric.range_value[1] === null\n        ? t('ocp_details.price_list.modal.no_range_set')\n        : `${metric.range_value[0] || ' '} - ${metric.range_value[2] || ' '} ${metric.range_unit}`;\n}\nconst PriceListTable = ({ rates, t }) => {\n    const notAvailableText = t('ocp_details.price_list.modal.not_available');\n    return (React.createElement(Table, { \"aria-label\": \"price-list-table\", cells: [\n            t('ocp_details.price_list.modal.metric'),\n            t('ocp_details.price_list.modal.value'),\n            t('ocp_details.price_list.modal.applied_usage_range'),\n            t('ocp_details.price_list.modal.applied_usage_date_range'),\n        ], rows: rates.map(metric => [\n            t(`ocp_details.price_list.modal.${metric.display}`, {\n                index: metric.index + 1,\n                unit: metric.range_unit,\n            }),\n            metric.value\n                ? formatCurrency(metric.value, metric.value_unit)\n                : notAvailableText,\n            getUsageRangeText(metric, t),\n            t(`ocp_details.price_list.modal.${metric.period}`),\n        ]) },\n        React.createElement(TableHeader, null),\n        React.createElement(TableBody, null)));\n};\nexport default PriceListTable;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { priceListActions, priceListSelectors } from 'store/priceList';\nimport { providersSelectors } from 'store/providers';\nimport { styles as chartStyles } from './historicalChart.styles';\nimport { modalOverride, styles } from './historicalModal.styles';\nimport { NoRatesState } from './noRatesState';\nimport PriceListTable from './priceListTable';\nclass PriceListModalBase extends React.Component {\n    componentDidUpdate() {\n        const { fetch, isOpen, providers, priceListStatus: status, name, } = this.props;\n        if (isOpen && status !== 1 /* inProgress */) {\n            const priceListProvider = providers.data.find(p => p.name === name);\n            fetch(priceListProvider ? priceListProvider.uuid : null);\n        }\n    }\n    renderContent() {\n        const { t, providers, name, priceListStatus, priceListError, priceList, } = this.props;\n        if (priceListStatus !== 2 /* complete */) {\n            return (React.createElement(Skeleton, { className: css(chartStyles.chartSkeleton), size: SkeletonSize.md }));\n        }\n        if (priceListError !== null) {\n            return React.createElement(ErrorState, { error: priceListError });\n        }\n        const priceListProvider = providers.data.find(p => p.name === name);\n        const priceListRates = priceListProvider && priceList[priceListProvider.uuid];\n        return priceListRates ? (React.createElement(PriceListTable, { t: t, rates: priceListRates })) : (React.createElement(NoRatesState, { cluster: name.toString() }));\n    }\n    render() {\n        const { t, isOpen, close, name } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: () => close(false), title: t('ocp_details.price_list.modal.title', { name }) }, this.renderContent()));\n    }\n}\nconst PriceListModal = connect(createMapStateToProps((state, props) => {\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, 'type=OCP');\n    const priceListProvider = providers.data.find(p => p.name === props.name);\n    const providerUuid = priceListProvider ? priceListProvider.uuid : null;\n    return {\n        priceList: priceListSelectors.ratesPerProvider(state, providerUuid),\n        priceListError: priceListSelectors.error(state, providerUuid),\n        priceListStatus: priceListSelectors.status(state, providerUuid),\n        providers,\n    };\n}), {\n    fetch: priceListActions.fetchPriceList,\n})(translate()(PriceListModalBase));\nexport default PriceListModal;\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nimport PriceListModal from './priceListModal';\nconst tagKey = 'or:tag:';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isPriceListModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getPriceListModal = () => {\n            const { item: { label }, } = this.props;\n            return (React.createElement(PriceListModal, { name: label, isOpen: this.state.isPriceListModalOpen, close: this.handlePriceListModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handlePriceListModalClose = (isOpen) => {\n            this.setState({ isPriceListModalOpen: isOpen });\n        };\n        this.handlePriceListModalOpen = () => {\n            this.setState({ isPriceListModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handlePriceListModalClose = this.handlePriceListModalClose.bind(this);\n        this.handlePriceListModalOpen = this.handlePriceListModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: groupBy.includes(tagKey), onClick: this.handlePriceListModalOpen }, t('ocp_details.actions.price_list')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal(),\n            this.getPriceListModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n        ];\n        return datum;\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                    ? [\n                        {\n                            tooltip: cpuDatum.limit.tooltip,\n                            y: cpuDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value ? [{ name: cpuDatum.limit.legend }] : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: cpuDatum.usage.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.usage[0].tooltip,\n                            y: cpuDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                    ? [{ name: cpuDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: cpuDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.ranges[0].tooltip,\n                            y: cpuDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                    ? [{ name: cpuDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width })))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                    ? [\n                        {\n                            tooltip: memoryDatum.limit.tooltip,\n                            y: memoryDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                    ? [{ name: memoryDatum.limit.legend }]\n                    : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: memoryDatum.usage.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.usage[0].tooltip,\n                            y: memoryDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                    ? [{ name: memoryDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: memoryDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.ranges[0].tooltip,\n                            y: memoryDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                    ? [{ name: memoryDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    summary: {\n        paddingTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpReportItems } from 'utils/getComputedOcpReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isDetailsChartModalOpen: false,\n        };\n        this.getItems = (currentTab) => {\n            const { report } = this.props;\n            const computedItems = getComputedOcpReportItems({\n                report,\n                idKey: currentTab,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportFetchStatus, t } = this.props;\n            return (React.createElement(React.Fragment, null,\n                t('group_by.details', { groupBy: 'project' }),\n                React.createElement(\"div\", { className: css(styles.summary) },\n                    React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(OcpReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label.toString(), totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost })))),\n                    this.getViewAll())));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, t } = this.props;\n            const { isDetailsChartModalOpen } = this.state;\n            const currentTab = 'project';\n            const computedItems = this.getItems(currentTab);\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleDetailsChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_details.view_all', { value: currentTab })),\n                    React.createElement(DetailsWidgetModal, { groupBy: currentTab, isOpen: isDetailsChartModalOpen, item: item, onClose: this.handleDetailsChartModalClose, parentGroupBy: groupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleDetailsChartModalClose = (isOpen) => {\n            this.setState({ isDetailsChartModalOpen: isOpen });\n        };\n        this.handleDetailsChartModalOpen = event => {\n            this.setState({ isDetailsChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { reportFetchStatus } = this.props;\n        return (React.createElement(\"div\", null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (this.getSummary())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        Boolean(groupBy === 'cluster') && (React.createElement(DetailsWidget, { groupBy: groupBy, item: item })))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst DetailsTableItem = translate()(connect()(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'infrastructure_cost',\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'derived_cost',\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const derivedCost = this.getDerivedCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, InfrastructureCost) },\n                        { title: React.createElement(\"div\", null, derivedCost) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getDerivedCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.derivedCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.derivedCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructureCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.infrastructureCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = percentage !== 0 ? 'iconOverride' : undefined;\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    Boolean(percentage > 0) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'or:tag:';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'cluster') {\n                return [\n                    {\n                        id: 'cluster',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.cluster_select'),\n                        placeholder: t('ocp_details.filter.cluster_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'node') {\n                return [\n                    {\n                        id: 'node',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.node_select'),\n                        placeholder: t('ocp_details.filter.node_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'project') {\n                return [\n                    {\n                        id: 'project',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.project_select'),\n                        placeholder: t('ocp_details.filter.project_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by project tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.tag_select'),\n                        placeholder: t('ocp_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTagKey ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp?${getQuery(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n"],"sourceRoot":""}