{"version":3,"sources":["webpack:///./src/pages/ocpCloudDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTagView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpCloudDetails/exportModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/exportModal.tsx","webpack:///./src/pages/ocpCloudDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalChart.tsx","webpack:///./src/pages/ocpCloudDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsActions.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.tsx","webpack:///./src/pages/ocpCloudDetails/detailsToolbar.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.styles.ts","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpCloudDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getSinceDateRangeString","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","_","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendItemsPerRow","childName","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","marginLeft","historicalTrendChart_HistoricalTrendChart","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpCloudReportSummary","children","detailsLink","subTitle","subTitleTooltip","status","Card","CardHeader","Boolean","Tooltip","content","enableFlip","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpCloudReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","OcpCloudReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpCloudReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","OcpCloudReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","cloudReportType","meta","total","getCostLayout","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","ocpCloudReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpCloudReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpCloudReportSummaryItem","ocpCloudReportSummaryItems_styles_styles","skeleton","OcpCloudReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","ocpCloudReportSummaryTrend_styles_styles","OcpCloudReportSummaryTrend","trendChart","OcpCloudReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","historicalUsageChart_HistoricalUsageChart","maxCurrentLimit","maxPreviousLimit","costValue","costLabelUnit","costLabelDate","header","backgroundColor","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","ocpCloudQuery","filter","resolution","time_scope_units","time_scope_value","key_only","ocpCloudReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","onClick","getDropDownTags","val","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","indexOf","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","ocpCloudReportSummary","_item","DetailsWidgetModal","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpCloudExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","currentTarget","sortedItems","selectedLabel","actions","Button","variant","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpCloudReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpCloudReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalTrendChart","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpCloudDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","trunc","limitUnits","requestUnits","cpuDatum","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","paginationContainer","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","e","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","pagination","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","ocpCloudDetails_styles_styles","ocpCloudDetails","tableContainer","ocpCloudDetails_reportType","ocpCloudDetails_tagKey","ocpCloudDetails_baseQuery","ocpCloudDetails_mapStateToProps","ocpCloudDetails_mapDispatchToProps","getFilterFields","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","history","newFilterType","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"oIAEAA,EAAA,QAAAC,OAAAC,EAAA,IAAAD,CAAAE,EAAA,CAAAC,EAAA,2JCFA,MAAAC,EAAAC,IACA,MAAAC,EAAAD,IAAAE,cAAA,GACA,OAAAD,GACA,UACA,SACA,eACA,YACA,iBACA,UACA,aACA,eACA,OAAAA,EACA,QACA,WAGAE,EAAA,CAAAC,EAAAJ,EAAAK,QACA,MAAAJ,EAAAF,EAAAC,GACAM,EAAAF,GAAA,EACA,OAAAH,GACA,UACA,OAAAM,EAAAD,EAAAL,EAAAI,GACA,SACA,eACA,YACA,aACA,eACA,OAAAG,EAAAF,EAAAL,EAAAI,GACA,iBACA,UACA,OAAAI,EAAAH,EAAAL,EAAAI,GACA,QACA,OAAAK,EAAAJ,EAAAL,EAAAI,KAGAK,EAAA,CAAAN,EAAAO,GAA6CC,iBAAA,QAC7CR,EAAAS,eAAA,MACAC,sBAAAF,EACAG,sBAAAH,IAGAL,EAAA,CAAAH,EAAAJ,GAA6CY,iBAAA,SAC7C,IAAAN,EAAAF,EAIA,OAHAA,IACAE,EAAA,GAEAA,EAAAO,eAAA,MACAG,MAAA,WACAC,SAAAjB,GAAA,MACAc,sBAAAF,EACAG,sBAAAH,KAGAJ,EAAA,CAAAJ,EAAAO,GAA6CC,iBAAA,QAC7CR,EAAAS,eAAA,MACAC,sBAAAF,EACAG,sBAAAH,IAGAH,EAAA,CAAAL,EAAAO,GAA8CC,iBAAA,QAC9CR,EAAAS,eAAA,MACAC,sBAAAF,EACAG,sBAAAH,sGC9DA,MACAM,EAAAC,KAAsCC,cAAAD,IACtCE,GACAC,SACAC,oBAAA,sBACAC,QAAA,UACAC,cAAA,gBACAC,aAAA,gBAEAC,QACAC,WAAA,aACAC,WAAA,cAEAC,OACAC,MAAA,QACAC,KAAA,aACAC,eAAA,iBACAC,eAAA,iBACAC,OAAA,UAEAC,UACAA,SAAA,WACAC,SAAA,WACAC,cAAA,iBACAC,OAAA,UAEAC,YACAC,WAAA,aACAC,SAAA,WACAC,aAAA,eACAC,UAAA,YACAC,cAAA,gBACAC,aAAA,kBACAC,aAAA,kBACAC,aAAA,kBACAC,WAAA,aACAC,YAAA,cACAC,YAAA,cACAC,SAAA,WACAC,gBAAA,kBACAC,UAAA,aAEAC,WACAC,QAAA,UACAC,aAAA,eACA7B,WAAA,aACA8B,oBAAA,sBACAT,WAAA,sBACAU,oBAAA,+BACAC,iBAAA,4BACA/B,WAAA,aACAgC,WAAA,sBACAC,cAAA,gBAEAC,SACAC,IAAA,eACAC,KAAA,oBACAC,SAAA,2gBC7CA,SAAAC,EAAAC,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,QACA,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAAAjF,OAAAkF,EAAA,EAAAlF,CAAA6E,GACA,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAZ,GAAAY,EAAAb,SAGA,SAAAiB,EAAAnB,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,QACA,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAAAjF,OAAA6F,EAAA,EAAA7F,CAAA6E,GACA,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAZ,GAAAY,EAAAb,SAGA,SAAAmB,EAAArB,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,QACA,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAAAjF,OAAA+F,EAAA,EAAA/F,CAAA6E,GACA,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAZ,GAAAY,EAAAb,SAGA,SAAAqB,EAAAvB,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,sBACA,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAAAjF,OAAAiG,EAAA,EAAAjG,CAAA6E,GACA,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAZ,GAAAY,EAAAb,SAGA,SAAAU,EAAA5E,EAAAyF,EAAApB,EAAA,QAqHA,IAAAqB,EA9GA,OACAC,EAPA,SAAAtB,EAAAuB,IAAAH,EAAA1E,IAAA0E,EAAAI,MAQAX,GA4GAQ,EAnHA1F,EAoHA8F,OAAAJ,UAAA,KAnHAK,WAAA/F,EAAAgG,QAAA,IA+GA,SAAAN,GACA,OAAAI,OAAAJ,UAAA,KA/GAO,CAAAjG,GACAA,EACA,GAIAkE,IAAAuB,EAAA1E,GACAmF,KAAAT,EAAA1E,GACAoF,MAAAV,EAAAU,OAiBA,SAAAC,EAAAC,EAAAC,GAAA,EAAAC,GAAA,EAAAC,EAAA,GACA,MAAAC,EAAAC,GAfA,SAAAL,EAAAG,EAAA,GACA,IAAAH,MAAApB,OAAA,CACA,MAAA0B,EAAA,IAAAC,KAMA,OAJAJ,GACAG,EAAAE,SAAAF,EAAAG,WAAAN,IAEAO,IAAAJ,GACAA,GAIA,OAFA,IAAAC,KAAAP,EAAA,GAAAnC,IAAA,aACA,IAAA0C,KAAAP,IAAApB,OAAA,GAAAf,IAAA,cAIA8C,CAAAX,EAAAG,GAKA,GAHAF,GAAAG,EAAAQ,SACAR,EAAAQ,QAAA,GAEAV,GAAAE,EAAAQ,QAAA,CACA,MAAAC,EAAAC,IAAAV,GAAAW,UACAV,EAAAO,QAAAC,GAEA,OAAAT,EAAAC,GAuBA,SAAAW,EAAAhB,GACA,IAAAiB,EAAA,EAQA,OAPAjB,KAAApB,QACAoB,EAAAkB,QAAAC,IACAA,EAAAtC,EAAAoC,IACAA,EAAAE,EAAAtC,KAIAoC,EAEA,SAAAG,EAAA1H,GACA,gBAAAC,EAAAJ,EAAA,KAAAK,MACA,MAAAJ,EAAAN,OAAAmI,EAAA,EAAAnI,CAAAK,GACA,OAAAC,GACA,iBACA,UACA,SACA,eACA,YACA,eACA,OAAA8H,EAAA,EAAAC,mBAAkD/H,KAClDG,SAA8BD,EAAAC,EAAAJ,EAAAK,OAE9B,QACA,SAA0BF,EAAAC,EAAAJ,EAAAK,OAI1B,SAAA4H,EAAAL,EAAAzH,EAAA+H,EAAAzD,EAAA,OAAA8B,GACA,IAAAqB,EAAAtD,IACA,SAEA,YAAAG,EAAA,CAEA,SADA0D,IAAAP,EAAAtD,IAAA,kBAC0BnE,EAAAyH,EAAAtC,EAAAiB,GAAAqB,EAAArB,MAAA2B,KAE1B,OAAAN,EAAAtD,IAAA8D,WAEA,SAAAC,EAAA5B,EAAAnC,EAAA,0BAAAoC,GAAA,EAAAC,GAAA,EAAAC,EAAA,GACA,MAAAC,EAAAC,GAAAN,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAmB,EAAA,EAAAC,EAAA1D,GACAgE,MAAAtC,IAAAc,GACAyB,QAAAJ,IAAArB,EAAA,KACA0B,MAAAtC,OAAAiC,IAAAtB,EAAA,QACA4B,UAAAN,IAAAtB,EAAA,KACA6B,KAAAC,IAAA7B,KAGA,SAAA8B,EAAAnC,EAAAnC,EAAA,2BAAAoC,GAAA,EAAAC,GAAA,EAAAC,EAAA,GACA,OAAAyB,EAAA5B,EAAAnC,EAAAoC,EAAAC,EAAAC,sCCpNA,SAAAiC,EAAAC,EAAAzI,GACA,oBAAAyI,EACA,OAAAA,EAGA,OAAAA,EADAzI,EAAAiE,KAGA,SAAAyE,EAAAC,EAAA3I,GACA,MAAA4I,UAAWA,EAAA,GAA0B5I,MACrC,UAAA2I,GAAAD,KAAA,CAAAG,EAAAC,KACA,MAAAC,EACAP,EADA,IAAAI,EACAC,EACAC,EADA9I,GAEAgJ,EACAR,EADA,IAAAI,EACAE,EACAD,EADA7I,GAEA,OAAA+I,EAAAC,GACA,EAEAD,EAAAC,EACA,EAEA,IAtBAC,EAAAnE,EAAAzF,EAAA,sBAAAqJ,6DCCA,MAAAQ,GACAC,QAAA,GAGA,IAAAC,GACAC,KAAA/J,OAAAgK,UAA0BJ,GAC1BK,KAAAjK,OAAAgK,UAA0BJ,GAC1BM,IAAAlK,OAAAgK,UAAyBJ,GACzBO,QAAAnK,OAAAgK,UAA6BJ,GAC7BQ,YAAApK,OAAAgK,UAAiCJ,GACjCS,MAAArK,OAAAgK,UAA2BJ,GAC3BU,SAAAtK,OAAAgK,UAA8BJ,GAC9BW,MAAAvK,OAAAgK,UAA2BJ,GAC3BY,UACAC,KAAAzK,OAAAgK,UAA0BJ,GAC1Bc,IAAA1K,OAAAgK,UAAyBJ,GACzBe,QAAA3K,OAAAgK,UAA6BJ,GAC7BgB,MAAA5K,OAAAgK,UAA2BJ,GAC3BiB,WACAC,QAAA9K,OAAAgK,UAA6BJ,ICnB7B,MAAAmB,ECEA,KAAA/K,OAAAgL,EAAA,EAAAhL,CAAAiL,EAAA,EAAAC,QAAAD,EAAA,EAAAC,QAAApB,GDFAqB,GACApL,EAAA,mJEDA,SAAAqL,GAAA3G,OAA2CA,EAAAK,QAAAuG,WAAAvG,EAAAC,UAAA,OAAAC,gBAAA,IAC3C,OAAAhF,OAAAsL,EAAA,EAAAtL,CAAAuL,GACA9G,SACAK,QACAuG,WACArG,gBACAD,aAEAJ,IAAAI,EACAuE,UAAAtE,IAGA,SAAAuG,GAAA9G,OAAmDA,EAAAK,QAAAuG,WAAAvG,IACnD,IAAAL,EACA,SAEA,MAAA+G,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAA5D,QAAAvH,IACA,MAAAoL,EAAApL,EAAAoL,SAAApL,EAAAoL,SAAApL,MAAA,EACAqL,EAAArL,EAAAsL,cACAtL,EAAAsL,cACAtL,EAAAqL,QACAE,EAAAvL,EAAAuL,KAAAvL,EAAAuL,KAAAvL,MAAA,EACAwL,EAAAxL,EAAAyL,aAAAzL,EAAAyL,aAAAzL,MAAA,EACA0L,EAAA1L,EAAA2L,oBACA3L,EAAA2L,oBAAA3L,MACA,EAEA4L,EAAA,SAAAvH,GAAA,YAAAA,GAAArE,EAAAqL,YAC0BrL,EAAAqL,UAC1B,GACAtK,KAA8Bf,EAAAqE,KAAeuH,IAC7C,IAAA/F,EAEAA,EADA,YAAA+E,GAAA5K,EAAAsL,cACAtL,EAAAsL,cAEAtL,EAAA4K,aAAArL,OACAS,EAAA4K,GAAA5K,MAGAA,EAAA4K,GAEA,MAAAiB,EAAA7L,EAAA6L,MAAA7L,EAAA6L,MAAA7L,MAAA,EACA8L,EAAA9L,EAAA8L,QAAA9L,EAAA8L,QAAA9L,MAAA,EACA+L,EAAA/L,EAAA+L,MAAA/L,EAAA+L,MAAA/L,MAAA,EACAmG,EAAAnG,EAAA+L,MACA/L,EAAA+L,MAAA5F,MACAnG,EAAAuL,KACAvL,EAAAuL,KAAApF,MACA,MACA4E,EAAAiB,IAAAjL,GAkBAgK,EAAAkB,IAAAlL,EAAAxB,OAAAgK,UAAgDwB,EAAAiB,IAAAjL,IAAoBqK,SAAAL,EAAAiB,IAAAjL,GAAAqK,WAAAG,KAAAR,EAAAiB,IAAAjL,GAAAwK,OAAAC,YAAAT,EAAAiB,IAAAjL,GAAAyK,cAAAE,mBAAAX,EAAAiB,IAAAjL,GAAA2K,qBAAAG,MAAAd,EAAAiB,IAAAjL,GAAA8K,QAAAC,QAAAf,EAAAiB,IAAAjL,GAAA+K,UAAAC,MAAAhB,EAAAiB,IAAAjL,GAAAgL,WAjBpEhB,EAAAkB,IAAAlL,GACAqK,WACAC,UACAE,OACAW,aAAAlM,EAAAmM,cACAC,WAAApM,EAAAqM,YACAb,cACAzK,KACA2K,qBACA7F,QACAgG,QACAC,UACA3F,QACA4F,YAOA,UAAA7H,KAAAgH,EACA,GAAAA,EAAAhH,aAAAoI,MACA,OAAApB,EAAAhH,GAAAqD,QAAA0D,IAOA,OAHAjH,KAAAuI,MACAvI,EAAAuI,KAAAhF,QAAA0D,GAEAqB,MAAAE,KAAAzB,EAAAI,UAEA,SAAAsB,EAAAC,MACA,OAAAA,EAAAC,QACA,UAEAD,EAAArB,QACA,UAEAqB,EAAAE,KACA,OAEA,uJC9FA,SAAAC,GAAA7I,OAAgDA,EAAAK,QAAAuG,WAAAvG,EAAAC,UAAA,OAAAC,gBAAA,IAChD,OAAAhF,OAAAsL,EAAA,EAAAtL,CAAAuN,GACA9I,SACAK,QACAuG,WACArG,gBACAD,aAEAJ,IAAAI,EACAuE,UAAAtE,IAGA,SAAAuI,GAAA9I,OAAwDA,EAAAK,QAAAuG,WAAAvG,IACxD,IAAAL,EACA,SAEA,MAAA+G,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAA5D,QAAAvH,IACA,MAAAoL,EAAApL,EAAAoL,SAAApL,EAAAoL,SAAApL,MAAA,EACAqL,EAAArL,EAAAsL,cACAtL,EAAAsL,cACAtL,EAAAqL,QACAE,EAAAvL,EAAAuL,KAAAvL,EAAAuL,KAAAvL,MAAA,EACAwL,EAAAxL,EAAAyL,aAAAzL,EAAAyL,aAAAzL,MAAA,EACA0L,EAAA1L,EAAA2L,oBACA3L,EAAA2L,oBAAA3L,MACA,EAEA4L,EAAA,SAAAvH,GAAA,YAAAA,GAAArE,EAAAqL,YAC0BrL,EAAAqL,UAC1B,GACAtK,KAA8Bf,EAAAqE,KAAeuH,IAC7C,IAAA/F,EAEAA,EADA,YAAA+E,GAAA5K,EAAAsL,cACAtL,EAAAsL,cAEAtL,EAAA4K,aAAArL,OACAS,EAAA4K,GAAA5K,MAGAA,EAAA4K,GAEA,YAAAA,GAAA5K,EAAA+M,gBACAlH,EAAA7F,EAAA+M,eAEA,MAAAlB,EAAA7L,EAAA6L,MAAA7L,EAAA6L,MAAA7L,MAAA,EACA8L,EAAA9L,EAAA8L,QAAA9L,EAAA8L,QAAA9L,MAAA,EACA+L,EAAA/L,EAAA+L,MAAA/L,EAAA+L,MAAA/L,MAAA,EACAmG,EAAAnG,EAAA+L,MACA/L,EAAA+L,MAAA5F,MACAnG,EAAAuL,KACAvL,EAAAuL,KAAApF,MACA,MACA4E,EAAAiB,IAAAjL,GAkBAgK,EAAAkB,IAAAlL,EAAAxB,OAAAgK,UAAgDwB,EAAAiB,IAAAjL,IAAoBqK,SAAAL,EAAAiB,IAAAjL,GAAAqK,WAAAG,KAAAR,EAAAiB,IAAAjL,GAAAwK,OAAAC,YAAAT,EAAAiB,IAAAjL,GAAAyK,cAAAE,mBAAAX,EAAAiB,IAAAjL,GAAA2K,qBAAAG,MAAAd,EAAAiB,IAAAjL,GAAA8K,QAAAC,QAAAf,EAAAiB,IAAAjL,GAAA+K,UAAAC,MAAAhB,EAAAiB,IAAAjL,GAAAgL,WAjBpEhB,EAAAkB,IAAAlL,GACAqK,WACAC,UACAE,OACAW,aAAAlM,EAAAmM,cACAC,WAAApM,EAAAqM,YACAb,cACAzK,KACA2K,qBACA7F,QACAgG,QACAC,UACA3F,QACA4F,YAOA,UAAA7H,KAAAgH,EACA,GAAAA,EAAAhH,aAAAoI,MACA,OAAApB,EAAAhH,GAAAqD,QAAA0D,IAOA,OAHAjH,KAAAuI,MACAvI,EAAAuI,KAAAhF,QAAA0D,GAEAqB,MAAAE,KAAAzB,EAAAI,UAEA,SAAAsB,EAAAC,MACA,OAAAA,EAAAC,QACA,UAEAD,EAAArB,QACA,UAEAqB,EAAAE,KACA,OAEA,uJCjGA,SAAAI,GAAAhJ,OAA6CA,EAAAK,QAAAuG,WAAAvG,EAAAC,UAAA,OAAAC,gBAAA,IAC7C,OAAAhF,OAAAsL,EAAA,EAAAtL,CAAA0N,GACAjJ,SACAK,QACAuG,WACArG,gBACAD,aAEAJ,IAAAI,EACAuE,UAAAtE,IAGA,SAAA0I,GAAAjJ,OAAqDA,EAAAK,QAAAuG,WAAAvG,IACrD,IAAAL,EACA,SAEA,MAAA+G,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAA5D,QAAAvH,IACA,MAAAuL,EAAAvL,EAAA+L,MAAA/L,EAAA+L,MAAA/L,QAAAuL,KAAAvL,MACAwL,EAAAxL,EAAAyL,aAAAzL,EAAAyL,aAAAzL,MAAA,EACA0L,EAAA1L,EAAA2L,oBACA3L,EAAA2L,oBAAA3L,MACA,EACAe,EAAAf,EAAAqE,GACA,IAAAwB,EAEAA,EADA7F,EAAA4K,aAAArL,OACAS,EAAA4K,GAAA5K,MAGAA,EAAA4K,GAEAG,EAAAiB,IAAAjL,GAiBAgK,EAAAkB,IAAAlL,EAAAxB,OAAAgK,UAAgDwB,EAAAiB,IAAAjL,IAAoBwK,KAAAR,EAAAiB,IAAAjL,GAAAwK,OAAAC,YAAAT,EAAAiB,IAAAjL,GAAAyK,cAAAE,mBAAAX,EAAAiB,IAAAjL,GAAA2K,wBAhBpEX,EAAAkB,IAAAlL,GACAwK,OACAW,aAAAlM,EAAAmM,cACAC,WAAApM,EAAAqM,YACAb,cACAzK,KACA2K,qBACA7F,QACAM,MAAAnG,EAAA+L,MACA/L,EAAA+L,MAAA5F,MACAnG,EAAAuL,KACAvL,EAAAuL,KAAApF,MACA,UAOA,UAAAjC,KAAAgH,EACA,GAAAA,EAAAhH,aAAAoI,MACA,OAAApB,EAAAhH,GAAAqD,QAAA0D,IAOA,OAHAjH,KAAAuI,MACAvI,EAAAuI,KAAAhF,QAAA0D,GAEAqB,MAAAE,KAAAzB,EAAAI,UAEA,SAAAsB,EAAAC,MACA,OAAAA,EAAAQ,kBACA,oBAEAR,EAAAS,cACA,gBAEAT,EAAAU,kBACA,oBAEAV,EAAAW,aACA,eAEA,uJC7EA,SAAAC,GAAAtJ,OAA2CA,EAAAK,QAAAuG,WAAAvG,EAAAC,UAAA,OAAAC,gBAAA,IAC3C,OAAAhF,OAAAsL,EAAA,EAAAtL,CAAAgO,GACAvJ,SACAK,QACAuG,WACArG,gBACAD,aAEAJ,IAAAI,EACAuE,UAAAtE,IAGA,SAAAgJ,GAAAvJ,OAAmDA,EAAAK,QAAAuG,WAAAvG,IACnD,IAAAL,EACA,SAEA,MAAA+G,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAA5D,QAAAvH,IACA,MAAAuL,EAAAvL,EAAA+L,MAAA/L,EAAA+L,MAAA/L,QAAAuL,KAAAvL,MACAwL,EAAAxL,EAAAyL,aAAAzL,EAAAyL,aAAAzL,MAAA,EACA0L,EAAA1L,EAAA2L,oBACA3L,EAAA2L,oBAAA3L,MACA,EACAe,EAAAf,EAAAqE,GACA,IAAAwB,EAEAA,EADA7F,EAAA4K,aAAArL,OACAS,EAAA4K,GAAA5K,MAGAA,EAAA4K,GAEA,YAAAA,GAAA5K,EAAA+M,gBACAlH,EAAA7F,EAAA+M,eAEAhC,EAAAiB,IAAAjL,GAiBAgK,EAAAkB,IAAAlL,EAAAxB,OAAAgK,UAAgDwB,EAAAiB,IAAAjL,IAAoBwK,KAAAR,EAAAiB,IAAAjL,GAAAwK,OAAAC,YAAAT,EAAAiB,IAAAjL,GAAAyK,cAAAE,mBAAAX,EAAAiB,IAAAjL,GAAA2K,wBAhBpEX,EAAAkB,IAAAlL,GACAwK,OACAW,aAAAlM,EAAAmM,cACAC,WAAApM,EAAAqM,YACAb,cACAzK,KACA2K,qBACA7F,QACAM,MAAAnG,EAAA+L,MACA/L,EAAA+L,MAAA5F,MACAnG,EAAAuL,KACAvL,EAAAuL,KAAApF,MACA,UAOA,UAAAjC,KAAAgH,EACA,GAAAA,EAAAhH,aAAAoI,MACA,OAAApB,EAAAhH,GAAAqD,QAAA0D,IAOA,OAHAjH,KAAAuI,MACAvI,EAAAuI,KAAAhF,QAAA0D,GAEAqB,MAAAE,KAAAzB,EAAAI,UAEA,SAAAsB,EAAAC,MACA,OAAAA,EAAAc,QACA,UAEAd,EAAAS,cACA,gBAEAT,EAAAe,OACA,SAEAf,EAAAgB,QACA,UAEA,8FC/EA,MAAAC,EAAAC,EAAA,EAAAC,QACAC,WACAC,SAAAC,EAAA,GAAAhO,yCCAA,MAAAiO,EAAA,IACAC,EAAApF,EAAAqF,cAAA,QAAyCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAAG,YACzCI,EAAApF,EAAAqF,cAAAE,EAAA,gMCDA,SAAAC,EAAAtO,EAAAkE,EAAA,WAAAsC,EAAA,GACA,MAAAG,EAAA,IAAAC,KACAJ,GACAG,EAAAE,SAAAF,EAAAG,WAAAN,GAEA,MAAA4B,EAAAmG,IAAA5H,GACAwB,EAAAqG,IAAA7H,EAAA,KACA0B,EAAAmG,IAAAC,IAAA9H,GAAA,KACA,OAAA+H,EAAA,EAAA9G,EAAA1D,GACAgE,MAAAyG,IAAAhI,GACAwB,UACAC,QACAC,YACArI,UAGA,SAAA4O,EAAA1K,EAAA,cACA,MAAAyC,EAAA,IAAAC,KACAwB,EAAAmG,IAAA5H,GACAwB,EAAAqG,IAAA7H,EAAA,KACA0B,EAAAmG,IAAAC,IAAA9H,GAAA,KACA,OAAA+H,EAAA,EAAA9G,EAAA1D,GACAgE,MAAAyG,IAAAhI,GACAwB,UACAC,QACAC,kMC5BA,MAAAsF,EAAAC,EAAA,EAAAC,QACAC,WACAe,QAAA,OACAC,eAAA,SACAC,OAAA,QACAC,UAAA,SAEAC,aACAD,UAAAhB,EAAA,GAAAhO,yCCmBA,MAAAkP,EAAA3P,OAAA4P,EAAA,EAAA5P,CAAA,CAAA6P,aAGAC,EAAA9P,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAA2P,GACAM,mBAAApN,EAAA,EAAAqN,WADAlQ,eArBA2O,EAAApF,EAAA4G,UACAC,cACAC,SAAAC,WACAC,KAAAC,eAAA,MACA,MAAAnI,EAAmBA,GAAIkI,KAAAE,MACvB,OAAA9B,EAAApF,EAAAqF,cAAA8B,EAAA,EAAA1Q,OAAAgK,QAA6D2G,GAAA,YAAiB3Q,OAAA0B,EAAA,EAAA1B,CAAA0B,EAAA,EAAAkC,UAAAO,gBAAAkE,EAAA,6BAG9E+H,SACA,MAAA/H,EAAeA,GAAIkI,KAAAE,MACnB,OAAA9B,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAAG,YAC5CI,EAAApF,EAAAqF,cAAAgC,EAAA,OACAjC,EAAApF,EAAAqF,cAAAiC,EAAA,GAAqDC,KAAAC,EAAA,IACrDpC,EAAApF,EAAAqF,cAAAoC,EAAA,GAA4CC,KAAA,MAAa5I,EAAA,gCACzDsG,EAAApF,EAAAqF,cAAAsC,EAAA,OAAA7I,EAAA,+BACAsG,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAAsB,cAAqCa,KAAAC,+LCxBjF,MAAAW,GACA3G,QACA4G,QACAC,WAAAC,EAAA,GAAA7Q,MACA+N,SAAA,IAEA+C,SAAA,KAGAC,kBACAF,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,OAEAgR,eACAzE,MACA0E,KAAA,OACAC,OAAAL,EAAA,GAAA7Q,QAGAmR,cACA5E,MACA0E,KAAA,OACAC,OAAA,YAGAE,OACAC,WACAjI,QAAA,IAEAkI,MACAJ,OAAA,QAEAK,OACAL,OAAA,QAEAM,YACAzD,SAAA,IAGA0D,OACAJ,WACAjI,QAAA,IAEAkI,MACAJ,OAAA,QAEAK,OACAL,OAAA,UAIAvD,EAAAC,EAAA,EAAAC,QACA6D,gBACAC,iBACAC,SAAA,oBCrDAC,UAAA3D,EAAApF,EAAA4G,UACAC,cACAC,SAAAC,WACAC,KAAAgC,aAAA5D,EAAApF,EAAAiJ,YACAjC,KAAAV,OACA4C,aAAA,IAAAC,IACAC,MAAA,GAEApC,KAAAqC,UAAA,MACA,MAAAC,YAAmBA,EAAAC,eAAAC,wBAAA,GAA2DxC,KAAAE,MAC9E9L,EAAAoO,EACA,2BACA,0BAEAxC,KAAAyC,UACAC,SAEAjG,KAAA8F,EACAI,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAA8S,EAAAnO,GAAA,QACAyO,QACA1O,KAAA,UAGArD,MAAA8P,EAAAM,gBAGAzE,KAAA6F,EACAK,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAA6S,EAAAlO,GAAA,MACAyO,QACA1O,KAAA,UAGArD,MAAA8P,EAAAS,mBAKArB,KAAA8C,aAAA,MACA9C,KAAAgC,aAAAe,SACA/C,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAe,QAAAC,gBAG/BhD,KAAAiD,SAAA,EAAAP,EAAAQ,KACA,MAAAhB,aAAmBA,GAAelC,KAAAV,MAClC,OAAAlB,EAAApF,EAAAqF,cAAA8E,EAAA,GAAoD1G,KAAAyF,EAAAkB,IAAAF,KAAkD9N,EAAA,OAAlDsN,EAAAjG,KAA4D4G,cAAA,YAAAjP,IAAA,QAAA8O,EAAA9M,KAAA,QAAA8M,EAAApS,MAAA4R,EAAA5R,UAEhHkP,KAAAsD,UAAA,MACA,MAAAlB,MAAmBA,GAAQpC,KAAAV,MAE3B,OAAAlB,EAAApF,EAAAqF,cAAAkF,EAAA,GAAsDC,WAAA5C,EAAAK,iBAAAxE,KAAAuD,KAAAyD,gBAAAC,OAAA,GAAAzE,OAAA,GAAA7I,KAAA,SAAAuN,YAAAvB,EAAA,4BAAAtR,MAAA8P,EAAA3G,WAEtD+F,KAAAjI,gBAAA,GAAiCL,YACjC,MAAAkM,iBAAmBA,EAAAC,qBAAAxN,SAA8C2J,KAAAE,MACjE,OAAAzQ,OAAAmT,EAAA,EAAAnT,CAAAiI,EAAAjI,OAAAmT,EAAA,EAAAnT,CAAAmU,GAAAC,EAAA,OAAAxN,KAIA2J,KAAA8D,kBAAA5D,KACAF,KAAAV,MAAA4C,aAAA6B,OAAA7D,EAAAgD,QACAlD,KAAAV,MAAA4C,aAAA8B,IAAA9D,EAAAgD,OAEAlD,KAAAyC,UAA2BP,aAAA,IAAAC,IAAAnC,KAAAV,MAAA4C,kBAG3BlC,KAAAiE,gBAAA,MACA,MAAAvB,OAAmBA,GAAS1C,KAAAV,MAE5B4E,KAQA,OAPAxB,GACAA,EAAAjL,QAAA,CAAA0M,EAAAjB,MACAlD,KAAAoE,eAAAlB,IAAAiB,EAAA1H,MAAA,IAAA0H,EAAA1H,KAAAtH,SACA+O,EAAAG,KAAAnB,KAIAgB,EAAA/O,UAAAuN,IAAAvN,OAAA,KAGA6K,KAAAoE,eAAAlB,KACA,MAAAhB,aAAmBA,GAAelC,KAAAV,MAClC,OAAA4C,EAAAkB,IAAAF,KAGAlD,KAAAsE,cAAA,MACA,MAAA5B,OAAmBA,GAAS1C,KAAAV,MAC5BiF,KAOA,OANA7B,GACAA,EAAA9N,IAAA,CAAA4P,EAAAtB,KAEAqB,EAAAF,aAAwCnB,OAGxCqB,IAGAvE,KAAAyE,UAAA,MAOA,OANAhV,OAAAiV,EAAA,EAAAjV,EACAkV,WAAA3E,KAAAsE,gBACAM,SAAA5E,KAAAoE,eACAS,WAAA,SACAC,cAAA9E,KAAA8D,sBAKA9D,KAAAyD,cAAA,MACA,MAAAvB,aAAmBA,EAAAQ,UAAuB1C,KAAAV,MAC1C,GAAAoD,EAAA,CAIA,OAHAA,EAAA9N,IAAA,CAAAuP,EAAAjB,IACAzT,OAAAgK,UAA2C0K,EAAAxB,WAAAlT,OAAAiV,EAAA,EAAAjV,CAAAyS,EAAAkB,IAAAF,SAM3CrD,oBACAkF,WAAA,KACA/E,KAAAgC,aAAAe,SACA/C,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAe,QAAAC,cAE/BgC,OAAAC,iBAAA,SAAAjF,KAAA8C,gBAEA9C,KAAAqC,YAEAxC,mBAAAqF,GACAA,EAAA5C,cAAAtC,KAAAE,MAAAoC,aACA4C,EAAA3C,eAAAvC,KAAAE,MAAAqC,cACAvC,KAAAqC,YAGAxC,uBACAmF,OAAAG,oBAAA,SAAAnF,KAAA8C,cAEAjD,YACA,MAAAyC,YAAeA,EAAAC,gBAA4BvC,KAAAE,MAC3CkF,GAAwBvP,GAAA,OACxBwP,EAAA/C,EAAA7S,OAAAmT,EAAA,EAAAnT,CAAA6S,GAAA,EACAgD,EAAA/C,EAAA9S,OAAAmT,EAAA,EAAAnT,CAAA8S,GAAA,EACAgD,EAAAC,KAAAhO,IAAA6N,EAAAC,GACA9N,EAAA+N,EAAA,EAAAC,KAAAC,KAAAF,EAAA,GAAAA,GAAA,EAIA,OAHA/N,EAAA,IACA4N,EAAAhQ,GAAA,EAAAoC,IAEA4N,EAEAvF,aACA,MAAAyC,YAAeA,EAAAC,gBAA4BvC,KAAAE,MAC3CwF,EAAAnD,EACAoD,IAAAlW,OAAAmT,EAAA,EAAAnT,CAAA8S,GAAA,UACA,EACAqD,EAAAtD,EACAqD,IAAAlW,OAAAmT,EAAA,EAAAnT,CAAA6S,GAAA,UACA,EACA,OAAAsD,EAAA,GAAAF,EAAA,EACAF,KAAAhO,IAAAoO,EAAAF,GACA,GAEA7F,SACA,MAAAgG,sBAAeA,EAAA5G,SAAA6G,kBAAA7G,EAAA3F,UAAAyM,SAA2E/F,KAAAE,OAC1FwC,OAAeA,EAAAN,SAAgBpC,KAAAV,MAC/B2E,EAAAjE,KAAAiE,kBACAjG,EAAAI,EAAApF,EAAAqF,cAAA2H,EAAA,GAAuEC,cAAAhC,EAAAiC,wBAAA,EAAArF,OAAAoD,OAAAkC,EAAAnG,KAAAjI,gBAAAqO,iBAAA,MACvEhB,EAAApF,KAAAqG,YACAhO,EAAA2H,KAAAsG,aACAC,EAAAf,KAAAgB,MAAAnO,EAAA,GACAoO,EAAAZ,EACAzD,EAAA,IACA0D,EACAA,EAAA,GACAA,EACA,OAAA1H,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAA+D,gBAAA8E,IAAA1G,KAAAgC,aAAAlR,OAAwEmO,OAAAwH,IACpHrI,EAAApF,EAAAqF,cAAA,WAAA0H,GACA3H,EAAApF,EAAAqF,cAAAsI,EAAA,GAAwCC,mBAAA5I,EAAAoH,SAAAyB,OAAA7G,KAAAyE,YAAAxF,SAAA6H,gBAAA9G,KAAAsD,YAAAyD,WAAA/G,KAAAyD,gBAAAuD,eAAA,cAAA1N,UAAA2N,MAAAC,EAAA,EAAA9E,SACxCM,GACAA,EAAA9N,IAAA,CAAAuP,EAAAjB,IACAlD,KAAAiD,SAAAkB,EAAAjB,IAEA9E,EAAApF,EAAAqF,cAAA8I,EAAA,GAAgDrW,MAAA8P,EAAAe,MAAAyF,YAAA,EAAAb,EAAAlO,KAChD+F,EAAApF,EAAAqF,cAAA8I,EAAA,GAAgDE,eAAA,EAAAvW,MAAA8P,EAAAU,6EC3LhD,SAAAgG,EAAAC,EAAAC,GACA,IAAAxO,EAAAyO,KAAAC,UAAAH,GACAtO,EAAAwO,KAAAC,UAAAF,GAOA,OANAxO,IACAA,EAAA,IAEAC,IACAA,EAAA,IAEAD,EACA2O,MAAA,IACA9O,OACA+O,KAAA,MACA3O,EACA0O,MAAA,IACA9O,OACA+O,KAAA,oNCdA,MAAAhH,GACAiH,oBACApL,MACA0E,KAAA,OACAC,OAAA,UACA0G,gBAAA,QAGAC,kBACAtL,MACA0E,KAAA,OACAC,OAAA,YAGA4G,YAAA,EACA/N,QACA4G,QACAC,WAAAC,EAAA,GAAA7Q,MACA+N,SAAA,IAEA+C,SAAA,KAGAC,kBACAF,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,OAEA+X,qBACAxL,MACA0E,KAAA,OACAC,OAAAL,EAAA,GAAA7Q,MACA4X,gBAAA,QAGAI,mBACAzL,MACA0E,KAAA,OACAC,OAAAL,EAAA,GAAA7Q,QAIAiY,mBACApH,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,OAGAkY,oBACArH,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,OAEAoR,OACAC,WACAjI,QAAA,IAEAkI,MACAJ,OAAA,QAEAK,OACAL,OAAA,QAEAM,YACAzD,SAAA,IAGA0D,OACAJ,WACAjI,QAAA,IAEAkI,MACAJ,OAAA,QAEAK,OACAL,OAAA,UAIAvD,EAAAC,EAAA,EAAAC,QACA6D,gBACAC,iBACAC,SAAA,WAEA5C,UAAA6B,EAAA,GAAA7Q,eChFAmY,UAAAjK,EAAApF,EAAA4G,UACAC,cACAC,SAAAC,WACAC,KAAAgC,aAAA5D,EAAApF,EAAAiJ,YACAjC,KAAAV,OACA4C,aAAA,IAAAC,IACAC,MAAA,GAEApC,KAAAqC,UAAA,MACA,MAAAwF,mBAAmBA,EAAAE,mBAAAE,sBAAAC,qBAAgFlI,KAAAE,MAInGF,KAAAyC,UACAC,SAEAjG,KAAAyL,EACAvF,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAAyY,EARA,4BAQA,QACArF,QACA1O,KAAA,UAGArD,MAAA8P,EAAAsH,oBAGAzL,KAAAsL,EACApF,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAAsY,EAlBA,4BAkBA,MACAlF,QACA1O,KAAA,UAGArD,MAAA8P,EAAAmH,mBAGAtL,KAAAwL,EACAtF,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAAwY,EA3BA,+BA2BA,QACApF,QACA1O,KAAA,SAGArD,MAAA8P,EAAAqH,sBAGAxL,KAAAoL,EACAlF,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAAoY,EArCA,+BAqCA,MACAhF,QACA1O,KAAA,SAGArD,MAAA8P,EAAAiH,yBAKA7H,KAAA8C,aAAA,MACA9C,KAAAgC,aAAAe,SACA/C,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAe,QAAAC,gBAG/BhD,KAAAiD,SAAA,EAAAP,EAAAQ,KACA,MAAAhB,aAAmBA,GAAelC,KAAAV,MAClC,OAAAlB,EAAApF,EAAAqF,cAAA8E,EAAA,GAAoD1G,KAAAyF,EAAAkB,IAAAF,KAAkD9N,EAAA,OAAlDsN,EAAAjG,KAA4D4G,cAAA,YAAAjP,IAAA,QAAA8O,EAAA9M,KAAA,QAAA8M,EAAApS,MAAA4R,EAAA5R,UAEhHkP,KAAAsD,UAAA,MACA,MAAAgF,kBAAmBA,GAAoBtI,KAAAE,OACvCkC,MAAmBA,GAAQpC,KAAAV,MAE3B0I,EAAAM,IAEAlG,EAAA,IACAxB,EAAAoH,YACA,GACA,OAAA5J,EAAApF,EAAAqF,cAAAkF,EAAA,GAAsDC,WAAA5C,EAAAK,iBAAAxE,KAAAuD,KAAAyD,gBAAAxE,OAAA,GAAAyE,OAAA,GAAAsE,cAAA5R,KAAA,SAAAtF,MAAA8P,EAAA3G,WAEtD+F,KAAAjI,gBAAA,GAAiCL,YACjC,MAAAkM,iBAAmBA,EAAAC,sBAAuC7D,KAAAE,MAC1DhQ,EAAAT,OAAAmT,EAAA,EAAAnT,CAAAiI,EAAAjI,OAAAmT,EAAA,EAAAnT,CAAAmU,GAAAC,EAAA,QACA,yBAAAnM,EAAA6Q,WACA,oBAAA7Q,EAAA6Q,UACA/I,EAAA,EAAA1H,EAAA,0BAA4D5H,UAE5D,iBAAAwH,EAAA6Q,WACA,kBAAA7Q,EAAA6Q,UACA/I,EAAA,EAAA1H,EAAA,uBAAyD5H,UAEzDA,IAIA8P,KAAA8D,kBAAA5D,KACAF,KAAAV,MAAA4C,aAAA6B,OAAA7D,EAAAgD,QACAlD,KAAAV,MAAA4C,aAAA8B,IAAA9D,EAAAgD,OAEAlD,KAAAyC,UAA2BP,aAAA,IAAAC,IAAAnC,KAAAV,MAAA4C,kBAG3BlC,KAAAiE,gBAAA,MACA,MAAAvB,OAAmBA,GAAS1C,KAAAV,MAE5B4E,KAQA,OAPAxB,GACAA,EAAAjL,QAAA,CAAA0M,EAAAjB,MACAlD,KAAAoE,eAAAlB,IAAAiB,EAAA1H,MAAA,IAAA0H,EAAA1H,KAAAtH,SACA+O,EAAAG,KAAAnB,KAIAgB,EAAA/O,UAAAuN,IAAAvN,OAAA,KAGA6K,KAAAoE,eAAAlB,KACA,MAAAhB,aAAmBA,GAAelC,KAAAV,MAClC,OAAA4C,EAAAkB,IAAAF,KAGAlD,KAAAsE,cAAA,MACA,MAAA5B,OAAmBA,GAAS1C,KAAAV,MAC5BiF,KAOA,OANA7B,GACAA,EAAA9N,IAAA,CAAA4P,EAAAtB,KAEAqB,EAAAF,aAAwCnB,OAGxCqB,IAGAvE,KAAAyE,UAAA,MAOA,OANAhV,OAAAiV,EAAA,EAAAjV,EACAkV,WAAA3E,KAAAsE,gBACAM,SAAA5E,KAAAoE,eACAS,WAAA,SACAC,cAAA9E,KAAA8D,sBAKA9D,KAAAyD,cAAA,MACA,MAAAvB,aAAmBA,EAAAQ,UAAuB1C,KAAAV,MAC1C,GAAAoD,EAAA,CAIA,OAHAA,EAAA9N,IAAA,CAAAuP,EAAAjB,IACAzT,OAAAgK,UAA2C0K,EAAAxB,WAAAlT,OAAAiV,EAAA,EAAAjV,CAAAyS,EAAAkB,IAAAF,SAM3CrD,oBACAkF,WAAA,KACA/E,KAAAgC,aAAAe,SACA/C,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAe,QAAAC,cAE/BgC,OAAAC,iBAAA,SAAAjF,KAAA8C,gBAEA9C,KAAAqC,YAEAxC,mBAAAqF,GACAA,EAAA2C,qBAAA7H,KAAAE,MAAA2H,oBACA3C,EAAA6C,mBAAA/H,KAAAE,MAAA6H,kBACA7C,EAAA+C,sBAAAjI,KAAAE,MAAA+H,qBACA/C,EAAAgD,oBAAAlI,KAAAE,MAAAgI,mBACAlI,KAAAqC,YAGAxC,uBACAmF,OAAAG,oBAAA,SAAAnF,KAAA8C,cAEAjD,YACA,MAAAgI,mBAAeA,EAAAE,mBAAAE,sBAAAC,qBAAgFlI,KAAAE,MAC/FkF,GAAwBvP,GAAA,OACxB2S,EAAAX,EACApY,OAAAmT,EAAA,EAAAnT,CAAAoY,GACA,EACAY,EAAAV,EACAtY,OAAAmT,EAAA,EAAAnT,CAAAsY,GACA,EACAW,EAAAT,EACAxY,OAAAmT,EAAA,EAAAnT,CAAAwY,GACA,EACAU,EAAAT,EACAzY,OAAAmT,EAAA,EAAAnT,CAAAyY,GACA,EACA3C,EAAAC,KAAAhO,IAAAgR,EAAAC,EAAAC,EAAAC,GACAnR,EAAA+N,EAAA,EAAAC,KAAAC,KAAAF,EAAA,GAAAA,GAAA,EAIA,OAHA/N,EAAA,IACA4N,EAAAhQ,GAAA,EAAAoC,IAEA4N,EAEAvF,aACA,MAAAgI,mBAAeA,EAAAE,mBAAAE,sBAAAC,qBAAgFlI,KAAAE,MAC/F0I,EAAAf,EACAlC,IAAAlW,OAAAmT,EAAA,EAAAnT,CAAAoY,GAAA,UACA,EACAgB,EAAAd,EACApC,IAAAlW,OAAAmT,EAAA,EAAAnT,CAAAsY,GAAA,UACA,EACAe,EAAAb,EACAtC,IAAAlW,OAAAmT,EAAA,EAAAnT,CAAAwY,GAAA,UACA,EACAc,EAAAb,EACAvC,IAAAlW,OAAAmT,EAAA,EAAAnT,CAAAyY,GAAA,UACA,EACA,OAAAU,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,EACAvD,KAAAhO,IAAAoR,EAAAC,EAAAC,EAAAC,GACA,GAEAlJ,SACA,MAAAgG,sBAAeA,EAAA5G,SAAA6G,kBAAA7G,EAAA3F,UAAAyM,SAA2E/F,KAAAE,OAC1FwC,OAAeA,EAAAN,SAAgBpC,KAAAV,MAC/B2E,EAAAjE,KAAAiE,kBACAjG,EAAAI,EAAApF,EAAAqF,cAAA2H,EAAA,GAAuEC,cAAAhC,EAAAiC,wBAAA,EAAArF,OAAAoD,OAAAkC,EAAAnG,KAAAjI,gBAAAqO,iBAAA,MACvEhB,EAAApF,KAAAqG,YACAhO,EAAA2H,KAAAsG,aACAC,EAAAf,KAAAgB,MAAAnO,EAAA,GACAoO,EAAAZ,EACAzD,EAAA,IACA0D,EACAA,EAAA,GACAA,EACA,OAAA1H,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAA+D,gBAAA8E,IAAA1G,KAAAgC,aAAAlR,OAAwEmO,OAAAwH,IACpHrI,EAAApF,EAAAqF,cAAA,WAAA0H,GACA3H,EAAApF,EAAAqF,cAAAsI,EAAA,GAAwCC,mBAAA5I,EAAAoH,SAAAyB,OAAA7G,KAAAyE,YAAAxF,SAAA6H,gBAAA9G,KAAAsD,YAAAyD,WAAA/G,KAAAyD,gBAAAuD,eAAA,cAAA1N,UAAA2N,MAAAC,EAAA,EAAA9E,SACxCM,GACAA,EAAA9N,IAAA,CAAAuP,EAAAjB,IACAlD,KAAAiD,SAAAkB,EAAAjB,IAEA9E,EAAApF,EAAAqF,cAAA8I,EAAA,GAAgDrW,MAAA8P,EAAAe,MAAAyF,YAAA,EAAAb,EAAAlO,KAChD+F,EAAApF,EAAAqF,cAAA8I,EAAA,GAAgDE,eAAA,EAAAvW,MAAA8P,EAAAU,kNCjPhD,MAAAV,GACAS,cACA5E,MACA0E,KAAA,OACAC,OAAA,YAGAnH,QACA4G,QACAC,WAAAC,EAAA,GAAA7Q,MACA+N,SAAA,KAIAgD,kBACAF,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,OAEA8X,YAAA,EACA9G,eACAzE,MACA0E,KAAA,OACAC,OAAAL,EAAA,GAAA7Q,QAGAoR,OACAC,WACAjI,QAAA,IAEAkI,MACAJ,OAAA,QAEAK,OACAL,OAAA,QAEAM,YACAzD,SAAA,IAGA0D,OACAJ,WACAjI,QAAA,IAEAkI,MACAJ,OAAA,QAEAK,OACAL,OAAA,UAIAvD,EAAAC,EAAA,EAAAC,QACAjE,OACAoF,UAAA6B,EAAA,GAAA7Q,OAEA0R,gBACAC,iBACAC,SAAA,YAGAiE,OACAiD,WAAA,IAAAjI,EAAA,GAAA7Q,eC3DA+Y,UAAA7K,EAAApF,EAAA4G,UACAC,cACAC,SAAAC,WACAC,KAAAgC,aAAA5D,EAAApF,EAAAiJ,YACAjC,KAAAV,OACA4C,aAAA,IAAAC,IACAC,MAAA,GAEApC,KAAAqC,UAAA,MACA,MAAAC,YAAmBA,EAAAC,eAAAC,wBAAA,GAA2DxC,KAAAE,MAC9E9L,EAAAoO,EACA,2BACA,0BAEAxC,KAAAyC,UACAC,SAEAjG,KAAA8F,EACAI,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAA8S,EAAAnO,GAAA,QACAyO,QACA1O,KAAA,UAGArD,MAAA8P,EAAAM,gBAGAzE,KAAA6F,EACAK,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAA6S,EAAAlO,GAAA,MACAyO,QACA1O,KAAA,UAGArD,MAAA8P,EAAAS,mBAKArB,KAAA8C,aAAA,MACA9C,KAAAgC,aAAAe,SACA/C,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAe,QAAAC,gBAG/BhD,KAAAiD,SAAA,EAAAP,EAAAQ,KACA,MAAAhB,aAAmBA,GAAelC,KAAAV,MAClC,OAAAlB,EAAApF,EAAAqF,cAAA8E,EAAA,GAAoD1G,KAAAyF,EAAAkB,IAAAF,KAAkD9N,EAAA,OAAlDsN,EAAAjG,KAA4D4G,cAAA,YAAAjP,IAAA,QAAA8O,EAAA9M,KAAA,QAAA8M,EAAApS,MAAA4R,EAAA5R,UAEhHkP,KAAAsD,UAAA,MACA,MAAAgF,kBAAmBA,GAAoBtI,KAAAE,MACvC,OAAA9B,EAAApF,EAAAqF,cAAAkF,EAAA,GAAsDC,WAAA5C,EAAAK,iBAAAxE,KAAAuD,KAAAyD,gBAAAC,OAAA,GAAAzE,OAAA,GAAA+I,YAAAM,EAAAlS,KAAA,SAAAtF,MAAA8P,EAAA3G,WAEtD+F,KAAAjI,gBAAA,GAAiCL,YACjC,MAAAkM,iBAAmBA,EAAAC,sBAAuC7D,KAAAE,MAC1D,OAAAzQ,OAAAmT,EAAA,EAAAnT,CAAAiI,EAAAjI,OAAAmT,EAAA,EAAAnT,CAAAmU,GAAAC,EAAA,UAIA7D,KAAA8D,kBAAA5D,KACAF,KAAAV,MAAA4C,aAAA6B,OAAA7D,EAAAgD,QACAlD,KAAAV,MAAA4C,aAAA8B,IAAA9D,EAAAgD,OAEAlD,KAAAyC,UAA2BP,aAAA,IAAAC,IAAAnC,KAAAV,MAAA4C,kBAG3BlC,KAAAiE,gBAAA,MACA,MAAAvB,OAAmBA,GAAS1C,KAAAV,MAE5B4E,KAQA,OAPAxB,GACAA,EAAAjL,QAAA,CAAA0M,EAAAjB,MACAlD,KAAAoE,eAAAlB,IAAAiB,EAAA1H,MAAA,IAAA0H,EAAA1H,KAAAtH,SACA+O,EAAAG,KAAAnB,KAIAgB,EAAA/O,UAAAuN,IAAAvN,OAAA,KAGA6K,KAAAoE,eAAAlB,KACA,MAAAhB,aAAmBA,GAAelC,KAAAV,MAClC,OAAA4C,EAAAkB,IAAAF,KAGAlD,KAAAsE,cAAA,MACA,MAAA5B,OAAmBA,GAAS1C,KAAAV,MAC5BiF,KAOA,OANA7B,GACAA,EAAA9N,IAAA,CAAA4P,EAAAtB,KAEAqB,EAAAF,aAAwCnB,OAGxCqB,IAGAvE,KAAAyE,UAAA,MAOA,OANAhV,OAAAiV,EAAA,EAAAjV,EACAkV,WAAA3E,KAAAsE,gBACAM,SAAA5E,KAAAoE,eACAS,WAAA,SACAC,cAAA9E,KAAA8D,sBAKA9D,KAAAyD,cAAA,MACA,MAAAvB,aAAmBA,EAAAQ,UAAuB1C,KAAAV,MAC1C,GAAAoD,EAAA,CAIA,OAHAA,EAAA9N,IAAA,CAAAuP,EAAAjB,IACAzT,OAAAgK,UAA2C0K,EAAAxB,WAAAlT,OAAAiV,EAAA,EAAAjV,CAAAyS,EAAAkB,IAAAF,SAM3CrD,oBACAkF,WAAA,KACA/E,KAAAgC,aAAAe,SACA/C,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAe,QAAAC,cAE/BgC,OAAAC,iBAAA,SAAAjF,KAAA8C,gBAEA9C,KAAAqC,YAEAxC,mBAAAqF,GACAA,EAAA5C,cAAAtC,KAAAE,MAAAoC,aACA4C,EAAA3C,eAAAvC,KAAAE,MAAAqC,cACAvC,KAAAqC,YAGAxC,uBACAmF,OAAAG,oBAAA,SAAAnF,KAAA8C,cAEAjD,YACA,MAAAyC,YAAeA,EAAAC,gBAA4BvC,KAAAE,MAC3CkF,GAAwBvP,GAAA,OACxBwP,EAAA/C,EAAA7S,OAAAmT,EAAA,EAAAnT,CAAA6S,GAAA,EACAgD,EAAA/C,EAAA9S,OAAAmT,EAAA,EAAAnT,CAAA8S,GAAA,EACAgD,EAAAC,KAAAhO,IAAA6N,EAAAC,GACA9N,EAAA+N,EAAA,EAAAC,KAAAC,KAAAF,EAAA,GAAAA,GAAA,EAIA,OAHA/N,EAAA,IACA4N,EAAAhQ,GAAA,EAAAoC,IAEA4N,EAEAvF,aACA,MAAAyC,YAAeA,EAAAC,gBAA4BvC,KAAAE,MAC3CwF,EAAAnD,EACAoD,IAAAlW,OAAAmT,EAAA,EAAAnT,CAAA8S,GAAA,UACA,EACAqD,EAAAtD,EACAqD,IAAAlW,OAAAmT,EAAA,EAAAnT,CAAA6S,GAAA,UACA,EACA,OAAAsD,EAAA,GAAAF,EAAA,EACAF,KAAAhO,IAAAoO,EAAAF,GACA,GAEA7F,SACA,MAAAZ,OAAeA,EAAA6G,kBAAA7G,EAAA3F,UAAAyM,QAAAmD,aAAAC,cAA4EnJ,KAAAE,OAC3FwC,OAAeA,EAAAN,SAAgBpC,KAAAV,MAC/B2E,EAAAjE,KAAAiE,kBACAjG,EAAAI,EAAApF,EAAAqF,cAAA2H,EAAA,GAAuEC,cAAAhC,EAAAiC,wBAAA,EAAArF,OAAAoD,OAAAkC,EAAAnG,KAAAjI,gBAAAqO,iBAAA,MACvEhB,EAAApF,KAAAqG,YACAhO,EAAA2H,KAAAsG,aACAC,EAAAf,KAAAgB,MAAAnO,EAAA,GACA,OAAA+F,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAA+D,gBAAA8E,IAAA1G,KAAAgC,cAC5C5D,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAAkI,QAA+BA,GACvE3H,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAA/D,OAAAhJ,OAAuCmO,OAAA6G,IAC/E1H,EAAApF,EAAAqF,cAAAsI,EAAA,GAA4CC,mBAAA5I,EAAAoH,SAAAyB,OAAA7G,KAAAyE,YAAAxF,SAAA6H,gBAAA9G,KAAAsD,YAAAyD,WAAA/G,KAAAyD,gBAAAuD,eAAA,SAAA1N,UAAA2N,MAAAC,EAAA,EAAA9E,SAC5CM,GACAA,EAAA9N,IAAA,CAAAuP,EAAAjB,IACAlD,KAAAiD,SAAAkB,EAAAjB,IAEA9E,EAAApF,EAAAqF,cAAA8I,EAAA,GAAoDpR,MAAAmT,EAAApY,MAAA8P,EAAAe,MAAAyF,YAAA,EAAAb,EAAAlO,KACpD+F,EAAApF,EAAAqF,cAAA8I,EAAA,GAAoDE,eAAA,EAAAtR,MAAAoT,EAAArY,MAAA8P,EAAAU,2LCpLpD,MAAAzD,EAAAC,EAAA,EAAAC,QACAqL,eACAnK,OAAA,QACAoK,aAAAtI,EAAA,GAAA7Q,MACAgP,UAAA6B,EAAA,GAAA7Q,OAEAoZ,gBACApK,UAAA6B,EAAA,GAAA7Q,OAEAqZ,eACAtK,OAAA,QAEAuK,UACAzK,QAAA,eACAd,SAAA8C,EAAA,GAAA7Q,MACAuZ,MAAA1I,EAAA,GAAA2I,IACAL,aAAA,OCDAM,EAAAla,OAAA+P,EAAA,EAAA/P,GAXA,EAAoCma,WAAAC,cAAA9D,QAAA+D,WAAAC,kBAAAD,EAAAE,SAAAlS,OAAiFsG,EAAApF,EAAAqF,cAAA4L,EAAA,GAAiC3L,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAA0L,gBACtJnL,EAAApF,EAAAqF,cAAA6L,EAAA,OACA9L,EAAApF,EAAAqF,cAAAoC,EAAA,GAAoCC,KAAA,MAAaqF,GACjDoE,QAAAL,IAAA1L,EAAApF,EAAAqF,cAAA+L,EAAA,GAA4DC,QAAAN,EAAAO,YAAA,GAC5DlM,EAAApF,EAAAqF,cAAA,KAAsCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAA2L,WAAkCM,KACxE1L,EAAApF,EAAAqF,cAAAkM,EAAA,WAAAP,EAAA5L,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACApM,EAAApF,EAAAqF,cAAAoM,EAAA,UAAuC/J,KAAA+J,EAAA,aAAAC,KACvCtM,EAAApF,EAAAqF,cAAAoM,EAAA,UAAuCnM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAAuL,eAAA1I,KAAA+J,EAAA,aAAAE,KACvCvM,EAAApF,EAAAqF,cAAAoM,EAAA,UAAuC/J,KAAA+J,EAAA,aAAAG,KACvCxM,EAAApF,EAAAqF,cAAAoM,EAAA,UAAuCnM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAAyL,gBAAA5I,KAAA+J,EAAA,aAAAC,MAA+D,GACtGP,QAAAN,IAAAzL,EAAApF,EAAAqF,cAAAwM,EAAA,OAAAhB,2BCdA,MAAAiB,EAAAhN,EAAA,EAAAC,QACAqL,eACAnK,OAAA,QACAoK,aAAAtI,EAAA,GAAA7Q,MACAgP,UAAA6B,EAAA,GAAA7Q,OAEA8N,WACAe,QAAA,QAEAtD,MACAsP,SAAA,EACAC,UAAA,QACAC,YAAAlK,EAAA,GAAA7Q,OAEAoZ,gBACApK,UAAA6B,EAAA,GAAA7Q,OAEAqZ,eACAtK,OAAA,QAEAuK,UACAzK,QAAA,eACAd,SAAA8C,EAAA,GAAA7Q,MACAuZ,MAAA1I,EAAA,GAAA2I,IACAL,aAAA,KAEA6B,MACAH,SAAA,EACA7L,UAAA6B,EAAA,GAAA7Q,SCNAib,EAAA1b,OAAA+P,EAAA,EAAA/P,GAlBA,EAAuCma,WAAAC,cAAAG,SAAAF,WAAAC,kBAAAD,EAAAhS,IAAAsT,OAAArF,WAAuF3H,EAAApF,EAAAqF,cAAA4L,EAAA,GAAiC3L,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAqb,EAAAvB,gBAC/JnL,EAAApF,EAAAqF,cAAAgN,EAAA,GAA+B3H,OAAA,MAC/BtF,EAAApF,EAAAqF,cAAAiN,EAAA,GAAuCC,GAAA,EAAAC,GAAA,GACvCpN,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAqb,EAAArP,OACxC2C,EAAApF,EAAAqF,cAAA6L,EAAA,OACA9L,EAAApF,EAAAqF,cAAAoC,EAAA,GAAgDC,KAAA,MAAaqF,GAC7DoE,QAAAL,IAAA1L,EAAApF,EAAAqF,cAAA+L,EAAA,GAAwEC,QAAAN,EAAAO,YAAA,GACxElM,EAAApF,EAAAqF,cAAA,KAAkDC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAqb,EAAAtB,WAAkCM,KACpF1L,EAAApF,EAAAqF,cAAAkM,EAAA,WAAAP,EAAA5L,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACApM,EAAApF,EAAAqF,cAAAoM,EAAA,UAAmD/J,KAAA+J,EAAA,aAAAC,KACnDtM,EAAApF,EAAAqF,cAAAoM,EAAA,UAAmDnM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAqb,EAAA1B,eAAA1I,KAAA+J,EAAA,aAAAE,KACnDvM,EAAApF,EAAAqF,cAAAoM,EAAA,UAAmD/J,KAAA+J,EAAA,aAAAG,KACnDxM,EAAApF,EAAAqF,cAAAoM,EAAA,UAAmDnM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAqb,EAAAxB,gBAAA5I,KAAA+J,EAAA,aAAAC,MAA+D,KAClHtM,EAAApF,EAAAqF,cAAAiN,EAAA,GAAuCC,GAAA,EAAAC,GAAA,GACvCpN,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAqb,EAAA9M,YACxCI,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAqb,EAAAI,OAA8B,IAAAlB,GAAA5L,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KAC1EL,QAAAiB,IAAAhN,EAAApF,EAAAqF,cAAAkM,EAAA,OAAAa,GACAjB,QAAAN,IAAAzL,EAAApF,EAAAqF,cAAAwM,EAAA,OAAAhB,gCCrBA,MAAA4B,EAAA3N,EAAA,EAAAC,QACA2N,sBACArC,aAAAtI,EAAA,GAAA7Q,MACA6O,QAAA,OACA4M,WAAA,YAEAC,MACAC,cAAA,GACAC,WAAA/K,EAAA,GAAA7Q,MACA+N,SAAA8C,EAAA,GAAA7Q,OAEAA,OACAuZ,MAAA1I,EAAA,GAAA2I,IACAuB,YAAAlK,EAAA,GAAA7Q,MACA+N,SAAA8C,EAAA,GAAA7Q,OAEA6b,gBACAhN,QAAA,eACAsK,aAAAtI,EAAA,GAAA7Q,MACAkS,MAAA,MACA4J,SAAA,gBCsEAC,EAAAxc,OAAA+P,EAAA,EAAA/P,GAtFA,EAA2Cyc,YAAAjc,cAAA+H,gBAAA9D,SAAAiY,aAAA,OAAAC,uBAAAC,eAAAC,aAAA,EAAAC,kBAAA,EAAAzU,IAAA0U,qBAAAC,iBAC3C,IAAAhR,EAAA2C,EAAApF,EAAAqF,cAAAqO,EAAA,QACA1Q,EAAAoC,EAAApF,EAAAqF,cAAAqO,EAAA,QACAzQ,EAAAmC,EAAApF,EAAAqF,cAAAqO,EAAA,QACA,MAAAC,EAAA,aAAAR,GACA,kBAAAA,GACA,YAAAA,GACA,YAAAA,EACAjY,KAAA0Y,MAAA1Y,EAAA0Y,KAAAC,QACApR,EAAAxL,EAAAiE,EAAA0Y,KAAAC,MAAApR,KAAAvH,EAAA0Y,KAAAC,MAAApR,KAAAvL,MAAA,EAAAgE,EAAA0Y,KAAAC,MAAApR,KAAAvH,EAAA0Y,KAAAC,MAAApR,KAAApF,MAAA,MAAA2B,GACA2U,EACA1Q,EAAAhM,EAAAiE,EAAA0Y,KAAAC,MAAA5Q,MAAA/H,EAAA0Y,KAAAC,MAAA5Q,MAAA/L,MAAA,EAAAgE,EAAA0Y,KAAAC,MAAA5Q,MAAA/H,EAAA0Y,KAAAC,MAAA5Q,MAAA5F,MAAA,GAAAmW,GAAAxU,IAGAiE,EAAAhM,EAAAiE,EAAA0Y,KAAAC,MAAA5Q,MAAA/H,EAAA0Y,KAAAC,MAAA5Q,MAAA/L,MAAA,EAAAgE,EAAA0Y,KAAAC,MAAA5Q,MAAA/H,EAAA0Y,KAAAC,MAAA5Q,MAAA5F,MAAA,GAAAmW,GAAAxU,GACAgE,EAAA/L,EAAAiE,EAAA0Y,KAAAC,MAAA7Q,QAAA9H,EAAA0Y,KAAAC,MAAA7Q,QAAA9L,MAAA,EAAAgE,EAAA0Y,KAAAC,MAAA7Q,QAAA9H,EAAA0Y,KAAAC,MAAA7Q,QAAA3F,MAAA,GAAA+V,EAAAI,EAAAxU,KAGA,MAAA8U,EAAA,IAAA1O,EAAApF,EAAAqF,cAAA,OAA6DC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAgc,EAAAM,iBAC7D3N,EAAApF,EAAAqF,cAAA,OAAoCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAgc,EAAAvb,QAA+BuL,GACnE2C,EAAApF,EAAAqF,cAAA,OAAoCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAgc,EAAAG,OACpCxN,EAAApF,EAAAqF,cAAA,WAAA6N,KACAa,EAAA,KACA,IAAAN,EACA,YAEA,MAAAO,EAAA9Y,KAAA0Y,MAAA1Y,EAAA0Y,KAAAC,OAAA3Y,EAAA0Y,KAAAC,MAAA7Q,QACA9H,EAAA0Y,KAAAC,MAAA7Q,QAAA3F,MACA,GACA4W,EAAAxd,OAAAyd,EAAA,EAAAzd,CAAAud,GACAG,EAAArV,WAAsCmV,KACtC,OAAA7O,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAgc,EAAAM,iBAC5C3N,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAgc,EAAAvb,QACxC8L,EACAmO,QAAAmC,GACApY,GACAA,EAAA0Y,MACA1Y,EAAA0Y,KAAAC,MAAA7Q,SACA9H,EAAA0Y,KAAAC,MAAA7Q,QAAA9L,OAAA,IAAAkO,EAAApF,EAAAqF,cAAA,QAA0FC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAgc,EAAAG,OAA8BuB,IACxH/O,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAgc,EAAAG,OACxCxN,EAAApF,EAAAqF,cAAA,WAAAgO,MAEAe,EAAA,KACA,IAAAX,EACA,YAEA,MAAAO,EAAA9Y,KAAA0Y,MAAA1Y,EAAA0Y,KAAAC,OAAA3Y,EAAA0Y,KAAAC,MAAA5Q,MACA/H,EAAA0Y,KAAAC,MAAA5Q,MAAA5F,MACA,GACA4W,EAAAxd,OAAAyd,EAAA,EAAAzd,CAAAud,GACAG,EAAArV,WAAsCmV,KACtC,OAAA7O,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAgc,EAAAM,iBAC5C3N,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAgc,EAAAvb,QACxC+L,EACAkO,QAAAmC,GACApY,GACAA,EAAA0Y,MACA1Y,EAAA0Y,KAAAC,MAAA5Q,OACA/H,EAAA0Y,KAAAC,MAAA5Q,MAAA/L,OAAA,IAAAkO,EAAApF,EAAAqF,cAAA,QAAwFC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAgc,EAAAG,OAA8BuB,IACtH/O,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAgc,EAAAG,OACxCxN,EAAApF,EAAAqF,cAAA,WAAAoO,MAEA,eAAAN,EACA/N,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KAAAsC,KAEAH,EACAJ,EACAnO,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACA4C,IACAN,KAEA1O,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACAsC,IACAM,KAGAb,EACAnO,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACA4C,IACAL,KAEA3O,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACAuC,IACAK,oBCvFA,MAAAC,EAAAvP,EAAA,EAAAC,QACAuP,mBACAC,qBACAlE,aAAAtI,EAAA,GAAA7Q,QAGAsd,MACA3L,iBACAC,SAAA,cCJA2L,EAAA,EAAwC1X,QAAAiC,gBAAA/H,cAAA6H,IAAA4V,aAAArX,QAAAnG,YACxC,MAAAH,EAAAN,OAAAyd,EAAA,EAAAzd,CAAA4G,GACA8W,EAAA,QAAApd,EAAA+H,WAAqD/H,UAAOoW,EAE5DwH,EAAA3X,QADA0X,EAAAxd,EAAAwd,EAAA,OACAxX,QAAA,IACA0X,EAAA9V,EAAA,oBACA+V,QAAAF,EACAtX,MAAA8W,EACAjd,MAAAD,EAAAC,EAAAmG,EAAA2B,KAEA,OAAAoG,EAAApF,EAAAqF,cAAA,MAAuCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA4d,EAAAC,oBACvClP,EAAApF,EAAAqF,cAAAyP,EAAA,GAAuC/X,MAAA6X,EAAA1d,MAAAyd,EAAA5H,MAAAhQ,EAAA2K,KAAAoN,EAAA,EAAAlD,OAEvC6C,EAAAM,cACA9d,YAAA+d,MAEA,MAAAC,EAAAxe,OAAA+P,EAAA,EAAA/P,GAAAge,gBCpBA,MAAAS,EAAApQ,EAAA,EAAAC,QACAoQ,UACAjP,UAAA6B,EAAA,GAAA7Q,SC2CA,MAAAke,EAAA3e,OAAA+P,EAAA,EAAA/P,iBAzCA2O,EAAApF,EAAA4G,UACAC,sBAAAwO,GACA,OAAAA,EAAAna,SAAA8L,KAAAE,MAAAhM,OAEA2L,WACA,MAAA3L,OAAeA,EAAAK,QAAAuG,YAA0BkF,KAAAE,MACzCxL,EAAAjF,OAAAsN,EAAA,EAAAtN,EACAyE,SACAK,QACAuG,aAEAwT,EAAA5Z,EAAA6Z,UAAA1Z,IACA,MAAA5D,EAAA4D,EAAA5D,GACA,GAAAA,GAAA,OAAAA,EACA,OAAAA,EAAAiH,WAAAsW,SAAA,WAGA,WAAAF,MAEA5Z,EAAA+Z,MAAA,EAAAH,MACA5Z,EAAA+Z,MAAAH,EAAA,GACA5Z,EAAA4Z,IAGA5Z,EAEAmL,SACA,MAAA+J,SAAeA,EAAAI,UAAmBhK,KAAAE,MAClC,OAAA8J,EACA,OAAA5L,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACApM,EAAApF,EAAAqF,cAAAoM,EAAA,UAA+C/J,KAAA+J,EAAA,aAAAE,KAC/CvM,EAAApF,EAAAqF,cAAAoM,EAAA,UAA+C/J,KAAA+J,EAAA,aAAAE,GAAArM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAye,EAAAC,YAC/C/P,EAAApF,EAAAqF,cAAAoM,EAAA,UAA+C/J,KAAA+J,EAAA,aAAAE,GAAArM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAye,EAAAC,YAC/C/P,EAAApF,EAAAqF,cAAAoM,EAAA,UAA+C/J,KAAA+J,EAAA,aAAAE,GAAArM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAye,EAAAC,aAE/C,CACA,MAAA7Z,EAAA0L,KAAA0O,WACA,OAAAtQ,EAAApF,EAAAqF,cAAA,UAAAuL,GAA6DtV,4BCzC7D,MAAAqa,EAAA7Q,EAAA,EAAAC,QACAjE,OACAuP,aAAAtI,EAAA,GAAA7Q,SCAA0e,EAAA1O,GAAA9B,EAAApF,EAAAqF,cAAA,OAAyEC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAkf,EAAA7U,QACzEsE,EAAApF,EAAAqF,cAAAwQ,EAAA,EAAApf,OAAAgK,UAAoDyG,kBCDpD,MAAA4O,EAAA5O,GAAA9B,EAAApF,EAAAqF,cAAA,OAAyEC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAkf,EAAA7U,QACzEsE,EAAApF,EAAAqF,cAAA0Q,EAAA,EAAAtf,OAAAgK,UAAoDyG,qZCHpD,MAAAU,GACAoO,qBACAvS,MACA0E,KAAA,OACAC,OAAA,YAIA+G,mBACApH,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,OAEA+e,kBACAxS,MACA0E,KAAA,OACAC,OAAA,YAGAyG,oBACApL,MACA0E,KAAA,OACAC,OAAA,UACA0G,gBAAA,QAGAC,kBACAtL,MACA0E,KAAA,OACAC,OAAA,YAGA4G,YAAA,EACA/N,QACA4G,QACAC,WAAAC,EAAA,GAAA7Q,MACA+N,SAAA,KAIAgD,kBACAF,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,OAEAgf,sBACAzS,MACA0E,KAAA,OACAC,OAAA,YAIAgH,oBACArH,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,MACA6Q,EAAA,GAAA7Q,OAEAif,mBACA1S,MACA0E,KAAA,OACAC,OAAA,YAGA6G,qBACAxL,MACA0E,KAAA,OACAC,OAAA,UACA0G,gBAAA,QAGAI,mBACAzL,MACA0E,KAAA,OACAC,OAAA,YAGAE,OACAC,WACAjI,QAAA,IAEAkI,MACAJ,OAAA,QAEAK,OACAL,OAAA,QAEAM,YACAzD,SAAA,IAGA0D,OACAJ,WACAjI,QAAA,IAEAkI,MACAJ,OAAA,QAEAK,OACAL,OAAA,UAIAvD,EAAAC,EAAA,EAAAC,QACAjE,OACAoF,UAAA6B,EAAA,GAAA7Q,OAEA0R,gBACAC,iBACAC,SAAA,YAGAiE,OACAiD,WAAA,IAAAjI,EAAA,GAAA7Q,eCpHAkf,UAAAhR,EAAApF,EAAA4G,UACAC,cACAC,SAAAC,WACAC,KAAAgC,aAAA5D,EAAApF,EAAAiJ,YACAjC,KAAAV,OACA4C,aAAA,IAAAC,IACAC,MAAA,GAEApC,KAAAqC,UAAA,MACA,MAAA4M,iBAAmBA,EAAApH,qBAAAE,mBAAAoH,oBAAAlH,sBAAAC,qBAAqHlI,KAAAE,MAKxIF,KAAAyC,UACAC,SAEAjG,KAAAyL,EACAvF,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAAyY,EARA,4BAQA,QACArF,QACA1O,KAAA,UAGArD,MAAA8P,EAAAsH,oBAGAzL,KAAAsL,EACApF,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAAsY,EAlBA,4BAkBA,MACAlF,QACA1O,KAAA,UAGArD,MAAA8P,EAAAmH,mBAGAtL,KAAAwL,EACAtF,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAAwY,EA3BA,+BA2BA,QACApF,QACA1O,KAAA,SAGArD,MAAA8P,EAAAqH,sBAGAxL,KAAAoL,EACAlF,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAAoY,EArCA,+BAqCA,MACAhF,QACA1O,KAAA,SAGArD,MAAA8P,EAAAiH,qBAGApL,KAAA0S,EACAxM,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAA0f,EAjDA,4BAiDA,QACAtM,QACA1O,KAAA,UAGArD,MAAA8P,EAAAuO,oBAGA1S,KAAAwS,EACAtM,YACAvM,KAAA3G,OAAAmT,EAAA,EAAAnT,CAAAwf,EA3DA,4BA2DA,MACApM,QACA1O,KAAA,UAGArD,MAAA8P,EAAAqO,uBAKAjP,KAAA8C,aAAA,MACA9C,KAAAgC,aAAAe,SACA/C,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAe,QAAAC,gBAG/BhD,KAAAiD,SAAA,EAAAP,EAAAQ,KACA,MAAAhB,aAAmBA,GAAelC,KAAAV,MAClC,OAAAlB,EAAApF,EAAAqF,cAAA8E,EAAA,GAAoD1G,KAAAyF,EAAAkB,IAAAF,KAAkD9N,EAAA,OAAlDsN,EAAAjG,KAA4D4G,cAAA,YAAAjP,IAAA,QAAA8O,EAAA9M,KAAA,QAAA8M,EAAApS,MAAA4R,EAAA5R,UAEhHkP,KAAAsD,UAAA,MACA,MAAAgF,kBAAmBA,GAAoBtI,KAAAE,OACvCkC,MAAmBA,GAAQpC,KAAAV,MAC3B0I,EAAAM,IAEAlG,EAAA,IACAxB,EAAAoH,YACA,GACA,OAAA5J,EAAApF,EAAAqF,cAAAkF,EAAA,GAAsDC,WAAA5C,EAAAK,iBAAAxE,KAAAuD,KAAAyD,gBAAAC,OAAA,EAAAzE,OAAA,GAAA+I,cAAA5R,KAAA,SAAAtF,MAAA8P,EAAA3G,WAEtD+F,KAAAjI,gBAAA,GAAiCL,YACjC,MAAAkM,iBAAmBA,EAAAC,sBAAuC7D,KAAAE,MAC1DhQ,EAAAT,OAAAmT,EAAA,EAAAnT,CAAAiI,EAAAjI,OAAAmT,EAAA,EAAAnT,CAAAmU,GAAAC,EAAA,QACA,uBAAAnM,EAAA6Q,WACA,kBAAA7Q,EAAA6Q,UACA/I,EAAA,EAAA1H,EAAA,uBAAyD5H,UAEzD,mBAAAwH,EAAA6Q,WACA,oBAAA7Q,EAAA6Q,UACA/I,EAAA,EAAA1H,EAAA,0BAA4D5H,UAE5D,iBAAAwH,EAAA6Q,WACA,kBAAA7Q,EAAA6Q,UACA/I,EAAA,EAAA1H,EAAA,uBAAyD5H,UAEzDA,IAIA8P,KAAA8D,kBAAA5D,KACAF,KAAAV,MAAA4C,aAAA6B,OAAA7D,EAAAgD,QACAlD,KAAAV,MAAA4C,aAAA8B,IAAA9D,EAAAgD,OAEAlD,KAAAyC,UAA2BP,aAAA,IAAAC,IAAAnC,KAAAV,MAAA4C,kBAG3BlC,KAAAiE,gBAAA,MACA,MAAAvB,OAAmBA,GAAS1C,KAAAV,MAE5B4E,KAQA,OAPAxB,GACAA,EAAAjL,QAAA,CAAA0M,EAAAjB,MACAlD,KAAAoE,eAAAlB,IAAAiB,EAAA1H,MAAA,IAAA0H,EAAA1H,KAAAtH,SACA+O,EAAAG,KAAAnB,KAIAgB,EAAA/O,UAAAuN,IAAAvN,OAAA,KAGA6K,KAAAoE,eAAAlB,KACA,MAAAhB,aAAmBA,GAAelC,KAAAV,MAClC,OAAA4C,EAAAkB,IAAAF,KAGAlD,KAAAsE,cAAA,MACA,MAAA5B,OAAmBA,GAAS1C,KAAAV,MAC5BiF,KAOA,OANA7B,GACAA,EAAA9N,IAAA,CAAA4P,EAAAtB,KAEAqB,EAAAF,aAAwCnB,OAGxCqB,IAGAvE,KAAAyE,UAAA,MAOA,OANAhV,OAAAiV,EAAA,EAAAjV,EACAkV,WAAA3E,KAAAsE,gBACAM,SAAA5E,KAAAoE,eACAS,WAAA,SACAC,cAAA9E,KAAA8D,sBAKA9D,KAAAyD,cAAA,MACA,MAAAvB,aAAmBA,EAAAQ,UAAuB1C,KAAAV,MAC1C,GAAAoD,EAAA,CAIA,OAHAA,EAAA9N,IAAA,CAAAuP,EAAAjB,IACAzT,OAAAgK,UAA2C0K,EAAAxB,WAAAlT,OAAAiV,EAAA,EAAAjV,CAAAyS,EAAAkB,IAAAF,SAM3CrD,oBACAkF,WAAA,KACA/E,KAAAgC,aAAAe,SACA/C,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAe,QAAAC,cAE/BgC,OAAAC,iBAAA,SAAAjF,KAAA8C,gBAEA9C,KAAAqC,YAEAxC,mBAAAqF,GACAA,EAAA+J,mBAAAjP,KAAAE,MAAA+O,kBACA/J,EAAA2C,qBAAA7H,KAAAE,MAAA2H,oBACA3C,EAAA6C,mBAAA/H,KAAAE,MAAA6H,kBACA7C,EAAAiK,oBAAAnP,KAAAE,MAAAiP,mBACAjK,EAAA+C,sBAAAjI,KAAAE,MAAA+H,qBACA/C,EAAAgD,oBAAAlI,KAAAE,MAAAgI,mBACAlI,KAAAqC,YAGAxC,uBACAmF,OAAAG,oBAAA,SAAAnF,KAAA8C,cAEAjD,YACA,MAAAgI,mBAAeA,EAAAE,mBAAAkH,mBAAAE,oBAAAlH,sBAAAC,qBAAqHlI,KAAAE,MACpIkF,GAAwBvP,GAAA,OACxBwZ,EAAAJ,EACAxf,OAAAmT,EAAA,EAAAnT,CAAAwf,GACA,EACAzG,EAAAX,EACApY,OAAAmT,EAAA,EAAAnT,CAAAoY,GACA,EACAY,EAAAV,EACAtY,OAAAmT,EAAA,EAAAnT,CAAAsY,GACA,EACAuH,EAAAH,EACA1f,OAAAmT,EAAA,EAAAnT,CAAA0f,GACA,EACAzG,EAAAT,EACAxY,OAAAmT,EAAA,EAAAnT,CAAAwY,GACA,EACAU,EAAAT,EACAzY,OAAAmT,EAAA,EAAAnT,CAAAyY,GACA,EACA3C,EAAAC,KAAAhO,IAAA6X,EAAA7G,EAAAC,EAAA6G,EAAA5G,EAAAC,GACAnR,EAAA+N,EAAA,EAAAC,KAAAC,KAAAF,EAAA,GAAAA,GAAA,EAIA,OAHA/N,EAAA,IACA4N,EAAAhQ,GAAA,EAAAoC,IAEA4N,EAEAvF,aACA,MAAAgI,mBAAeA,EAAAE,mBAAAE,sBAAAC,qBAAgFlI,KAAAE,MAC/F0I,EAAAf,EACAlC,IAAAlW,OAAAmT,EAAA,EAAAnT,CAAAoY,GAAA,UACA,EACAgB,EAAAd,EACApC,IAAAlW,OAAAmT,EAAA,EAAAnT,CAAAsY,GAAA,UACA,EACAe,EAAAb,EACAtC,IAAAlW,OAAAmT,EAAA,EAAAnT,CAAAwY,GAAA,UACA,EACAc,EAAAb,EACAvC,IAAAlW,OAAAmT,EAAA,EAAAnT,CAAAyY,GAAA,UACA,EACA,OAAAU,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,EACAvD,KAAAhO,IAAAoR,EAAAC,EAAAC,EAAAC,GACA,GAEAlJ,SACA,MAAAZ,OAAeA,EAAA6G,kBAAA7G,EAAA3F,UAAAyM,QAAAmD,aAAAC,cAA4EnJ,KAAAE,OAC3FwC,OAAeA,EAAAN,SAAgBpC,KAAAV,MAC/B2E,EAAAjE,KAAAiE,kBACAjG,EAAAI,EAAApF,EAAAqF,cAAA2H,EAAA,GAAuEC,cAAAhC,EAAAiC,wBAAA,EAAArF,OAAAoD,OAAAkC,EAAAnG,KAAAjI,gBAAAqO,iBAAA,MACvEhB,EAAApF,KAAAqG,YACAhO,EAAA2H,KAAAsG,aACAC,EAAAf,KAAAgB,MAAAnO,EAAA,GACA,OAAA+F,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAA+D,gBAAA8E,IAAA1G,KAAAgC,cAC5C5D,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAAkI,QAA+BA,GACvE3H,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAA/D,OAAAhJ,OAAuCmO,OAAA6G,IAC/E1H,EAAApF,EAAAqF,cAAAsI,EAAA,GAA4CC,mBAAA5I,EAAAoH,SAAAyB,OAAA7G,KAAAyE,YAAAxF,SAAA6H,gBAAA9G,KAAAsD,YAAAyD,WAAA/G,KAAAyD,gBAAAuD,eAAA,SAAA1N,UAAA2N,MAAAC,EAAA,EAAA9E,SAC5CM,GACAA,EAAA9N,IAAA,CAAAuP,EAAAjB,IACAlD,KAAAiD,SAAAkB,EAAAjB,IAEA9E,EAAApF,EAAAqF,cAAA8I,EAAA,GAAoDpR,MAAAmT,EAAApY,MAAA8P,EAAAe,MAAAyF,YAAA,EAAAb,EAAAlO,KACpD+F,EAAApF,EAAAqF,cAAA8I,EAAA,GAAoDE,eAAA,EAAAtR,MAAAoT,EAAArY,MAAA8P,EAAAU,iQC9QpD,MAAAzD,EAAAC,EAAA,EAAAC,QACAtC,MACAsD,QAAA,OACA4M,WAAA,UAEAO,aACAqD,WACArQ,UAAA,EACAmK,aAAA,EACA4B,YAAAlK,EAAA,GAAA2I,KAEA8F,eACAvR,SAAA8C,EAAA,GAAA7Q,MACAuZ,MAAA1I,EAAA,GAAA2I,KAEA+F,eACAxR,SAAA8C,EAAA,GAAA7Q,MACAuZ,MAAA1I,EAAA,GAAA2I,KAEAgG,QACA3Q,QAAA,OACAC,eAAA,gBACA1F,QAAAyH,EAAA,GAAA2I,IACAiG,gBAAA5O,EAAA,GAAA2I,KAEA3D,OACA8F,cAAA9K,EAAA,GAAA2I,sCC1BA,MAAAkG,EAAA9R,EAAA,EAAAC,QACA8R,iBACA9Q,QAAA,OACA4M,WAAA,UAEAmE,sBACAzG,aAAA,EACA4B,YAAAlK,EAAA,GAAA2I,OCEAqG,IACKha,MAAA,UAAA7F,MAAA,YACA6F,MAAA,OAAA7F,MAAA,SACA6F,MAAA,UAAA7F,MAAA,YAELic,EAAA,MACA6D,EAAA,UA4FA,MAAA5Q,EAAA3P,OAAA4P,EAAA,EAAA5P,CAAA6P,IACA,MAAA2Q,EAAAxgB,OAAAygB,EAAA,EAAAzgB,EACA0gB,QACAC,WAAA,UACAC,iBAAA,QACAC,kBAAA,GAEAC,UAAA,IAIA,OACAN,cACA/b,OAJAsc,EAAA,EAAAC,aAAAnR,EAAA6M,EAAA8D,GAKAS,kBAJAF,EAAA,EAAAG,wBAAArR,EAAA6M,EAAA8D,MAOAW,GACAC,YAAAL,EAAA,EAAAK,aAEAC,EAAArhB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAA2P,EAAAwR,EAAAnhB,eA/GA2O,EAAApF,EAAA4G,UACAC,YAAAkR,EAAAC,GACAlR,MAAAiR,EAAAC,GACAhR,KAAAiR,cACAC,eAAA,GAEAlR,KAAAV,MAAA7P,OAAAgK,UAAqCuG,KAAAiR,cACrCjR,KAAAmR,mBAAAjhB,KACA,MAAAkhB,cAAmBA,GAAgBpR,KAAAE,MACnCkR,IACApR,KAAAyC,UACA4O,YAAAnhB,IAEAkhB,EAAAlhB,MAGA8P,KAAAsR,iBAAA,MACA,MAAAxZ,EAAmBA,GAAIkI,KAAAE,MACvB,OAAA6P,EAAAnb,IAAA2c,GAAAnT,EAAApF,EAAAqF,cAAAmT,EAAA,GAAoFC,UAAA,SAAArd,IAAAmd,EAAArhB,MAAAwhB,QAAA,IAAA1R,KAAAmR,mBAAAI,EAAArhB,QAA+F4H,qBAAuByZ,EAAAxb,aAE1MiK,KAAA2R,gBAAA,MACA,MAAAzd,OAAmBA,EAAA4D,KAAYkI,KAAAE,MAC/B,OAAAhM,KAAAuI,SACA,IAAA0F,QAAAjO,EAAAuI,QACA7H,IAAAgd,GAAAxT,EAAApF,EAAAqF,cAAAmT,EAAA,GAA2EC,UAAA,SAAArd,OAA8B4b,IAAS4B,IAAIF,QAAA,IAAA1R,KAAAmR,sBAA6CnB,IAAS4B,MAAQ9Z,EAAA,gBAAqB1D,IAAAwd,WAMzM5R,KAAA6R,WAAA,MACA,MAAAC,EAAAriB,OAAAygB,EAAA,EAAAzgB,CAAAsiB,SAAAC,QACA,IAAApV,EAAAnN,OAAAsN,EAAA,EAAAtN,CAAAqiB,EAAAG,UACA,MAAAC,EAAAJ,KAAAG,SACAxiB,OAAA0iB,KAAAL,EAAAG,aAEA,UAAA7d,KAAA8d,EAEA,QADA9d,EAAAge,QAAApC,GACA,CACApT,EAAAxI,EACA,MAGA,eAAAwI,IAAA,YAEAoD,KAAAqS,oBAAAC,KACAtS,KAAAyC,UACAyO,eAAAlR,KAAAV,MAAA4R,kBAGAlR,KAAAuS,oBAAArB,KACAlR,KAAAyC,UACAyO,oBAGAlR,KAAAmR,mBAAAnR,KAAAmR,mBAAAqB,KAAAxS,MACAA,KAAAqS,oBAAArS,KAAAqS,oBAAAG,KAAAxS,MACAA,KAAAuS,oBAAAvS,KAAAuS,oBAAAC,KAAAxS,MAEAH,oBACA,MAAAgR,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1C2Q,EAAA1E,EAAA8D,GACAjQ,KAAAyC,UACA4O,YAAArR,KAAA6R,eAGAhS,mBAAAqF,GACA,MAAA2L,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1CgF,EAAA+K,kBACAY,EAAA1E,EAAA8D,GACAjQ,KAAAyC,UAA2B4O,YAAArR,KAAA6R,gBAG3BhS,SACA,MAAA/H,EAAeA,GAAIkI,KAAAE,OACnBmR,YAAeA,EAAAH,iBAA6BlR,KAAAV,MAC5CmT,MACAzS,KAAAsR,sBACAtR,KAAA2R,mBAGA5b,GAAA,KADAsb,IAAAe,QAAApC,IAAA,GAEAlY,EAAA,gBAAiC1D,IAAAid,EAAA5C,MAAAuB,EAAA7a,UACjC2C,qBAAmCuZ,KACnC,OAAAjT,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAmgB,EAAAC,kBAC5CzR,EAAApF,EAAAqF,cAAA,SAA0CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAmgB,EAAAE,uBAC1ChY,EAAA,iBACA,KACAsG,EAAApF,EAAAqF,cAAAqU,EAAA,GAA2CC,SAAA3S,KAAAqS,oBAAAO,OAAAxU,EAAApF,EAAAqF,cAAAwU,EAAA,GAAkFC,SAAA9S,KAAAuS,qBAAqCxc,GAAAgd,OAAA7B,EAAAuB,uBC5FlKO,EAAA,OACAC,GACAC,MAAA,OACA/C,QACAE,iBAAA,QACAC,kBAAA,EACAF,WAAA,YAiCA,MAAA+C,EAAA1jB,OAAA4P,EAAA,EAAA5P,CAAA,CAAA6P,EAAAY,KACA,MAAA+P,EAAAxgB,OAAAygB,EAAA,EAAAzgB,CAAAwjB,GACA/e,EAAAsc,EAAA,EAAAC,aAAAnR,EAAA0T,EAAA/C,GACAmD,EAAA5C,EAAA,EAAA6C,kBAAA/T,EAAA0T,EAAA/C,GACAS,EAAAF,EAAA,EAAAG,wBAAArR,EAAA0T,EAAA/C,GACAqD,EAAA7jB,OAAA8jB,EAAA,EAAA9jB,CAAA+jB,EAAA,GAIA,OACAngB,UAJAmgB,EAAA,EAAAC,gBAAAnU,EAAA,MAAAgU,GAKAI,eAJAF,EAAA,EAAAG,qBAAArU,EAAA,MAAAgU,GAKAM,qBAJAJ,EAAA,EAAAK,2BAAAvU,EAAA,MAAAgU,GAKArD,cACA/b,SACAkf,cACA1C,uBAGAoD,GACAjD,YAAAL,EAAA,EAAAK,aAEAkD,EAAAtkB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAA0jB,EAAAW,EAAArkB,eApDA2O,EAAApF,EAAA4G,UACAC,oBACA,MAAAgR,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1C2Q,EAAAmC,EAAA/C,GAEApQ,mBAAAqF,GACA,MAAA2L,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1CgF,EAAA+K,iBACAY,EAAAmC,EAAA/C,GAGApQ,SACA,MAAAmU,iBAAeA,EAAA3gB,YAAAqgB,iBAAAxf,SAAAkf,cAAAtb,KAAuEkI,KAAAE,MACtF+T,EAAA/f,IACAkf,IACAM,GACArgB,GACAA,EAAAuZ,MACAvZ,EAAAuZ,KAAAxU,MAAA,EACA,OAAAgG,EAAApF,EAAAqF,cAAA,UAA+CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAA6R,SAC/CtR,EAAApF,EAAAqF,cAAA,WACAD,EAAApF,EAAAqF,cAAAoC,EAAA,GAA4CnC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAAkI,OAAArF,KAAAwT,EAAA,UAAuDpc,EAAA,4BACnGqS,QAAA8J,IAAA7V,EAAApF,EAAAqF,cAAAyS,GAAsEM,cAAA4C,KACtE7J,QAAA8J,IAAA7V,EAAApF,EAAAqF,cAAA,OAAiEC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAApC,OACjE2C,EAAApF,EAAAqF,cAAAoC,EAAA,GAA4CnC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAA0R,WAAA7O,KAAA,OAAgDjR,OAAAQ,EAAA,EAAAR,CAAAyE,EAAA0Y,KAAAC,MAAApR,KAAAvL,QAC5FkO,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAAqO,YAC5C9N,EAAApF,EAAAqF,cAAA,OAAgDC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAA2R,gBAAuC1X,EAAA,iCACvFsG,EAAApF,EAAAqF,cAAA,OAAgDC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAoO,EAAA4R,gBAAuChgB,OAAA0kB,EAAA,EAAA1kB,oIC/CvF,MAAA2kB,EAAAtW,EAAA,EAAAC,QACAsW,OAEApV,OAAA,QACAmD,MAAA,SAEA0H,UACA5K,UAAA6B,EAAA,GAAA7Q,MACAokB,UAAA,WAGAC,EAAAC,EAAA;;kBAEkBzT,EAAA,GAAA7Q;;;;;ECVlBukB,EAAA,MAgCA,MAAAC,GAAAjlB,OAAA4P,EAAA,EAAA5P,CAAA,CAAA6P,GAAuDzC,cACvD,MAAAoT,EAAAxgB,OAAAygB,EAAA,EAAAzgB,EACA0gB,QACAtT,UACAuT,WAAA,UACAC,iBAAA,QACAC,kBAAA,KAKA,OACAL,cACA/b,OAJAsc,EAAA,EAAAC,aAAAnR,EAAAmV,EAAAxE,GAKAS,kBAJAF,EAAA,EAAAG,wBAAArR,EAAAmV,EAAAxE,MAOA0E,IACA9D,YAAAL,EAAA,EAAAK,aAEA+D,GAAAnlB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAAilB,GAAAC,GAAAllB,eAnDA2O,EAAApF,EAAA4G,UACAC,cACAC,SAAAC,WACAC,KAAA6U,QAAA,MACA,MAAA3gB,OAAmBA,GAAS8L,KAAAE,MAC5B4U,KACA,GAAA5gB,EACA,UAAA6gB,KAAA7gB,EAAAuI,KACA,UAAAmV,KAAAmD,EAAA1Z,OACAyZ,EAAAzQ,QAAqC0Q,EAAA3gB,QAAYwd,KAIjD,OAAAkD,IAGAjV,oBACA,MAAAgR,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1C2Q,EAAA4D,EAAAxE,GAEApQ,mBAAAqF,GACA,MAAA2L,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1CgF,EAAA+K,iBACAY,EAAA4D,EAAAxE,GAGApQ,SAEA,OADAG,KAAA6U,UACAjgB,IAAA,CAAAmgB,EAAA7R,IAAA9E,EAAApF,EAAAqF,cAAA,OAAoEjK,WAAa8O,KAAS6R,QCR1F,MAAAC,GAAAvlB,OAAA+P,EAAA,EAAA/P,iBArBA2O,EAAApF,EAAA4G,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAAiV,YAAA,MACAjV,KAAAE,MAAAgV,SAAA,KAEAlV,KAAAiV,YAAAjV,KAAAiV,YAAAzC,KAAAxS,MAEAH,sBAAAwO,GACA,MAAA0E,OAAeA,EAAAna,QAAeoH,KAAAE,MAC9B,OAAAmO,EAAAzV,UAAAyV,EAAA0E,WAEAlT,SACA,MAAAjD,QAAeA,EAAAmW,SAAAna,OAAAd,KAA2BkI,KAAAE,MAC1C,OAAA9B,EAAApF,EAAAqF,cAAA8W,EAAA,GAA4C7W,aAAeiW,KAAiB9kB,OAAAqO,EAAA,EAAArO,CAAA2kB,EAAAC,SAAkBe,SAAA,EAAArC,SAAAmC,QAAAlV,KAAAiV,YAAAlP,MAAAjO,EAAA,sCAC9F8E,UACAxG,KAAAwC,EAAA7C,SAEAqI,EAAApF,EAAAqF,cAAAuW,IAAiDhY,UAAAhE,OAAAiE,QAAAjE,EAAA7C,OAAA6C,EAAA3H,SCrBjDokB,GAAAvX,EAAA,EAAAC,QACAuX,aACApW,UAAA6B,EAAA,GAAA7Q,OAEAmkB,OAEApV,OAAA,QACAmD,MAAA,SAEA0H,UACAwK,UAAA,WAGAiB,GAAAf,EAAA;;kBAEkBzT,EAAA,GAAA7Q;;;;;gBCPlB,MAAAslB,GAAA,OA2BA,MAAAC,GAAAhmB,OAAA4P,EAAA,EAAA5P,CAAA,CAAA6P,GAAuD1C,UAAAhE,OAAA8c,oBACvD,MAAAC,GACAxF,QACAE,iBAAA,QACAC,kBAAA,EACAF,WAAA,UACAvQ,CAAA6V,GAAA9c,EAAA7C,OAAA6C,EAAA3H,IAEAghB,UAAmBpS,CAAAjD,GAAA,MAEnBqT,EAAAxgB,OAAAygB,EAAA,EAAAzgB,CAAAkmB,GAGA,OACA1F,cACA/b,OAJAsc,EAAA,EAAAC,aAAAnR,EAAAkW,GAAAvF,GAKAS,kBAJAF,EAAA,EAAAG,wBAAArR,EAAAkW,GAAAvF,MAOA2F,IACA/E,YAAAL,EAAA,EAAAK,aAEAgF,GAAApmB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAAgmB,GAAAG,GAAAnmB,eAhDA2O,EAAApF,EAAA4G,UACAC,YAAAK,GACAJ,MAAAI,GAEAL,oBACA,MAAAgR,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1C2Q,EAAA2E,GAAAvF,GAEApQ,mBAAAqF,GACA,MAAA2L,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1CgF,EAAA+K,iBACAY,EAAA2E,GAAAvF,GAGApQ,SACA,MAAAjD,QAAeA,EAAA1I,SAAAwc,oBAAA5Y,KAAwCkI,KAAAE,MACvDzE,EAAAhM,OAAAQ,EAAA,EAAAR,CAAAyE,KAAA0Y,MAAA1Y,EAAA0Y,KAAAC,OAAA3Y,EAAA0Y,KAAAC,MAAApR,KACAvH,EAAA0Y,KAAAC,MAAApR,KAAAvL,MACA,GACA,OAAAkO,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACApM,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA+W,GAAAvL,UACxC1L,EAAApF,EAAAqF,cAAAoC,EAAA,GAA4CC,KAAA,MAAa5I,EAAA,gCAAqC5H,MAAAuL,MAC9F2C,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA+W,GAAAC,aACxClX,EAAApF,EAAAqF,cAAAyX,GAAA,GAAiEvhB,MAAAqI,EAAA1I,SAAA8V,OAAA0G,GAA4D,EAAIpc,WAAQA,EAAAM,IAAAmhB,GAAA3X,EAAApF,EAAAqF,cAAAyX,GAAA,GAAyE1hB,IAAA2hB,EAAA9kB,GAAA+G,iBAAiC/H,cAAA,EAAA8F,MAAAggB,EAAAhgB,MAAAggB,EAAAhgB,MAAAmC,WAAA,GAAAwV,WAAAxZ,EAAA0Y,KAAAC,MAAApR,KAAAvL,MAAAmG,MAAA0f,EAAA1f,MAAAnG,MAAA6lB,EAAAta,eCPnP,MAAAua,GAAAvmB,OAAA+P,EAAA,EAAA/P,iBAtBA2O,EAAApF,EAAA4G,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAAiV,YAAA,MACAjV,KAAAE,MAAAgV,SAAA,KAEAlV,KAAAiV,YAAAjV,KAAAiV,YAAAzC,KAAAxS,MAEAH,sBAAAwO,GACA,MAAA0E,OAAeA,EAAAna,QAAeoH,KAAAE,MAC9B,OAAAmO,EAAAzV,UAAAyV,EAAA0E,WAEAlT,SACA,MAAAjD,QAAeA,EAAAmW,SAAAna,OAAA8c,gBAAA5d,KAA0CkI,KAAAE,MACzD,OAAA9B,EAAApF,EAAAqF,cAAA8W,EAAA,GAA4C7W,aAAeiX,MAAiB9lB,OAAAqO,EAAA,EAAArO,CAAA4lB,GAAAhB,SAAkBe,SAAA,EAAArC,SAAAmC,QAAAlV,KAAAiV,YAAAlP,MAAAjO,EAAA,wCAC9F8E,UACAxG,KAAAwC,EAAA7C,MACA2f,mBAEAtX,EAAApF,EAAAqF,cAAAwX,IAAyDjZ,UAAAhE,OAAA8c,gGCvBzD,MAAAO,GAAAnY,EAAA,EAAAC,QACAjM,MACAkX,WAAAjI,EAAA,GAAA2I,KAEA2K,OACA6B,IACA7M,aAAAtI,EAAA,GAAA7Q,OAEAimB,OACAlL,YAAAlK,EAAA,GAAA2I,KAEA0M,IACApN,WAAAjI,EAAA,GAAA2I,MAGA3D,OACA8F,cAAA9K,EAAA,GAAA2I,OCPA2M,KACKtgB,MAAA,QAAA7F,MAAA,UACA6F,MAAA,UAAA7F,MAAA,YAELomB,GAAA,UA0EA,MAAAC,GAAA9mB,OAAA4P,EAAA,EAAA5P,CAAA6P,KAEAkX,MAAAC,GAAA,EAAAC,kBAAApX,GACA7N,OAAAglB,GAAA,EAAAE,aAAArX,GACAsX,YAAAH,GAAA,EAAAI,wBAAAvX,MAGAwX,IACAC,aAAAN,GAAA,EAAAM,cAEAC,GAAAvnB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAA8mB,GAAAO,GAAArnB,eAnFA2O,EAAApF,EAAA4G,UACAC,YAAAkR,EAAAC,GACAlR,MAAAiR,EAAAC,GACAhR,KAAAiR,cACAb,WAAA,SAEApQ,KAAAV,MAAA7P,OAAAgK,UAAqCuG,KAAAiR,cACrCjR,KAAAiX,eAAA,MACA,MAAAra,QAAmBA,EAAAsa,aAAA5iB,QAAAqhB,SAAoC3V,KAAAE,OACvDkQ,WAAmBA,GAAapQ,KAAAV,MAChC6X,EAAA1nB,OAAAgK,UAA6CgO,KAAA2P,MAAA3P,KAAAC,UAAAiO,KAAsC1D,cAAA9L,EAAAkR,cAAAlR,IACnFgR,EAAAhH,OAAAC,aACA,IAAAH,EAAAxgB,OAAAygB,EAAA,EAAAzgB,CAAA0nB,GACA,GAAAD,EACAjH,gBAA4CrT,YAG5C,UAAAhE,KAAAtE,EACA2b,gBAAgDrT,MAAQhE,EAAA7C,MAGxD,OAAAka,IAEAjQ,KAAAiV,YAAA,MACAjV,KAAAE,MAAAgV,SAAA,KAEAlV,KAAAsX,kBAAA,MACA,MAAAP,aAAmBA,GAAe/W,KAAAE,MAClC6W,EAAA,OAAA/W,KAAAiX,oBAEAjX,KAAAuX,uBAAA,EAAA/S,EAAA8N,KACAtS,KAAAyC,UAA2B2N,WAAAkC,EAAAkF,cAAAtnB,UAE3B8P,KAAAuX,uBAAAvX,KAAAuX,uBAAA/E,KAAAxS,MAEAH,mBAAAqF,GACA,MAAA0R,YAAeA,EAAA7D,UAAsB/S,KAAAE,MACrC6S,IAAA7N,EAAA6N,QACA/S,KAAAyC,SAAAhT,OAAAgK,UAA0CuG,KAAAiR,eAE1C/L,EAAAzT,SAAAuO,KAAAE,MAAAzO,QACA,IAAAmlB,GACA5W,KAAAiV,cAGApV,SACA,MAAA+W,YAAeA,EAAAha,UAAAtI,QAAAwD,KAAiCkI,KAAAE,OAChDkQ,WAAeA,GAAapQ,KAAAV,MAC5BmY,MAAAnjB,GACA0L,KAAAE,MAAA6S,QACAtjB,OAAAoJ,GAAA,EAAApJ,CAAAgoB,GACArjB,IAAA,KACA2E,UAAA,IAGA,IAAA2e,EAAA5f,EAAA,mBAAkD8E,YAIlD,OAHA,IAAAA,EAAAwV,QAAAkE,MACAoB,EAAA5f,EAAA,yBAEAsG,EAAApF,EAAAqF,cAAA8W,EAAA,GAA4C7W,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAwmB,GAAA5B,OAAAe,SAAA,EAAArC,OAAA/S,KAAAE,MAAA6S,OAAAmC,QAAAlV,KAAAiV,YAAAlP,MAAAjO,EAAA,gBAAA6f,SAC5CvZ,EAAApF,EAAAqF,cAAAuZ,GAAA,EAAAnoB,OAAAgK,UAA4DhK,OAAA0B,GAAA,EAAA1B,CAAA0B,GAAA,EAAAM,OAAAC,aAA4C0C,IAAA,SAAAsd,QAAA1R,KAAAiV,YAAA4C,QAAAD,GAAA,EAAAE,YAA6EhgB,EAAA,kBACrLsG,EAAApF,EAAAqF,cAAAuZ,GAAA,EAAAnoB,OAAAgK,UAA4DhK,OAAA0B,GAAA,EAAA1B,CAAA0B,GAAA,EAAAM,OAAAE,aAA4ComB,WAAA,IAAAnB,EAAAxiB,IAAA,UAAAsd,QAAA1R,KAAAsX,kBAAAO,QAAAD,GAAA,EAAAI,UAAkIlgB,EAAA,qBAE1OsG,EAAApF,EAAAqF,cAAAoC,EAAA,GAAwCnC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAwmB,GAAAlQ,OAAArF,KAAA,MAA2C5I,EAAA,kBAAuB8E,aAC1GwB,EAAApF,EAAAqF,cAAA4Z,GAAA,GAAuC3Z,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAwmB,GAAAnkB,OACvCsM,EAAApF,EAAAqF,cAAA6Z,GAAA,GAAgDniB,MAAA+B,EAAA,yBAAAqgB,QAAA,kBAChD/Z,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KAAA6L,GAAAzhB,IAAA,CAAA2c,EAAArO,IAAA9E,EAAApF,EAAAqF,cAAA+Z,GAAA,GAAoIhkB,IAAA8O,EAAAjS,iBAA+BiS,IAAMmV,aAAAlS,IAAAoL,EAAArhB,MAAA6F,MAAA+B,EAAAyZ,EAAAxb,OAAA7F,MAAAqhB,EAAArhB,MAAAooB,QAAAlI,IAAAmB,EAAArhB,MAAAkG,KAAA,aAAAmiB,SAAAvY,KAAAuX,uBAAAiB,aAAA1gB,EAAAyZ,EAAAxb,YACzKqI,EAAApF,EAAAqF,cAAA6Z,GAAA,GAAgDniB,MAAA2hB,EAAAS,QAAA,mBAChD/Z,EAAApF,EAAAqF,cAAA,UAAAoZ,EAAA7iB,IAAA,CAAA6jB,EAAAvV,IACA9E,EAAApF,EAAAqF,cAAA,MAA0DjK,IAAA8O,GAAauV,EAAA1iB,0FCnFvE,MAAA6K,IACA8X,YAAA,GACAC,qBAAA,KAEAC,GAAA9a,EAAA,EAAAC,QACA6D,gBACAoH,WAAAjI,EAAA,GAAA7Q,OAEAkZ,eACAnK,OAAA,QACAoK,aAAAtI,EAAA,GAAA7Q,MACAgP,UAAA6B,EAAA,GAAA7Q,OAEA2oB,WACA3Z,UAAA6B,EAAA,GAAA7Q,OAEA4oB,UACA5Z,UAAA6B,EAAA,GAAA7Q,OAEAoZ,gBACApK,UAAA6B,EAAA,GAAA7Q,OAEA6oB,aACA7Z,UAAA6B,EAAA,GAAA7Q,SCZA8oB,GAAA,MACAC,GAAA,OACAC,GAAA,SAoFA,MAAAC,GAAA1pB,OAAA4P,EAAA,EAAA5P,CAAA,CAAA6P,GAAuD8Z,qBAAAC,0BAevD,OACAC,kBAdAC,GAAA,aAAAja,EAAA2Z,GAAAG,GAeAI,6BAdAD,GAAA,wBAAAja,EAAA2Z,GAAAG,GAeAK,iBAdAF,GAAA,aAAAja,EAAA0Z,GAAAI,GAeAM,4BAdAH,GAAA,wBAAAja,EAAA0Z,GAAAI,GAeAO,oBAdAJ,GAAA,aAAAja,EAAA4Z,GAAAE,GAeAQ,+BAdAL,GAAA,wBAAAja,EAAA4Z,GAAAE,GAeAS,mBAbAN,GAAA,aAAAja,EAAA2Z,GAAAI,GAcAS,8BAbAP,GAAA,wBAAAja,EAAA2Z,GAAAI,GAcAU,kBAbAR,GAAA,aAAAja,EAAA0Z,GAAAK,GAcAW,6BAbAT,GAAA,wBAAAja,EAAA0Z,GAAAK,GAcAY,qBAbAV,GAAA,aAAAja,EAAA4Z,GAAAG,GAcAa,gCAbAX,GAAA,wBAAAja,EAAA4Z,GAAAG,MAgBAc,IACAtJ,YAAAuJ,GAAA,aAEAC,GAAA5qB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAA0pB,GAAAgB,GAAA1qB,eApHA2O,EAAApF,EAAA4G,UACAC,cACAC,SAAAC,WACAC,KAAAsa,YAAA,KACAlc,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACApM,EAAApF,EAAAqF,cAAAoM,GAAA,UAA+CnM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAmpB,GAAAxP,eAAA1I,KAAA+J,GAAA,aAAAE,KAC/CvM,EAAApF,EAAAqF,cAAAoM,GAAA,UAA+CnM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAmpB,GAAAtP,gBAAA5I,KAAA+J,GAAA,aAAAC,OAG/C7K,oBACA,MAAAgR,YAAeA,EAAAuI,qBAAAC,uBAAuDrZ,KAAAE,MACtE2Q,EAAAoI,GAAAG,GACAvI,EAAAmI,GAAAI,GACAvI,EAAAqI,GAAAE,GACAvI,EAAAoI,GAAAI,GACAxI,EAAAmI,GAAAK,GACAxI,EAAAqI,GAAAG,GAEAxZ,mBAAAqF,GACA,MAAA2L,YAAeA,EAAAuI,qBAAAC,uBAAuDrZ,KAAAE,MACtEgF,EAAAkU,yBACAvI,EAAAoI,GAAAG,GACAvI,EAAAmI,GAAAI,GACAvI,EAAAqI,GAAAE,IAEAlU,EAAAmU,0BACAxI,EAAAoI,GAAAI,GACAxI,EAAAmI,GAAAK,GACAxI,EAAAqI,GAAAG,IAGAxZ,SACA,MAAAyZ,kBAAeA,EAAAE,+BAAAC,mBAAAC,8BAAAC,sBAAAC,iCAAAC,qBAAAC,gCAAAC,oBAAAC,+BAAAC,uBAAAC,kCAAApiB,KAAqTkI,KAAAE,MAEpUqa,EAAA9qB,OAAAmT,GAAA,EAAAnT,CAAA6pB,EAAA,iBACAkB,EAAA/qB,OAAAmT,GAAA,EAAAnT,CAAAoqB,EAAA,iBAEAY,EAAAhrB,OAAAmT,GAAA,EAAAnT,CAAAgqB,EAAA,kBACAiB,EAAAjrB,OAAAmT,GAAA,EAAAnT,CAAAgqB,EAAA,oBACAkB,EAAAlrB,OAAAmT,GAAA,EAAAnT,CAAAgqB,EAAA,kBACAmB,EAAAnrB,OAAAmT,GAAA,EAAAnT,CAAAsqB,EAAA,kBACAc,EAAAprB,OAAAmT,GAAA,EAAAnT,CAAAsqB,EAAA,oBACAe,EAAArrB,OAAAmT,GAAA,EAAAnT,CAAAsqB,EAAA,kBAEAgB,EAAAtrB,OAAAmT,GAAA,EAAAnT,CAAAkqB,EAAA,kBACAqB,EAAAvrB,OAAAmT,GAAA,EAAAnT,CAAAkqB,EAAA,oBACAsB,EAAAxrB,OAAAmT,GAAA,EAAAnT,CAAAkqB,EAAA,kBACAuB,EAAAzrB,OAAAmT,GAAA,EAAAnT,CAAAsqB,EAAA,kBACAoB,EAAA1rB,OAAAmT,GAAA,EAAAnT,CAAAwqB,EAAA,oBACAmB,EAAA3rB,OAAAmT,GAAA,EAAAnT,CAAAwqB,EAAA,kBACAoB,EAAA/B,GACAA,EAAA1M,MACA0M,EAAA1M,KAAAC,OACAyM,EAAA1M,KAAAC,MAAApR,KACA6d,EAAA1M,KAAAC,MAAApR,KAAApF,MACA,MACAilB,EAAA7B,GACAA,EAAA7M,MACA6M,EAAA7M,KAAAC,OACA4M,EAAA7M,KAAAC,MAAA5Q,MACAwd,EAAA7M,KAAAC,MAAA5Q,MAAA5F,MACA,GACAklB,EAAA5B,GACAA,EAAA/M,MACA+M,EAAA/M,KAAAC,OACA8M,EAAA/M,KAAAC,MAAA5Q,MACA0d,EAAA/M,KAAAC,MAAA5Q,MAAA5F,MACA,GACA,OAAA+H,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAmpB,GAAAhX,iBAC5CxD,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAmpB,GAAAC,YAAmC,IAAAW,GAC3E,IAAAM,EAAA9Z,KAAAsa,cAAAlc,EAAApF,EAAAqF,cAAAmd,GAAA,GAA0I1V,gBAAAlF,GAAA+X,qBAAArW,YAAAiY,EAAA3W,iBAAA3T,EAAA,EAAA4T,sBAAuI5E,OAAA2B,GAAA8X,YAAAnW,aAAAiY,EAAAzU,MAAAjO,EAAA,2CAAAoR,WAAApR,EAAA,mDAAAqR,WAAArR,EAAA,qCACjRzB,MAAAyB,WAAsCrI,OAAAQ,EAAA,EAAAR,CAAA4rB,WAEtCjd,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAmpB,GAAAE,WAAkC,IAAAY,GAC1E,IAAAM,EAAAha,KAAAsa,cAAAlc,EAAApF,EAAAqF,cAAAod,GAAA,GAAyI3V,gBAAAlF,GAAA+X,qBAAA1J,iBAAAwL,EAAA5S,mBAAA6S,EAAA3S,iBAAA4S,EAAA/W,iBAAA3T,EAAA,EAAA4T,sBAAkO5E,OAAA2B,GAAA8X,YAAAvJ,kBAAAyL,EAAA3S,oBAAA4S,EAAA3S,kBAAA4S,EAAA/U,MAAAjO,EAAA,0CAAAoR,WAAApR,EAAA,mDAAAqR,WAAArR,EAAA,oCAC3WzB,MAAAyB,WAAsCrI,OAAAQ,EAAA,EAAAR,CAAA6rB,WAEtCld,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAmpB,GAAAG,cAAqC,IAAAa,GAC7E,IAAAM,EAAAla,KAAAsa,cAAAlc,EAAApF,EAAAqF,cAAAod,GAAA,GAA4I3V,gBAAAlF,GAAA+X,qBAAA1J,iBAAA8L,EAAAlT,mBAAAmT,EAAAjT,iBAAAkT,EAAArX,iBAAA3T,EAAA,EAAA4T,sBAA2O5E,OAAA2B,GAAA8X,YAAAvJ,kBAAA+L,EAAAjT,oBAAAkT,EAAAjT,kBAAAkT,EAAArV,MAAAjO,EAAA,6CAAAoR,WAAApR,EAAA,mDAAAqR,WAAArR,EAAA,uCACvXzB,MAAAyB,WAAsCrI,OAAAQ,EAAA,EAAAR,CAAA8rB,gBC7FtCG,GAAA5d,EAAA,EAAAC,QACAsW,OAEApV,OAAA,QACAmD,MAAA,YAGAuZ,GAAAnH,EAAA;;;;ECyBA,MAAAoH,GAAAnsB,OAAA4P,EAAA,EAAA5P,CAAA,CAAA6P,GAAuD1C,UAAAhE,WACvD,MAAAijB,GACA1L,QACAE,iBAAA,QACAC,kBAAA,EACAF,WAAA,QACArU,MAAA,GAEAkW,UACApS,CAAAjD,GAAAhE,EAAA7C,OAAA6C,EAAA3H,KAGAmoB,EAAA3pB,OAAAygB,EAAA,EAAAzgB,CAAAosB,GACAC,GACA3L,QACAE,iBAAA,QACAC,kBAAA,EACAF,WAAA,QACArU,MAAA,GAEAkW,UACApS,CAAAjD,GAAAhE,EAAA7C,OAAA6C,EAAA3H,KAIA,OACAmoB,qBACAC,oBAHA5pB,OAAAygB,EAAA,EAAAzgB,CAAAqsB,GAIAC,QAAAC,GAAA,EAAAC,qBAAA3c,MAGA4c,GAAAzsB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAAmsB,MAAAnsB,eAvDA2O,EAAApF,EAAA4G,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAAiV,YAAA,MACAjV,KAAAE,MAAAgV,SAAA,KAEAlV,KAAAiV,YAAAjV,KAAAiV,YAAAzC,KAAAxS,MAEAH,oBACAG,KAAAyC,aAEA5C,sBAAAwO,GACA,MAAA0E,OAAeA,EAAAna,QAAeoH,KAAAE,MAC9B,OAAAmO,EAAAzV,UAAAyV,EAAA0E,WAEAlT,SACA,MAAAuZ,mBAAeA,EAAAxc,UAAAmW,SAAAna,OAAAygB,sBAAAvhB,KAAqEkI,KAAAE,MACpF,OAAA9B,EAAApF,EAAAqF,cAAA8W,EAAA,GAA4C7W,aAAeqd,MAAiBlsB,OAAAqO,EAAA,EAAArO,CAAAisB,GAAArH,SAAkBe,SAAA,EAAArC,SAAAmC,QAAAlV,KAAAiV,YAAAlP,MAAAjO,EAAA,4CAC9F8E,UACAxG,KAAAwC,EAAA7C,SAEAqI,EAAApF,EAAAqF,cAAAgc,IAAkDjB,qBAAAC,6BCkElD,MAAA8C,GAAA1sB,OAAA+P,EAAA,EAAA/P,iBA1FA2O,EAAApF,EAAA4G,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAAiR,cACAmL,gBAAA,EACAC,mBAAA,EACAC,uBAAA,EACAC,gBAAA,EACAC,mBAAA,GAEAxc,KAAAV,MAAA7P,OAAAgK,UAAqCuG,KAAAiR,cACrCjR,KAAAyc,eAAA,MACA,MAAA7f,QAAmBA,EAAAhE,OAAA+c,SAAuB3V,KAAAE,OAC1Cmc,kBAAmBA,GAAoBrc,KAAAV,MACvC,OAAAlB,EAAApF,EAAAqF,cAAA2Y,IAAsDpa,UAAAmW,OAAAsJ,EAAA/nB,OAAAsE,GAAAsc,QAAAlV,KAAA0c,uBAAA/G,YAEtD3V,KAAA2c,mBAAA,MACA,MAAA/f,QAAmBA,EAAAhE,QAAgBoH,KAAAE,OACnCoc,sBAAmBA,GAAwBtc,KAAAV,MAC3C,OAAAlB,EAAApF,EAAAqF,cAAA6d,IAA0Dtf,UAAAmW,OAAAuJ,EAAA1jB,OAAAsc,QAAAlV,KAAA4c,+BAE1D5c,KAAA6c,YAAA,MACA,MAAAjgB,QAAmBA,EAAAhE,QAAgBoH,KAAAE,OACnCqc,eAAmBA,GAAiBvc,KAAAV,MACpC,OAAAlB,EAAApF,EAAAqF,cAAA2W,IAA0DpY,UAAAmW,OAAAwJ,EAAA3jB,OAAAsc,QAAAlV,KAAA8c,oBAAAjgB,QAAAjE,EAAA7C,OAAA6C,EAAA3H,OAE1D+O,KAAA+c,eAAA,MACA,MAAAngB,QAAmBA,EAAAhE,QAAgBoH,KAAAE,OACnCsc,kBAAmBA,GAAoBxc,KAAAV,MACvC,OAAAlB,EAAApF,EAAAqF,cAAA2X,IAA6DpZ,QAAA,UAAAmW,OAAAyJ,EAAA5jB,OAAAsc,QAAAlV,KAAAgd,uBAAAtH,cAAA9Y,MAE7DoD,KAAA0c,uBAAA,CAAA3J,IACA/S,KAAAyC,UAA2B4Z,kBAAAtJ,MAE3B/S,KAAAid,sBAAA,MACAjd,KAAAyC,UAA2B4Z,mBAAA,MAE3Brc,KAAA4c,2BAAA,CAAA7J,IACA/S,KAAAyC,UAA2B6Z,sBAAAvJ,MAE3B/S,KAAAkd,0BAAA,MACAld,KAAAyC,UAA2B6Z,uBAAA,MAE3Btc,KAAA8c,oBAAA,CAAA/J,IACA/S,KAAAyC,UAA2B8Z,eAAAxJ,MAE3B/S,KAAAmd,mBAAA,MACAnd,KAAAyC,UAA2B8Z,gBAAA,MAE3Bvc,KAAAgd,uBAAA,CAAAjK,IACA/S,KAAAyC,UAA2B+Z,kBAAAzJ,MAE3B/S,KAAAod,sBAAA,MACApd,KAAAyC,UAA2B+Z,mBAAA,MAE3Bxc,KAAAqd,eAAA,MACA,MAAAjB,eAAmBA,GAAiBpc,KAAAV,MACpCU,KAAAyC,UACA2Z,sBAGApc,KAAAsd,eAAA,CAAAlB,IACApc,KAAAyC,UAA2B2Z,qBAE3Bpc,KAAA0c,uBAAA1c,KAAA0c,uBAAAlK,KAAAxS,MACAA,KAAAid,sBAAAjd,KAAAid,sBAAAzK,KAAAxS,MACAA,KAAA4c,2BAAA5c,KAAA4c,2BAAApK,KAAAxS,MACAA,KAAAkd,0BAAAld,KAAAkd,0BAAA1K,KAAAxS,MACAA,KAAA8c,oBAAA9c,KAAA8c,oBAAAtK,KAAAxS,MACAA,KAAAmd,mBAAAnd,KAAAmd,mBAAA3K,KAAAxS,MACAA,KAAAgd,uBAAAhd,KAAAgd,uBAAAxK,KAAAxS,MACAA,KAAAod,sBAAApd,KAAAod,sBAAA5K,KAAAxS,MACAA,KAAAsd,eAAAtd,KAAAsd,eAAA9K,KAAAxS,MACAA,KAAAqd,eAAArd,KAAAqd,eAAA7K,KAAAxS,MAEAH,SACA,MAAAjD,QAAeA,EAAA9E,KAAakI,KAAAE,MAC5B,OAAA9B,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACApM,EAAApF,EAAAqF,cAAAqU,EAAA,GAA2CC,SAAA3S,KAAAqd,eAAAzK,OAAAxU,EAAApF,EAAAqF,cAAAkf,EAAA,GAA0EzK,SAAA9S,KAAAsd,iBAAgCvK,OAAA/S,KAAAV,MAAA8c,eAAAoB,SAAA,EAAAC,SAAA,QAAAhL,eACrJrU,EAAApF,EAAAqF,cAAAmT,EAAA,GAAuDC,UAAA,SAAArd,IAAA,yBAAAsd,QAAA1R,KAAAkd,2BAA8FplB,EAAA,8CACrJsG,EAAApF,EAAAqF,cAAAmT,EAAA,GAAuDC,UAAA,SAAArd,IAAA,gBAAA2jB,WAAA,YAAAnb,EAAA8U,QAAA1R,KAAAod,uBAAoHtlB,EAAA,uCAC3KsG,EAAApF,EAAAqF,cAAAmT,EAAA,GAAuDC,UAAA,SAAArd,IAAA,aAAA2jB,WAAA,YAAAnb,EAAA8U,QAAA1R,KAAAmd,oBAA8GrlB,EAAA,mCACrKsG,EAAApF,EAAAqF,cAAAmT,EAAA,GAAuDC,UAAA,SAAArd,IAAA,gBAAAsd,QAAA1R,KAAAid,uBAAiFnlB,EAAA,wCAExIkI,KAAAyc,iBACAzc,KAAA2c,qBACA3c,KAAA6c,cACA7c,KAAA+c,qBC3FAW,GAAA5f,EAAA,EAAAC,QACA4f,YACAhO,gBAAA5O,EAAA,GAAA7Q,MACA6O,QAAA,OACAC,eAAA,SACA4e,WAAA7c,EAAA,GAAA7Q,MACA+O,OAAA,OACAmD,MAAA,QAEAyb,WACAJ,SAAA,YAEAK,eACAC,OAAAhd,EAAA,GAAA7Q,OAEA8tB,iBACAvU,MAAA1I,EAAA,GAAA7Q,MACA+N,SAAA8C,EAAA,GAAA7Q,SAGA+tB,GAAAzJ,EAAA;;;;qBAIqBzT,EAAA,GAAA7Q;;;iBAGJ6Q,EAAA,GAAA7Q;;;iBAGA6Q,EAAA,GAAA7Q;;;;;;;iBAOA6Q,EAAA,GAAA7Q;;;iBAGA6Q,EAAA,GAAA7Q;;;;;;;EAQjBguB,GAAA1J,EAAA;;;;;;;;;;;;;;;;;;;;qCCjDA,MAAA2J,GAAArgB,EAAA,EAAAC,QACAqL,eACAC,aAAAtI,EAAA,GAAA7Q,OAEAoZ,gBACApK,UAAA6B,EAAA,GAAA7Q,SCIAkuB,GAAA,MACAC,GAAA,SA0KA,MAAAC,GAAA7uB,OAAA4P,EAAA,EAAA5P,CAAA,CAAA6P,GAAuD1C,UAAAhE,WACvD,MAAA+c,GACAxF,QACAE,iBAAA,QACAC,kBAAA,EACAF,WAAA,UACArU,MAAA,GAEAkW,UACApS,CAAAjD,GAAAhE,EAAA7C,OAAA6C,EAAA3H,KAGAgf,EAAAxgB,OAAAygB,EAAA,EAAAzgB,CAAAkmB,GAKA,OACA4I,UALA/N,EAAA,EAAAC,aAAAnR,EAAA8e,GAAAnO,GAMAuO,qBALAhO,EAAA,EAAAG,wBAAArR,EAAA8e,GAAAnO,GAMAwO,aALAjO,EAAA,EAAAC,aAAAnR,EAAA+e,GAAApO,GAMAyO,wBALAlO,EAAA,EAAAG,wBAAArR,EAAA+e,GAAApO,GAMAA,iBAGA0O,IACA9N,YAAAL,EAAA,EAAAK,aAEA+N,GAAAnvB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAA6uB,GAAAK,GAAAlvB,eArMA2O,EAAApF,EAAA4G,UACAC,cACAC,SAAAC,WACAC,KAAAgC,aAAA5D,EAAApF,EAAAiJ,YACAjC,KAAAV,OACA8C,MAAA,GAEApC,KAAA8C,aAAA,MACA9C,KAAAgC,aAAAe,SAAA/C,KAAAgC,aAAAe,QAAAC,aACAhD,KAAAyC,UAA+BL,MAAApC,KAAAgC,aAAAe,QAAAC,gBAG/BhD,KAAAsa,YAAA,KACAlc,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACApM,EAAApF,EAAAqF,cAAAoM,GAAA,UAA+CnM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA0uB,GAAA/U,eAAA1I,KAAA+J,GAAA,aAAAE,KAC/CvM,EAAApF,EAAAqF,cAAAoM,GAAA,UAA+CnM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA0uB,GAAA7U,gBAAA5I,KAAA+J,GAAA,aAAAC,OAG/C7K,oBACA,MAAAgR,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1C2Q,EAAAuN,GAAAnO,GACAY,EAAAwN,GAAApO,GACAjL,OAAAC,iBAAA,SAAAjF,KAAA8C,cACA9C,KAAA8C,eAEAjD,mBAAAqF,GACA,MAAA2L,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1CgF,EAAA+K,cAAAjQ,KAAAE,MAAA+P,cACAY,EAAAuN,GAAAnO,GACAY,EAAAwN,GAAApO,IAGApQ,uBACAmF,OAAAG,oBAAA,SAAAnF,KAAA8C,cAEAjD,cAAA3L,EAAA4G,GACA,MAAAhD,EAAeA,GAAIkI,KAAAE,MACnBxI,GACAuC,UACA8B,SACA8iB,UACA5iB,UAEA,GAAA/H,KAAA0Y,MAAA1Y,EAAA0Y,KAAAC,MAAA,CACA,UAAA3Y,EAAA0Y,KAAAC,MAAA9Q,MAAA,CACA,MAAAA,EAAAyJ,KAAAsZ,MAAA5qB,EAAA0Y,KAAAC,MAAA9Q,MAAA7L,OACA6uB,EAAAjnB,WAA8CrI,OAAAQ,EAAA,EAAAR,CAAAyE,EAAA0Y,KAAAC,MAAA9Q,MAAA1F,UAC9CqB,EAAAqE,OACA9B,OAAAnC,wBAAoDgD,WACpD5K,MAAA6L,EACA1F,MAAA0oB,IAEAzkB,QAAAxC,wBAAqDgD,WACrD5K,MAAA6L,EACA1F,MAAA0oB,IAEA7uB,MAAAsV,KAAAsZ,MAAA/iB,IAGA,UAAA7H,EAAA0Y,KAAAC,MAAA7Q,QAAA,CACA,MAAAA,EAAAwJ,KAAAsZ,MAAA5qB,EAAA0Y,KAAAC,MAAA7Q,QAAA9L,OACA8uB,EAAAlnB,WAAgDrI,OAAAQ,EAAA,EAAAR,CAAAyE,EAAA0Y,KAAAC,MAAA7Q,QAAA3F,UAChDqB,EAAAmnB,SAEA5kB,OAAAnC,wBAAwDgD,cACxD5K,MAAA8L,EACA3F,MAAA2oB,IAEA1kB,QAAAxC,wBAAyDgD,cACzD5K,MAAA8L,EACA3F,MAAA2oB,IAEA9uB,MAAAsV,KAAAsZ,MAAA9iB,KAIA,UAAA9H,EAAA0Y,KAAAC,MAAA5Q,MAAA,CACA,MAAAA,EAAAuJ,KAAAsZ,MAAA5qB,EAAA0Y,KAAAC,MAAA5Q,MAAA/L,OACA8c,EAAAlV,WAA8CrI,OAAAQ,EAAA,EAAAR,CAAAyE,EAAA0Y,KAAAC,MAAA5Q,MAAA5F,UAC9CqB,EAAAuE,QAEAhC,OAAAnC,wBAAwDgD,WACxD5K,MAAA+L,EACA5F,MAAA2W,IAEA1S,QAAAxC,wBAAyDgD,WACzD5K,MAAA+L,EACA5F,MAAA2W,IAEA9c,MAAAsV,KAAAsZ,MAAA7iB,MAKA,OAAAvE,EAEAmI,SACA,MAAA0e,UAAeA,EAAAC,uBAAAC,eAAAC,0BAAA5mB,KAA6EkI,KAAAE,OAC5FkC,MAAeA,GAAQpC,KAAAV,MACvB2f,EAAAjf,KAAAkf,cAAAX,EAAA,OACAY,EAAAnf,KAAAkf,cAAAT,EAAA,UACAzW,EAAA5F,EAAA,MAAAA,EAAA,QACA,OAAAhE,EAAApF,EAAAqF,cAAA,OAA4CqI,IAAA1G,KAAAgC,cAC5CmI,QAAA8U,KAAAhjB,MAAA9G,SAAAiJ,EAAApF,EAAAqF,cAAA,eAAAmgB,EAAAxe,KAAAsa,cAAAlc,EAAApF,EAAAqF,cAAA+gB,GAAA,GAAoMC,4BAAAJ,EAAAljB,MAAA7L,QAGpMoK,QAAA2kB,EAAAljB,MAAAzB,QACAlF,EAAA6pB,EAAAljB,MAAA7L,WAGAovB,kCAAAL,EAAAljB,MAAA7L,QAAsFkG,KAAA6oB,EAAAljB,MAAA9B,YAA8BgF,OAAA,IAAA4B,OAAA,EAA+BnJ,cAAgBA,EAAA4C,UAAc0M,eAAA,cAAAsB,kBAAAN,EAAA1O,SACjLykB,OAAA,GACAwB,KAAA,GACAC,MAAA,GACAC,IAAA,IACiBC,4BAAAT,EAAAhjB,MAAA9G,SAGjBmF,QAAA2kB,EAAAhjB,MAAA,GAAA3B,QACAlF,EAAA6pB,EAAAhjB,MAAA,GAAA/L,WAGAyvB,kCAAAV,EAAAhjB,MAAA9G,SACwBiB,KAAA6oB,EAAAhjB,MAAA,GAAAhC,YACxB2lB,qBAAAX,EAAAJ,OAAA1pB,SAGAmF,QAAA2kB,EAAAJ,OAAA,GAAAvkB,QACAlF,EAAA6pB,EAAAJ,OAAA,GAAA3uB,WAGA2vB,2BAAAZ,EAAAJ,OAAA1pB,SACwBiB,KAAA6oB,EAAAJ,OAAA,GAAA5kB,YACxB8L,MAAAjO,EAAA,gCAAAgoB,cAAA,WAAA1d,WACA+H,QAAAgV,KAAAljB,MAAA9G,SAAAiJ,EAAApF,EAAAqF,cAAA,eAAAqgB,EAAA1e,KAAAsa,cAAAlc,EAAApF,EAAAqF,cAAA+gB,GAAA,GAA6MC,4BAAAF,EAAApjB,MAAA7L,QAG7MoK,QAAA6kB,EAAApjB,MAAAzB,QACAlF,EAAA+pB,EAAApjB,MAAA7L,WAGAovB,kCAAAH,EAAApjB,MAAA7L,QACwBkG,KAAA+oB,EAAApjB,MAAA9B,YACxBgF,OAAA,IAAA4B,OAAA,EAAiDnJ,cAAgBA,EAAA4C,UAAc0M,eAAA,cAAAsB,kBAAAN,EAAA1O,SAC/EykB,OAAA,GACAwB,KAAA,GACAC,MAAA,GACAC,IAAA,IACiBC,4BAAAP,EAAAljB,MAAA9G,SAGjBmF,QAAA6kB,EAAAljB,MAAA,GAAA3B,QACAlF,EAAA+pB,EAAAljB,MAAA,GAAA/L,WAGAyvB,kCAAAR,EAAAljB,MAAA9G,SACwBiB,KAAA+oB,EAAAljB,MAAA,GAAAhC,YACxB2lB,qBAAAT,EAAAN,OAAA1pB,SAGAmF,QAAA6kB,EAAAN,OAAA,GAAAvkB,QACAlF,EAAA+pB,EAAAN,OAAA,GAAA3uB,WAGA2vB,2BAAAV,EAAAN,OAAA1pB,SACwBiB,KAAA+oB,EAAAN,OAAA,GAAA5kB,YACxB8L,MAAAjO,EAAA,mCAAAgoB,cAAA,WAAA1d,gBCjLA2d,GAAAjiB,EAAA,EAAAC,QACAiiB,kBACA3W,aAAAtI,EAAA,GAAA7Q,OAEA+vB,qBACAlhB,QAAA,OACAC,eAAA,WACA4e,WAAA7c,EAAA,GAAA7Q,OAEAgwB,UACAjV,YAAAlK,EAAA,GAAA7Q,MACA2b,cAAA9K,EAAA,GAAA7Q,MACAiwB,aAAApf,EAAA,GAAA7Q,OAEAkwB,WACAnV,YAAAlK,EAAA,GAAA7Q,MACA2b,cAAA9K,EAAA,GAAA7Q,OAEAmwB,eACAhX,aAAAtI,EAAA,GAAA7Q,SCnBAowB,GAAAxiB,EAAA,EAAAC,QACAsiB,eACApV,YAAAlK,EAAA,GAAA7Q,MACAgP,UAAA6B,EAAA,GAAA7Q,SCKAqwB,GAAA,MAmEA,MAAAC,GAAA/wB,OAAA4P,EAAA,EAAA5P,CAAA,CAAA6P,GAAuDzC,cACvD,MAAAoT,EAAAxgB,OAAAygB,EAAA,EAAAzgB,EACA0gB,QACAtT,UACAuT,WAAA,UACAC,iBAAA,QACAC,kBAAA,KAKA,OACAzT,UACAoT,cACA/b,OALAsc,EAAA,EAAAC,aAAAnR,EAAAihB,GAAAtQ,GAMAS,kBALAF,EAAA,EAAAG,wBAAArR,EAAAihB,GAAAtQ,MAQAwQ,IACA5P,YAAAL,EAAA,EAAAK,aAEA6P,GAAAjxB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAA+wB,GAAAC,GAAAhxB,eAvFA2O,EAAApF,EAAA4G,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAAiR,cACA8B,QAAA,EACA4N,SAAA,GAEA3gB,KAAAV,MAAA7P,OAAAgK,UAAqCuG,KAAAiR,cACrCjR,KAAAiV,YAAA,CAAAlC,IACA/S,KAAAyC,UAA2BsQ,aAE3B/S,KAAA4gB,WAAAtO,KACAtS,KAAAyC,UAA2BsQ,QAAA,IAC3BT,EAAAuO,kBACA,IAEA7gB,KAAAiV,YAAAjV,KAAAiV,YAAAzC,KAAAxS,MACAA,KAAA4gB,WAAA5gB,KAAA4gB,WAAApO,KAAAxS,MAEAH,oBACA,MAAAgR,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1C2Q,EAAA0P,GAAAtQ,GAEApQ,mBAAAqF,GACA,MAAA2L,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1CgF,EAAA+K,iBACAY,EAAA0P,GAAAtQ,GAGApQ,SACA,MAAAjD,QAAeA,EAAA3L,KAAA2H,OAAAiE,UAAA3I,SAAA4D,KAAwCkI,KAAAE,OACvD6S,OAAeA,EAAA4N,WAAkB3gB,KAAAV,MACjC,IAAAwhB,EAAA,EACA,MACAC,KACAC,KACA,GAAA9sB,EACA,UAAA6gB,KAAA7gB,EAAAuI,KACA,UAAAmV,KAAAmD,EAAA1Z,OAAA,CACA,MACA4lB,KADAF,EAAA5rB,OAAA,YACkD4f,EAAA3gB,QAAYwd,IAC9D+O,EACAI,EAAA1c,KAAA4c,GAEAH,GAXA,KAYAA,EAAAG,EAAA9rB,OAZA,GAaA4rB,EAAA1c,KAAA4c,EAAAxS,MAAA,EAbA,GAaAqS,GAAAI,OAAA,QAGAH,EAAA1c,KAAA4c,IAGAH,GAAAG,EAAA9rB,OACA6rB,EAAA3c,QAAoC0Q,EAAA3gB,QAAYwd,KAIhD,OAAAxT,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA6wB,GAAAD,eAAApvB,MAC5CkZ,QAAA4W,IACAA,EAAAnsB,IAAA,CAAAmgB,EAAAoM,IAAA/iB,EAAApF,EAAAqF,cAAA,QAA6EjK,IAAA+sB,GAAgBpM,IAC7F5K,QAAA4W,EAAA5rB,OAAA6rB,EAAA7rB,SAAAiJ,EAAApF,EAAAqF,cAAA,IAAA5O,OAAAgK,UAAmGhK,OAAA0B,GAAA,EAAA1B,CAAA0B,GAAA,EAAAC,QAAAE,UAA0C8vB,KAAA,KAAA1P,QAAA1R,KAAA4gB,aAAuC9oB,EAAA,+BACpL5H,MAAA8wB,EAAA7rB,OAAA4rB,EAAA5rB,UAEAiJ,EAAApF,EAAAqF,cAAA2W,IAAkDpY,UAAAmW,SAAAna,OAAAsc,QAAAlV,KAAAiV,YAAApY,yCCxElD,MAAAwkB,GAAAvjB,EAAA,EAAAC,QACAoQ,UACAjP,UAAA6B,EAAA,GAAA7Q,OAEAkb,MACAlM,UAAA6B,EAAA,GAAA7Q,OAEAoxB,kBACAtY,WAAA,QACA4U,WAAA7c,EAAA,GAAA7Q,SCIAqxB,GAAA,OAoEA,MAAAC,GAAA/xB,OAAA4P,EAAA,EAAA5P,CAAA,CAAA6P,GAAuD1C,UAAAhE,OAAA8c,oBACvD,MAAAC,GACAxF,QACApU,MAAA,EACAsU,iBAAA,QACAC,kBAAA,EACAF,WAAA,UACAvQ,CAAA6V,GAAA9c,EAAA7C,OAAA6C,EAAA3H,IAEAghB,UAAmBpS,CAAAjD,GAAA,MAEnBqT,EAAAxgB,OAAAygB,EAAA,EAAAzgB,CAAAkmB,GAGA,OACA1F,cACA/b,OAJAsc,EAAA,EAAAC,aAAAnR,EAAAiiB,GAAAtR,GAKAS,kBAJAF,EAAA,EAAAG,wBAAArR,EAAAiiB,GAAAtR,MAOAwR,IACA5Q,YAAAL,EAAA,EAAAK,aAEA6Q,GAAAjyB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAA+xB,GAAAC,GAAAhyB,eA1FA2O,EAAApF,EAAA4G,UACAC,cACAC,SAAAC,WACAC,KAAAV,OACAkd,mBAAA,GAEAxc,KAAA0O,SAAA,MACA,MAAA9R,QAAmBA,EAAA1I,UAAkB8L,KAAAE,MAKrC,OAJAzQ,OAAAsN,EAAA,EAAAtN,EACAyE,SACAK,MAAAqI,MAIAoD,KAAA2hB,WAAAttB,KACA,MAAAH,OAAmBA,GAAS8L,KAAAE,MAC5B,OAAA9B,EAAApF,EAAAqF,cAAAyX,GAAA,GAAoE1hB,IAAAC,EAAApD,GAAA+G,iBAAsC/H,cAAA,EAAA8F,MAAA1B,EAAA0B,MAAA1B,EAAA0B,MAAAmC,WAAA,GAAAwV,WAAAxZ,EAAA0Y,KAAAC,MAAApR,KAAAvL,MAAAmG,MAAAhC,EAAAgC,MAAAnG,MAAAmE,EAAAoH,SAE1GuE,KAAA4hB,WAAA,MACA,MAAAhlB,QAAmBA,EAAAhE,OAAA8c,gBAAA5d,KAAkCkI,KAAAE,OACrDsc,kBAAmBA,GAAoBxc,KAAAV,MAQvC,WAPAU,KAAA0O,WACAH,UAAA1Z,IACA,MAAA5D,EAAA4D,EAAA5D,GACA,GAAAA,GAAA,OAAAA,EACA,OAAAA,EAAAiH,WAAAsW,SAAA,WAIApQ,EAAApF,EAAAqF,cAAA,OAAoDC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA4xB,GAAAC,mBACpDljB,EAAApF,EAAAqF,cAAAuZ,GAAA,EAAAnoB,OAAAgK,UAAgEhK,OAAA0B,GAAA,EAAA1B,CAAA0B,GAAA,EAAAC,QAAAI,eAA+CkgB,QAAA1R,KAAAod,sBAAAjpB,KAAAyjB,GAAA,EAAAiK,OAAAhK,QAAAD,GAAA,EAAA7jB,OAA4F+D,EAAA,8BAAoC5H,MAAA0M,KAC/OwB,EAAApF,EAAAqF,cAAA2X,IAA6DpZ,UAAAmW,OAAAyJ,EAAA5jB,OAAAsc,QAAAlV,KAAAgd,uBAAAtH,mBAG7D,OAGA1V,KAAAgd,uBAAA,CAAAjK,IACA/S,KAAAyC,UAA2B+Z,kBAAAzJ,MAE3B/S,KAAAod,sBAAA9K,KACAtS,KAAAyC,UAA2B+Z,mBAAA,IAC3BlK,EAAAuO,mBAGAhhB,oBACA,MAAAgR,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1C2Q,EAAA0Q,GAAAtR,GAEApQ,mBAAAqF,GACA,MAAA2L,YAAeA,EAAAZ,eAA2BjQ,KAAAE,MAC1CgF,EAAA+K,iBACAY,EAAA0Q,GAAAtR,GAGApQ,SACA,MAAAjD,QAAeA,EAAA1I,SAAAwc,qBAAqC1Q,KAAAE,MACpD,OAAA9B,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KAAAL,QAAA,IAAAuG,GAAAtS,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACApM,EAAApF,EAAAqF,cAAAoM,GAAA,UAA2C/J,KAAA+J,GAAA,aAAAE,KAC3CvM,EAAApF,EAAAqF,cAAAoM,GAAA,UAA2C/J,KAAA+J,GAAA,aAAAE,GAAArM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA4xB,GAAAlT,YAC3C/P,EAAApF,EAAAqF,cAAAoM,GAAA,UAA2C/J,KAAA+J,GAAA,aAAAE,GAAArM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA4xB,GAAAlT,YAC3C/P,EAAApF,EAAAqF,cAAAoM,GAAA,UAA2C/J,KAAA+J,GAAA,aAAAE,GAAArM,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA4xB,GAAAlT,aAAyD/P,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACpGpM,EAAApF,EAAAqF,cAAA,OAAwCC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA4xB,GAAAjW,OACxChN,EAAApF,EAAAqF,cAAAyX,GAAA,GAAiEvhB,MAAAqI,EAAAxI,OAAyBwI,UAAQ1I,SAAA8V,OAAA0G,GAAoD,EAAIpc,WAAQA,EAAAM,IAAAP,GAAA2L,KAAA2hB,WAAAttB,MAClK2L,KAAA4hB,mBC1EAE,GAAAC,IACA,OAAAA,GACA,eACA,gBACA,eACA,gBACA,cACA,eACA,eACA,kBA4DA,MAAAC,GAAAvyB,OAAA4P,EAAA,EAAA5P,CAAA6P,KAEA2iB,eACA,WACA,WACA,WACA,cAIAC,GAAAzyB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAAuyB,MAAAvyB,eAnEA2O,EAAApF,EAAA4G,UACAC,cACAC,SAAAC,WACAC,KAAAV,OACA6iB,aAAA,GAEAniB,KAAAoiB,eAAA,EAAA9P,EAAA+P,KACAriB,KAAAyC,UACA0f,aAAAE,MAGAriB,KAAAsiB,iBAAA,MACA,MAAAL,cAAmBA,EAAArlB,WAAyBoD,KAAAE,MAC5CkL,KAOA,OANA6W,EAAAxqB,QAAAsqB,KACA,YAAAnlB,GAAA,SAAAA,GACA,YAAAklB,GAAAC,GAAA7pB,aACAkT,EAAA/G,KAAA0d,KAGA3W,IAEApL,KAAAuiB,OAAA,EAAAR,EAAA7e,IACA9E,EAAApF,EAAAqF,cAAAmkB,GAAA,GAA8CC,SAAAvf,EAAA9O,OAA0B0tB,GAAAC,SAAoBhc,MAAA/F,KAAA0iB,YAAAX,IAAqC/hB,KAAA2hB,WAAAI,KAEjI/hB,KAAA2hB,WAAA,CAAAI,IACA,MAAAnlB,QAAmBA,EAAAhE,QAAgBoH,KAAAE,OACnCiiB,aAAmBA,GAAeniB,KAAAV,MAClC2iB,EAAAjiB,KAAAsiB,mBACAK,EAAAb,GAAAG,EAAAE,IACAS,EAAAd,GAAAC,GACA,OAAAY,IAAAC,EACAxkB,EAAApF,EAAAqF,cAAAqjB,IAAgE9kB,QAAAgmB,EAAAhqB,OAAA8c,cAAA9Y,IAGhE,OAGAoD,KAAA6iB,QAAA,MACA,MAAAZ,EAAAjiB,KAAAsiB,mBACA,OAAAL,EACA7jB,EAAApF,EAAAqF,cAAAykB,GAAA,GAAmDC,UAAA,EAAAC,UAAAhjB,KAAAV,MAAA6iB,aAAAxP,SAAA3S,KAAAoiB,gBAAoFH,EAAArtB,IAAA,CAAAmtB,EAAA7e,IAAAlD,KAAAuiB,OAAAR,EAAA7e,KAGvI,OAGAlD,KAAA0iB,YAAA,CAAAX,IACA,MAAAjqB,EAAmBA,GAAIkI,KAAAE,MAEvB,OAAApI,EAAA,0BAAgD8E,QADhDklB,GAAAC,IAAA,OAIAliB,SACA,OAAAzB,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KAAAxK,KAAA6iB,eCpBA,MAAAI,GAAAxzB,OAAA4P,EAAA,EAAA5P,CAAA6P,SAGA4jB,GAAAzzB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,CAAAwzB,MAAAxzB,eA3CA2O,EAAApF,EAAA4G,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAAV,OACAgd,uBAAA,GAEAtc,KAAA4c,2BAAA,CAAA7J,IACA/S,KAAAyC,UAA2B6Z,sBAAAvJ,MAE3B/S,KAAAkd,0BAAA,MACAld,KAAAyC,UAA2B6Z,uBAAA,MAE3Btc,KAAA4c,2BAAA5c,KAAA4c,2BAAApK,KAAAxS,MACAA,KAAAkd,0BAAAld,KAAAkd,0BAAA1K,KAAAxS,MAEAH,SACA,MAAAjH,KAAeA,EAAAgE,UAAA9E,KAAmBkI,KAAAE,OAClCoc,sBAAeA,GAAwBtc,KAAAV,MACvC,OAAAlB,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACApM,EAAApF,EAAAqF,cAAAgN,GAAA,OACAjN,EAAApF,EAAAqF,cAAAiN,GAAA,GAA+CV,GAAA,IAC/CxM,EAAApF,EAAAqF,cAAA,OAAgDC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAswB,GAAAE,sBAChD7hB,EAAApF,EAAAqF,cAAAuZ,GAAA,EAAAnoB,OAAAgK,UAAoEhK,OAAA0B,GAAA,EAAA1B,CAAA0B,GAAA,EAAAC,QAAAC,sBAAsDqgB,QAAA1R,KAAAkd,0BAAA/oB,KAAAyjB,GAAA,EAAAiK,OAAAhK,QAAAD,GAAA,EAAAE,YAAqGhgB,EAAA,6CAC/NsG,EAAApF,EAAAqF,cAAAiN,GAAA,GAA+CC,GAAA,GAAAC,GAAA,GAC/CpN,EAAApF,EAAAqF,cAAA,OAAgDC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAswB,GAAAG,WAChD/V,QAAA,YAAAvN,IAAAwB,EAAApF,EAAAqF,cAAA,OAAuFC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAswB,GAAAC,mBACvF5hB,EAAApF,EAAAqF,cAAA4Z,GAAA,OACA7Z,EAAApF,EAAAqF,cAAA6Z,GAAA,GAAgEniB,MAAA+B,EAAA,mCAAAqgB,QAAA,gBAChE/Z,EAAApF,EAAAqF,cAAA,WAAAzF,EAAA2C,YACA6C,EAAApF,EAAAqF,cAAA6jB,IAA4DtlB,UAAAhE,WAC5DwF,EAAApF,EAAAqF,cAAAiN,GAAA,GAA+CC,GAAA,GAAAC,GAAA,GAC/CpN,EAAApF,EAAAqF,cAAA,OAAgDC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAswB,GAAAK,YAChDjW,QAAA,YAAAvN,IAAAwB,EAAApF,EAAAqF,cAAA,OAAuFC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAswB,GAAAM,gBACvFjiB,EAAApF,EAAAqF,cAAA4Z,GAAA,OACA7Z,EAAApF,EAAAqF,cAAA6Z,GAAA,GAAgEniB,MAAA+B,EAAA,gCAAAqgB,QAAA,QAChE/Z,EAAApF,EAAAqF,cAAAqiB,IAAqE9jB,UAAA3L,GAAA,OAAA2H,OAAAiE,QAAAjE,EAAA7C,OAAA6C,EAAA3H,QACrEmN,EAAApF,EAAAqF,cAAAugB,IAA2DhiB,UAAAhE,YAC3DwF,EAAApF,EAAAqF,cAAA6d,IAAkDtf,UAAAmW,OAAAuJ,EAAA1jB,OAAAsc,QAAAlV,KAAA4c,kCClClDuG,GAAA,UA+PA,MAAAC,GAAA3zB,OAAA+P,EAAA,EAAA/P,UAAAgQ,EAAA,QAAAhQ,iBA9PA2O,EAAApF,EAAA4G,UACAC,YAAAK,GACAJ,MAAAI,GACAF,KAAAV,OACA+jB,WACAC,SAEAtjB,KAAAqC,UAAA,MACA,MAAAsT,MAAmBA,EAAAzhB,SAAA4D,KAAmBkI,KAAAE,MACtC,IAAAyV,IAAAzhB,EACA,OAEA,MAAAqvB,EAAA9zB,OAAAsN,EAAA,EAAAtN,CAAAkmB,EAAA1D,UACAuR,EAAAxjB,KAAAyjB,mBACA5W,EAAApd,OAAAQ,EAAA,EAAAR,CAAAyE,KAAA0Y,MAAA1Y,EAAA0Y,KAAAC,OAAA3Y,EAAA0Y,KAAAC,MAAApR,KACAvH,EAAA0Y,KAAAC,MAAApR,KAAAvL,MACA,GACAmzB,EAAAG,IAGAzd,MAAAjO,EAAA,wCAGAiO,MAAAjO,EAAA,2CAGA4rB,QAAA,OACA3d,MAAAjO,EAAA,uCAAyE+U,UACzE8W,YAAAC,EAAA,KAGA7d,MAAA,OAKA2d,QAAAH,EACAxd,MAAAjO,EAAA,uCACA8E,QAAA2mB,IAEAI,YAAAC,EAAA,KAGA7d,MAAAjO,EAAA,2CAGA4rB,QAAA,OACA3d,MAAAjO,EAAA,uCACA6rB,YAAAC,EAAA,KAGA7d,MAAA,KAGAud,KACA7zB,OAAAsN,EAAA,EAAAtN,EACAyE,SACAK,MAAAivB,GAAAD,IAEA3uB,IAAA,CAAAgE,EAAAsK,KACA,MAAAnN,EAAA6C,GAAA,OAAAA,EAAA7C,MAAA6C,EAAA7C,MAAA,GACA8tB,EAAA7jB,KAAA8jB,sBAAAlrB,EAAAsK,GACAzH,EAAAuE,KAAA+jB,aAAAnrB,EAAAsK,GACAyU,EAAA3X,KAAAgkB,WAAAprB,EAAAsK,GACAogB,EAAAjf,MACA4f,QACyBle,MAAA3H,EAAApF,EAAAqF,cAAA,WAAAtI,KACAgQ,MAAA3H,EAAApF,EAAAqF,cAAA,WAAAwlB,KACA9d,MAAA3H,EAAApF,EAAAqF,cAAA,WAAA5C,KACAsK,MAAA3H,EAAApF,EAAAqF,cAAA,WAAAsZ,KAEzB5E,QAAA,EACAna,OACAsrB,WACAtnB,QAAA4mB,KAAoDL,KAASK,IAAcD,EAC3ErgB,QACAtK,OACA+c,WAGAwO,OAAA,EAAAjhB,EACA+gB,QAEAle,MAAA3H,EAAApF,EAAAqF,cAAA,OAA+DjK,OAAS,EAAA8O,WAAmBpL,EAAA,kBAK3FkI,KAAAyC,UACA4gB,UACAC,OACAc,cAGApkB,KAAAgkB,WAAA,EAAAprB,EAAAsK,KACA,MAAAtG,QAAmBA,EAAA+Y,SAAiB3V,KAAAE,MACpC,OAAA9B,EAAApF,EAAAqF,cAAA8d,IAAwDvf,UAAAhE,OAAA+c,YAExD3V,KAAAqkB,cAAA,MACA,MAAA1O,MAAmBA,EAAA7d,KAAWkI,KAAAE,MAC9B,UAAA0R,KAAAniB,OAAA4L,OAAAsa,EAAA1D,UACA,SAAAL,EACA,OAAAxT,EAAApF,EAAAqF,cAAAimB,EAAA,GAAkEC,YAAA,IAGlE,OAAAnmB,EAAApF,EAAAqF,cAAAgC,EAAA,OACAjC,EAAApF,EAAAqF,cAAAiC,EAAA,GAAqDC,KAAAikB,EAAA,IACrDpmB,EAAApF,EAAAqF,cAAAsC,EAAA,OAAA7I,EAAA,qCAEAkI,KAAAyjB,iBAAA,MACA,MAAA9N,MAAmBA,GAAQ3V,KAAAE,MAC3B,IAAAsjB,EACA,UAAA5mB,KAAAnN,OAAA0iB,KAAAwD,EAAA1D,UAAA,CACA,MAAAkP,EAAAvkB,EAAAwV,QAAA+Q,IACA,QAAAhC,EAAA,CACAqC,EAAA5mB,EAAA6nB,UAAAtD,EAAAgC,GAAAhuB,QACA,OAGA,OAAAquB,IAEAxjB,KAAA8jB,sBAAA,EAAAlrB,EAAAsK,KACA,MAAApL,EAAmBA,GAAIkI,KAAAE,MACvBhQ,EAAAT,OAAAQ,EAAA,EAAAR,CAAA+V,KAAAkf,IAAA9rB,EAAA6C,KAAA7C,EAAA0D,aACAqoB,EAAA,OAAA/rB,EAAAwD,aAAAoJ,KAAAkf,IAAA9rB,EAAAwD,cAAAlG,QAAA,KACA,IAAA0uB,EAAA,eAOA,OANA,OAAAhsB,EAAAwD,cAAAxD,EAAA0D,WAAA,IACAsoB,GAAA,aAEA,OAAAhsB,EAAAwD,cAAAxD,EAAA0D,WAAA,IACAsoB,GAAA,aAEAxmB,EAAApF,EAAAqF,cAAA,OAAgDC,UAAA2f,IAChD7f,EAAApF,EAAAqF,cAAA,OAA4CC,UAAAsmB,EAAAxwB,6BAAwD8O,KACpGiH,QAAAwa,EAAA,GACA7sB,EAAA,WAAwC5H,MAAAy0B,IACxC7sB,EAAA,gBACAqS,QAAA,OAAAvR,EAAAwD,cAAAxD,EAAA0D,WAAA,IAAA8B,EAAApF,EAAAqF,cAAA,QAAgHC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA,gBAAAiuB,GAAAG,WAAAzpB,6BAAkF8O,MAClMiH,QAAA,OAAAvR,EAAAwD,cAAAxD,EAAA0D,WAAA,IAAA8B,EAAApF,EAAAqF,cAAA,QAAgHC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA,kBAAAiuB,GAAAG,UAAAH,GAAAI,eAAA1pB,6BAA0G8O,OAC1N9E,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAiuB,GAAAM,iBAAA5pB,6BAAuE8O,KAASzT,OAAA0kB,EAAA,EAAA1kB,CAAAS,OAE5H8P,KAAA6kB,UAAA,MACA,MAAAlP,MAAmBA,GAAQ3V,KAAAE,OAC3BmjB,QAAmBA,GAAUrjB,KAAAV,MAC7BkkB,EAAAxjB,KAAAyjB,mBACA,IAAAvgB,GAAA,EACAnK,EAAA+rB,EAAA,EAAAC,IACA,UAAA3wB,KAAA3E,OAAA0iB,KAAAwD,EAAA0B,UAAA,CACA,IAAA2N,EAAA,EACA,UAAAC,KAAA5B,EAAA,CACA,GAAA4B,EAAAvB,UAAAtvB,EAAA,CACA2E,EACA,QAAA4c,EAAA0B,SAAAjjB,GACA0wB,EAAA,EAAAC,IACAD,EAAA,EAAAI,KACAhiB,EAAA8hB,GAAAxB,EAAA,KACA,MAEAwB,KAGA,OAAA9hB,GAAA,GAAiCA,QAAAnK,kBAEjCiH,KAAAmlB,aAAA,EAAAvsB,EAAAgE,EAAA+Y,EAAAzS,IACA9E,EAAApF,EAAAqF,cAAA6kB,IAA2DtmB,UAAAhE,OAAAxE,kBAAkD8O,OAE7GlD,KAAA+jB,aAAA,EAAAnrB,EAAAsK,KACA,MAAAhP,OAAmBA,EAAA4D,KAAYkI,KAAAE,MAC/B2M,EAAA3Y,EAAA0Y,KAAAC,MAAApR,KAAAvL,MACA,OAAAkO,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACA/a,OAAAQ,EAAA,EAAAR,CAAAmJ,EAAA6C,MACA2C,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAiuB,GAAAM,iBAAA5pB,kBAA4D8O,KAASpL,EAAA,mBACjH5H,OAAA0I,EAAA6C,KAAAoR,EAAA,KAAA3W,QAAA,SAGA8J,KAAAolB,iBAAA,EAAA9S,EAAA+S,EAAAtS,KACA,MAAAjb,EAAmBA,GAAIkI,KAAAE,OACvBojB,KAAmBA,GAAOtjB,KAAAV,OACP4kB,WAAAtrB,KAAaA,EAAAgE,UAAA+Y,QAAAzS,UAAiCogB,EAAA+B,GAEjE/B,EAAA+B,EAAA,GAAApB,MADAlR,IAEqBhN,MAAA/F,KAAAmlB,aAAAvsB,EAAAgE,EAAA+Y,EAAAzS,OAKA6C,MAAA3H,EAAApF,EAAAqF,cAAA,OAAoCjK,OAAS,EAAA8O,WAAmBpL,EAAA,cAGrFwrB,EAAA+B,GAAAtS,SACA/S,KAAAyC,UACA6gB,WAGAtjB,KAAAqd,eAAA,EAAA/K,EAAAgT,EAAAD,KACA,MAAAE,WAAmBA,GAAavlB,KAAAE,MAChC,IAAAojB,EAWA,IAVA,IAAA+B,EACA/B,EAAAtjB,KAAAV,MAAAgkB,KAAA1uB,IAAA4wB,IACAA,EAAAC,SAAAH,EACAE,KAIAlC,MAAAtjB,KAAAV,MAAAgkB,OACA+B,GAAAI,SAAAH,EAEAC,EAAA,CACA,MAAAG,KACA,UAAAF,KAAAlC,EACAkC,EAAAC,UAAAD,EAAA5sB,OAAA4sB,EAAArB,QACAuB,EAAArhB,KAAAmhB,EAAA5sB,MAGA2sB,EAAAG,GAEA1lB,KAAAyC,UAA2B6gB,WAE3BtjB,KAAA2lB,aAAA,EAAArT,EAAApP,EAAAnK,KACA,MAAA6sB,OAAmBA,GAAS5lB,KAAAE,OAC5BmjB,QAAmBA,GAAUrjB,KAAAV,MAC7BsmB,GAGAA,EAFAvC,EAAAngB,EAAA,GAAAwgB,QACA3qB,IAAA+rB,EAAA,EAAAC,OAIA/kB,KAAAolB,iBAAAplB,KAAAolB,iBAAA5S,KAAAxS,MACAA,KAAAqd,eAAArd,KAAAqd,eAAA7K,KAAAxS,MACAA,KAAA2lB,aAAA3lB,KAAA2lB,aAAAnT,KAAAxS,MAEAH,oBACAG,KAAAqC,YAEAxC,mBAAAqF,GACA,MAAAyQ,MAAeA,EAAAzhB,UAAgB8L,KAAAE,MAC/B2lB,EAAA3xB,KAAAuI,KAAAgL,KAAAC,UAAAxT,EAAAuI,MAAA,GACAqpB,EAAA5gB,EAAAhR,QAAAgR,EAAAhR,OAAAuI,KACAgL,KAAAC,UAAAxC,EAAAhR,OAAAuI,MACA,GACAhN,OAAAygB,EAAA,EAAAzgB,CAAAyV,EAAAyQ,SAAAlmB,OAAAygB,EAAA,EAAAzgB,CAAAkmB,IACAmQ,IAAAD,GACA7lB,KAAAqC,YAGAxC,SACA,MAAAwjB,QAAeA,EAAAC,QAAgBtjB,KAAAV,MAC/B,OAAAlB,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACApM,EAAApF,EAAAqF,cAAAymB,EAAA,GAAwCtM,aAAA,gBAAAyL,MAAAZ,EAAA/kB,UAAA4f,GAAA6H,WAAA/lB,KAAAolB,iBAAA9B,OAAAc,OAAApkB,KAAA6kB,YAAAlS,SAAA3S,KAAAqd,eAAAuI,OAAA5lB,KAAA2lB,aAAAK,eAAA,YACxC5nB,EAAApF,EAAAqF,cAAA4nB,EAAA,QACA7nB,EAAApF,EAAAqF,cAAA6nB,EAAA,SACA/b,QAAA,IAAAmZ,EAAAnuB,SAAAiJ,EAAApF,EAAAqF,cAAA,OAAuEC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAiuB,GAAAC,aAAoC3d,KAAAqkB,8HCzQ3G,MAAA8B,GAAAroB,EAAA,EAAAC,QACAtM,QACAwZ,YAAAlK,EAAA,GAAA7Q,OAEAk2B,qBACAhkB,MAAA,QAEAikB,kBACA1W,gBAAA5O,EAAA,GAAA7Q,MACA2b,cAAA9K,EAAA,GAAA7Q,MACA0tB,WAAA7c,EAAA,GAAA7Q,MACAo2B,YAAAvlB,EAAA,GAAA7Q,MACAiwB,aAAApf,EAAA,GAAA7Q,MACA8Y,WAAAjI,EAAA,GAAA7Q,MACA+a,YAAAlK,EAAA,GAAA7Q,SCTAq2B,GAAA,UA0KA,MAAAC,GAAA/2B,OAAA+P,EAAA,EAAA/P,iBAzKA2O,EAAApF,EAAA4G,UACAC,cACAC,SAAAC,WACAC,KAAAV,OACAmnB,iBACAC,kBAAA1mB,KAAAE,MAAAymB,aAAA,GACAC,aAAA,GACAC,gBAAA,OACAC,oBAAA3gB,EACAjS,YAAAiS,GAEAnG,KAAA+mB,SAAA,CAAApR,IACA,MAAA8Q,KACAh3B,OAAA0iB,KAAAwD,EAAA1D,UAAAxa,QAAArD,IACA,SAAAuhB,EAAA1D,SAAA7d,GACA,GAAAoI,MAAAwqB,QAAArR,EAAA1D,SAAA7d,IACAuhB,EAAA1D,SAAA7d,GAAAqD,QAAAvH,IACA,MAAA+2B,EAAA7yB,EAAAnD,IAAAmD,EACA+b,EAAAnQ,KAAAknB,UAAAD,EAAA/2B,GACAu2B,EAAApiB,KAAA8L,SAGA,CACA,MAAA8W,EAAA7yB,EAAAnD,IAAAmD,EACA+b,EAAAnQ,KAAAknB,UAAAD,EAAAtR,EAAA1D,SAAA7d,IACAqyB,EAAApiB,KAAA8L,MAIAnQ,KAAAyC,UAA2BgkB,oBAE3BzmB,KAAAmnB,aAAA,CAAA7U,IACA,MAAAoU,kBAAmBA,GAAoB1mB,KAAAV,MACvCU,KAAAyC,UAA2BgkB,mBAC3BzmB,KAAAE,MAAAknB,gBAAAV,EAAAz1B,GAAA,IACAqhB,EAAAuO,mBAGA7gB,KAAAqnB,YAAA,EAAAJ,EAAA/2B,KACA,MAAAw2B,kBAAmBA,GAAoB1mB,KAAAV,MACvCU,KAAAE,MAAAonB,cAAAZ,EAAAz1B,GAAAf,KAEA8P,KAAAknB,UAAA,EAAAD,EAAA/2B,KACA,MAAAw2B,kBAAmBA,GAAoB1mB,KAAAV,MACvCioB,EAAAvnB,KAAAwnB,eAAAP,EAAA/2B,GACA,OACA+2B,MAAA,IAAAA,EAAA7U,QAAAmU,IAAAU,EAAAP,EAAAz1B,GACA8E,MAAAwxB,EACAr3B,WAGA8P,KAAAwnB,eAAA,EAAAP,EAAA/2B,KACA,IAAAu3B,EAAA,GAyBA,OAhBAA,EADA,KANAA,EADAR,EAAAlhB,MACAkhB,EAAAlhB,MAGAkhB,GAEA7U,QAAAmU,IAEA,QAAAkB,EAAAhZ,MAAA8X,GAAApxB,QAAA,KAIAsyB,EAAAC,OAAA,GAAAC,cAAAF,EAAAhZ,MAAA,QAEAve,EAAA42B,eACAW,MAAiCv3B,EAAA42B,eAAA/gB,OACjC7V,EAAA42B,kBAA4C52B,EAAA03B,YAAA7hB,OAAA7V,EAAA03B,cAE5C13B,EAAA6V,MACA0hB,GAAAv3B,EAAA6V,MAGA0hB,GAAAv3B,EAEAu3B,IAEAznB,KAAA6nB,oBAAA,MACA7nB,KAAAE,MAAA4nB,oBAEA9nB,KAAA+nB,gBAAA,CAAAC,IACA,MAAApB,aAAmBA,EAAAF,qBAAkC1mB,KAAAV,MACrD,UAAA0oB,EAAA5zB,KAAAwyB,KAAAzxB,OAAA,IACA6K,KAAAyC,UAA+BmkB,aAAA,KAC/B5mB,KAAAqnB,YAAAX,EAAAE,GACAoB,EAAAC,kBACAD,EAAAnH,oBAGA7gB,KAAAkoB,aAAA/X,KACA,MAAAsW,cAAmBA,GAAgBzmB,KAAAV,MACnC4D,EAAAujB,EAAArU,QAAAjC,GACA,GAAAjN,GAAA,GACA,MAAAilB,MACA1B,EAAAhY,MAAA,EAAAvL,MACAujB,EAAAhY,MAAAvL,EAAA,IAEAlD,KAAAyC,UAA+BgkB,cAAA0B,IAC/BnoB,KAAAE,MAAAknB,gBAAAjX,EAAA8W,MAAA9W,EAAAjgB,UAGA8P,KAAAooB,iBAAAC,KACA,MAAA3B,kBAAmBA,GAAoB1mB,KAAAV,MACvConB,IAAA2B,GACAroB,KAAAyC,UACAmkB,aAAA,GACAF,kBAAA2B,MAIAroB,KAAAsoB,mBAAA,CAAA1B,IACA5mB,KAAAyC,UAA2BmkB,mBAG3B/mB,mBAAAqF,EAAAqjB,GACA,MAAA5B,aAAeA,EAAAhR,QAAAzhB,UAA8B8L,KAAAE,MAC7ChM,IAAAzE,OAAA+4B,GAAA,EAAA/4B,CAAAyE,EAAAgR,EAAAhR,SACA8L,KAAA+mB,SAAApR,GAEAlmB,OAAA+4B,GAAA,EAAA/4B,CAAAk3B,EAAAzhB,EAAAyhB,eACA3mB,KAAAyC,UACAikB,kBAAA1mB,KAAAE,MAAAymB,aAAA,KAIA9mB,cACA,MAAA6mB,kBAAeA,EAAAE,gBAAkC5mB,KAAAV,MACjD,OAAAonB,EAGAtoB,EAAApF,EAAAqF,cAAAoqB,GAAA,GAAgDx3B,GAAA,SAAAsnB,SAAAvY,KAAAsoB,mBAAAI,WAAA1oB,KAAA+nB,gBAAAY,YAAAjC,EAAAiC,YAAAz4B,MAAA02B,IAFhD,KAIA/mB,SACA,MAAA8mB,aAAeA,EAAAiC,mBAAAC,aAAA/wB,KAAgDkI,KAAAE,OAC/DumB,cAAeA,GAAgBzmB,KAAAV,MAC/B,OAAAlB,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA02B,GAAAE,mBAC5CjoB,EAAApF,EAAAqF,cAAAyqB,GAAA,OACA1qB,EAAApF,EAAAqF,cAAA0qB,GAAA,GAAqDvQ,aAAA1gB,EAAA,0CACrDsG,EAAApF,EAAAqF,cAAA2qB,GAAA,OACA5qB,EAAApF,EAAAqF,cAAA4qB,GAAA,OACA7qB,EAAApF,EAAAqF,cAAA6qB,GAAA,GAA6D1Q,aAAA1gB,EAAA,+CAAgE6uB,EAAA/xB,IAAA,EAAqB3D,KAAA8E,WAClJqI,EAAApF,EAAAqF,cAAA8qB,GAAA,GAA+E/0B,mBAAqBnD,IAAG8E,QAAA7F,MAAAe,OAEvGmN,EAAApF,EAAAqF,cAAA4qB,GAAA,OAAAjpB,KAAAopB,gBACAhrB,EAAApF,EAAAqF,cAAA2qB,GAAA,OACA5qB,EAAApF,EAAAqF,cAAA4qB,GAAA,OACA7qB,EAAApF,EAAAqF,cAAAuZ,GAAA,GAAyDG,WAAA6Q,EAAAlX,QAAA1R,KAAA6nB,oBAAAhQ,QAAAD,GAAA,EAAA7jB,MACzDqK,EAAApF,EAAAqF,cAAA,QAA6DC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAA02B,GAAA10B,SAAgCqG,EAAA,+BAC7FsG,EAAApF,EAAAqF,cAAAgrB,GAAA,WACAjrB,EAAApF,EAAAqF,cAAA2qB,GAAA,GAAuDl4B,OAASkY,WAAA,SAChE5K,EAAApF,EAAAqF,cAAA4qB,GAAA,OAAAJ,KACAzqB,EAAApF,EAAAqF,cAAA0qB,GAAA,GAAqDvQ,aAAA1gB,EAAA,kDACrDsG,EAAApF,EAAAqF,cAAA2qB,GAAA,OACA5qB,EAAApF,EAAAqF,cAAA4qB,GAAA,OACA7qB,EAAApF,EAAAqF,cAAAoC,EAAA,GAAwDC,KAAAwT,EAAA,EAAAvJ,GAAA2e,aAAA,MAAyCxxB,EAAA,+BACjG5H,MAAA8P,KAAAE,MAAAqpB,kBAEA9C,EAAAtxB,OAAA,GAAAiJ,EAAApF,EAAAqF,cAAAD,EAAApF,EAAAwR,SAAA,KACApM,EAAApF,EAAAqF,cAAA2qB,GAAA,OACA5qB,EAAApF,EAAAqF,cAAA4qB,GAAA,OAAAnxB,EAAA,wCACAsG,EAAApF,EAAAqF,cAAA2qB,GAAA,OACA5qB,EAAApF,EAAAqF,cAAA4qB,GAAA,OAAAxC,EAAA7xB,IAAA,CAAAgE,EAAAsK,IAAA9E,EAAApF,EAAAqF,cAAAmrB,GAAA,GAAkI14B,OAASqvB,aAAA,QAAuB/rB,sBAAyB8O,IAAMwO,QAAA,IAAA1R,KAAAkoB,aAAAtvB,IAA2CA,EAAA7C,UAC5OqI,EAAApF,EAAAqF,cAAA2qB,GAAA,OACA5qB,EAAApF,EAAAqF,cAAA4qB,GAAA,OACA7qB,EAAApF,EAAAqF,cAAAuZ,GAAA,GAA6DlG,QAAA1R,KAAAmnB,aAAAtP,QAAA,SAA+C/f,EAAA,+CC5K5G2xB,GAAA3rB,EAAA,EAAAC,QACAsM,SACAsF,gBAAA5O,EAAA,GAAA7Q,MACA2b,cAAA9K,EAAA,GAAA7Q,MACA0tB,WAAA7c,EAAA,GAAA7Q,OAEAw5B,iBACA/Z,gBAAA5O,EAAA,GAAA7Q,MACA8a,UAAA,QAEAob,qBACAzW,gBAAA5O,EAAA,GAAA7Q,MACA8Y,WAAAjI,EAAA,GAAA7Q,MACA+a,YAAAlK,EAAA,GAAA7Q,OAEA24B,YACAlZ,gBAAA5O,EAAA,GAAA7Q,MACAoJ,QAAAyH,EAAA,GAAA7Q,OAEAy5B,gBACA3gB,WAAAjI,EAAA,GAAA7Q,MACA+a,YAAAlK,EAAA,GAAA7Q,SCJA05B,GAAA,OACAC,GAAA,UACAC,IACA5W,MAAA,OACA/C,QACApU,MAAA,GACArF,OAAA,EACA0Z,WAAA,UACAC,iBAAA,QACAC,kBAAA,GAEA2B,UACApV,QAAA,KAEAwa,UACA5b,KAAA,SAwQA,MAAAsuB,GAAAt6B,OAAA4P,EAAA,EAAA5P,CAAA,CAAA6P,EAAAY,KACA,MAAA4R,EAAAriB,OAAAygB,EAAA,EAAAzgB,CAAAsiB,SAAAC,QACA2D,GACAzC,MAAA,OACA/C,OAAA1gB,OAAAgK,UAAgCqwB,GAAA3Z,OAAA2B,EAAA3B,QAChC8B,SAAAH,EAAAG,UAAA6X,GAAA7X,SACAoF,SAAAvF,EAAAuF,UAAAyS,GAAAzS,UAEApH,EAAAxgB,OAAAygB,EAAA,EAAAzgB,CAAAkmB,GACAzhB,EAAAsc,EAAA,EAAAC,aAAAnR,EAAAsqB,GAAA3Z,GACAmD,EAAA5C,EAAA,EAAA6C,kBAAA/T,EAAAsqB,GAAA3Z,GACAS,EAAAF,EAAA,EAAAG,wBAAArR,EAAAsqB,GAAA3Z,GACAqD,EAAA7jB,OAAA8jB,EAAA,EAAA9jB,CAAA+jB,EAAA,GAIA,OACAngB,UAJAmgB,EAAA,EAAAC,gBAAAnU,EAAA,MAAAgU,GAKAI,eAJAF,EAAA,EAAAG,qBAAArU,EAAA,MAAAgU,GAKAM,qBAJAJ,EAAA,EAAAK,2BAAAvU,EAAA,MAAAgU,GAKAqC,QACA1F,cACA/b,SACAkf,cACA1C,uBAGAsZ,IACAnZ,YAAAL,EAAA,EAAAK,aAEArhB,EAAA,EAAAC,OAAA+P,EAAA,EAAA/P,EAAA,CAAAA,OAAAgQ,EAAA,QAAAhQ,CAAAs6B,GAAAC,GAAAv6B,eAnSA2O,EAAApF,EAAA4G,UACAC,YAAAkR,EAAAC,GACAlR,MAAAiR,EAAAC,GACAhR,KAAAiR,cACAoS,WACAhH,mBAAA,EACAiH,QACAoC,kBAEA1lB,KAAAV,MAAA7P,OAAAgK,UAAqCuG,KAAAiR,cACrCjR,KAAAyc,eAAA,CAAA/nB,IACA,MAAA2nB,kBAAmBA,EAAAqJ,iBAAmC1lB,KAAAV,OACtDqW,MAAmBA,GAAQ3V,KAAAE,MAC3BqjB,EAAA9zB,OAAAsN,EAAA,EAAAtN,CAAAkmB,EAAA1D,UACAuR,EAAAxjB,KAAAyjB,mBACA,OAAArlB,EAAApF,EAAAqF,cAAA2Y,IAAsDE,WAAAwO,EAAAvwB,SAAAT,EAAAS,OAAAyH,QAAA4mB,KAAwFqG,KAASrG,IAAcD,EAAAxQ,OAAAsJ,EAAA/nB,MAAAoxB,EAAAxQ,QAAAlV,KAAA0c,uBAAA/G,YAErK3V,KAAAiqB,gBAAA,CAAA1G,IACA,MAAAzrB,EAAmBA,GAAIkI,KAAAE,MACvB,kBAAAqjB,IAGAtyB,GAAA,UACA8E,MAAA+B,EAAA,iCACAiO,MAAAjO,EAAA,2CACA6wB,YAAA7wB,EAAA,gDACAuwB,WAAA,SAIA,SAAA9E,IAGAtyB,GAAA,OACA8E,MAAA+B,EAAA,iCACAiO,MAAAjO,EAAA,wCACA6wB,YAAA7wB,EAAA,6CACAuwB,WAAA,SAIA,YAAA9E,IAGAtyB,GAAA,UACA8E,MAAA+B,EAAA,iCACAiO,MAAAjO,EAAA,2CACA6wB,YAAA7wB,EAAA,gDACAuwB,WAAA,WAQAp3B,GAAA,MACA8E,MAAA+B,EAAA,iCACAiO,MAAAjO,EAAA,uCACA6wB,YAAA7wB,EAAA,4CACAuwB,WAAA,WAMAroB,KAAAyjB,iBAAA,MACA,MAAA9N,MAAmBA,GAAQ3V,KAAAE,MAC3B,IAAAsjB,EACA,UAAA5mB,KAAAnN,OAAA0iB,KAAAwD,EAAA1D,UAAA,CACA,MAAAkP,EAAAvkB,EAAAwV,QAAAyX,IACA,QAAA1I,EAAA,CACAqC,EAAA5mB,EAAA6nB,UAAAtD,EAAA0I,GAAA10B,QACA,OAGA,OAAAquB,IAEAxjB,KAAAkqB,cAAA,EAAAC,GAAA,KACA,MAAAj2B,OAAmBA,GAAS8L,KAAAE,MAC5B9H,EAAAlE,KAAA0Y,KAAA1Y,EAAA0Y,KAAAxU,MAAA,EACA2D,EAAA7H,KAAA0Y,MAAA1Y,EAAA0Y,KAAAuD,QAAAjc,EAAA0Y,KAAAuD,OAAApU,MACA7H,EAAA0Y,KAAAuD,OAAApU,MACA+tB,GAAA3Z,OAAApU,MAIAquB,GAHAl2B,KAAA0Y,MAAA1Y,EAAA0Y,KAAAuD,QAAAjc,EAAA0Y,KAAAuD,OAAAzZ,OACAxC,EAAA0Y,KAAAuD,OAAAzZ,OACAozB,GAAA3Z,OAAAzZ,QACAqF,EAAA,EACA,OAAAqC,EAAApF,EAAAqF,cAAAgsB,EAAA,GAAqDC,UAAAlyB,EAAAmyB,gBAAAvqB,KAAAwqB,oBAAAC,UAAAzqB,KAAA0qB,cAAAN,OAAAO,QAAA5uB,EAAA8b,QAAAsS,EAAAE,EAAA,EAAAtM,OAAAsM,EAAA,EAAA5K,IAAAmL,SAAA,+CAErD5qB,KAAA6qB,SAAA,MACA,MAAAlV,MAAmBA,EAAAzhB,UAAgB8L,KAAAE,MACnCqjB,EAAA9zB,OAAAsN,EAAA,EAAAtN,CAAAkmB,EAAA1D,UACAuR,EAAAxjB,KAAAyjB,mBACA,OAAArlB,EAAApF,EAAAqF,cAAA+kB,IAAuDxmB,QAAA4mB,KAA6BqG,KAASrG,IAAcD,EAAAgC,WAAAvlB,KAAA8qB,eAAAlF,OAAA5lB,KAAA+qB,WAAApV,QAAAzhB,aAE3G8L,KAAAgrB,WAAA,MACA,MAAAtF,cAAmBA,GAAgB1lB,KAAAV,OACnCqW,MAAmBA,EAAAzhB,SAAA4D,KAAmBkI,KAAAE,MACtCqjB,EAAA9zB,OAAAsN,EAAA,EAAAtN,CAAAkmB,EAAA1D,UACAuR,EAAAxjB,KAAAyjB,mBACAkD,EAAA3mB,KAAAiqB,gBAAAzG,EAAA,MAAAD,GACA,OAAAnlB,EAAApF,EAAAqF,cAAAmoB,IAAyDyE,WAAAnzB,EAAA,iCAAA6uB,eAAAiC,iBAAA,IAAAlD,EAAAvwB,OAAA2yB,gBAAA9nB,KAAAid,sBAAAqK,cAAAtnB,KAAAkrB,kBAAA9D,gBAAApnB,KAAAmrB,oBAAAtC,WAAA7oB,KAAAkqB,gBAAAvU,QAAAzhB,SAAAq1B,aAAAr1B,IAAA0Y,KAAAxU,MAAA,MAEzD4H,KAAA0c,uBAAA,CAAA3J,IACA/S,KAAAyC,UAA2B4Z,kBAAAtJ,MAE3B/S,KAAAid,sBAAA,MACAjd,KAAAyC,UAA2B4Z,mBAAA,MAE3Brc,KAAAkrB,kBAAA,EAAA7C,EAAAT,KACA,MAAAwD,QAAmBA,EAAAzV,SAAiB3V,KAAAE,MACpCiX,EAAA1nB,OAAAgK,UAA6CgO,KAAA2P,MAAA3P,KAAAC,UAAAiO,KAC7C6N,EAAAxjB,KAAAyjB,mBACA4H,EAAA,QAAAhD,KAA4DwB,KAASrG,IAAc6E,EACnFlR,EAAAlF,SAAAoZ,GACA,MAAAlU,EAAAlF,SAAAoZ,GACAlU,EAAAlF,SAAAoZ,GAAAzD,EAEAzQ,EAAAlF,SAAAoZ,GAAA7c,SAAAoZ,KACAzQ,EAAAlF,SAAAoZ,IACAlU,EAAAlF,SAAAoZ,GACAzD,IAKAzQ,EAAAlF,SAAAoW,IAAAT,GAEA,MAAA0D,EAAAtrB,KAAAurB,iBAAApU,GAAA,GACAiU,EAAAI,QAAAF,KAEAtrB,KAAAmrB,oBAAA,EAAA9C,EAAAT,KACA,MAAAwD,QAAmBA,EAAAzV,SAAiB3V,KAAAE,MACpCiX,EAAA1nB,OAAAgK,UAA6CgO,KAAA2P,MAAA3P,KAAAC,UAAAiO,KAC7C6N,EAAAxjB,KAAAyjB,mBACA4H,EAAA,QAAAhD,KAA4DwB,KAASrG,IAAc6E,EACnF,QAAAT,EACAzQ,EAAAlF,UACApS,CAAAwrB,GAAA,UAGA,GAAA7uB,MAAAwqB,QAAA7P,EAAAlF,SAAAoZ,IAGA,CACA,MAAAnoB,EAAAiU,EAAAlF,SAAAoZ,GAAAjZ,QAAAwV,GACA1kB,GAAA,IACAiU,EAAAlF,SAAAoZ,OACA1V,EAAA1D,SAAAoZ,GAAA5c,MAAA,EAAAvL,MACAyS,EAAA1D,SAAAoZ,GAAA5c,MAAAvL,EAAA,UAPAiU,EAAAlF,SAAAoZ,GAAA,IAWA,MAAAC,EAAAtrB,KAAAurB,iBAAApU,GAAA,GACAiU,EAAAI,QAAAF,KAEAtrB,KAAAmR,mBAAAvU,KACA,MAAAwuB,QAAmBA,EAAAzV,SAAiB3V,KAAAE,MACpCurB,EAAA7uB,EACAua,EAAA1nB,OAAAgK,UAA6CgO,KAAA2P,MAAA3P,KAAAC,UAAAiO,KAAsC1D,UACnFpS,CAAA4rB,GAAA,KACiBpU,UAAa5b,KAAA,UAC9B2vB,EAAAI,QAAAxrB,KAAAurB,iBAAApU,GAAA,IACAnX,KAAAyC,UAA2BijB,qBAE3B1lB,KAAAwqB,oBAAA,EAAAkB,EAAAf,KACA,MAAAS,QAAmBA,EAAAzV,SAAiB3V,KAAAE,MACpCiX,EAAA1nB,OAAAgK,UAA6CgO,KAAA2P,MAAA3P,KAAAC,UAAAiO,KAC7CwB,EAAAhH,OAAA1gB,OAAAgK,UAA8Ckc,EAAAxF,QAAiBpU,MAAA4uB,IAC/D,MAAAW,EAAAtrB,KAAAurB,iBAAApU,GAAA,GACAiU,EAAAI,QAAAF,KAEAtrB,KAAA8qB,eAAA,CAAApF,IACA1lB,KAAAyC,UAA2BijB,oBAE3B1lB,KAAA0qB,cAAA,EAAApY,EAAAqZ,KACA,MAAAP,QAAmBA,EAAAzV,QAAAzhB,UAAyB8L,KAAAE,MAC5CnE,EAAA7H,KAAA0Y,MAAA1Y,EAAA0Y,KAAAuD,QAAAjc,EAAA0Y,KAAAuD,OAAApU,MACA7H,EAAA0Y,KAAAuD,OAAApU,MACA+tB,GAAA3Z,OAAApU,MACArF,EAAAi1B,EAAA5vB,IACAob,EAAA1nB,OAAAgK,UAA6CgO,KAAA2P,MAAA3P,KAAAC,UAAAiO,KAC7CwB,EAAAhH,OAAA1gB,OAAAgK,UAA8Ckc,EAAAxF,QAAiBzZ,WAC/D,MAAA40B,EAAAtrB,KAAAurB,iBAAApU,GACAiU,EAAAI,QAAAF,KAEAtrB,KAAA+qB,WAAA,EAAAa,EAAAC,KACA,MAAAT,QAAmBA,EAAAzV,SAAiB3V,KAAAE,MACpCiX,EAAA1nB,OAAAgK,UAA6CgO,KAAA2P,MAAA3P,KAAAC,UAAAiO,KAC7CwB,EAAAE,YACAF,EAAAE,SAAAuU,GAAAC,EAAA,aACA,MAAAP,EAAAtrB,KAAAurB,iBAAApU,GACAiU,EAAAI,QAAAF,KAEAtrB,KAAA8rB,aAAA,MACA,MAAAnW,MAAmBA,EAAA5D,WAAAlB,cAAAua,UAAAnb,eAAqDjQ,KAAAE,MACxE6R,EAAAC,OAOAnB,EAAA+Y,GAAA3Z,GANAmb,EAAAI,QAAAxrB,KAAAurB,kBACAtZ,SAAA0D,EAAA1D,SACAoF,UAA+B5b,KAAA,aAO/BuE,KAAA0c,uBAAA1c,KAAA0c,uBAAAlK,KAAAxS,MACAA,KAAAid,sBAAAjd,KAAAid,sBAAAzK,KAAAxS,MACAA,KAAAkrB,kBAAAlrB,KAAAkrB,kBAAA1Y,KAAAxS,MACAA,KAAAmrB,oBAAAnrB,KAAAmrB,oBAAA3Y,KAAAxS,MACAA,KAAAwqB,oBAAAxqB,KAAAwqB,oBAAAhY,KAAAxS,MACAA,KAAA8qB,eAAA9qB,KAAA8qB,eAAAtY,KAAAxS,MACAA,KAAA0qB,cAAA1qB,KAAA0qB,cAAAlY,KAAAxS,MACAA,KAAA+qB,WAAA/qB,KAAA+qB,WAAAvY,KAAAxS,MAEAH,oBACAG,KAAA8rB,eAEAjsB,mBAAAqF,EAAAqjB,GACA,MAAAxW,SAAeA,EAAA7d,SAAAkf,cAAAnD,eAA6CjQ,KAAAE,OAC5DwlB,cAAeA,GAAgB1lB,KAAAV,MAC/B6X,EAAAjS,EAAA+K,gBACA8b,GAAA73B,IAAAkf,EACA4Y,GAAAja,EAAAC,OACAia,EAAA1D,EAAA7C,mBACAvO,GAAA4U,GAAAC,GAAAC,IACAjsB,KAAA8rB,eAGAjsB,iBAAA8V,EAAAuW,GAAA,GAKA,OAHAA,IACAvW,EAAAxF,OAAA1gB,OAAAgK,UAA2Ckc,EAAAxF,QAAiBzZ,OAAAozB,GAAA3Z,OAAAzZ,yBAE9BjH,OAAAygB,EAAA,EAAAzgB,CAAAkmB,KAE9B9V,SACA,MAAAxM,UAAeA,EAAAqgB,iBAAAE,uBAAA+B,QAAAzhB,SAAAkf,eAA+EpT,KAAAE,MAC9FqjB,EAAA9zB,OAAAsN,EAAA,EAAAtN,CAAAkmB,EAAA1D,UACAuR,EAAAxjB,KAAAyjB,mBACA/uB,EAAAjF,OAAAsN,EAAA,EAAAtN,EACAyE,SACAK,MAAAivB,GAAAD,IAEA/M,EAAA9C,GAAAN,EACA+Y,EAAA,IAAAvY,EACAwY,OAAAjmB,IAAA9S,QACA8S,IAAA9S,EAAAuZ,MACA,IAAAvZ,EAAAuZ,KAAAxU,OACA,IAAAwb,EACA,OAAAxV,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAg6B,GAAAC,kBAC5CtrB,EAAApF,EAAAqF,cAAA0V,GAAgDC,iBAAAhU,KAAAmR,qBAChDhH,QAAAqM,GAAApY,EAAApF,EAAAqF,cAAAguB,EAAA,GAA+D7V,UAAerM,QAAAiiB,GAAAhuB,EAAApF,EAAAqF,cAAAiuB,EAAA,QAAAniB,QAAAgiB,GAAA/tB,EAAApF,EAAAqF,cAAAkuB,EAAA,QAAAnuB,EAAApF,EAAAqF,cAAA,OAA0KC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAg6B,GAAApf,UACxPrK,KAAAgrB,aACAhrB,KAAAyc,eAAA/nB,GACA0J,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAg6B,GAAAE,iBAAwC3pB,KAAA6qB,YACpFzsB,EAAApF,EAAAqF,cAAA,OAA4CC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAg6B,GAAArD,sBAC5ChoB,EAAApF,EAAAqF,cAAA,OAAgDC,UAAA7O,OAAAqO,EAAA,EAAArO,CAAAg6B,GAAAZ,aAAoC7oB,KAAAkqB,eAAA","file":"0508a72015194c142803.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpCloudDetails from './ocpCloudDetails';\nexport default hot(module)(OcpCloudDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummary.styles';\nconst OcpCloudReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpCloudReportSummary = translate()(OcpCloudReportSummaryBase);\nexport { OcpCloudReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpCloudReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { OcpCloudReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryDetails.styles';\nconst OcpCloudReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const cloudReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (cloudReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (cloudReportType) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpCloudReportSummaryDetails = translate()(OcpCloudReportSummaryDetailsBase);\nexport { OcpCloudReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryItem.styles';\nconst OcpCloudReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpCloudReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpCloudReportSummaryItem = translate()(OcpCloudReportSummaryItemBase);\nexport { OcpCloudReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './ocpCloudReportSummaryItems.styles';\nclass OcpCloudReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpCloudReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpCloudReportSummaryItems = translate()(OcpCloudReportSummaryItemsBase);\nexport { OcpCloudReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                    {\n                        data: previousLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(previousLimitData, limitKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousLimitData,\n                    },\n                    {\n                        data: currentLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(currentLimitData, limitKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentLimitData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: 'area-' + index, name: 'area-' + index, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((_, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(`area-${index}`);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { parseQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_cloud_details.title')),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('ocp_cloud_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_cloud_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpCloudReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudExportActions, ocpCloudExportSelectors, } from 'store/ocpCloudExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpCloudExportSelectors.selectExportError(state),\n        export: ocpCloudExportSelectors.selectExport(state),\n        fetchStatus: ocpCloudExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpCloudExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpCloudReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpCloudReportsActions from 'store/ocpCloudReports/ocpCloudReportsActions';\nimport * as ocpCloudReportsSelectors from 'store/ocpCloudReports/ocpCloudReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpCloudReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformOcpCloudReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('ocp_cloud_details.historical.cost_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_cloud_details.historical.cpu_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_cloud_details.historical.memory_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/ocpCloudDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_cloud_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_cloud_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_cloud_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_cloud_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        if (report && report.meta && report.meta.total) {\n            if (report.meta.total.limit !== null) {\n                const limit = Math.trunc(report.meta.total.limit.value);\n                const limitUnits = t(`units.${unitLookupKey(report.meta.total.limit.units)}`);\n                datum.limit = {\n                    legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    value: Math.trunc(limit),\n                };\n            }\n            if (report.meta.total.request !== null) {\n                const request = Math.trunc(report.meta.total.request.value);\n                const requestUnits = t(`units.${unitLookupKey(report.meta.total.request.units)}`);\n                datum.ranges = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        value: Math.trunc(request),\n                    },\n                ];\n            }\n            if (report.meta.total.usage !== null) {\n                const usage = Math.trunc(report.meta.total.usage.value);\n                const usageUnits = t(`units.${unitLookupKey(report.meta.total.usage.units)}`);\n                datum.usage = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        value: Math.trunc(usage),\n                    },\n                ];\n            }\n        }\n        return datum;\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                    ? [\n                        {\n                            tooltip: cpuDatum.limit.tooltip,\n                            y: cpuDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value ? [{ name: cpuDatum.limit.legend }] : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: cpuDatum.usage.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.usage[0].tooltip,\n                            y: cpuDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                    ? [{ name: cpuDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: cpuDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.ranges[0].tooltip,\n                            y: cpuDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                    ? [{ name: cpuDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width })))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                    ? [\n                        {\n                            tooltip: memoryDatum.limit.tooltip,\n                            y: memoryDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                    ? [{ name: memoryDatum.limit.legend }]\n                    : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: memoryDatum.usage.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.usage[0].tooltip,\n                            y: memoryDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                    ? [{ name: memoryDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: memoryDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.ranges[0].tooltip,\n                            y: memoryDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                    ? [{ name: memoryDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_cloud_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpCloudReportItems } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedOcpCloudReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(OcpCloudReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_cloud_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (!((groupBy === 'project' || groupBy === 'node') &&\n                    getIdKeyForTab(tab).toString() === 'project')) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top_ocp_cloud', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"projects\" /* projects */,\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_cloud_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_cloud_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_cloud_details.name_column_title', {\n                            groupBy: groupById,\n                        }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpCloudReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = 'iconOverride';\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    Boolean(percentage > 0)\n                        ? t('percent', { value: percentage })\n                        : t('percent_zero'),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpCloudDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpCloudDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'or:tag:';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpCloudDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'cluster') {\n                return [\n                    {\n                        id: 'cluster',\n                        label: t('ocp_cloud_details.filter.name'),\n                        title: t('ocp_cloud_details.filter.cluster_select'),\n                        placeholder: t('ocp_cloud_details.filter.cluster_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'node') {\n                return [\n                    {\n                        id: 'node',\n                        label: t('ocp_cloud_details.filter.name'),\n                        title: t('ocp_cloud_details.filter.node_select'),\n                        placeholder: t('ocp_cloud_details.filter.node_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'project') {\n                return [\n                    {\n                        id: 'project',\n                        label: t('ocp_cloud_details.filter.name'),\n                        title: t('ocp_cloud_details.filter.project_select'),\n                        placeholder: t('ocp_cloud_details.filter.project_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by project tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('ocp_cloud_details.filter.name'),\n                        title: t('ocp_cloud_details.filter.tag_select'),\n                        placeholder: t('ocp_cloud_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTagKey ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_cloud_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp-on-aws?${getQuery(query)}`; // Todo: replace ocp-on-aws with ocp-cloud\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpCloudReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpCloudDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpCloudDetails));\n"],"sourceRoot":""}