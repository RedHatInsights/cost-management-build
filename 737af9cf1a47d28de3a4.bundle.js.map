{"version":3,"sources":["webpack:///./src/components/sources/inactiveSources/inactiveSources.scss?839b","webpack:///./src/components/sources/inactiveSources/inactiveSources.scss","webpack:///./src/utils/cookie.ts","webpack:///./src/components/sources/inactiveSources/inactiveSources.tsx","webpack:///./src/components/sources/inactiveSources/index.ts","webpack:///./src/pages/state/notAuthorized/notAuthorizedState.tsx","webpack:///./src/pages/state/notAuthorized/notAuthorized.tsx","webpack:///./src/pages/state/notAuthorized/index.ts","webpack:///./src/pages/state/notFound/notFound.tsx","webpack:///./src/pages/state/notFound/index.ts","webpack:///./src/api/queries/providersQuery.ts","webpack:///./src/utils/pathname.ts"],"names":["content","module","i","options","transform","undefined","locals","exports","___CSS_LOADER_API_IMPORT___","___CSS_LOADER_AT_RULE_IMPORT_0___","push","getCookieValue","name","cookie","document","match","pop","Component","super","arguments","this","defaultState","state","Object","assign","fetchAwsProviders","awsProvidersQueryString","fetchProviders","props","fetchAzureProviders","azureProvidersQueryString","fetchGcpProviders","gcpProvidersQueryString","fetchOcpProviders","ocpProvidersQueryString","getInactiveSourceNames","awsProviders","azureProviders","ocpProviders","sources","data","map","active","getInactiveSources","names","length","createElement","index","handleOnClose","value","forceUpdate","isAlertClosed","resetAlert","now","Date","setTime","getTime","toUTCString","deleteSessionCookie","awsProvidersFetchStatus","azureProvidersFetchStatus","gcpProviders","gcpProvidersFetchStatus","ocpProvidersFetchStatus","awsProvidersError","azureProvidersError","ocpProvidersError","t","release","title","className","Alert","isInline","variant","actionClose","AlertActionCloseButton","onClose","actionLinks","Fragment","href","mapStateToProps","providers","selectProviders","selectProvidersError","selectProvidersFetchStatus","gcpProvidersError","mapDispatchToProps","InactiveSources","withTranslation","pathname","serviceName","awsDetails","awsDetailsBreakdown","azureDetails","azureDetailsBreakdown","gcpDetails","gcpDetailsBreakdown","costModels","ocpDetails","ocpDetailsBreakdown","NotAuthorizedState","withRouter","PageHeader","Main","InvalidObject","getProvidersQuery","query","encode","indices","getReleasePath","pathName","window","location","split","shift"],"mappings":"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","file":"737af9cf1a47d28de3a4.bundle.js","sourcesContent":["\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!./inactiveSources.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!./inactiveSources.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!./inactiveSources.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_AT_RULE_IMPORT_0___ = require(\"-!../../../../node_modules/css-loader/dist/cjs.js!@patternfly/patternfly/base/patternfly-variables.css\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\nexports.push([module.id, \".alert{background-color:var(--pf-global--BackgroundColor--light-100);padding-left:var(--pf-global--spacer--lg);padding-right:var(--pf-global--spacer--lg);padding-top:var(--pf-global--spacer--lg)}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","export function deleteSessionCookie(name) {\n    const now = new Date();\n    now.setTime(now.getTime() - 3600);\n    document.cookie = `${name}=; expires=${now.toUTCString()}; path=/`;\n}\nexport function getCookieValue(name) {\n    const cookie = document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n    return cookie ? cookie.pop() : '';\n}\nexport function setSessionCookie(name, value) {\n    document.cookie = `${name}=${value}; path=/`;\n}\n","import './inactiveSources.scss';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ocpProvidersQuery, providersActions, providersSelectors, } from 'store/providers';\nimport { deleteSessionCookie, getCookieValue, setSessionCookie } from 'utils/cookie';\nimport { getReleasePath } from 'utils/pathname';\nconst inactiveSourcesID = 'cost_inactiveSources';\nconst tokenID = 'cs_jwt';\nclass InactiveSourcesBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.fetchAwsProviders = () => {\n            const { awsProvidersQueryString, fetchProviders } = this.props;\n            fetchProviders(\"aws\" /* aws */, awsProvidersQueryString);\n        };\n        this.fetchAzureProviders = () => {\n            const { azureProvidersQueryString, fetchProviders } = this.props;\n            fetchProviders(\"azure\" /* azure */, azureProvidersQueryString);\n        };\n        this.fetchGcpProviders = () => {\n            const { gcpProvidersQueryString, fetchProviders } = this.props;\n            fetchProviders(\"gcp\" /* gcp */, gcpProvidersQueryString);\n        };\n        this.fetchOcpProviders = () => {\n            const { fetchProviders, ocpProvidersQueryString } = this.props;\n            fetchProviders(\"ocp\" /* ocp */, ocpProvidersQueryString);\n        };\n        this.getInactiveSourceNames = () => {\n            const { awsProviders, azureProviders, ocpProviders } = this.props;\n            const sources = [];\n            if (awsProviders && awsProviders.data) {\n                awsProviders.data.map(data => {\n                    if (data.active !== true) {\n                        sources.push(data.name);\n                    }\n                });\n            }\n            if (azureProviders && azureProviders.data) {\n                azureProviders.data.map(data => {\n                    if (data.active !== true) {\n                        sources.push(data.name);\n                    }\n                });\n            }\n            if (ocpProviders && ocpProviders.data) {\n                ocpProviders.data.map(data => {\n                    if (data.active !== true) {\n                        sources.push(data.name);\n                    }\n                });\n            }\n            return sources;\n        };\n        this.getInactiveSources = (names) => {\n            if (names.length < 2) {\n                return null;\n            }\n            return (React.createElement(\"p\", null, names.map((name, index) => {\n                if (index === names.length - 1) {\n                    return name;\n                }\n                else {\n                    return `${name}, `;\n                }\n            })));\n        };\n        this.handleOnClose = () => {\n            setSessionCookie(inactiveSourcesID, getCookieValue(tokenID));\n            this.forceUpdate();\n        };\n        this.isAlertClosed = () => {\n            // Keep closed if token matches current session\n            const result = getCookieValue(tokenID) === getCookieValue(inactiveSourcesID);\n            return result;\n        };\n        this.resetAlert = () => {\n            // Delete only if cookie exists\n            if (getCookieValue(inactiveSourcesID)) {\n                deleteSessionCookie(inactiveSourcesID);\n            }\n        };\n    }\n    componentDidMount() {\n        const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, } = this.props;\n        if (!awsProviders && awsProvidersFetchStatus !== 1 /* inProgress */) {\n            this.fetchAwsProviders();\n        }\n        if (!azureProviders && azureProvidersFetchStatus !== 1 /* inProgress */) {\n            this.fetchAzureProviders();\n        }\n        if (!gcpProviders && gcpProvidersFetchStatus !== 1 /* inProgress */) {\n            this.fetchGcpProviders();\n        }\n        if (!ocpProviders && ocpProvidersFetchStatus !== 1 /* inProgress */) {\n            this.fetchOcpProviders();\n        }\n    }\n    componentDidUpdate() {\n        const { awsProviders, awsProvidersError, awsProvidersFetchStatus, azureProviders, azureProvidersError, azureProvidersFetchStatus, ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, } = this.props;\n        if (!awsProviders && awsProvidersFetchStatus !== 1 /* inProgress */ && !awsProvidersError) {\n            this.fetchAwsProviders();\n        }\n        if (!azureProviders && azureProvidersFetchStatus !== 1 /* inProgress */ && !azureProvidersError) {\n            this.fetchAzureProviders();\n        }\n        if (!ocpProviders && ocpProvidersFetchStatus !== 1 /* inProgress */ && !ocpProvidersError) {\n            this.fetchOcpProviders();\n        }\n    }\n    render() {\n        const { awsProviders, awsProvidersError, awsProvidersFetchStatus, azureProviders, azureProvidersError, azureProvidersFetchStatus, ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const release = getReleasePath();\n        const names = this.getInactiveSourceNames();\n        const title = names.length === 1 ? t('inactive_sources.title', { value: names[0] }) : t('inactive_sources.title_multiple');\n        if (names.length === 0) {\n            if (awsProviders &&\n                awsProvidersFetchStatus === 2 /* complete */ &&\n                !awsProvidersError &&\n                azureProviders &&\n                azureProvidersFetchStatus === 2 /* complete */ &&\n                !azureProvidersError &&\n                ocpProviders &&\n                ocpProvidersFetchStatus === 2 /* complete */ &&\n                !ocpProvidersError) {\n                this.resetAlert(); // Reset cookie for new alerts\n            }\n            return null;\n        }\n        if (this.isAlertClosed()) {\n            return null; // Don't display alert\n        }\n        this.resetAlert(); // Clean up previous cookie, if any\n        return (React.createElement(\"div\", { className: \"alert\" },\n            React.createElement(Alert, { isInline: true, variant: \"danger\", title: title, actionClose: React.createElement(AlertActionCloseButton, { onClose: this.handleOnClose }), actionLinks: React.createElement(React.Fragment, null,\n                    React.createElement(\"a\", { href: `${release}/settings/sources` }, t('inactive_sources.go_to_sources'))) }, this.getInactiveSources(names))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersError = providersSelectors.selectProvidersError(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // For testing...\n    //\n    // if (awsProviders && awsProviders.data) {\n    //   if (awsProviders.data.length) {\n    //     awsProviders.data[0].active = false;\n    //   } else {\n    //     awsProviders.data[0] = {\n    //       name: 'AWS for OpenShift',\n    //       active: false,\n    //     };\n    //   }\n    // }\n    // if (azureProviders && azureProviders.data) {\n    //   if (azureProviders.data.length) {\n    //     azureProviders.data[0].active = false;\n    //   } else {\n    //     azureProviders.data[0] = {\n    //       name: 'Azure for OpenShift',\n    //       active: false,\n    //     };\n    //   }\n    // }\n    // if (ocpProviders && ocpProviders.data) {\n    //   if (ocpProviders.data.length) {\n    //     ocpProviders.data[0].active = false;\n    //   } else {\n    //     ocpProviders.data[0] = {\n    //       name: 'OCP',\n    //       active: false,\n    //     };\n    //   }\n    // }\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersError,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersError,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchProviders: providersActions.fetchProviders,\n};\nconst InactiveSources = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(InactiveSourcesBase));\nexport { InactiveSources };\n","import { InactiveSources } from './inactiveSources';\nexport default InactiveSources;\n","import { NotAuthorized as _NotAuthorized } from '@redhat-cloud-services/frontend-components/components/NotAuthorized';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { withRouter } from 'react-router';\nimport { paths } from 'routes';\nclass NotAuthorizedStateBase extends React.Component {\n    render() {\n        const { pathname, t } = this.props;\n        let serviceName = 'cost_management';\n        switch (pathname) {\n            case paths.awsDetails:\n            case paths.awsDetailsBreakdown:\n                serviceName = 'no_auth_state.aws_service_name';\n                break;\n            case paths.azureDetails:\n            case paths.azureDetailsBreakdown:\n                serviceName = 'no_auth_state.azure_service_name';\n                break;\n            case paths.gcpDetails:\n            case paths.gcpDetailsBreakdown:\n                serviceName = 'no_auth_state.gcp_service_name';\n                break;\n            case paths.costModels:\n                serviceName = 'no_auth_state.cost_models_service_name';\n                break;\n            case paths.ocpDetails:\n            case paths.ocpDetailsBreakdown:\n                serviceName = 'no_auth_state.ocp_service_name';\n                break;\n        }\n        return React.createElement(_NotAuthorized, { serviceName: t(serviceName) });\n    }\n}\nconst NotAuthorizedState = withRouter(withTranslation()(NotAuthorizedStateBase));\nexport { NotAuthorizedState };\n","import { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/components/PageHeader';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { NotAuthorizedState } from './notAuthorizedState';\nconst NotAuthorized = ({ pathname, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(NotAuthorizedState, { pathname: pathname }))));\n};\nexport default withRouter(NotAuthorized);\n","import NotAuthorized from './notAuthorized';\nexport default NotAuthorized;\n","import { InvalidObject } from '@redhat-cloud-services/frontend-components/components/InvalidObject';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nconst NotFound = () => {\n    return (React.createElement(Main, null,\n        React.createElement(InvalidObject, null)));\n};\nexport default withRouter(NotFound);\n","import NotFound from './notFound';\nexport default NotFound;\n","import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","export const getReleasePath = () => {\n    const pathName = window.location.pathname.split('/');\n    pathName.shift();\n    let release = '';\n    if (pathName[0] === 'beta') {\n        release = `/beta`;\n    }\n    return release;\n};\n"],"sourceRoot":""}