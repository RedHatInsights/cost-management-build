{"version":3,"sources":["webpack:///./src/pages/ocpCloudDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/equal.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/details/detailsDataToolbar.styles.ts","webpack:///./src/components/details/detailsDataToolbar.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTagView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpCloudDetails/exportModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/exportModal.tsx","webpack:///./src/pages/ocpCloudDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalChart.tsx","webpack:///./src/pages/ocpCloudDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsActions.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.tsx","webpack:///./src/pages/ocpCloudDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.styles.ts","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpCloudDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","isEqual","obj1","obj2","JSON","stringify","split","join","getNoDataForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getForDateRangeString","getSinceDateRangeString","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","marginRight","toolbarContainer","backgroundColor","paddingBottom","paddingTop","paddingLeft","paddingRight","marginLeft","defaultFilters","tag","DetailsDataToolbar","defaultState","categoryInput","filters","lodash","isCategoryDropdownOpen","isTagKeyDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","option","indexOf","api_query","getActiveFilters","query","filter_by","keys","isArray","substring","onDelete","filterType","prevState","filter","_filterType","onFilterRemoved","onCategoryClick","currentCategory","onCategorySelect","event","currentTagKey","onCategoryToggle","isOpen","getCategoryInput","categoryOption","DataToolbarFilter","categoryName","chips","deleteChip","showToolbarItem","InputGroup","TextInput","aria-label","onChange","onCategoryInputChange","placeholder","onKeyDown","evt","onCategoryInput","Button","variant","control","onClick","search_icon","trim","prevFilters","includes","onFilterAdded","getTagKeySelect","selectOptions","getTagKeyOptions","selectOption","SelectOption","Select","selectConstants","typeahead","onClear","onTagKeyClear","onToggle","onTagKeyToggle","onSelect","onTagKeySelect","isExpanded","placeholderText","selections","selection","isPlaceholder","getTagValueSelect","tagKeyOption","getTagValueOptions","checkbox","onTagValueToggle","onTagValueSelect","checked","target","prevSelections","getExportButton","isExportDisabled","DataToolbarItem","isDisabled","handleExportClicked","external_link_square_alt_icon","onExportClicked","equal","Dropdown","position","dropdownConstants","left","toggle","DropdownToggle","filter_icon","dropdownItems","DropdownItem","val","pagination","DataToolbar","clearAllFilters","collapseListedFiltersBreakpoint","DataToolbarContent","DataToolbarToggleGroup","toggleIcon","breakpoint","DataToolbarGroup","getCategoryDropdown","breakpointMods","modifier","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendItemsPerRow","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","historicalTrendChart_HistoricalTrendChart","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpCloudReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpCloudReportSummaryAlt_styles_styles","flexGrow","minHeight","tops","OcpCloudReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpCloudReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","lineHeight","valueContainer","wordWrap","OcpCloudReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","cloudReportType","meta","total","getCostLayout","Tooltip","content","enableFlip","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","ocpCloudReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpCloudReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpCloudReportSummaryItem","ocpCloudReportSummaryItems_styles_styles","skeleton","OcpCloudReportSummaryItems","nextProps","otherIndex","findIndex","slice","getItems","ocpCloudReportSummaryTrend_styles_styles","OcpCloudReportSummaryTrend","trendChart","OcpCloudReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","historicalUsageChart_HistoricalUsageChart","maxCurrentLimit","maxPreviousLimit","costValue","costLabelUnit","costLabelDate","header","info","verticalAlign","infoIcon","infoTitle","fontWeight","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","queryString","ocpCloudQuery","resolution","time_scope_units","time_scope_value","ocpCloudReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","currentItem","isGroupByOpen","handleGroupByClick","onItemClicked","getDropDownItems","component","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","handleGroupBySelect","handleGroupByToggle","bind","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","showPopover","handlePopoverClick","show","onGroupByClicked","showContent","sizes","Popover","bodyContent","info_circle_icon","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","ocpCloudReportSummary","_item","DetailsWidgetModal","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_mapStateToProps","error","ocpCloudExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","secondary","primary","Form","FormGroup","fieldId","Radio","isValid","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpCloudReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpCloudReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalTrendChart","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpCloudDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","freeSpace","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","getCpuChart","cpuDatum","getChartDatumWithCapacity","getChartDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","titlePosition","getFreeSpace","getMemoryChart","memoryDatum","hasRange","range","hasUsage","hasTotal","hasLimit","trunc","limitUnits","hasRequest","requestUnits","hasCapacity","capacityUnits","unusedRequestCapacity","unusedRequestCapacityPercentage","unusedUsageCapacity","unusedUsageCapacityPercentage","TextContent","TextList","dl","TextListItem","dt","dd","percentage","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","abs","showPercentage","showValue","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_reportType","detailsToolbar_mapStateToProps","detailsToolbar_mapDispatchToProps","DetailsToolbar","exportText","detailsDataToolbar","ocpCloudDetails_styles_styles","ocpCloudDetails","paginationContainer","tableContainer","ocpCloudDetails_reportType","ocpCloudDetails_baseQuery","ocpCloudDetails_mapStateToProps","ocpCloudDetails_mapDispatchToProps","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","handleFilterAdded","handleFilterRemoved","filterValue","history","found","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"857d0649e796f05097ab.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpCloudDetails from './ocpCloudDetails';\nexport default hot(module)(OcpCloudDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getNoDataForDateRangeString(key = 'no_data_for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarGroup, DataToolbarItem, DataToolbarToggleGroup, } from '@patternfly/react-core/dist/esm/experimental';\nimport { ExternalLinkSquareAltIcon, FilterIcon, SearchIcon, } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { tagKey } from 'api/query';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsDataToolbar.styles';\nconst defaultFilters = {\n    tag: {},\n};\nexport class DetailsDataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isCategoryDropdownOpen: false,\n            isTagKeyDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy } = this.props;\n            for (const option of categoryOptions) {\n                if (groupBy === option.value ||\n                    (groupBy.indexOf(tagKey) !== -1 && option.value === 'tag')) {\n                    return option.value;\n                }\n            }\n            return undefined;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key])\n                        ? [...query.filter_by[key]]\n                        : [query.filter_by[key]];\n                    if (key.indexOf(tagKey) !== -1) {\n                        filters.tag[key.substring(tagKey.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, id) => {\n            if (type) {\n                // Workaround for https://github.com/patternfly/patternfly-react/issues/3552\n                // This prevents us from using an ID\n                let filterType = type.toLowerCase();\n                // Workaround for Azure IDs\n                if (filterType === 'account' && this.state.filters.subscription_guid) {\n                    filterType = 'subscription_guid';\n                }\n                else if (filterType === 'region' &&\n                    this.state.filters.resource_location) {\n                    filterType = 'resource_location';\n                }\n                else if (filterType === 'service' && this.state.filters.service_name) {\n                    filterType = 'service_name';\n                }\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else if (prevState.filters[filterType]) {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType]\n                        ? `${tagKey}${filterType}`\n                        : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        this.onCategoryClick = value => {\n            this.setState({\n                currentCategory: value,\n            });\n        };\n        this.onCategorySelect = event => {\n            this.setState({\n                categoryInput: '',\n                currentTagKey: undefined,\n                isCategoryDropdownOpen: !this.state.isCategoryDropdownOpen,\n            });\n        };\n        this.onCategoryToggle = isOpen => {\n            this.setState({\n                isCategoryDropdownOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = categoryOption => {\n            const { t } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            return (React.createElement(DataToolbarFilter, { categoryName: t(`filter_by.values.${categoryOption.label}`), chips: filters[categoryOption.value], deleteChip: this.onDelete, key: categoryOption.value, showToolbarItem: currentCategory !== 'tag' && currentCategory === categoryOption.value },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { name: `${categoryOption.value}-input`, id: `${categoryOption.value}-input`, type: \"search\", \"aria-label\": t(`filter_by.${categoryOption.value}_input_aria_label`), onChange: this.onCategoryInputChange, value: categoryInput, placeholder: t(`filter_by.${categoryOption.value}_placeholder`), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.value) }),\n                    React.createElement(Button, { variant: ButtonVariant.control, \"aria-label\": t(`filter_by.${categoryOption.value}_button_aria_label`), onClick: evt => this.onCategoryInput(evt, categoryOption.value) },\n                        React.createElement(SearchIcon, null)))));\n        };\n        this.onCategoryInputChange = value => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if ((event.key && event.key !== 'Enter') || categoryInput.trim() === '') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign({}, prevState.filters, { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, categoryInput]\n                                : [categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded, } = this.state;\n            if (currentCategory !== 'tag') {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(Select, { variant: SelectVariant.typeahead, \"aria-label\": t('filter_by.tag_key_aria_label'), onClear: this.onTagKeyClear, onToggle: this.onTagKeyToggle, onSelect: this.onTagKeySelect, isExpanded: isTagKeySelectExpanded, placeholderText: t('filter_by.tag_key_placeholder'), selections: currentTagKey }, selectOptions));\n        };\n        this.onTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.onTagKeySelect = (event, selection, isPlaceholder) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.onTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = tagKeyOption => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, filters, isTagValueSelectExpanded, } = this.state;\n            const selectOptions = this.getTagValueOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            // Width prop is a workaround for https://github.com/patternfly/patternfly-react/issues/3574\n            return (React.createElement(DataToolbarFilter, { categoryName: tagKeyOption.value, chips: filters.tag[tagKeyOption.value], deleteChip: this.onDelete, key: tagKeyOption.value, showToolbarItem: currentCategory === 'tag' && currentTagKey === tagKeyOption.value },\n                React.createElement(Select, { variant: SelectVariant.checkbox, \"aria-label\": t('filter_by.tag_value_aria_label'), onToggle: this.onTagValueToggle, onSelect: this.onTagValueSelect, selections: filters.tag[tagKeyOption.value]\n                        ? filters.tag[tagKeyOption.value]\n                        : [], isExpanded: isTagValueSelectExpanded, placeholderText: t('filter_by.tag_value_placeholder'), width: 200 }, selectOptions)));\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey]\n                    ? prevState.filters.tag[currentTagKey]\n                    : [];\n                return {\n                    filters: Object.assign({}, prevState.filters, { tag: Object.assign({}, prevState.filters.tag, { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagKey}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueSelectExpanded: isOpen,\n            });\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isExportDisabled, t } = this.props;\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                    React.createElement(\"span\", { className: css(styles.export) }, t('export.export')),\n                    React.createElement(ExternalLinkSquareAltIcon, null))));\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (report && !isEqual(report, prevProps.report))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return prevProps.groupBy !== groupBy\n                    ? {\n                        currentCategory: this.getDefaultCategory(),\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category dropdown\n    getCategoryDropdown() {\n        const { categoryOptions, t } = this.props;\n        const { currentCategory, isCategoryDropdownOpen } = this.state;\n        const index = currentCategory ? currentCategory.indexOf('tag') : -1;\n        const label = index !== -1\n            ? t('filter_by.values.tag')\n            : t(`filter_by.values.${currentCategory}`);\n        return (React.createElement(DataToolbarItem, null,\n            React.createElement(Dropdown, { onSelect: this.onCategorySelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { onToggle: this.onCategoryToggle, style: { width: '100%' } },\n                    React.createElement(FilterIcon, null),\n                    \" \",\n                    label), isOpen: isCategoryDropdownOpen, dropdownItems: categoryOptions &&\n                    categoryOptions.map(option => (React.createElement(DropdownItem, { key: option.value, onClick: () => this.onCategoryClick(option.value) }, t(`filter_by.values.${option.label}`)))), style: { width: '100%' } })));\n    }\n    getTagKeyOptions() {\n        const { report } = this.props;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            options = data.map(tag => {\n                return {\n                    value: tag.key,\n                };\n            });\n        }\n        return options;\n    }\n    getTagValueOptions() {\n        const { report } = this.props;\n        const { currentTagKey } = this.state;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (currentTagKey === tag.key) {\n                    options = tag.values.map(val => {\n                        return {\n                            value: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, pagination } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(DataToolbar, { id: \"details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(DataToolbarContent, null,\n                    React.createElement(DataToolbarToggleGroup, { toggleIcon: React.createElement(FilterIcon, null), breakpoint: \"xl\" },\n                        React.createElement(DataToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategoryDropdown(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            categoryOptions &&\n                                categoryOptions\n                                    .filter(option => option.value !== 'tag')\n                                    .map(option => this.getCategoryInput(option))),\n                        React.createElement(DataToolbarGroup, null, this.getExportButton())),\n                    React.createElement(DataToolbarItem, { variant: \"pagination\", breakpointMods: [{ modifier: 'align-right' }] }, pagination)))));\n    }\n}\nconst DetailsDataToolbar = translate()(connect()(DetailsDataToolbarBase));\nexport { DetailsDataToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummary.styles';\nconst OcpCloudReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpCloudReportSummary = translate()(OcpCloudReportSummaryBase);\nexport { OcpCloudReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpCloudReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { OcpCloudReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryDetails.styles';\nconst OcpCloudReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let markupCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const cloudReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        markupCost = formatValue(report.meta.total.markup_cost ? report.meta.total.markup_cost.value : 0, report.meta.total.markup_cost\n            ? report.meta.total.markup_cost.units\n            : 'USD', formatOptions);\n        if (cloudReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_cloud_dashboard.total_cost_tooltip', {\n                infrastructureCost,\n                markupCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (cloudReportType) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpCloudReportSummaryDetails = translate()(OcpCloudReportSummaryDetailsBase);\nexport { OcpCloudReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryItem.styles';\nconst OcpCloudReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpCloudReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpCloudReportSummaryItem = translate()(OcpCloudReportSummaryItemBase);\nexport { OcpCloudReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './ocpCloudReportSummaryItems.styles';\nclass OcpCloudReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpCloudReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpCloudReportSummaryItems = translate()(OcpCloudReportSummaryItemsBase);\nexport { OcpCloudReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                    {\n                        childName: 'previousLimit',\n                        data: previousLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(previousLimitData, limitKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousLimitData,\n                    },\n                    {\n                        childName: 'currentLimit',\n                        data: currentLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(currentLimitData, limitKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentLimitData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_md, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { parseQuery } from 'api/ocpCloudQuery';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            currentItem: this.props.groupBy || 'project',\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(tag => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${tag.key}`, onClick: () => this.handleGroupByClick(`${tagKey}${tag.key}`) }, t('group_by.tag_key', { value: tag.key }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, groupBy, queryString } = this.props;\n        if (prevProps.queryString !== queryString ||\n            prevProps.groupBy !== groupBy) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag_key', { value: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Popover, Title, TitleSize, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let markupCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            cost = formatValue(report.meta.total.derived_cost ? report.meta.total.cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            markupCost = formatValue(report.meta.total.markup_cost ? report.meta.total.markup_cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0, report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.units\n                : 'USD');\n        }\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_cloud_details.title')),\n                Boolean(showContent) && (React.createElement(GroupBy, { groupBy: groupBy, onItemClicked: onGroupByClicked }))),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('ocp_cloud_details.total_cost_tooltip', {\n                            infrastructureCost,\n                            markupCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) },\n                        t('ocp_cloud_details.total_cost'),\n                        React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_cloud_details.markup_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_cloud_details.infrastructure_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_cloud_details.infrastructure_cost_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_cloud_details.markup_title')),\n                                    React.createElement(\"p\", null, t('ocp_cloud_details.markup_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_cloud_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpCloudReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudExportActions, ocpCloudExportSelectors, } from 'store/ocpCloudExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpCloudExportSelectors.selectExportError(state),\n        export: ocpCloudExportSelectors.selectExport(state),\n        fetchStatus: ocpCloudExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpCloudExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpCloudReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpCloudReportsActions from 'store/ocpCloudReports/ocpCloudReportsActions';\nimport * as ocpCloudReportsSelectors from 'store/ocpCloudReports/ocpCloudReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpCloudReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformOcpCloudReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('ocp_cloud_details.historical.cost_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_cloud_details.historical.cpu_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_cloud_details.historical.memory_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/ocpCloudDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_cloud_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_cloud_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_cloud_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_cloud_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    freeSpace: {\n        marginBottom: global_spacer_lg.value,\n        marginLeft: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { TextContent, TextList, TextListItem, TextListItemVariants, TextListVariants, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getCpuChart = () => {\n            const { cpuReportFetchStatus, cpuReport, groupBy, t } = this.props;\n            const { width } = this.state;\n            const cpuDatum = groupBy === 'cluster'\n                ? this.getChartDatumWithCapacity(cpuReport, 'cpu')\n                : this.getChartDatum(cpuReport, 'cpu');\n            if (!cpuReport || cpuDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                        ? [\n                            {\n                                tooltip: cpuDatum.limit.tooltip,\n                                y: cpuDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value ? [{ name: cpuDatum.limit.legend }] : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(cpuDatum) ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: cpuDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: cpuDatum.ranges[0].tooltip,\n                                y: cpuDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                        ? [{ name: cpuDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(cpuReport, 'cpu')))));\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 600 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getMemoryChart = () => {\n            const { memoryReportFetchStatus, memoryReport, groupBy, t } = this.props;\n            const { width } = this.state;\n            const memoryDatum = groupBy === 'cluster'\n                ? this.getChartDatumWithCapacity(memoryReport, 'memory')\n                : this.getChartDatum(memoryReport, 'memory');\n            if (!memoryReport || memoryDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                        ? [\n                            {\n                                tooltip: memoryDatum.limit.tooltip,\n                                y: memoryDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                        ? [{ name: memoryDatum.limit.legend }]\n                        : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(memoryDatum) ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: memoryDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: memoryDatum.ranges[0].tooltip,\n                                y: memoryDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                        ? [{ name: memoryDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(memoryReport, 'memory')))));\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n        ];\n        return datum;\n    }\n    getChartDatumWithCapacity(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const capacityUnits = t(`units.${unitLookupKey(hasCapacity ? report.meta.total.capacity.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                value: Math.trunc(capacity),\n            },\n        ];\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace(report, labelKey) {\n        const { t } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        // Note: Unused won't be negative since Kubernetes doesn't allow requests to exceed capacity -- see #1232\n        const unusedRequestCapacity = capacity - request;\n        const unusedRequestCapacityPercentage = (request / capacity) * 100;\n        const unusedUsageCapacity = capacity - usage;\n        const unusedUsageCapacityPercentage = (usage / capacity) * 100;\n        return (React.createElement(TextContent, { className: css(styles.freeSpace) },\n            React.createElement(TextList, { component: TextListVariants.dl },\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_cloud_details.bullet.${labelKey}_usage_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_cloud_details.bullet.${labelKey}_usage_unused`, {\n                    percentage: formatValue(unusedUsageCapacityPercentage, usageUnits),\n                    value: unusedUsageCapacity,\n                    units: usageUnits,\n                })),\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_cloud_details.bullet.${labelKey}_requests_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_cloud_details.bullet.${labelKey}_requests_unused`, {\n                    percentage: formatValue(unusedRequestCapacityPercentage, requestUnits),\n                    value: unusedRequestCapacity,\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            this.getCpuChart(),\n            this.getMemoryChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_cloud_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpCloudReportItems } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedOcpCloudReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(OcpCloudReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_cloud_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (!((groupBy === 'project' || groupBy === 'node') &&\n                    getIdKeyForTab(tab).toString() === 'project')) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"projects\" /* projects */,\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_cloud_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { tagKey } from 'api/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString, getNoDataForDateRangeString, } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_cloud_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_cloud_details.name_column_title', {\n                            groupBy: groupById,\n                        }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpCloudReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.deltaPercent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/ocpCloudQuery';\nimport { DetailsDataToolbar } from 'components/details/detailsDataToolbar';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { isEqual } from 'utils/equal';\nconst categoryOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n    { label: 'tag', value: 'tag' },\n];\nconst reportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { fetchReport, query, queryString } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { exportText, groupBy, isExportDisabled, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, report, } = this.props;\n        return (React.createElement(DetailsDataToolbar, { categoryOptions: categoryOptions, exportText: exportText, groupBy: groupBy, isExportDisabled: isExportDisabled, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, report: report }));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsToolbar = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase));\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpCloudDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery, } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { tagKey } from 'api/query';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpCloudDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpCloudDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_cloud_details.export_link'), groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[filterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[filterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[filterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[filterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[filterType] = [\n                        newQuery.filter_by[filterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            if (filterType === null) {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (filterValue === null) {\n                newQuery.filter_by[filterType] = undefined; // Clear all values\n            }\n            else if (Array.isArray(newQuery.filter_by[filterType])) {\n                const index = newQuery.filter_by[filterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[filterType] = [\n                        ...query.filter_by[filterType].slice(0, index),\n                        ...query.filter_by[filterType].slice(index + 1),\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = undefined;\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp-cloud?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpCloudReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpCloudDetails) },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpCloudDetails));\n"],"sourceRoot":""}