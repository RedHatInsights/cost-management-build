{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/pages/views/explorer/explorer.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/views/explorer/explorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/dateRange.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerTable.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/pages/views/explorer/explorer.tsx"],"names":["getUserAccessQuery","query","stringify","encode","indices","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","PerspectiveBase","super","arguments","this","defaultState","isPerspectiveOpen","state","Object","assign","getDropDownItems","options","props","map","option","DropdownItem","component","key","value","onClick","handleClick","t","label","getCurrentLabel","currentItem","onItemClicked","handleSelect","setState","handleToggle","isDisabled","dropdownItems","style","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","Perspective","withTranslation","mapStateToProps","selectWidgets","azureCostOverview","widgets","CostOverview","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","instance_type","resource_location","service_name","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","cost","costLabel","costValue","marginTop","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costLabelDate","global_Color_200","header","justifyContent","global_spacer_sm","baseQuery","delta","groupByOptions","DetailsHeaderBase","onGroupByClicked","providersError","showContent","meta","count","hasCost","total","Title","headingLevel","size","showTags","Boolean","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","buildCostLink","group_by","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","toString","id","desc","push","cells","disableSelection","selected","undefined","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","prevProps","currentReport","data","JSON","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","showBulkSelect","showExport","showFilter","tagFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","showTimeScope","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","hasCurrentMonthData","result","provider","current_month_data","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute","account","cluster","node","org_unit_id","project","region","service","chartContainer","paddingRight","chartContent","explorer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","grid","stroke","ticks","yAxisAlt","tickLabels","xAxis","CostExplorerChart","containerRef","resizeObserver","noop","navToggle","hiddenSeries","Set","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","getTruncatedString","childName","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","units","getUnits","datum","initResizeObserve","containerElement","current","ResizeObserver","window","handleResize","observe","unobserve","addEventListener","removeEventListener","insights","chrome","on","handleNavToggle","getAdjustedContainerHeight","adjustContainerHeight","containerHeight","adjustedContainerHeight","getChart","has","ChartBar","alignment","formatDatumValue","formatDatumOptions","CursorVoronoiContainer","createContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","left","right","top","getDomain","domain","maxValue","forEach","s","max","y","getEvents","getInteractiveLegendEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","handleLegendClick","getLegend","ChartLegend","gutter","responsive","getTickValues","x","tickValues","i","str","substr","maxChars","getTickValue","setTimeout","clientWidth","container","disable","labelComponent","ChartLegendTooltip","legendData","day","ref","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartThemeColor","ChartStack","ChartAxis","dependentAxis","tickFormat","global_spacer_2xl","chartSkeleton","costChart","legendSkeleton","titleContainer","trendChart","usageChart","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByIbmOptions","groupByOcpOptions","infrastructureAllCloudOptions","infrastructureAwsOptions","infrastructureAwsCloudOptions","infrastructureAzureOptions","infrastructureAzureCloudOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpOptions","ocpOptions","getComputedReportItemType","perspective","getDateRange","dateRange","getDateRangeDefault","today","Date","end_date","format","start_date","setMonth","getMonth","startOfMonth","setDate","getDate","getPerspectiveDefault","getGroupByDefault","getGroupByOptions","getOrgReportPathsType","getReportType","getReportPathsType","getTagReportPathsType","isAwsAvailable","awsProviders","awsProvidersFetchStatus","userAccess","d","type","access","isAzureAvailable","azureProviders","azureProvidersFetchStatus","isGcpAvailable","gcpProviders","gcpsProvidersFetchStatus","isIbmAvailable","ibmProviders","ibmProvidersFetchStatus","isOcpAvailable","ocpProviders","ocpProvidersFetchStatus","ExplorerChartBase","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","date","xVal","month","yVal","parseFloat","getChartDatums","computedReportItemType","chartDatums","datums","Map","Array","from","padChartDatums","getChartTitle","getGroupBy","daily","groupByOrg","getGroupByOrg","getSkeleton","Skeleton","padDate","chartDatum","formatValue","ExplorerChartConnect","ExplorerChart","withRouter","DateRangeBase","isDateRangeOpen","DateRange","toolbarContainer","orgReportType","ExplorerFilterBase","orgReport","getDefaultDateRange","currentDateRange","handleDateRangeClick","fetchOrg","orgReportPathsType","orgReportFetchStatus","tagReportFetchStatus","ExplorerFilter","paddingLeft","perspectiveContainer","ExplorerHeaderBase","getDefaultPerspective","gcpProvidersFetchStatus","getPerspective","currentPerspective","_isAwsAvailable","_isAzureAvailable","_isGcpAvailable","_isIbmAvailable","_isOcpAvailable","handlePerspectiveClick","onPerspectiveClicked","noProviders","showOrgs","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","userAccessQueryString","userAccessError","userAccessFetchStatus","ExplorerHeader","overflowX","ExplorerTableBase","cellTransforms","nowrap","currentDate","mapId","mapIdDate","rowItem","get","set","selectItem","sort","a","b","unshift","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","ExplorerToolbarConnect","ExplorerToolbar","Explorer","slice"],"mappings":"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","file":"dbeff0fa95f44b5f5ec4.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled, t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = withTranslation()(PerspectiveBase);\nexport { Perspective };\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = queryFromRoute;\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = Object.assign({ filter: Object.assign({ resolution: 'monthly', time_scope_units: 'month', time_scope_value: -1 }, (groupBy && { [groupBy]: groupByValue })) }, (query && query.filter_by && { filter_by: query.filter_by }));\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, groupByValue: groupByValue, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.azure_details'),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"azure\" /* azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* azure */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.azure_details')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit }, t('azure_details.total_cost')),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQueryRoute } from 'api/queries/azureQuery';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { breakdownDescKey, tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.buildCostLink = (label, description) => {\n            const { groupBy, query } = this.props;\n            const newQuery = Object.assign(Object.assign(Object.assign({}, query), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n                    [groupBy]: label,\n                } });\n            return `${paths.azureDetailsBreakdown}?${getQueryRoute(newQuery)}`;\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('azure_details.tag_column_title'),\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('azure_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = React.createElement(Link, { to: this.buildCostLink(label.toString(), item.id) }, label);\n                if (label === `no-${groupById}` || label === `no-${groupByTagKey}`) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('azure_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"azure\" /* azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { tagReport, t } = this.props;\n            const options = [\n                {\n                    name: t('filter_by.values.subscription_guid'),\n                    key: 'subscription_guid',\n                },\n                { name: t('filter_by.values.service_name'), key: 'service_name' },\n                {\n                    name: t('filter_by.values.resource_location'),\n                    key: 'resource_location',\n                },\n                { name: t('filter_by.values.tag'), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType, showTimeScope: true }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        // Ensure at least one source provider has data available\n        this.hasCurrentMonthData = () => {\n            const { providers } = this.props;\n            let result = false;\n            if (providers && providers.data) {\n                for (const provider of providers.data) {\n                    if (provider.current_month_data) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.azure_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* azure */, title: title });\n            }\n            if (!this.hasCurrentMonthData()) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getLegendData, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { formatCurrencyAbbreviation } from 'utils/formatValue';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costExplorerChart.styles';\nclass CostExplorerChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.resizeObserver = noop;\n        this.navToggle = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            const units = this.getUnits(series);\n            this.setState({ cursorVoronoiContainer, series, units });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.initResizeObserve = () => {\n            const containerElement = this.containerRef.current;\n            const { ResizeObserver } = window;\n            if (containerElement && ResizeObserver) {\n                const resizeObserver = new ResizeObserver(this.handleResize);\n                resizeObserver.observe(containerElement);\n                this.resizeObserver = () => resizeObserver.unobserve(containerElement);\n            }\n            else {\n                this.handleResize();\n                window.addEventListener('resize', this.handleResize);\n                this.resizeObserver = () => window.removeEventListener('resize', this.handleResize);\n                this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n            }\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (!hiddenSeries.has(index)) {\n                return (React.createElement(ChartBar, { alignment: \"start\", data: series.data, key: series.childName, name: series.childName, style: series.style }));\n            }\n            return null;\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        // Returns domain only if max y values are zero\n        this.getDomain = (series, hiddenSeries) => {\n            let maxValue = -1;\n            let domain;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        const max = getMaxValue(s.data);\n                        maxValue = Math.max(maxValue, max);\n                    }\n                });\n            }\n            if (maxValue <= 0) {\n                domain = { y: [0, 100] };\n            }\n            return domain;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const { hiddenSeries, series } = this.state;\n            const result = getInteractiveLegendEvents({\n                chartNames: getChartNames(series),\n                isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n                isHidden: index => isSeriesHidden(hiddenSeries, index),\n                legendName: 'legend',\n                onLegendClick: props => this.handleLegendClick(props.index),\n            });\n            return result;\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // This ensures we show every 3rd tick value, including the first and last value\n        //\n        // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n        this.getTickValues = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            // Find the datum with the greatest number of values\n            const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n            let datum;\n            allDatums.map(val => {\n                if (!datum || datum.length < val.length) {\n                    datum = val;\n                }\n            });\n            const values = [];\n            datum.map(val => {\n                values.push(val.x);\n            });\n            // Prune tick values\n            const tickValues = [];\n            for (let i = 0; i < values.length; i++) {\n                if (i % 3 === 0 && i + 2 < values.length) {\n                    tickValues.push(values[i]);\n                }\n            }\n            tickValues.push(values[values.length - 1]);\n            return tickValues;\n        };\n        this.getTruncatedString = (str) => {\n            const maxChars = 20;\n            return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n        };\n        this.getTickValue = (t) => {\n            const { units } = this.state;\n            return formatCurrencyAbbreviation(t, units);\n        };\n        this.getUnits = (series) => {\n            if (series) {\n                for (const s of series) {\n                    for (const datum of s.data) {\n                        if (datum.units) {\n                            return datum.units;\n                        }\n                    }\n                }\n            }\n            return 'USD';\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.initResizeObserve();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.resizeObserver) {\n            this.resizeObserver();\n        }\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 20,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: this.getTickValues() }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis, tickFormat: this.getTickValue })))));\n    }\n}\nexport { CostExplorerChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format, startOfMonth } from 'date-fns';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: 'explorer.date_range.current_month_to_date', value: 'current_month_to_date' },\n    { label: 'explorer.date_range.previous_month_to_date', value: 'previous_month_to_date' },\n    { label: 'explorer.date_range.last_thirty_days', value: 'last_thirty_days' },\n    { label: 'explorer.date_range.last_sixty_days', value: 'last_sixty_days' },\n];\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure all cloud options\nexport const infrastructureAllCloudOptions = [{ label: 'explorer.perspective.all_cloud', value: 'all_cloud' }];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: 'explorer.perspective.aws', value: 'aws' }];\n// Infrastructure AWS cloud options\nexport const infrastructureAwsCloudOptions = [{ label: 'explorer.perspective.aws_cloud', value: 'aws_cloud' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: 'explorer.perspective.azure', value: 'azure' }];\n// Infrastructure Azure cloud options\nexport const infrastructureAzureCloudOptions = [{ label: 'explorer.perspective.azure_cloud', value: 'azure_cloud' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: 'explorer.perspective.gcp', value: 'gcp' }];\n// Infrastructure IBM options\nexport const infrastructureIbmOptions = [{ label: 'explorer.perspective.ibm', value: 'ibm' }];\n// Infrastructure Ocp options\nexport const infrastructureOcpOptions = [{ label: 'explorer.perspective.ocp_usage', value: 'ocp_usage' }];\n// Ocp options\nexport const ocpOptions = [\n    { label: 'explorer.perspective.ocp', value: 'ocp' },\n    { label: 'explorer.perspective.ocp_supplementary', value: 'ocp_supplementary' },\n];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n            result = \"supplementary\" /* supplementary */;\n            break;\n        case \"aws\" /* aws */:\n        case \"all_cloud\" /* allCloud */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = queryFromRoute => {\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const today = new Date();\n    const end_date = format(today, 'yyyy-MM-dd');\n    let start_date;\n    switch (dateRange) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            today.setMonth(today.getMonth() - 1);\n            start_date = format(startOfMonth(today), 'yyyy-MM-dd');\n            break;\n        case \"last_sixty_days\" /* lastSixtyDays */:\n            // 61 days, including today's date. See https://issues.redhat.com/browse/COST-1117\n            today.setDate(today.getDate() - 60);\n            start_date = format(today, 'yyyy-MM-dd');\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            // 31 days, including today's date. See https://issues.redhat.com/browse/COST-1117\n            today.setDate(today.getDate() - 30);\n            start_date = format(today, 'yyyy-MM-dd');\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            start_date = format(startOfMonth(today), 'yyyy-MM-dd');\n            break;\n    }\n    return {\n        end_date,\n        start_date,\n    };\n};\nexport const getDateRangeDefault = queryFromRoute => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = queryFromRoute => {\n    return queryFromRoute.perspective || \"ocp\" /* ocp */;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            result = 'subscription_guid';\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"ibm\" /* ibm */:\n            result = groupByIbmOptions;\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"all_cloud\" /* allCloud */:\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"all_cloud\" /* allCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            result = \"aws_cloud\" /* awsCloud */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            result = \"azure_cloud\" /* azureCloud */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            result = \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            result = \"ocp_usage\" /* ocpUsage */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n            return \"aws\" /* aws */;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            return \"azure\" /* azure */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            return \"gcp\" /* ibm */;\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            return \"ocp\" /* ocp */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\nexport const isAwsAvailable = (awsProviders, awsProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (awsProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"aws\" /* aws */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                awsProviders !== undefined &&\n                awsProviders.meta !== undefined &&\n                awsProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isAzureAvailable = (azureProviders, azureProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (azureProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"azure\" /* azure */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                azureProviders !== undefined &&\n                azureProviders.meta !== undefined &&\n                azureProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isGcpAvailable = (gcpProviders, gcpsProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (gcpsProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"gcp\" /* gcp */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                gcpProviders !== undefined &&\n                gcpProviders.meta !== undefined &&\n                gcpProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isIbmAvailable = (ibmProviders, ibmProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (ibmProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"gcp\" /* ibm */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                ibmProviders !== undefined &&\n                ibmProviders.meta !== undefined &&\n                ibmProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isOcpAvailable = (ocpProviders, ocpProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (ocpProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"ocp\" /* ocp */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                ocpProviders !== undefined &&\n                ocpProviders.meta !== undefined &&\n                ocpProviders.meta.count > 0;\n    }\n    return result;\n};\n","import { Title } from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { getQuery, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport { isFloat, isInt } from 'components/charts/common/chartDatumUtils';\nimport { CostExplorerChart } from 'components/charts/costExplorerChart';\nimport { format, getDate, getMonth } from 'date-fns';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatValue } from 'utils/formatValue';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { t } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = t('chart.date', { date: getDate(computedItemDate), month: getMonth(computedItemDate) });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return {\n                x: xVal,\n                y: value === null ? null : yVal,\n                date: computedItem.date,\n                key: computedItem.id,\n                name: computedItem.label || computedItem.id,\n                units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined,\n            };\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            const reportPathsType = getReportPathsType(perspective);\n            const reportType = getReportType(perspective);\n            fetchReport(reportPathsType, reportType, queryString);\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* cost */ } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = 'total';\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getChartTitle = (perspective) => {\n            let result;\n            switch (perspective) {\n                case \"all_cloud\" /* allCloud */:\n                    result = 'explorer.title.all_cloud';\n                    break;\n                case \"aws\" /* aws */:\n                    result = 'explorer.title.aws';\n                    break;\n                case \"aws_cloud\" /* awsCloud */:\n                    result = 'explorer.title.aws_cloud';\n                    break;\n                case \"azure\" /* azure */:\n                    result = 'explorer.title.azure';\n                    break;\n                case \"azure_cloud\" /* azureCloud */:\n                    result = 'explorer.title.azure_cloud';\n                    break;\n                case \"gcp\" /* gcp */:\n                    result = 'explorer.title.gcp';\n                    break;\n                case \"ibm\" /* ibm */:\n                    result = 'explorer.title.ibm';\n                    break;\n                case \"ocp\" /* ocp */:\n                    result = 'explorer.title.ocp';\n                    break;\n                case \"ocp_supplementary\" /* ocpSupplementary */:\n                    result = 'explorer.title.ocp_supplementary';\n                    break;\n                case \"ocp_usage\" /* ocpUsage */:\n                    result = 'explorer.title.ocp_usage';\n                    break;\n                default:\n                    result = undefined;\n                    break;\n            }\n            return result;\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                daily: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = this.getGroupByOrg();\n            const groupByTagKey = this.getGroupByTagKey();\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getGroupByOrg = () => {\n            const { query } = this.props;\n            let groupByOrg;\n            for (const groupBy of Object.keys(query.group_by)) {\n                if (groupBy === orgUnitIdKey) {\n                    groupByOrg = query.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupByOrg;\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, size: \"md\" }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, size: \"xs\" })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, t } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, t(this.getChartTitle(perspective)))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(CostExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(queryFromRoute);\n    const query = {\n        filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = withRouter(withTranslation()(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isDateRangeOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isDateRangeOpen: !this.state.isDateRangeOpen,\n            });\n        };\n        this.handleToggle = isDateRangeOpen => {\n            this.setState({\n                isDateRangeOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled } = this.props;\n        const { isDateRangeOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isDateRangeOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst DateRange = withTranslation()(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getPerspectiveDefault, getRouteForQuery, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, t, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: t(`filter_by.values.${option.label}`),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: t('filter_by.values.org_unit_id'),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: t('filter_by.values.tag'), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRange = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentDateRange: value });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportPathsType, queryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, queryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgReport, orgReportPathsType, perspective, query, queryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n        if (prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, tagReport } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRange(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const queryString = getQuery({\n    // key_only: true\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    }\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    }\n    return {\n        dateRange,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilter = withRouter(withTranslation()(connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase)));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getPerspectiveDefault, getRouteForQuery, getTagReportPathsType, infrastructureAllCloudOptions, infrastructureAwsCloudOptions, infrastructureAwsOptions, infrastructureAzureCloudOptions, infrastructureAzureOptions, infrastructureGcpOptions, infrastructureIbmOptions, infrastructureOcpOptions, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable, ocpOptions, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDefaultPerspective = () => {\n            const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, perspective, userAccess, } = this.props;\n            if (perspective) {\n                return perspective;\n            }\n            if (isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess)) {\n                return \"ocp\" /* ocp */;\n            }\n            if (isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess)) {\n                return \"aws\" /* aws */;\n            }\n            if (isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess)) {\n                return \"azure\" /* azure */;\n            }\n            if (isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess)) {\n                return \"gcp\" /* gcp */;\n            }\n            if (isIbmAvailable(ibmProviders, ibmProvidersFetchStatus, userAccess)) {\n                return \"ibm\" /* ibm */;\n            }\n            return undefined;\n        };\n        this.getPerspective = (isDisabled) => {\n            const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, userAccess, } = this.props;\n            const { currentPerspective } = this.state;\n            const _isAwsAvailable = isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess);\n            const _isAzureAvailable = isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess);\n            const _isGcpAvailable = isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess);\n            const _isIbmAvailable = isIbmAvailable(ibmProviders, ibmProvidersFetchStatus, userAccess);\n            const _isOcpAvailable = isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess);\n            if (!(_isAwsAvailable || _isAzureAvailable || _isGcpAvailable || _isIbmAvailable || _isOcpAvailable)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (_isOcpAvailable) {\n                options.push(...ocpOptions);\n                options.push(...infrastructureAllCloudOptions);\n            }\n            if (_isAwsAvailable) {\n                options.push(...infrastructureAwsOptions);\n            }\n            if (_isOcpAvailable && isAwsAvailable) {\n                options.push(...infrastructureAwsCloudOptions);\n            }\n            if (_isGcpAvailable) {\n                options.push(...infrastructureGcpOptions);\n            }\n            if (_isIbmAvailable) {\n                options.push(...infrastructureIbmOptions);\n            }\n            if (_isAzureAvailable) {\n                options.push(...infrastructureAzureOptions);\n            }\n            if (_isOcpAvailable && isAzureAvailable) {\n                options.push(...infrastructureAzureCloudOptions);\n            }\n            if (_isOcpAvailable) {\n                options.push(...infrastructureOcpOptions);\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective || options[0].value, isDisabled: isDisabled, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.handlePerspectiveClick = (value) => {\n            const { history, onPerspectiveClicked, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: { cost: 'desc' }, perspective: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentPerspective: value }, () => {\n                if (onPerspectiveClicked) {\n                    onPerspectiveClicked(value);\n                }\n            });\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.getDefaultPerspective(),\n        });\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ibmProvidersFetchStatus, groupBy, ocpProvidersFetchStatus, onFilterAdded, onFilterRemoved, onGroupByClicked, perspective, query, t, userAccess, } = this.props;\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess) &&\n            isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess) &&\n            isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess) &&\n            isIbmAvailable(ibmProviders, ibmProvidersFetchStatus, userAccess) &&\n            isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess));\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.explorer')),\n                React.createElement(\"div\", { style: styles.perspectiveContainer },\n                    this.getPerspective(noProviders),\n                    React.createElement(\"div\", { style: styles.groupBy },\n                        React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onItemClicked: onGroupByClicked, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, tagReportPathsType: tagReportPathsType }))),\n                React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, query: query }))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        perspective,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined }));\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"gcp\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = withRouter(withTranslation()(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { parseQuery } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { format, getDate, getMonth } from 'date-fns';\nimport { getGroupByOrg, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault, getPerspectiveDefault, } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* cost */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, t, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrg(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            // Add first column heading (i.e., name)\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        cellTransforms: [nowrap],\n                        title: groupByOrg ? t('explorer.org_unit_column_title') : t('explorer.tag_column_title'),\n                    },\n                ]\n                : [\n                    {\n                        cellTransforms: [nowrap],\n                        orderBy: (groupById === 'account' && perspective !== \"gcp\" /* gcp */) || perspective !== \"ibm\" /* ibm */\n                            ? 'account_alias'\n                            : groupById,\n                        title: t('explorer.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                ];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: true,\n            });\n            // Fill in missing columns\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push({\n                    cellTransforms: [nowrap],\n                    orderBy: undefined,\n                    title: t('explorer.daily_column_title', { date, month }),\n                    transforms: undefined,\n                });\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n            }\n            // Sort by date and fill in missing cells\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc; // First column description (i.e., show ID if different than label)\n                let name; // For first column resource name\n                let selectItem; // Save for row selection\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!name) {\n                        name = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (item.id && !selectItem) {\n                        selectItem = item;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[computedReportItemType] && item[computedReportItemType].total\n                            ? formatCurrency(item[computedReportItemType].total.value)\n                            : t('explorer.no_data'),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        name,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    disableSelection: selectItem.label === `no-${groupById}` || selectItem.label === `no-${groupByTagKey}`,\n                    item: selectItem,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === selectItem.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('explorer.empty_state'))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": \"explorer-table\", canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(queryFromRoute);\n    return {\n        dateRange,\n        end_date,\n        perspective,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = withTranslation()(ExplorerTableConnect);\nexport { ExplorerTable };\n","import { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, selectedItems, } = this.props;\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = withTranslation()(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByOrg, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { allUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, getRouteForQuery, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrg(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: false,\n            });\n            return computedItems;\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective), resolution: \"daily\" }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = getRouteForQuery(history, newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handlePerspectiveClick = () => {\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        // Ensure at least one source provider has data available\n        this.hasCurrentMonthData = (providers) => {\n            let result = false;\n            if (providers && providers.data) {\n                for (const provider of providers.data) {\n                    if (provider.current_month_data) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n        this.updateReport = () => {\n            const { dateRange, fetchReport, history, location, perspective, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                    dateRange,\n                }));\n            }\n            else {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handlePerspectiveClick = this.handlePerspectiveClick.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ibmProvidersFetchStatus, ocpProvidersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, t, userAccess, } = this.props;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = t('navigation.explorer');\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess) &&\n            isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess) &&\n            isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess) &&\n            isIbmAvailable(ibmProviders, ibmProvidersFetchStatus, userAccess) &&\n            isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess));\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(this.hasCurrentMonthData(awsProviders) ||\n            this.hasCurrentMonthData(azureProviders) ||\n            this.hasCurrentMonthData(gcpProviders) ||\n            this.hasCurrentMonthData(ibmProviders) ||\n            this.hasCurrentMonthData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, onGroupByClicked: this.handleGroupByClick, onPerspectiveClicked: this.handlePerspectiveClick }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { computedReportItemType: getComputedReportItemType(perspective) })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(queryFromRoute);\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"gcp\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        dateRange,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n"],"sourceRoot":""}