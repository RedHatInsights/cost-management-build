{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/testIds.ts","webpack:///./src/utils/getItemLabel.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/equal.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/charts/trendChart/index.ts","webpack:///./src/components/details/detailsDataToolbar.styles.ts","webpack:///./src/components/details/detailsDataToolbar.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/charts/historicalTrendChart/index.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.tsx","webpack:///./src/components/reports/azureReportSummary/index.ts","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/azureDetails/azureDetails.styles.ts","webpack:///./src/pages/azureDetails/detailsHeader.styles.ts","webpack:///./src/pages/azureDetails/groupBy.styles.ts","webpack:///./src/pages/azureDetails/groupBy.tsx","webpack:///./src/pages/azureDetails/detailsHeader.tsx","webpack:///./src/pages/azureDetails/detailsTagModal.styles.ts","webpack:///./src/pages/azureDetails/detailsTagView.tsx","webpack:///./src/pages/azureDetails/detailsTagModal.tsx","webpack:///./src/pages/azureDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/azureDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/azureDetails/detailsWidgetModal.tsx","webpack:///./src/pages/azureDetails/exportModal.styles.ts","webpack:///./src/pages/azureDetails/exportModal.tsx","webpack:///./src/pages/azureDetails/historicalChart.styles.ts","webpack:///./src/pages/azureDetails/historicalChart.tsx","webpack:///./src/pages/azureDetails/historicalModal.styles.ts","webpack:///./src/pages/azureDetails/historicalModal.tsx","webpack:///./src/pages/azureDetails/detailsActions.tsx","webpack:///./src/pages/azureDetails/detailsTable.styles.ts","webpack:///./src/pages/azureDetails/detailsTableItem.styles.ts","webpack:///./src/pages/azureDetails/detailsTag.styles.ts","webpack:///./src/pages/azureDetails/detailsTag.tsx","webpack:///./src/pages/azureDetails/detailsWidget.styles.ts","webpack:///./src/pages/azureDetails/detailsWidgetView.tsx","webpack:///./src/pages/azureDetails/detailsWidget.tsx","webpack:///./src/pages/azureDetails/detailsTableItem.tsx","webpack:///./src/pages/azureDetails/detailsTable.tsx","webpack:///./src/pages/azureDetails/detailsToolbar.tsx","webpack:///./src/pages/azureDetails/azureDetails.tsx","webpack:///./src/pages/azureDetails/index.ts"],"names":["__webpack_require__","d","__webpack_exports__","unitLookupKey","formatValue","formatCurrency","unit","lookup","toLowerCase","value","options","fValue","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","transformAwsReport","transformAzureReport","transformOcpReport","transformOcpCloudReport","getDateRange","getMaxValue","getTooltipContent","getTooltipLabel","getCostRangeString","getUsageRangeString","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0__","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","n","date_fns_format__WEBPACK_IMPORTED_MODULE_1__","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3__","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4__","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","i18next__WEBPACK_IMPORTED_MODULE_5__","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","Object","map","i","createDatum","reduce","acc","prevValue","length","y","computedItem","x","id","label","Number","isFloat","parseFloat","toFixed","isInt","name","units","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","getDatumDateRange","setDate","lastDate","getDate","max","forEach","datum","t","formatOptions","toString","count","endDate","month","startDate","year","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","getTestProps","testIds","data-testid","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","getItemLabel","_api_query__WEBPACK_IMPORTED_MODULE_0__","labelKey","itemLabelKey","String","meta","group_by","keys","indexOf","tagPrefixKey","hasOwnProperty","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","getUnsortedComputedOcpReportItems","getIdKeyForGroupBy","_getItemLabel__WEBPACK_IMPORTED_MODULE_0__","_sort__WEBPACK_IMPORTED_MODULE_1__","itemMap","Map","visitDataPoint","dataPoint","values","cluster_alias","clusters","undefined","cluster","capacity","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","isEqual","obj1","obj2","JSON","stringify","split","join","getNoDataForDateRangeString","getForDateRangeString","getSinceDateRangeString","date_fns_format__WEBPACK_IMPORTED_MODULE_0__","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2__","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3__","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","display","justifyContent","height","marginTop","viewSources","NoProvidersState","mapStateToProps","common","state","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","marginRight","toolbarContainer","backgroundColor","paddingBottom","paddingTop","paddingLeft","paddingRight","marginLeft","DetailsDataToolbar","defaultFilters","tag","defaultState","categoryInput","filters","lodash","isCategoryDropdownOpen","isTagKeyDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","option","api_query","getActiveFilters","query","filter_by","isArray","substring","onDelete","filterType","prevState","filter","_filterType","onFilterRemoved","getCurrentCategoryOption","currentCategory","onCategoryClick","onCategorySelect","event","currentTagKey","onCategoryToggle","isOpen","getCategoryInput","categoryOption","DataToolbarFilter","categoryName","chips","deleteChip","showToolbarItem","InputGroup","TextInput","aria-label","onChange","onCategoryInputChange","placeholder","onKeyDown","evt","onCategoryInput","Button","variant","control","onClick","search_icon","getDefaultCategoryOptions","trim","prevFilters","includes","onFilterAdded","getTagKeySelect","selectOptions","getTagKeyOptions","selectOption","SelectOption","DataToolbarItem","Select","selectConstants","typeahead","onClear","onTagKeyClear","onToggle","onTagKeyToggle","onSelect","onTagKeySelect","isExpanded","placeholderText","selections","selection","isPlaceholder","getTagValueSelect","tagKeyOption","getTagValueOptions","checkbox","onTagValueToggle","onTagValueSelect","checked","target","prevSelections","getExportButton","isExportDisabled","isDisabled","handleExportClicked","external_link_square_alt_icon","onExportClicked","equal","Dropdown","position","dropdownConstants","left","toggle","DropdownToggle","filter_icon","dropdownItems","DropdownItem","val","pagination","showExport","DataToolbar","clearAllFilters","collapseListedFiltersBreakpoint","DataToolbarContent","DataToolbarToggleGroup","toggleIcon","breakpoint","DataToolbarGroup","getCategoryDropdown","Boolean","breakpointMods","modifier","itemsPerRow","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AzureReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","azureReportSummaryAlt_styles_styles","flexGrow","minHeight","tops","AzureReportSummaryAlt","tabs","Grid","GridItem","lg","xl","azureReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","lineHeight","valueContainer","wordWrap","AzureReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","total","getCostLayout","getUsageLayout","usageUnits","_units","utils_formatValue","unitsLabel","azureReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AzureReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AzureReportSummaryItem","azureReportSummaryItems_styles_styles","skeleton","AzureReportSummaryItems","nextProps","otherIndex","findIndex","slice","getItems","azureReportSummaryTrend_styles_styles","AzureReportSummaryTrend","trendChart","TertiaryNav","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_4___default","react_i18next__WEBPACK_IMPORTED_MODULE_5__","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","getIdKeyForNavItem","navItem","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","itemId","isActive","handleOnSelect","selectedItem","history","replace","availableNavItems","tertiary","azureDetails","content","paginationContainer","tableContainer","detailsHeader_styles_styles","costValue","costLabelUnit","costLabelDate","header","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","queryString","azureQuery","resolution","time_scope_units","time_scope_value","azureReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","currentItem","isGroupByOpen","handleGroupByClick","onItemClicked","getDropDownItems","component","getDropDownTags","getGroupBy","queryFromRoute","location","search","groupByKeys","handleGroupBySelect","handleGroupByToggle","bind","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","tertiaryNav","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","azureReportSummary","_item","DetailsWidgetModal","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_mapStateToProps","error","azureExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","secondary","primary","Form","FormGroup","fieldId","Radio","isValid","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","azureReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","azureReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","azureDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","addTag","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","abs","percentage","showPercentage","showValue","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_reportType","detailsToolbar_mapStateToProps","detailsToolbar_mapDispatchToProps","DetailsToolbar","getCategoryOptions","detailsDataToolbar","azureDetails_reportType","azureDetails_baseQuery","azureDetails_mapStateToProps","azureDetails_mapDispatchToProps","groupByTag","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","handleFilterAdded","handleFilterRemoved","filterValue","newFilterType","found","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"93ab1869cbeb0fae8ac1.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import { tagKey } from '../api/query';\nexport function getItemLabel({ report, labelKey, value }) {\n    let itemLabelKey = String(labelKey);\n    if (report.meta && report.meta.group_by) {\n        const group_by = report.meta.group_by;\n        for (const key of Object.keys(group_by)) {\n            if (key.indexOf(tagKey)) {\n                const tagPrefixKey = tagKey + labelKey;\n                if (value.hasOwnProperty(tagPrefixKey)) {\n                    itemLabelKey = tagPrefixKey;\n                }\n            }\n        }\n    }\n    return itemLabelKey;\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { getItemLabel } from './getItemLabel';\nimport { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                // clusters will either contain the cluster alias or default to cluster ID\n                const cluster_alias = value.clusters && value.clusters.length > 0\n                    ? value.clusters[0]\n                    : undefined;\n                const cluster = cluster_alias || value.cluster;\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (itemLabelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        clusters: value.clusters,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { getItemLabel } from './getItemLabel';\nimport { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                // clusters will either contain the cluster alias or default to cluster ID\n                const cluster_alias = value.clusters && value.clusters.length > 0\n                    ? value.clusters[0]\n                    : undefined;\n                const cluster = cluster_alias || value.cluster;\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (itemLabelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (itemLabelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        clusters: value.clusters,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { getItemLabel } from './getItemLabel';\nimport { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { getItemLabel } from './getItemLabel';\nimport { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (itemLabelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getNoDataForDateRangeString(key = 'no_data_for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            // Todo: Leave one legend item visible at all times?\n            // const { hiddenSeries, series } = this.state;\n            // const leaveVisible = hiddenSeries.size === series.length - 1;\n            // if (leaveVisible && !this.isSeriesHidden(props.index)) {\n            //   return;\n            // }\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export { TrendChart } from './trendChart';\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarGroup, DataToolbarItem, DataToolbarToggleGroup, } from '@patternfly/react-core/dist/esm/experimental';\nimport { ExternalLinkSquareAltIcon, FilterIcon, SearchIcon, } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { tagKey } from 'api/query';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsDataToolbar.styles';\nconst defaultFilters = {\n    tag: {},\n};\nexport class DetailsDataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isCategoryDropdownOpen: false,\n            isTagKeyDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy } = this.props;\n            if (!categoryOptions) {\n                return 'name';\n            }\n            for (const option of categoryOptions) {\n                if (groupBy === option.value ||\n                    (groupBy && groupBy.indexOf(tagKey) !== -1 && option.value === 'tag')) {\n                    return option.value;\n                }\n            }\n            return categoryOptions[0].value;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key])\n                        ? [...query.filter_by[key]]\n                        : [query.filter_by[key]];\n                    if (key.indexOf(tagKey) !== -1) {\n                        filters.tag[key.substring(tagKey.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, id) => {\n            if (type) {\n                // Workaround for https://github.com/patternfly/patternfly-react/issues/3552\n                // This prevents us from using an ID\n                let filterType = type.toLowerCase();\n                // Workaround for Azure IDs\n                if (filterType === 'account' && this.state.filters.subscription_guid) {\n                    filterType = 'subscription_guid';\n                }\n                else if (filterType === 'region' &&\n                    this.state.filters.resource_location) {\n                    filterType = 'resource_location';\n                }\n                else if (filterType === 'service' && this.state.filters.service_name) {\n                    filterType = 'service_name';\n                }\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else if (prevState.filters[filterType]) {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType]\n                        ? `${tagKey}${filterType}`\n                        : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        this.getCurrentCategoryOption = () => {\n            const { categoryOptions } = this.props;\n            const { currentCategory } = this.state;\n            if (!categoryOptions) {\n                return undefined;\n            }\n            for (const option of categoryOptions) {\n                if (currentCategory === option.value) {\n                    return option;\n                }\n            }\n            return categoryOptions[0];\n        };\n        this.onCategoryClick = value => {\n            this.setState({\n                currentCategory: value,\n            });\n        };\n        this.onCategorySelect = event => {\n            this.setState({\n                categoryInput: '',\n                currentTagKey: undefined,\n                isCategoryDropdownOpen: !this.state.isCategoryDropdownOpen,\n            });\n        };\n        this.onCategoryToggle = isOpen => {\n            this.setState({\n                isCategoryDropdownOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = categoryOption => {\n            const { t } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            return (React.createElement(DataToolbarFilter, { categoryName: categoryOption.label, chips: filters[categoryOption.value], deleteChip: this.onDelete, key: categoryOption.value, showToolbarItem: currentCategory !== 'tag' && currentCategory === categoryOption.value },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { name: `${categoryOption.value}-input`, id: `${categoryOption.value}-input`, type: \"search\", \"aria-label\": t(`filter_by.${categoryOption.value}_input_aria_label`), onChange: this.onCategoryInputChange, value: categoryInput, placeholder: t(`filter_by.${categoryOption.value}_placeholder`), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.value) }),\n                    React.createElement(Button, { variant: ButtonVariant.control, \"aria-label\": t(`filter_by.${categoryOption.value}_button_aria_label`), onClick: evt => this.onCategoryInput(evt, categoryOption.value) },\n                        React.createElement(SearchIcon, null)))));\n        };\n        this.getDefaultCategoryOptions = () => {\n            const { t } = this.props;\n            return [{ label: t('filter_by.values.name'), value: 'name' }];\n        };\n        this.onCategoryInputChange = value => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if ((event.key && event.key !== 'Enter') || categoryInput.trim() === '') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign({}, prevState.filters, { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, categoryInput]\n                                : [categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded, } = this.state;\n            if (currentCategory !== 'tag') {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Select, { variant: SelectVariant.typeahead, \"aria-label\": t('filter_by.tag_key_aria_label'), onClear: this.onTagKeyClear, onToggle: this.onTagKeyToggle, onSelect: this.onTagKeySelect, isExpanded: isTagKeySelectExpanded, placeholderText: t('filter_by.tag_key_placeholder'), selections: currentTagKey }, selectOptions)));\n        };\n        this.onTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.onTagKeySelect = (event, selection, isPlaceholder) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.onTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = tagKeyOption => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, filters, isTagValueSelectExpanded, } = this.state;\n            const selectOptions = this.getTagValueOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(DataToolbarFilter, { categoryName: tagKeyOption.value, chips: filters.tag[tagKeyOption.value], deleteChip: this.onDelete, key: tagKeyOption.value, showToolbarItem: currentCategory === 'tag' && currentTagKey === tagKeyOption.value },\n                React.createElement(Select, { variant: SelectVariant.checkbox, \"aria-label\": t('filter_by.tag_value_aria_label'), onToggle: this.onTagValueToggle, onSelect: this.onTagValueSelect, selections: filters.tag[tagKeyOption.value]\n                        ? filters.tag[tagKeyOption.value]\n                        : [], isExpanded: isTagValueSelectExpanded, placeholderText: t('filter_by.tag_value_placeholder') }, selectOptions)));\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey]\n                    ? prevState.filters.tag[currentTagKey]\n                    : [];\n                return {\n                    filters: Object.assign({}, prevState.filters, { tag: Object.assign({}, prevState.filters.tag, { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagKey}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueSelectExpanded: isOpen,\n            });\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isExportDisabled, t } = this.props;\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                    React.createElement(\"span\", { className: css(styles.export) }, t('export.export')),\n                    React.createElement(ExternalLinkSquareAltIcon, null))));\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (report && !isEqual(report, prevProps.report))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return prevProps.groupBy !== groupBy\n                    ? {\n                        currentCategory: this.getDefaultCategory(),\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category dropdown\n    getCategoryDropdown() {\n        const { categoryOptions } = this.props;\n        const { isCategoryDropdownOpen } = this.state;\n        if (!categoryOptions) {\n            return null;\n        }\n        return (React.createElement(DataToolbarItem, null,\n            React.createElement(Dropdown, { onSelect: this.onCategorySelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { onToggle: this.onCategoryToggle, style: { width: '100%' } },\n                    React.createElement(FilterIcon, null),\n                    \" \",\n                    this.getCurrentCategoryOption().label), isOpen: isCategoryDropdownOpen, dropdownItems: categoryOptions &&\n                    categoryOptions.map(option => (React.createElement(DropdownItem, { key: option.value, onClick: () => this.onCategoryClick(option.value) }, option.label))), style: { width: '100%' } })));\n    }\n    getTagKeyOptions() {\n        const { report } = this.props;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            options = data.map(tag => {\n                return {\n                    value: tag.key,\n                };\n            });\n        }\n        return options;\n    }\n    getTagValueOptions() {\n        const { report } = this.props;\n        const { currentTagKey } = this.state;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (currentTagKey === tag.key) {\n                    options = tag.values.map(val => {\n                        return {\n                            value: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, pagination, showExport } = this.props;\n        const options = categoryOptions\n            ? categoryOptions\n            : this.getDefaultCategoryOptions();\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(DataToolbar, { id: \"details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(DataToolbarContent, null,\n                    React.createElement(DataToolbarToggleGroup, { toggleIcon: React.createElement(FilterIcon, null), breakpoint: \"xl\" },\n                        React.createElement(DataToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategoryDropdown(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            options &&\n                                options\n                                    .filter(option => option.value !== 'tag')\n                                    .map(option => this.getCategoryInput(option))),\n                        Boolean(showExport) && (React.createElement(DataToolbarGroup, null, this.getExportButton()))),\n                    React.createElement(DataToolbarItem, { variant: \"pagination\", breakpointMods: [{ modifier: 'align-right' }] }, pagination)))));\n    }\n}\nconst DetailsDataToolbar = translate()(connect()(DetailsDataToolbarBase));\nexport { DetailsDataToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","export { HistoricalTrendChart, } from './historicalTrendChart';\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummary.styles';\nconst AzureReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AzureReportSummary = translate()(AzureReportSummaryBase);\nexport { AzureReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummaryAlt.styles';\nconst AzureReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AzureReportSummaryAlt = translate()(AzureReportSummaryAltBase);\nexport { AzureReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryDetails.styles';\nconst AzureReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (report.meta.total.usage && report.meta.total.usage.value) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Work around for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage : 0, report.meta.total.count ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    (units ||\n                        (report &&\n                            report.meta &&\n                            report.meta.total.usage &&\n                            report.meta.total.usage.value >= 0))) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AzureReportSummaryDetails = translate()(AzureReportSummaryDetailsBase);\nexport { AzureReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryItem.styles';\nconst AzureReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAzureReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AzureReportSummaryItem = translate()(AzureReportSummaryItemBase);\nexport { AzureReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureReportSummaryItems.styles';\nclass AzureReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAzureReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AzureReportSummaryItems = translate()(AzureReportSummaryItemsBase);\nexport { AzureReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './azureReportSummaryTrend.styles';\nconst AzureReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AzureReportSummaryTrend };\n","export { AzureReportSummary } from './azureReportSummary';\nexport { AzureReportSummaryAlt } from './azureReportSummaryAlt';\nexport { AzureReportSummaryDetails } from './azureReportSummaryDetails';\nexport { AzureReportSummaryItem } from './azureReportSummaryItem';\nexport { AzureReportSummaryItems } from './azureReportSummaryItems';\nexport { AzureReportSummaryTrend } from './azureReportSummaryTrend';\n","import { Nav, NavItem, NavList, NavVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem }, this.getNavItemTitle(navItem)));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    azureDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { parseQuery } from 'api/azureQuery';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAzureReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst reportType = \"tag\" /* tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            currentItem: this.props.groupBy || 'subscription_guid',\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(tag => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${tag.key}`, onClick: () => this.handleGroupByClick(`${tagKey}${tag.key}`) }, t('group_by.tag_key', { value: tag.key }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'subscription_guid';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, groupBy, queryString } = this.props;\n        if (prevProps.queryString !== queryString ||\n            prevProps.groupBy !== groupBy) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag_key', { value: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('navigation.cloud_details')),\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"azure\" /* azure */ })),\n                Boolean(showContent) && (React.createElement(GroupBy, { groupBy: groupBy, onItemClicked: onGroupByClicked }))),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('azure_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = azureReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    if (Array.isArray(tag.values)) {\n                        for (const val of tag.values) {\n                            tags.push(`${tag.key}: ${val}`);\n                        }\n                    }\n                    else {\n                        tags.push(`${tag.key}: ${tag.values}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            subscription_guid: account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/azureQuery';\nimport { AzureReportSummaryItem, AzureReportSummaryItems, } from 'components/reports/azureReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('azure_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AzureReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AzureReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureExportActions, azureExportSelectors } from 'store/azureExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: azureExportSelectors.selectExportError(state),\n        export: azureExportSelectors.selectExport(state),\n        fetchStatus: azureExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: azureExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAzureReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as azureReportsActions from 'store/azureReports/azureReportsActions';\nimport * as azureReportsSelectors from 'store/azureReports/azureReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAzureReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAzureReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAzureReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAzureReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAzureReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAzureReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('azure_details.historical.cost_title'), xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('azure_details.historical.instance_title'), showUsageLegendLabel: true, xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('azure_details.historical.storage_title'), showUsageLegendLabel: true, xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = azureReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = azureReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = azureReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = azureReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = azureReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = azureReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureDashboardSelectors } from 'store/azureDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"subscription_guid\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('azure_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'subscription_guid', onClick: this.handleWidgetModalOpen }, t('azure_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'subscription_guid', onClick: this.handleTagModalOpen }, t('azure_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('azure_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        const addTag = (tag, val) => {\n            const prefix = someTags.length > 0 ? ', ' : '';\n            const tagString = `${prefix}${tag.key}: ${val}`;\n            if (showAll) {\n                someTags.push(tagString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + tagString.length > maxChars) {\n                    someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                }\n                else {\n                    someTags.push(tagString);\n                }\n            }\n            charCount += tagString.length;\n            allTags.push(`${tag.key}: ${val}`);\n        };\n        if (report) {\n            for (const tag of report.data) {\n                if (!Array.isArray(tag.values)) {\n                    addTag(tag, tag.values);\n                }\n                else {\n                    for (const val of tag.values) {\n                        addTag(tag, val);\n                    }\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('azure_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            subscription_guid: account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        subscription_guid: account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/azureQuery';\nimport { AzureReportSummaryItem, AzureReportSummaryItems, } from 'components/reports/azureReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAzureReportItems } from 'utils/getComputedAzureReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAzureReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AzureReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                    ? reportItem.cost\n                    : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('azure_details.view_all', {\n                        value: t(`group_by.top_values.${groupBy}`),\n                    })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AzureReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"service_names\" /* service_names */,\n            \"subscription_guids\" /* subscription_guids */,\n            \"resource_locations\" /* resource_locations */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('azure_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'subscription_guid') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('azure_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/azureQuery';\nimport { tagKey } from 'api/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString, getNoDataForDateRangeString, } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('azure_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAzureReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.deltaPercent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/azureQuery';\nimport { DetailsDataToolbar } from 'components/details/detailsDataToolbar';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { isEqual } from 'utils/equal';\nconst reportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getCategoryOptions = () => {\n            const { t } = this.props;\n            return [\n                {\n                    label: t('filter_by.values.subscription_guid'),\n                    value: 'subscription_guid',\n                },\n                { label: t('filter_by.values.service_name'), value: 'service_name' },\n                {\n                    label: t('filter_by.values.resource_location'),\n                    value: 'resource_location',\n                },\n                { label: t('filter_by.values.tag'), value: 'tag' },\n            ];\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { fetchReport, query, queryString } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, isExportDisabled, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, report, } = this.props;\n        return (React.createElement(DetailsDataToolbar, { categoryOptions: this.getCategoryOptions(), groupBy: groupBy, isExportDisabled: isExportDisabled, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, report: report, showExport: true }));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsToolbar = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase));\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery, } from 'api/azureQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { tagKey } from 'api/query';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[newFilterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[newFilterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[newFilterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[newFilterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[newFilterType] = [\n                        newQuery.filter_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (!Array.isArray(newQuery.filter_by[newFilterType])) {\n                newQuery.filter_by[newFilterType] = undefined;\n            }\n            else {\n                const index = newQuery.filter_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[newFilterType] = [\n                        ...query.filter_by[newFilterType].slice(0, index),\n                        ...query.filter_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/azure?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAzureReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.azureDetails) },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = azureReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n"],"sourceRoot":""}