{"version":3,"file":"cc1666a82dc7e2dc6753.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/routes/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/routes/views/components/perspective/perspectiveSelect.tsx","webpack://koku-ui/./src/routes/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/routes/views/explorer/explorer.styles.ts","webpack://koku-ui/./src/routes/views/components/charts/costExplorerChart/costExplorerChart.styles.ts","webpack://koku-ui/./src/routes/views/components/charts/costExplorerChart/costExplorerChart.tsx","webpack://koku-ui/./src/routes/views/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/routes/views/explorer/explorerChart.tsx","webpack://koku-ui/./src/routes/views/explorer/dateRange.tsx","webpack://koku-ui/./src/routes/views/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/routes/views/explorer/explorerFilter.tsx","webpack://koku-ui/./src/routes/views/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/routes/views/explorer/explorerHeader.tsx","webpack://koku-ui/./src/routes/views/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/routes/views/explorer/explorerTable.tsx","webpack://koku-ui/./src/routes/views/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/routes/views/explorer/explorer.tsx"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveSelectBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.perspective)),\n            this.getSelect()));\n    }\n}\nconst PerspectiveSelect = injectIntl(PerspectiveSelectBase);\nexport { PerspectiveSelect };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { PerspectiveSelect } from 'routes/views/components/perspective/perspectiveSelect';\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.perspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.perspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.perspectiveValues, value: 'azure' }];\n// Infrastructure Oci options\nconst infrastructureOciOptions = [{ label: messages.perspectiveValues, value: 'oci' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.perspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.perspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.perspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.perspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.perspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.perspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nconst ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\nconst getInfrastructureOptions = ({ hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, isIbmFeatureEnabled, isOciFeatureEnabled, }) => {\n    const options = [];\n    if (hasAws) {\n        options.push(...infrastructureAwsOptions);\n    }\n    if (hasAwsOcp) {\n        options.push(...infrastructureAwsOcpOptions);\n    }\n    if (hasGcp) {\n        options.push(...infrastructureGcpOptions);\n    }\n    if (hasGcpOcp) {\n        options.push(...infrastructureGcpOcpOptions);\n    }\n    if (hasIbm) {\n        options.push(...infrastructureIbmOptions);\n    }\n    if (hasIbmOcp && isIbmFeatureEnabled) {\n        options.push(...infrastructureIbmOcpOptions);\n    }\n    if (hasAzure) {\n        options.push(...infrastructureAzureOptions);\n    }\n    if (hasAzureOcp) {\n        options.push(...infrastructureAzureOcpOptions);\n    }\n    if (hasOci && isOciFeatureEnabled) {\n        options.push(...infrastructureOciOptions);\n    }\n    return options;\n};\nconst OverviewPerspectiveBase = ({ currentItem, hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, hasOcp, hasOcpCloud, isDisabled, isIbmFeatureEnabled, isInfrastructureTab, isOciFeatureEnabled, onSelected, }) => {\n    // Dynamically show options if providers are available\n    const options = [];\n    if (isInfrastructureTab !== undefined) {\n        if (isInfrastructureTab) {\n            if (hasOcpCloud) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            options.push(...getInfrastructureOptions({\n                hasAws,\n                hasAwsOcp,\n                hasAzure,\n                hasAzureOcp,\n                hasGcp,\n                hasGcpOcp,\n                hasIbm,\n                hasIbmOcp,\n                hasOci,\n                isIbmFeatureEnabled,\n                isOciFeatureEnabled,\n            }));\n        }\n        else if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n    }\n    else {\n        if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n        if (hasOcpCloud) {\n            options.push(...infrastructureOcpCloudOptions);\n        }\n        options.push(...getInfrastructureOptions({\n            hasAws,\n            hasAwsOcp,\n            hasAzure,\n            hasAzureOcp,\n            hasGcp,\n            hasGcpOcp,\n            hasIbm,\n            hasIbmOcp,\n            hasOci,\n            isIbmFeatureEnabled,\n            isOciFeatureEnabled,\n        }));\n    }\n    return (React.createElement(PerspectiveSelect, { currentItem: currentItem || options[0].value, isDisabled: isDisabled, onSelected: onSelected, options: options }));\n};\nconst Perspective = withRouter(OverviewPerspectiveBase);\nexport default Perspective;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.gcp_project) {\n        return 'gcp_project';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'routes/views/components/charts/common/chart.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { default as ChartTheme } from 'routes/views/components/charts/chartTheme';\nimport { getMaxValue } from 'routes/views/components/charts/common/chartDatum';\nimport { getChartNames, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'routes/views/components/charts/common/chartUtils';\nimport { formatCurrencyAbbreviation } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costExplorerChart.styles';\nclass CostExplorerChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            tickValues: [],\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            const units = this.getUnits(series);\n            this.setState({ cursorVoronoiContainer, series, tickValues: this.getTickValues(), units });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        // If bar width exceeds max and domainPadding is true, extra width is returned to help center bars horizontally\n        this.getBarWidth = (domainPadding = false) => {\n            const { hiddenSeries, series, width } = this.state;\n            const maxWidth = 200;\n            let maxValue = -1;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        if (s.data.length > maxValue) {\n                            maxValue = s.data.length;\n                        }\n                    }\n                });\n            }\n            // Divide available width into equal sections\n            const sections = maxValue * 2 + 1;\n            const sectionWidth = maxValue > 0 ? width / sections : 0;\n            if (domainPadding) {\n                // Add any extra bar width for domain padding\n                const extraWidth = sectionWidth > maxWidth ? (sectionWidth - maxWidth) * maxValue : 0;\n                return (sectionWidth + extraWidth / 2) * 2;\n            }\n            return sectionWidth > maxWidth ? maxWidth : sectionWidth;\n        };\n        this.getChart = (series, index, barWidth) => {\n            const { hiddenSeries } = this.state;\n            const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n            return (React.createElement(ChartBar, { barWidth: barWidth, data: data, key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        // Returns domain only if max y values are zero\n        this.getDomain = (series, hiddenSeries) => {\n            let maxValue = -1;\n            let domain;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        const max = getMaxValue(s.data);\n                        maxValue = Math.max(maxValue, max);\n                    }\n                });\n            }\n            if (maxValue <= 0) {\n                domain = { y: [0, 100] };\n            }\n            return domain;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const { name = '' } = this.props;\n            const { hiddenSeries, series } = this.state;\n            const result = getInteractiveLegendEvents({\n                chartNames: getChartNames(series),\n                isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n                isHidden: index => isSeriesHidden(hiddenSeries, index),\n                legendName: `${name}-legend`,\n                onLegendClick: props => this.handleLegendClick(props.index),\n            });\n            return result;\n        };\n        this.getLegend = () => {\n            const { name = '' } = this.props;\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: `${name}-legend`, responsive: false }));\n        };\n        // This ensures we show every 3rd tick value, including the first and last value\n        //\n        // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n        this.getTickValues = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            // Find the datum with the greatest number of values\n            const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n            let datum;\n            allDatums.map(val => {\n                if (!datum || datum.length < val.length) {\n                    datum = val;\n                }\n            });\n            const values = [];\n            datum.map(val => {\n                values.push(val.x);\n            });\n            // Prune tick values\n            const tickValues = [];\n            const modVal = values.length < 6 ? 2 : 3;\n            for (let i = 0; i < values.length; i++) {\n                if (i % modVal === 0 && i + 2 < values.length) {\n                    tickValues.push(values[i]);\n                }\n                else if (values.length < 3 && i + 1 < values.length) {\n                    tickValues.push(values[i]);\n                }\n            }\n            tickValues.push(values[values.length - 1]);\n            return tickValues;\n        };\n        this.getTruncatedString = (str) => {\n            const maxChars = 20;\n            return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n        };\n        this.getTickValue = (t) => {\n            const { units } = this.state;\n            return formatCurrencyAbbreviation(t, units);\n        };\n        this.getUnits = (series) => {\n            if (series) {\n                for (const s of series) {\n                    for (const datum of s.data) {\n                        if (datum.units) {\n                            return datum.units;\n                        }\n                    }\n                }\n            }\n            return 'USD';\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    render() {\n        const { height, intl, name, padding = {\n            bottom: 50,\n            left: 40,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, tickValues, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.chartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        const barWidth = this.getBarWidth();\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), domainPadding: { x: this.getBarWidth(true) }, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", name: name, padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index, barWidth)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: tickValues, fixLabelOverlap: true }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis, tickFormat: this.getTickValue })))));\n    }\n}\nconst CostExplorerChart = injectIntl(CostExplorerChartBase);\nexport default CostExplorerChart;\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { Skeleton, Title } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { format, getDate, getMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { isFloat, isInt, } from 'routes/views/components/charts/common/chartDatum';\nimport { CostExplorerChart } from 'routes/views/components/charts/costExplorerChart';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { intl } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = intl.formatMessage(messages.explorerChartDate, {\n                date: getDate(computedItemDate),\n                month: getMonth(computedItemDate),\n            });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return Object.assign(Object.assign({ x: xVal, y: value === null ? null : yVal }, (value === null && { _y: 0 })), { date: computedItem.date, key: computedItem.id, name: computedItem.label ? computedItem.label : computedItem.id, units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined });\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            if (perspective) {\n                const reportPathsType = getReportPathsType(perspective);\n                const reportType = getReportType(perspective);\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* ComputedReportItemType.cost */, computedReportItemValueType = \"total\" /* ComputedReportItemValueType.total */, } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                isDateMap: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const label = datums[0].name;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key, label }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, intl } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, intl.formatMessage(messages.explorerChartTitle, { value: perspective }))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* FetchStatus.inProgress */ ? (this.getSkeleton()) : (React.createElement(CostExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(dateRange);\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: groupBy,\n        perspective,\n        dateRange,\n        cost_type: costType,\n        currency,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined, start_date,\n        end_date }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = injectIntl(withRouter(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currentItem, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"dateRangeSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst DateRange = injectIntl(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { getRouteForQuery } from 'routes/views/utils/history';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { getDateRange } from './explorerUtils';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* OrgType.org */;\nconst tagReportType = \"tag\" /* TagType.tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, intl, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: option.label }),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: intl.formatMessage(messages.filterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRangeComponent = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            this.setState({ currentDateRange: value }, () => {\n                history.replace(getRouteForQuery(history, newQuery));\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportPathsType, tagQueryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgQueryString, orgReport, orgReportPathsType, perspective, query, tagQueryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n        if (prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, resourcePathsType, tagReport, tagReportPathsType, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRangeComponent(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, resourcePathsType: resourcePathsType, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(dateRange);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const orgQueryString = getQuery({\n        end_date,\n        start_date,\n        limit: 1000,\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    }\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const tagQueryString = getQuery({\n        end_date,\n        start_date,\n        key_only: true,\n        limit: 1000,\n    });\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    }\n    return {\n        dateRange,\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilterConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase);\nconst ExplorerFilter = injectIntl(withRouter(ExplorerFilterConnect));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Currency } from 'routes/components/currency';\nimport { CostType } from 'routes/views/components/costType';\nimport { GroupBy } from 'routes/views/components/groupBy';\nimport { Perspective } from 'routes/views/components/perspective';\nimport { getRouteForQuery } from 'routes/views/utils/history';\nimport { filterProviders, hasCloudProvider } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, } from 'utils/userAccess';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getResourcePathsType, getTagReportPathsType, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getPerspective = (isDisabled) => {\n            const { isIbmFeatureEnabled, isOciFeatureEnabled } = this.props;\n            const { currentPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            // Note: No need to test OCP on cloud here, since that requires at least one provider\n            if (!(hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcp)) {\n                return null;\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective, hasAws: hasAws, hasAwsOcp: this.isAwsOcpAvailable(), hasAzure: hasAzure, hasAzureOcp: this.isAzureOcpAvailable(), hasGcp: hasGcp, hasGcpOcp: this.isGcpOcpAvailable(), hasIbm: hasIbm, hasIbmOcp: this.isIbmOcpAvailable(), hasOci: hasOci, hasOcp: hasOcp, hasOcpCloud: this.isOcpCloudAvailable(), isDisabled: isDisabled, isIbmFeatureEnabled: isIbmFeatureEnabled, isOciFeatureEnabled: isOciFeatureEnabled, onSelected: this.handlePerspectiveSelected }));\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { history, onPerspectiveClicked, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { exclude: undefined, filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: undefined, perspective: value });\n            this.setState({ currentPerspective: value }, () => {\n                if (onPerspectiveClicked) {\n                    onPerspectiveClicked(value);\n                }\n                history.replace(getRouteForQuery(history, newQuery));\n            });\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOciAvailable = () => {\n            const { ociProviders, userAccess } = this.props;\n            return isOciAvailable(userAccess, ociProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.props.perspective,\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { perspective } = this.props;\n        if (prevProps.perspective !== perspective) {\n            this.setState({\n                currentPerspective: this.props.perspective,\n            });\n        }\n    }\n    render() {\n        const { costType, currency, groupBy, intl, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onCostTypeSelected, onCurrencySelected, onFilterAdded, onFilterRemoved, onGroupBySelected, perspective, providersFetchStatus, query, } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noAwsProviders = !this.isAwsAvailable() && providersFetchStatus === 2 /* FetchStatus.complete */;\n        const noAzureProviders = !this.isAzureAvailable() && providersFetchStatus === 2 /* FetchStatus.complete */;\n        const noGcpProviders = !this.isGcpAvailable() && providersFetchStatus === 2 /* FetchStatus.complete */;\n        const noIbmProviders = !this.isIbmAvailable() && providersFetchStatus === 2 /* FetchStatus.complete */;\n        const noOcpProviders = !this.isOcpAvailable() && providersFetchStatus === 2 /* FetchStatus.complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const resourcePathsType = getResourcePathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.explorerTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, { currency: currency, onSelect: onCurrencySelected }),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.perspectiveContainer },\n                this.getPerspective(noProviders),\n                React.createElement(\"div\", { style: styles.groupBy },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onSelected: onGroupBySelected, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, tagReportPathsType: tagReportPathsType })),\n                perspective === \"aws\" /* PerspectiveType.aws */ && (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { costType: costType, onSelect: onCostTypeSelected })))),\n            React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, perspective: perspective, query: query, resourcePathsType: resourcePathsType })));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { costType, currency, perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(dateRange);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        order_by: queryFromRoute.order_by,\n        perspective,\n        dateRange,\n        cost_type: costType,\n        currency,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined, start_date,\n        end_date }));\n    return {\n        awsProviders: filterProviders(providers, \"aws\" /* ProviderType.aws */),\n        azureProviders: filterProviders(providers, \"azure\" /* ProviderType.azure */),\n        gcpProviders: filterProviders(providers, \"gcp\" /* ProviderType.gcp */),\n        ibmProviders: filterProviders(providers, \"ibm\" /* ProviderType.ibm */),\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        isIbmFeatureEnabled: featureFlagsSelectors.selectIsIbmFeatureEnabled(state),\n        isOciFeatureEnabled: featureFlagsSelectors.selectIsOciFeatureEnabled(state),\n        ociProviders: filterProviders(providers, \"oci\" /* ProviderType.oci */),\n        ocpProviders: filterProviders(providers, \"ocp\" /* ProviderType.ocp */),\n        providers,\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = injectIntl(withRouter(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { format, getDate, getMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* ComputedReportItemType.cost */, computedReportItemValueType = \"total\" /* ComputedReportItemValueType.total */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, intl, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                isDateMap: true,\n            });\n            // Add first column heading (i.e., name)\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        cellTransforms: [nowrap],\n                        title: groupByOrg\n                            ? intl.formatMessage(messages.names, { count: 2 })\n                            : intl.formatMessage(messages.tagNames),\n                    },\n                ]\n                : [\n                    Object.assign({ cellTransforms: [nowrap], date: undefined, orderBy: groupById === 'account' && perspective === \"aws\" /* PerspectiveType.aws */ ? 'account_alias' : groupById, title: intl.formatMessage(messages.groupByValueNames, { groupBy: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                ];\n            // Fill in missing columns\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                let isSortable = computedItems.length > 0;\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        isSortable = false;\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push(Object.assign({ cellTransforms: [nowrap], title: intl.formatMessage(messages.explorerChartDate, { date, month }) }, (isSortable && {\n                    date: mapId,\n                    orderBy: 'cost',\n                    transforms: [sortable],\n                })));\n            }\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            // Sort by date and fill in missing cells\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc; // First column description (i.e., show ID if different than label)\n                let name; // For first column resource name\n                let selectItem; // Save for row selection\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!name) {\n                        name = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (item.id && !selectItem) {\n                        selectItem = item;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[reportItem] && item[reportItem][reportItemValue]\n                            ? formatCurrency(item[reportItem][reportItemValue].value, item[reportItem][reportItemValue].units)\n                            : intl.formatMessage(messages.chartNoData),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        name,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    disableSelection: selectItem.label === `no-${groupById}` || selectItem.label === `no-${groupByTagKey}`,\n                    item: selectItem,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === selectItem.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            if (query && query.order_by) {\n                for (const key of Object.keys(query.order_by)) {\n                    let c = 0;\n                    for (const column of columns) {\n                        if (column.orderBy === key && !column.date) {\n                            direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        else if (column.date === query.order_by[key]) {\n                            direction = query.order_by.cost === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        c++;\n                    }\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const column = columns[index - 1];\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(column.orderBy, isSortAscending, column.date);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.explorerTableAriaLabel), canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(dateRange);\n    return {\n        end_date,\n        perspective,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = injectIntl(ExplorerTableConnect);\nexport { ExplorerTable };\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { getTagReportPathsType } from './explorerUtils';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, perspective, selectedItems, } = this.props;\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = injectIntl(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Loading } from 'routes/state/loading';\nimport { NoData } from 'routes/state/noData';\nimport { NoProviders } from 'routes/state/noProviders';\nimport { NotAvailable } from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { getRouteForQuery, handleCostTypeSelected, handleCurrencySelected, handleFilterAdded, handleFilterRemoved, handlePerPageSelect, handleSetPage, handleSort, } from 'routes/views/utils/history';\nimport { filterProviders, hasData } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCostType } from 'utils/costType';\nimport { getCurrency } from 'utils/currency';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, } from 'utils/userAccess';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getComputedReportItemValueType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                isDateMap: false, // Don't use isDateMap here, so we can use a flattened data structure with row selection\n            });\n            return computedItems;\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective), resolution: \"daily\", showTimeScope: false }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { history, intl, query, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: (event, perPage) => handlePerPageSelect(history, query, perPage), onSetPage: (event, pageNumber) => handleSetPage(history, query, report, pageNumber), page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.explorerTitle),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { history, perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* FetchStatus.inProgress */, onSelected: this.handleSelected, onSort: (sortType, isSortAscending, date) => handleSort(history, query, sortType, isSortAscending, date), perspective: perspective, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { perspective, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), perspective: perspective, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery));\n            });\n        };\n        this.handlePerspectiveClick = () => {\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isOciAvailable = () => {\n            const { ociProviders, userAccess } = this.props;\n            return isOciAvailable(userAccess, ociProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.updateReport = () => {\n            const { costType, currency, dateRange, fetchReport, history, location, perspective, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    exclude: query ? query.exclude : undefined,\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: query ? query.order_by : undefined,\n                    dateRange,\n                    cost_type: costType,\n                    currency,\n                }));\n            }\n            else if (perspective) {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handlePerspectiveClick = this.handlePerspectiveClick.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, perspective, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newPerspective = prevProps.perspective !== perspective;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newPerspective || newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, azureProviders, ociProviders, costType, currency, gcpProviders, ibmProviders, history, intl, ocpProviders, providersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noAwsProviders = !this.isAwsAvailable() && providersFetchStatus === 2 /* FetchStatus.complete */;\n        const noAzureProviders = !this.isAzureAvailable() && providersFetchStatus === 2 /* FetchStatus.complete */;\n        const noGcpProviders = !this.isGcpAvailable() && providersFetchStatus === 2 /* FetchStatus.complete */;\n        const noIbmProviders = !this.isIbmAvailable() && providersFetchStatus === 2 /* FetchStatus.complete */;\n        const noOcpProviders = !this.isOcpAvailable() && providersFetchStatus === 2 /* FetchStatus.complete */;\n        const noOciProviders = !this.isOciAvailable() && providersFetchStatus === 2 /* FetchStatus.complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders && noOciProviders;\n        const isLoading = providersFetchStatus === 1 /* FetchStatus.inProgress */ || userAccessFetchStatus === 1 /* FetchStatus.inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = intl.formatMessage(messages.explorerTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(hasData(awsProviders) ||\n            hasData(azureProviders) ||\n            hasData(ociProviders) ||\n            hasData(gcpProviders) ||\n            hasData(ibmProviders) ||\n            hasData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { costType: costType, currency: currency, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onCostTypeSelected: value => handleCostTypeSelected(history, query, value), onCurrencySelected: value => handleCurrencySelected(history, query, value), onFilterAdded: filter => handleFilterAdded(history, query, filter), onFilterRemoved: filter => handleFilterRemoved(history, query, filter), onGroupBySelected: this.handleGroupBySelected, onPerspectiveClicked: this.handlePerspectiveClick, perspective: perspective }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { costType: costType, currency: currency, computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), perspective: perspective })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* FetchStatus.inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const awsProviders = filterProviders(providers, \"aws\" /* ProviderType.aws */);\n    const azureProviders = filterProviders(providers, \"azure\" /* ProviderType.azure */);\n    const ociProviders = filterProviders(providers, \"oci\" /* ProviderType.oci */);\n    const gcpProviders = filterProviders(providers, \"gcp\" /* ProviderType.gcp */);\n    const ibmProviders = filterProviders(providers, \"ibm\" /* ProviderType.ibm */);\n    const ocpProviders = filterProviders(providers, \"ocp\" /* ProviderType.ocp */);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    // Cost Report\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(dateRange);\n    const perspective = getPerspectiveDefault({\n        awsProviders,\n        azureProviders,\n        ociProviders,\n        gcpProviders,\n        ibmProviders,\n        ocpProviders,\n        queryFromRoute,\n        userAccess,\n    });\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const costType = perspective === \"aws\" /* PerspectiveType.aws */ ? getCostType() : undefined;\n    const currency = featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state) ? getCurrency() : undefined;\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        exclude: queryFromRoute.exclude || baseQuery.exclude,\n        group_by: groupBy,\n        order_by: queryFromRoute.order_by,\n        perspective,\n        dateRange,\n        cost_type: costType,\n        currency,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined, end_date,\n        start_date }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        awsProviders,\n        azureProviders,\n        costType,\n        currency,\n        dateRange,\n        gcpProviders,\n        ibmProviders,\n        ociProviders,\n        ocpProviders,\n        perspective,\n        providers,\n        providersError,\n        providersFetchStatus,\n        providersQueryString,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n"],"names":["getUserAccessQuery","query","stringify","encode","indices","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveSelectBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelectOptions","intl","options","props","selections","map","option","push","toString","formatMessage","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","variant","SelectVariant","SelectOption","key","event","onSelected","setState","render","Title","headingLevel","size","messages","PerspectiveSelect","injectIntl","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureOciOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","getInfrastructureOptions","hasAws","hasAwsOcp","hasAzure","hasAzureOcp","hasGcp","hasGcpOcp","hasIbm","hasIbmOcp","hasOci","isIbmFeatureEnabled","isOciFeatureEnabled","hasOcp","hasOcpCloud","isInfrastructureTab","undefined","getIdKeyForGroupBy","groupBy","account","cluster","gcp_project","node","org_unit_id","project","region","resource_location","service","service_name","subscription_guid","chartContainer","backgroundColor","global_BackgroundColor_light_100","global_spacer_lg","paddingRight","paddingBottom","paddingTop","chartContent","explorer","minHeight","paginationContainer","pagination","global_spacer_md","tableContainer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","padding","grid","stroke","ticks","yAxisAlt","tickLabels","fontSize","xAxis","CostExplorerChartBase","containerRef","observer","noop","hiddenSeries","Set","tickValues","width","initDatum","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","name","getTruncatedString","childName","data","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","units","getUnits","getTickValues","datum","getAdjustedContainerHeight","adjustContainerHeight","height","containerHeight","adjustedContainerHeight","getBarWidth","domainPadding","maxWidth","maxValue","forEach","s","index","sectionWidth","getChart","barWidth","has","y","ChartBar","formatter","formatOptions","CursorVoronoiContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","bottom","left","right","top","getDomain","domain","max","Math","getEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","handleLegendClick","getLegend","ChartLegend","gutter","responsive","val","values","x","modVal","i","str","substr","maxChars","getTickValue","t","handleResize","clientWidth","current","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","container","disable","labelComponent","ChartLegendTooltip","legendData","title","day","className","ref","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartTheme","ChartStack","ChartAxis","C","fixLabelOverlap","dependentAxis","tickFormat","global_spacer_2xl","chartSkeleton","global_spacer_3xl","costChart","global_spacer_sm","legendSkeleton","titleContainer","trendChart","usageChart","ExplorerChartBase","stateProps","dispatchProps","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","Date","date","xVal","getDate","month","getMonth","yVal","parseFloat","toFixed","_y","fetchReport","perspective","queryString","getChartDatums","computedItems","computedReportItemType","computedReportItemValueType","chartDatums","datums","Map","Array","from","padChartDatums","getComputedItems","report","idKey","getGroupBy","isDateMap","groupById","group_by","groupByOrg","getSkeleton","Skeleton","skeleton","items","end_date","start_date","result","newItems","padDate","setDate","format","chartDatum","reportError","reportFetchStatus","mapStateToProps","costType","currency","queryFromRoute","location","search","dateRange","filter","limit","offset","filter_by","exclude","cost_type","reportPathsType","reportType","mapDispatchToProps","ExplorerChartConnect","connect","ExplorerChart","DateRangeBase","onItemClicked","DateRange","toolbarContainer","orgReportType","tagReportType","ExplorerFilterBase","getCategoryOptions","orgReport","tagReport","getDefaultDateRange","getDateRangeComponent","currentDateRange","handleDateRangeClick","history","newQuery","JSON","parse","replace","fetchOrg","fetchTag","orgQueryString","orgReportPathsType","tagQueryString","tagReportPathsType","categoryOptions","onFilterAdded","onFilterRemoved","resourcePathsType","showFilter","orgReportFetchStatus","key_only","tagReportFetchStatus","ExplorerFilterConnect","ExplorerFilter","cost","costLabel","costValue","costLabelUnit","global_FontSize_sm","color","global_Color_100","costLabelDate","global_Color_200","paddingLeft","header","headerContent","justifyContent","headerContentRight","perspectiveContainer","ExplorerHeaderBase","getPerspective","currentPerspective","isAwsAvailable","isAzureAvailable","isOciAvailable","isGcpAvailable","isIbmAvailable","isOcpAvailable","isAwsOcpAvailable","isAzureOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","isOcpCloudAvailable","handlePerspectiveSelected","onPerspectiveClicked","order_by","awsProviders","userAccess","ocpProviders","azureProviders","gcpProviders","ibmProviders","ociProviders","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onCostTypeSelected","onCurrencySelected","onGroupBySelected","providersFetchStatus","noAwsProviders","noAzureProviders","noGcpProviders","noIbmProviders","noOcpProviders","noProviders","groupByOptions","TitleSizes","showOrgs","showTags","providersQueryString","providers","providersError","userAccessQueryString","userAccessError","userAccessFetchStatus","featureFlags","ExplorerHeader","emptyState","infoArrow","position","infoArrowDesc","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","overflowX","ExplorerTableBase","columns","rows","isAllSelected","selectedItems","groupByTagKey","cellTransforms","nowrap","count","orderBy","transforms","sortable","currentDate","mapId","isSortable","rowItem","get","set","mapIdDate","cells","desc","selectItem","sort","a","b","item","unshift","disableSelection","selected","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","sortBy","getEmptyState","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","getSortBy","direction","SortByDirection","keys","c","column","handleOnSelect","isSelected","rowId","row","handleOnSort","onSort","isSortAscending","bind","currentReport","previousReport","isLoading","Table","canSelectAll","TableHeader","TableBody","Boolean","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","showBulkSelect","showExport","ExplorerToolbarConnect","ExplorerToolbar","Explorer","isExportModalOpen","getExportModal","meta","isAllItems","onClose","handleExportModalClose","resolution","showTimeScope","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","perPage","onSetPage","pageNumber","titles","paginationTitle","placement","PaginationVariant","widgetId","getTable","handleSelected","sortType","getToolbar","handleBulkSelected","handleExportModalOpen","action","handleGroupBySelected","groupByKey","indexOf","slice","handlePerspectiveClick","updateReport","prevState","newPerspective","noReport","noLocation","noOciProviders"],"sourceRoot":""}