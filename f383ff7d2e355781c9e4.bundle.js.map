{"version":3,"sources":["webpack://koku-ui/./src/pages/views/details/gcpBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/gcpBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/gcpBreakdown/gcpBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/gcpBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedGcpReportItems.ts","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/gcpDetails/gcpDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/gcpDetails/gcpDetails.tsx","webpack://koku-ui/./src/pages/views/details/gcpDetails/index.ts"],"names":["mapStateToProps","state","props","selectWidgets","gcpCostOverview","widgets","CostOverview","injectIntl","connect","gcpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","account","instance_type","project","region","service","styles","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","display","justifyContent","padding","global_spacer_lg","backgroundColor","global_BackgroundColor_light_100","paddingBottom","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","render","onGroupByClicked","providersError","this","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","isDisabled","onItemClicked","options","showTags","Boolean","DetailsHeader","emptyState","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","constructor","super","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","basePath","toString","id","selectable","desc","push","cells","disableSelection","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","setState","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","tagReport","fetchTag","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showExport","showFilter","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","gcpDetails","minHeight","content","paginationContainer","marginLeft","marginRight","global_spacer_md","tableContainer","limit","offset","GcpDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","resetState","prevState","noReport","noLocation","reset","pathname","queryFromRoute","ui"],"mappings":"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","file":"f383ff7d2e355781c9e4.bundle.js","sourcesContent":["import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { gcpCostOverviewSelectors } from 'store/breakdown/costOverview/gcpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: gcpCostOverviewSelectors.selectWidgets(state),\n        widgets: gcpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { gcpHistoricalDataSelectors } from 'store/breakdown/historicalData/gcpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: gcpHistoricalDataSelectors.selectWidgets(state),\n        widgets: gcpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.gcpDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"gcp\" /* gcp */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, query: query, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.GCPDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"gcp\" /* gcp */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"gcp\" /* gcp */,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst GcpBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default GcpBreakdown;\n","import GcpBreakdown from './gcpBreakdown';\nexport default GcpBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport messages from 'locales/messages';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst tagReportPathsType = \"gcp\" /* gcp */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, intl } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.GCPDetailsTitle)),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString())))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './gcpDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/gcpQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport messages from 'locales/messages';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"gcp\" /* gcp */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.TagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: intl.formatMessage(messages.Cost),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: intl.formatMessage(messages.DetailsResourceNames, { value: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: intl.formatMessage(messages.Cost),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.gcpDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.Percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.GCPDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/gcpQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"gcp\" /* gcp */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'project' }), key: 'project' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"gcp\" /* gcp */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    gcpDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './gcpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"gcp\" /* gcp */;\nclass GcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.GCPDetailsTitle);\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empty data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"gcp\" /* gcp */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.gcpDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(GcpDetails));\n","import GcpDetails from './gcpDetails';\nexport default GcpDetails;\n"],"sourceRoot":""}