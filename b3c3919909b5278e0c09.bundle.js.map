{"version":3,"sources":["webpack:///./src/pages/dashboard/components/dashboardBase.tsx","webpack:///./node_modules/react-router-dom/es/Link.js","webpack:///./src/pages/dashboard/components/dashboardWidget.styles.ts","webpack:///./src/pages/dashboard/components/dashboardWidgetBase.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboard.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboard.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboard.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidget.styles.ts","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/perspective.styles.ts","webpack:///./src/pages/overview/perspective.tsx","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/pages/overview/index.ts"],"names":["DashboardBase","DashboardWidget","selectWidgets","widgets","react_default","a","createElement","Grid","gutter","map","widgetId","widget","Boolean","isHorizontal","GridItem","sm","key","lg","xl","xl2","_extends","Object","assign","target","i","arguments","length","source","prototype","hasOwnProperty","call","_possibleConstructorReturn","self","ReferenceError","isModifiedEvent","event","metaKey","altKey","ctrlKey","shiftKey","Link_Link","_React$Component","Link","_temp","_this","instance","Constructor","TypeError","_classCallCheck","this","_len","args","Array","_key","apply","concat","handleClick","props","onClick","defaultPrevented","button","preventDefault","history","context","router","_this$props","replace","to","push","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_inherits","render","_props","innerRef","obj","keys","indexOf","_objectWithoutProperties","browser_default","undefined","location","esm_history","href","createHref","ref","Component","propTypes","prop_types_default","func","string","bool","oneOfType","object","isRequired","defaultProps","contextTypes","shape","es_Link","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","styles","StyleSheet","tabs","marginTop","esm","tabItems","dashboardWidgetBase_DashboardWidgetBase","[object Object]","super","state","activeTabKey","buildDetailsLink","tab","detailsPath","getIdKeyForTab","currentTab","awsQuery","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","getCostChart","getTrendChart","getUsageChart","currentReport","previousReport","t","trend","units","getUnits","title","titleKey","currentInfrastructureData","chartUtils","type","previousInfrastructureData","currentUsageData","previousUsageData","reportSummary","currentCostData","currentInfrastructureCostData","formatDatumValue","formatValue","formatDatumOptions","formatOptions","previousCostData","previousInfrastructureCostData","details","currentData","comparison","previousData","showUsageLegendLabel","currentRequestData","previousRequestData","getDetails","isUsageFirst","perspective","costLabel","getDetailsLabel","costKey","report","requestLabel","requestKey","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","isDetailsLink","handleInsightsNavClick","getDetailsLinkTitle","groupBy","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","subTitle","getSubTitle","getTabs","getTitle","today","Date","month","get_month_default","endDate","format_default","startDate","start_of_month_default","count","get_date_default","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","getTabTitle","className","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","meta","total","usage","id","label","toString","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","appNavPath","insights","chrome","appNavClick","secondaryNav","tabIndex","updateTab","setState","fetchReports","awsCloudDashboardWidget_getIdKeyForTab","mapStateToProps","common","awsCloudDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","current","previousQuery","previous","tabsQuery","awsReports","selectReport","reportType","selectReportFetchStatus","mapDispatchToProps","fetchWidgetReports","changeWidgetTab","AwsCloudDashboardWidget","es","react_redux_es","awsCloudDashboard_mapStateToProps","selectCurrentWidgets","awsCloudDashboard_awsCloudDashboard","awsDashboardWidget_getIdKeyForTab","awsDashboardWidget_mapStateToProps","awsDashboard","awsDashboardWidget_mapDispatchToProps","AwsDashboardWidget","awsDashboard_mapStateToProps","awsDashboard_awsDashboard","azureCloudDashboardWidget_getIdKeyForTab","azureCloudDashboardWidget_mapStateToProps","azureCloudDashboard","azureReports","azureCloudDashboardWidget_mapDispatchToProps","AzureCloudDashboardWidget","azureCloudDashboard_mapStateToProps","azureCloudDashboard_azureCloudDashboard","azureDashboardWidget_getIdKeyForTab","azureDashboardWidget_mapStateToProps","azureDashboard","azureDashboardWidget_mapDispatchToProps","AzureDashboardWidget","azureDashboard_mapStateToProps","azureDashboard_azureDashboard","ocpCloudDashboardWidget_getIdKeyForTab","ocpCloudDashboardWidget_mapStateToProps","ocpCloudDashboard","ocpCloudReports","ocpCloudDashboardWidget_mapDispatchToProps","OcpCloudDashboardWidget","ocpCloudDashboard_mapStateToProps","ocpCloudDashboard_ocpCloudDashboard","ocpDashboardWidget_styles_chartStyles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpReports","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","ocpSupplementaryDashboardWidget_styles_chartStyles","ocpSupplementaryDashboardWidget_getIdKeyForTab","ocpSupplementaryDashboardWidget_mapStateToProps","ocpSupplementaryDashboard","ocpSupplementaryDashboardWidget_mapDispatchToProps","OcpSupplementaryDashboardWidget","ocpSupplementaryDashboard_mapStateToProps","ocpSupplementaryDashboard_ocpSupplementaryDashboard","ocpUsageDashboardWidget_getIdKeyForTab","ocpUsageDashboardWidget_mapStateToProps","ocpUsageDashboard","ocpUsageDashboardWidget_mapDispatchToProps","OcpUsageDashboardWidget","ocpUsageDashboard_mapStateToProps","ocpUsageDashboard_ocpUsageDashboard","overview_styles_styles","info","marginLeft","verticalAlign","infoIcon","fontSize","infoTitle","fontWeight","marginBottom","headerOverride","index_esm","perspective_styles_styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginRight","var","Perspective","defaultState","isPerspectiveOpen","getDropDownItems","options","option","DropdownItem","component","getCurrentLabel","currentItem","onItemClicked","handleSelect","handleToggle","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","overview_getIdKeyForTab","ocpOptions","infrastructureOptions","infrastructureAwsOptions","infrastructureAzureOptions","infrastructureOcpOptions","overview_mapStateToProps","awsProvidersQueryString","providersQuery","providers","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","azureProvidersQueryString","azureProviders","azureProvidersError","azureProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","overview","currentInfrastructurePerspective","currentOcpPerspective","showPopover","getAvailableTabs","isAwsAvailable","isAzureAvailable","isOcpAvailable","isOcpCloudAvailable","contentRef","createRef","getCurrentTab","getPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","val","TabContent","handlePopoverClick","show","error","isLoading","noAwsProviders","noAzureProviders","noOcpProviders","noProviders","showTabs","Fragment","Title","size","sizes","Popover","aria-label","enableFlip","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState","__webpack_exports__"],"mappings":"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","file":"b3c3919909b5278e0c09.bundle.js","sourcesContent":["import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport invariant from \"invariant\";\nimport { createLocation } from \"history\";\n\nvar isModifiedEvent = function isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n};\n\n/**\n * The public API for rendering a history-aware <a>.\n */\n\nvar Link = function (_React$Component) {\n  _inherits(Link, _React$Component);\n\n  function Link() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Link);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {\n      if (_this.props.onClick) _this.props.onClick(event);\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && // ignore everything but left clicks\n      !_this.props.target && // let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n\n          var history = _this.context.router.history;\n          var _this$props = _this.props,\n              replace = _this$props.replace,\n              to = _this$props.to;\n\n\n          if (replace) {\n            history.replace(to);\n          } else {\n            history.push(to);\n          }\n        }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Link.prototype.render = function render() {\n    var _props = this.props,\n        replace = _props.replace,\n        to = _props.to,\n        innerRef = _props.innerRef,\n        props = _objectWithoutProperties(_props, [\"replace\", \"to\", \"innerRef\"]); // eslint-disable-line no-unused-vars\n\n    invariant(this.context.router, \"You should not use <Link> outside a <Router>\");\n\n    invariant(to !== undefined, 'You must specify the \"to\" property');\n\n    var history = this.context.router.history;\n\n    var location = typeof to === \"string\" ? createLocation(to, null, null, history.location) : to;\n\n    var href = history.createHref(location);\n    return React.createElement(\"a\", _extends({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));\n  };\n\n  return Link;\n}(React.Component);\n\nLink.propTypes = {\n  onClick: PropTypes.func,\n  target: PropTypes.string,\n  replace: PropTypes.bool,\n  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  innerRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func])\n};\nLink.defaultProps = {\n  replace: false\n};\nLink.contextTypes = {\n  router: PropTypes.shape({\n    history: PropTypes.shape({\n      push: PropTypes.func.isRequired,\n      replace: PropTypes.func.isRequired,\n      createHref: PropTypes.func.isRequired\n    }).isRequired\n  }).isRequired\n};\n\n\nexport default Link;","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformReport, } from 'components/charts/common/chartUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { detailsPath, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${detailsPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType } = this.props;\n            if (chartType === \"cost\" /* cost */) {\n                return this.getCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height);\n            }\n            else {\n                return null;\n            }\n        };\n        this.getCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, trend.type, 'date', 'infrastructureCost');\n            const previousInfrastructureData = transformReport(previousReport, trend.type, 'date', 'infrastructureCost');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'cost');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'cost');\n            return (React.createElement(ReportSummaryCost, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title }));\n        };\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Data\n            const currentData = transformReport(currentReport, trend.type, 'date', trend.comparison);\n            const previousData = transformReport(previousReport, trend.type, 'date', trend.comparison);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: units }));\n        };\n        this.getUsageChart = (height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, isUsageFirst, perspective, } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, perspective: perspective, report: currentReport, requestLabel: this.getDetailsLabel(details.requestKey, units), showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, true)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('aws_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, getIdKeyForTab, tabsReport, topItems, trend, } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (trend.comparison === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && tabsReport.meta.total.usage;\n                totalValue = hasUsage ? tabsReport.meta.total.usage.value : undefined;\n            }\n            else {\n                const hasCost = hasTotal && tabsReport.meta.total.cost;\n                totalValue = hasCost ? tabsReport.meta.total.cost.value : undefined;\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: details.units ? details.units : reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            if (details.units) {\n                return details.units;\n            }\n            let units;\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (trend.comparison === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                units = hasUsage\n                    ? unitLookupKey(currentReport.meta.total.usage.units)\n                    : '';\n            }\n            else {\n                const hasCost = hasTotal && currentReport.meta.total.cost;\n                units = hasCost ? unitLookupKey(currentReport.meta.total.cost.units) : '';\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            const { appNavPath } = this.props;\n            insights.chrome.appNavClick({ id: appNavPath, secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardActions, awsCloudDashboardSelectors, } from 'store/dashboard/awsCloudDashboard';\nimport { awsReportsSelectors } from 'store/reports/awsReports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, appNavPath: 'aws', detailsPath: '/aws-cloud', currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsCloudDashboardActions.fetchWidgetReports,\n    updateTab: awsCloudDashboardActions.changeWidgetTab,\n};\nconst AwsCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardSelectors } from 'store/dashboard/awsCloudDashboard';\nimport { AwsCloudDashboardWidget } from './awsCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AwsCloudDashboardWidget,\n        selectWidgets: awsCloudDashboardSelectors.selectWidgets(state),\n        widgets: awsCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsCloudDashboard;\n","import { DashboardWidgetBase } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/dashboard/awsDashboard';\nimport { awsReportsSelectors } from 'store/reports/awsReports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, appNavPath: 'aws', detailsPath: '/aws', currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsDashboard;\n","import { DashboardWidgetBase } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardActions, azureCloudDashboardSelectors, } from 'store/dashboard/azureCloudDashboard';\nimport { azureReportsSelectors } from 'store/reports/azureReports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, appNavPath: 'azure', detailsPath: '/azure-cloud', currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureCloudDashboardActions.fetchWidgetReports,\n    updateTab: azureCloudDashboardActions.changeWidgetTab,\n};\nconst AzureCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardSelectors } from 'store/dashboard/azureCloudDashboard';\nimport { AzureCloudDashboardWidget } from './azureCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AzureCloudDashboardWidget,\n        selectWidgets: azureCloudDashboardSelectors.selectWidgets(state),\n        widgets: azureCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureCloudDashboard;\n","import { DashboardWidgetBase } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, } from 'store/dashboard/azureDashboard';\nimport { azureReportsSelectors } from 'store/reports/azureReports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, appNavPath: 'azure', detailsPath: '/azure', currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureDashboard;\n","import { DashboardWidgetBase } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { ocpCloudReportsSelectors } from 'store/reports/ocpCloudReports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, appNavPath: 'ocp-cloud', detailsPath: '/ocp-cloud', currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 180,\n    containerAltHeight: 275,\n};\n","import { DashboardWidgetBase } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/dashboard/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/reports/ocpReports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, appNavPath: 'ocp-cloud', detailsPath: '/ocp-cloud', chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpDashboard;\n","export const chartStyles = {\n    chartAltHeight: 180,\n    containerAltHeight: 275,\n};\n","import { DashboardWidgetBase } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardActions, ocpSupplementaryDashboardSelectors, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { ocpReportsSelectors } from 'store/reports/ocpReports';\nimport { chartStyles } from './ocpSupplementaryDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpSupplementaryDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpSupplementaryDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, appNavPath: 'ocp-supplementary', detailsPath: '/ocp-supplementary', chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpSupplementaryDashboardActions.fetchWidgetReports,\n    updateTab: ocpSupplementaryDashboardActions.changeWidgetTab,\n};\nconst OcpSupplementaryDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpSupplementaryDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardSelectors } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { OcpSupplementaryDashboardWidget } from './ocpSupplementaryDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpSupplementaryDashboardWidget,\n        selectWidgets: ocpSupplementaryDashboardSelectors.selectWidgets(state),\n        widgets: ocpSupplementaryDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpSupplementaryDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpSupplementaryDashboard;\n","import { DashboardWidgetBase } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardActions, ocpUsageDashboardSelectors, } from 'store/dashboard/ocpUsageDashboard';\nimport { ocpCloudReportsSelectors } from 'store/reports/ocpCloudReports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpUsageDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpUsageDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, appNavPath: 'ocp-usage', detailsPath: '/ocp-usage', currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpUsageDashboardActions.fetchWidgetReports,\n    updateTab: ocpUsageDashboardActions.changeWidgetTab,\n};\nconst OcpUsageDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpUsageDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardSelectors } from 'store/dashboard/ocpUsageDashboard';\nimport { OcpUsageDashboardWidget } from './ocpUsageDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpUsageDashboardWidget,\n        selectWidgets: ocpUsageDashboardSelectors.selectWidgets(state),\n        widgets: ocpUsageDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpUsageDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpUsageDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    perspective: {\n        marginBottom: global_spacer_lg.value,\n        marginTop: global_spacer_lg.value,\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n});\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = event => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { className: css(styles.perspectiveSelector) },\n            React.createElement(\"label\", { className: css(styles.perspectiveLabel) }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = translate()(PerspectiveBase);\nexport { Perspective };\n","import { Popover, Tab, TabContent, Tabs, Title, TitleSize, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsCloudDashboard from 'pages/dashboard/awsCloudDashboard/awsCloudDashboard';\nimport AwsDashboard from 'pages/dashboard/awsDashboard/awsDashboard';\nimport AzureCloudDashboard from 'pages/dashboard/azureCloudDashboard/azureCloudDashboard';\nimport AzureDashboard from 'pages/dashboard/azureDashboard/azureDashboard';\nimport OcpCloudDashboard from 'pages/dashboard/ocpCloudDashboard/ocpCloudDashboard';\nimport OcpDashboard from 'pages/dashboard/ocpDashboard/ocpDashboard';\nimport OcpSupplementaryDashboard from 'pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard';\nimport OcpUsageDashboard from 'pages/dashboard/ocpUsageDashboard/ocpUsageDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { headerOverride, styles } from './overview.styles';\nimport { Perspective } from './perspective';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [\n    { label: 'overview.perspective.all', value: 'all' },\n    { label: 'overview.perspective.supplementary', value: 'supplementary' },\n];\n// Infrastructure options\nconst infrastructureOptions = [\n    { label: 'overview.perspective.all_cloud', value: 'all_cloud' },\n];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [\n    { label: 'overview.perspective.aws', value: 'aws' },\n    { label: 'overview.perspective.aws_cloud', value: 'aws_cloud' },\n];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [\n    { label: 'overview.perspective.azure', value: 'azure' },\n    { label: 'overview.perspective.azure_cloud', value: 'azure_cloud' },\n];\n// Infrastructure Ocp options\nconst infrastructureOcpOptions = [\n    { label: 'overview.perspective.ocp_usage', value: 'ocp_usage' },\n];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n            currentInfrastructurePerspective: infrastructureOptions[0].value,\n            currentOcpPerspective: ocpOptions[0].value,\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { awsProviders, azureProviders, ocpProviders } = this.props;\n            const availableTabs = [];\n            const isAwsAvailable = awsProviders && awsProviders.meta && awsProviders.meta.count;\n            const isAzureAvailable = azureProviders && azureProviders.meta && azureProviders.meta.count;\n            const isOcpAvailable = ocpProviders && ocpProviders.meta && ocpProviders.meta.count;\n            const isOcpCloudAvailable = isOcpAvailable && isAwsAvailable;\n            if (isOcpAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (isAwsAvailable || isAzureAvailable || isOcpCloudAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n        };\n        this.getPerspective = () => {\n            const { awsProviders, azureProviders, ocpProviders } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective, } = this.state;\n            let currentItem = currentOcpPerspective;\n            let options = [...ocpOptions];\n            // Dynamically show options if providers are available\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                const isAwsAvailable = awsProviders && awsProviders.meta && awsProviders.meta.count;\n                const isAzureAvailable = azureProviders && azureProviders.meta && azureProviders.meta.count;\n                const isOcpAvailable = ocpProviders && ocpProviders.meta && ocpProviders.meta.count;\n                currentItem = currentInfrastructurePerspective;\n                options = [\n                    ...infrastructureOptions,\n                    ...(isAwsAvailable && infrastructureAwsOptions),\n                    ...(isAzureAvailable && infrastructureAzureOptions),\n                    ...(isOcpAvailable && infrastructureOcpOptions),\n                ];\n            }\n            return (React.createElement(Perspective, { currentItem: currentItem, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: this.getTabTitle(tab) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective, } = this.state;\n            if (activeTabKey !== index) {\n                return null;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"all_cloud\" /* allCloud */) {\n                    return React.createElement(OcpCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    return React.createElement(AwsDashboard, null);\n                }\n                else if (currentInfrastructurePerspective ===\n                    \"aws_cloud\" /* awsFiltered */) {\n                    return React.createElement(AwsCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    return React.createElement(AzureDashboard, null);\n                }\n                else if (currentInfrastructurePerspective ===\n                    \"azure_cloud\" /* azureCloud */) {\n                    return React.createElement(AzureCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"ocp_usage\" /* ocpUsage */) {\n                    return React.createElement(OcpUsageDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpCloudDashboard, null); // default\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                if (currentOcpPerspective === \"all\" /* all */) {\n                    return React.createElement(OcpDashboard, null);\n                }\n                else if (currentOcpPerspective === \"supplementary\" /* supplementary */) {\n                    return React.createElement(OcpSupplementaryDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpDashboard, null); // default\n                }\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return t('overview.infrastructure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            }), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    render() {\n        const { awsProviders, awsProvidersError, awsProvidersFetchStatus, azureProviders, azureProvidersError, azureProvidersFetchStatus, ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || azureProvidersError || ocpProvidersError;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = awsProviders !== undefined &&\n            awsProviders.meta !== undefined &&\n            awsProviders.meta.count === 0 &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = azureProviders !== undefined &&\n            azureProviders.meta !== undefined &&\n            azureProviders.meta.count === 0 &&\n            azureProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = ocpProviders !== undefined &&\n            ocpProviders.meta !== undefined &&\n            ocpProviders.meta.count === 0 &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { size: TitleSize['2xl'] },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))))),\n                Boolean(showTabs) && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs(availableTabs)),\n                    React.createElement(\"div\", { className: css(styles.perspective) }, this.getPerspective())))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersError,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n"],"sourceRoot":""}