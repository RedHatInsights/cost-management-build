{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/components/state/loadingState/loadingState.tsx","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardBase.tsx","webpack://koku-ui/./src/pages/views/overview/components/chartComparison.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidgetBase.tsx","webpack://koku-ui/./src/pages/views/overview/awsCloudDashboard/awsCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsCloudDashboard/awsCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureCloudDashboard/azureCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureCloudDashboard/azureCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpInfrastructureDashboard/ocpInfrastructureDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpInfrastructureDashboard/ocpInfrastructureDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpInfrastructureDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpSupplementaryDashboard/ocpSupplementaryDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpSupplementaryDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpUsageDashboard/ocpUsageDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpUsageDashboard/ocpUsageDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpUsageDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/overview.styles.ts","webpack://koku-ui/./src/pages/views/overview/overview.tsx","webpack://koku-ui/./src/pages/views/overview/index.ts","webpack://koku-ui/./src/utils/formatValue.ts","webpack://koku-ui/./src/utils/userAccess.ts"],"names":["getUserAccessQuery","query","stringify","encode","indices","LoadingState","t","title","subTitle","EmptyState","variant","EmptyStateVariant","className","Spinner","size","Title","headingLevel","EmptyStateBody","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","PerspectiveBase","super","arguments","this","defaultState","isPerspectiveOpen","state","Object","assign","getDropDownItems","options","props","map","option","DropdownItem","component","key","value","onClick","handleClick","label","getCurrentLabel","currentItem","onItemClicked","handleSelect","setState","handleToggle","isDisabled","dropdownItems","style","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","Perspective","withTranslation","DashboardBase","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","isChartComparisonOpen","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","tabs","marginTop","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showInfrastructureLabel","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","currentInfrastructureData","previousInfrastructureData","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","forecastInfrastructureData","computedForecastInfrastructureItem","ReportSummaryComponent","currentInfrastructureCostData","forecastConeData","forecastInfrastructureConeData","formatDatumValue","formatValue","formatDatumOptions","formatOptions","previousInfrastructureCostData","showForecast","undefined","currentData","previousData","showUsageLegendLabel","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","length","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","push","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","Link","to","handleInsightsNavClick","getDetailsLinkTitle","groupBy","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getSubTitle","getTabs","getTitle","today","month","endDate","format","startDate","startOfMonth","count","getDate","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","id","toString","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","appNavId","insights","chrome","appNavClick","secondaryNav","event","tabIndex","updateTab","fetchForecasts","fetchReports","mapStateToProps","widget","awsCloudDashboard","queries","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsCloudDashboardWidget","connect","awsDashboard","AwsDashboardWidget","azureCloudDashboard","AzureCloudDashboardWidget","azureDashboard","AzureDashboardWidget","gcpDashboard","GcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","ocpInfrastructureDashboard","OcpInfrastructureDashboardWidget","ocpSupplementaryDashboard","OcpSupplementaryDashboardWidget","ocpUsageDashboard","OcpUsageDashboardWidget","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","perspective","global_spacer_lg","ocpOptions","infrastructureAwsOptions","infrastructureAwsCloudOptions","infrastructureAzureOptions","infrastructureAzureCloudOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpOptions","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOcpCloudAvailable","getCurrentTab","aws","azure","gcp","ibm","ocp","ocpCloud","getDefaultInfrastructurePerspective","getDefaultOcpPerspective","ocpProviders","ocpProvidersFetchStatus","userAccess","getPerspective","currentInfrastructurePerspective","currentOcpPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","awsProvidersFetchStatus","azureProvidersFetchStatus","gcpProvidersFetchStatus","ibmProvidersFetchStatus","ibmUserAccess","prevProps","userAccessFetchStatus","isLoading","noAwsProviders","noAzureProviders","noGcpProviders","noIbmProviders","noOcpProviders","noProviders","Popover","enableFlip","bodyContent","Button","ButtonVariant","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","userAccessQueryString","userAccessError","ibmUserAccessQueryString","ibmUserAccessError","ibmUserAccessFetchStatus","unitLookupKey","unit","lookup","toLowerCase","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","currency","formatCurrencyAbbreviation","abbreviationFormats","symbol","find","f","parts","match","hasAccess","userAccessType","result","Array","isArray","d","access","hasProviders","providers","providersFetchStatus","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","gcpsProvidersFetchStatus","hasIbmAccess","hasOcpAccess"],"mappings":"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","file":"3752e702d18925d9a65e.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nconst LoadingStateBase = ({ t }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n        React.createElement(Spinner, { size: \"lg\" }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, title),\n        React.createElement(EmptyStateBody, null, subTitle)));\n};\nconst LoadingState = withTranslation()(LoadingStateBase);\nexport { LoadingState };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled, t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = withTranslation()(PerspectiveBase);\nexport { Perspective };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isChartComparisonOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isChartComparisonOpen: !this.state.isChartComparisonOpen,\n            });\n        };\n        this.handleToggle = isChartComparisonOpen => {\n            this.setState({\n                isChartComparisonOpen,\n            });\n        };\n    }\n    render() {\n        // const { t } = this.props;\n        const { isChartComparisonOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isChartComparisonOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst ChartComparison = withTranslation()(ChartComparisonBase);\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformForecast, transformForecastCone, transformReport, } from 'components/charts/common/chartDatumUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport { format, getDate, getMonth, startOfMonth } from 'date-fns';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        this.getChartComparison = () => {\n            const { t, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getUnits();\n            const cumulativeTitle = t(trend.titleKey, { units: t(`units.${units}`) });\n            const dailyTitle = t(trend.dailyTitleKey, { units: t(`units.${units}`) });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* cumulative */ },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, type, 'date', 'infrastructure', computedReportItemValue);\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const forecastInfrastructureData = this.getForecastData(currentReport, trend.computedForecastInfrastructureItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, forecastInfrastructureConeData: forecastInfrastructureData.forecastConeData, forecastInfrastructureData: forecastInfrastructureData.forecastData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getUnits();\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: units })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === 0 /* rolling */) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units: 'USD',\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units: 'USD',\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units: 'USD',\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            // Cost data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: units }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            const units = this.getUnits();\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: details.units, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab)));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = format(today, 'd');\n            const startDate = format(startOfMonth(today), 'd');\n            return t('dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: details.units ? details.units : this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = format(today, 'Do');\n            const startDate = format(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            let units;\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                units = hasUsage ? unitLookupKey(currentReport.meta.total.usage.units) : '';\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                units = hasCost ? unitLookupKey(currentReport.meta.total[computedReportItem][computedReportItemValue].units) : '';\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleInsightsNavClick = () => {\n            const { details } = this.props;\n            if (details.appNavId) {\n                insights.chrome.appNavClick({\n                    id: details.appNavId,\n                    secondaryNav: true,\n                });\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardActions, awsCloudDashboardSelectors, } from 'store/dashboard/awsCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsCloudDashboardActions.fetchWidgetReports,\n    updateTab: awsCloudDashboardActions.changeWidgetTab,\n};\nconst AwsCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardSelectors } from 'store/dashboard/awsCloudDashboard';\nimport { AwsCloudDashboardWidget } from './awsCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsCloudDashboardWidget,\n        selectWidgets: awsCloudDashboardSelectors.selectWidgets(state),\n        widgets: awsCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsCloudDashboard;\n","import AwsCloudDashboard from './awsCloudDashboard';\nexport default AwsCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsDashboard;\n","import AwsDashboard from './awsDashboard';\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardActions, azureCloudDashboardSelectors, } from 'store/dashboard/azureCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureCloudDashboardActions.fetchWidgetReports,\n    updateTab: azureCloudDashboardActions.changeWidgetTab,\n};\nconst AzureCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardSelectors } from 'store/dashboard/azureCloudDashboard';\nimport { AzureCloudDashboardWidget } from './azureCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureCloudDashboardWidget,\n        selectWidgets: azureCloudDashboardSelectors.selectWidgets(state),\n        widgets: azureCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureCloudDashboard;\n","import AzureCloudDashboard from './azureCloudDashboard';\nexport default AzureCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureDashboard;\n","import AzureDashboard from './azureDashboard';\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default GcpDashboard;\n","import GcpDashboard from './gcpDashboard';\nexport default GcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default IbmDashboard;\n","import IbmDashboard from './ibmDashboard';\nexport default IbmDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpCloudDashboard;\n","import OcpCloudDashboard from './ocpCloudDashboard';\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpDashboard;\n","import OcpDashboard from './ocpDashboard';\nexport default OcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpInfrastructureDashboardActions, ocpInfrastructureDashboardSelectors, } from 'store/dashboard/ocpInfrastructureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpInfrastructureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpInfrastructureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpInfrastructureDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpInfrastructureDashboardActions.fetchWidgetReports,\n    updateTab: ocpInfrastructureDashboardActions.changeWidgetTab,\n};\nconst OcpInfrastructureDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpInfrastructureDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardSelectors } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { OcpInfrastructureDashboardWidget } from './ocpInfrastructureDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpInfrastructureDashboardWidget,\n        selectWidgets: ocpSupplementaryDashboardSelectors.selectWidgets(state),\n        widgets: ocpSupplementaryDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpInfrastructureDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpInfrastructureDashboard;\n","import OcpInfrastructureDashboard from './ocpInfrastructureDashboard';\nexport default OcpInfrastructureDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardActions, ocpSupplementaryDashboardSelectors, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpSupplementaryDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpSupplementaryDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpSupplementaryDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpSupplementaryDashboardActions.fetchWidgetReports,\n    updateTab: ocpSupplementaryDashboardActions.changeWidgetTab,\n};\nconst OcpSupplementaryDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpSupplementaryDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardSelectors } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { OcpSupplementaryDashboardWidget } from './ocpSupplementaryDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpSupplementaryDashboardWidget,\n        selectWidgets: ocpSupplementaryDashboardSelectors.selectWidgets(state),\n        widgets: ocpSupplementaryDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpSupplementaryDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpSupplementaryDashboard;\n","import OcpSupplementaryDashboard from './ocpSupplementaryDashboard';\nexport default OcpSupplementaryDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardActions, ocpUsageDashboardSelectors, } from 'store/dashboard/ocpUsageDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpUsageDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpUsageDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpUsageDashboardActions.fetchWidgetReports,\n    updateTab: ocpUsageDashboardActions.changeWidgetTab,\n};\nconst OcpUsageDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpUsageDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardSelectors } from 'store/dashboard/ocpUsageDashboard';\nimport { OcpUsageDashboardWidget } from './ocpUsageDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpUsageDashboardWidget,\n        selectWidgets: ocpUsageDashboardSelectors.selectWidgets(state),\n        widgets: ocpUsageDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpUsageDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpUsageDashboard;\n","import OcpUsageDashboard from './ocpUsageDashboard';\nexport default OcpUsageDashboard;\n","import global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    perspective: {\n        marginTop: global_spacer_lg.value,\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport AwsCloudDashboard from 'pages/views/overview/awsCloudDashboard';\nimport AwsDashboard from 'pages/views/overview/awsDashboard';\nimport AzureCloudDashboard from 'pages/views/overview/azureCloudDashboard';\nimport AzureDashboard from 'pages/views/overview/azureDashboard';\nimport GcpDashboard from 'pages/views/overview/gcpDashboard';\nimport IbmDashboard from 'pages/views/overview/ibmDashboard';\nimport OcpCloudDashboard from 'pages/views/overview/ocpCloudDashboard';\nimport OcpDashboard from 'pages/views/overview/ocpDashboard';\nimport OcpInfrastructureDashboard from 'pages/views/overview/ocpInfrastructureDashboard';\nimport OcpSupplementaryDashboard from 'pages/views/overview/ocpSupplementaryDashboard';\nimport OcpUsageDashboard from 'pages/views/overview/ocpUsageDashboard';\nimport { hasCurrentMonthData, hasPreviousMonthData } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [\n    { label: 'overview.perspective.ocp_all', value: 'all' },\n    { label: 'overview.perspective.ocp_infrastructure', value: 'infrastructure' },\n    { label: 'overview.perspective.ocp_supplementary', value: 'supplementary' },\n];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: 'overview.perspective.aws', value: 'aws' }];\n// Infrastructure AWS cloud options\nconst infrastructureAwsCloudOptions = [{ label: 'overview.perspective.aws_cloud', value: 'aws_cloud' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: 'overview.perspective.azure', value: 'azure' }];\n// Infrastructure Azure cloud options\nconst infrastructureAzureCloudOptions = [{ label: 'overview.perspective.azure_cloud', value: 'azure_cloud' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: 'overview.perspective.gcp', value: 'gcp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: 'overview.perspective.ibm', value: 'ibm' }];\n// Infrastructure Ocp options\nconst infrastructureOcpOptions = [{ label: 'overview.perspective.ocp_usage', value: 'ocp_usage' }];\n// Infrastructure Ocp cloud options\n//\n// Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\n//\n// const infrastructureOcpCloudOptions = [{ label: 'overview.perspective.ocp_cloud', value: 'ocp_cloud' }];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            const ocpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = ocp && !(aws || azure || gcp || ibm || ocpCloud);\n            const showInfrastructureOnly = !ocp && (aws || azure || gcp || ibm || ocpCloud);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\n            //\n            // if (this.isOcpAvailable()) {\n            //   return InfrastructurePerspective.ocpCloud;\n            // }\n            if (this.isAwsAvailable()) {\n                return \"aws\" /* aws */;\n            }\n            if (this.isAzureAvailable()) {\n                return \"azure\" /* azure */;\n            }\n            if (this.isGcpAvailable()) {\n                return \"gcp\" /* gcp */;\n            }\n            if (this.isIbmAvailable()) {\n                return \"ibm\" /* ibm */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            if (isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus)) {\n                return \"all\" /* all */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            if (!(aws || azure || gcp || ibm || ocp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\n                //\n                // if (ocp) {\n                //   options.push(...infrastructureOcpCloudOptions);\n                // }\n                if (aws) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (ocp && aws) {\n                    options.push(...infrastructureAwsCloudOptions);\n                }\n                if (gcp) {\n                    options.push(...infrastructureGcpOptions);\n                }\n                if (ibm) {\n                    options.push(...infrastructureIbmOptions);\n                }\n                if (azure) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (ocp && azure) {\n                    options.push(...infrastructureAzureCloudOptions);\n                }\n                if (ocp) {\n                    options.push(...infrastructureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"ocp_cloud\" /* ocpCloud */) {\n                    const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_cloud\" /* awsCloud */) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* gcp */) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ibm\" /* ibm */) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_cloud\" /* azureCloud */) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ocp_usage\" /* ocpUsage */) {\n                    const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                    return hasData ? React.createElement(OcpUsageDashboard, null) : noData;\n                }\n                else {\n                    const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, null) : noData; // default\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === \"all\" /* all */) {\n                    return hasData ? React.createElement(OcpDashboard, null) : noData;\n                }\n                else if (currentOcpPerspective === \"infrastructure\" /* infrastructure */) {\n                    return hasData ? React.createElement(OcpInfrastructureDashboard, null) : noData;\n                }\n                else if (currentOcpPerspective === \"supplementary\" /* supplementary */) {\n                    return hasData ? React.createElement(OcpSupplementaryDashboard, null) : noData;\n                }\n                else {\n                    return hasData ? React.createElement(OcpDashboard, null) : noData; // default\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return t('overview.infrastructure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, awsProvidersFetchStatus, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, azureProvidersFetchStatus, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, gcpProvidersFetchStatus, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, ibmProvidersFetchStatus, ibmUserAccess } = this.props;\n            return isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus);\n        };\n        this.isOcpCloudAvailable = () => {\n            return this.isAwsAvailable() && this.isOcpAvailable();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, userAccess } = this.props;\n        // Note: User access and providers are fetched via the Permissions and InactiveSources components used by all routes\n        if (prevProps.userAccess !== userAccess ||\n            prevProps.awsProviders !== awsProviders ||\n            prevProps.azureProviders !== azureProviders ||\n            prevProps.gcpProviders !== gcpProviders ||\n            prevProps.ibmProviders !== ibmProviders ||\n            prevProps.ocpProviders !== ocpProviders) {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ibmProvidersFetchStatus, ocpProvidersFetchStatus, userAccessFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */;\n        // Test for no providers\n        const noAwsProviders = !this.isAwsAvailable() && awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && azureProvidersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && gcpProvidersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && ibmProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const title = t('cost_management_overview');\n        if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light headerOverride}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { headingLevel: \"h2\", size: \"2xl\" },\n                        t('cost_management_overview'),\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.gcp')),\n                                    React.createElement(\"p\", null, t('overview.gcp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ibm')),\n                                    React.createElement(\"p\", null, t('overview.ibm_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null)))))),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.perspective }, this.getPerspective())),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst Overview = withTranslation()(connect(mapStateToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n","import i18next from 'i18next';\nexport const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'gibibyte month':\n        case 'core-hours':\n        case 'hour':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'gibibyte month':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hour':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrencyAbbreviation = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Derived from https://stackoverflow.com/questions/37799955/how-can-i-format-big-numbers-with-tolocalestring\n    const abbreviationFormats = [\n        { val: 1e15, symbol: 'currency_abbreviations.quadrillion' },\n        { val: 1e12, symbol: 'currency_abbreviations.trillion' },\n        { val: 1e9, symbol: 'currency_abbreviations.billion' },\n        { val: 1e6, symbol: 'currency_abbreviations.million' },\n        { val: 1e3, symbol: 'currency_abbreviations.thousand' },\n    ];\n    // Find the proper format to use\n    let format;\n    if (abbreviationFormats != null) {\n        format = abbreviationFormats.find(f => fValue >= f.val);\n    }\n    // Apply format and insert symbol next to the numeric portion of the formatted string\n    if (format != null) {\n        const { val, symbol } = format;\n        const formatted = (fValue / val).toLocaleString('en', {\n            style: 'currency',\n            currency: unit || 'USD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: fractionDigits,\n        });\n        const parts = formatted.match(/([\\D]*)([\\d.,]+)([\\D]*)/);\n        return `${parts[1]}${parts[2]}${i18next.t(symbol)}${parts[3]}`;\n    }\n    // If no format was found, format value without abbreviation\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers, providersFetchStatus) => {\n    let result = false;\n    if (providersFetchStatus === 2 /* complete */) {\n        // providers API returns empty data array for no sources\n        result = providers !== undefined && providers.meta !== undefined && providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders, awsProvidersFetchStatus) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders, awsProvidersFetchStatus);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders, azureProvidersFetchStatus) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders, azureProvidersFetchStatus);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders, gcpsProvidersFetchStatus) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders, gcpsProvidersFetchStatus);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders, ibmProvidersFetchStatus) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders, ibmProvidersFetchStatus);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders, ocpProvidersFetchStatus) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders, ocpProvidersFetchStatus);\n};\n"],"sourceRoot":""}