{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartLabelTooltip/chartLabelTooltip.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpOnAwsReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummary.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummary.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItem.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItems.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryUsage.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/pages/awsDashboard/awsDashboardWidget.styles.ts","webpack:///./src/pages/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboardWidget.styles.ts","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboardWidget.tsx","webpack:///./src/pages/ocpOnAwsDashboard/ocpOnAwsDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/pages/overview/index.ts"],"names":["unitLookupKey","unit","toLowerCase","formatValue","value","options","lookup","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","check_box_3","check_box_4","check_box_5","check_box_all","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","Object","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_9__","transformOcpOnAwsReport","utils_getComputedOcpOnAwsReportItems__WEBPACK_IMPORTED_MODULE_8__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getDateRangeString","i18next__WEBPACK_IMPORTED_MODULE_5__","t","count","endDate","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getMonthRangeString","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","getTooltipLabel","formatOptions","toString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","__webpack_exports__","__rest","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","ChartLabelTooltip","_a","content","props","react_default","createElement","Tooltip","enableFlip","ChartLabel","assign","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpOnAwsReportItems","getUnsortedComputedOcpOnAwsReportItems","account_alias","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","instance_type","region","service","styles","StyleSheet","create","container","fontSize","esm","EmptyValueState","className","minus_icon","display","justifyContent","height","marginTop","ErrorState","es","error","icon","error_circle_o_icon","title","subTitle","response","status","ban_icon","EmptyState","EmptyStateIcon","Title","size","EmptyStateBody","LoadingState","binoculars_icon","viewSources","mapStateToProps","common","state","NoProvidersState","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","Link","to","dollar_sign_icon","chartStyles","currentRequestData","fill","stroke","strokeDasharray","currentUsageData","legend","labels","fontFamily","minWidth","previousRequestData","previousUsageData","currentColorScale","previousColorScale","tooltip","flyoutStyle","strokeWidth","padding","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","minHeight","width","legendTitle","marginBottom","usageChart_UsageChart","containerRef","createRef","initDatum","previousLegendData","chartUtils","push","symbol","previous","charts","show","colorScale","onClick","handlePreviousLegendClick","currentLegendData","current","gutter","handleCurrentLegendClick","setState","newDatum","index","handleResize","clientWidth","getChart","ChartArea","getLegend","ChartLegend","events","target","eventHandlers","mutation","itemsPerRow","labelComponent","chartLabelTooltip","getLegendTooltip","formatDatumValue","formatDatumOptions","childName","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","maxValue","Math","ceil","currentRequestDate","get_date_default","currentUsageDate","previousRequestDate","previousUsageDate","result","trim","ChartVoronoiContainer","ChartTooltip","pointerWidth","voronoiDimension","legendWidth","getDomain","getEndDate","midDate","floor","ref","Chart","containerComponent","Boolean","chart","ChartAxis","tickValues","dependentAxis","isPreviousLegendVisible","isCurrentLegendVisible","previousMonth","currentMonth","trendChart_TrendChart","currentData","previousData","legendData","handleCostLegendClick","orientation","maxCurrent","maxPrevious","previousDate","currentDate","isLegendVisible","chartSkeleton","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitleTooltip","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","marginRight","valueContainer","AwsReportSummaryDetails","costLabel","reportType","showUnits","usageLabel","emptyValueState","meta","total","usageUnits","unitsLabel","utils_formatValue","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","undefined","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","OcpOnAwsReportSummary","ocpOnAwsReportSummaryAlt_styles_styles","OcpOnAwsReportSummaryAlt","ocpOnAwsReportSummaryDetails_styles_styles","marginLeft","titleContainer","usageText","usageValue","OcpOnAwsReportSummaryDetails","requestLabel","awsReportType","ocpOnAwsReportSummaryItem_styles_styles","OcpOnAwsReportSummaryItemBase","OcpOnAwsReportSummaryItem","ocpOnAwsReportSummaryItems_styles_styles","OcpOnAwsReportSummaryItems","ocpOnAwsReportSummaryTrend_styles_styles","OcpOnAwsReportSummaryTrend","OcpOnAwsReportSummaryUsage","usageChart","OcpReportSummary","ocpReportSummaryAlt_styles_styles","OcpReportSummaryAlt","ocpReportSummaryDetails_styles_styles","OcpReportSummaryDetails","requestValue","ocpReportSummaryItem_styles_styles","OcpReportSummaryItemBase","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","OcpReportSummaryItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","tabItems","getIdKeyForTab","tab","widgetId","widget","awsDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","tabsQuery","currentReport","awsReports","selectReport","currentReportFetchStatus","selectReportFetchStatus","previousReport","tabsReport","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","AwsDashboardWidget","activeTabKey","buildDetailsLink","currentTab","awsQuery","group_by","order_by","trend","getUnits","awsReportSummary","titleKey","getDetails","getDetailsLabel","costKey","usageKey","getDetailsLink","isDetailsLink","handleInsightsNavClick","getDetailsLinkTitle","getHorizontalLayout","getSubTitle","getSubTitleTooltip","getTabs","getTitle","get_month_default","format_default","start_of_month_default","get_year_default","getTab","Tab","eventKey","getTabTitle","getTabItem","availableTabs","topItems","activeTab","isCostReport","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","insights","chrome","appNavClick","secondaryNav","event","tabIndex","isHorizontal","awsDashboard_mapStateToProps","selectWidgets","widgets","selectCurrentWidgets","awsDashboard_awsDashboard","ocpDashboardWidget_styles_styles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpReports","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpQuery","currentInfrastructureData","previousInfrastructureData","ocpReportSummary","requestKey","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","ocpOnAwsDashboardWidget_styles_styles","ocpOnAwsDashboardWidget_getIdKeyForTab","ocpOnAwsDashboardWidget_mapStateToProps","ocpOnAwsDashboard","ocpOnAwsReports","ocpOnAwsDashboardWidget_mapDispatchToProps","OcpOnAwsDashboardWidget","ocpOnAwsQuery","ocpOnAwsReportSummary","ocpOnAwsDashboard_mapStateToProps","ocpOnAwsDashboard_ocpOnAwsDashboard","overview_styles_styles","info","verticalAlign","infoIcon","infoTitle","fontWeight","headerOverride","index_esm","overview_getIdKeyForTab","overview_mapStateToProps","awsProvidersQueryString","providersQuery","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","Overview","showPopover","getAddSourceButton","Button","variant","secondary","getAvailableTabs","contentRef","tabContentId","tabContentRef","getTabContent","val","TabContent","handlePopoverClick","isLoading","noAwsProviders","noOcpProviders","noProviders","showTabs","sizes","Popover","aria-label","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_overview__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"40b0be386c25c0dadc31.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    return lookup;\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        check_box_3: 'check-box-3',\n        check_box_4: 'check-box-4',\n        check_box_5: 'check-box-5',\n        check_box_all: 'check-box-all',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpOnAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpOnAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const test = i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n    return test;\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nconst ChartLabelTooltip = (_a) => {\n    var { content } = _a, props = __rest(_a, [\"content\"]);\n    return (React.createElement(Tooltip, { content: content(props.datum), enableFlip: true },\n        React.createElement(ChartLabel, Object.assign({}, props))));\n};\nexport { ChartLabelTooltip };\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage ? value.usage.units : value.cost.units;\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpOnAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage ? value.usage.units : value.cost.units;\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage ? value.usage.units : value.cost.units,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BanIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error && error.response && error.response.status === 401) {\n        icon = BanIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BinocularsIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(EmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { c_background_image_BackgroundColor, global_Color_light_200, global_disabled_color_100, global_disabled_color_200, global_FontFamily_sans_serif, global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: ['#A2DA9C', '#88D080', '#6EC664', '#519149', '#3C6C37'],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_100.value,\n    ],\n    tooltip: {\n        flyoutStyle: {\n            fill: c_background_image_BackgroundColor.value,\n            strokeWidth: 0,\n        },\n        style: {\n            fill: global_Color_light_200.value,\n            padding: 18,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n    legend: {\n        display: 'inline-block',\n        fontSize: global_FontSize_md.value,\n        minHeight: '60px',\n        minWidth: '175px',\n        width: '50%',\n    },\n    legendTitle: {\n        fontSize: global_FontSize_md.value,\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartTooltip, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, title, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            if (previousUsageData) {\n                const [start] = getMonthRangeString(previousUsageData, 'chart.usage_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousUsageData, true, true, 1),\n                });\n            }\n            if (previousRequestData) {\n                const [start] = getMonthRangeString(previousRequestData, 'chart.requests_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousRequestData, true, true, 1),\n                });\n            }\n            const previous = {\n                charts: [\n                    {\n                        data: previousUsageData,\n                        name: 'previousUsage',\n                        show: true,\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: previousRequestData,\n                        name: 'previousRequest',\n                        show: true,\n                        style: chartStyles.previousRequestData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.previousColorScale,\n                    data: previousLegendData,\n                    onClick: this.handlePreviousLegendClick,\n                    title,\n                },\n            };\n            const currentLegendData = [];\n            if (currentUsageData) {\n                const [start] = getMonthRangeString(currentUsageData, 'chart.usage_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentUsageData, true, false),\n                });\n            }\n            if (currentRequestData) {\n                const [start] = getMonthRangeString(currentRequestData, 'chart.requests_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentRequestData, true, false),\n                });\n            }\n            const current = {\n                charts: [\n                    {\n                        data: currentUsageData,\n                        name: 'currentUsage',\n                        show: true,\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        data: currentRequestData,\n                        name: 'currentRequest',\n                        show: true,\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.currentColorScale,\n                    data: currentLegendData,\n                    gutter: 55,\n                    onClick: this.handleCurrentLegendClick,\n                    title,\n                },\n            };\n            this.setState({\n                datum: {\n                    previous,\n                    current,\n                },\n            });\n        };\n        this.handleCurrentLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.current.charts.length) {\n                newDatum.current.charts[props.index].show = !newDatum.current.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.handlePreviousLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.previous.charts.length) {\n                newDatum.previous.charts[props.index].show = !newDatum.previous.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, name: datum.name, key: `usage-chart-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], height: 25, itemsPerRow: 1, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    isCurrentLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.current.legend && datum.current.legend.data) {\n            datum.current.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    isPreviousLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.previous.legend && datum.previous.legend.data) {\n            datum.previous.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labelComponent: React.createElement(ChartTooltip, { flyoutStyle: chartStyles.tooltip.flyoutStyle, pointerWidth: 20, style: chartStyles.tooltip.style }), labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const legendWidth = chartStyles.legend.minWidth > width / 2\n            ? chartStyles.legend.minWidth\n            : width / 2;\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, width: width },\n                Boolean(datum && datum.previous) &&\n                    datum.previous.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                Boolean(datum && datum.current) &&\n                    datum.current.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.previous.legend.title)),\n            Boolean(this.isCurrentLegendVisible() && !this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.current.legend.title)),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) }, this.getLegend(datum.previous.legend, legendWidth))),\n            Boolean(this.isCurrentLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) }, this.getLegend(datum.current.legend, legendWidth)))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { c_background_image_BackgroundColor, global_Color_light_200, global_disabled_color_200, global_FontFamily_sans_serif, global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        '#A2DA9C',\n        '#88D080',\n        '#6EC664',\n        '#519149',\n        '#3C6C37',\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    tooltip: {\n        flyoutStyle: {\n            fill: c_background_image_BackgroundColor.value,\n            strokeWidth: 0,\n        },\n        style: {\n            fill: global_Color_light_200.value,\n            padding: 18,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    legend: {\n        display: 'inline-block',\n        fontSize: global_FontSize_md.value,\n        marginTop: global_spacer_lg.value,\n        minWidth: '175px',\n    },\n    legendTitle: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartTooltip, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, title } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            const cost = {\n                charts: [\n                    {\n                        data: previousData,\n                        name: 'previous',\n                        show: true,\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        name: 'current',\n                        show: true,\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.colorScale,\n                    data: legendData,\n                    onClick: this.handleCostLegendClick,\n                    title,\n                },\n            };\n            this.setState({\n                datum: {\n                    cost,\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.cost.charts.length) {\n                newDatum.cost.charts[props.index].show = !newDatum.cost.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, name: datum.name, key: `trend-chart-${datum.name}-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], gutter: 20, height: 25, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend, width: width }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.cost.legend && datum.cost.legend.data) {\n            datum.cost.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labelComponent: React.createElement(ChartTooltip, { flyoutStyle: chartStyles.tooltip.flyoutStyle, pointerWidth: 20, style: chartStyles.tooltip.style }), labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const legendWidth = chartStyles.legend.minWidth > width / 2\n            ? chartStyles.legend.minWidth\n            : width / 2;\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, width: width },\n                Boolean(datum && datum.cost) &&\n                    datum.cost.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })),\n            Boolean(this.isLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) },\n                Boolean(datum.cost.legend.title) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.cost.legend.title)),\n                this.getLegend(datum.cost.legend, legendWidth)))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, t, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits && usage >= 0) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnAwsReportSummary.styles';\nconst OcpOnAwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpOnAwsReportSummary = translate()(OcpOnAwsReportSummaryBase);\nexport { OcpOnAwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnAwsReportSummaryAlt.styles';\nconst OcpOnAwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpOnAwsReportSummaryAlt = translate()(OcpOnAwsReportSummaryAltBase);\nexport { OcpOnAwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    titleContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n    usageText: {\n        marginRight: global_spacer_sm.value,\n    },\n    usageValue: {\n        marginRight: global_spacer_sm.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsReportSummaryDetails.styles';\nconst OcpOnAwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestLabel, showUnits = false, t, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const awsReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (awsReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', formatOptions);\n        }\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.titleContainer) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else if (!awsReportType) {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.titleContainer) },\n                React.createElement(\"div\", { className: css(styles.value, styles.usageValue) },\n                    usage,\n                    React.createElement(\"div\", { className: css(styles.text) },\n                        React.createElement(\"div\", null, usageLabel)))),\n            React.createElement(\"div\", { className: css(styles.titleContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    request,\n                    React.createElement(\"div\", { className: css(styles.text) }, requestLabel)))));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits && usage >= 0) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst OcpOnAwsReportSummaryDetails = translate()(OcpOnAwsReportSummaryDetailsBase);\nexport { OcpOnAwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsReportSummaryItem.styles';\nconst OcpOnAwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpOnAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpOnAwsReportSummaryItem = translate()(OcpOnAwsReportSummaryItemBase);\nexport { OcpOnAwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { styles } from './ocpOnAwsReportSummaryItems.styles';\nclass OcpOnAwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpOnAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpOnAwsReportSummaryItems = translate()(OcpOnAwsReportSummaryItemsBase);\nexport { OcpOnAwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpOnAwsReportSummaryTrend.styles';\nconst OcpOnAwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpOnAwsReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpOnAwsReportSummaryTrend.styles';\nconst OcpOnAwsReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpOnAwsReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    titleContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n    usageText: {\n        marginRight: global_spacer_sm.value,\n    },\n    usageValue: {\n        marginRight: global_spacer_sm.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestLabel, usageLabel, t, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let requestValue = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n            requestValue = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', formatOptions);\n        }\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: css(styles.titleContainer) },\n            React.createElement(\"div\", { className: css(styles.value, styles.usageValue) },\n                Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                        derivedCost,\n                        infrastructureCost,\n                    }), enableFlip: true },\n                    React.createElement(\"div\", null, cost))) : (React.createElement(\"div\", null, usage)),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel)))),\n        React.createElement(\"div\", { className: css(styles.titleContainer) }, Boolean(reportType !== \"cost\" /* cost */) && (React.createElement(\"div\", { className: css(styles.value) },\n            requestValue,\n            React.createElement(\"div\", { className: css(styles.text) }, requestLabel))))));\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@red-hat-insights/insights-frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { c_background_image_BackgroundColor, global_Color_light_200, global_disabled_color_100, global_disabled_color_200, global_FontFamily_sans_serif, global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: ['#A2DA9C', '#88D080', '#6EC664', '#519149', '#3C6C37'],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_100.value,\n    ],\n    tooltip: {\n        flyoutStyle: {\n            fill: c_background_image_BackgroundColor.value,\n            strokeWidth: 0,\n        },\n        style: {\n            fill: global_Color_light_200.value,\n            padding: 18,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n    legendTitle: {\n        fontSize: global_FontSize_md.value,\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_lg.value,\n    },\n    legend: {\n        display: 'inline-block',\n        fontSize: global_FontSize_md.value,\n        minHeight: '60px',\n        minWidth: '200px',\n        width: '50%',\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartTooltip, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, title, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            if (previousCostData) {\n                const [start] = getMonthRangeString(previousCostData, 'chart.cost_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousCostData, true, true, 1),\n                });\n            }\n            if (previousInfrastructureCostData) {\n                const [start] = getMonthRangeString(previousInfrastructureCostData, 'chart.cost_infrastructure_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousInfrastructureCostData, true, true, 1),\n                });\n            }\n            const previous = {\n                charts: [\n                    {\n                        data: previousCostData,\n                        name: 'previousCost',\n                        show: true,\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        data: previousInfrastructureCostData,\n                        name: 'previousInfrastructureCost',\n                        show: true,\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.previousColorScale,\n                    data: previousLegendData,\n                    onClick: this.handlePreviousLegendClick,\n                    title,\n                },\n            };\n            const currentLegendData = [];\n            if (currentCostData) {\n                const [start] = getMonthRangeString(currentCostData, 'chart.cost_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentCostData, true, false),\n                });\n            }\n            if (currentInfrastructureCostData) {\n                const [start] = getMonthRangeString(currentInfrastructureCostData, 'chart.cost_infrastructure_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentInfrastructureCostData, true, false),\n                });\n            }\n            const current = {\n                charts: [\n                    {\n                        data: currentCostData,\n                        name: 'currentCost',\n                        show: true,\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        data: currentInfrastructureCostData,\n                        name: 'currentInfrastructureCost',\n                        show: true,\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.currentColorScale,\n                    data: currentLegendData,\n                    gutter: 55,\n                    onClick: this.handleCurrentLegendClick,\n                    title,\n                },\n            };\n            this.setState({\n                datum: {\n                    previous,\n                    current,\n                },\n            });\n        };\n        this.handleCurrentLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.current.charts.length) {\n                newDatum.current.charts[props.index].show = !newDatum.current.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.handlePreviousLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.previous.charts.length) {\n                newDatum.previous.charts[props.index].show = !newDatum.previous.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, name: datum.name, key: `usage-chart-${datum.name}-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(ChartLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], height: 25, itemsPerRow: 1, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (datum) => {\n            return datum.tooltip ? datum.tooltip : '';\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    isCurrentLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.current.legend && datum.current.legend.data) {\n            datum.current.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    isPreviousLegendVisible() {\n        const { datum } = this.state;\n        let result = false;\n        if (datum && datum.previous.legend && datum.previous.legend.data) {\n            datum.previous.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { labelComponent: React.createElement(ChartTooltip, { flyoutStyle: chartStyles.tooltip.flyoutStyle, pointerWidth: 20, style: chartStyles.tooltip.style }), labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const legendWidth = chartStyles.legend.minWidth > width / 2\n            ? chartStyles.legend.minWidth\n            : width / 2;\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, width: width },\n                Boolean(datum && datum.previous) &&\n                    datum.previous.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                Boolean(datum && datum.current) &&\n                    datum.current.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.previous.legend.title)),\n            Boolean(this.isCurrentLegendVisible() && !this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legendTitle) }, datum.current.legend.title)),\n            Boolean(this.isPreviousLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) }, this.getLegend(datum.previous.legend, legendWidth))),\n            Boolean(this.isCurrentLegendVisible()) && (React.createElement(\"div\", { className: css(styles.legend) }, this.getLegend(datum.current.legend, legendWidth)))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { transformAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { AwsReportSummary, AwsReportSummaryAlt, AwsReportSummaryDetails, AwsReportSummaryItem, AwsReportSummaryItems, AwsReportSummaryTrend, } from 'components/reports/awsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/awsDashboard';\nimport { awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/aws?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const currentData = transformAwsReport(currentReport, trend.type);\n            const previousData = transformAwsReport(previousReport, trend.type);\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryTrend, { currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, showUnits: details.showUnits, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(180)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('aws_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('aws_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(AwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(75),\n                React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs())));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'aws', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDashboardWidgetBase));\nexport { AwsDashboardWidget, AwsDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst AwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(AwsDashboardBase));\nexport default AwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { transformOcpReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpReportSummary, OcpReportSummaryAlt, OcpReportSummaryDetails, OcpReportSummaryItem, OcpReportSummaryItems, OcpReportSummaryTrend, OcpReportSummaryUsage, } from 'components/reports/ocpReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const reportItem = reportType === \"cost\" /* cost */ ? 'cost' : 'usage';\n            const currentUsageData = transformOcpReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const currentInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const previousInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(OcpReportSummaryTrend, { currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title })) : (React.createElement(OcpReportSummaryUsage, { currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpReportSummaryDetails, { formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(180)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('ocp_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('ocp_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                        ? reportItem.cost\n                        : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(75),\n                React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs())));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id } = this.props;\n            const tab = availableTabs[tabIndex];\n            this.props.updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, widgetId } = this.props;\n        this.props.updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDashboardWidgetBase));\nexport { OcpDashboardWidget, OcpDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst OcpDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(OcpDashboardBase));\nexport default OcpDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport { transformOcpOnAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpOnAwsReportSummary, OcpOnAwsReportSummaryAlt, OcpOnAwsReportSummaryDetails, OcpOnAwsReportSummaryItem, OcpOnAwsReportSummaryItems, OcpOnAwsReportSummaryTrend, OcpOnAwsReportSummaryUsage, } from 'components/reports/ocpOnAwsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsDashboardActions, ocpOnAwsDashboardSelectors, } from 'store/ocpOnAwsDashboard';\nimport { ocpOnAwsReportsSelectors } from 'store/ocpOnAwsReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpOnAwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp-on-aws?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const costReportType = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            const reportItem = costReportType ? 'infrastructureCost' : 'usage';\n            const currentUsageData = transformOcpOnAwsReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpOnAwsReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpOnAwsReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpOnAwsReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const units = this.getUnits();\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"instance_type\" /* instanceType */ ||\n                reportType === \"network\" /* network */ ||\n                reportType === \"storage\" /* storage */) ? (React.createElement(OcpOnAwsReportSummaryTrend, { currentData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) })) : (React.createElement(OcpOnAwsReportSummaryUsage, { currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpOnAwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), showUnits: details.showUnits, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpOnAwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(180)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('ocp_on_aws_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('ocp_on_aws_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpOnAwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpOnAwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.infrastructure_cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: isCostReport ? reportItem.infrastructureCost : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.infrastructure_cost\n                        ? unitLookupKey(currentReport.meta.total.infrastructure_cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpOnAwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(75),\n                this.getTabs()));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp-on-aws', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpOnAwsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpOnAwsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpOnAwsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpOnAwsReportsSelectors.selectReport(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpOnAwsDashboardActions.fetchWidgetReports,\n    updateTab: ocpOnAwsDashboardActions.changeWidgetTab,\n};\nconst OcpOnAwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpOnAwsDashboardWidgetBase));\nexport { OcpOnAwsDashboardWidget, OcpOnAwsDashboardWidgetBase, };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsDashboardSelectors } from 'store/ocpOnAwsDashboard';\nimport { OcpOnAwsDashboardWidget } from './ocpOnAwsDashboardWidget';\nconst OcpOnAwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpOnAwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(OcpOnAwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpOnAwsDashboardSelectors.selectWidgets(state),\n        widgets: ocpOnAwsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpOnAwsDashboard = translate()(connect(mapStateToProps, {})(OcpOnAwsDashboardBase));\nexport default OcpOnAwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n});\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { Button, ButtonType, ButtonVariant, Popover, Tab, TabContent, Tabs, Title, TitleSize, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsDashboard from 'pages/awsDashboard/awsDashboard';\nimport OcpDashboard from 'pages/ocpDashboard/ocpDashboard';\nimport OcpOnAwsDashboard from 'pages/ocpOnAwsDashboard/ocpOnAwsDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { awsProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { getTestProps, testIds } from 'testIds';\nimport { headerOverride, styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n        case \"ocpOnAws\" /* ocpOnAws */:\n            return 'ocpOnAws';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            showPopover: false,\n        };\n        this.getAddSourceButton = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, { to: \"/sources\" },\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.add_btn), { type: ButtonType.submit, variant: ButtonVariant.secondary }), t('providers.add_source'))));\n        };\n        this.getAvailableTabs = () => {\n            const { awsProviders, ocpProviders } = this.props;\n            const availableTabs = [];\n            if (awsProviders &&\n                awsProviders.meta &&\n                awsProviders.meta.count &&\n                (ocpProviders && ocpProviders.meta && ocpProviders.meta.count)) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocpOnAws\" /* ocpOnAws */,\n                });\n            }\n            if (ocpProviders && ocpProviders.meta && ocpProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (awsProviders && awsProviders.meta && awsProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"aws\" /* aws */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: this.getTabTitle(tab) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"ocpOnAws\" /* ocpOnAws */) {\n                return activeTabKey === index ? React.createElement(OcpOnAwsDashboard, null) : null;\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                return activeTabKey === index ? React.createElement(OcpDashboard, null) : null;\n            }\n            else if (currentTab === \"aws\" /* aws */) {\n                return activeTabKey === index ? React.createElement(AwsDashboard, null) : null;\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"aws\" /* aws */) {\n                return t('overview.aws');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n            else if (tab === \"ocpOnAws\" /* ocpOnAws */) {\n                return t('overview.ocp_on_aws');\n            }\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    render() {\n        const { awsProviders, awsProvidersError, awsProvidersFetchStatus, ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || ocpProvidersError;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = awsProviders !== undefined &&\n            awsProviders.meta !== undefined &&\n            awsProviders.meta.count === 0 &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = ocpProviders !== undefined &&\n            ocpProviders.meta !== undefined &&\n            ocpProviders.meta.count === 0 &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { size: TitleSize['2xl'] },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp_on_aws')),\n                                    React.createElement(\"p\", null, t('overview.ocp_on_aws_desc')),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick }))))),\n                    this.getAddSourceButton()),\n                Boolean(showTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs(availableTabs)))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(OverviewBase));\nexport default Overview;\n","import { hot } from 'react-hot-loader';\nimport Overview from './overview';\nexport default hot(module)(Overview);\n"],"sourceRoot":""}