{"version":3,"sources":["webpack:///./src/pages/dashboard/components/dashboardBase.tsx","webpack:///./src/pages/dashboard/components/dashboardWidget.styles.ts","webpack:///./src/pages/dashboard/components/dashboardWidgetBase.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboard.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboard.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboard.tsx","webpack:///./src/pages/dashboard/gcpDashboard/gcpDashboardWidget.tsx","webpack:///./src/pages/dashboard/gcpDashboard/gcpDashboard.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/perspective.styles.ts","webpack:///./src/pages/overview/perspective.tsx","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/pages/overview/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/utils/computedForecast/getComputedForecastItems.ts","webpack:///./src/components/charts/common/chartUtils.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/computedReport/getComputedReportItems.ts","webpack:///./src/utils/computedReport/getItemLabel.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/api/queries/providersQuery.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/reports/reportSummary/reportSummary.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryAlt.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryDetails.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryItem.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryCost.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryTrend.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryUsage.tsx","webpack:///./src/utils/pathname.ts","webpack:///./src/pages/state/loading/loading.tsx","webpack:///./src/pages/state/loading/index.ts","webpack:///./src/components/icons/costIcon/Cost-icon.svg","webpack:///./src/components/icons/costIcon/costIcon.tsx","webpack:///./src/components/icons/costIcon/index.ts","webpack:///./src/pages/state/noProviders/noProvidersState.styles.ts","webpack:///./src/pages/state/noProviders/noProvidersState.tsx","webpack:///./src/pages/state/noProviders/noProviders.tsx","webpack:///./src/pages/state/noProviders/index.ts"],"names":["DashboardBase","DashboardWidget","selectWidgets","widgets","createElement","Grid","hasGutter","map","widgetId","details","showHorizontal","GridItem","sm","key","lg","xl","xl2","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","styles","tabs","marginTop","value","tabItems","Component","super","arguments","this","state","activeTabKey","forecastAuthorized","buildDetailsLink","tab","getIdKeyForTab","props","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","getCostChart","getTrendChart","getUsageChart","currentReport","previousReport","t","trend","units","getUnits","title","titleKey","computedReportItem","computedReportItemValue","currentInfrastructureData","type","previousInfrastructureData","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","forecastInfrastructureData","computedForecastInfrastructureItem","currentInfrastructureCostData","forecastConeData","forecastInfrastructureConeData","formatDatumValue","formatValue","formatDatumOptions","formatOptions","previousInfrastructureCostData","showForecast","undefined","report","forecast","newForecast","data","total","meta","reportedValues","filter","val","values","length","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","i","forecastDate","forecastMonth","push","unshift","confidence_max","confidence_min","infrastructure","supplementary","showSupplementaryLabel","currentData","previousData","showUsageLegendLabel","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","Link","to","onClick","handleInsightsNavClick","getDetailsLinkTitle","groupBy","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","subTitle","getSubTitle","getTabs","getTitle","today","month","endDate","startDate","count","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","style","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","id","label","toString","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","Boolean","appNavId","insights","chrome","appNavClick","secondaryNav","event","tabIndex","updateTab","setState","fetchForecasts","fetchReports","async","_insights","window","auth","getUser","username","identity","user","isForecastAuthorized","then","mapStateToProps","widget","awsCloudDashboard","selectWidget","queries","selectWidgetQueries","Object","assign","selectReport","reportPathsType","current","selectReportFetchStatus","selectForecast","forecastPathsType","forecastType","previous","mapDispatchToProps","fetchWidgetForecasts","fetchWidgetReports","changeWidgetTab","AwsCloudDashboardWidget","withTranslation","selectCurrentWidgets","awsDashboard","forecastFetchStatus","selectForecastFetchStatus","AwsDashboardWidget","azureCloudDashboard","AzureCloudDashboardWidget","azureDashboard","AzureDashboardWidget","gcpDashboard","GcpDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","currentQuery","forecastQuery","previousQuery","tabsQuery","OcpDashboardWidget","ocpSupplementaryDashboard","OcpSupplementaryDashboardWidget","ocpUsageDashboard","OcpUsageDashboardWidget","infoIcon","fontSize","infoTitle","fontWeight","perspective","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","var","defaultState","isPerspectiveOpen","getDropDownItems","options","option","DropdownItem","component","handleClick","getCurrentLabel","currentItem","onItemClicked","handleSelect","handleToggle","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","Perspective","ocpOptions","infrastructureAllCloudOptions","infrastructureAwsOptions","infrastructureAwsCloudOptions","infrastructureAzureOptions","infrastructureAzureCloudOptions","infrastructureGcpOptions","infrastructureOcpOptions","isAwsAccessAllowed","isAzureAccessAllowed","isGcpAccessAllowed","isOcpAccessAllowed","getAvailableTabs","isAwsAvailable","isAzureAvailable","isGcpAvailable","isOcpAvailable","isOcpCloudAvailable","contentRef","createRef","getCurrentTab","getDefaultInfrastructurePerspective","getDefaultOcpPerspective","getPerspective","currentInfrastructurePerspective","currentOcpPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","TabContent","ref","emptyTab","Fragment","awsProviders","azureProviders","gcpProviders","ocpProviders","isEntitled","isOrgAdmin","getPermissions","prevProps","awsProvidersFetchStatus","azureProvidersFetchStatus","gcpProvidersFetchStatus","ocpProvidersFetchStatus","isLoading","noAwsProviders","noAzureProviders","noGcpProviders","noOcpProviders","noProviders","className","Title","headingLevel","size","Popover","enableFlip","bodyContent","Button","variant","plain","awsProvidersQueryString","providers","selectProviders","selectProvidersFetchStatus","azureProvidersQueryString","gcpProvidersQueryString","ocpProvidersQueryString","unitLookupKey","unit","lookup","toLowerCase","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","currency","getComputedForecastItems","sortDirection","sortKey","sort","itemMap","Map","visitDataPoint","dataPoint","forEach","item","get","set","getCostData","Array","from","getUnsortedComputedForecastItems","direction","pvalues","Number","rsquared","transformForecast","forecastItem","forecastItemValue","computedItems","chartDatums","createForecastDatum","reduce","acc","d","prevValue","y","padChartDatums","transformForecastCone","createForecastConeDatum","prevMaxValue","prevMinValue","y0","transformReport","reportItemValue","getComputedReportItems","createReportDatum","computedItem","xVal","yVal","isFloat","parseFloat","toFixed","isInt","x","maxValue","minValue","y0Val","datums","result","firstDate","lastDate","padDate","getDate","setDate","prevChartDatum","chartDatum","find","fillChartDatums","getDateRange","firstOfMonth","lastOfMonth","offset","start","end","setMonth","getDatumDateRange","getMaxMinValues","max","min","datum","getTooltipContent","i18next","getCostRangeString","year","getUsageRangeString","n","LAYOUT_PROPS","padding","area","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","ChartTheme","default","getUnsortedComputedReportItems","markup","raw","getUsageData","capacity","limit","request","idSuffix","cluster","org_unit_id","mapId","cluster_alias","clusters","delta_percent","delta_value","source_uuid","itemLabelKey","String","keys","indexOf","tagPrefixKey","hasOwnProperty","getItemLabel","alias","account_alias","LoadingState","large","getProvidersQuery","query","encode","indices","getValueForItem","array","a","b","aVal","bVal","EmptyValueState","ReportSummary","children","Card","CardTitle","CardBody","Skeleton","CardFooter","ReportSummaryAlt","ReportSummaryDetails","requestFormatOptions","supplementaryCost","infrastructureCost","hasCost","hasCount","hasSupplementaryCost","hasInfrastructureCost","hasRequest","hasUsage","getCostLayout","showAltHeroFont","altHeroFont","Tooltip","content","getRequestLayout","usageUnits","_units","unitsLabel","getUsageLayout","ReportSummaryItemBase","percentVal","percentLabel","percent","Progress","defaultProps","v","ReportSummaryItem","nextProps","otherIndex","findIndex","includes","slice","getItems","ReportSummaryItems","currentColorScale","chart_color_green_400","chart_color_green_300","chart_color_green_200","chart_color_green_100","chart_color_green_500","fill","currentInfrastructureColorScale","chart_color_blue_400","chart_color_blue_300","chart_color_blue_200","chart_color_blue_100","chart_color_blue_500","strokeDasharray","strokeWidth","forecastConeDataColorScale","forecastDataColorScale","forecastInfrastructureConeDataColorScale","forecastInfrastructureDataColorScale","previousColorScale","chart_color_black_200","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","containerRef","hiddenSeries","Set","width","initDatum","series","childName","legendItem","name","symbol","cursorVoronoiContainer","getCursorVoronoiContainer","handleNavToggle","setTimeout","handleResize","clientWidth","ChartArea","has","interpolation","CursorVoronoiContainer","cursorDimension","labels","getTooltipLabel","mouseFollowTooltips","voronoiDimension","voronoiPadding","bottom","left","right","top","getLegend","ChartLegend","getLegendData","gutter","responsive","formatter","dy","dy0","value0","value1","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","getChartNames","serie","getAdjustedContainerHeight","adjustedContainerHeight","getEvents","chartNames","isHidden","legendName","onLegendClick","addEventListener","navToggle","on","removeEventListener","domain","Math","threshold","ceil","_min","floor","currentInfrastructureDate","currentCostDate","forecastCostDate","previousInfrastructureDate","previousUsageDate","getDomain","getEndDate","midDate","container","cloneElement","disable","labelComponent","ChartLegendTooltip","legendData","day","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","ChartAxis","tickValues","dependentAxis","ReportSummaryCost","currentMonthData","itemsPerRow","previousMonthData","tooltipKey","legendItemsPerRow","orientation","previousDate","currentDate","ReportSummaryTrend","chartContainer","legendColorScale","currentRequestDate","currentUsageDate","previousRequestDate","ReportSummaryUsage","getReleasePath","pathName","location","pathname","split","shift","release","withRouter","PageHeader","Main","module","exports","src","alt","iconSpacer","marginLeft","viewSources","getDocLink","textKey","urlKey","href","rel","target","getRouteToSources","providerType","docUrlKey","icon","descKey","EmptyState","EmptyStateIcon","EmptyStateBody","NoProvidersState"],"mappings":"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","file":"fee379cb2e804f577379.bundle.js","sourcesContent":["import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformForecast, transformForecastCone, transformReport, } from 'components/charts/common/chartUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './dashboardWidget.styles';\n// Todo: Temporary check until forecast feature is ready for prod\nconst isForecastAuthorized = async () => {\n    const _insights = window.insights;\n    if (_insights && _insights.chrome && _insights.chrome.auth && _insights.chrome.auth.getUser) {\n        const user = await _insights.chrome.auth.getUser();\n        const username = user.identity.user.username;\n        return username === 'cost-demo' || username === 'insights-qa';\n    }\n    return false;\n};\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            forecastAuthorized: false,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType } = this.props;\n            if (chartType === \"cost\" /* cost */) {\n                return this.getCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"supplementary\" /* supplementary */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, true);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This chart displays cost and infrastructure cost\n        this.getCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const { forecastAuthorized } = this.state;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, trend.type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, trend.type, 'date', 'infrastructure', computedReportItemValue);\n            // Cost data\n            const currentCostData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const forecastInfrastructureData = this.getForecastData(currentReport, trend.computedForecastInfrastructureItem);\n            return (React.createElement(ReportSummaryCost, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, forecastInfrastructureConeData: forecastInfrastructureData.forecastConeData, forecastInfrastructureData: forecastInfrastructureData.forecastData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureData, showForecast: trend.computedForecastItem !== undefined && forecastAuthorized, title: title }));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (let i = 0; i < forecast.data.length - 1; i++) {\n                            const forecastDate = new Date(forecast.data[i].date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast currently starts with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(forecast.data[i]);\n                            }\n                        }\n                    }\n                    // Show continuous line from current report to forecast\n                    newForecast.data.unshift({\n                        date: lastReported,\n                        values: [\n                            {\n                                date: lastReported,\n                                cost: {\n                                    confidence_max: {\n                                        value: 0,\n                                    },\n                                    confidence_min: {\n                                        value: 0,\n                                    },\n                                    total: {\n                                        value: total,\n                                        units: 'USD',\n                                    },\n                                },\n                                infrastructure: {\n                                    confidence_max: {\n                                        value: 0,\n                                    },\n                                    confidence_min: {\n                                        value: 0,\n                                    },\n                                    total: {\n                                        value: total,\n                                        units: 'USD',\n                                    },\n                                },\n                                supplementary: {\n                                    confidence_max: {\n                                        value: 0,\n                                    },\n                                    confidence_min: {\n                                        value: 0,\n                                    },\n                                    total: {\n                                        value: total,\n                                        units: 'USD',\n                                    },\n                                },\n                            },\n                        ],\n                    });\n                }\n                forecastData = transformForecast(newForecast, trend.type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, trend.type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        // This chart displays cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const { forecastAuthorized } = this.state;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            // Cost data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined && forecastAuthorized, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: units }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            const units = this.getUnits();\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: details.units, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab)));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('aws_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: details.units ? details.units : this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            let units;\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                units = hasUsage ? unitLookupKey(currentReport.meta.total.usage.units) : '';\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                units = hasCost ? unitLookupKey(currentReport.meta.total[computedReportItem][computedReportItemValue].units) : '';\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleInsightsNavClick = () => {\n            const { details } = this.props;\n            if (details.appNavId) {\n                insights.chrome.appNavClick({\n                    id: details.appNavId,\n                    secondaryNav: true,\n                });\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            isForecastAuthorized().then(val => {\n                if (val && fetchForecasts) {\n                    fetchForecasts(widgetId);\n                }\n                this.setState({ forecastAuthorized: val });\n            });\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardActions, awsCloudDashboardSelectors, } from 'store/dashboard/awsCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsCloudDashboardActions.fetchWidgetReports,\n    updateTab: awsCloudDashboardActions.changeWidgetTab,\n};\nconst AwsCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardSelectors } from 'store/dashboard/awsCloudDashboard';\nimport { AwsCloudDashboardWidget } from './awsCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsCloudDashboardWidget,\n        selectWidgets: awsCloudDashboardSelectors.selectWidgets(state),\n        widgets: awsCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), forecastFetchStatus: forecastSelectors.selectForecastFetchStatus(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardActions, azureCloudDashboardSelectors, } from 'store/dashboard/azureCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureCloudDashboardActions.fetchWidgetReports,\n    updateTab: azureCloudDashboardActions.changeWidgetTab,\n};\nconst AzureCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardSelectors } from 'store/dashboard/azureCloudDashboard';\nimport { AzureCloudDashboardWidget } from './azureCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureCloudDashboardWidget,\n        selectWidgets: azureCloudDashboardSelectors.selectWidgets(state),\n        widgets: azureCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default GcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardActions, ocpSupplementaryDashboardSelectors, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpSupplementaryDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpSupplementaryDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpSupplementaryDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpSupplementaryDashboardActions.fetchWidgetReports,\n    updateTab: ocpSupplementaryDashboardActions.changeWidgetTab,\n};\nconst OcpSupplementaryDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpSupplementaryDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardSelectors } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { OcpSupplementaryDashboardWidget } from './ocpSupplementaryDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpSupplementaryDashboardWidget,\n        selectWidgets: ocpSupplementaryDashboardSelectors.selectWidgets(state),\n        widgets: ocpSupplementaryDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpSupplementaryDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpSupplementaryDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardActions, ocpUsageDashboardSelectors, } from 'store/dashboard/ocpUsageDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpUsageDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpUsageDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpUsageDashboardActions.fetchWidgetReports,\n    updateTab: ocpUsageDashboardActions.changeWidgetTab,\n};\nconst OcpUsageDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpUsageDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardSelectors } from 'store/dashboard/ocpUsageDashboard';\nimport { OcpUsageDashboardWidget } from './ocpUsageDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpUsageDashboardWidget,\n        selectWidgets: ocpUsageDashboardSelectors.selectWidgets(state),\n        widgets: ocpUsageDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpUsageDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpUsageDashboard;\n","import global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    perspective: {\n        marginTop: global_spacer_lg.value,\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = withTranslation()(PerspectiveBase);\nexport { Perspective };\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport AwsCloudDashboard from 'pages/dashboard/awsCloudDashboard/awsCloudDashboard';\nimport AwsDashboard from 'pages/dashboard/awsDashboard/awsDashboard';\nimport AzureCloudDashboard from 'pages/dashboard/azureCloudDashboard/azureCloudDashboard';\nimport AzureDashboard from 'pages/dashboard/azureDashboard/azureDashboard';\nimport GcpDashboard from 'pages/dashboard/gcpDashboard/gcpDashboard';\nimport OcpCloudDashboard from 'pages/dashboard/ocpCloudDashboard/ocpCloudDashboard';\nimport OcpDashboard from 'pages/dashboard/ocpDashboard/ocpDashboard';\nimport OcpSupplementaryDashboard from 'pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard';\nimport OcpUsageDashboard from 'pages/dashboard/ocpUsageDashboard/ocpUsageDashboard';\nimport Loading from 'pages/state/loading';\nimport NoProviders from 'pages/state/noProviders';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { hasAwsPermissions, hasAzurePermissions, hasEntitledPermissions, hasGcpPermissions, hasOcpPermissions, hasOrgAdminPermissions, } from 'utils/permissions';\nimport { styles } from './overview.styles';\nimport { Perspective } from './perspective';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [\n    { label: 'overview.perspective.all', value: 'all' },\n    { label: 'overview.perspective.supplementary', value: 'supplementary' },\n];\n// Infrastructure all cloud options\nconst infrastructureAllCloudOptions = [{ label: 'overview.perspective.all_cloud', value: 'all_cloud' }];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: 'overview.perspective.aws', value: 'aws' }];\n// Infrastructure AWS cloud options\nconst infrastructureAwsCloudOptions = [{ label: 'overview.perspective.aws_cloud', value: 'aws_cloud' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: 'overview.perspective.azure', value: 'azure' }];\n// Infrastructure Azure cloud options\nconst infrastructureAzureCloudOptions = [{ label: 'overview.perspective.azure_cloud', value: 'azure_cloud' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: 'overview.perspective.gcp', value: 'gcp' }];\n// Infrastructure Ocp options\nconst infrastructureOcpOptions = [{ label: 'overview.perspective.ocp_usage', value: 'ocp_usage' }];\nconst getPermissions = async () => {\n    const isEntitled = await hasEntitledPermissions();\n    const isOrgAdmin = await hasOrgAdminPermissions();\n    const isAwsAccessAllowed = isEntitled && (isOrgAdmin || (await hasAwsPermissions()));\n    const isAzureAccessAllowed = isEntitled && (isOrgAdmin || (await hasAzurePermissions()));\n    const isGcpAccessAllowed = isEntitled && (isOrgAdmin || (await hasGcpPermissions()));\n    const isOcpAccessAllowed = isEntitled && (isOrgAdmin || (await hasOcpPermissions()));\n    return {\n        isAwsAccessAllowed,\n        isAzureAccessAllowed,\n        isGcpAccessAllowed,\n        isOcpAccessAllowed,\n    };\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n            isAwsAccessAllowed: false,\n            isAzureAccessAllowed: false,\n            isGcpAccessAllowed: false,\n            isOcpAccessAllowed: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isGcpAvailable = this.isGcpAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            if (isOcpAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (isAwsAvailable || isAzureAvailable || isGcpAvailable || isOcpCloudAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isGcpAvailable = this.isGcpAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            const showOcpOnly = isOcpAvailable && !(isAwsAvailable || isAzureAvailable || isGcpAvailable || isOcpCloudAvailable);\n            const showInfrastructureOnly = !isOcpAvailable && (isAwsAvailable || isAzureAvailable || isGcpAvailable || isOcpCloudAvailable);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isGcpAvailable = this.isGcpAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all_cloud\" /* allCloud */;\n            }\n            if (isAwsAvailable) {\n                return \"aws\" /* aws */;\n            }\n            if (isAzureAvailable) {\n                return \"azure\" /* azure */;\n            }\n            if (isGcpAvailable) {\n                return \"gcp\" /* gcp */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all\" /* all */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isGcpAvailable = this.isGcpAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (!(isAwsAvailable || isAzureAvailable || isGcpAvailable || isOcpAvailable)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (isOcpAvailable) {\n                    options.push(...infrastructureAllCloudOptions);\n                }\n                if (isAwsAvailable) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (isOcpAvailable && isAwsAvailable) {\n                    options.push(...infrastructureAwsCloudOptions);\n                }\n                if (isGcpAvailable) {\n                    options.push(...infrastructureGcpOptions);\n                }\n                if (isAzureAvailable) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (isOcpAvailable && isAzureAvailable) {\n                    options.push(...infrastructureAzureCloudOptions);\n                }\n                if (isOcpAvailable) {\n                    options.push(...infrastructureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"all_cloud\" /* allCloud */) {\n                    return React.createElement(OcpCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    return React.createElement(AwsDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"aws_cloud\" /* awsFiltered */) {\n                    return React.createElement(AwsCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* gcp */) {\n                    return React.createElement(GcpDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    return React.createElement(AzureDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"azure_cloud\" /* azureCloud */) {\n                    return React.createElement(AzureCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"ocp_usage\" /* ocpUsage */) {\n                    return React.createElement(OcpUsageDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpCloudDashboard, null); // default\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                if (currentOcpPerspective === \"all\" /* all */) {\n                    return React.createElement(OcpDashboard, null);\n                }\n                else if (currentOcpPerspective === \"supplementary\" /* supplementary */) {\n                    return React.createElement(OcpSupplementaryDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpDashboard, null); // default\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return t('overview.infrastructure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders } = this.props;\n            const { isAwsAccessAllowed } = this.state;\n            return (\n            // API returns empty data array for no sources\n            isAwsAccessAllowed && awsProviders !== undefined && awsProviders.meta !== undefined && awsProviders.meta.count > 0);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders } = this.props;\n            const { isAzureAccessAllowed } = this.state;\n            return (\n            // API returns empty data array for no sources\n            isAzureAccessAllowed &&\n                azureProviders !== undefined &&\n                azureProviders.meta !== undefined &&\n                azureProviders.meta.count > 0);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders } = this.props;\n            const { isGcpAccessAllowed } = this.state;\n            return (\n            // API returns empty data array for no sources\n            isGcpAccessAllowed && gcpProviders !== undefined && gcpProviders.meta !== undefined && gcpProviders.meta.count > 0);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders } = this.props;\n            const { isOcpAccessAllowed } = this.state;\n            return (\n            // API returns empty data array for no sources\n            isOcpAccessAllowed && ocpProviders !== undefined && ocpProviders.meta !== undefined && ocpProviders.meta.count > 0);\n        };\n        this.isOcpCloudAvailable = () => {\n            return this.isAwsAvailable() && this.isOcpAvailable();\n        };\n    }\n    componentDidMount() {\n        getPermissions().then(({ isAwsAccessAllowed, isAzureAccessAllowed, isGcpAccessAllowed, isOcpAccessAllowed }) => {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n                isAwsAccessAllowed,\n                isAzureAccessAllowed,\n                isGcpAccessAllowed,\n                isOcpAccessAllowed,\n            });\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { awsProviders, azureProviders, gcpProviders, ocpProviders } = this.props;\n        if (prevProps.awsProviders !== awsProviders ||\n            prevProps.azureProviders !== azureProviders ||\n            prevProps.gcpProviders !== gcpProviders ||\n            prevProps.ocpProviders !== ocpProviders) {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        // Test for no providers\n        const noAwsProviders = !this.isAwsAvailable() && awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && azureProvidersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && gcpProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noOcpProviders;\n        const title = t('navigation.overview');\n        if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light headerOverride}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { headingLevel: \"h2\", size: \"2xl\" },\n                        t('overview.title'),\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.gcp')),\n                                    React.createElement(\"p\", null, t('overview.gcp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null)))))),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.perspective }, this.getPerspective())),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = withTranslation()(connect(mapStateToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","import { sort } from 'utils/sort';\nexport function getComputedForecastItems({ forecast, sortDirection = 0 /* asc */, sortKey = 'date', }) {\n    return sort(getUnsortedComputedForecastItems({\n        forecast,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nfunction getCostData(val, key, item) {\n    return {\n        confidence_max: {\n            value: item\n                ? item[key].confidence_max.value\n                : 0 + val[key] && val[key].confidence_max\n                    ? val[key].confidence_max.value\n                    : 0,\n            units: val[key] && val[key].confidence_max ? val[key].confidence_max.units : 'USD',\n        },\n        confidence_min: {\n            value: item\n                ? item[key].confidence_min.value\n                : 0 + val[key] && val[key].confidence_min\n                    ? val[key].confidence_min.value\n                    : 0,\n            units: val[key] && val[key].confidence_min ? val[key].confidence_min.units : 'USD',\n        },\n        pvalues: {\n            value: val[key] && val[key].pvalues ? Number(val[key].pvalues.value) : 0,\n            units: val[key] && val[key].pvalues ? val[key].pvalues.units : null,\n        },\n        rsquared: {\n            value: val[key] && val[key].rsquared ? Number(val[key].rsquared.value) : 0,\n            units: val[key] && val[key].rsquared ? val[key].rsquared.units : null,\n        },\n        total: {\n            value: item ? item[key].total.value : 0 + val[key] && val[key].total ? val[key].total.value : 0,\n            units: val[key] && val[key].total ? val[key].total.units : 'USD',\n        },\n    };\n}\nexport function getUnsortedComputedForecastItems({ forecast, }) {\n    if (!forecast) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint && dataPoint.values) {\n            dataPoint.values.forEach((val) => {\n                const date = val.date;\n                const item = itemMap.get(date);\n                if (item) {\n                    // This code block is typically entered with filter[resolution]=monthly\n                    itemMap.set(date, Object.assign(Object.assign({}, item), { date, cost: getCostData(val, 'cost', item), infrastructure: getCostData(val, 'infrastructure', item), supplementary: getCostData(val, 'supplementary', item) }));\n                }\n                else {\n                    // This code block is typically entered with filter[resolution]=daily\n                    itemMap.set(date, {\n                        date,\n                        cost: getCostData(val, 'cost'),\n                        infrastructure: getCostData(val, 'infrastructure'),\n                        supplementary: getCostData(val, 'supplementary'),\n                    });\n                }\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (forecast && forecast.data) {\n        forecast.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { getComputedForecastItems } from 'utils/computedForecast/getComputedForecastItems';\nimport { getComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { unitLookupKey } from 'utils/formatValue';\nexport function transformForecast(forecast, type = 1 /* daily */, forecastItem = 'cost', forecastItemValue = 'total') {\n    if (!forecast) {\n        return [];\n    }\n    const items = {\n        forecast,\n        sortKey: 'date',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedForecastItems(items);\n    let chartDatums;\n    if (type === 1 /* daily */ || type === 2 /* monthly */) {\n        chartDatums = computedItems.map(i => createForecastDatum(i[forecastItem][forecastItemValue].value, i));\n    }\n    else {\n        chartDatums = computedItems.reduce((acc, d) => {\n            const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n            return [...acc, createForecastDatum(prevValue + d[forecastItem][forecastItemValue].value, d)];\n        }, []);\n    }\n    return padChartDatums(chartDatums);\n}\nexport function transformForecastCone(forecast, type = 1 /* daily */, forecastItem = 'cost', forecastItemValue = 'total') {\n    if (!forecast) {\n        return [];\n    }\n    const items = {\n        forecast,\n        sortKey: 'date',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedForecastItems(items);\n    let chartDatums;\n    if (type === 1 /* daily */ || type === 2 /* monthly */) {\n        chartDatums = computedItems.map(i => createForecastConeDatum(i[forecastItem].confidence_max.value, i[forecastItem].confidence_min.value, i));\n    }\n    else {\n        chartDatums = computedItems.reduce((acc, d) => {\n            const prevMaxValue = acc.length ? acc[acc.length - 1].y : d[forecastItem][forecastItemValue].value;\n            const prevMinValue = acc.length ? acc[acc.length - 1].y0 : d[forecastItem][forecastItemValue].value;\n            return [\n                ...acc,\n                createForecastConeDatum(prevMaxValue + d[forecastItem].confidence_max.value, prevMinValue + d[forecastItem].confidence_min.value, d),\n            ];\n        }, []);\n    }\n    return padChartDatums(chartDatums);\n}\nexport function transformReport(report, type = 1 /* daily */, idKey = 'date', reportItem = 'cost', reportItemValue = 'total' // useful for infrastructure.usage values\n) {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        idKey,\n        report,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedReportItems(items);\n    let chartDatums;\n    if (type === 1 /* daily */ || type === 2 /* monthly */) {\n        chartDatums = computedItems.map(i => {\n            const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n            return createReportDatum(val, i, idKey, reportItem, reportItemValue);\n        });\n    }\n    else {\n        chartDatums = computedItems.reduce((acc, d) => {\n            const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n            const val = d[reportItem][reportItemValue] ? d[reportItem][reportItemValue].value : d[reportItem].value;\n            return [...acc, createReportDatum(prevValue + val, d, idKey, reportItem, reportItemValue)];\n        }, []);\n    }\n    return idKey === 'date' ? padChartDatums(chartDatums) : chartDatums;\n}\nexport function createForecastDatum(value, computedItem, forecastItem = 'cost', forecastItemValue = 'total') {\n    const xVal = getDate(computedItem.date);\n    const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n    return {\n        x: xVal,\n        y: value === null ? null : yVal,\n        key: computedItem.date,\n        units: computedItem[forecastItem] && computedItem[forecastItem][forecastItemValue]\n            ? computedItem[forecastItem][forecastItemValue].units\n            : undefined,\n    };\n}\nexport function createForecastConeDatum(maxValue, minValue, computedItem, forecastItem = 'cost', forecastItemValue = 'total') {\n    const xVal = getDate(computedItem.date);\n    const yVal = isFloat(maxValue) ? parseFloat(maxValue.toFixed(2)) : isInt(maxValue) ? maxValue : 0;\n    const y0Val = isFloat(minValue) ? parseFloat(minValue.toFixed(2)) : isInt(minValue) ? minValue : 0;\n    return {\n        x: xVal,\n        y: maxValue === null ? null : yVal,\n        y0: minValue === null ? null : y0Val,\n        key: computedItem.date,\n        units: computedItem[forecastItem] && computedItem[forecastItem][forecastItemValue]\n            ? computedItem[forecastItem][forecastItemValue].units\n            : undefined,\n    };\n}\nexport function createReportDatum(value, computedItem, idKey = 'date', reportItem = 'cost', reportItemValue = 'total' // useful for infrastructure.usage values\n) {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n    return {\n        x: xVal,\n        y: value === null ? null : yVal,\n        key: computedItem.id,\n        units: computedItem[reportItem]\n            ? computedItem[reportItem][reportItemValue]\n                ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                : computedItem[reportItem].units // capacity, limit, request, usage\n            : undefined,\n    };\n}\n// Fill in missing data with previous value to represent cumulative daily cost\nexport function fillChartDatums(datums) {\n    const result = [];\n    if (!datums || datums.length === 0) {\n        return result;\n    }\n    const firstDate = new Date(datums[0].key + 'T00:00:00');\n    const lastDate = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    const padDate = startOfMonth(firstDate);\n    let prevChartDatum;\n    for (let i = padDate.getDate(); i <= endOfMonth(lastDate).getDate(); i++) {\n        padDate.setDate(i);\n        const id = formatDate(padDate, 'YYYY-MM-DD');\n        const chartDatum = datums.find(val => val.key === id);\n        if (chartDatum) {\n            result.push(chartDatum);\n        }\n        else if (prevChartDatum) {\n            result.push(Object.assign(Object.assign({}, prevChartDatum), { key: id, x: getDate(id) }));\n        }\n        if (chartDatum) {\n            prevChartDatum = chartDatum;\n        }\n    }\n    return result;\n}\n// This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n// data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n// message in the tooltip, which helps distinguish between zero values and when there is no data available.\nexport function padChartDatums(datums) {\n    const result = [];\n    if (!datums || datums.length === 0) {\n        return result;\n    }\n    const firstDate = new Date(datums[0].key + 'T00:00:00');\n    const lastDate = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    // Pad start for missing data\n    let padDate = startOfMonth(firstDate);\n    for (let i = padDate.getDate(); i < firstDate.getDate(); i++) {\n        padDate.setDate(i);\n        const id = formatDate(padDate, 'YYYY-MM-DD');\n        result.push(createReportDatum(null, { id }, 'date', null));\n    }\n    // Fill middle with existing data\n    result.push(...datums);\n    // Pad end for missing data\n    padDate = new Date(lastDate);\n    for (let i = padDate.getDate() + 1; i <= endOfMonth(lastDate).getDate(); i++) {\n        padDate.setDate(i);\n        const id = formatDate(padDate, 'YYYY-MM-DD');\n        result.push(createReportDatum(null, { id }, 'date', null));\n    }\n    return fillChartDatums(result);\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getMaxMinValues(datums) {\n    let max = 0;\n    let min = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n            if ((min === 0 || datum.y < min) && datum.y !== null) {\n                min = datum.y;\n            }\n        });\n    }\n    return { max, min };\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedReportItems({ idKey, report, sortDirection = 0 /* asc */, sortKey = 'date', }) {\n    return sort(getUnsortedComputedReportItems({\n        idKey,\n        report,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nfunction getCostData(val, key, item) {\n    return {\n        markup: {\n            value: item ? item[key].markup.value : 0 + val[key] && val[key].markup ? val[key].markup.value : 0,\n            units: val[key] && val[key].markup ? val[key].markup.units : 'USD',\n        },\n        raw: {\n            value: item ? item[key].raw.value : 0 + val[key] && val[key].raw ? val[key].raw.value : 0,\n            units: val[key] && val[key].raw ? val[key].raw.units : 'USD',\n        },\n        total: {\n            value: item ? item[key].total.value : 0 + val[key] && val[key].total ? Number(val[key].total.value) : 0,\n            units: val[key] && val[key].total ? val[key].total.units : null,\n        },\n        usage: {\n            value: item ? item[key].usage.value : 0 + val[key] && val[key].usage ? Number(val[key].usage.value) : 0,\n            units: val[key] && val[key].usage ? val[key].usage.units : null,\n        },\n    };\n}\nfunction getUsageData(val, item) {\n    return {\n        capacity: {\n            value: item ? item.capacity.value : 0 + val.capacity ? val.capacity.value : 0,\n            units: val.capacity ? val.capacity.units : 'Core-Hours',\n        },\n        limit: {\n            value: item ? item.limit.value : 0 + val.limit ? val.limit.value : 0,\n            units: val.limit ? val.limit.units : 'Core-Hours',\n        },\n        request: {\n            value: item ? item.request.value : 0 + val.request ? val.request.value : 0,\n            units: val.request ? val.request.units : 'Core-Hours',\n        },\n        usage: {\n            value: item ? item.usage.value : 0 + val.usage ? val.usage.value : 0,\n            units: val.usage ? val.usage.units : 'Core-Hours',\n        },\n    };\n}\nexport function getUnsortedComputedReportItems({ report, idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint && dataPoint.values) {\n            const type = dataPoint.type;\n            dataPoint.values.forEach((val) => {\n                // Ensure unique map IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && val.cluster ? `-${val.cluster}` : '';\n                // org_unit_id workaround for storage and instance-type APIs\n                let id = idKey === 'org_entities' ? val.org_unit_id : val[idKey];\n                if (id === undefined) {\n                    id = val.id || val.date;\n                }\n                const mapId = `${id}${idSuffix}`;\n                // 'clusters' will contain either the cluster alias or default cluster ID\n                const cluster_alias = val.clusters && val.clusters.length > 0 ? val.clusters[0] : undefined;\n                const cluster = cluster_alias || val.cluster;\n                const clusters = val.clusters ? val.clusters : [];\n                const date = val.date;\n                const delta_percent = val.delta_percent ? val.delta_percent : 0;\n                const delta_value = val.delta_value ? val.delta_value : 0;\n                const source_uuid = val.source_uuid ? val.source_uuid : [];\n                let label;\n                const itemLabelKey = getItemLabel({ report, idKey, value: val });\n                if (itemLabelKey === 'org_entities' && val.alias) {\n                    label = val.alias;\n                }\n                else if (itemLabelKey === 'account' && val.account_alias) {\n                    label = val.account_alias;\n                }\n                else if (itemLabelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (val[itemLabelKey] instanceof Object) {\n                    label = val[itemLabelKey].value;\n                }\n                else {\n                    label = val[itemLabelKey];\n                }\n                if (label === undefined) {\n                    label = val.alias ? val.alias : val.id;\n                }\n                const item = itemMap.get(mapId);\n                if (item) {\n                    // This code block is typically entered with filter[resolution]=monthly\n                    itemMap.set(mapId, Object.assign(Object.assign(Object.assign({}, item), getUsageData(val, item)), { // capacity, limit, request, & usage\n                        cluster,\n                        clusters,\n                        date,\n                        delta_percent,\n                        delta_value, cost: getCostData(val, 'cost', item), id, infrastructure: getCostData(val, 'infrastructure', item), label,\n                        source_uuid, supplementary: getCostData(val, 'supplementary', item), type }));\n                }\n                else {\n                    // This code block is typically entered with filter[resolution]=daily\n                    itemMap.set(mapId, Object.assign(Object.assign({}, getUsageData(val)), { // capacity, limit, request, & usage\n                        cluster,\n                        clusters, cost: getCostData(val, 'cost'), date,\n                        delta_percent,\n                        delta_value,\n                        id, infrastructure: getCostData(val, 'infrastructure'), label,\n                        source_uuid, supplementary: getCostData(val, 'supplementary'), type }));\n                }\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\n","import { tagPrefix } from 'api/queries/query';\nexport function getItemLabel({ idKey, report, value }) {\n    let itemLabelKey = String(idKey);\n    if (report.meta && report.meta.group_by) {\n        const group_by = report.meta.group_by;\n        for (const key of Object.keys(group_by)) {\n            if (key.indexOf(tagPrefix)) {\n                const tagPrefixKey = tagPrefix + idKey;\n                if (value.hasOwnProperty(tagPrefixKey)) {\n                    itemLabelKey = tagPrefixKey;\n                }\n            }\n        }\n    }\n    return itemLabelKey;\n}\n","import { EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nconst LoadingStateBase = ({ t }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n        React.createElement(Spinner, { size: \"lg\" }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, title),\n        React.createElement(EmptyStateBody, null, subTitle)));\n};\nconst LoadingState = withTranslation()(LoadingStateBase);\nexport { LoadingState };\n","import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */ ? getValueForItem(a, options) : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */ ? getValueForItem(b, options) : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","import './emptyValueState.scss';\nimport { MinusIcon } from '@patternfly/react-icons/dist/js/icons/minus-icon';\nimport React from 'react';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: \"emptyValueContainer\" },\n        React.createElement(MinusIcon, null)));\n};\n","import './reportSummary.scss';\nimport { Card, CardBody, CardFooter, CardTitle, Title } from '@patternfly/react-core';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nconst ReportSummaryBase = ({ children, detailsLink, title, subTitle, status }) => (React.createElement(Card, { className: \"reportSummary\" },\n    React.createElement(CardTitle, null,\n        React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: \"subtitle\" }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: \"xs\" }),\n        React.createElement(Skeleton, { className: \"chartSkeleton\", size: \"md\" }),\n        React.createElement(Skeleton, { size: \"sm\" }),\n        React.createElement(Skeleton, { className: \"legendSkeleton\", size: \"xs\" }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst ReportSummary = withTranslation()(ReportSummaryBase);\nexport { ReportSummary };\n","import './reportSummaryAlt.scss';\nimport { Card, CardBody, CardFooter, CardTitle, Grid, GridItem, Title } from '@patternfly/react-core';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, tabs, title, }) => (React.createElement(Card, { className: \"reportSummary\" },\n    React.createElement(Grid, { hasGutter: true },\n        React.createElement(GridItem, { xl: 8 },\n            React.createElement(\"div\", { className: \"cost\" },\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, title),\n                    Boolean(subTitle) && React.createElement(\"p\", { className: \"subtitle\" }, subTitle)),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: \"xs\" }),\n                    React.createElement(Skeleton, { className: \"chartSkeleton\", size: \"md\" }),\n                    React.createElement(Skeleton, { size: \"sm\" }),\n                    React.createElement(Skeleton, { className: \"legendSkeleton\", size: \"xs\" }))) : (children)))),\n        React.createElement(GridItem, { xl: 4 },\n            React.createElement(\"div\", { className: \"tops\" }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink))))))));\nconst ReportSummaryAlt = withTranslation()(OcpCloudReportSummaryAltBase);\nexport { ReportSummaryAlt };\n","import './reportSummaryDetails.scss';\nimport { Tooltip } from '@patternfly/react-core';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nconst ReportSummaryDetailsBase = ({ chartType, computedReportItem = 'cost', computedReportItemValue = 'total', costLabel, formatValue, formatOptions, report, requestFormatOptions, requestLabel, reportType, showTooltip = false, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let supplementaryCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const hasTotal = report && report.meta && report.meta.total;\n    const hasCost = hasTotal && report.meta.total.cost && report.meta.total.cost.total;\n    const hasCount = hasTotal && report.meta.total.count;\n    const hasSupplementaryCost = hasTotal &&\n        report.meta.total.supplementary &&\n        report.meta.total.supplementary.total &&\n        report.meta.total.supplementary.total.value;\n    const hasInfrastructureCost = hasTotal &&\n        report.meta.total.infrastructure &&\n        report.meta.total.infrastructure[computedReportItemValue] &&\n        report.meta.total.infrastructure[computedReportItemValue].value;\n    const hasRequest = hasTotal && report.meta.total.request;\n    const hasUsage = hasTotal && report.meta.total.usage;\n    if (hasTotal) {\n        cost = formatValue(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD', formatOptions);\n        supplementaryCost = formatValue(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD', formatOptions);\n        infrastructureCost = formatValue(hasInfrastructureCost ? report.meta.total.infrastructure[computedReportItemValue].value : 0, hasInfrastructureCost ? report.meta.total.infrastructure[computedReportItemValue].units : 'USD', formatOptions);\n        request = formatValue(hasRequest ? report.meta.total.request.value : 0, hasRequest ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        if (hasUsage && report.meta.total.usage.value >= 0) {\n            usage = formatValue(hasUsage ? report.meta.total.usage.value : 0, hasUsage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Workaround for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(hasUsage ? report.meta.total.usage : 0, hasCount ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = (showAltHeroFont = false) => {\n        let value = cost;\n        if (computedReportItem === \"infrastructure\" /* infrastructure */) {\n            value = infrastructureCost;\n        }\n        else if (computedReportItem === \"supplementary\" /* supplementary */) {\n            value = supplementaryCost;\n        }\n        const altHeroFont = showAltHeroFont ? 'Alt' : '';\n        return (React.createElement(\"div\", { className: \"valueContainer\" },\n            showTooltip ? (React.createElement(Tooltip, { content: t('dashboard.total_cost_tooltip', {\n                    infrastructureCost,\n                    supplementaryCost,\n                }), enableFlip: true },\n                React.createElement(\"div\", { className: `value${altHeroFont}` }, value))) : (React.createElement(\"div\", { className: `value${altHeroFont}` }, value)),\n            React.createElement(\"div\", { className: \"text\" },\n                React.createElement(\"div\", null, costLabel))));\n    };\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasRequest ? report.meta.total.request.units : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: \"valueContainer\" },\n            React.createElement(\"span\", { className: \"value\" }, request),\n            Boolean(showUnits && (units || (hasRequest && report.meta.total.request.value >= 0))) && (React.createElement(\"span\", { className: \"units\" }, unitsLabel)),\n            React.createElement(\"div\", { className: \"text\" },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasUsage ? report.meta.total.usage.units : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: \"valueContainer\" },\n            React.createElement(\"span\", { className: \"value\" }, usage),\n            Boolean(showUnits && (units || (hasUsage && report.meta.total.usage.value >= 0))) && (React.createElement(\"span\", { className: \"units\" }, unitsLabel)),\n            React.createElement(\"div\", { className: \"text\" },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (chartType === \"cost\" /* cost */ || chartType === \"supplementary\" /* supplementary */) {\n        return React.createElement(React.Fragment, null, getCostLayout(reportType === \"cost\" /* cost */));\n    }\n    else if (chartType === \"trend\" /* trend */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout(reportType === \"cost\" /* cost */)));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(reportType === \"cost\" /* cost */),\n            getUsageLayout()));\n    }\n    else if (chartType === \"usage\" /* usage */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n    else {\n        return null;\n    }\n};\nconst ReportSummaryDetails = withTranslation()(ReportSummaryDetailsBase);\nexport { ReportSummaryDetails };\n","import './reportSummaryItem.scss';\nimport { Progress, ProgressSize } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nconst ReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: \"reportSummaryItem\" },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst ReportSummaryItem = withTranslation()(ReportSummaryItemBase);\nexport { ReportSummaryItem };\n","import './reportSummaryItems.scss';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { getComputedReportItems, } from 'utils/computedReport/getComputedReportItems';\nclass ReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { idKey, report } = this.props;\n        const computedItems = getComputedReportItems({\n            report,\n            idKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [...computedItems.slice(0, otherIndex), ...computedItems.slice(otherIndex + 1), computedItems[otherIndex]];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: \"md\" }),\n                React.createElement(Skeleton, { size: \"md\", className: \"skeleton\" }),\n                React.createElement(Skeleton, { size: \"md\", className: \"skeleton\" }),\n                React.createElement(Skeleton, { size: \"md\", className: \"skeleton\" })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst ReportSummaryItems = withTranslation()(ReportSummaryItemsBase);\nexport { ReportSummaryItems };\n","import { chart_color_black_200 } from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport { chart_color_blue_100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_blue_400 } from '@patternfly/react-tokens/dist/js/chart_color_blue_400';\nimport { chart_color_blue_500 } from '@patternfly/react-tokens/dist/js/chart_color_blue_500';\nimport { chart_color_green_100 } from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport { chart_color_green_200 } from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_green_400 } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { chart_color_green_500 } from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentCostData: {\n        fill: 'none',\n    },\n    currentInfrastructureColorScale: [\n        chart_color_blue_400.value,\n        chart_color_blue_300.value,\n        chart_color_blue_200.value,\n        chart_color_blue_100.value,\n        chart_color_blue_500.value,\n    ],\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    forecastConeData: {\n        fill: chart_color_green_100.value,\n        strokeWidth: 0,\n    },\n    forecastConeDataColorScale: [chart_color_green_100.value],\n    forecastData: {\n        fill: 'none',\n    },\n    forecastDataColorScale: [chart_color_green_200.value],\n    forecastInfrastructureConeData: {\n        fill: chart_color_blue_100.value,\n        strokeWidth: 0,\n    },\n    forecastInfrastructureConeDataColorScale: [chart_color_blue_100.value],\n    forecastInfrastructureData: {\n        fill: 'none',\n    },\n    forecastInfrastructureDataColorScale: [chart_color_blue_200.value],\n    previousCostData: {\n        fill: 'none',\n    },\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxMinValues, getTooltipContent, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, forecastConeData, forecastData, forecastInfrastructureConeData, forecastInfrastructureData, previousInfrastructureCostData, previousCostData, showForecast, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            const costInfrastructureTooltipKey = 'chart.cost_infrastructure_legend_tooltip';\n            const costTooltipKey = 'chart.cost_legend_tooltip';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousCostData, costTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentCostData, costKey, true, false),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentCostData, costTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'previousInfrastructureCost',\n                    data: previousInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(previousInfrastructureCostData, costInfrastructureTooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousInfrastructureCostData), { stroke: chartStyles.previousColorScale[1] }),\n                    },\n                },\n                {\n                    childName: 'currentInfrastructureCost',\n                    data: currentInfrastructureCostData,\n                    legendItem: {\n                        name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                        symbol: {\n                            fill: chartStyles.currentInfrastructureColorScale[1],\n                            type: 'dash',\n                        },\n                        tooltip: getCostRangeString(currentInfrastructureCostData, costInfrastructureTooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentInfrastructureCostData), { stroke: chartStyles.currentInfrastructureColorScale[1] }),\n                    },\n                },\n            ];\n            if (showForecast) {\n                series.push({\n                    childName: 'forecast',\n                    data: forecastData,\n                    legendItem: {\n                        name: getCostRangeString(forecastData, 'chart.cost_forecast_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastData, 'chart.cost_forecast_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastData), { stroke: chartStyles.forecastDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastInfrastructure',\n                    data: forecastInfrastructureData,\n                    legendItem: {\n                        name: getCostRangeString(forecastInfrastructureData, 'chart.cost_infrastructure_forecast_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastInfrastructureDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastInfrastructureData, 'chart.cost_infrastructure_forecast_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastInfrastructureData), { stroke: chartStyles.forecastInfrastructureDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastCone',\n                    data: forecastConeData,\n                    legendItem: {\n                        name: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                            type: 'triangleUp',\n                        },\n                        tooltip: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastConeData), { stroke: chartStyles.forecastConeDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastInfrastructureCone',\n                    data: forecastInfrastructureConeData,\n                    legendItem: {\n                        name: getCostRangeString(forecastInfrastructureConeData, 'chart.cost_infrastructure_forecast_cone_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastInfrastructureConeDataColorScale[0],\n                            type: 'triangleUp',\n                        },\n                        tooltip: getCostRangeString(forecastInfrastructureConeData, 'chart.cost_infrastructure_forecast_cone_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastInfrastructureConeData), { stroke: chartStyles.forecastInfrastructureConeDataColorScale[0] }),\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: this.getTooltipLabel, mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            return React.createElement(ChartLegend, { data: this.getLegendData(), height: 25, gutter: 20, name: \"legend\", responsive: false });\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const formatter = getTooltipContent(formatDatumValue);\n            const dy = datum.y !== undefined && datum.y !== null ? formatter(datum.y, datum.units, formatDatumOptions) : undefined;\n            const dy0 = datum.y0 !== undefined && datum.y0 !== null ? formatter(datum.y0, datum.units, formatDatumOptions) : undefined;\n            if (dy !== undefined && dy0 !== undefined) {\n                return i18next.t('chart.cost_forecast_cone_tooltip', { value0: dy0, value1: dy });\n            }\n            return dy !== undefined ? dy : i18next.t('chart.no_data');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            const { hiddenSeries, series } = this.state;\n            // Toggle forecast confidence\n            const childName = series[props.index].childName;\n            if (childName.indexOf('forecast') !== -1) {\n                let index;\n                for (let i = 0; i < series.length; i++) {\n                    if (series[i].childName === `${childName}Cone`) {\n                        index = i;\n                        break;\n                    }\n                }\n                if (index !== undefined && !hiddenSeries.delete(index)) {\n                    hiddenSeries.add(index);\n                }\n            }\n            if (!hiddenSeries.delete(props.index)) {\n                hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            const unavailable = []; // API data may not be available (e.g., on 1st of month)\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length !== (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map(serie => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height, showForecast } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (showForecast) {\n                    if (width > 650 && width < 1130) {\n                        adjustedContainerHeight += 25;\n                    }\n                    else if (width > 450 && width < 650) {\n                        adjustedContainerHeight += 50;\n                    }\n                    else if (width <= 450) {\n                        adjustedContainerHeight += 75;\n                    }\n                }\n                else {\n                    if (width > 450 && width < 725) {\n                        adjustedContainerHeight += 25;\n                    }\n                    else if (width <= 450) {\n                        adjustedContainerHeight += 50;\n                    }\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = (tooltip = false) => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    const data = Object.assign(Object.assign(Object.assign({ childName: s.childName }, s.legendItem), (tooltip && { name: s.legendItem.tooltip })), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                    return data;\n                });\n                return tooltip ? result : result.filter(d => d.childName.indexOf('Cone') === -1);\n            }\n            return undefined;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !== this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.forecastConeData !== this.props.forecastConeData ||\n            prevProps.forecastData !== this.props.forecastData ||\n            prevProps.forecastInfrastructureConeData !== this.props.forecastInfrastructureConeData ||\n            prevProps.forecastInfrastructureData !== this.props.forecastInfrastructureData ||\n            prevProps.previousInfrastructureCostData !== this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { series } = this.state;\n        const domain = { x: [1, 31] };\n        let maxValue = 0;\n        let minValue = 0;\n        if (series) {\n            series.forEach((s, index) => {\n                if (!this.isSeriesHidden(index) && s.data && s.data.length !== 0) {\n                    const { max, min } = getMaxMinValues(s.data);\n                    maxValue = Math.max(maxValue, max);\n                    if (minValue === 0) {\n                        minValue = min;\n                    }\n                    else {\n                        minValue = Math.min(minValue, min);\n                    }\n                }\n            });\n        }\n        const threshold = maxValue * 0.1;\n        const max = maxValue > 0 ? Math.ceil(maxValue + threshold) : 0;\n        const _min = minValue > 0 ? Math.max(0, Math.floor(minValue - threshold)) : 0;\n        const min = _min > 0 ? _min : 0;\n        if (max > 0) {\n            domain.y = [min, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, forecastData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentCostDate = currentCostData ? getDate(getDateRange(currentCostData, true, true)[1]) : 0;\n        const forecastCostDate = forecastData ? getDate(getDateRange(forecastData, true, true)[1]) : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData ? getDate(getDateRange(previousCostData, true, true)[1]) : 0;\n        return currentInfrastructureDate > 0 ||\n            currentCostDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentCostDate, forecastCostDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, series, width } = this.state;\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !this.isDataAvailable(),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: this.getLegendData(true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nexport { CostChart };\n","import './reportSummaryCost.scss';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nconst ReportSummaryCost = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { ReportSummaryCost };\n","import chart_color_black_200 from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport chart_color_green_100 from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport chart_color_green_200 from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport chart_color_green_400 from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport chart_color_green_500 from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    forecastConeData: {\n        fill: chart_color_green_100.value,\n        strokeWidth: 0,\n    },\n    forecastConeDataColorScale: [chart_color_green_100.value],\n    forecastData: {\n        fill: 'none',\n    },\n    forecastDataColorScale: [chart_color_green_200.value],\n    itemsPerRow: 4,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxMinValues, getTooltipContent, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, forecastData, forecastConeData, previousData, showForecast, showSupplementaryLabel = false, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : showSupplementaryLabel\n                    ? 'chart.cost_supplementary_legend_label'\n                    : 'chart.cost_legend_label';\n            const tooltipKey = showUsageLegendLabel\n                ? 'chart.usage_legend_tooltip'\n                : showSupplementaryLabel\n                    ? 'chart.cost_supplementary_legend_tooltip'\n                    : 'chart.cost_legend_tooltip';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousCost',\n                    data: previousData,\n                    legendItem: {\n                        name: getCostRangeString(previousData, key, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.previousColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(previousData, tooltipKey, false, false, 1),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                    },\n                },\n                {\n                    childName: 'currentCost',\n                    data: currentData,\n                    legendItem: {\n                        name: getCostRangeString(currentData, key, true, false),\n                        symbol: {\n                            fill: chartStyles.currentColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(currentData, tooltipKey, false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[0] }),\n                    },\n                },\n            ];\n            if (showForecast) {\n                series.push({\n                    childName: 'forecast',\n                    data: forecastData,\n                    legendItem: {\n                        name: getCostRangeString(forecastData, 'chart.cost_forecast_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastDataColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getCostRangeString(forecastData, 'chart.cost_forecast_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastData), { stroke: chartStyles.forecastDataColorScale[0] }),\n                    },\n                });\n                series.push({\n                    childName: 'forecastCone',\n                    data: forecastConeData,\n                    legendItem: {\n                        name: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_label', false, false),\n                        symbol: {\n                            fill: chartStyles.forecastConeDataColorScale[0],\n                            type: 'triangleUp',\n                        },\n                        tooltip: getCostRangeString(forecastConeData, 'chart.cost_forecast_cone_legend_tooltip', false, false),\n                    },\n                    style: {\n                        data: Object.assign(Object.assign({}, chartStyles.forecastConeData), { stroke: chartStyles.forecastConeDataColorScale[0] }),\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: this.getTooltipLabel, mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 50,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { data: this.getLegendData(), gutter: 20, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical' }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const formatter = getTooltipContent(formatDatumValue);\n            const dy = datum.y !== undefined && datum.y !== null ? formatter(datum.y, datum.units, formatDatumOptions) : undefined;\n            const dy0 = datum.y0 !== undefined && datum.y0 !== null ? formatter(datum.y0, datum.units, formatDatumOptions) : undefined;\n            if (dy !== undefined && dy0 !== undefined) {\n                return i18next.t('chart.cost_forecast_cone_tooltip', { value0: dy0, value1: dy });\n            }\n            return dy !== undefined ? dy : i18next.t('chart.no_data');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            const { hiddenSeries, series } = this.state;\n            // Toggle forecast confidence\n            const childName = series[props.index].childName;\n            if (childName.indexOf('forecast') !== -1) {\n                let index;\n                for (let i = 0; i < series.length; i++) {\n                    if (series[i].childName === `${childName}Cone`) {\n                        index = i;\n                        break;\n                    }\n                }\n                if (index !== undefined && !hiddenSeries.delete(index)) {\n                    hiddenSeries.add(index);\n                }\n            }\n            if (!hiddenSeries.delete(props.index)) {\n                hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            const unavailable = []; // API data may not be available (e.g., on 1st of month)\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length !== (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map(serie => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height, showForecast } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (showForecast) {\n                    if (width < 700) {\n                        adjustedContainerHeight += 25;\n                    }\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = (tooltip = false) => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign(Object.assign({ childName: s.childName }, s.legendItem), (tooltip && { name: s.legendItem.tooltip })), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return tooltip ? result : result.filter(d => d.childName.indexOf('Cone') === -1);\n            }\n            return undefined;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.forecastData !== this.props.forecastData ||\n            prevProps.forecastConeData !== this.props.forecastConeData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { series } = this.state;\n        const domain = { x: [1, 31] };\n        let maxValue = 0;\n        let minValue = 0;\n        if (series) {\n            series.forEach((s, index) => {\n                if (!this.isSeriesHidden(index) && s.data && s.data.length !== 0) {\n                    const { max, min } = getMaxMinValues(s.data);\n                    maxValue = Math.max(maxValue, max);\n                    if (minValue === 0) {\n                        minValue = min;\n                    }\n                    else {\n                        minValue = Math.min(minValue, min);\n                    }\n                }\n            });\n        }\n        const threshold = maxValue * 0.1;\n        const max = maxValue > 0 ? Math.ceil(maxValue + threshold) : 0;\n        const _min = minValue > 0 ? Math.max(0, Math.floor(minValue - threshold)) : 0;\n        const min = _min > 0 ? _min : 0;\n        if (max > 0) {\n            domain.y = [min, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, forecastData, previousData } = this.props;\n        const previousDate = previousData ? getDate(getDateRange(previousData, true, true)[1]) : 0;\n        const currentDate = currentData ? getDate(getDateRange(currentData, true, true)[1]) : 0;\n        const forecastDate = forecastData ? getDate(getDateRange(forecastData, true, true)[1]) : 0;\n        return currentDate > 0 || previousDate > 0 ? Math.max(currentDate, forecastDate, previousDate) : 31;\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, series, width } = this.state;\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !this.isDataAvailable(),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: this.getLegendData(true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nexport { TrendChart };\n","import './reportSummaryTrend.scss';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nconst ReportSummaryTrend = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { ReportSummaryTrend };\n","import chart_color_black_200 from '@patternfly/react-tokens/dist/js/chart_color_black_200';\nimport chart_color_green_100 from '@patternfly/react-tokens/dist/js/chart_color_green_100';\nimport chart_color_green_200 from '@patternfly/react-tokens/dist/js/chart_color_green_200';\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport chart_color_green_400 from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport chart_color_green_500 from '@patternfly/react-tokens/dist/js/chart_color_green_500';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const chartStyles = {\n    chartContainer: {\n        marginTop: global_spacer_lg.value,\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: chart_color_green_300.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: chart_color_green_400.value,\n        },\n    },\n    itemsPerRow: 2,\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_black_200.value,\n        chart_color_green_400.value,\n        chart_color_black_200.value,\n        chart_color_green_300.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: chart_color_black_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: chart_color_black_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_400.value,\n        chart_color_green_300.value,\n        chart_color_green_200.value,\n        chart_color_green_100.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [chart_color_black_200.value, chart_color_black_200.value],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxMinValues, getTooltipContent, getUsageRangeString, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const usageTooltipKey = 'chart.usage_legend_tooltip';\n            const requestKey = 'chart.requests_legend_label';\n            const requestTooltipKey = 'chart.requests_legend_tooltip';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const series = [\n                {\n                    childName: 'previousUsage',\n                    data: previousUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.legendColorScale[0],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(previousUsageData, usageTooltipKey, false, false, 1),\n                    },\n                    style: chartStyles.previousUsageData,\n                },\n                {\n                    childName: 'currentUsage',\n                    data: currentUsageData,\n                    legendItem: {\n                        name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                        symbol: {\n                            fill: chartStyles.legendColorScale[1],\n                            type: 'minus',\n                        },\n                        tooltip: getUsageRangeString(currentUsageData, usageTooltipKey, false, false),\n                    },\n                    style: chartStyles.currentUsageData,\n                },\n                {\n                    childName: 'previousRequest',\n                    data: previousRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                        symbol: {\n                            fill: chartStyles.legendColorScale[2],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(previousRequestData, requestTooltipKey, false, false, 1),\n                    },\n                    style: chartStyles.previousRequestData,\n                },\n                {\n                    childName: 'currentRequest',\n                    data: currentRequestData,\n                    legendItem: {\n                        name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                        symbol: {\n                            fill: chartStyles.legendColorScale[3],\n                            type: 'dash',\n                        },\n                        tooltip: getUsageRangeString(currentRequestData, requestTooltipKey, false, false),\n                    },\n                    style: chartStyles.currentRequestData,\n                },\n            ];\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: this.getTooltipLabel, mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow ? legendItemsPerRow : width > 300 ? chartStyles.itemsPerRow : 1;\n            return React.createElement(ChartLegend, { data: this.getLegendData(), height: 25, gutter: 20, itemsPerRow: itemsPerRow, name: \"legend\" });\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const formatter = getTooltipContent(formatDatumValue);\n            return datum.y !== undefined && datum.y !== null\n                ? formatter(datum.y, datum.units, formatDatumOptions)\n                : i18next.t('chart.no_data');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            const unavailable = []; // API data may not be available (e.g., on 1st of month)\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length !== (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width < 480) {\n                    adjustedContainerHeight += 20;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map(serie => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = (tooltip = false) => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign(Object.assign({ childName: s.childName }, s.legendItem), (tooltip && { name: s.legendItem.tooltip })), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { series } = this.state;\n        const domain = { x: [1, 31] };\n        let maxValue = 0;\n        let minValue = 0;\n        if (series) {\n            series.forEach((s, index) => {\n                if (!this.isSeriesHidden(index) && s.data && s.data.length !== 0) {\n                    const { max, min } = getMaxMinValues(s.data);\n                    maxValue = Math.max(maxValue, max);\n                    if (minValue === 0) {\n                        minValue = min;\n                    }\n                    else {\n                        minValue = Math.min(minValue, min);\n                    }\n                }\n            });\n        }\n        const threshold = maxValue * 0.1;\n        const max = maxValue > 0 ? Math.ceil(maxValue + threshold) : 0;\n        const _min = minValue > 0 ? Math.max(0, Math.floor(minValue - threshold)) : 0;\n        const min = _min > 0 ? _min : 0;\n        if (max > 0) {\n            domain.y = [min, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData } = this.props;\n        const currentRequestDate = currentRequestData ? getDate(getDateRange(currentRequestData, true, true)[1]) : 0;\n        const currentUsageDate = currentUsageData ? getDate(getDateRange(currentUsageData, true, true)[1]) : 0;\n        const previousRequestDate = previousRequestData ? getDate(getDateRange(previousRequestData, true, true)[1]) : 0;\n        const previousUsageDate = previousUsageData ? getDate(getDateRange(previousUsageData, true, true)[1]) : 0;\n        return currentRequestDate > 0 || currentUsageDate > 0 || previousRequestDate > 0 || previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, padding = {\n            bottom: 75,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, title, } = this.props;\n        const { cursorVoronoiContainer, series, width } = this.state;\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !this.isDataAvailable(),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: this.getLegendData(true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, title),\n            React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n                React.createElement(\"div\", { style: { height, width } },\n                    React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                        series &&\n                            series.map((s, index) => {\n                                return this.getChart(s, index);\n                            }),\n                        React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                        React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))))));\n    }\n}\nexport { UsageChart };\n","import './reportSummaryUsage.scss';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nconst ReportSummaryUsage = props => (React.createElement(\"div\", { className: \"chart\" },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { ReportSummaryUsage };\n","export const getReleasePath = () => {\n    const pathName = window.location.pathname.split('/');\n    pathName.shift();\n    let release = '';\n    if (pathName[0] === 'beta') {\n        release = `/beta`;\n    }\n    return release;\n};\n","import { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/components/PageHeader';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nconst Loading = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(LoadingState, null))));\n};\nexport default withRouter(Loading);\n","import Loading from './loading';\nexport default Loading;\n","module.exports = __webpack_public_path__ + \"8a2acb5e9233030023f599e0f04ebd7f.svg\";","import './costIcon.scss';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nconst icon = require('./Cost-icon.svg');\nconst CostIcon = ({ className, t }) => {\n    return React.createElement(\"img\", { className: `cost-icon ${className}`, src: icon, alt: t('cost_management'), \"aria-hidden\": \"true\" });\n};\nexport default withTranslation()(CostIcon);\n","import CostIcon from './costIcon';\nexport default CostIcon;\n","import global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    iconSpacer: {\n        marginLeft: global_spacer_xs.value,\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/js/icons/external-link-alt-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/js/icons/plus-circle-icon';\nimport CostIcon from 'components/icons/costIcon';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { withRouter } from 'react-router';\nimport { getReleasePath } from 'utils/pathname';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getDocLink = (textKey, urlKey) => {\n            const { t } = this.props;\n            return (React.createElement(\"a\", { href: t(urlKey), rel: \"noreferrer\", target: \"_blank\" },\n                t(textKey),\n                React.createElement(\"span\", { style: styles.iconSpacer },\n                    React.createElement(ExternalLinkAltIcon, null))));\n        };\n        this.getRouteToSources = () => {\n            const release = getReleasePath();\n            return `${release}/settings/sources`;\n        };\n    }\n    render() {\n        const { providerType, t } = this.props;\n        let descKey = 'no_providers_state.overview_desc';\n        let titleKey = 'no_providers_state.overview_title';\n        let docUrlKey;\n        let icon;\n        let textKey;\n        switch (providerType) {\n            case \"aws\" /* aws */:\n                descKey = 'no_providers_state.aws_desc';\n                titleKey = 'no_providers_state.aws_title';\n                break;\n            case \"azure\" /* azure */:\n                descKey = 'no_providers_state.azure_desc';\n                titleKey = 'no_providers_state.azure_title';\n                break;\n            case \"gcp\" /* gcp */:\n                descKey = 'no_providers_state.gcp_desc';\n                titleKey = 'no_providers_state.gcp_title';\n                break;\n            case \"ocp\" /* ocp */:\n                descKey = 'no_providers_state.ocp_desc';\n                docUrlKey = 'docs.add_ocp_sources';\n                textKey = 'no_providers_state.ocp_add_sources';\n                titleKey = 'no_providers_state.ocp_title';\n                break;\n            default:\n                icon = CostIcon;\n        }\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n            React.createElement(EmptyStateIcon, { icon: icon ? icon : PlusCircleIcon }),\n            React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, t(titleKey)),\n            React.createElement(EmptyStateBody, null, t(descKey)),\n            docUrlKey && textKey ? (React.createElement(\"div\", { style: styles.viewSources }, this.getDocLink(textKey, docUrlKey))) : (React.createElement(Button, { variant: \"primary\", component: \"a\", href: this.getRouteToSources() }, t('no_providers_state.get_started')))));\n    }\n}\nconst NoProvidersState = withRouter(withTranslation()(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/components/PageHeader';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { NoProvidersState } from './noProvidersState';\nconst NoProviders = ({ providerType, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(NoProvidersState, { providerType: providerType }))));\n};\nexport default withRouter(NoProviders);\n","import NoProviders from './noProviders';\nexport default NoProviders;\n"],"sourceRoot":""}