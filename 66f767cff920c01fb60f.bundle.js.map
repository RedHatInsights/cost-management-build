{"version":3,"sources":["webpack:///./src/pages/azureDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartLabelTooltip/chartLabelTooltip.tsx","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpOnAwsReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.tsx","webpack:///./src/pages/azureDetails/detailsHeader.styles.ts","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/azureDetails/azureDetails.styles.ts","webpack:///./src/pages/azureDetails/groupBy.styles.ts","webpack:///./src/pages/azureDetails/groupBy.tsx","webpack:///./src/pages/azureDetails/detailsHeader.tsx","webpack:///./src/pages/azureDetails/detailsTagModal.styles.ts","webpack:///./src/pages/azureDetails/detailsTagView.tsx","webpack:///./src/pages/azureDetails/detailsTagModal.tsx","webpack:///./src/pages/azureDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/azureDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/azureDetails/detailsWidgetModal.tsx","webpack:///./src/pages/azureDetails/exportModal.styles.ts","webpack:///./src/pages/azureDetails/exportModal.tsx","webpack:///./src/pages/azureDetails/historicalChart.styles.ts","webpack:///./src/pages/azureDetails/historicalChart.tsx","webpack:///./src/pages/azureDetails/historicalModal.styles.ts","webpack:///./src/pages/azureDetails/historicalModal.tsx","webpack:///./src/pages/azureDetails/detailsActions.tsx","webpack:///./src/pages/azureDetails/detailsTable.styles.ts","webpack:///./src/pages/azureDetails/detailsTableItem.styles.ts","webpack:///./src/pages/azureDetails/detailsTag.styles.ts","webpack:///./src/pages/azureDetails/detailsTag.tsx","webpack:///./src/pages/azureDetails/detailsWidget.styles.ts","webpack:///./src/pages/azureDetails/detailsWidgetView.tsx","webpack:///./src/pages/azureDetails/detailsWidget.tsx","webpack:///./src/pages/azureDetails/detailsTableItem.tsx","webpack:///./src/pages/azureDetails/detailsTable.tsx","webpack:///./src/pages/azureDetails/detailsToolbar.styles.ts","webpack:///./src/pages/azureDetails/detailsToolbar.tsx","webpack:///./src/pages/azureDetails/azureDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_azureDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpOnAwsReport","utils_getComputedOcpOnAwsReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getDateRangeString","i18next__WEBPACK_IMPORTED_MODULE_5__","t","count","endDate","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getMonthRangeString","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","getTooltipLabel","formatOptions","toString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","__rest","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","ChartLabelTooltip","_a","content","props","react_default","createElement","Tooltip","enableFlip","ChartLabel","assign","LAYOUT_PROPS","padding","theme_koku","area","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpOnAwsReportItems","getUnsortedComputedOcpOnAwsReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","className","minus_icon","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","colorScale","esm","labels","fontFamily","minWidth","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","width","initDatum","currentData","previousData","legendData","chartUtils","push","symbol","setState","chartDatum","charts","show","onClick","handleCostLegendClick","newDatum","index","handleResize","current","clientWidth","getChart","ChartArea","interpolation","getLegend","title","eventHandlers","target","mutation","ChartLegend","events","gutter","labelComponent","chartLabelTooltip","getLegendTooltip","orientation","formatDatumValue","formatDatumOptions","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","result","trim","containerHeight","ChartVoronoiContainer","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","legendVisible","isLegendVisible","ref","Chart","containerComponent","legendComponent","undefined","legendPosition","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","itemsPerRow","marginLeft","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AzureReportSummary","children","detailsLink","subTitle","subTitleTooltip","status","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","azureReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AzureReportSummaryAlt","tabs","Grid","GridItem","lg","xl","azureReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","AzureReportSummaryDetails","costLabel","reportType","showUnits","usageLabel","emptyValueState","meta","total","usageUnits","unitsLabel","utils_formatValue","azureReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AzureReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AzureReportSummaryItem","azureReportSummaryItems_styles_styles","skeleton","AzureReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","azureReportSummaryTrend_styles_styles","AzureReportSummaryTrend","trendChart","_patternfly_react_styles__WEBPACK_IMPORTED_MODULE_0__","costValue","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_1__","costLabelUnit","costLabelDate","header","backgroundColor","getIdKeyForNavItem","navItem","TertiaryNav","react_router_dom__WEBPACK_IMPORTED_MODULE_9__","react_i18next__WEBPACK_IMPORTED_MODULE_8__","react__WEBPACK_IMPORTED_MODULE_7___default","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","itemId","isActive","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","_patternfly_react_styles__WEBPACK_IMPORTED_MODULE_6__","_pages_azureDetails_detailsHeader_styles__WEBPACK_IMPORTED_MODULE_10__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","handleOnSelect","selectedItem","history","replace","availableNavItems","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","onSelect","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_4__","variant","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_5__","tertiary","val","azureDetails","paddingTop","paginationContainer","pagination","tableContainer","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","queryString","azureQuery","filter","resolution","time_scope_units","time_scope_value","key_only","azureReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","getDropDownTags","Set","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","detailsHeader_styles","tertiaryNav","date","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","isArray","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","azureReportSummary","_item","DetailsWidgetModal","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_mapStateToProps","error","azureExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","Button","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","azureReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","azureReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","azureDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","addTag","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","toolbarContainer","paddingLeft","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","sizes","headingLevel","resultsTotal","Chip","azureDetails_reportType","azureDetails_baseQuery","azureDetails_mapStateToProps","azureDetails_mapDispatchToProps","getFilterFields","groupByTag","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","newFilterType","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"oIAEAA,EAAA,QAAAC,OAAAC,EAAA,IAAAD,CAAAE,EAAA,CAAAC,EAAA,2JCFA,MAAAC,EAAAC,IACA,MAAAC,EAAAD,IAAAE,cAAA,GACA,OAAAD,GACA,UACA,SACA,eACA,YACA,iBACA,UACA,aACA,OAAAA,EACA,QACA,WAGAE,EAAA,CAAAC,EAAAJ,EAAAK,QACA,MAAAJ,EAAAF,EAAAC,GACAM,EAAAF,GAAA,EACA,OAAAH,GACA,UACA,OAAAM,EAAAD,EAAAL,EAAAI,GACA,SACA,eACA,YACA,aACA,OAAAG,EAAAF,EAAAL,EAAAI,GACA,iBACA,UACA,OAAAI,EAAAH,EAAAL,EAAAI,GACA,QACA,OAAAK,EAAAJ,EAAAL,EAAAI,KAGAK,EAAA,CAAAN,EAAAO,GAA6CC,uBAC7CR,EAAAS,QAAAD,GAEAL,EAAA,CAAAH,EAAAJ,GAA6CY,iBAAA,SAC7C,IAAAN,EAAAF,EAIA,OAHAA,IACAE,EAAA,GAEAA,EAAAQ,eAAA,MACAC,MAAA,WACAC,SAAAhB,GAAA,MACAiB,sBAAAL,EACAM,sBAAAN,KAGAJ,EAAA,CAAAJ,EAAAO,GAA6CC,iBAAA,QAC7CR,EAAAS,QAAAD,GAEAH,EAAA,CAAAL,EAAAO,GAA8CC,uBAC9CR,EAAAS,QAAAD,qGCpDA,MACAO,EAAAC,KAAsCC,cAAAD,IACtCE,GACAC,SACAC,oBAAA,sBACAC,QAAA,UACAC,cAAA,gBACAC,aAAA,gBAEAC,QACAC,WAAA,aACAC,WAAA,cAEAC,OACAC,MAAA,QACAC,KAAA,aACAC,eAAA,iBACAC,eAAA,iBACAC,OAAA,UAEAC,UACAA,SAAA,WACAC,SAAA,WACAC,cAAA,iBACAC,OAAA,UAEAC,YACAC,WAAA,aACAC,SAAA,WACAC,aAAA,eACAC,UAAA,YACAC,cAAA,gBACAC,aAAA,kBACAC,aAAA,kBACAC,aAAA,kBACAC,WAAA,aACAC,YAAA,cACAC,YAAA,cACAC,SAAA,WACAC,gBAAA,kBACAC,UAAA,aAEAC,WACAC,QAAA,UACAC,aAAA,eACA7B,WAAA,aACA8B,oBAAA,sBACAT,WAAA,sBACAU,oBAAA,+BACAC,iBAAA,4BACA/B,WAAA,aACAgC,WAAA,sBACAC,cAAA,gBAEAC,SACAC,IAAA,eACAC,KAAA,oBACAC,SAAA,2gBC7CA,SAAAC,EAAAC,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,QACA,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAAAlF,OAAAmF,EAAA,EAAAnF,CAAA8E,GACA,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAZ,GAAAY,EAAAb,SAGA,SAAAiB,EAAAnB,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,QACA,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAAAlF,OAAA8F,EAAA,EAAA9F,CAAA8E,GACA,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAZ,GAAAY,EAAAb,SAGA,SAAAmB,EAAArB,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,QACA,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAAAlF,OAAAgG,EAAA,EAAAhG,CAAA8E,GACA,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAZ,GAAAY,EAAAb,SAGA,SAAAqB,EAAAvB,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,sBACA,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAAAlF,OAAAkG,EAAA,EAAAlG,CAAA8E,GACA,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAF,EAAAI,EAAAD,EAAAZ,GAAAY,EAAAb,SAGA,SAAAU,EAAA7E,EAAA0F,EAAApB,EAAA,QAwGA,IAAAqB,EAjGA,OACAC,EAPA,SAAAtB,EAAAuB,IAAAH,EAAA1E,IAAA0E,EAAAI,MAQAX,GA+FAQ,EAtGA3F,EAuGA+F,OAAAJ,UAAA,KAtGAK,WAAAhG,EAAAS,QAAA,IAkGA,SAAAkF,GACA,OAAAI,OAAAJ,UAAA,KAlGAM,CAAAjG,GACAA,EACA,GAIAmE,IAAAuB,EAAA1E,GACAkF,KAAAR,EAAA1E,GACAmF,MAAAT,EAAAS,OAiBA,SAAAC,EAAAC,EAAAC,GAAA,EAAAC,GAAA,EAAAC,EAAA,GACA,MAAAC,EAAAC,GAfA,SAAAL,EAAAG,EAAA,GACA,IAAAH,MAAAnB,OAAA,CACA,MAAAyB,EAAA,IAAAC,KAMA,OAJAJ,GACAG,EAAAE,SAAAF,EAAAG,WAAAN,IAEAO,IAAAJ,GACAA,GAIA,OAFA,IAAAC,KAAAP,EAAA,GAAAlC,IAAA,aACA,IAAAyC,KAAAP,IAAAnB,OAAA,GAAAf,IAAA,cAIA6C,CAAAX,EAAAG,GAKA,GAHAF,GAAAG,EAAAQ,SACAR,EAAAQ,QAAA,GAEAV,GAAAE,EAAAQ,QAAA,CACA,MAAAC,EAAAC,IAAAV,GAAAW,UACAV,EAAAO,QAAAC,GAEA,OAAAT,EAAAC,GAEA,SAAAW,EAAAhB,EAAAC,GAAA,EAAAC,GAAA,EAAAC,EAAA,GACA,MAAAC,EAAAC,GAAAN,EAAAC,EAAAC,EAAAC,EAAAC,GAQA,OAPAc,EAAA,EAAAC,EAAA,oBACAC,MAAA3B,IAAAa,GACAe,QAAAC,IAAAhB,EAAA,MACAiB,MAAA5B,OAAA2B,IAAAjB,EAAA,QACAmB,UAAAF,IAAAjB,EAAA,MACAoB,KAAAC,IAAApB,KAIA,SAAAqB,EAAA1B,EAAAlC,EAAA,2BAAAqC,EAAA,GACA,MAAAC,EAAAC,GAAAN,EAAAC,GAAA,KAAAG,GACA,OACAc,EAAA,EAAAC,EAAApD,GACAwD,MAAA5B,OAAA2B,IAAAjB,EAAA,UAEAa,EAAA,EAAAC,EAAApD,GACAwD,MAAA5B,OAAA2B,IAAAhB,EAAA,WAIA,SAAAsB,EAAA3B,GACA,IAAA4B,EAAA,EAQA,OAPA5B,KAAAnB,QACAmB,EAAA6B,QAAAC,IACAA,EAAAhD,EAAA8C,IACAA,EAAAE,EAAAhD,KAIA8C,EAEA,SAAAG,EAAArI,GACA,gBAAAC,EAAAJ,EAAA,KAAAK,MACA,MAAAJ,EAAAN,OAAA8I,EAAA,EAAA9I,CAAAK,GACA,OAAAC,GACA,iBACA,UACA,SACA,eACA,YACA,OAAAyH,EAAA,EAAAC,mBAAkD1H,KAClDG,SAA8BD,EAAAC,EAAAJ,EAAAK,OAE9B,QACA,SAA0BF,EAAAC,EAAAJ,EAAAK,OAI1B,SAAAqI,EAAAH,EAAApI,EAAAwI,EAAAjE,EAAA,QACA,IAAA6D,EAAAhE,IACA,SAEA,YAAAG,EAAA,CAEA,SADAoD,IAAAS,EAAAhE,IAAA,kBAC0BpE,EAAAoI,EAAAhD,EAAAgD,EAAAhC,MAAAoC,KAE1B,OAAAJ,EAAAhE,IAAAqE,8CCvMA,SAAAC,EAAAC,EAAAzI,GACA,oBAAAyI,EACA,OAAAA,EAGA,OAAAA,EADAzI,EAAAkE,KAGA,SAAAwE,EAAAC,EAAA3I,GACA,MAAA4I,UAAWA,EAAA,GAA0B5I,MACrC,UAAA2I,GAAAD,KAAA,CAAAG,EAAAC,KACA,MAAAC,EACAP,EADA,IAAAI,EACAC,EACAC,EADA9I,GAEAgJ,EACAR,EADA,IAAAI,EACAE,EACAD,EADA7I,GAEA,OAAA+I,EAAAC,GACA,EAEAD,EAAAC,EACA,EAEA,IAtBAC,EAAAlE,EAAA1F,EAAA,sBAAAqJ,6ECAAQ,EAAA,SAAAC,EAAAC,GACA,IAAA9B,KACA,QAAA+B,KAAAF,EAAA7J,OAAAgK,UAAAC,eAAAC,KAAAL,EAAAE,IAAAD,EAAAK,QAAAJ,GAAA,IACA/B,EAAA+B,GAAAF,EAAAE,IACA,SAAAF,GAAA,mBAAA7J,OAAAoK,sBACA,KAAA/E,EAAA,MAAA0E,EAAA/J,OAAAoK,sBAAAP,GAA4DxE,EAAA0E,EAAApE,OAAcN,IAAAyE,EAAAK,QAAAJ,EAAA1E,IAAA,IAC1E2C,EAAA+B,EAAA1E,IAAAwE,EAAAE,EAAA1E,KACA,OAAA2C,GAKA,MAAAqC,EAAAC,IACA,IAAAC,QAASA,GAAUD,EAAAE,EAAAZ,EAAAU,GAAA,YACnB,OAAAG,EAAAlB,EAAAmB,cAAAC,EAAA,GAA0CJ,UAAAC,EAAA5B,OAAAgC,YAAA,GAC1CH,EAAAlB,EAAAmB,cAAAG,EAAA,EAAA7K,OAAA8K,UAAwDN,+FCdxD,MAAAO,GACAC,QAAA,GAGA,IAAAC,GACAC,KAAAlL,OAAA8K,UAA0BC,GAC1BI,KAAAnL,OAAA8K,UAA0BC,GAC1BK,IAAApL,OAAA8K,UAAyBC,GACzBM,QAAArL,OAAA8K,UAA6BC,GAC7BO,YAAAtL,OAAA8K,UAAiCC,GACjCQ,MAAAvL,OAAA8K,UAA2BC,GAC3BS,SAAAxL,OAAA8K,UAA8BC,GAC9BU,MAAAzL,OAAA8K,UAA2BC,GAC3BW,UACAC,KAAA3L,OAAA8K,UAA0BC,GAC1Ba,IAAA5L,OAAA8K,UAAyBC,GACzBc,QAAA7L,OAAA8K,UAA6BC,GAC7Be,MAAA9L,OAAA8K,UAA2BC,GAC3BgB,WACAC,QAAAhM,OAAA8K,UAA6BC,ICnB7B,MAAAkB,ECEA,KAAAjM,OAAAkM,EAAA,EAAAlM,CAAAmM,EAAA,EAAAC,QAAAD,EAAA,EAAAC,QAAAnB,GDFAoB,GACAtM,EAAA,mJEDA,SAAAuM,GAAA5H,OAA2CA,EAAAK,QAAAwH,WAAAxH,EAAAC,UAAA,OAAAC,gBAAA,IAC3C,OAAAjF,OAAAwM,EAAA,EAAAxM,CAAAyM,GACA/H,SACAK,QACAwH,WACAtH,gBACAD,aAEAJ,IAAAI,EACAsE,UAAArE,IAGA,SAAAwH,GAAA/H,OAAmDA,EAAAK,QAAAwH,WAAAxH,IACnD,IAAAL,EACA,SAEA,MAAAgI,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAnE,QAAAlI,IACA,MAAAsM,EAAAtM,EAAAsM,SAAAtM,EAAAsM,SAAAtM,MAAA,EACAuM,EAAAvM,EAAAwM,cACAxM,EAAAwM,cACAxM,EAAAuM,QACAE,EAAAzM,EAAAyM,KAAAzM,EAAAyM,KAAAzM,MAAA,EACA0M,EAAA1M,EAAA2M,aAAA3M,EAAA2M,aAAA3M,MAAA,EACA4M,EAAA5M,EAAA6M,oBACA7M,EAAA6M,oBAAA7M,MACA,EAEA8M,EAAA,SAAAxI,GAAA,YAAAA,GAAAtE,EAAAuM,YAC0BvM,EAAAuM,UAC1B,GACAvL,KAA8BhB,EAAAsE,KAAewI,IAC7C,IAAAhH,EAEAA,EADA,YAAAgG,GAAA9L,EAAAwM,cACAxM,EAAAwM,cAEAxM,EAAA8L,aAAAvM,OACAS,EAAA8L,GAAA9L,MAGAA,EAAA8L,GAEA,MAAAiB,EAAA/M,EAAA+M,MAAA/M,EAAA+M,MAAA/M,MAAA,EACAgN,EAAAhN,EAAAgN,QAAAhN,EAAAgN,QAAAhN,MAAA,EACAiN,EAAAjN,EAAAiN,MAAAjN,EAAAiN,MAAAjN,MAAA,EACAmG,EAAAnG,EAAAiN,MACAjN,EAAAiN,MAAA9G,MACAnG,EAAAyM,KACAzM,EAAAyM,KAAAtG,MACA,MACA8F,EAAAiB,IAAAlM,GAkBAiL,EAAAkB,IAAAnM,EAAAzB,OAAA8K,UAAgD4B,EAAAiB,IAAAlM,IAAoBsL,SAAAL,EAAAiB,IAAAlM,GAAAsL,WAAAG,KAAAR,EAAAiB,IAAAlM,GAAAyL,OAAAC,YAAAT,EAAAiB,IAAAlM,GAAA0L,cAAAE,mBAAAX,EAAAiB,IAAAlM,GAAA4L,qBAAAG,MAAAd,EAAAiB,IAAAlM,GAAA+L,QAAAC,QAAAf,EAAAiB,IAAAlM,GAAAgM,UAAAC,MAAAhB,EAAAiB,IAAAlM,GAAAiM,WAjBpEhB,EAAAkB,IAAAnM,GACAsL,WACAC,UACAE,OACAW,aAAApN,EAAAqN,cACAC,WAAAtN,EAAAuN,YACAb,cACA1L,KACA4L,qBACA9G,QACAiH,QACAC,UACA7G,QACA8G,YAOA,UAAA9I,KAAAiI,EACA,GAAAA,EAAAjI,aAAAqJ,MACA,OAAApB,EAAAjI,GAAA+D,QAAAiE,IAOA,OAHAlI,KAAAwJ,MACAxJ,EAAAwJ,KAAAvF,QAAAiE,GAEAqB,MAAAE,KAAAzB,EAAAI,UAEA,SAAAsB,EAAAC,MACA,OAAAA,EAAAC,QACA,UAEAD,EAAArB,QACA,UAEAqB,EAAAE,KACA,OAEA,uJC9FA,SAAAC,GAAA9J,OAAgDA,EAAAK,QAAAwH,WAAAxH,EAAAC,UAAA,OAAAC,gBAAA,IAChD,OAAAjF,OAAAwM,EAAA,EAAAxM,CAAAyO,GACA/J,SACAK,QACAwH,WACAtH,gBACAD,aAEAJ,IAAAI,EACAsE,UAAArE,IAGA,SAAAwJ,GAAA/J,OAAwDA,EAAAK,QAAAwH,WAAAxH,IACxD,IAAAL,EACA,SAEA,MAAAgI,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAnE,QAAAlI,IACA,MAAAsM,EAAAtM,EAAAsM,SAAAtM,EAAAsM,SAAAtM,MAAA,EACAuM,EAAAvM,EAAAwM,cACAxM,EAAAwM,cACAxM,EAAAuM,QACAE,EAAAzM,EAAAyM,KAAAzM,EAAAyM,KAAAzM,MAAA,EACA0M,EAAA1M,EAAA2M,aAAA3M,EAAA2M,aAAA3M,MAAA,EACA4M,EAAA5M,EAAA6M,oBACA7M,EAAA6M,oBAAA7M,MACA,EAEA8M,EAAA,SAAAxI,GAAA,YAAAA,GAAAtE,EAAAuM,YAC0BvM,EAAAuM,UAC1B,GACAvL,KAA8BhB,EAAAsE,KAAewI,IAC7C,IAAAhH,EAEAA,EADA,YAAAgG,GAAA9L,EAAAwM,cACAxM,EAAAwM,cAEAxM,EAAA8L,aAAAvM,OACAS,EAAA8L,GAAA9L,MAGAA,EAAA8L,GAEA,YAAAA,GAAA9L,EAAAiO,gBACAnI,EAAA9F,EAAAiO,eAEA,MAAAlB,EAAA/M,EAAA+M,MAAA/M,EAAA+M,MAAA/M,MAAA,EACAgN,EAAAhN,EAAAgN,QAAAhN,EAAAgN,QAAAhN,MAAA,EACAiN,EAAAjN,EAAAiN,MAAAjN,EAAAiN,MAAAjN,MAAA,EACAmG,EAAAnG,EAAAiN,MACAjN,EAAAiN,MAAA9G,MACAnG,EAAAyM,KACAzM,EAAAyM,KAAAtG,MACA,MACA8F,EAAAiB,IAAAlM,GAkBAiL,EAAAkB,IAAAnM,EAAAzB,OAAA8K,UAAgD4B,EAAAiB,IAAAlM,IAAoBsL,SAAAL,EAAAiB,IAAAlM,GAAAsL,WAAAG,KAAAR,EAAAiB,IAAAlM,GAAAyL,OAAAC,YAAAT,EAAAiB,IAAAlM,GAAA0L,cAAAE,mBAAAX,EAAAiB,IAAAlM,GAAA4L,qBAAAG,MAAAd,EAAAiB,IAAAlM,GAAA+L,QAAAC,QAAAf,EAAAiB,IAAAlM,GAAAgM,UAAAC,MAAAhB,EAAAiB,IAAAlM,GAAAiM,WAjBpEhB,EAAAkB,IAAAnM,GACAsL,WACAC,UACAE,OACAW,aAAApN,EAAAqN,cACAC,WAAAtN,EAAAuN,YACAb,cACA1L,KACA4L,qBACA9G,QACAiH,QACAC,UACA7G,QACA8G,YAOA,UAAA9I,KAAAiI,EACA,GAAAA,EAAAjI,aAAAqJ,MACA,OAAApB,EAAAjI,GAAA+D,QAAAiE,IAOA,OAHAlI,KAAAwJ,MACAxJ,EAAAwJ,KAAAvF,QAAAiE,GAEAqB,MAAAE,KAAAzB,EAAAI,UAEA,SAAAsB,EAAAC,MACA,OAAAA,EAAAC,QACA,UAEAD,EAAArB,QACA,UAEAqB,EAAAE,KACA,OAEA,uJCjGA,SAAAI,GAAAjK,OAA6CA,EAAAK,QAAAwH,WAAAxH,EAAAC,UAAA,OAAAC,gBAAA,IAC7C,OAAAjF,OAAAwM,EAAA,EAAAxM,CAAA4O,GACAlK,SACAK,QACAwH,WACAtH,gBACAD,aAEAJ,IAAAI,EACAsE,UAAArE,IAGA,SAAA2J,GAAAlK,OAAqDA,EAAAK,QAAAwH,WAAAxH,IACrD,IAAAL,EACA,SAEA,MAAAgI,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAnE,QAAAlI,IACA,MAAAyM,EAAAzM,EAAAiN,MAAAjN,EAAAiN,MAAAjN,QAAAyM,KAAAzM,MACA0M,EAAA1M,EAAA2M,aAAA3M,EAAA2M,aAAA3M,MAAA,EACA4M,EAAA5M,EAAA6M,oBACA7M,EAAA6M,oBAAA7M,MACA,EACAgB,EAAAhB,EAAAsE,GACA,IAAAwB,EAEAA,EADA9F,EAAA8L,aAAAvM,OACAS,EAAA8L,GAAA9L,MAGAA,EAAA8L,GAEAG,EAAAiB,IAAAlM,GAiBAiL,EAAAkB,IAAAnM,EAAAzB,OAAA8K,UAAgD4B,EAAAiB,IAAAlM,IAAoByL,KAAAR,EAAAiB,IAAAlM,GAAAyL,OAAAC,YAAAT,EAAAiB,IAAAlM,GAAA0L,cAAAE,mBAAAX,EAAAiB,IAAAlM,GAAA4L,wBAhBpEX,EAAAkB,IAAAnM,GACAyL,OACAW,aAAApN,EAAAqN,cACAC,WAAAtN,EAAAuN,YACAb,cACA1L,KACA4L,qBACA9G,QACAK,MAAAnG,EAAAiN,MACAjN,EAAAiN,MAAA9G,MACAnG,EAAAyM,KACAzM,EAAAyM,KAAAtG,MACA,UAOA,UAAAhC,KAAAiI,EACA,GAAAA,EAAAjI,aAAAqJ,MACA,OAAApB,EAAAjI,GAAA+D,QAAAiE,IAOA,OAHAlI,KAAAwJ,MACAxJ,EAAAwJ,KAAAvF,QAAAiE,GAEAqB,MAAAE,KAAAzB,EAAAI,UAEA,SAAAsB,EAAAC,MACA,OAAAA,EAAAQ,kBACA,oBAEAR,EAAAS,cACA,gBAEAT,EAAAU,kBACA,oBAEAV,EAAAW,aACA,eAEA,uJC7EA,SAAAC,GAAAvK,OAA2CA,EAAAK,QAAAwH,WAAAxH,EAAAC,UAAA,OAAAC,gBAAA,IAC3C,OAAAjF,OAAAwM,EAAA,EAAAxM,CAAAkP,GACAxK,SACAK,QACAwH,WACAtH,gBACAD,aAEAJ,IAAAI,EACAsE,UAAArE,IAGA,SAAAiK,GAAAxK,OAAmDA,EAAAK,QAAAwH,WAAAxH,IACnD,IAAAL,EACA,SAEA,MAAAgI,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAnE,QAAAlI,IACA,MAAAyM,EAAAzM,EAAAiN,MAAAjN,EAAAiN,MAAAjN,QAAAyM,KAAAzM,MACA0M,EAAA1M,EAAA2M,aAAA3M,EAAA2M,aAAA3M,MAAA,EACA4M,EAAA5M,EAAA6M,oBACA7M,EAAA6M,oBAAA7M,MACA,EACAgB,EAAAhB,EAAAsE,GACA,IAAAwB,EAEAA,EADA9F,EAAA8L,aAAAvM,OACAS,EAAA8L,GAAA9L,MAGAA,EAAA8L,GAEA,YAAAA,GAAA9L,EAAAiO,gBACAnI,EAAA9F,EAAAiO,eAEAhC,EAAAiB,IAAAlM,GAiBAiL,EAAAkB,IAAAnM,EAAAzB,OAAA8K,UAAgD4B,EAAAiB,IAAAlM,IAAoByL,KAAAR,EAAAiB,IAAAlM,GAAAyL,OAAAC,YAAAT,EAAAiB,IAAAlM,GAAA0L,cAAAE,mBAAAX,EAAAiB,IAAAlM,GAAA4L,wBAhBpEX,EAAAkB,IAAAnM,GACAyL,OACAW,aAAApN,EAAAqN,cACAC,WAAAtN,EAAAuN,YACAb,cACA1L,KACA4L,qBACA9G,QACAK,MAAAnG,EAAAiN,MACAjN,EAAAiN,MAAA9G,MACAnG,EAAAyM,KACAzM,EAAAyM,KAAAtG,MACA,UAOA,UAAAhC,KAAAiI,EACA,GAAAA,EAAAjI,aAAAqJ,MACA,OAAApB,EAAAjI,GAAA+D,QAAAiE,IAOA,OAHAlI,KAAAwJ,MACAxJ,EAAAwJ,KAAAvF,QAAAiE,GAEAqB,MAAAE,KAAAzB,EAAAI,UAEA,SAAAsB,EAAAC,MACA,OAAAA,EAAAc,QACA,UAEAd,EAAAS,cACA,gBAEAT,EAAAe,OACA,SAEAf,EAAAgB,QACA,UAEA,8FC/EA,MAAAC,EAAAC,EAAA,EAAAC,QACAC,WACAC,SAAAC,EAAA,GAAAlP,yCCAA,MAAAmP,EAAA,IACAnF,EAAAlB,EAAAmB,cAAA,QAAyCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAG,YACzChF,EAAAlB,EAAAmB,cAAAoF,EAAA,4LCJA,MAAAR,EAAAC,EAAA,EAAAC,QACAC,WACAM,QAAA,OACAC,eAAA,SACAC,OAAA,QACAC,UAAA,SAEAC,aACAD,UAAAP,EAAA,GAAAlP,yCCmBA,MAAA2P,EAAApQ,OAAAqQ,EAAA,EAAArQ,CAAA,CAAAsQ,aAGAC,EAAAvQ,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,CAAAoQ,GACAM,mBAAA5N,EAAA,EAAA6N,WADA3Q,eArBAyK,EAAAlB,EAAAqH,UACAC,cACAC,SAAAC,WACAC,KAAAC,eAAA,MACA,MAAAjJ,EAAmBA,GAAIgJ,KAAAxG,MACvB,OAAAC,EAAAlB,EAAAmB,cAAAwG,EAAA,EAAAlR,OAAA8K,QAA6DqG,GAAA,YAAiBnR,OAAA2B,EAAA,EAAA3B,CAAA2B,EAAA,EAAAkC,UAAAO,gBAAA4D,EAAA,6BAG9E6I,SACA,MAAA7I,EAAeA,GAAIgJ,KAAAxG,MACnB,OAAAC,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAG,YAC5ChF,EAAAlB,EAAAmB,cAAA0G,EAAA,OACA3G,EAAAlB,EAAAmB,cAAA2G,EAAA,GAAqDC,KAAAC,EAAA,IACrD9G,EAAAlB,EAAAmB,cAAA8G,EAAA,GAA4CC,KAAA,MAAazJ,EAAA,gCACzDyC,EAAAlB,EAAAmB,cAAAgH,EAAA,OAAA1J,EAAA,+BACAyC,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAa,cAAqCa,KAAAC,8LCxBjF,MAAAU,GAEAC,YACAC,EAAA,GAAApR,MACAoR,EAAA,GAAApR,MACAoR,EAAA,GAAApR,MACAoR,EAAA,GAAApR,MACAoR,EAAA,GAAApR,MACAoR,EAAA,GAAApR,OAEAiL,QACAoG,QACAC,WAAAF,EAAA,GAAApR,MACAiP,SAAA,IAEAsC,SAAA,KAEAC,eACA/D,MACAgE,KAAA,OACAC,OAAAN,EAAA,GAAApR,QAGA2R,cACAlE,MACAgE,KAAA,OACAC,OAAA,YAGAE,OACAC,WACAtH,QAAA,IAEAuH,MACAJ,OAAA,QAEAK,OACAL,OAAA,QAEAM,YACA/C,SAAA,IAGAgD,OACAJ,WACAtH,QAAA,IAEAuH,MACAJ,OAAA,QAEAK,OACAL,OAAA,UAIA7C,EAAAC,EAAA,EAAAC,QACAmD,gBACAC,iBACAC,SAAA,oBCpDAC,UAAArI,EAAAlB,EAAAqH,UACAC,cACAC,SAAAC,WACAC,KAAA+B,aAAAtI,EAAAlB,EAAAyJ,YACAhC,KAAAV,OACA2C,MAAA,GAEAjC,KAAAkC,UAAA,MACA,MAAAC,YAAmBA,EAAAC,gBAA4BpC,KAAAxG,MAE/C6I,KACA,GAAAD,EAAA,CACA,MAAAlM,GAAAlH,OAAAsT,EAAA,EAAAtT,CAAAoT,EAAA,8BACAC,EAAAE,MACA5M,KAAAO,EACAsM,QACA7O,KAAA,SAEAoH,QAAA/L,OAAAsT,EAAA,EAAAtT,CAAAoT,GAAA,UAGA,GAAAD,EAAA,CACA,MAAAjM,GAAAlH,OAAAsT,EAAA,EAAAtT,CAAAmT,EAAA,4BACAE,EAAAE,MACA5M,KAAAO,EACAsM,QACA7O,KAAA,SAEAoH,QAAA/L,OAAAsT,EAAA,EAAAtT,CAAAmT,GAAA,QAGAnC,KAAAyC,UACAC,YACAC,SAEAzF,KAAAkF,EACAzM,KAAA,WACAiN,MAAA,EACAxS,MAAAuQ,EAAAM,gBAGA/D,KAAAiF,EACAxM,KAAA,UACAiN,MAAA,EACAxS,MAAAuQ,EAAAS,eAGA1G,QACAkG,WAAAD,EAAAC,WACA1D,KAAAmF,EACAQ,QAAA7C,KAAA8C,4BAKA9C,KAAA8C,sBAAAtJ,KACA,MAAAkJ,WAAmBA,GAAa1C,KAAAV,MAChCyD,EAAA/T,OAAA8K,UAA6C4I,GAC7ClJ,EAAAwJ,OAAA,GAAAD,EAAAJ,OAAAhO,SACAoO,EAAAJ,OAAAnJ,EAAAwJ,OAAAJ,MAAAG,EAAAJ,OAAAnJ,EAAAwJ,OAAAJ,KACA5C,KAAAyC,UAA+BC,WAAAK,OAG/B/C,KAAAiD,aAAA,MACAjD,KAAA+B,aAAAmB,SACAlD,KAAAyC,UAA+BR,MAAAjC,KAAA+B,aAAAmB,QAAAC,gBAG/BnD,KAAAoD,SAAA,EAAAV,EAAAM,IACAN,EAAAxF,MAAAwF,EAAAxF,KAAAvI,QAAA+N,EAAAE,KACAnJ,EAAAlB,EAAAmB,cAAA2J,EAAA,GAAwDnG,KAAAwF,EAAAxF,KAAAoG,cAAA,QAAA3N,KAAA+M,EAAA/M,KAAA/B,mBAA2F8O,EAAA/M,QAAmBqN,IAAM5S,MAAAsS,EAAAtS,QAG5K,MAGA4P,KAAAuD,UAAA,EAAAb,EAAAT,KACA,KAAAS,KAAAxF,MAAAwF,EAAAxF,KAAAvI,QACA,YAEA,MAAA6O,MAAmBA,GAAQxD,KAAAxG,MAC3BiK,GACAZ,QAAA,MAGAa,OAAA,OACAC,SAAAnK,IACAkJ,EAAAG,QAAArJ,GACA,SAMA,OAAAC,EAAAlB,EAAAmB,cAAAkK,EAAA,GAAsDhD,WAAA8B,EAAA9B,WAAA1D,KAAAwF,EAAAxF,KAAA2G,SAEtDH,OAAA,OACAD,kBAGAC,OAAA,SACAD,kBAEAK,OAAA,GAAA7E,OAAA,GAAA8E,eAAAtK,EAAAlB,EAAAmB,cAAAsK,EAAA,GAAmGzK,QAAAyG,KAAAiE,mBAAiCC,YAAAjC,EAAA,4BAAA7R,MAAAuQ,EAAAjG,OAAA8I,YAEpIxD,KAAAiE,iBAAA,CAAAvB,GACAA,EAAA3H,QAAA2H,EAAA3H,QAAA,IAEAiF,KAAAjI,gBAAA,GAAiCH,YACjC,MAAAuM,iBAAmBA,EAAAC,sBAAuCpE,KAAAxG,MAC1D,OAAAxK,OAAAsT,EAAA,EAAAtT,CAAA4I,EAAA5I,OAAAsT,EAAA,EAAAtT,CAAAmV,GAAAC,EAAA,UAGAvE,oBACAwE,WAAA,KACArE,KAAA+B,aAAAmB,SACAlD,KAAAyC,UAA+BR,MAAAjC,KAAA+B,aAAAmB,QAAAC,cAE/BmB,OAAAC,iBAAA,SAAAvE,KAAAiD,gBAEAjD,KAAAkC,YAEArC,mBAAA2E,GACAA,EAAArC,cAAAnC,KAAAxG,MAAA2I,aACAqC,EAAApC,eAAApC,KAAAxG,MAAA4I,cACApC,KAAAkC,YAGArC,uBACAyE,OAAAG,oBAAA,SAAAzE,KAAAiD,cAEApD,YACA,MAAAsC,YAAeA,EAAAC,gBAA4BpC,KAAAxG,MAC3CkL,GAAwBrP,GAAA,OACxBsP,EAAAxC,EAAAnT,OAAAsT,EAAA,EAAAtT,CAAAmT,GAAA,EACAyC,EAAAxC,EAAApT,OAAAsT,EAAA,EAAAtT,CAAAoT,GAAA,EACAyC,EAAAC,KAAApN,IAAAiN,EAAAC,GACAlN,EAAAmN,EAAA,EAAAC,KAAAC,KAAAF,EAAA,GAAAA,GAAA,EAIA,OAHAnN,EAAA,IACAgN,EAAA9P,GAAA,EAAA8C,IAEAgN,EAEA7E,aACA,MAAAsC,YAAeA,EAAAC,gBAA4BpC,KAAAxG,MAC3CwL,EAAA5C,EACA6C,IAAAjW,OAAAsT,EAAA,EAAAtT,CAAAoT,GAAA,UACA,EACA8C,EAAA/C,EACA8C,IAAAjW,OAAAsT,EAAA,EAAAtT,CAAAmT,GAAA,UACA,EACA,OAAA+C,EAAA,GAAAF,EAAA,EACAF,KAAApN,IAAAwN,EAAAF,GACA,GAEAnF,kBACA,MAAA6C,WAAeA,GAAa1C,KAAAV,MAC5B,IAAA6F,GAAA,EASA,OARAzC,KAAAhI,QAAAgI,EAAAhI,OAAAwC,MACAwF,EAAAhI,OAAAwC,KAAAvF,QAAAQ,IACAA,EAAAxC,MAAA,KAAAwC,EAAAxC,KAAAyP,SACAD,GAAA,KAKAA,EAEAtF,SACA,MAAAZ,OAAeA,EAAAoG,kBAAApG,EAAAjF,WAA4CgG,KAAAxG,OAC3DkJ,WAAeA,EAAAT,SAAoBjC,KAAAV,MACnCb,EAAAhF,EAAAlB,EAAAmB,cAAA4L,EAAA,GAAuEC,wBAAA,EAAAzE,OAAAd,KAAAjI,gBAAAyN,iBAAA,MACvEd,EAAA1E,KAAAyF,YACAvO,EAAA8I,KAAA0F,aACAC,EAAAb,KAAAc,MAAA1O,EAAA,GACA2O,EAAA7F,KAAA8F,kBACA,OAAArM,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAqD,gBAAAoE,IAAA/F,KAAA+B,aAAA3R,OAAwE6O,OAAAoG,IACpH5L,EAAAlB,EAAAmB,cAAAsM,EAAA,GAAwCC,mBAAAxH,EAAAiG,SAAAzF,SAAAiH,gBAAAL,EAAA7F,KAAAuD,UAAAb,EAAAhI,OAAAuH,QAAAkE,EAAA9D,WAAAwD,EAAAnD,EAAAhI,OAAAwC,UAAAiJ,EAAAC,eAAA,cAAApM,UAAAqM,MAAAC,EAAA,EAAArE,SACxCsE,QAAA7D,IACAA,EAAAC,OAAAvO,IAAA,CAAAmG,EAAAyI,IACAhD,KAAAoD,SAAA7I,EAAAyI,IAEAvJ,EAAAlB,EAAAmB,cAAA8M,EAAA,GAAgDpW,MAAAuQ,EAAAe,MAAA+E,YAAA,EAAAd,EAAAzO,KAChDuC,EAAAlB,EAAAmB,cAAA8M,EAAA,GAAgDE,eAAA,EAAAtW,MAAAuQ,EAAAU,6EC/LhD,SAAAsF,EAAAC,EAAAC,GACA,IAAAtO,EAAAuO,KAAAC,UAAAH,GACApO,EAAAsO,KAAAC,UAAAF,GAOA,OANAtO,IACAA,EAAA,IAEAC,IACAA,EAAA,IAEAD,EACAyO,MAAA,IACA5O,OACA6O,KAAA,MACAzO,EACAwO,MAAA,IACA5O,OACA6O,KAAA,0MCdA,MAAAtG,GAEAC,YACAC,EAAA,GAAApR,MACAoR,EAAA,GAAApR,MACAoR,EAAA,GAAApR,MACAoR,EAAA,GAAApR,MACAoR,EAAA,GAAApR,OAEA2R,cACAlE,MACAgE,KAAA,OACAC,OAAA,YAGAzG,QACAoG,QACAC,WAAAF,EAAA,GAAApR,MACAiP,SAAA,KAGAwI,YAAA,EACAjG,eACA/D,MACAgE,KAAA,OACAC,OAAAN,EAAA,GAAApR,QAGA4R,OACAC,WACAtH,QAAA,IAEAuH,MACAJ,OAAA,QAEAK,OACAL,OAAA,QAEAM,YACA/C,SAAA,IAGAgD,OACAJ,WACAtH,QAAA,IAEAuH,MACAJ,OAAA,QAEAK,OACAL,OAAA,UAIA7C,EAAAC,EAAA,EAAAC,QACAjE,OACA2E,UAAA2B,EAAA,GAAApR,OAEAkS,gBACAC,iBACAC,SAAA,YAGA2B,OACA2D,WAAA,IAAAtG,EAAA,GAAApR,eC1DA2X,UAAA3N,EAAAlB,EAAAqH,UACAC,cACAC,SAAAC,WACAC,KAAA+B,aAAAtI,EAAAlB,EAAAyJ,YACAhC,KAAAV,OACA2C,MAAA,GAEAjC,KAAAkC,UAAA,MACA,MAAAC,YAAmBA,EAAAC,gBAA4BpC,KAAAxG,MAE/C6I,KACA,GAAAD,EAAA,CACA,MAAAlM,GAAAlH,OAAAsT,EAAA,EAAAtT,CAAAoT,EAAA,8BACAC,EAAAE,MACA5M,KAAAO,EACAsM,QACA7O,KAAA,SAEAoH,QAAA/L,OAAAsT,EAAA,EAAAtT,CAAAoT,GAAA,UAGA,GAAAD,EAAA,CACA,MAAAjM,GAAAlH,OAAAsT,EAAA,EAAAtT,CAAAmT,EAAA,4BACAE,EAAAE,MACA5M,KAAAO,EACAsM,QACA7O,KAAA,SAEAoH,QAAA/L,OAAAsT,EAAA,EAAAtT,CAAAmT,GAAA,QAGA,MAAAQ,IAEAzF,KAAAkF,EACAzM,KAAA,WACAiN,MAAA,EACAxS,MAAAuQ,EAAAM,gBAGA/D,KAAAiF,EACAxM,KAAA,UACAiN,MAAA,EACAxS,MAAAuQ,EAAAS,eAGA1G,GACAkG,WAAAD,EAAAC,WACA1D,KAAAmF,EACAQ,QAAA7C,KAAA8C,uBAEA9C,KAAAyC,UACAC,YACAC,SACAjI,cAIAsF,KAAA8C,sBAAAtJ,KACA,MAAAkJ,WAAmBA,GAAa1C,KAAAV,MAChCyD,EAAA/T,OAAA8K,UAA6C4I,GAC7ClJ,EAAAwJ,OAAA,GAAAD,EAAAJ,OAAAhO,SACAoO,EAAAJ,OAAAnJ,EAAAwJ,OAAAJ,MAAAG,EAAAJ,OAAAnJ,EAAAwJ,OAAAJ,KACA5C,KAAAyC,UAA+BC,WAAAK,OAG/B/C,KAAAiD,aAAA,MACAjD,KAAA+B,aAAAmB,SACAlD,KAAAyC,UAA+BR,MAAAjC,KAAA+B,aAAAmB,QAAAC,gBAG/BnD,KAAAoD,SAAA,EAAAV,EAAAM,IACAN,EAAAxF,MAAAwF,EAAAxF,KAAAvI,QAAA+N,EAAAE,KACAnJ,EAAAlB,EAAAmB,cAAA2J,EAAA,GAAwDnG,KAAAwF,EAAAxF,KAAAoG,cAAA,QAAA3N,KAAA+M,EAAA/M,KAAA/B,8BAAsG8O,EAAA/M,QAAmBqN,IAAM5S,MAAAsS,EAAAtS,QAGvL,MAGA4P,KAAAuD,UAAA,EAAAb,EAAAT,KACA,MAAAoF,kBAAmBA,GAAoBrH,KAAAxG,MACvC,GAAAkJ,KAAAxF,MAAAwF,EAAAxF,KAAAvI,OAAA,CACA,MAAA8O,GACAZ,QAAA,MAGAa,OAAA,OACAC,SAAAnK,IACAkJ,EAAAG,QAAArJ,GACA,SAMA,OAAAC,EAAAlB,EAAAmB,cAAAkK,EAAA,GAA0DhD,WAAA8B,EAAA9B,WAAA1D,KAAAwF,EAAAxF,KAAA2G,SAE1DH,OAAA,OACAD,kBAGAC,OAAA,SACAD,kBAEAK,OAAA,GAAA7E,OAAA,GAAAiI,YAAAG,EAAAtD,eAAAtK,EAAAlB,EAAAmB,cAAAsK,EAAA,GAAuIzK,QAAAyG,KAAAiE,mBAAiC7T,MAAAuQ,EAAAjG,SAGxK,cAGAsF,KAAAiE,iBAAA,CAAAvB,GACAA,EAAA3H,QAAA2H,EAAA3H,QAAA,IAEAiF,KAAAjI,gBAAA,GAAiCH,YACjC,MAAAuM,iBAAmBA,EAAAC,sBAAuCpE,KAAAxG,MAC1D,OAAAxK,OAAAsT,EAAA,EAAAtT,CAAA4I,EAAA5I,OAAAsT,EAAA,EAAAtT,CAAAmV,GAAAC,EAAA,UAGAvE,oBACAwE,WAAA,KACArE,KAAA+B,aAAAmB,SACAlD,KAAAyC,UAA+BR,MAAAjC,KAAA+B,aAAAmB,QAAAC,cAE/BmB,OAAAC,iBAAA,SAAAvE,KAAAiD,gBAEAjD,KAAAkC,YAEArC,mBAAA2E,GACAA,EAAArC,cAAAnC,KAAAxG,MAAA2I,aACAqC,EAAApC,eAAApC,KAAAxG,MAAA4I,cACApC,KAAAkC,YAGArC,uBACAyE,OAAAG,oBAAA,SAAAzE,KAAAiD,cAEApD,YACA,MAAAsC,YAAeA,EAAAC,gBAA4BpC,KAAAxG,MAC3CkL,GAAwBrP,GAAA,OACxBsP,EAAAxC,EAAAnT,OAAAsT,EAAA,EAAAtT,CAAAmT,GAAA,EACAyC,EAAAxC,EAAApT,OAAAsT,EAAA,EAAAtT,CAAAoT,GAAA,EACAyC,EAAAC,KAAApN,IAAAiN,EAAAC,GACAlN,EAAAmN,EAAA,EAAAC,KAAAC,KAAAF,EAAA,GAAAA,GAAA,EAIA,OAHAnN,EAAA,IACAgN,EAAA9P,GAAA,EAAA8C,IAEAgN,EAEA7E,aACA,MAAAsC,YAAeA,EAAAC,gBAA4BpC,KAAAxG,MAC3CwL,EAAA5C,EACA6C,IAAAjW,OAAAsT,EAAA,EAAAtT,CAAAoT,GAAA,UACA,EACA8C,EAAA/C,EACA8C,IAAAjW,OAAAsT,EAAA,EAAAtT,CAAAmT,GAAA,UACA,EACA,OAAA+C,EAAA,GAAAF,EAAA,EACAF,KAAApN,IAAAwN,EAAAF,GACA,GAEAnF,SACA,MAAAZ,OAAeA,EAAAoG,kBAAApG,EAAAjF,UAAAwJ,QAAA8D,aAAAC,cAA4EvH,KAAAxG,OAC3FkJ,WAAeA,EAAAT,SAAoBjC,KAAAV,MACnCb,EAAAhF,EAAAlB,EAAAmB,cAAA4L,EAAA,GAAuEC,wBAAA,EAAAzE,OAAAd,KAAAjI,gBAAAyN,iBAAA,MACvEd,EAAA1E,KAAAyF,YACAvO,EAAA8I,KAAA0F,aACAC,EAAAb,KAAAc,MAAA1O,EAAA,GACA,OAAAuC,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAqD,gBAAAoE,IAAA/F,KAAA+B,cAC5CtI,EAAAlB,EAAAmB,cAAA,OAAwCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAkF,QAA+BA,GACvE/J,EAAAlB,EAAAmB,cAAA,OAAwCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAA/D,OAAAnK,OAAuC6O,OAAAoG,IAC/E5L,EAAAlB,EAAAmB,cAAAsM,EAAA,GAA4CC,mBAAAxH,EAAAiG,SAAAzF,SAAAiH,gBAAAxD,EAAA1C,KAAAuD,UAAAb,EAAAhI,OAAAuH,QAAAkE,EAAA9D,WAAAK,IAAAhI,OAAAwC,UAAAiJ,EAAAC,eAAA,SAAApM,UAAAqM,MAAAC,EAAA,EAAArE,SAC5CsE,QAAA7D,KAAAC,SACAD,EAAAC,OAAAvO,IAAA,CAAAmG,EAAAyI,IACAhD,KAAAoD,SAAA7I,EAAAyI,IAEAvJ,EAAAlB,EAAAmB,cAAA8M,EAAA,GAAoDjR,MAAA+R,EAAAlX,MAAAuQ,EAAAe,MAAA+E,YAAA,EAAAd,EAAAzO,KACpDuC,EAAAlB,EAAAmB,cAAA8M,EAAA,GAAoDE,eAAA,EAAAnR,MAAAgS,EAAAnX,MAAAuQ,EAAAU,2LCrLpD,MAAA/C,EAAAC,EAAA,EAAAC,QACAgJ,eACAvI,OAAA,QACAwI,aAAA5G,EAAA,GAAApR,MACAyP,UAAA2B,EAAA,GAAApR,OAEAiY,gBACAxI,UAAA2B,EAAA,GAAApR,OAEAkY,eACA1I,OAAA,QAEA2I,UACA7I,QAAA,eACAL,SAAAmC,EAAA,GAAApR,MACAoY,MAAAhH,EAAA,GAAAiH,IACAL,aAAA,OCDAM,EAAA/Y,OAAAwQ,EAAA,EAAAxQ,GAXA,EAAiCgZ,WAAAC,cAAAzE,QAAA0E,WAAAC,kBAAAD,EAAAE,SAAApR,OAAiFyC,EAAAlB,EAAAmB,cAAA2O,EAAA,GAAiCxJ,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAqJ,gBACnJlO,EAAAlB,EAAAmB,cAAA4O,EAAA,OACA7O,EAAAlB,EAAAmB,cAAA8G,EAAA,GAAoCC,KAAA,MAAa+C,GACjD+C,QAAA2B,IAAAzO,EAAAlB,EAAAmB,cAAAC,EAAA,GAA4DJ,QAAA4O,EAAAvO,YAAA,GAC5DH,EAAAlB,EAAAmB,cAAA,KAAsCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAsJ,WAAkCM,KACxEzO,EAAAlB,EAAAmB,cAAA6O,EAAA,WAAAH,EAAA3O,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACA/O,EAAAlB,EAAAmB,cAAA+O,EAAA,UAAuChI,KAAAgI,EAAA,aAAAC,KACvCjP,EAAAlB,EAAAmB,cAAA+O,EAAA,UAAuC5J,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAkJ,eAAA/G,KAAAgI,EAAA,aAAAE,KACvClP,EAAAlB,EAAAmB,cAAA+O,EAAA,UAAuChI,KAAAgI,EAAA,aAAAG,KACvCnP,EAAAlB,EAAAmB,cAAA+O,EAAA,UAAuC5J,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAoJ,gBAAAjH,KAAAgI,EAAA,aAAAC,MAA+D,GACtGnC,QAAA0B,IAAAxO,EAAAlB,EAAAmB,cAAAmP,EAAA,OAAAZ,2BCdA,MAAAa,EAAAvK,EAAA,EAAAC,QACAgJ,eACAvI,OAAA,QACAwI,aAAA5G,EAAA,GAAApR,MACAyP,UAAA2B,EAAA,GAAApR,OAEAgP,WACAM,QAAA,QAEA7C,MACA6M,SAAA,EACAC,UAAA,QACAC,YAAApI,EAAA,GAAApR,OAEAiY,gBACAxI,UAAA2B,EAAA,GAAApR,OAEAkY,eACA1I,OAAA,QAEA2I,UACA7I,QAAA,eACAL,SAAAmC,EAAA,GAAApR,MACAoY,MAAAhH,EAAA,GAAAiH,IACAL,aAAA,KAEAyB,MACAH,SAAA,EACA7J,UAAA2B,EAAA,GAAApR,SCNA0Z,EAAAna,OAAAwQ,EAAA,EAAAxQ,GAlBA,EAAoCgZ,WAAAC,cAAAG,SAAAF,WAAAC,kBAAAD,EAAAlR,IAAAoS,OAAA5F,WAAuF/J,EAAAlB,EAAAmB,cAAA2O,EAAA,GAAiCxJ,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA8Z,EAAAnB,gBAC5JlO,EAAAlB,EAAAmB,cAAA2P,EAAA,GAA+BvF,OAAA,MAC/BrK,EAAAlB,EAAAmB,cAAA4P,EAAA,GAAuCC,GAAA,EAAAC,GAAA,GACvC/P,EAAAlB,EAAAmB,cAAA,OAAwCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA8Z,EAAA5M,OACxCzC,EAAAlB,EAAAmB,cAAA4O,EAAA,OACA7O,EAAAlB,EAAAmB,cAAA8G,EAAA,GAAgDC,KAAA,MAAa+C,GAC7D+C,QAAA2B,IAAAzO,EAAAlB,EAAAmB,cAAAC,EAAA,GAAwEJ,QAAA4O,EAAAvO,YAAA,GACxEH,EAAAlB,EAAAmB,cAAA,KAAkDmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA8Z,EAAAlB,WAAkCM,KACpFzO,EAAAlB,EAAAmB,cAAA6O,EAAA,WAAAH,EAAA3O,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACA/O,EAAAlB,EAAAmB,cAAA+O,EAAA,UAAmDhI,KAAAgI,EAAA,aAAAC,KACnDjP,EAAAlB,EAAAmB,cAAA+O,EAAA,UAAmD5J,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA8Z,EAAAtB,eAAA/G,KAAAgI,EAAA,aAAAE,KACnDlP,EAAAlB,EAAAmB,cAAA+O,EAAA,UAAmDhI,KAAAgI,EAAA,aAAAG,KACnDnP,EAAAlB,EAAAmB,cAAA+O,EAAA,UAAmD5J,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA8Z,EAAApB,gBAAAjH,KAAAgI,EAAA,aAAAC,MAA+D,KAClHjP,EAAAlB,EAAAmB,cAAA4P,EAAA,GAAuCC,GAAA,EAAAC,GAAA,GACvC/P,EAAAlB,EAAAmB,cAAA,OAAwCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA8Z,EAAArK,YACxChF,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA8Z,EAAAI,OAA8B,IAAAd,GAAA3O,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KAC1EjC,QAAA6C,IAAA3P,EAAAlB,EAAAmB,cAAA6O,EAAA,OAAAa,GACA7C,QAAA0B,IAAAxO,EAAAlB,EAAAmB,cAAAmP,EAAA,OAAAZ,gCCrBA,MAAAwB,EAAAlL,EAAA,EAAAC,QACAkL,sBACAjC,aAAA5G,EAAA,GAAApR,MACAsP,QAAA,OACA4K,WAAA,YAEAC,MACAC,cAAA,GACAC,WAAAjJ,EAAA,GAAApR,MACAiP,SAAAmC,EAAA,GAAApR,OAEAA,OACAoY,MAAAhH,EAAA,GAAAiH,IACAmB,YAAApI,EAAA,GAAApR,MACAiP,SAAAmC,EAAA,GAAApR,OAEAsa,gBACAhL,QAAA,eACA0I,aAAA5G,EAAA,GAAApR,MACAwS,MAAA,SCeA+H,EAAAhb,OAAAwQ,EAAA,EAAAxQ,GA9BA,EAAwCib,YAAAza,cAAAwI,gBAAAtE,SAAAwW,aAAA,OAAAC,aAAA,EAAAnT,IAAAoT,iBACxC,IAAAlO,EAAAzC,EAAAlB,EAAAmB,cAAA2Q,EAAA,QACA3N,EAAAjD,EAAAlB,EAAAmB,cAAA2Q,EAAA,QAKA,GAJA3W,KAAA4W,MAAA5W,EAAA4W,KAAAC,QACArO,EAAA1M,EAAAkE,EAAA4W,KAAAC,MAAArO,KAAAxI,EAAA4W,KAAAC,MAAArO,KAAAzM,MAAA,EAAAiE,EAAA4W,KAAAC,MAAArO,KAAAxI,EAAA4W,KAAAC,MAAArO,KAAAtG,MAAA,MAAAoC,GACA0E,EAAAlN,EAAAkE,EAAA4W,KAAAC,MAAA7N,MAAAhJ,EAAA4W,KAAAC,MAAA7N,MAAAjN,MAAA,EAAAiE,EAAA4W,KAAAC,MAAA7N,MAAAhJ,EAAA4W,KAAAC,MAAA7N,MAAA9G,MAAA,GAAAoC,IAEA,SAAAkS,EACA,OAAAzQ,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAya,EAAAC,uBAC5CjQ,EAAAlB,EAAAmB,cAAA,OAAwCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAya,EAAAha,QAA+ByM,IAEvE,CACA,MAAAsO,EAAA9W,KAAA4W,MAAA5W,EAAA4W,KAAAC,OAAA7W,EAAA4W,KAAAC,MAAA7N,MACAhJ,EAAA4W,KAAAC,MAAA7N,MAAA9G,MACA,GAEA6U,EAAAzT,WADAhI,OAAA0b,EAAA,EAAA1b,CAAAwb,MAEA,OAAA/Q,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACA/O,EAAAlB,EAAAmB,cAAA,OAAwCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAya,EAAAM,iBACxCtQ,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAya,EAAAha,QAA+ByM,GAC3EzC,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAya,EAAAG,OAC5CnQ,EAAAlB,EAAAmB,cAAA,WAAAuQ,KACA1D,QAAA6D,IAAA3Q,EAAAlB,EAAAmB,cAAA,OAAgEmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAya,EAAAM,iBAChEtQ,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAya,EAAAha,QAC5CiN,EACA6J,QAAA4D,GAAAzN,GAAA,IAAAjD,EAAAlB,EAAAmB,cAAA,QAAsFmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAya,EAAAG,OAA8Ba,IACpHhR,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAya,EAAAG,OAC5CnQ,EAAAlB,EAAAmB,cAAA,WAAA0Q,sBC/BA,MAAAO,EAAApM,EAAA,EAAAC,QACAoM,mBACAC,qBACApD,aAAA5G,EAAA,GAAApR,QAGAqb,MACAlJ,iBACAC,SAAA,cCJAkJ,EAAA,EAAqCxV,QAAAyC,gBAAAxI,cAAAwH,IAAAgU,aAAApV,QAAAnG,YACrC,MAAAH,EAAAN,OAAA0b,EAAA,EAAA1b,CAAA4G,GACA6U,EAAA,QAAAnb,EAAA0H,WAAqD1H,UAAO6W,EAE5D8E,EAAAzV,QADAwV,EAAAvb,EAAAub,EAAA,OACA9a,QAAA,IACAgb,EAAAlU,EAAA,oBACAmU,QAAAF,EACArV,MAAA6U,EACAhb,MAAAD,EAAAC,EAAAmG,EAAAoC,KAEA,OAAAyB,EAAAlB,EAAAmB,cAAA,MAAuCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA2b,EAAAC,oBACvCnR,EAAAlB,EAAAmB,cAAA0R,EAAA,GAAuC7V,MAAA2V,EAAAzb,MAAAwb,EAAAzH,MAAAjO,EAAAkL,KAAA2K,EAAA,EAAAxC,OAEvCmC,EAAAM,cACA7b,YAAA8b,MAEA,MAAAC,EAAAvc,OAAAwQ,EAAA,EAAAxQ,GAAA+b,gBCpBA,MAAAS,EAAAjN,EAAA,EAAAC,QACAiN,UACAvM,UAAA2B,EAAA,GAAApR,SC2CA,MAAAic,EAAA1c,OAAAwQ,EAAA,EAAAxQ,iBAzCAyK,EAAAlB,EAAAqH,UACAC,sBAAA8L,GACA,OAAAA,EAAAjY,SAAAsM,KAAAxG,MAAA9F,OAEAmM,WACA,MAAAnM,OAAeA,EAAAK,QAAAwH,YAA0ByE,KAAAxG,MACzCtF,EAAAlF,OAAA2O,EAAA,EAAA3O,EACA0E,SACAK,QACAwH,aAEAqQ,EAAA1X,EAAA2X,UAAAxX,IACA,MAAA5D,EAAA4D,EAAA5D,GACA,GAAAA,GAAA,OAAAA,EACA,OAAAA,EAAAwH,WAAA6T,SAAA,WAGA,WAAAF,MAEA1X,EAAA6X,MAAA,EAAAH,MACA1X,EAAA6X,MAAAH,EAAA,GACA1X,EAAA0X,IAGA1X,EAEA2L,SACA,MAAAmI,SAAeA,EAAAI,UAAmBpI,KAAAxG,MAClC,OAAA4O,EACA,OAAA3O,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACA/O,EAAAlB,EAAAmB,cAAA+O,EAAA,UAA+ChI,KAAAgI,EAAA,aAAAE,KAC/ClP,EAAAlB,EAAAmB,cAAA+O,EAAA,UAA+ChI,KAAAgI,EAAA,aAAAE,GAAA9J,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAwc,EAAAC,YAC/ChS,EAAAlB,EAAAmB,cAAA+O,EAAA,UAA+ChI,KAAAgI,EAAA,aAAAE,GAAA9J,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAwc,EAAAC,YAC/ChS,EAAAlB,EAAAmB,cAAA+O,EAAA,UAA+ChI,KAAAgI,EAAA,aAAAE,GAAA9J,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAwc,EAAAC,aAE/C,CACA,MAAA3X,EAAAkM,KAAAgM,WACA,OAAAvS,EAAAlB,EAAAmB,cAAA,UAAAsO,GAA6DlU,4BCzC7D,MAAAmY,EAAA1N,EAAA,EAAAC,QACAjE,OACAkN,aAAA5G,EAAA,GAAApR,SCAAyc,EAAA1S,GAAAC,EAAAlB,EAAAmB,cAAA,OAAsEmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAid,EAAA1R,QACtEd,EAAAlB,EAAAmB,cAAAyS,EAAA,EAAAnd,OAAA8K,UAAoDN,4RCHpD,MAAA8E,EAAA8N,EAAA,EAAA5N,QACAtC,MACA6C,QAAA,OACA4K,WAAA,UAEAM,aACAoC,WACAnN,UAAA,EACAuI,aAAA,EACAwB,YAAAqD,EAAA,GAAAxE,KAEAyE,eACA7N,SAAA4N,EAAA,GAAA7c,MACAoY,MAAAyE,EAAA,GAAAxE,KAEA0E,eACA9N,SAAA4N,EAAA,GAAA7c,MACAoY,MAAAyE,EAAA,GAAAxE,KAEA2E,QACA1N,QAAA,OACAC,eAAA,gBACAhF,QAAAsS,EAAA,GAAAxE,IACA4E,gBAAAJ,EAAA,GAAAxE,KAEAxU,KACAmU,aAAA6E,EAAA,GAAAxE,KAEAtE,OACAqG,cAAAyC,EAAA,GAAAxE,qLCzBA,MAAA6E,EAAAC,IACA,OAAAA,GACA,UACA,YACA,YACA,gBAiDA,MAAAC,EAAA7d,OAAA8d,EAAA,EAAA9d,QAAA+d,EAAA,EAAA/d,iBA9CAge,EAAAzU,EAAAqH,UACAC,cACAC,SAAAC,WACAC,KAAAiN,qBAAA,OAGAL,QAAA,QAGAA,QAAA,WAKA5M,KAAAkN,gBAAA,CAAAN,IACA,MAAA5V,EAAmBA,GAAIgJ,KAAAxG,MACvB,cAAAoT,EACA5V,EAAA,qBAEA,UAAA4V,EACA5V,EAAA,4BADA,IAIAgJ,KAAAmN,WAAA,EAAAP,EAAA5J,KACA,MAAAoK,WAAmBA,GAAapN,KAAAxG,MAChC6T,EAAAV,EAAAC,GACA,OAAAI,EAAAzU,EAAAmB,cAAA4T,EAAA,GAAkD1Z,IAAAyZ,EAAAE,OAAAF,EAAAG,SAAAJ,IAAAR,GAClDI,EAAAzU,EAAAmB,cAAA+T,EAAA,GAA4C5O,UAAA7P,OAAA0e,EAAA,EAAA1e,CAAA2e,EAAA,EAAAnK,OAAA/C,KAAAmN,EAAA,UAAuD5N,KAAAkN,gBAAAN,OAGnG5M,KAAA6N,eAAAC,KACA,MAAAC,QAAmBA,GAAU/N,KAAAxG,MAC7B,QAAAsU,EAAAP,OACAQ,EAAAC,QAAA,QAEA,UAAAF,EAAAP,QACAQ,EAAAC,QAAA,YAIAnO,SACA,MAAAoO,EAAAjO,KAAAiN,uBACA,OAAAD,EAAAzU,EAAAmB,cAAAwU,EAAA,GAA0CC,SAAAnO,KAAA6N,gBAC1Cb,EAAAzU,EAAAmB,cAAA0U,EAAA,GAA0CC,QAAAC,EAAA,EAAAC,UAAgCN,EAAA7Z,IAAA,CAAAoa,EAAAxL,IAAAhD,KAAAmN,WAAAqB,EAAA5B,QAAA5J,4LCvD1E,MAAA1E,EAAAC,EAAA,EAAAC,QACAiQ,cACA/B,gBAAA7L,EAAA,GAAApR,MACAuZ,UAAA,QAEAzP,SACAmT,gBAAA7L,EAAA,GAAApR,MACAoa,cAAAhJ,EAAA,GAAApR,MACAif,WAAA7N,EAAA,GAAApR,OAEAkf,qBACAjC,gBAAA7L,EAAA,GAAApR,MACA0X,WAAAtG,EAAA,GAAApR,MACAwZ,YAAApI,EAAA,GAAApR,OAEAmf,YACAlC,gBAAA7L,EAAA,GAAApR,MACAuK,QAAA6G,EAAA,GAAApR,OAEAof,gBACA1H,WAAAtG,EAAA,GAAApR,MACAwZ,YAAApI,EAAA,GAAApR,4ECrBA,MAAAqf,EAAAvQ,EAAA,EAAAC,QACAuQ,iBACAhQ,QAAA,OACA4K,WAAA,UAEAqF,sBACAvH,aAAA,EACAwB,YAAApI,EAAA,GAAAiH,OCEAmH,IACK1Z,MAAA,oBAAA9F,MAAA,sBACA8F,MAAA,eAAA9F,MAAA,iBACA8F,MAAA,oBAAA9F,MAAA,sBAELya,EAAA,MA4FA,MAAA9K,EAAApQ,OAAAqQ,EAAA,EAAArQ,CAAAsQ,IACA,MAAA4P,EAAAlgB,OAAAmgB,EAAA,EAAAngB,EACAogB,QACAC,WAAA,UACAC,iBAAA,QACAC,kBAAA,GAEAC,UAAA,IAIA,OACAN,cACAxb,OAJA+b,EAAA,EAAAC,aAAApQ,EAAA4K,EAAAgF,GAKAS,kBAJAF,EAAA,EAAAG,wBAAAtQ,EAAA4K,EAAAgF,MAOAW,GACAC,YAAAL,EAAA,EAAAK,aAEAC,EAAA/gB,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,CAAAoQ,EAAAyQ,EAAA7gB,eA/GAyK,EAAAlB,EAAAqH,UACAC,YAAAmQ,EAAAC,GACAnQ,MAAAkQ,EAAAC,GACAjQ,KAAAkQ,cACAC,eAAA,GAEAnQ,KAAAV,MAAAtQ,OAAA8K,UAAqCkG,KAAAkQ,cACrClQ,KAAAoQ,mBAAA3gB,KACA,MAAA4gB,cAAmBA,GAAgBrQ,KAAAxG,MACnC6W,IACArQ,KAAAyC,UACA6N,YAAA7gB,IAEA4gB,EAAA5gB,MAGAuQ,KAAAuQ,iBAAA,MACA,MAAAvZ,EAAmBA,GAAIgJ,KAAAxG,MACvB,OAAAyV,EAAA7a,IAAAoc,GAAA/W,EAAAlB,EAAAmB,cAAA+W,EAAA,GAAoFC,UAAA,SAAA9c,IAAA4c,EAAA/gB,MAAAoT,QAAA,IAAA7C,KAAAoQ,mBAAAI,EAAA/gB,QAA+FuH,qBAAuBwZ,EAAAjb,aAE1MyK,KAAA2Q,gBAAA,MACA,MAAAjd,OAAmBA,EAAAsD,KAAYgJ,KAAAxG,MAC/B,OAAA9F,KAAAwJ,SACA,IAAA0T,QAAAld,EAAAwJ,QACA9I,IAAAoa,GAAA/U,EAAAlB,EAAAmB,cAAA+W,EAAA,GAA2EC,UAAA,SAAA9c,WAAkC4a,IAAI3L,QAAA,IAAA7C,KAAAoQ,0BAAiD5B,MAAQxX,EAAA,gBAAqBpD,IAAA4a,WAM/LxO,KAAA6Q,WAAA,MACA,MAAAC,EAAA9hB,OAAAmgB,EAAA,EAAAngB,CAAA+hB,SAAAC,QACA,IAAA3T,EAAArO,OAAA2O,EAAA,EAAA3O,CAAA8hB,EAAAG,UACA,MAAAC,EAAAJ,KAAAG,SACAjiB,OAAAmiB,KAAAL,EAAAG,aAEA,UAAArd,KAAAsd,EAEA,QADAtd,EAAAuF,QAAA,QACA,CACAkE,EAAAzJ,EACA,MAGA,eAAAyJ,IAAA,sBAEA2C,KAAAoR,oBAAAC,KACArR,KAAAyC,UACA0N,eAAAnQ,KAAAV,MAAA6Q,kBAGAnQ,KAAAsR,oBAAAnB,KACAnQ,KAAAyC,UACA0N,oBAGAnQ,KAAAoQ,mBAAApQ,KAAAoQ,mBAAAmB,KAAAvR,MACAA,KAAAoR,oBAAApR,KAAAoR,oBAAAG,KAAAvR,MACAA,KAAAsR,oBAAAtR,KAAAsR,oBAAAC,KAAAvR,MAEAH,oBACA,MAAAiQ,YAAeA,EAAAZ,eAA2BlP,KAAAxG,MAC1CsW,EAAA5F,EAAAgF,GACAlP,KAAAyC,UACA6N,YAAAtQ,KAAA6Q,eAGAhR,mBAAA2E,GACA,MAAAsL,YAAeA,EAAAZ,eAA2BlP,KAAAxG,MAC1CgL,EAAA0K,kBACAY,EAAA5F,EAAAgF,GACAlP,KAAAyC,UAA2B6N,YAAAtQ,KAAA6Q,gBAG3BhR,SACA,MAAA7I,EAAeA,GAAIgJ,KAAAxG,OACnB8W,YAAeA,EAAAH,iBAA6BnQ,KAAAV,MAC5CkS,MACAxR,KAAAuQ,sBACAvQ,KAAA2Q,mBAGApb,GAAA,KADA+a,IAAAnX,QAAA,YAEAnC,EAAA,gBAAiCpD,IAAA0c,EAAAvE,MAAA,KACjC/U,qBAAmCsZ,KACnC,OAAA7W,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA8f,EAAAC,kBAC5CtV,EAAAlB,EAAAmB,cAAA,SAA0CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA8f,EAAAE,uBAC1ChY,EAAA,iBACA,KACAyC,EAAAlB,EAAAmB,cAAA+X,EAAA,GAA2CtD,SAAAnO,KAAAoR,oBAAAM,OAAAjY,EAAAlB,EAAAmB,cAAAiY,EAAA,GAAkFC,SAAA5R,KAAAsR,qBAAqC/b,GAAAsc,OAAA1B,EAAAqB,uBC3FlKM,GACAC,MAAA,OACA3C,QACAE,iBAAA,QACAC,kBAAA,EACAF,WAAA,YAGA2C,EAAA,OAiCA,MAAAC,EAAAjjB,OAAAqQ,EAAA,EAAArQ,CAAA,CAAAsQ,EAAA9F,KACA,MAAA0V,EAAAlgB,OAAAmgB,EAAA,EAAAngB,CAAA8iB,GACApe,EAAA+b,EAAA,EAAAC,aAAApQ,EAAA0S,EAAA9C,GACAgD,EAAAzC,EAAA,EAAA0C,kBAAA7S,EAAA0S,EAAA9C,GACAS,EAAAF,EAAA,EAAAG,wBAAAtQ,EAAA0S,EAAA9C,GACAkD,EAAApjB,OAAAqjB,EAAA,EAAArjB,CAAAsjB,EAAA,GAIA,OACAzf,UAJAyf,EAAA,EAAAC,gBAAAjT,EAAA,MAAA8S,GAKAI,eAJAF,EAAA,EAAAG,qBAAAnT,EAAA,MAAA8S,GAKAM,qBAJAJ,EAAA,EAAAK,2BAAArT,EAAA,MAAA8S,GAKAlD,cACAxb,SACAwe,cACAvC,uBAGAiD,GACA9C,YAAAL,EAAA,EAAAK,aAEA+C,EAAA7jB,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,CAAAijB,EAAAW,EAAA5jB,eAtDAyK,EAAAlB,EAAAqH,UACAC,oBACA,MAAAiQ,YAAeA,EAAAZ,eAA2BlP,KAAAxG,MAC1CsW,EAAAkC,EAAA9C,GAEArP,mBAAA2E,GACA,MAAAsL,YAAeA,EAAAZ,eAA2BlP,KAAAxG,MAC1CgL,EAAA0K,iBACAY,EAAAkC,EAAA9C,GAGArP,SACA,MAAAiT,iBAAeA,EAAAjgB,YAAA2f,iBAAA9e,SAAAwe,cAAAlb,KAAuEgJ,KAAAxG,MACtFpD,EAAA,IAAAC,KACA0c,EAAArf,IACAwe,IACAM,GACA3f,GACAA,EAAAyX,MACAzX,EAAAyX,KAAArT,MAAA,EACA,OAAAwC,EAAAlB,EAAAmB,cAAA,UAA+CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAgkB,EAAA,EAAAvG,SAC/ChT,EAAAlB,EAAAmB,cAAA,WACAD,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAgkB,EAAA,EAAA1f,MAC5CmG,EAAAlB,EAAAmB,cAAAuZ,EAAA,GAAsD7F,WAAA,WACtD7G,QAAAwM,IAAAtZ,EAAAlB,EAAAmB,cAAAqW,GAAsEM,cAAAyC,KACtEvM,QAAAwM,IAAAtZ,EAAAlB,EAAAmB,cAAA,OAAiEmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAgkB,EAAA,EAAA9W,OACjEzC,EAAAlB,EAAAmB,cAAA8G,EAAA,GAA4C3B,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAgkB,EAAA,EAAA3G,WAAA5L,KAAA,OAAgDzR,OAAAQ,EAAA,EAAAR,CAAA0E,EAAA4W,KAAAC,MAAArO,KAAAzM,QAC5FgK,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAgkB,EAAA,EAAA/I,YAC5CxQ,EAAAlB,EAAAmB,cAAA,OAAgDmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAgkB,EAAA,EAAAzG,gBAAuCvV,EAAA,6BACvFyC,EAAAlB,EAAAmB,cAAA,OAAgDmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAgkB,EAAA,EAAAxG,gBAAuCxV,EAAA,cAAmBI,MAAAhB,EAAAG,WAAA2c,KAAA,sICjD1G,MAAAC,EAAA5U,EAAA,EAAAC,QACA4U,OAEAnU,OAAA,QACAgD,MAAA,SAEAiG,UACAhJ,UAAA2B,EAAA,GAAApR,MACA4jB,UAAA,WAGAC,EAAAC,EAAA;;kBAEkB1S,EAAA,GAAApR;;;;;ECVlB+jB,EAAA,MAqCA,MAAAC,EAAAzkB,OAAAqQ,EAAA,EAAArQ,CAAA,CAAAsQ,GAAuDnB,cACvD,MAAA+Q,EAAAlgB,OAAAmgB,EAAA,EAAAngB,EACAogB,QACAvR,kBAAAM,EACAkR,WAAA,UACAC,iBAAA,QACAC,kBAAA,KAKA,OACAL,cACAxb,OAJA+b,EAAA,EAAAC,aAAApQ,EAAAkU,EAAAtE,GAKAS,kBAJAF,EAAA,EAAAG,wBAAAtQ,EAAAkU,EAAAtE,MAOAwE,IACA5D,YAAAL,EAAA,EAAAK,aAEA6D,GAAA3kB,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,CAAAykB,EAAAC,GAAA1kB,eAxDAyK,EAAAlB,EAAAqH,UACAC,cACAC,SAAAC,WACAC,KAAA4T,QAAA,MACA,MAAAlgB,OAAmBA,GAASsM,KAAAxG,MAC5Bqa,KACA,GAAAngB,EACA,UAAAogB,KAAApgB,EAAAwJ,KACA,GAAAD,MAAA8W,QAAAD,EAAAhY,QACA,UAAA0S,KAAAsF,EAAAhY,OACA+X,EAAAtR,QAAyCuR,EAAAlgB,QAAY4a,UAIrDqF,EAAAtR,QAAqCuR,EAAAlgB,QAAYkgB,EAAAhY,UAIjD,OAAA+X,IAGAhU,oBACA,MAAAiQ,YAAeA,EAAAZ,eAA2BlP,KAAAxG,MAC1CsW,EAAA0D,EAAAtE,GAEArP,mBAAA2E,GACA,MAAAsL,YAAeA,EAAAZ,eAA2BlP,KAAAxG,MAC1CgL,EAAA0K,iBACAY,EAAA0D,EAAAtE,GAGArP,SAEA,OADAG,KAAA4T,UACAxf,IAAA,CAAA0f,EAAA9Q,IAAAvJ,EAAAlB,EAAAmB,cAAA,OAAoE9F,WAAaoP,KAAS8Q,QCb1F,MAAAE,GAAAhlB,OAAAwQ,EAAA,EAAAxQ,iBArBAyK,EAAAlB,EAAAqH,UACAC,YAAArG,GACAsG,MAAAtG,GACAwG,KAAAiU,YAAA,MACAjU,KAAAxG,MAAA0a,SAAA,KAEAlU,KAAAiU,YAAAjU,KAAAiU,YAAA1C,KAAAvR,MAEAH,sBAAA8L,GACA,MAAAkG,OAAeA,EAAA1Z,QAAe6H,KAAAxG,MAC9B,OAAAmS,EAAAxT,UAAAwT,EAAAkG,WAEAhS,SACA,MAAAxC,QAAeA,EAAAwU,SAAA1Z,OAAAnB,KAA2BgJ,KAAAxG,MAC1C,OAAAC,EAAAlB,EAAAmB,cAAAya,EAAA,GAA4CtV,aAAeyU,KAAiBtkB,OAAAuP,EAAA,EAAAvP,CAAAmkB,EAAAC,SAAkBgB,SAAA,EAAAvC,SAAAqC,QAAAlU,KAAAiU,YAAAzQ,MAAAxM,EAAA,kCAC9FqG,UACA1H,KAAAwC,EAAA5C,SAEAkE,EAAAlB,EAAAmB,cAAAia,IAAiDxV,QAAAhG,EAAA5C,OAAA4C,EAAA1H,GAAA4M,UAAAlF,aCrBjDkc,GAAA9V,EAAA,EAAAC,QACA8V,aACApV,UAAA2B,EAAA,GAAApR,OAEA2jB,OAEAnU,OAAA,QACAgD,MAAA,SAEAiG,UACAmL,UAAA,WAGAkB,GAAAhB,EAAA;;kBAEkB1S,EAAA,GAAApR;;;;;gBCPlB,MAAA+kB,GAAA,OA2BA,MAAAC,GAAAzlB,OAAAqQ,EAAA,EAAArQ,CAAA,CAAAsQ,GAAuDjC,UAAAlF,OAAAuc,oBACvD,MAAAC,GACAvF,QACAE,iBAAA,QACAC,kBAAA,EACAF,WAAA,UACAxP,CAAA6U,GAAAvc,EAAA5C,OAAA4C,EAAA1H,IAEAwgB,UAAmBpR,CAAAxC,GAAA,MAEnB6R,EAAAlgB,OAAAmgB,EAAA,EAAAngB,CAAA2lB,GAGA,OACAzF,cACAxb,OAJA+b,EAAA,EAAAC,aAAApQ,EAAAkV,GAAAtF,GAKAS,kBAJAF,EAAA,EAAAG,wBAAAtQ,EAAAkV,GAAAtF,MAOA0F,IACA9E,YAAAL,EAAA,EAAAK,aAEA+E,GAAA7lB,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,CAAAylB,GAAAG,GAAA5lB,eAhDAyK,EAAAlB,EAAAqH,UACAC,YAAArG,GACAsG,MAAAtG,GAEAqG,oBACA,MAAAiQ,YAAeA,EAAAZ,eAA2BlP,KAAAxG,MAC1CsW,EAAA0E,GAAAtF,GAEArP,mBAAA2E,GACA,MAAAsL,YAAeA,EAAAZ,eAA2BlP,KAAAxG,MAC1CgL,EAAA0K,iBACAY,EAAA0E,GAAAtF,GAGArP,SACA,MAAAxC,QAAeA,EAAA3J,SAAAic,oBAAA3Y,KAAwCgJ,KAAAxG,MACvD0C,EAAAlN,OAAAQ,EAAA,EAAAR,CAAA0E,KAAA4W,MAAA5W,EAAA4W,KAAAC,MACA7W,EAAA4W,KAAAC,MAAArO,KAAAzM,MACA,GACA,OAAAgK,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACA/O,EAAAlB,EAAAmB,cAAA,OAAwCmF,UAAAwV,GAAAnM,UACxCzO,EAAAlB,EAAAmB,cAAA8G,EAAA,GAA4CC,KAAA,MAAazJ,EAAA,4BAAiCvH,MAAAyM,MAC1FzC,EAAAlB,EAAAmB,cAAA,OAAwCmF,UAAAwV,GAAAC,aACxC7a,EAAAlB,EAAAmB,cAAAob,GAAA,GAA8D/gB,MAAAsJ,EAAA3J,SAAA0U,OAAAuH,GAA4D,EAAI7b,WAAQA,EAAAM,IAAA2gB,GAAAtb,EAAAlB,EAAAmB,cAAAob,GAAA,GAAsElhB,IAAAmhB,EAAAtkB,GAAAuH,iBAAiCxI,cAAA,EAAA+F,MAAAwf,EAAAxf,MAAAwf,EAAAxf,MAAA0C,WAAA,GAAA+S,WAAAtX,EAAA4W,KAAAC,MAAArO,KAAAzM,MAAAmG,MAAAmf,EAAAnf,MAAAnG,MAAAslB,EAAA7Y,eCP7O,MAAA8Y,GAAAhmB,OAAAwQ,EAAA,EAAAxQ,iBAtBAyK,EAAAlB,EAAAqH,UACAC,YAAArG,GACAsG,MAAAtG,GACAwG,KAAAiU,YAAA,MACAjU,KAAAxG,MAAA0a,SAAA,KAEAlU,KAAAiU,YAAAjU,KAAAiU,YAAA1C,KAAAvR,MAEAH,sBAAA8L,GACA,MAAAkG,OAAeA,EAAA1Z,QAAe6H,KAAAxG,MAC9B,OAAAmS,EAAAxT,UAAAwT,EAAAkG,WAEAhS,SACA,MAAAxC,QAAeA,EAAAwU,SAAA1Z,OAAAuc,gBAAA1d,KAA0CgJ,KAAAxG,MACzD,OAAAC,EAAAlB,EAAAmB,cAAAya,EAAA,GAA4CtV,aAAe0V,MAAiBvlB,OAAAuP,EAAA,EAAAvP,CAAAqlB,GAAAjB,SAAkBgB,SAAA,EAAAvC,SAAAqC,QAAAlU,KAAAiU,YAAAzQ,MAAAxM,EAAA,oCAC9FqG,UACA1H,KAAAwC,EAAA5C,MACAmf,mBAEAjb,EAAAlB,EAAAmB,cAAAmb,IAAyDxX,UAAAlF,OAAAuc,gGCvBzD,MAAAO,GAAA1W,EAAA,EAAAC,QACAlN,MACA6V,WAAAtG,EAAA,GAAAiH,KAEAsL,OACA8B,IACAzN,aAAA5G,EAAA,GAAApR,OAEA0lB,OACAlM,YAAApI,EAAA,GAAAiH,KAEAsN,IACAjO,WAAAtG,EAAA,GAAAiH,MAGAtE,OACAqG,cAAAhJ,EAAA,GAAAiH,OCPAuN,KACK9f,MAAA,QAAA9F,MAAA,UACA8F,MAAA,UAAA9F,MAAA,YA2EL,MAAA6lB,GAAAtmB,OAAAqQ,EAAA,EAAArQ,CAAAsQ,KAEAiW,MAAAC,GAAA,EAAAC,kBAAAnW,GACArO,OAAAukB,GAAA,EAAAE,aAAApW,GACAqW,YAAAH,GAAA,EAAAI,wBAAAtW,MAGAuW,IACAC,aAAAN,GAAA,EAAAM,cAEAC,GAAA/mB,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,CAAAsmB,GAAAO,GAAA7mB,eAnFAyK,EAAAlB,EAAAqH,UACAC,YAAAmQ,EAAAC,GACAnQ,MAAAkQ,EAAAC,GACAjQ,KAAAkQ,cACAb,WAAA,SAEArP,KAAAV,MAAAtQ,OAAA8K,UAAqCkG,KAAAkQ,cACrClQ,KAAAgW,eAAA,MACA,MAAA3Y,QAAmBA,EAAA4Y,aAAAniB,QAAA6gB,SAAoC3U,KAAAxG,OACvD6V,WAAmBA,GAAarP,KAAAV,MAChC4W,EAAAlnB,OAAA8K,UAA6CgN,KAAAqP,MAAArP,KAAAC,UAAA4N,KAAsC1D,cAAA9K,EAAAiQ,cAAAjQ,IACnF+P,EAAA9G,OAAAC,aACA,IAAAH,EAAAlgB,OAAAmgB,EAAA,EAAAngB,CAAAknB,GACA,GAAAD,EACA/G,gBAA4C7R,YAG5C,UAAAlF,KAAArE,EACAob,gBAAgD7R,MAAQlF,EAAA5C,MAGxD,OAAA2Z,IAEAlP,KAAAiU,YAAA,MACAjU,KAAAxG,MAAA0a,SAAA,KAEAlU,KAAAqW,kBAAA,MACA,MAAAP,aAAmBA,GAAe9V,KAAAxG,MAClCsc,EAAA,OAAA9V,KAAAgW,oBAEAhW,KAAAsW,uBAAA,EAAAC,EAAAlF,KACArR,KAAAyC,UAA2B4M,WAAAgC,EAAAmF,cAAA/mB,UAE3BuQ,KAAAsW,uBAAAtW,KAAAsW,uBAAA/E,KAAAvR,MAEAH,mBAAA2E,GACA,MAAAmR,YAAeA,EAAA9D,UAAsB7R,KAAAxG,MACrCqY,IAAArN,EAAAqN,QACA7R,KAAAyC,SAAAzT,OAAA8K,UAA0CkG,KAAAkQ,eAE1C1L,EAAAvT,SAAA+O,KAAAxG,MAAAvI,QACA,IAAA0kB,GACA3V,KAAAiU,cAGApU,SACA,MAAA8V,YAAeA,EAAAtY,UAAAvJ,QAAAkD,KAAiCgJ,KAAAxG,OAChD6V,WAAeA,GAAarP,KAAAV,MAC5BmX,MAAA3iB,GACAkM,KAAAxG,MAAAqY,QACA7iB,OAAAoJ,GAAA,EAAApJ,CAAAynB,GACA7iB,IAAA,KACA0E,UAAA,IAGA,IAAAoe,EAAA1f,EAAA,mBAAkDqG,YAIlD,OAHA,IAAAA,EAAAlE,QAAA,UACAud,EAAA1f,EAAA,yBAEAyC,EAAAlB,EAAAmB,cAAAya,EAAA,GAA4CtV,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAimB,GAAA7B,OAAAgB,SAAA,EAAAvC,OAAA7R,KAAAxG,MAAAqY,OAAAqC,QAAAlU,KAAAiU,YAAAzQ,MAAAxM,EAAA,gBAAA2f,SAC5Cld,EAAAlB,EAAAmB,cAAAkd,GAAA,EAAA5nB,OAAA8K,UAA4D9K,OAAA2B,GAAA,EAAA3B,CAAA2B,GAAA,EAAAM,OAAAC,aAA4C0C,IAAA,SAAAiP,QAAA7C,KAAAiU,YAAA5F,QAAAuI,GAAA,EAAAC,YAA6E7f,EAAA,kBACrLyC,EAAAlB,EAAAmB,cAAAkd,GAAA,EAAA5nB,OAAA8K,UAA4D9K,OAAA2B,GAAA,EAAA3B,CAAA2B,GAAA,EAAAM,OAAAE,aAA4C2lB,WAAA,IAAAnB,EAAA/hB,IAAA,UAAAiP,QAAA7C,KAAAqW,kBAAAhI,QAAAuI,GAAA,EAAAG,UAAkI/f,EAAA,qBAE1OyC,EAAAlB,EAAAmB,cAAA8G,EAAA,GAAwC3B,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAimB,GAAAzR,OAAA/C,KAAA,MAA2CzJ,EAAA,kBAAuBqG,aAC1G5D,EAAAlB,EAAAmB,cAAAsd,GAAA,GAAuCnY,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAimB,GAAA3jB,OACvCmI,EAAAlB,EAAAmB,cAAAud,GAAA,GAAgD1hB,MAAAyB,EAAA,yBAAAkgB,QAAA,kBAChDzd,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KAAA6M,GAAAjhB,IAAA,CAAAoc,EAAAxN,IAAAvJ,EAAAlB,EAAAmB,cAAAyd,GAAA,GAAoIvjB,IAAAoP,EAAAvS,iBAA+BuS,IAAMoU,aAAAjR,IAAAqK,EAAA/gB,MAAA8F,MAAAyB,EAAAwZ,EAAAjb,OAAA9F,MAAA+gB,EAAA/gB,MAAA4nB,QAAAhI,IAAAmB,EAAA/gB,MAAAkG,KAAA,aAAA2hB,SAAAtX,KAAAsW,uBAAAiB,aAAAvgB,EAAAwZ,EAAAjb,YACzKkE,EAAAlB,EAAAmB,cAAAud,GAAA,GAAgD1hB,MAAAmhB,EAAAQ,QAAA,mBAChDzd,EAAAlB,EAAAmB,cAAA,UAAA+c,EAAAriB,IAAA,CAAAojB,EAAAxU,IACAvJ,EAAAlB,EAAAmB,cAAA,MAA0D9F,IAAAoP,GAAawU,EAAAjiB,gFClFvE,MAAAoL,IACA8W,YAAA,GACAC,qBAAA,KAEAC,GAAApZ,EAAA,EAAAC,QACAmD,gBACAwF,WAAAtG,EAAA,GAAApR,OAEA+X,eACAvI,OAAA,QACAwI,aAAA5G,EAAA,GAAApR,MACAyP,UAAA2B,EAAA,GAAApR,OAEAmoB,WACA1Y,UAAA2B,EAAA,GAAApR,OAEAooB,eACA3Y,UAAA2B,EAAA,GAAApR,OAEAiY,gBACAxI,UAAA2B,EAAA,GAAApR,OAEAqoB,cACA5Y,UAAA2B,EAAA,GAAApR,SCbAsoB,GAAA,OACAC,GAAA,gBACAC,GAAA,UA4DA,MAAAC,GAAAlpB,OAAAqQ,EAAA,EAAArQ,CAAA,CAAAsQ,GAAuD6Y,qBAAAC,0BAevD,OACAC,kBAdAC,GAAA,aAAAhZ,EAAAyY,GAAAI,GAeAI,6BAdAD,GAAA,wBAAAhZ,EAAAyY,GAAAI,GAeAK,sBAdAF,GAAA,aAAAhZ,EAAA0Y,GAAAG,GAeAM,iCAdAH,GAAA,wBAAAhZ,EAAA0Y,GAAAG,GAeAO,qBAdAJ,GAAA,aAAAhZ,EAAA2Y,GAAAE,GAeAQ,gCAdAL,GAAA,wBAAAhZ,EAAA2Y,GAAAE,GAeAS,mBAbAN,GAAA,aAAAhZ,EAAAyY,GAAAK,GAcAS,8BAbAP,GAAA,wBAAAhZ,EAAAyY,GAAAK,GAcAU,uBAbAR,GAAA,aAAAhZ,EAAA0Y,GAAAI,GAcAW,kCAbAT,GAAA,wBAAAhZ,EAAA0Y,GAAAI,GAcAY,sBAbAV,GAAA,aAAAhZ,EAAA2Y,GAAAG,GAcAa,iCAbAX,GAAA,wBAAAhZ,EAAA2Y,GAAAG,MAgBAc,IACApJ,YAAAqJ,GAAA,aAEAC,GAAApqB,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,CAAAkpB,GAAAgB,GAAAlqB,eA5FAyK,EAAAlB,EAAAqH,UACAC,cACAC,SAAAC,WACAC,KAAAqZ,YAAA,KACA5f,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACA/O,EAAAlB,EAAAmB,cAAA+O,GAAA,UAA+C5J,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA2oB,GAAAnQ,eAAA/G,KAAAgI,GAAA,aAAAE,KAC/ClP,EAAAlB,EAAAmB,cAAA+O,GAAA,UAA+C5J,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA2oB,GAAAjQ,gBAAAjH,KAAAgI,GAAA,aAAAC,OAG/C7I,oBACA,MAAAiQ,YAAeA,EAAAqI,qBAAAC,uBAAuDpY,KAAAxG,MACtEsW,EAAAiI,GAAAI,GACArI,EAAAkI,GAAAG,GACArI,EAAAmI,GAAAE,GACArI,EAAAiI,GAAAK,GACAtI,EAAAkI,GAAAI,GACAtI,EAAAmI,GAAAG,GAEAvY,mBAAA2E,GACA,MAAAsL,YAAeA,EAAAqI,qBAAAC,uBAAuDpY,KAAAxG,MACtEgL,EAAA2T,yBACArI,EAAAiI,GAAAI,GACArI,EAAAkI,GAAAG,GACArI,EAAAmI,GAAAE,IAEA3T,EAAA4T,0BACAtI,EAAAiI,GAAAK,GACAtI,EAAAkI,GAAAI,GACApY,KAAAxG,MAAAsW,YAAAmI,GAAAG,IAGAvY,SACA,MAAAwY,kBAAeA,EAAAE,+BAAAC,wBAAAC,mCAAAC,uBAAAC,kCAAAC,qBAAAC,gCAAAC,yBAAAC,oCAAAC,wBAAAC,mCAAAjiB,KAA6UgJ,KAAAxG,MAE5V8f,EAAAtqB,OAAAsT,GAAA,EAAAtT,CAAAqpB,EAAA,iBACAkB,EAAAvqB,OAAAsT,GAAA,EAAAtT,CAAA4pB,EAAA,iBAEAY,EAAAxqB,OAAAsT,GAAA,EAAAtT,CAAAwpB,EAAA,iBACAiB,EAAAzqB,OAAAsT,GAAA,EAAAtT,CAAA8pB,EAAA,iBAEAY,EAAA1qB,OAAAsT,GAAA,EAAAtT,CAAA0pB,EAAA,iBACAiB,EAAA3qB,OAAAsT,GAAA,EAAAtT,CAAAgqB,EAAA,iBACAY,EAAAvB,GACAA,EAAA/N,MACA+N,EAAA/N,KAAAC,OACA8N,EAAA/N,KAAAC,MAAArO,KACAmc,EAAA/N,KAAAC,MAAArO,KAAAtG,MACA,MACA,OAAA6D,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA2oB,GAAAhW,iBAC5ClI,EAAAlB,EAAAmB,cAAA,OAAwCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA2oB,GAAAC,YAAmC,IAAAW,GAC3E,IAAAM,EAAA7Y,KAAAqZ,cAAA5f,EAAAlB,EAAAmB,cAAAmgB,GAAA,GAA0IxU,gBAAA1E,GAAA+W,qBAAAvV,YAAAmX,EAAAnV,iBAAA3U,EAAA,EAAA4U,sBAAuInF,OAAA0B,GAAA8W,YAAArV,aAAAmX,EAAA/V,MAAAxM,EAAA,uCAAAsQ,WAAAtQ,EAAA,+CAAAuQ,WAAAvQ,EAAA,uCACjRpB,MAAAoB,WAAsChI,OAAAQ,EAAA,EAAAR,CAAA4qB,WAEtCngB,EAAAlB,EAAAmB,cAAA,OAAwCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA2oB,GAAAE,gBAAuC,IAAAY,GAC/E,IAAAM,EAAA/Y,KAAAqZ,cAAA5f,EAAAlB,EAAAmB,cAAAmgB,GAAA,GAA8IxU,gBAAA1E,GAAA+W,qBAAAvV,YAAAqX,EAAArV,iBAAA3U,EAAA,EAAA4U,sBAA2InF,OAAA0B,GAAA8W,YAAArV,aAAAqX,EAAAjW,MAAAxM,EAAA,2CAAAsQ,WAAAtQ,EAAA,+CAAAuQ,WAAAvQ,EAAA,8CACzRyC,EAAAlB,EAAAmB,cAAA,OAAwCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA2oB,GAAAG,eAAsC,IAAAa,GAC9E,IAAAM,EAAAjZ,KAAAqZ,cAAA5f,EAAAlB,EAAAmB,cAAAmgB,GAAA,GAA6IxU,gBAAA1E,GAAA+W,qBAAAvV,YAAAuX,EAAAvV,iBAAA3U,EAAA,EAAA4U,sBAA0InF,OAAA0B,GAAA8W,YAAArV,aAAAuX,EAAAnW,MAAAxM,EAAA,0CAAAsQ,WAAAtQ,EAAA,+CAAAuQ,WAAAvQ,EAAA,kDCrEvR8iB,GAAAvb,EAAA,EAAAC,QACA4U,OAEAnU,OAAA,QACAgD,MAAA,YAGA8X,GAAAxG,EAAA;;;;ECyBA,MAAAyG,GAAAhrB,OAAAqQ,EAAA,EAAArQ,CAAA,CAAAsQ,GAAuDjC,UAAAlF,WACvD,MAAA8hB,GACA7K,QACAE,iBAAA,QACAC,kBAAA,EACAF,WAAA,QACA7S,MAAA,GAEAyU,UACApR,CAAAxC,GAAAlF,EAAA5C,OAAA4C,EAAA1H,KAGA0nB,EAAAnpB,OAAAmgB,EAAA,EAAAngB,CAAAirB,GACAC,GACA9K,QACAE,iBAAA,QACAC,kBAAA,EACAF,WAAA,QACA7S,MAAA,GAEAyU,UACApR,CAAAxC,GAAAlF,EAAA5C,OAAA4C,EAAA1H,KAIA,OACA0nB,qBACAC,oBAHAppB,OAAAmgB,EAAA,EAAAngB,CAAAkrB,GAIAC,QAAAC,GAAA,EAAAC,qBAAA/a,MAGAgb,GAAAtrB,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,CAAAgrB,MAAAhrB,eAvDAyK,EAAAlB,EAAAqH,UACAC,YAAArG,GACAsG,MAAAtG,GACAwG,KAAAiU,YAAA,MACAjU,KAAAxG,MAAA0a,SAAA,KAEAlU,KAAAiU,YAAAjU,KAAAiU,YAAA1C,KAAAvR,MAEAH,oBACAG,KAAAyC,aAEA5C,sBAAA8L,GACA,MAAAkG,OAAeA,EAAA1Z,QAAe6H,KAAAxG,MAC9B,OAAAmS,EAAAxT,UAAAwT,EAAAkG,WAEAhS,SACA,MAAAsY,mBAAeA,EAAA9a,UAAAwU,SAAA1Z,OAAAigB,sBAAAphB,KAAqEgJ,KAAAxG,MACpF,OAAAC,EAAAlB,EAAAmB,cAAAya,EAAA,GAA4CtV,aAAekb,MAAiB/qB,OAAAuP,EAAA,EAAAvP,CAAA8qB,GAAA1G,SAAkBgB,SAAA,EAAAvC,SAAAqC,QAAAlU,KAAAiU,YAAAzQ,MAAAxM,EAAA,wCAC9FqG,UACA1H,KAAAwC,EAAA5C,SAEAkE,EAAAlB,EAAAmB,cAAA0f,IAAkDjB,qBAAAC,6BCkElD,MAAAmC,GAAAvrB,OAAAwQ,EAAA,EAAAxQ,iBA1FAyK,EAAAlB,EAAAqH,UACAC,YAAArG,GACAsG,MAAAtG,GACAwG,KAAAkQ,cACAsK,gBAAA,EACAC,mBAAA,EACAC,uBAAA,EACAC,gBAAA,EACAC,mBAAA,GAEA5a,KAAAV,MAAAtQ,OAAA8K,UAAqCkG,KAAAkQ,cACrClQ,KAAA6a,eAAA,MACA,MAAAxd,QAAmBA,EAAAlF,OAAAwc,SAAuB3U,KAAAxG,OAC1CihB,kBAAmBA,GAAoBza,KAAAV,MACvC,OAAA7F,EAAAlB,EAAAmB,cAAAqc,IAAsD1Y,UAAAwU,OAAA4I,EAAA3mB,OAAAqE,GAAA+b,QAAAlU,KAAA8a,uBAAAnG,YAEtD3U,KAAA+a,mBAAA,MACA,MAAA1d,QAAmBA,EAAAlF,QAAgB6H,KAAAxG,OACnCkhB,sBAAmBA,GAAwB1a,KAAAV,MAC3C,OAAA7F,EAAAlB,EAAAmB,cAAA4gB,IAA0Djd,UAAAwU,OAAA6I,EAAAviB,OAAA+b,QAAAlU,KAAAgb,+BAE1Dhb,KAAAib,YAAA,MACA,MAAA5d,QAAmBA,EAAAlF,QAAgB6H,KAAAxG,OACnCmhB,eAAmBA,GAAiB3a,KAAAV,MACpC,OAAA7F,EAAAlB,EAAAmB,cAAAsa,IAA0D7V,QAAAhG,EAAA5C,OAAA4C,EAAA1H,GAAA4M,UAAAwU,OAAA8I,EAAAxiB,OAAA+b,QAAAlU,KAAAkb,wBAE1Dlb,KAAAmb,eAAA,MACA,MAAA9d,QAAmBA,EAAAlF,QAAgB6H,KAAAxG,OACnCohB,kBAAmBA,GAAoB5a,KAAAV,MACvC,OAAA7F,EAAAlB,EAAAmB,cAAAsb,IAA6D3X,QAAA,oBAAAwU,OAAA+I,EAAAziB,OAAA+b,QAAAlU,KAAAob,uBAAA1G,cAAArX,MAE7D2C,KAAA8a,uBAAA,CAAAjJ,IACA7R,KAAAyC,UAA2BgY,kBAAA5I,MAE3B7R,KAAAqb,sBAAA,MACArb,KAAAyC,UAA2BgY,mBAAA,MAE3Bza,KAAAgb,2BAAA,CAAAnJ,IACA7R,KAAAyC,UAA2BiY,sBAAA7I,MAE3B7R,KAAAsb,0BAAA,MACAtb,KAAAyC,UAA2BiY,uBAAA,MAE3B1a,KAAAkb,oBAAA,CAAArJ,IACA7R,KAAAyC,UAA2BkY,eAAA9I,MAE3B7R,KAAAub,mBAAA,MACAvb,KAAAyC,UAA2BkY,gBAAA,MAE3B3a,KAAAob,uBAAA,CAAAvJ,IACA7R,KAAAyC,UAA2BmY,kBAAA/I,MAE3B7R,KAAAwb,sBAAA,MACAxb,KAAAyC,UAA2BmY,mBAAA,MAE3B5a,KAAA6N,eAAA,MACA,MAAA2M,eAAmBA,GAAiBxa,KAAAV,MACpCU,KAAAyC,UACA+X,sBAGAxa,KAAAyb,eAAA,CAAAjB,IACAxa,KAAAyC,UAA2B+X,qBAE3Bxa,KAAA8a,uBAAA9a,KAAA8a,uBAAAvJ,KAAAvR,MACAA,KAAAqb,sBAAArb,KAAAqb,sBAAA9J,KAAAvR,MACAA,KAAAgb,2BAAAhb,KAAAgb,2BAAAzJ,KAAAvR,MACAA,KAAAsb,0BAAAtb,KAAAsb,0BAAA/J,KAAAvR,MACAA,KAAAkb,oBAAAlb,KAAAkb,oBAAA3J,KAAAvR,MACAA,KAAAub,mBAAAvb,KAAAub,mBAAAhK,KAAAvR,MACAA,KAAAob,uBAAApb,KAAAob,uBAAA7J,KAAAvR,MACAA,KAAAwb,sBAAAxb,KAAAwb,sBAAAjK,KAAAvR,MACAA,KAAAyb,eAAAzb,KAAAyb,eAAAlK,KAAAvR,MACAA,KAAA6N,eAAA7N,KAAA6N,eAAA0D,KAAAvR,MAEAH,SACA,MAAAxC,QAAeA,EAAArG,KAAagJ,KAAAxG,MAC5B,OAAAC,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACA/O,EAAAlB,EAAAmB,cAAA+X,EAAA,GAA2CtD,SAAAnO,KAAA6N,eAAA6D,OAAAjY,EAAAlB,EAAAmB,cAAAgiB,EAAA,GAA0E9J,SAAA5R,KAAAyb,iBAAgC5J,OAAA7R,KAAAV,MAAAkb,eAAAmB,SAAA,EAAAC,SAAA,QAAApK,eACrJ/X,EAAAlB,EAAAmB,cAAA+W,EAAA,GAAuDC,UAAA,SAAA9c,IAAA,yBAAAiP,QAAA7C,KAAAsb,2BAA8FtkB,EAAA,0CACrJyC,EAAAlB,EAAAmB,cAAA+W,EAAA,GAAuDC,UAAA,SAAA9c,IAAA,gBAAAkjB,WAAA,sBAAAzZ,EAAAwF,QAAA7C,KAAAwb,uBAA8HxkB,EAAA,mCACrLyC,EAAAlB,EAAAmB,cAAA+W,EAAA,GAAuDC,UAAA,SAAA9c,IAAA,aAAAkjB,WAAA,sBAAAzZ,EAAAwF,QAAA7C,KAAAub,oBAAwHvkB,EAAA,+BAC/KyC,EAAAlB,EAAAmB,cAAA+W,EAAA,GAAuDC,UAAA,SAAA9c,IAAA,gBAAAiP,QAAA7C,KAAAqb,uBAAiFrkB,EAAA,oCAExIgJ,KAAA6a,iBACA7a,KAAA+a,qBACA/a,KAAAib,cACAjb,KAAAmb,qBC3FAU,GAAAtd,EAAA,EAAAC,QACAsd,YACApP,gBAAA7L,EAAA,GAAApR,MACAsP,QAAA,OACAC,eAAA,SACA0P,WAAA7N,EAAA,GAAApR,MACAwP,OAAA,OACAgD,MAAA,QAEA8Z,WACAH,SAAA,YAEAI,eACAC,OAAApb,EAAA,GAAApR,OAEAysB,iBACArU,MAAAhH,EAAA,GAAApR,MACAiP,SAAAmC,EAAA,GAAApR,SAGA0sB,GAAA5I,EAAA;;;;qBAIqB1S,EAAA,GAAApR;;;iBAGJoR,EAAA,GAAApR;;;iBAGAoR,EAAA,GAAApR;;;;;;;iBAOAoR,EAAA,GAAApR;;;iBAGAoR,EAAA,GAAApR;;;;;;;EAQjB2sB,GAAA7I,EAAA;;;;;;;;;;;;;;;0BCjDA,MAAA8I,GAAA9d,EAAA,EAAAC,QACA8d,kBACA7U,aAAA5G,EAAA,GAAApR,OAEA8sB,qBACAxd,QAAA,OACAC,eAAA,WACA0P,WAAA7N,EAAA,GAAApR,OAEA+sB,UACAvT,YAAApI,EAAA,GAAApR,MACAoa,cAAAhJ,EAAA,GAAApR,MACAgtB,aAAA5b,EAAA,GAAApR,OAEAitB,WACAzT,YAAApI,EAAA,GAAApR,MACAoa,cAAAhJ,EAAA,GAAApR,OAEAktB,eACAlV,aAAA5G,EAAA,GAAApR,SCnBAmtB,GAAAre,EAAA,EAAAC,QACAme,eACA1T,YAAApI,EAAA,GAAApR,MACAyP,UAAA2B,EAAA,GAAApR,SCKAotB,GAAA,MA2EA,MAAAC,GAAA9tB,OAAAqQ,EAAA,EAAArQ,CAAA,CAAAsQ,GAAuDnB,cACvD,MAAA+Q,EAAAlgB,OAAAmgB,EAAA,EAAAngB,EACAogB,QACAvR,kBAAAM,EACAkR,WAAA,UACAC,iBAAA,QACAC,kBAAA,KAKA,OACA1R,kBAAAM,EACA+Q,cACAxb,OALA+b,EAAA,EAAAC,aAAApQ,EAAAud,GAAA3N,GAMAS,kBALAF,EAAA,EAAAG,wBAAAtQ,EAAAud,GAAA3N,MAQA6N,IACAjN,YAAAL,EAAA,EAAAK,aAEAkN,GAAAhuB,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,CAAA8tB,GAAAC,GAAA/tB,eA/FAyK,EAAAlB,EAAAqH,UACAC,YAAArG,GACAsG,MAAAtG,GACAwG,KAAAkQ,cACA2B,QAAA,EACAoL,SAAA,GAEAjd,KAAAV,MAAAtQ,OAAA8K,UAAqCkG,KAAAkQ,cACrClQ,KAAAiU,YAAA,CAAApC,IACA7R,KAAAyC,UAA2BoP,aAE3B7R,KAAAkd,WAAA7L,KACArR,KAAAyC,UAA2BoP,QAAA,IAC3BR,EAAA8L,kBACA,IAEAnd,KAAAiU,YAAAjU,KAAAiU,YAAA1C,KAAAvR,MACAA,KAAAkd,WAAAld,KAAAkd,WAAA3L,KAAAvR,MAEAH,oBACA,MAAAiQ,YAAeA,EAAAZ,eAA2BlP,KAAAxG,MAC1CsW,EAAA+M,GAAA3N,GAEArP,mBAAA2E,GACA,MAAAsL,YAAeA,EAAAZ,eAA2BlP,KAAAxG,MAC1CgL,EAAA0K,iBACAY,EAAA+M,GAAA3N,GAGArP,SACA,MAAA1B,QAAeA,EAAAd,UAAA5M,KAAA0H,OAAAzE,SAAAsD,KAAwCgJ,KAAAxG,OACvDqY,OAAeA,EAAAoL,WAAkBjd,KAAAV,MACjC,IAAA8d,EAAA,EACA,MACAC,KACAC,KACAC,EAAA,CAAAzJ,EAAAtF,KACA,MACAgP,KADAH,EAAA1oB,OAAA,YAC0Cmf,EAAAlgB,QAAY4a,IACtDyO,EACAI,EAAA9a,KAAAib,GAEAJ,GATA,KAUAA,EAAAI,EAAA7oB,OAVA,GAWA0oB,EAAA9a,KAAAib,EAAAzR,MAAA,EAXA,GAWAqR,GAAAK,OAAA,QAGAJ,EAAA9a,KAAAib,IAGAJ,GAAAI,EAAA7oB,OACA2oB,EAAA/a,QAA4BuR,EAAAlgB,QAAY4a,MAExC,GAAA9a,EACA,UAAAogB,KAAApgB,EAAAwJ,KACA,GAAAD,MAAA8W,QAAAD,EAAAhY,QAIA,UAAA0S,KAAAsF,EAAAhY,OACAyhB,EAAAzJ,EAAAtF,QAJA+O,EAAAzJ,IAAAhY,QASA,OAAArC,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA4tB,GAAAD,eAAAlsB,MAC5C8V,QAAA8W,IACAA,EAAAjpB,IAAA,CAAA0f,EAAA4J,IAAAjkB,EAAAlB,EAAAmB,cAAA,QAA6E9F,IAAA8pB,GAAgB5J,IAC7FvN,QAAA8W,EAAA1oB,OAAA2oB,EAAA3oB,SAAA8E,EAAAlB,EAAAmB,cAAA,IAAA1K,OAAA8K,UAAmG9K,OAAA2B,GAAA,EAAA3B,CAAA2B,GAAA,EAAAC,QAAAE,UAA0C6sB,KAAA,KAAA9a,QAAA7C,KAAAkd,aAAuClmB,EAAA,2BACpLvH,MAAA6tB,EAAA3oB,OAAA0oB,EAAA1oB,UAEA8E,EAAAlB,EAAAmB,cAAAsa,IAAkD7V,UAAAd,UAAAwU,SAAA1Z,OAAA+b,QAAAlU,KAAAiU,2CChFlD,MAAA2J,GAAArf,EAAA,EAAAC,QACAiN,UACAvM,UAAA2B,EAAA,GAAApR,OAEA2Z,MACAlK,UAAA2B,EAAA,GAAApR,OAEAouB,kBACA1W,WAAA,QACAuH,WAAA7N,EAAA,GAAApR,SCIAquB,GAAA,OA0EA,MAAAC,GAAA/uB,OAAAqQ,EAAA,EAAArQ,CAAA,CAAAsQ,GAAuDjC,UAAAlF,OAAAuc,oBACvD,MAAAC,GACAvF,QACA5S,MAAA,EACA8S,iBAAA,QACAC,kBAAA,EACAF,WAAA,UACAxP,CAAA6U,GAAAvc,EAAA5C,OAAA4C,EAAA1H,IAEAwgB,UAAmBpR,CAAAxC,GAAA,MAEnB6R,EAAAlgB,OAAAmgB,EAAA,EAAAngB,CAAA2lB,GAGA,OACAzF,cACAxb,OAJA+b,EAAA,EAAAC,aAAApQ,EAAAwe,GAAA5O,GAKAS,kBAJAF,EAAA,EAAAG,wBAAAtQ,EAAAwe,GAAA5O,MAOA8O,IACAlO,YAAAL,EAAA,EAAAK,aAEAmO,GAAAjvB,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,CAAA+uB,GAAAC,GAAAhvB,eAhGAyK,EAAAlB,EAAAqH,UACAC,cACAC,SAAAC,WACAC,KAAAV,OACAsb,mBAAA,GAEA5a,KAAAgM,SAAA,MACA,MAAA3O,QAAmBA,EAAA3J,UAAkBsM,KAAAxG,MAKrC,OAJAxK,OAAA2O,EAAA,EAAA3O,EACA0E,SACAK,MAAAsJ,MAIA2C,KAAAke,WAAArqB,KACA,MAAAH,OAAmBA,GAASsM,KAAAxG,MAC5B,OAAAC,EAAAlB,EAAAmB,cAAAob,GAAA,GAAiElhB,OAASC,EAAApD,UAAcuH,iBAAyBxI,cAAA,EAAA+F,MAAA1B,EAAA0B,MAAA1B,EAAA0B,MAAA0C,WAAA,GAAA+S,WAAA,SAAA8S,GACjHpqB,EAAA4W,KAAAC,MAAArO,KAAAzM,MACAiE,EAAA4W,KAAAC,MAAA7N,MAAAjN,MAAAmG,MAAA/B,EAAA+B,MAAAnG,MAAA,SAAAquB,GACAjqB,EAAAqI,KACArI,EAAA6I,UAEAsD,KAAAme,WAAA,MACA,MAAA9gB,QAAmBA,EAAAlF,OAAAuc,gBAAA1d,KAAkCgJ,KAAAxG,OACrDohB,kBAAmBA,GAAoB5a,KAAAV,MAQvC,WAPAU,KAAAgM,WACAH,UAAAxX,IACA,MAAA5D,EAAA4D,EAAA5D,GACA,GAAAA,GAAA,OAAAA,EACA,OAAAA,EAAAwH,WAAA6T,SAAA,WAIArS,EAAAlB,EAAAmB,cAAA,OAAoDmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA4uB,GAAAC,mBACpDpkB,EAAAlB,EAAAmB,cAAAkd,GAAA,EAAA5nB,OAAA8K,UAAgE9K,OAAA2B,GAAA,EAAA3B,CAAA2B,GAAA,EAAAC,QAAAI,eAA+C6R,QAAA7C,KAAAwb,sBAAA7nB,KAAAijB,GAAA,EAAAwH,OAAA/P,QAAAuI,GAAA,EAAArjB,OAA4FyD,EAAA,0BAC3MvH,MAAAuH,yBAAwDqG,QAExD5D,EAAAlB,EAAAmB,cAAAsb,IAA6D3X,UAAAwU,OAAA+I,EAAAziB,OAAA+b,QAAAlU,KAAAob,uBAAA1G,mBAG7D,OAGA1U,KAAAob,uBAAA,CAAAvJ,IACA7R,KAAAyC,UAA2BmY,kBAAA/I,MAE3B7R,KAAAwb,sBAAAnK,KACArR,KAAAyC,UAA2BmY,mBAAA,IAC3BvJ,EAAA8L,mBAGAtd,oBACA,MAAAiQ,YAAeA,EAAAZ,eAA2BlP,KAAAxG,MAC1CsW,EAAAgO,GAAA5O,GAEArP,mBAAA2E,GACA,MAAAsL,YAAeA,EAAAZ,eAA2BlP,KAAAxG,MAC1CgL,EAAA0K,iBACAY,EAAAgO,GAAA5O,GAGArP,SACA,MAAAxC,QAAeA,EAAA3J,SAAAic,qBAAqC3P,KAAAxG,MACpD,OAAAC,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KAAAjC,QAAA,IAAAoJ,GAAAlW,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACA/O,EAAAlB,EAAAmB,cAAA+O,GAAA,UAA2ChI,KAAAgI,GAAA,aAAAE,KAC3ClP,EAAAlB,EAAAmB,cAAA+O,GAAA,UAA2ChI,KAAAgI,GAAA,aAAAE,GAAA9J,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA4uB,GAAAnS,YAC3ChS,EAAAlB,EAAAmB,cAAA+O,GAAA,UAA2ChI,KAAAgI,GAAA,aAAAE,GAAA9J,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA4uB,GAAAnS,YAC3ChS,EAAAlB,EAAAmB,cAAA+O,GAAA,UAA2ChI,KAAAgI,GAAA,aAAAE,GAAA9J,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA4uB,GAAAnS,aAAyDhS,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACpG/O,EAAAlB,EAAAmB,cAAA,OAAwCmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA4uB,GAAAxU,OACxC3P,EAAAlB,EAAAmB,cAAAob,GAAA,GAA8D/gB,MAAAsJ,EAAAzJ,OAAyByJ,UAAQ3J,SAAA0U,OAAAuH,GAAoD,EAAI7b,WAAQA,EAAAM,IAAAP,GAAAmM,KAAAke,WAAArqB,MAC/JmM,KAAAme,mBChFAE,GAAAC,IACA,OAAAA,GACA,yBACA,0BACA,yBACA,0BACA,oBACA,uBA2DA,MAAAC,GAAAvvB,OAAAqQ,EAAA,EAAArQ,CAAAsQ,KAEAkf,eACA,gBACA,qBACA,yBAIAC,GAAAzvB,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,CAAAuvB,MAAAvvB,eAjEAyK,EAAAlB,EAAAqH,UACAC,cACAC,SAAAC,WACAC,KAAAV,OACAof,aAAA,GAEA1e,KAAA2e,eAAA,EAAAtN,EAAAuN,KACA5e,KAAAyC,UACAic,aAAAE,MAGA5e,KAAA6e,iBAAA,MACA,MAAAL,cAAmBA,EAAAnhB,WAAyB2C,KAAAxG,MAC5C4P,KAMA,OALAoV,EAAA7mB,QAAA2mB,IACAjhB,IAAAghB,GAAAC,IACAlV,EAAA7G,KAAA+b,KAGAlV,IAEApJ,KAAA8e,OAAA,EAAAR,EAAAtb,IACAvJ,EAAAlB,EAAAmB,cAAAqlB,GAAA,GAA8CC,SAAAhc,EAAApP,OAA0ByqB,GAAAC,SAAoB9a,MAAAxD,KAAAif,YAAAX,IAAqCte,KAAAke,WAAAI,KAEjIte,KAAAke,WAAA,CAAAI,IACA,MAAAjhB,QAAmBA,EAAAlF,QAAgB6H,KAAAxG,OACnCklB,aAAmBA,GAAe1e,KAAAV,MAClCkf,EAAAxe,KAAA6e,mBACAK,EAAAb,GAAAG,EAAAE,IACAS,EAAAd,GAAAC,GACA,OAAAY,IAAAC,EACA1lB,EAAAlB,EAAAmB,cAAAukB,IAAgE5gB,QAAA8hB,EAAAhnB,OAAAuc,cAAArX,IAGhE,OAGA2C,KAAAof,QAAA,MACA,MAAAZ,EAAAxe,KAAA6e,mBACA,OAAAL,EACA/kB,EAAAlB,EAAAmB,cAAA2lB,GAAA,GAAmDC,UAAA,EAAAC,UAAAvf,KAAAV,MAAAof,aAAAvQ,SAAAnO,KAAA2e,gBAAoFH,EAAApqB,IAAA,CAAAkqB,EAAAtb,IAAAhD,KAAA8e,OAAAR,EAAAtb,KAGvI,OAGAhD,KAAAif,YAAA,CAAAX,IACA,MAAAtnB,EAAmBA,GAAIgJ,KAAAxG,MAEvB,OAAAxC,EAAA,oBAA0CqG,QAD1CghB,GAAAC,IAAA,OAIAze,SACA,OAAApG,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KAAAxI,KAAAof,eCxBA,MAAAI,GAAAxwB,OAAAqQ,EAAA,EAAArQ,CAAAsQ,SAGAmgB,GAAAzwB,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,CAAAwwB,MAAAxwB,eArCAyK,EAAAlB,EAAAqH,UACAC,YAAArG,GACAsG,MAAAtG,GACAwG,KAAAV,OACAob,uBAAA,GAEA1a,KAAAgb,2BAAA,CAAAnJ,IACA7R,KAAAyC,UAA2BiY,sBAAA7I,MAE3B7R,KAAAsb,0BAAA,MACAtb,KAAAyC,UAA2BiY,uBAAA,MAE3B1a,KAAAgb,2BAAAhb,KAAAgb,2BAAAzJ,KAAAvR,MACAA,KAAAsb,0BAAAtb,KAAAsb,0BAAA/J,KAAAvR,MAEAH,SACA,MAAA1H,KAAeA,EAAAkF,UAAArG,KAAmBgJ,KAAAxG,OAClCkhB,sBAAeA,GAAwB1a,KAAAV,MACvC,OAAA7F,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACA/O,EAAAlB,EAAAmB,cAAA2P,GAAA,OACA5P,EAAAlB,EAAAmB,cAAA4P,GAAA,GAA+CV,GAAA,IAC/CnP,EAAAlB,EAAAmB,cAAA,OAAgDmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAqtB,GAAAE,sBAChD9iB,EAAAlB,EAAAmB,cAAAkd,GAAA,EAAA5nB,OAAA8K,UAAoE9K,OAAA2B,GAAA,EAAA3B,CAAA2B,GAAA,EAAAC,QAAAC,sBAAsDgS,QAAA7C,KAAAsb,0BAAA3nB,KAAAijB,GAAA,EAAAwH,OAAA/P,QAAAuI,GAAA,EAAAC,YAAqG7f,EAAA,yCAC/NyC,EAAAlB,EAAAmB,cAAA4P,GAAA,GAA+CC,GAAA,GAAAC,GAAA,GAC/C/P,EAAAlB,EAAAmB,cAAA,OAAgDmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAqtB,GAAAG,WAChD/iB,EAAAlB,EAAAmB,cAAA+kB,IAA4DphB,UAAAlF,WAC5DsB,EAAAlB,EAAAmB,cAAA4P,GAAA,GAA+CC,GAAA,GAAAC,GAAA,GAC/C/P,EAAAlB,EAAAmB,cAAA,OAAgDmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAqtB,GAAAK,YAAmCnW,QAAA,sBAAAlJ,IAAA5D,EAAAlB,EAAAmB,cAAA,OAA2EmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAqtB,GAAAM,gBAC9JljB,EAAAlB,EAAAmB,cAAAsd,GAAA,OACAvd,EAAAlB,EAAAmB,cAAAud,GAAA,GAA4D1hB,MAAAyB,EAAA,4BAAAkgB,QAAA,QAC5Dzd,EAAAlB,EAAAmB,cAAAsjB,IAAiE3f,UAAA5M,GAAA,OAAA0H,OAAAgG,QAAAhG,EAAA5C,OAAA4C,EAAA1H,WACjEgJ,EAAAlB,EAAAmB,cAAA4gB,IAAkDjd,UAAAwU,OAAA6I,EAAAviB,OAAA+b,QAAAlU,KAAAgb,kCCiPlD,MAAA0E,GAAA1wB,OAAAwQ,EAAA,EAAAxQ,UAAAyQ,EAAA,QAAAzQ,iBA7QAyK,EAAAlB,EAAAqH,UACAC,YAAArG,GACAsG,MAAAtG,GACAwG,KAAAV,OACAqgB,WACAC,SAEA5f,KAAAkC,UAAA,MACA,MAAAyS,MAAmBA,EAAAjhB,SAAAsD,KAAmBgJ,KAAAxG,MACtC,IAAAmb,IAAAjhB,EACA,OAEA,MAAAmsB,EAAA7wB,OAAA2O,EAAA,EAAA3O,CAAA2lB,EAAA1D,UACA6O,EAAA9f,KAAA+f,mBACAxV,EAAAvb,OAAAQ,EAAA,EAAAR,CAAA0E,KAAA4W,MAAA5W,EAAA4W,KAAAC,MACA7W,EAAA4W,KAAAC,MAAArO,KAAAzM,MACA,GACAkwB,EAAAG,IAGAtc,MAAAxM,EAAA,kCAGAwM,MAAAxM,EAAA,uCAGAgpB,QAAA,OACAxc,MAAAxM,EAAA,mCAAqEuT,UACrE0V,YAAAC,EAAA,KAGA1c,MAAA,OAKAwc,QAAAH,EACArc,MAAAxM,EAAA,mCAAqEqG,QAAAwiB,IACrEI,YAAAC,EAAA,KAGA1c,MAAAxM,EAAA,uCAGAgpB,QAAA,OACAxc,MAAAxM,EAAA,mCACAipB,YAAAC,EAAA,KAGA1c,MAAA,KAGAoc,KACA5wB,OAAA2O,EAAA,EAAA3O,EACA0E,SACAK,MAAA+rB,GAAAD,IAEAzrB,IAAA,CAAA+D,EAAA6K,KACA,MAAAzN,EAAA4C,GAAA,OAAAA,EAAA5C,MAAA4C,EAAA5C,MAAA,GACA4qB,EAAAngB,KAAAogB,sBAAAjoB,EAAA6K,GACA9G,EAAA8D,KAAAqgB,aAAAloB,EAAA6K,GACA2T,EAAA3W,KAAAsgB,WAAAnoB,EAAA6K,GACA4c,EAAArd,MACAge,QACyB/c,MAAA/J,EAAAlB,EAAAmB,cAAA,WAAAnE,KACAiO,MAAA/J,EAAAlB,EAAAmB,cAAA,WAAAymB,KACA3c,MAAA/J,EAAAlB,EAAAmB,cAAA,WAAAwC,KACAsH,MAAA/J,EAAAlB,EAAAmB,cAAA,WAAAid,KAEzB9E,QAAA,EACA1Z,OACAqoB,WACAnjB,QAAAyiB,SAAwDA,IAAcD,EACtE7c,QACA7K,OACAwc,WAGA8L,OAAA,EAAAzd,EACAud,QAEA/c,MAAA/J,EAAAlB,EAAAmB,cAAA,OAA+D9F,OAAS,EAAAoP,WAAmBhM,EAAA,kBAK3FgJ,KAAAyC,UACAkd,UACAC,OACAc,cAGA1gB,KAAAsgB,WAAA,EAAAnoB,EAAA6K,KACA,MAAA3F,QAAmBA,EAAAsX,SAAiB3U,KAAAxG,MACpC,OAAAC,EAAAlB,EAAAmB,cAAA6gB,IAAwDld,UAAAlF,OAAAwc,YAExD3U,KAAA2gB,cAAA,MACA,MAAAhM,MAAmBA,EAAA3d,KAAWgJ,KAAAxG,MAC9B,UAAAgV,KAAAxf,OAAA8M,OAAA6Y,EAAA1D,UACA,SAAAzC,EACA,OAAA/U,EAAAlB,EAAAmB,cAAAknB,EAAA,GAAkEC,YAAA,IAGlE,OAAApnB,EAAAlB,EAAAmB,cAAA0G,EAAA,OACA3G,EAAAlB,EAAAmB,cAAA2G,EAAA,GAAqDC,KAAAwgB,EAAA,IACrDrnB,EAAAlB,EAAAmB,cAAAgH,EAAA,OAAA1J,EAAA,wCAEAgJ,KAAA+f,iBAAA,MACA,MAAApL,MAAmBA,GAAQ3U,KAAAxG,MAC3B,IAAAsmB,EACA,UAAAziB,KAAArO,OAAAmiB,KAAAwD,EAAA1D,UAAA,CACA,MAAAyM,EAAArgB,EAAAlE,QAAA,QACA,QAAAukB,EAAA,CACAoC,EAAAziB,EAAA0jB,UAAArD,EAAA,GACA,OAGA,OAAAoC,IAEA9f,KAAAogB,sBAAA,EAAAjoB,EAAA6K,KACA,MAAAhM,EAAmBA,GAAIgJ,KAAAxG,MACvBpD,EAAA,IAAAC,KACA6c,EAAA9c,EAAAS,UACAO,IAAAhB,EAAAG,WAAA,aACA9G,EAAAT,OAAAQ,EAAA,EAAAR,CAAA8V,KAAAkc,IAAA7oB,EAAA4E,aACAkkB,EAAA,OAAA9oB,EAAA0E,aAAAiI,KAAAkc,IAAA7oB,EAAA0E,cAAA3M,QAAA,KACA,IAAAgxB,EAAA,eAOA,OANA,OAAA/oB,EAAA0E,cAAA1E,EAAA4E,WAAA,IACAmkB,GAAA,aAEA,OAAA/oB,EAAA0E,cAAA1E,EAAA4E,WAAA,IACAmkB,GAAA,aAEAznB,EAAAlB,EAAAmB,cAAA,OAAgDmF,UAAAsd,IAChD1iB,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAAqiB,EAAAttB,6BAAwDoP,KACpGhM,EAAA,WAAkCvH,MAAAwxB,IAClC1a,QAAA,OAAApO,EAAA0E,cAAA1E,EAAA4E,WAAA,IAAAtD,EAAAlB,EAAAmB,cAAA,QAAgHmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA,gBAAA6sB,GAAAE,WAAAnoB,6BAAkFoP,MAClMuD,QAAA,OAAApO,EAAA0E,cAAA1E,EAAA4E,WAAA,IAAAtD,EAAAlB,EAAAmB,cAAA,QAAgHmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA,kBAAA6sB,GAAAE,UAAAF,GAAAG,eAAApoB,6BAA0GoP,OAC1NvJ,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA6sB,GAAAK,iBAAAtoB,6BAAuEoP,KAASuD,QAAA,OAAApO,EAAA0E,cAAA1E,EAAA4E,WAAA,GAC5HwJ,QAAA2M,EAAA,IACAlc,EAAA,qCAAkEkc,OAAA9b,QAAA3H,UAClEuH,EAAA,2CACAkc,OACA9b,QACA3H,UAEA8W,QAAA,OAAApO,EAAA0E,cAAA1E,EAAA4E,WAAA,GACAwJ,QAAA2M,EAAA,IACAlc,EAAA,qCAAsEkc,OAAA9b,QAAA3H,UACtEuH,EAAA,2CACAkc,OACA9b,QACA3H,UAEAuH,EAAA,sCAAmEkc,OAAA9b,cAEnE4I,KAAAmhB,UAAA,MACA,MAAAxM,MAAmBA,GAAQ3U,KAAAxG,OAC3BmmB,QAAmBA,GAAU3f,KAAAV,MAC7BwgB,EAAA9f,KAAA+f,mBACA,IAAA/c,GAAA,EACA1K,EAAA8oB,EAAA,EAAAC,IACA,UAAAztB,KAAA5E,OAAAmiB,KAAAwD,EAAAyB,UAAA,CACA,IAAAkL,EAAA,EACA,UAAAC,KAAA5B,EAAA,CACA,GAAA4B,EAAAvB,UAAApsB,EAAA,CACA0E,EACA,QAAAqc,EAAAyB,SAAAxiB,GACAwtB,EAAA,EAAAC,IACAD,EAAA,EAAAI,KACAxe,EAAAse,GAAAxB,EAAA,KACA,MAEAwB,KAGA,OAAAte,GAAA,GAAiCA,QAAA1K,kBAEjC0H,KAAAyhB,aAAA,EAAAtpB,EAAAkF,EAAAsX,EAAA3R,IACAvJ,EAAAlB,EAAAmB,cAAA+lB,IAA2DpiB,UAAAlF,OAAAvE,kBAAkDoP,OAE7GhD,KAAAqgB,aAAA,EAAAloB,EAAA6K,KACA,MAAAtP,OAAmBA,EAAAsD,KAAYgJ,KAAAxG,MAC/B0C,EAAAxI,EAAA4W,KAAAC,MAAArO,KAAAzM,MACA,OAAAgK,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACAxZ,OAAAQ,EAAA,EAAAR,CAAAmJ,EAAA+D,MACAzC,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA6sB,GAAAK,iBAAAtoB,kBAA4DoP,KAAShM,EAAA,mBACjHvH,OAAA0I,EAAA+D,OAAA,KAAAhM,QAAA,SAGA8P,KAAA0hB,iBAAA,EAAArQ,EAAAsQ,EAAA9P,KACA,MAAA7a,EAAmBA,GAAIgJ,KAAAxG,OACvBomB,KAAmBA,GAAO5f,KAAAV,OACPkhB,WAAAroB,KAAaA,EAAAkF,UAAAsX,QAAA3R,UAAiC4c,EAAA+B,GAEjE/B,EAAA+B,EAAA,GAAApB,MADA1O,IAEqBrO,MAAAxD,KAAAyhB,aAAAtpB,EAAAkF,EAAAsX,EAAA3R,OAKAQ,MAAA/J,EAAAlB,EAAAmB,cAAA,OAAoC9F,OAAS,EAAAoP,WAAmBhM,EAAA,cAGrF4oB,EAAA+B,GAAA9P,SACA7R,KAAAyC,UACAmd,WAGA5f,KAAA6N,eAAA,EAAAwD,EAAAuQ,EAAAD,KACA,MAAAE,WAAmBA,GAAa7hB,KAAAxG,MAChC,IAAAomB,EAWA,IAVA,IAAA+B,EACA/B,EAAA5f,KAAAV,MAAAsgB,KAAAxrB,IAAA0tB,IACAA,EAAAC,SAAAH,EACAE,KAIAlC,MAAA5f,KAAAV,MAAAsgB,OACA+B,GAAAI,SAAAH,EAEAC,EAAA,CACA,MAAAG,KACA,UAAAF,KAAAlC,EACAkC,EAAAC,UAAAD,EAAA3pB,OAAA2pB,EAAArB,QACAuB,EAAAzf,KAAAuf,EAAA3pB,MAGA0pB,EAAAG,GAEAhiB,KAAAyC,UAA2Bmd,WAE3B5f,KAAAiiB,aAAA,EAAA5Q,EAAArO,EAAA1K,KACA,MAAA4pB,OAAmBA,GAASliB,KAAAxG,OAC5BmmB,QAAmBA,GAAU3f,KAAAV,MAC7B4iB,GAGAA,EAFAvC,EAAA3c,EAAA,GAAAgd,QACA1nB,IAAA8oB,EAAA,EAAAC,OAIArhB,KAAA0hB,iBAAA1hB,KAAA0hB,iBAAAnQ,KAAAvR,MACAA,KAAA6N,eAAA7N,KAAA6N,eAAA0D,KAAAvR,MACAA,KAAAiiB,aAAAjiB,KAAAiiB,aAAA1Q,KAAAvR,MAEAH,oBACAG,KAAAkC,YAEArC,mBAAA2E,GACA,MAAAmQ,MAAeA,EAAAjhB,UAAgBsM,KAAAxG,MAC/B2oB,EAAAzuB,KAAAwJ,KAAA4J,KAAAC,UAAArT,EAAAwJ,MAAA,GACAklB,EAAA5d,EAAA9Q,QAAA8Q,EAAA9Q,OAAAwJ,KACA4J,KAAAC,UAAAvC,EAAA9Q,OAAAwJ,MACA,GACAlO,OAAAmgB,EAAA,EAAAngB,CAAAwV,EAAAmQ,SAAA3lB,OAAAmgB,EAAA,EAAAngB,CAAA2lB,IACAyN,IAAAD,GACAniB,KAAAkC,YAGArC,SACA,MAAA8f,QAAeA,EAAAC,QAAgB5f,KAAAV,MAC/B,OAAA7F,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACA/O,EAAAlB,EAAAmB,cAAA0nB,EAAA,GAAwC7J,aAAA,gBAAAgJ,MAAAZ,EAAA9gB,UAAAud,GAAAiG,WAAAriB,KAAA0hB,iBAAA9B,OAAAc,OAAA1gB,KAAAmhB,YAAAhT,SAAAnO,KAAA6N,eAAAqU,OAAAliB,KAAAiiB,aAAAK,eAAA,YACxC7oB,EAAAlB,EAAAmB,cAAA6oB,EAAA,QACA9oB,EAAAlB,EAAAmB,cAAA8oB,EAAA,SACAjc,QAAA,IAAAqZ,EAAAjrB,SAAA8E,EAAAlB,EAAAmB,cAAA,OAAuEmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAA6sB,GAAAC,aAAoC9b,KAAA2gB,uICtR3G,MAAA8B,GAAAlkB,EAAA,EAAAC,QACAvN,QACAgY,YAAApI,EAAA,GAAApR,OAEAkf,qBACA1M,MAAA,QAEAygB,kBACAhW,gBAAA7L,EAAA,GAAApR,MACAoa,cAAAhJ,EAAA,GAAApR,MACAif,WAAA7N,EAAA,GAAApR,MACAkzB,YAAA9hB,EAAA,GAAApR,MACAgtB,aAAA5b,EAAA,GAAApR,MACA0X,WAAAtG,EAAA,GAAApR,MACAwZ,YAAApI,EAAA,GAAApR,SC8KA,MAAAmzB,GAAA5zB,OAAAwQ,EAAA,EAAAxQ,iBAvLAyK,EAAAlB,EAAAqH,UACAC,cACAC,SAAAC,WACAC,KAAAV,OACAujB,iBACAC,kBAAA9iB,KAAAxG,MAAAupB,aAAA,GACAC,aAAA,GACAC,gBAAA,OACAC,oBAAA/c,EACAzS,YAAAyS,GAEAnG,KAAAmjB,SAAA,CAAAxO,IACA,MAAAkO,KACA7zB,OAAAmiB,KAAAwD,EAAA1D,UAAAtZ,QAAA/D,IACA,SAAA+gB,EAAA1D,SAAArd,GACA,GAAAqJ,MAAA8W,QAAAY,EAAA1D,SAAArd,IACA+gB,EAAA1D,SAAArd,GAAA+D,QAAAlI,IACA,MAAA2zB,EAAAxvB,EAAAnD,IAAAmD,EACAwb,EAAApP,KAAAqjB,UAAAD,EAAA3zB,GACAozB,EAAAtgB,KAAA6M,SAGA,CACA,MAAAgU,EAAAxvB,EAAAnD,IAAAmD,EACAwb,EAAApP,KAAAqjB,UAAAD,EAAAzO,EAAA1D,SAAArd,IACAivB,EAAAtgB,KAAA6M,MAIApP,KAAAyC,UAA2BogB,oBAE3B7iB,KAAAsjB,aAAA,CAAAjS,IACA,MAAAyR,kBAAmBA,GAAoB9iB,KAAAV,MACvCU,KAAAyC,UAA2BogB,mBAC3B7iB,KAAAxG,MAAA+pB,gBAAAT,EAAAryB,GAAA,IACA4gB,EAAA8L,mBAGAnd,KAAAwjB,YAAA,EAAAJ,EAAA3zB,KACA,MAAAqzB,kBAAmBA,GAAoB9iB,KAAAV,MACvCU,KAAAxG,MAAAiqB,cAAAX,EAAAryB,GAAAhB,KAEAuQ,KAAAqjB,UAAA,EAAAD,EAAA3zB,KACA,MAAAqzB,kBAAmBA,GAAoB9iB,KAAAV,MACvCokB,EAAA1jB,KAAA2jB,eAAAP,EAAA3zB,GACA,OACA2zB,MAAA,IAAAA,EAAAjqB,QAAA,QAAAiqB,EAAAN,EAAAryB,GACA8E,MAAAmuB,EACAj0B,WAGAuQ,KAAA2jB,eAAA,EAAAP,EAAA3zB,KACA,MAAAuH,EAAmBA,GAAIgJ,KAAAxG,MACvB,IAAAoqB,EAAA,GACA,GAAAR,EAAA5f,MACAogB,EAAAR,EAAA5f,WAIA,OAAA4f,GACA,wBACAQ,EAAA5sB,EAAA,sCACA,MACA,wBACA4sB,EAAA5sB,EAAA,uCACA,MACA,mBACA4sB,EAAA5sB,EAAA,uCACA,MACA,QACA4sB,EAAAR,EAqBA,OAhBAQ,EADA,IADAA,EAAAzqB,QAAA,QAEA,QAAAyqB,EAAA7X,MAAA,QAIA6X,EAAAC,OAAA,GAAAC,cAAAF,EAAA7X,MAAA,QAEAtc,EAAAyzB,eACAU,MAAiCn0B,EAAAyzB,eAAA1f,OACjC/T,EAAAyzB,kBAA4CzzB,EAAAs0B,YAAAvgB,OAAA/T,EAAAs0B,cAE5Ct0B,EAAA+T,MACAogB,GAAAn0B,EAAA+T,MAGAogB,GAAAn0B,EAEAm0B,IAEA5jB,KAAAgkB,oBAAA,MACAhkB,KAAAxG,MAAAyqB,oBAEAjkB,KAAAkkB,gBAAA,CAAAprB,IACA,MAAAkqB,aAAmBA,EAAAF,qBAAkC9iB,KAAAV,MACrD,UAAAxG,EAAAlF,KAAAovB,KAAAruB,OAAA,IACAqL,KAAAyC,UAA+BugB,aAAA,KAC/BhjB,KAAAwjB,YAAAV,EAAAE,GACAlqB,EAAAqrB,kBACArrB,EAAAqkB,oBAGAnd,KAAAokB,aAAAhV,KACA,MAAAyT,cAAmBA,GAAgB7iB,KAAAV,MACnC0D,EAAA6f,EAAA1pB,QAAAiW,GACA,GAAApM,GAAA,GACA,MAAAqhB,MACAxB,EAAA9W,MAAA,EAAA/I,MACA6f,EAAA9W,MAAA/I,EAAA,IAEAhD,KAAAyC,UAA+BogB,cAAAwB,IAC/BrkB,KAAAxG,MAAA+pB,gBAAAnU,EAAAgU,MAAAhU,EAAA3f,UAGAuQ,KAAAskB,iBAAAC,KACA,MAAAzB,kBAAmBA,GAAoB9iB,KAAAV,MACvCwjB,IAAAyB,GACAvkB,KAAAyC,UACAugB,aAAA,GACAF,kBAAAyB,MAIAvkB,KAAAwkB,mBAAA,CAAAxB,IACAhjB,KAAAyC,UAA2BugB,mBAG3BnjB,mBAAA2E,EAAAigB,GACA,MAAA1B,aAAeA,EAAApO,QAAAjhB,UAA8BsM,KAAAxG,MAC7C9F,IAAA1E,OAAA01B,GAAA,EAAA11B,CAAA0E,EAAA8Q,EAAA9Q,SACAsM,KAAAmjB,SAAAxO,GAEA3lB,OAAA01B,GAAA,EAAA11B,CAAA+zB,EAAAve,EAAAue,eACA/iB,KAAAyC,UACAqgB,kBAAA9iB,KAAAxG,MAAAupB,aAAA,KAIAljB,cACA,MAAAijB,kBAAeA,EAAAE,gBAAkChjB,KAAAV,MACjD,OAAAwjB,EAGArpB,EAAAlB,EAAAmB,cAAAirB,GAAA,GAAgDl0B,GAAA,SAAA6mB,SAAAtX,KAAAwkB,mBAAAI,WAAA5kB,KAAAkkB,gBAAAW,YAAA/B,EAAA+B,YAAAp1B,MAAAuzB,IAFhD,KAIAnjB,SACA,MAAAkjB,aAAeA,EAAA+B,mBAAAlW,aAAA5X,KAAgDgJ,KAAAxG,OAC/DqpB,cAAeA,GAAgB7iB,KAAAV,MAC/B,OAAA7F,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAyzB,GAAAC,mBAC5CjpB,EAAAlB,EAAAmB,cAAAqrB,GAAA,OACAtrB,EAAAlB,EAAAmB,cAAAsrB,GAAA,GAAqDzN,aAAAvgB,EAAA,0CACrDyC,EAAAlB,EAAAmB,cAAAurB,GAAA,OACAxrB,EAAAlB,EAAAmB,cAAAwrB,GAAA,OACAzrB,EAAAlB,EAAAmB,cAAAyrB,GAAA,GAA6D5N,aAAAvgB,EAAA,+CAAgE+rB,EAAA3uB,IAAA,EAAqB3D,KAAA8E,WAClJkE,EAAAlB,EAAAmB,cAAA0rB,GAAA,GAA+ExxB,mBAAqBnD,IAAG8E,QAAA9F,MAAAgB,OAEvGgJ,EAAAlB,EAAAmB,cAAAwrB,GAAA,OAAAllB,KAAAqlB,gBACA5rB,EAAAlB,EAAAmB,cAAAurB,GAAA,OACAxrB,EAAAlB,EAAAmB,cAAAwrB,GAAA,OACAzrB,EAAAlB,EAAAmB,cAAAkd,GAAA,GAAyDE,WAAAgO,EAAAjiB,QAAA7C,KAAAgkB,oBAAA3V,QAAAuI,GAAA,EAAArjB,MACzDkG,EAAAlB,EAAAmB,cAAA,QAA6DmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAyzB,GAAAxxB,SAAgC+F,EAAA,+BAC7FyC,EAAAlB,EAAAmB,cAAA4rB,GAAA,WACA7rB,EAAAlB,EAAAmB,cAAAurB,GAAA,GAAuD70B,OAAS+W,WAAA,SAChE1N,EAAAlB,EAAAmB,cAAAwrB,GAAA,OAAAtW,KACAnV,EAAAlB,EAAAmB,cAAAsrB,GAAA,GAAqDzN,aAAAvgB,EAAA,kDACrDyC,EAAAlB,EAAAmB,cAAAurB,GAAA,OACAxrB,EAAAlB,EAAAmB,cAAAwrB,GAAA,OACAzrB,EAAAlB,EAAAmB,cAAA8G,EAAA,GAAwDC,KAAA8kB,GAAA,EAAA5c,GAAA6c,aAAA,MAAyCxuB,EAAA,+BACjGvH,MAAAuQ,KAAAxG,MAAAisB,kBAEA5C,EAAAluB,OAAA,GAAA8E,EAAAlB,EAAAmB,cAAAD,EAAAlB,EAAAiQ,SAAA,KACA/O,EAAAlB,EAAAmB,cAAAurB,GAAA,OACAxrB,EAAAlB,EAAAmB,cAAAwrB,GAAA,OAAAluB,EAAA,wCACAyC,EAAAlB,EAAAmB,cAAAurB,GAAA,OACAxrB,EAAAlB,EAAAmB,cAAAwrB,GAAA,OAAArC,EAAAzuB,IAAA,CAAA+D,EAAA6K,IAAAvJ,EAAAlB,EAAAmB,cAAAgsB,GAAA,GAAkIt1B,OAASqsB,aAAA,QAAuB7oB,sBAAyBoP,IAAMH,QAAA,IAAA7C,KAAAokB,aAAAjsB,IAA2CA,EAAA5C,UAC5OkE,EAAAlB,EAAAmB,cAAAurB,GAAA,OACAxrB,EAAAlB,EAAAmB,cAAAwrB,GAAA,OACAzrB,EAAAlB,EAAAmB,cAAAkd,GAAA,GAA6D/T,QAAA7C,KAAAsjB,aAAAjV,QAAA,SAA+CrX,EAAA,+CCxK5G2uB,GAAA,OACAC,IACA7T,MAAA,OACA3C,QACA5S,MAAA,GACAvG,OAAA,EACAoZ,WAAA,UACAC,iBAAA,QACAC,kBAAA,GAEA0B,UACApT,kBAAA,KAEAuY,UACAla,KAAA,SAwQA,MAAA2pB,GAAA72B,OAAAqQ,EAAA,EAAArQ,CAAA,CAAAsQ,EAAA9F,KACA,MAAAsX,EAAA9hB,OAAAmgB,EAAA,EAAAngB,CAAA+hB,SAAAC,QACA2D,GACA5C,MAAA,OACA3C,OAAApgB,OAAA8K,UAAgC8rB,GAAAxW,OAAA0B,EAAA1B,QAChC6B,SAAAH,EAAAG,UAAA2U,GAAA3U,SACAmF,SAAAtF,EAAAsF,UAAAwP,GAAAxP,UAEAlH,EAAAlgB,OAAAmgB,EAAA,EAAAngB,CAAA2lB,GACAjhB,EAAA+b,EAAA,EAAAC,aAAApQ,EAAAqmB,GAAAzW,GACAgD,EAAAzC,EAAA,EAAA0C,kBAAA7S,EAAAqmB,GAAAzW,GACAS,EAAAF,EAAA,EAAAG,wBAAAtQ,EAAAqmB,GAAAzW,GACAkD,EAAApjB,OAAAqjB,EAAA,EAAArjB,CAAAsjB,EAAA,GAIA,OACAzf,UAJAyf,EAAA,EAAAC,gBAAAjT,EAAA,MAAA8S,GAKAI,eAJAF,EAAA,EAAAG,qBAAAnT,EAAA,MAAA8S,GAKAM,qBAJAJ,EAAA,EAAAK,2BAAArT,EAAA,MAAA8S,GAKAuC,QACAzF,cACAxb,SACAwe,cACAvC,uBAGAmW,IACAhW,YAAAL,EAAA,EAAAK,aAEA/gB,EAAA,EAAAC,OAAAwQ,EAAA,EAAAxQ,EAAA,CAAAA,OAAAyQ,EAAA,QAAAzQ,CAAA62B,GAAAC,GAAA92B,eAnSAyK,EAAAlB,EAAAqH,UACAC,YAAAmQ,EAAAC,GACAnQ,MAAAkQ,EAAAC,GACAjQ,KAAAkQ,cACAyP,WACAlF,mBAAA,EACAmF,QACAoC,kBAEAhiB,KAAAV,MAAAtQ,OAAA8K,UAAqCkG,KAAAkQ,cACrClQ,KAAA6a,eAAA,CAAA3mB,IACA,MAAAumB,kBAAmBA,EAAAuH,iBAAmChiB,KAAAV,OACtDqV,MAAmBA,GAAQ3U,KAAAxG,MAC3BqmB,EAAA7wB,OAAA2O,EAAA,EAAA3O,CAAA2lB,EAAA1D,UACA6O,EAAA9f,KAAA+f,mBACA,OAAAtmB,EAAAlB,EAAAmB,cAAAqc,IAAsDE,WAAA+L,EAAArtB,SAAAT,EAAAS,OAAA0I,QAAAyiB,SAA4FA,IAAcD,EAAAhO,OAAA4I,EAAA3mB,MAAAkuB,EAAA9N,QAAAlU,KAAA8a,uBAAAnG,YAEhK3U,KAAA+lB,gBAAA,CAAAlG,IACA,MAAA7oB,EAAmBA,GAAIgJ,KAAAxG,MACvB,4BAAAqmB,IAGApvB,GAAA,oBACA8E,MAAAyB,EAAA,6BACAwM,MAAAxM,EAAA,uCACA6tB,YAAA7tB,EAAA,4CACAutB,WAAA,SAIA,iBAAA1E,IAGApvB,GAAA,eACA8E,MAAAyB,EAAA,6BACAwM,MAAAxM,EAAA,uCACA6tB,YAAA7tB,EAAA,4CACAutB,WAAA,SAIA,sBAAA1E,IAGApvB,GAAA,oBACA8E,MAAAyB,EAAA,6BACAwM,MAAAxM,EAAA,sCACA6tB,YAAA7tB,EAAA,2CACAutB,WAAA,WAQA9zB,GAAA,MACA8E,MAAAyB,EAAA,6BACAwM,MAAAxM,EAAA,mCACA6tB,YAAA7tB,EAAA,wCACAutB,WAAA,WAMAvkB,KAAA+f,iBAAA,MACA,MAAApL,MAAmBA,GAAQ3U,KAAAxG,MAC3B,IAAAwsB,EACA,UAAA3oB,KAAArO,OAAAmiB,KAAAwD,EAAA1D,UAAA,CACA,MAAAyM,EAAArgB,EAAAlE,QAAA,QACA,QAAAukB,EAAA,CACAsI,EAAA3oB,EAAA0jB,UAAArD,EAAA,GACA,OAGA,OAAAsI,IAEAhmB,KAAAimB,cAAA,EAAAC,GAAA,KACA,MAAAxyB,OAAmBA,GAASsM,KAAAxG,MAC5BvC,EAAAvD,KAAA4W,KAAA5W,EAAA4W,KAAArT,MAAA,EACAuF,EAAA9I,KAAA4W,MAAA5W,EAAA4W,KAAA8E,QAAA1b,EAAA4W,KAAA8E,OAAA5S,MACA9I,EAAA4W,KAAA8E,OAAA5S,MACAopB,GAAAxW,OAAA5S,MAIA2pB,GAHAzyB,KAAA4W,MAAA5W,EAAA4W,KAAA8E,QAAA1b,EAAA4W,KAAA8E,OAAAnZ,OACAvC,EAAA4W,KAAA8E,OAAAnZ,OACA2vB,GAAAxW,OAAAnZ,QACAuG,EAAA,EACA,OAAA/C,EAAAlB,EAAAmB,cAAA0sB,EAAA,GAAqDC,UAAApvB,EAAAqvB,gBAAAtmB,KAAAumB,oBAAAC,UAAAxmB,KAAAymB,cAAAN,OAAAO,QAAAlqB,EAAA6R,QAAA6X,EAAAE,EAAA,EAAAnK,OAAAmK,EAAA,EAAAO,IAAAC,SAAA,+CAErD5mB,KAAA6mB,SAAA,MACA,MAAAlS,MAAmBA,EAAAjhB,UAAgBsM,KAAAxG,MACnCqmB,EAAA7wB,OAAA2O,EAAA,EAAA3O,CAAA2lB,EAAA1D,UACA6O,EAAA9f,KAAA+f,mBACA,OAAAtmB,EAAAlB,EAAAmB,cAAAgmB,IAAuDriB,QAAAyiB,SAAiCA,IAAcD,EAAAgC,WAAA7hB,KAAA8mB,eAAA5E,OAAAliB,KAAA+mB,WAAApS,QAAAjhB,aAEtGsM,KAAAgnB,WAAA,MACA,MAAAhF,cAAmBA,GAAgBhiB,KAAAV,OACnCqV,MAAmBA,EAAAjhB,SAAAsD,KAAmBgJ,KAAAxG,MACtCqmB,EAAA7wB,OAAA2O,EAAA,EAAA3O,CAAA2lB,EAAA1D,UACA+U,EAAAhmB,KAAA+f,mBACAgD,EAAA/iB,KAAA+lB,gBAAAC,EAAA,MAAAnG,GACA,OAAApmB,EAAAlB,EAAAmB,cAAAkpB,IAAyDqE,WAAAjwB,EAAA,6BAAA+rB,eAAA+B,iBAAA,IAAA9C,EAAArtB,OAAAsvB,gBAAAjkB,KAAAqb,sBAAAoI,cAAAzjB,KAAAknB,kBAAA3D,gBAAAvjB,KAAAmnB,oBAAAvY,WAAA5O,KAAAimB,gBAAAtR,QAAAjhB,SAAA+xB,aAAA/xB,IAAA4W,KAAArT,MAAA,MAEzD+I,KAAA8a,uBAAA,CAAAjJ,IACA7R,KAAAyC,UAA2BgY,kBAAA5I,MAE3B7R,KAAAqb,sBAAA,MACArb,KAAAyC,UAA2BgY,mBAAA,MAE3Bza,KAAAknB,kBAAA,EAAA3C,EAAAR,KACA,MAAAhW,QAAmBA,EAAA4G,SAAiB3U,KAAAxG,MACpC0c,EAAAlnB,OAAA8K,UAA6CgN,KAAAqP,MAAArP,KAAAC,UAAA4N,KAC7CmL,EAAA9f,KAAA+f,mBACAqH,EAAA,QAAA7C,KAA4DA,KAAczE,IAAcyE,EACxFrO,EAAAjF,SAAAmW,GACA,MAAAlR,EAAAjF,SAAAmW,GACAlR,EAAAjF,SAAAmW,GAAArD,EAEA7N,EAAAjF,SAAAmW,GAAAtb,SAAAiY,KACA7N,EAAAjF,SAAAmW,IACAlR,EAAAjF,SAAAmW,GACArD,IAKA7N,EAAAjF,SAAAsT,IAAAR,GAEA,MAAAsD,EAAArnB,KAAAsnB,iBAAApR,GAAA,GACAnI,EAAAC,QAAAqZ,KAEArnB,KAAAmnB,oBAAA,EAAA5C,EAAAR,KACA,MAAAhW,QAAmBA,EAAA4G,SAAiB3U,KAAAxG,MACpC0c,EAAAlnB,OAAA8K,UAA6CgN,KAAAqP,MAAArP,KAAAC,UAAA4N,KAC7CmL,EAAA9f,KAAA+f,mBACAqH,EAAA,QAAA7C,KAA4DA,KAAczE,IAAcyE,EACxF,QAAAR,EACA7N,EAAAjF,UACApR,CAAAunB,GAAA,UAGA,GAAAnqB,MAAA8W,QAAAmC,EAAAjF,SAAAmW,IAGA,CACA,MAAApkB,EAAAkT,EAAAjF,SAAAmW,GAAAjuB,QAAA4qB,GACA/gB,GAAA,IACAkT,EAAAjF,SAAAmW,OACAzS,EAAA1D,SAAAmW,GAAArb,MAAA,EAAA/I,MACA2R,EAAA1D,SAAAmW,GAAArb,MAAA/I,EAAA,UAPAkT,EAAAjF,SAAAmW,GAAA,IAWA,MAAAC,EAAArnB,KAAAsnB,iBAAApR,GAAA,GACAnI,EAAAC,QAAAqZ,KAEArnB,KAAAoQ,mBAAA/S,KACA,MAAA0Q,QAAmBA,EAAA4G,SAAiB3U,KAAAxG,MACpC+tB,EAAAlqB,EACA6Y,EAAAlnB,OAAA8K,UAA6CgN,KAAAqP,MAAArP,KAAAC,UAAA4N,KAAsC1D,UACnFpR,CAAA0nB,GAAA,KACiBnR,UAAala,KAAA,UAC9B6R,EAAAC,QAAAhO,KAAAsnB,iBAAApR,GAAA,IACAlW,KAAAyC,UAA2Buf,qBAE3BhiB,KAAAumB,oBAAA,EAAAiB,EAAAd,KACA,MAAA3Y,QAAmBA,EAAA4G,SAAiB3U,KAAAxG,MACpC0c,EAAAlnB,OAAA8K,UAA6CgN,KAAAqP,MAAArP,KAAAC,UAAA4N,KAC7CuB,EAAA9G,OAAApgB,OAAA8K,UAA8C6a,EAAAvF,QAAiB5S,MAAAkqB,IAC/D,MAAAW,EAAArnB,KAAAsnB,iBAAApR,GAAA,GACAnI,EAAAC,QAAAqZ,KAEArnB,KAAA8mB,eAAA,CAAA9E,IACAhiB,KAAAyC,UAA2Buf,oBAE3BhiB,KAAAymB,cAAA,EAAApV,EAAAoW,KACA,MAAA1Z,QAAmBA,EAAA4G,QAAAjhB,UAAyBsM,KAAAxG,MAC5CgD,EAAA9I,KAAA4W,MAAA5W,EAAA4W,KAAA8E,QAAA1b,EAAA4W,KAAA8E,OAAA5S,MACA9I,EAAA4W,KAAA8E,OAAA5S,MACAopB,GAAAxW,OAAA5S,MACAvG,EAAAwxB,EAAAjrB,IACA0Z,EAAAlnB,OAAA8K,UAA6CgN,KAAAqP,MAAArP,KAAAC,UAAA4N,KAC7CuB,EAAA9G,OAAApgB,OAAA8K,UAA8C6a,EAAAvF,QAAiBnZ,WAC/D,MAAAoxB,EAAArnB,KAAAsnB,iBAAApR,GACAnI,EAAAC,QAAAqZ,KAEArnB,KAAA+mB,WAAA,EAAAW,EAAAC,KACA,MAAA5Z,QAAmBA,EAAA4G,SAAiB3U,KAAAxG,MACpC0c,EAAAlnB,OAAA8K,UAA6CgN,KAAAqP,MAAArP,KAAAC,UAAA4N,KAC7CuB,EAAAE,YACAF,EAAAE,SAAAsR,GAAAC,EAAA,aACA,MAAAN,EAAArnB,KAAAsnB,iBAAApR,GACAnI,EAAAC,QAAAqZ,KAEArnB,KAAA4nB,aAAA,MACA,MAAAjT,MAAmBA,EAAA5D,WAAAjB,cAAA/B,UAAAmB,eAAqDlP,KAAAxG,MACxEuX,EAAAC,OAOAlB,EAAA6V,GAAAzW,GANAnB,EAAAC,QAAAhO,KAAAsnB,kBACArW,SAAA0D,EAAA1D,SACAmF,UAA+Bla,KAAA,aAO/B8D,KAAA8a,uBAAA9a,KAAA8a,uBAAAvJ,KAAAvR,MACAA,KAAAqb,sBAAArb,KAAAqb,sBAAA9J,KAAAvR,MACAA,KAAAknB,kBAAAlnB,KAAAknB,kBAAA3V,KAAAvR,MACAA,KAAAmnB,oBAAAnnB,KAAAmnB,oBAAA5V,KAAAvR,MACAA,KAAAumB,oBAAAvmB,KAAAumB,oBAAAhV,KAAAvR,MACAA,KAAA8mB,eAAA9mB,KAAA8mB,eAAAvV,KAAAvR,MACAA,KAAAymB,cAAAzmB,KAAAymB,cAAAlV,KAAAvR,MACAA,KAAA+mB,WAAA/mB,KAAA+mB,WAAAxV,KAAAvR,MAEAH,oBACAG,KAAA4nB,eAEA/nB,mBAAA2E,EAAAigB,GACA,MAAA1T,SAAeA,EAAArd,SAAAwe,cAAAhD,eAA6ClP,KAAAxG,OAC5DwoB,cAAeA,GAAgBhiB,KAAAV,MAC/B4W,EAAA1R,EAAA0K,gBACA2Y,GAAAn0B,IAAAwe,EACA4V,GAAA/W,EAAAC,OACA+W,EAAAtD,EAAAzC,mBACA9L,GAAA2R,GAAAC,GAAAC,IACA/nB,KAAA4nB,eAGA/nB,iBAAA8U,EAAAqT,GAAA,GAKA,OAHAA,IACArT,EAAAvF,OAAApgB,OAAA8K,UAA2C6a,EAAAvF,QAAiBnZ,OAAA2vB,GAAAxW,OAAAnZ,oBAEnCjH,OAAAmgB,EAAA,EAAAngB,CAAA2lB,KAEzB9U,SACA,MAAAhN,UAAeA,EAAA2f,iBAAAE,uBAAAiC,QAAAjhB,SAAAwe,eAA+ElS,KAAAxG,MAC9FqmB,EAAA7wB,OAAA2O,EAAA,EAAA3O,CAAA2lB,EAAA1D,UACA+U,EAAAhmB,KAAA+f,mBACA7rB,EAAAlF,OAAA2O,EAAA,EAAA3O,EACA0E,SACAK,MAAAiyB,GAAAnG,IAEAtK,EAAA/C,GAAAN,EACA+V,EAAA,IAAAvV,EACAwV,OAAA/hB,IAAAtT,QACAsT,IAAAtT,EAAAyX,MACA,IAAAzX,EAAAyX,KAAArT,OACA,IAAAyb,EACA,OAAAjZ,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAmQ,eAC5ChV,EAAAlB,EAAAmB,cAAAmZ,GAAgDC,iBAAA9S,KAAAoQ,qBAChD7J,QAAAgP,GAAA9b,EAAAlB,EAAAmB,cAAAyuB,EAAA,GAA+D5S,UAAehP,QAAA2hB,GAAAzuB,EAAAlB,EAAAmB,cAAA0uB,EAAA,QAAA7hB,QAAA0hB,GAAAxuB,EAAAlB,EAAAmB,cAAA2uB,EAAA,QAAA5uB,EAAAlB,EAAAmB,cAAA,OAA0KmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAA/E,UACxPyG,KAAAgnB,aACAhnB,KAAA6a,eAAA3mB,GACAuF,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAuQ,iBAAwC7O,KAAA6mB,YACpFptB,EAAAlB,EAAAmB,cAAA,OAA4CmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAqQ,sBAC5ClV,EAAAlB,EAAAmB,cAAA,OAAgDmF,UAAA7P,OAAAuP,EAAA,EAAAvP,CAAAsP,EAAAsQ,aAAoC5O,KAAAimB,eAAA","file":"66f767cff920c01fb60f.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport AzureDetails from './azureDetails';\nexport default hot(module)(AzureDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpOnAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpOnAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const test = i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n    return test;\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nconst ChartLabelTooltip = (_a) => {\n    var { content } = _a, props = __rest(_a, [\"content\"]);\n    return (React.createElement(Tooltip, { content: content(props.datum), enableFlip: true },\n        React.createElement(ChartLabel, Object.assign({}, props))));\n};\nexport { ChartLabelTooltip };\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpOnAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousData,\n                            name: 'previous',\n                            show: true,\n                            style: chartStyles.previousMonth,\n                        },\n                        {\n                            data: currentData,\n                            name: 'current',\n                            show: true,\n                            style: chartStyles.currentMonth,\n                        },\n                    ],\n                    legend: {\n                        colorScale: chartStyles.colorScale,\n                        data: legendData,\n                        onClick: this.handleCostLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { title } = this.props;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 20, height: 25, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { ChartLabelTooltip } from '../chartLabelTooltip';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            const charts = [\n                {\n                    data: previousData,\n                    name: 'previous',\n                    show: true,\n                    style: chartStyles.previousMonth,\n                },\n                {\n                    data: currentData,\n                    name: 'current',\n                    show: true,\n                    style: chartStyles.currentMonth,\n                },\n            ];\n            const legend = {\n                colorScale: chartStyles.colorScale,\n                data: legendData,\n                onClick: this.handleCostLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            const { legendItemsPerRow } = this.props;\n            if (chartDatum && chartDatum.data && chartDatum.data.length) {\n                const eventHandlers = {\n                    onClick: () => {\n                        return [\n                            {\n                                target: 'data',\n                                mutation: props => {\n                                    chartDatum.onClick(props);\n                                    return null;\n                                },\n                            },\n                        ];\n                    },\n                };\n                return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers,\n                        },\n                        {\n                            target: 'labels',\n                            eventHandlers,\n                        },\n                    ], gutter: 20, height: 25, itemsPerRow: legendItemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummary.styles';\nconst AzureReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AzureReportSummary = translate()(AzureReportSummaryBase);\nexport { AzureReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummaryAlt.styles';\nconst AzureReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AzureReportSummaryAlt = translate()(AzureReportSummaryAltBase);\nexport { AzureReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryDetails.styles';\nconst AzureReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, t, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', formatOptions);\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits && usage >= 0) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst AzureReportSummaryDetails = translate()(AzureReportSummaryDetailsBase);\nexport { AzureReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryItem.styles';\nconst AzureReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAzureReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AzureReportSummaryItem = translate()(AzureReportSummaryItemBase);\nexport { AzureReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureReportSummaryItems.styles';\nclass AzureReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAzureReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AzureReportSummaryItems = translate()(AzureReportSummaryItemsBase);\nexport { AzureReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './azureReportSummaryTrend.styles';\nconst AzureReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AzureReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { Nav, NavItem, NavList, NavVariants, Title, TitleSize, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nimport { styles } from '../../pages/azureDetails/detailsHeader.styles';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem },\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, this.getNavItemTitle(navItem))));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    azureDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { parseQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAzureReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst reportType = \"tag\" /* tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `tag:${val}`, onClick: () => this.handleGroupByClick(`tag:${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf('tag:');\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'subscription_guid';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf('tag:') : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(4) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const today = new Date();\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"azure\" /* azure */ })),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('azure_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, t('since_date', { month: today.getMonth(), date: 1 })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = azureReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    if (Array.isArray(tag.values)) {\n                        for (const val of tag.values) {\n                            tags.push(`${tag.key}: ${val}`);\n                        }\n                    }\n                    else {\n                        tags.push(`${tag.key}: ${tag.values}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            subscription_guid: account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/azureQuery';\nimport { AzureReportSummaryItem, AzureReportSummaryItems, } from 'components/reports/azureReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('azure_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AzureReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AzureReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureExportActions, azureExportSelectors } from 'store/azureExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf('tag:') !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: azureExportSelectors.selectExportError(state),\n        export: azureExportSelectors.selectExport(state),\n        fetchStatus: azureExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: azureExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAzureReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as azureReportsActions from 'store/azureReports/azureReportsActions';\nimport * as azureReportsSelectors from 'store/azureReports/azureReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAzureReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAzureReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAzureReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAzureReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAzureReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAzureReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('azure_details.historical.cost_title'), xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('azure_details.historical.instance_title'), xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('azure_details.historical.storage_title'), xAxisLabel: t('azure_details.historical.day_of_month_label'), yAxisLabel: t('azure_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = azureReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = azureReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = azureReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = azureReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = azureReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = azureReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureDashboardSelectors } from 'store/azureDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('azure_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"subscription_guid\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('azure_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'subscription_guid', onClick: this.handleWidgetModalOpen }, t('azure_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'subscription_guid', onClick: this.handleTagModalOpen }, t('azure_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('azure_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        const addTag = (tag, val) => {\n            const prefix = someTags.length > 0 ? ', ' : '';\n            const tagString = `${prefix}${tag.key}: ${val}`;\n            if (showAll) {\n                someTags.push(tagString);\n            }\n            else if (charCount <= maxChars) {\n                if (charCount + tagString.length > maxChars) {\n                    someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                }\n                else {\n                    someTags.push(tagString);\n                }\n            }\n            charCount += tagString.length;\n            allTags.push(`${tag.key}: ${val}`);\n        };\n        if (report) {\n            for (const tag of report.data) {\n                if (!Array.isArray(tag.values)) {\n                    addTag(tag, tag.values);\n                }\n                else {\n                    for (const val of tag.values) {\n                        addTag(tag, val);\n                    }\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('azure_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            subscription_guid: account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        subscription_guid: account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/azureQuery';\nimport { AzureReportSummaryItem, AzureReportSummaryItems, } from 'components/reports/azureReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAzureReportItems } from 'utils/getComputedAzureReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAzureReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AzureReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                    ? reportItem.cost\n                    : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('azure_details.view_all', {\n                        value: t(`group_by.top_values.${groupBy}`),\n                    })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AzureReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"service_names\" /* service_names */,\n            \"subscription_guids\" /* subscription_guids */,\n            \"resource_locations\" /* resource_locations */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('azure_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'subscription_guid') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('azure_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/azureQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('azure_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAzureReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `tag:${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_on_azure_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf('tag:');\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + 4);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const today = new Date();\n            const date = today.getDate();\n            const month = (((today.getMonth() - 1) % 12) + 12) % 12;\n            const value = formatCurrency(Math.abs(item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = 'iconOverride';\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    t('percent', { value: percentage }),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, Boolean(item.deltaPercent !== null && item.deltaValue > 0)\n                    ? Boolean(date < 31)\n                        ? t('azure_details.increase_since_date', { date, month, value })\n                        : t('azure_details.increase_since_last_month', {\n                            date,\n                            month,\n                            value,\n                        })\n                    : Boolean(item.deltaPercent !== null && item.deltaValue < 0)\n                        ? Boolean(date < 31)\n                            ? t('azure_details.decrease_since_date', { date, month, value })\n                            : t('azure_details.decrease_since_last_month', {\n                                date,\n                                month,\n                                value,\n                            })\n                        : t('azure_details.no_change_since_date', { date, month }))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf('tag:') === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            const { t } = this.props;\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                // Normalize account, region, and service filters\n                switch (field) {\n                    case 'resource_location':\n                        filterText = t('azure_details.filter.region_select');\n                        break;\n                    case 'subscription_guid':\n                        filterText = t('azure_details.filter.account_select');\n                        break;\n                    case 'service_name':\n                        filterText = t('azure_details.filter.service_select');\n                        break;\n                    default:\n                        filterText = field;\n                }\n            }\n            const index = filterText.indexOf('tag:');\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(4) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/azureQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureReportsActions, azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `tag:${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'subscription_guid') {\n                return [\n                    {\n                        id: 'subscription_guid',\n                        label: t('azure_details.filter.name'),\n                        title: t('azure_details.filter.account_select'),\n                        placeholder: t('azure_details.filter.account_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'service_name') {\n                return [\n                    {\n                        id: 'service_name',\n                        label: t('azure_details.filter.name'),\n                        title: t('azure_details.filter.service_select'),\n                        placeholder: t('azure_details.filter.service_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'resource_location') {\n                return [\n                    {\n                        id: 'resource_location',\n                        label: t('azure_details.filter.name'),\n                        title: t('azure_details.filter.region_select'),\n                        placeholder: t('azure_details.filter.region_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by subscription_guid tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('azure_details.filter.name'),\n                        title: t('azure_details.filter.tag_select'),\n                        placeholder: t('azure_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf('tag:');\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + 4);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `tag:${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTag = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTag ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('azure_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${filterType}:${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${filterType}:${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/azure?${getQuery(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAzureReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.azureDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = azureReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = azureReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = azureReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: azureReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n"],"sourceRoot":""}