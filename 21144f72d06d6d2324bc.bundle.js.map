{"version":3,"file":"21144f72d06d6d2324bc.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/api/queries/providersQuery.ts","webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/routes/components/state/loadingState/loadingState.tsx","webpack://koku-ui/./src/routes/state/loading/loading.tsx","webpack://koku-ui/./src/routes/state/loading/index.ts","webpack://koku-ui/./src/routes/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/routes/views/components/perspective/perspectiveSelect.tsx","webpack://koku-ui/./src/routes/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/routes/views/overview/components/dashboardBase.tsx","webpack://koku-ui/./src/routes/views/overview/components/chartComparison.tsx","webpack://koku-ui/./src/routes/views/overview/components/dashboardWidget.styles.ts","webpack://koku-ui/./src/routes/views/overview/components/dashboardWidgetBase.tsx","webpack://koku-ui/./src/routes/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack://koku-ui/./src/routes/views/overview/awsDashboard/awsDashboard.tsx","webpack://koku-ui/./src/routes/views/overview/awsDashboard/index.ts","webpack://koku-ui/./src/routes/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack://koku-ui/./src/routes/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack://koku-ui/./src/routes/views/overview/awsOcpDashboard/index.ts","webpack://koku-ui/./src/routes/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack://koku-ui/./src/routes/views/overview/azureDashboard/azureDashboard.tsx","webpack://koku-ui/./src/routes/views/overview/azureDashboard/index.ts","webpack://koku-ui/./src/routes/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack://koku-ui/./src/routes/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack://koku-ui/./src/routes/views/overview/azureOcpDashboard/index.ts","webpack://koku-ui/./src/routes/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack://koku-ui/./src/routes/views/overview/gcpDashboard/gcpDashboard.tsx","webpack://koku-ui/./src/routes/views/overview/gcpDashboard/index.ts","webpack://koku-ui/./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack://koku-ui/./src/routes/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack://koku-ui/./src/routes/views/overview/gcpOcpDashboard/index.ts","webpack://koku-ui/./src/routes/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack://koku-ui/./src/routes/views/overview/ibmDashboard/ibmDashboard.tsx","webpack://koku-ui/./src/routes/views/overview/ibmDashboard/index.ts","webpack://koku-ui/./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack://koku-ui/./src/routes/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack://koku-ui/./src/routes/views/overview/ocpCloudDashboard/index.ts","webpack://koku-ui/./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack://koku-ui/./src/routes/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack://koku-ui/./src/routes/views/overview/ocpDashboard/ocpDashboard.tsx","webpack://koku-ui/./src/routes/views/overview/ocpDashboard/index.ts","webpack://koku-ui/./src/routes/views/overview/ociDashboard/ociDashboardWidget.tsx","webpack://koku-ui/./src/routes/views/overview/ociDashboard/ociDashboard.tsx","webpack://koku-ui/./src/routes/views/overview/ociDashboard/index.ts","webpack://koku-ui/./src/routes/views/overview/overview.styles.ts","webpack://koku-ui/./src/routes/views/overview/overview.tsx","webpack://koku-ui/./src/api/queries/overviewQuery.ts","webpack://koku-ui/./src/routes/views/overview/index.ts","webpack://koku-ui/./src/utils/noop.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getProvidersQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseProvidersQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title } from '@patternfly/react-core';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n// defaultIntl required for testing\nconst LoadingStateBase = ({ intl = defaultIntl }) => {\n    const title = intl.formatMessage(messages.loadingStateTitle);\n    const subTitle = intl.formatMessage(messages.loadingStateDesc);\n    return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n        React.createElement(Spinner, { size: \"lg\" }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, title),\n        React.createElement(EmptyStateBody, null, subTitle)));\n};\nconst LoadingState = injectIntl(LoadingStateBase);\nexport { LoadingState };\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { LoadingState } from 'routes/components/state/loadingState/loadingState';\nconst Loading = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(LoadingState, null))));\n};\nexport default withRouter(Loading);\n","import Loading from './loading';\nexport default Loading;\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveSelectBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.perspective)),\n            this.getSelect()));\n    }\n}\nconst PerspectiveSelect = injectIntl(PerspectiveSelectBase);\nexport { PerspectiveSelect };\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { PerspectiveSelect } from 'routes/views/components/perspective/perspectiveSelect';\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.perspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.perspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.perspectiveValues, value: 'azure' }];\n// Infrastructure Oci options\nconst infrastructureOciOptions = [{ label: messages.perspectiveValues, value: 'oci' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.perspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.perspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\nconst infrastructureGcpOcpOptions = [{ label: messages.perspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.perspectiveValues, value: 'ibm' }];\n// Infrastructure IBM filtered by OCP options\nconst infrastructureIbmOcpOptions = [{ label: messages.perspectiveValues, value: 'ibm_ocp' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.perspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nconst ocpOptions = [{ label: messages.perspectiveValues, value: 'ocp' }];\nconst getInfrastructureOptions = ({ hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, isIbmFeatureEnabled, isOciFeatureEnabled, }) => {\n    const options = [];\n    if (hasAws) {\n        options.push(...infrastructureAwsOptions);\n    }\n    if (hasAwsOcp) {\n        options.push(...infrastructureAwsOcpOptions);\n    }\n    if (hasGcp) {\n        options.push(...infrastructureGcpOptions);\n    }\n    if (hasGcpOcp) {\n        options.push(...infrastructureGcpOcpOptions);\n    }\n    if (hasIbm) {\n        options.push(...infrastructureIbmOptions);\n    }\n    if (hasIbmOcp && isIbmFeatureEnabled) {\n        options.push(...infrastructureIbmOcpOptions);\n    }\n    if (hasAzure) {\n        options.push(...infrastructureAzureOptions);\n    }\n    if (hasAzureOcp) {\n        options.push(...infrastructureAzureOcpOptions);\n    }\n    if (hasOci && isOciFeatureEnabled) {\n        options.push(...infrastructureOciOptions);\n    }\n    return options;\n};\nconst OverviewPerspectiveBase = ({ currentItem, hasAws, hasAwsOcp, hasAzure, hasAzureOcp, hasGcp, hasGcpOcp, hasIbm, hasIbmOcp, hasOci, hasOcp, hasOcpCloud, isDisabled, isIbmFeatureEnabled, isInfrastructureTab, isOciFeatureEnabled, onSelected, }) => {\n    // Dynamically show options if providers are available\n    const options = [];\n    if (isInfrastructureTab !== undefined) {\n        if (isInfrastructureTab) {\n            if (hasOcpCloud) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            options.push(...getInfrastructureOptions({\n                hasAws,\n                hasAwsOcp,\n                hasAzure,\n                hasAzureOcp,\n                hasGcp,\n                hasGcpOcp,\n                hasIbm,\n                hasIbmOcp,\n                hasOci,\n                isIbmFeatureEnabled,\n                isOciFeatureEnabled,\n            }));\n        }\n        else if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n    }\n    else {\n        if (hasOcp) {\n            options.push(...ocpOptions);\n        }\n        if (hasOcpCloud) {\n            options.push(...infrastructureOcpCloudOptions);\n        }\n        options.push(...getInfrastructureOptions({\n            hasAws,\n            hasAwsOcp,\n            hasAzure,\n            hasAzureOcp,\n            hasGcp,\n            hasGcpOcp,\n            hasIbm,\n            hasIbmOcp,\n            hasOci,\n            isIbmFeatureEnabled,\n            isOciFeatureEnabled,\n        }));\n    }\n    return (React.createElement(PerspectiveSelect, { currentItem: currentItem || options[0].value, isDisabled: isDisabled, onSelected: onSelected, options: options }));\n};\nconst Perspective = withRouter(OverviewPerspectiveBase);\nexport { Perspective };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType })))));\n    }))));\nexport { DashboardBase };\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { transformForecast, transformForecastCone, transformReport, } from 'routes/views/components/charts/common/chartDatum';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'routes/views/components/reports/reportSummary';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* Comparison.cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* DashboardChartType.dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* DashboardChartType.dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* DashboardChartType.trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* DashboardChartType.usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* Comparison.daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* Comparison.cumulative */, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartFormatter, currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* Comparison.daily */;\n            const type = daily ? 1 /* DatumType.rolling */ : trend.datumType;\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatCurrency, height: height, previousCostData: previousCostData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* Comparison.daily */;\n            const type = daily ? 1 /* DatumType.rolling */ : trend.datumType;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* Comparison.daily */;\n            const type = daily ? 1 /* DatumType.rolling */ : trend.datumType;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    const units = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.units\n                        : 'USD';\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === 0 /* DatumType.cumulative */) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { chartFormatter, chartName, currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.datumType, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, chartName: chartName, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { chartFormatter, chartName, currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.datumType, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.datumType, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.datumType, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.datumType, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, chartName: chartName, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: chartFormatter || formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === \"usage\" /* ComputedReportItemType.usage */) {\n                return intl.formatMessage(messages.units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.currencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* ComputedReportItemType.usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.groupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* ComputedReportItemType.usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, fetchReports, fetchForecasts, trend, widgetId } = this.props;\n        if (prevProps.costType !== costType) {\n            fetchReports(widgetId);\n            if (trend.computedForecastItem !== undefined) {\n                fetchForecasts(widgetId);\n            }\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components/dashboardWidgetBase';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/costType';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* AwsDashboardTab.services */:\n            return 'service';\n        case \"accounts\" /* AwsDashboardTab.accounts */:\n            return 'account';\n        case \"regions\" /* AwsDashboardTab.regions */:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { costType: getCostType(), getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components/dashboardBase';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import AwsDashboard from './awsDashboard';\nexport default AwsDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components/dashboardWidgetBase';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* AwsOcpDashboardTab.services */:\n            return 'service';\n        case \"accounts\" /* AwsOcpDashboardTab.accounts */:\n            return 'account';\n        case \"regions\" /* AwsOcpDashboardTab.regions */:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components/dashboardBase';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import AwsOcpDashboard from './awsOcpDashboard';\nexport default AwsOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components/dashboardWidgetBase';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* AzureDashboardTab.service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* AzureDashboardTab.subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* AzureDashboardTab.resource_locations */:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components/dashboardBase';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import AzureDashboard from './azureDashboard';\nexport default AzureDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components/dashboardWidgetBase';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* AzureOcpDashboardTab.service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* AzureOcpDashboardTab.subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* AzureOcpDashboardTab.resource_locations */:\n            return 'resource_location';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components/dashboardBase';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import AzureOcpDashboard from './azureOcpDashboard';\nexport default AzureOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components/dashboardWidgetBase';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"gcp_projects\" /* GcpDashboardTab.gcpProjects */:\n            return 'gcp_project';\n        case \"regions\" /* GcpDashboardTab.regions */:\n            return 'region';\n        case \"services\" /* GcpDashboardTab.services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components/dashboardBase';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import GcpDashboard from './gcpDashboard';\nexport default GcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components/dashboardWidgetBase';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"gcp_projects\" /* GcpOcpDashboardTab.gcpProjects */:\n            return 'gcp_project';\n        case \"regions\" /* GcpOcpDashboardTab.regions */:\n            return 'region';\n        case \"services\" /* GcpOcpDashboardTab.services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components/dashboardBase';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import GcpOcpDashboard from './gcpOcpDashboard';\nexport default GcpOcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components/dashboardWidgetBase';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* IbmDashboardTab.services */:\n            return 'service';\n        case \"projects\" /* IbmDashboardTab.projects */:\n            return 'project';\n        case \"regions\" /* IbmDashboardTab.regions */:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components/dashboardBase';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import IbmDashboard from './ibmDashboard';\nexport default IbmDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components/dashboardWidgetBase';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* OcpCloudDashboardTab.accounts */:\n            return 'account';\n        case \"regions\" /* OcpCloudDashboardTab.regions */:\n            return 'region';\n        case \"services\" /* OcpCloudDashboardTab.services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components/dashboardBase';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","import OcpCloudDashboard from './ocpCloudDashboard';\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components/dashboardWidgetBase';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* OcpDashboardTab.clusters */:\n            return 'cluster';\n        case \"nodes\" /* OcpDashboardTab.nodes */:\n            return 'node';\n        case \"projects\" /* OcpDashboardTab.projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components/dashboardBase';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","import OcpDashboard from './ocpDashboard';\nexport default OcpDashboard;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DashboardWidgetBase, } from 'routes/views/overview/components/dashboardWidgetBase';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardActions, ociDashboardSelectors } from 'store/dashboard/ociDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"product_services\" /* OciDashboardTab.product_services */:\n            return 'product_service';\n        case \"payer_tenant_ids\" /* OciDashboardTab.payer_tenant_ids */:\n            return 'payer_tenant_id';\n        case \"regions\" /* OciDashboardTab.regions */:\n            return 'region';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ociDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ociDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ociDashboardActions.fetchWidgetForecasts,\n    fetchReports: ociDashboardActions.fetchWidgetReports,\n    updateTab: ociDashboardActions.changeWidgetTab,\n};\nconst OciDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OciDashboardWidget };\n","import { connect } from 'react-redux';\nimport { DashboardBase } from 'routes/views/overview/components/dashboardBase';\nimport { createMapStateToProps } from 'store/common';\nimport { ociDashboardSelectors } from 'store/dashboard/ociDashboard';\nimport { OciDashboardWidget } from './ociDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OciDashboardWidget,\n        selectWidgets: ociDashboardSelectors.selectWidgets(state),\n        widgets: ociDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OciDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OciDashboard;\n","import OciDashboard from './ociDashboard';\nexport default OciDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport Loading from 'routes/state/loading';\nimport NoData from 'routes/state/noData/noData';\nimport NoProviders from 'routes/state/noProviders';\nimport { CostType } from 'routes/views/components/costType';\nimport { Perspective } from 'routes/views/components/perspective/perspective';\nimport AwsDashboard from 'routes/views/overview/awsDashboard';\nimport AwsOcpDashboard from 'routes/views/overview/awsOcpDashboard';\nimport AzureDashboard from 'routes/views/overview/azureDashboard';\nimport AzureOcpDashboard from 'routes/views/overview/azureOcpDashboard';\nimport GcpDashboard from 'routes/views/overview/gcpDashboard';\nimport GcpOcpDashboard from 'routes/views/overview/gcpOcpDashboard';\nimport IbmDashboard from 'routes/views/overview/ibmDashboard';\nimport OcpCloudDashboard from 'routes/views/overview/ocpCloudDashboard';\nimport OcpDashboard from 'routes/views/overview/ocpDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getCostType } from 'utils/costType';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOciAvailable, isOcpAvailable, } from 'utils/userAccess';\nimport OciDashboard from './ociDashboard';\nimport { styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* OverviewTab.infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* OverviewTab.ocp */:\n            return 'ocp';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* OverviewTab.ocp */,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOciAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* OverviewTab.infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { costType } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* OverviewTab.infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === \"aws\" /* InfrastructurePerspective.aws */) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { onSelect: this.handleCostTypeSelected, costType: costType })));\n            }\n            return null;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = hasOcp && !(hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud);\n            const showInfrastructureOnly = !hasOcp && (hasAws || hasAzure || hasOci || hasGcp || hasIbm || hasOcpCloud);\n            if (showOcpOnly) {\n                return \"ocp\" /* OverviewTab.ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* OverviewTab.infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* OverviewTab.ocp */ : \"infrastructure\" /* OverviewTab.infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case \"aws\" /* InfrastructurePerspective.aws */:\n                case \"aws_ocp\" /* InfrastructurePerspective.awsOcp */:\n                case \"azure\" /* InfrastructurePerspective.azure */:\n                case \"oci\" /* InfrastructurePerspective.oci */:\n                case \"azure_ocp\" /* InfrastructurePerspective.azureOcp */:\n                case \"gcp\" /* InfrastructurePerspective.gcp */:\n                case \"gcp_ocp\" /* InfrastructurePerspective.gcpOcp */:\n                case \"ibm\" /* InfrastructurePerspective.ibm */:\n                case \"ibm_ocp\" /* InfrastructurePerspective.ibmOcp */:\n                case \"ocp_cloud\" /* InfrastructurePerspective.ocpCloud */:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return \"ocp_cloud\" /* InfrastructurePerspective.ocpCloud */;\n            }\n            if (this.isAwsAvailable()) {\n                return \"aws\" /* InfrastructurePerspective.aws */;\n            }\n            if (this.isAzureAvailable()) {\n                return \"azure\" /* InfrastructurePerspective.azure */;\n            }\n            if (this.isOciAvailable()) {\n                return \"oci\" /* InfrastructurePerspective.oci */;\n            }\n            if (this.isGcpAvailable()) {\n                return \"gcp\" /* InfrastructurePerspective.gcp */;\n            }\n            if (this.isIbmAvailable()) {\n                return \"ibm\" /* InfrastructurePerspective.ibm */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case \"ocp\" /* OcpPerspective.ocp */:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return \"ocp\" /* OcpPerspective.ocp */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { isIbmFeatureEnabled, isOciFeatureEnabled } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOci = this.isOciAvailable();\n            const hasOcp = this.isOcpAvailable();\n            // Note: No need to test OCP on cloud here, since that requires at least one provider\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOci || hasOcp)) {\n                return null;\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* OverviewTab.infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem, hasAws: hasAws, hasAwsOcp: this.isAwsOcpAvailable(), hasAzure: hasAzure, hasAzureOcp: this.isAzureOcpAvailable(), hasGcp: hasGcp, hasGcpOcp: this.isGcpOcpAvailable(), hasIbm: hasIbm, hasIbmOcp: this.isIbmOcpAvailable(), hasOci: hasOci, hasOcp: hasOcp, hasOcpCloud: this.isOcpCloudAvailable(), isIbmFeatureEnabled: isIbmFeatureEnabled, isInfrastructureTab: this.getCurrentTab() === \"infrastructure\" /* OverviewTab.infrastructure */, isOciFeatureEnabled: isOciFeatureEnabled, onSelected: this.handlePerspectiveSelected }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { history } = this.props;\n            return `${history.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, ociProviders, costType, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* OverviewTab.infrastructure */) {\n                if (currentInfrastructurePerspective === \"ocp_cloud\" /* InfrastructurePerspective.ocpCloud */) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* InfrastructurePerspective.aws */) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_ocp\" /* InfrastructurePerspective.awsOcp */) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* InfrastructurePerspective.azure */) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_ocp\" /* InfrastructurePerspective.azureOcp */) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* InfrastructurePerspective.gcp */) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp_ocp\" /* InfrastructurePerspective.gcpOcp */) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ibm\" /* InfrastructurePerspective.ibm */) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"oci\" /* InfrastructurePerspective.oci */) {\n                    const hasData = hasCurrentMonthData(ociProviders) || hasPreviousMonthData(ociProviders);\n                    return hasData ? React.createElement(OciDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === \"ocp\" /* OverviewTab.ocp */) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === \"ocp\" /* OcpPerspective.ocp */) {\n                    return hasData ? React.createElement(OcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"infrastructure\" /* OverviewTab.infrastructure */) {\n                return intl.formatMessage(messages.infrastructure);\n            }\n            else if (tab === \"ocp\" /* OverviewTab.ocp */) {\n                return intl.formatMessage(messages.openShift);\n            }\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(this.getRouteForQuery(newQuery));\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { history, query } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* OverviewTab.infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* OverviewTab.ocp */ && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value });\n                history.replace(this.getRouteForQuery(newQuery));\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { history, query } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    history.replace(this.getRouteForQuery(newQuery));\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsOcpAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureOcpAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpOcpAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmOcpAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOciAvailable = () => {\n            const { ociProviders, userAccess } = this.props;\n            return isOciAvailable(userAccess, ociProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsOcp = this.isAwsOcpAvailable();\n            const hasAzureOcp = this.isAzureOcpAvailable();\n            const hasGcpOcp = this.isGcpOcpAvailable();\n            const hasIbmOcp = this.isIbmOcpAvailable();\n            return hasAwsOcp || hasAzureOcp || hasGcpOcp || hasIbmOcp;\n        };\n    }\n    componentDidMount() {\n        const { tabKey } = this.props;\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the AccountSettings component used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, isCurrencyFeatureEnabled, isIbmFeatureEnabled, isOciFeatureEnabled, userAccessFetchStatus, } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noProviders = providersFetchStatus === 2 /* FetchStatus.complete */ &&\n            !this.isAwsAvailable() &&\n            !this.isAzureAvailable() &&\n            !this.isGcpAvailable() &&\n            !this.isIbmAvailable() &&\n            !this.isOciAvailable() &&\n            !this.isOcpAvailable();\n        const isLoading = providersFetchStatus === 1 /* FetchStatus.inProgress */ || userAccessFetchStatus === 1 /* FetchStatus.inProgress */;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.overviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.overviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.openShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.openShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.aws)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.awsDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.gcp)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.gcpDesc)),\n                                    isIbmFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.ibm)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ibmDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.azureDesc)),\n                                    isOciFeatureEnabled && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.oci)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.ociDesc))))) },\n                                React.createElement(Button, { \"aria-label\": intl.formatMessage(messages.overviewInfoButtonArialLabel), variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(\"div\", { style: styles.headerContentRight }, isCurrencyFeatureEnabled && React.createElement(Currency, null))),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const costType = getCostType();\n    const perspective = queryFromRoute.perspective;\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const query = Object.assign(Object.assign(Object.assign({}, (perspective && { perspective })), { tabKey }), (perspective === \"aws\" /* InfrastructurePerspective.aws */ && { cost_type: costType }));\n    const queryString = getQuery(query);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* UserAccessType.all */, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, \"aws\" /* ProviderType.aws */),\n        azureProviders: filterProviders(providers, \"azure\" /* ProviderType.azure */),\n        gcpProviders: filterProviders(providers, \"gcp\" /* ProviderType.gcp */),\n        ibmProviders: filterProviders(providers, \"ibm\" /* ProviderType.ibm */),\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isIbmFeatureEnabled: featureFlagsSelectors.selectIsIbmFeatureEnabled(state),\n        isOciFeatureEnabled: featureFlagsSelectors.selectIsOciFeatureEnabled(state),\n        ociProviders: filterProviders(providers, \"oci\" /* ProviderType.oci */),\n        ocpProviders: filterProviders(providers, \"ocp\" /* ProviderType.ocp */),\n        costType,\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        queryString,\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst Overview = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OverviewBase));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import Overview from './overview';\nexport default Overview;\n","export const noop = () => { }; // tslint:disable-line no-empty\n"],"names":["getProvidersQuery","query","stringify","encode","indices","getUserAccessQuery","LoadingState","intl","title","formatMessage","subTitle","EmptyState","variant","EmptyStateVariant","className","Spinner","size","Title","headingLevel","EmptyStateBody","PageHeader","PageHeaderTitle","Main","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveSelectBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelectOptions","options","props","selections","map","option","push","toString","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","SelectVariant","SelectOption","key","event","onSelected","setState","render","messages","PerspectiveSelect","injectIntl","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureOciOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureGcpOcpOptions","infrastructureIbmOptions","infrastructureIbmOcpOptions","infrastructureOcpCloudOptions","ocpOptions","getInfrastructureOptions","hasAws","hasAwsOcp","hasAzure","hasAzureOcp","hasGcp","hasGcpOcp","hasIbm","hasIbmOcp","hasOci","isIbmFeatureEnabled","isOciFeatureEnabled","Perspective","hasOcp","hasOcpCloud","isInfrastructureTab","undefined","DashboardBase","costType","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","default","onItemClicked","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","comparisonContainer","tabs","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getFormattedUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","chartFormatter","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","datumType","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","ReportSummaryComponent","forecastConeData","formatOptions","formatter","format","showForecast","chartName","currentData","previousData","showUsageLegendLabel","getUnits","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","to","getDetailsLinkTitle","count","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","tabIndex","updateTab","componentDidMount","fetchForecasts","fetchReports","componentDidUpdate","prevProps","mapStateToProps","widget","awsDashboard","queries","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsDashboardWidget","connect","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","ociDashboard","OciDashboardWidget","alignSelf","flexGrow","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_lg","headerContent","justifyContent","headerContentLeft","headerContentRight","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","main","paddingBottom","paddingTop","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOciAvailable","isOcpCloudAvailable","getCostType","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","handleCostTypeSelected","getDefaultInfrastructurePerspective","perspective","getDefaultOcpPerspective","ocpProviders","userAccess","getPerspective","isAwsOcpAvailable","isAzureOcpAvailable","isGcpOcpAvailable","isIbmOcpAvailable","handlePerspectiveSelected","getRouteForQuery","history","location","pathname","getQueryRoute","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","ociProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","newQuery","JSON","parse","cost_type","replace","tabKey","providers","providersFetchStatus","isCurrencyFeatureEnabled","userAccessFetchStatus","noProviders","isLoading","TitleSizes","Popover","enableFlip","bodyContent","Button","ButtonVariant","queryFromRoute","parseQuery","search","Number","isNaN","queryString","getQuery","providersQueryString","providersError","userAccessQueryString","userAccessError","featureFlags","noop"],"sourceRoot":""}