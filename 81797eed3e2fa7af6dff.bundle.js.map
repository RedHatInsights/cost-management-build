{"version":3,"file":"81797eed3e2fa7af6dff.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/pages/views/explorer/explorer.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/views/explorer/explorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/dateRange.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerTable.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/pages/views/explorer/explorer.tsx","webpack://koku-ui/./src/utils/userAccess.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((item) => item.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(item => (React.createElement(SelectOption, { key: item.value, value: item })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.Perspective)),\n            this.getSelect()));\n    }\n}\nconst Perspective = injectIntl(PerspectiveBase);\nexport { Perspective };\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.AzureDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"azure\" /* azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* azure */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupBySelected, providers, providersError, report, intl } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.AzureDetailsTitle)),\n                React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType }),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport messages from 'locales/messages';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.TagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: intl.formatMessage(messages.Cost),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: intl.formatMessage(messages.DetailsResourceNames, { value: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: intl.formatMessage(messages.Cost),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.Percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.AzureDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"azure\" /* azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'subscription_guid' }),\n                    key: 'subscription_guid',\n                },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'service_name' }), key: 'service_name' },\n                {\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'resource_location' }),\n                    key: 'resource_location',\n                },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"azure\" /* azure */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.AzureDetailsTitle);\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* azure */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrencyAbbreviation } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costExplorerChart.styles';\nclass CostExplorerChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            const units = this.getUnits(series);\n            this.setState({ cursorVoronoiContainer, series, units });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        // If bar width exceeds max and domainPadding is true, extra width is returned to help center bars horizontally\n        this.getBarWidth = (domainPadding = false) => {\n            const { hiddenSeries, series, width } = this.state;\n            const maxWidth = 200;\n            let maxValue = -1;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        if (s.data.length > maxValue) {\n                            maxValue = s.data.length;\n                        }\n                    }\n                });\n            }\n            // Divide available width into equal sections\n            const sections = maxValue * 2 + 1;\n            const sectionWidth = maxValue > 0 ? width / sections : 0;\n            if (domainPadding) {\n                // Add any extra bar width for domain padding\n                const extraWidth = sectionWidth > maxWidth ? (sectionWidth - maxWidth) * maxValue : 0;\n                return (sectionWidth + extraWidth / 2) * 2;\n            }\n            return sectionWidth > maxWidth ? maxWidth : sectionWidth;\n        };\n        this.getChart = (series, index, barWidth) => {\n            const { hiddenSeries } = this.state;\n            const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n            return (React.createElement(ChartBar, { barWidth: barWidth, data: data, key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        // Returns domain only if max y values are zero\n        this.getDomain = (series, hiddenSeries) => {\n            let maxValue = -1;\n            let domain;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        const max = getMaxValue(s.data);\n                        maxValue = Math.max(maxValue, max);\n                    }\n                });\n            }\n            if (maxValue <= 0) {\n                domain = { y: [0, 100] };\n            }\n            return domain;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const { hiddenSeries, series } = this.state;\n            const result = getInteractiveLegendEvents({\n                chartNames: getChartNames(series),\n                isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n                isHidden: index => isSeriesHidden(hiddenSeries, index),\n                legendName: 'legend',\n                onLegendClick: props => this.handleLegendClick(props.index),\n            });\n            return result;\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // This ensures we show every 3rd tick value, including the first and last value\n        //\n        // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n        this.getTickValues = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            // Find the datum with the greatest number of values\n            const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n            let datum;\n            allDatums.map(val => {\n                if (!datum || datum.length < val.length) {\n                    datum = val;\n                }\n            });\n            const values = [];\n            datum.map(val => {\n                values.push(val.x);\n            });\n            // Prune tick values\n            const tickValues = [];\n            const modVal = values.length < 6 ? 2 : 3;\n            for (let i = 0; i < values.length; i++) {\n                if (i % modVal === 0 && i + 2 < values.length) {\n                    tickValues.push(values[i]);\n                }\n                else if (values.length < 3 && i + 1 < values.length) {\n                    tickValues.push(values[i]);\n                }\n            }\n            tickValues.push(values[values.length - 1]);\n            return tickValues;\n        };\n        this.getTruncatedString = (str) => {\n            const maxChars = 20;\n            return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n        };\n        this.getTickValue = (t) => {\n            const { units } = this.state;\n            return formatCurrencyAbbreviation(t, units);\n        };\n        this.getUnits = (series) => {\n            if (series) {\n                for (const s of series) {\n                    for (const datum of s.data) {\n                        if (datum.units) {\n                            return datum.units;\n                        }\n                    }\n                }\n            }\n            return 'USD';\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    render() {\n        const { height, intl, padding = {\n            bottom: 50,\n            left: 40,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        const barWidth = this.getBarWidth();\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), domainPadding: { x: this.getBarWidth(true) }, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index, barWidth)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: this.getTickValues(), fixLabelOverlap: true }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis, tickFormat: this.getTickValue })))));\n    }\n}\nconst CostExplorerChart = injectIntl(CostExplorerChartBase);\nexport { CostExplorerChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getCurrentMonthDate, getLast30DaysDate, getLast60DaysDate, getLast90DaysDate } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: messages.ExplorerDateRange, value: 'current_month_to_date' },\n    { label: messages.ExplorerDateRange, value: 'previous_month_to_date' },\n    { label: messages.ExplorerDateRange, value: 'last_thirty_days' },\n    { label: messages.ExplorerDateRange, value: 'last_sixty_days' },\n];\n// Todo: Show new features in beta environment only\nif (insights.chrome.isBeta()) {\n    dateRangeOptions.push({ label: messages.ExplorerDateRange, value: 'last_ninety_days' });\n}\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: messages.PerspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nexport const infrastructureAwsOcpOptions = [{ label: messages.PerspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: messages.PerspectiveValues, value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nexport const infrastructureAzureOcpOptions = [{ label: messages.PerspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OpenShift options\nexport const infrastructureGcpOcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nexport const infrastructureIbmOptions = [{ label: messages.PerspectiveValues, value: 'ibm' }];\n// Infrastructure Ocp cloud options\nexport const infrastructureOcpCloudOptions = [{ label: messages.PerspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nexport const ocpOptions = [{ label: messages.PerspectiveValues, value: 'ocp' }];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift supplementary & usage\" perspectives -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getComputedReportItemValueType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift usage\" perspective -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"total\" /* total */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = (dateRangeType) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    let dateRange;\n    switch (dateRangeType) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            startDate.setDate(1); // Required to obtain correct month\n            startDate.setMonth(startDate.getMonth() - 1); // Note: Must include previous and current month\n            dateRange = {\n                end_date: format(endDate, 'yyyy-MM-dd'),\n                start_date: format(startDate, 'yyyy-MM-dd'),\n            };\n            break;\n        case \"last_ninety_days\" /* lastNinetyDays */:\n            dateRange = getLast90DaysDate();\n            break;\n        case \"last_sixty_days\" /* lastSixtyDays */:\n            dateRange = getLast60DaysDate();\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            dateRange = getLast30DaysDate();\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            dateRange = getCurrentMonthDate();\n            break;\n    }\n    return dateRange;\n};\nexport const getDateRangeDefault = (queryFromRoute) => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = ({ awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, queryFromRoute, userAccess, }) => {\n    let result = queryFromRoute.perspective;\n    if (result) {\n        return result;\n    }\n    const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n        azureProvidersFetchStatus === 1 /* inProgress */ ||\n        gcpProvidersFetchStatus === 1 /* inProgress */ ||\n        ibmProvidersFetchStatus === 1 /* inProgress */ ||\n        ocpProvidersFetchStatus === 1 /* inProgress */;\n    if (!isLoading) {\n        if (isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus)) {\n            result = \"ocp\" /* ocp */;\n        }\n        else if (isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus)) {\n            result = \"aws\" /* aws */;\n        }\n        else if (isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus)) {\n            result = \"azure\" /* azure */;\n        }\n        else if (isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus)) {\n            result = \"gcp\" /* gcp */;\n        }\n        else if (isIbmAvailable(userAccess, ibmProviders, ibmProvidersFetchStatus)) {\n            result = \"ibm\" /* ibm */;\n        }\n    }\n    return result;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n        case \"ibm\" /* ibm */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = 'subscription_guid';\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"ibm\" /* ibm */:\n            result = groupByIbmOptions;\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            result = \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            result = \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            result = \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getResourcePathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n        case \"ibm\" /* ibm */:\n            return \"ibm\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            return \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\n","import { Skeleton, Title } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { isFloat, isInt, } from 'components/charts/common/chartDatumUtils';\nimport { CostExplorerChart } from 'components/charts/costExplorerChart';\nimport { format, getDate, getMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { intl } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = intl.formatMessage(messages.ExplorerChartDate, {\n                date: getDate(computedItemDate),\n                month: getMonth(computedItemDate),\n            });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return Object.assign(Object.assign({ x: xVal, y: value === null ? null : yVal }, (value === null && { _y: 0 })), { date: computedItem.date, key: computedItem.id, name: computedItem.label ? computedItem.label : computedItem.id, units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined });\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            if (perspective) {\n                const reportPathsType = getReportPathsType(perspective);\n                const reportType = getReportType(perspective);\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                daily: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const label = datums[0].name;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key, label }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, intl } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, intl.formatMessage(messages.ExplorerChartTitle, { value: perspective }))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(CostExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = injectIntl(withRouter(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isDateRangeOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, intl } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, intl.formatMessage(option.label, { value: option.value }))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, intl } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = intl.formatMessage(option.label, { value: option.value });\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isDateRangeOpen: !this.state.isDateRangeOpen,\n            });\n        };\n        this.handleToggle = isDateRangeOpen => {\n            this.setState({\n                isDateRangeOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled } = this.props;\n        const { isDateRangeOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isDateRangeOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst DateRange = injectIntl(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getRouteForQuery, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, intl, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: option.label }),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRange = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentDateRange: value });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportPathsType, tagQueryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgQueryString, orgReport, orgReportPathsType, perspective, query, tagQueryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n        if (prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, resourcePathsType, tagReport } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRange(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, resourcePathsType: resourcePathsType, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const orgQueryString = getQuery({\n    // TBD...\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    }\n    // Fetch tags with largest date range available\n    const { start_date, end_date } = getLast60DaysDate();\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery({\n        start_date,\n        end_date,\n    });\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    }\n    return {\n        dateRange,\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilterConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase);\nconst ExplorerFilter = injectIntl(withRouter(ExplorerFilterConnect));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { CostType } from 'components/costType/costType';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getResourcePathsType, getRouteForQuery, getTagReportPathsType, infrastructureAwsOcpOptions, infrastructureAwsOptions, infrastructureAzureOcpOptions, infrastructureAzureOptions, infrastructureGcpOptions, infrastructureIbmOptions, infrastructureOcpCloudOptions, ocpOptions, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getPerspective = (isDisabled) => {\n            const { currentPerspective } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            if (!(aws || azure || gcp || ibm || ocp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (ocp) {\n                options.push(...ocpOptions);\n                // Todo: Show new features in beta environment only\n                if (insights.chrome.isBeta()) {\n                    options.push(...infrastructureOcpCloudOptions);\n                }\n            }\n            if (aws) {\n                options.push(...infrastructureAwsOptions);\n            }\n            if (aws && ocp) {\n                options.push(...infrastructureAwsOcpOptions);\n            }\n            if (gcp) {\n                options.push(...infrastructureGcpOptions);\n            }\n            // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n            //\n            // if (gcp && ocp) {\n            //   options.push(...infrastructureGcpOcpOptions);\n            // }\n            if (ibm) {\n                options.push(...infrastructureIbmOptions);\n            }\n            if (azure) {\n                options.push(...infrastructureAzureOptions);\n            }\n            if (azure && ocp) {\n                options.push(...infrastructureAzureOcpOptions);\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective || options[0].value, isDisabled: isDisabled, onSelected: this.handlePerspectiveSelected, options: options }));\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { history, onPerspectiveClicked, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: undefined, perspective: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentPerspective: value }, () => {\n                if (onPerspectiveClicked) {\n                    onPerspectiveClicked(value);\n                }\n            });\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, awsProvidersFetchStatus, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, azureProvidersFetchStatus, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, gcpProvidersFetchStatus, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, ibmProvidersFetchStatus, ibmUserAccess } = this.props;\n            return isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.props.perspective,\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { perspective } = this.props;\n        if (prevProps.perspective !== perspective) {\n            this.setState({\n                currentPerspective: this.props.perspective,\n            });\n        }\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, ibmProvidersFetchStatus, ibmUserAccess, groupBy, gcpProvidersFetchStatus, ocpProvidersFetchStatus, onFilterAdded, onFilterRemoved, onGroupBySelected, perspective, query, intl, userAccess, } = this.props;\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus) ||\n            isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus) ||\n            isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus) ||\n            isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus) ||\n            isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus));\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const resourcePathsType = getResourcePathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        // Fetch tags with largest date range available\n        const { start_date, end_date } = getLast60DaysDate();\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ExplorerTitle)),\n                React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.perspectiveContainer },\n                this.getPerspective(noProviders),\n                React.createElement(\"div\", { style: styles.groupBy },\n                    React.createElement(GroupBy, { endDate: end_date, getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onSelected: onGroupBySelected, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, startDate: start_date, tagReportPathsType: tagReportPathsType })),\n                perspective === \"aws\" /* aws */ && (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, null)))),\n            React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, perspective: perspective, query: query, resourcePathsType: resourcePathsType })));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    const queryFromRoute = parseQuery(location.search);\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        order_by: queryFromRoute.order_by,\n        perspective,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined }));\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = injectIntl(withRouter(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { parseQuery } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { format, getDate, getMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, intl, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            // Add first column heading (i.e., name)\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        cellTransforms: [nowrap],\n                        title: groupByOrg\n                            ? intl.formatMessage(messages.Names, { count: 2 })\n                            : intl.formatMessage(messages.TagNames),\n                    },\n                ]\n                : [\n                    {\n                        cellTransforms: [nowrap],\n                        date: undefined,\n                        orderBy: groupById === 'account' && perspective === \"aws\" /* aws */ ? 'account_alias' : groupById,\n                        title: intl.formatMessage(messages.GroupByValueNames, { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                ];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: true,\n            });\n            // Fill in missing columns\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                let isSortable = true;\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        isSortable = false;\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push(Object.assign({ cellTransforms: [nowrap], title: intl.formatMessage(messages.ExplorerChartDate, { date, month }) }, (isSortable && {\n                    date: mapId,\n                    orderBy: 'cost',\n                    transforms: [sortable],\n                })));\n            }\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            // Sort by date and fill in missing cells\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc; // First column description (i.e., show ID if different than label)\n                let name; // For first column resource name\n                let selectItem; // Save for row selection\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!name) {\n                        name = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (item.id && !selectItem) {\n                        selectItem = item;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[reportItem] && item[reportItem][reportItemValue]\n                            ? formatCurrency(item[reportItem][reportItemValue].value, item[reportItem][reportItemValue].units)\n                            : intl.formatMessage(messages.ChartNoData),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        name,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    disableSelection: selectItem.label === `no-${groupById}` || selectItem.label === `no-${groupByTagKey}`,\n                    item: selectItem,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === selectItem.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            if (query && query.order_by) {\n                for (const key of Object.keys(query.order_by)) {\n                    let c = 0;\n                    for (const column of columns) {\n                        if (column.orderBy === key && !column.date) {\n                            direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        else if (column.date === query.order_by[key]) {\n                            direction = query.order_by.cost === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        c++;\n                    }\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const column = columns[index - 1];\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(column.orderBy, column.date, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.ExplorerTableAriaLabel), canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    return {\n        dateRange,\n        end_date,\n        perspective,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = injectIntl(ExplorerTableConnect);\nexport { ExplorerTable };\n","import { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, selectedItems, } = this.props;\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = injectIntl(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getComputedReportItemValueType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, getRouteForQuery, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: false,\n            });\n            return computedItems;\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective), resolution: \"daily\", showAggregateType: false, showTimeScope: false }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, perspective: perspective, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: undefined });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = getRouteForQuery(history, newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handlePerspectiveClick = () => {\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, date, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            if (date) {\n                newQuery.order_by.date = date;\n            }\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { dateRange, fetchReport, history, location, perspective, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: query ? query.order_by : undefined,\n                    dateRange,\n                }));\n            }\n            else if (perspective) {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handlePerspectiveClick = this.handlePerspectiveClick.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, perspective, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newPerspective = prevProps.perspective !== perspective;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newPerspective || newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ibmUserAccess, ibmUserAccessFetchStatus, ocpProviders, ocpProvidersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, intl, userAccess, } = this.props;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */ ||\n            ibmUserAccessFetchStatus === 1 /* inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = intl.formatMessage(messages.ExplorerTitle);\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus) ||\n            isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus) ||\n            isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus) ||\n            isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus) ||\n            isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus));\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(hasData(awsProviders) ||\n            hasData(azureProviders) ||\n            hasData(gcpProviders) ||\n            hasData(ibmProviders) ||\n            hasData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, onGroupBySelected: this.handleGroupBySelected, onPerspectiveClicked: this.handlePerspectiveClick, perspective: perspective }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), perspective: perspective })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    // Cost Report\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    const perspective = getPerspectiveDefault({\n        awsProviders,\n        awsProvidersFetchStatus,\n        azureProviders,\n        azureProvidersFetchStatus,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        queryFromRoute,\n        userAccess,\n    });\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        order_by: queryFromRoute.order_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        dateRange,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers, providersFetchStatus) => {\n    let result = false;\n    if (providersFetchStatus === 2 /* complete */) {\n        // providers API returns empty data array for no sources\n        result = providers !== undefined && providers.meta !== undefined && providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders, awsProvidersFetchStatus) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders, awsProvidersFetchStatus);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders, azureProvidersFetchStatus) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders, azureProvidersFetchStatus);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders, gcpsProvidersFetchStatus) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders, gcpsProvidersFetchStatus);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders, ibmProvidersFetchStatus) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders, ibmProvidersFetchStatus);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders, ocpProvidersFetchStatus) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders, ocpProvidersFetchStatus);\n};\n"],"names":["getUserAccessQuery","query","stringify","encode","indices","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelectOptions","intl","options","props","selections","map","option","push","toString","formatMessage","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","item","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","variant","SelectVariant","SelectOption","key","event","onSelected","setState","render","Title","headingLevel","size","messages","Perspective","injectIntl","mapStateToProps","selectWidgets","azureCostOverview","widgets","CostOverview","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","instance_type","resource_location","service_name","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","costValue","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","headerContent","justifyContent","global_spacer_sm","baseQuery","delta","groupByOptions","DetailsHeaderBase","onGroupBySelected","providersError","showContent","meta","count","hasCost","total","cost","TitleSizes","showTags","Boolean","format","units","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","basePath","selectable","desc","cells","disableSelection","selected","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","toFixed","handleOnSelect","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","tagFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","resetState","prevState","noReport","noLocation","reset","pathname","queryFromRoute","ui","account","cluster","node","org_unit_id","project","region","service","chartContainer","paddingRight","chartContent","explorer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","grid","stroke","ticks","yAxisAlt","tickLabels","xAxis","CostExplorerChartBase","containerRef","observer","noop","hiddenSeries","Set","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","getTruncatedString","childName","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","getUnits","datum","getAdjustedContainerHeight","adjustContainerHeight","containerHeight","adjustedContainerHeight","getBarWidth","domainPadding","maxWidth","maxValue","forEach","s","sectionWidth","getChart","barWidth","has","y","ChartBar","formatter","formatOptions","CursorVoronoiContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","left","right","top","getDomain","domain","max","getEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","handleLegendClick","getLegend","ChartLegend","gutter","responsive","getTickValues","x","tickValues","modVal","i","str","substr","maxChars","getTickValue","t","handleResize","clientWidth","current","componentWillUnmount","container","disable","labelComponent","ChartLegendTooltip","legendData","day","ref","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartTheme","ChartStack","ChartAxis","C","fixLabelOverlap","dependentAxis","tickFormat","CostExplorerChart","global_spacer_2xl","chartSkeleton","costChart","legendSkeleton","titleContainer","trendChart","usageChart","dateRangeOptions","insights","chrome","isBeta","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByIbmOptions","groupByOcpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpCloudOptions","ocpOptions","getComputedReportItemType","perspective","result","getComputedReportItemValueType","getDateRange","dateRangeType","endDate","Date","startDate","dateRange","setDate","setMonth","getMonth","end_date","start_date","getDateRangeDefault","getGroupByDefault","getGroupByOptions","getOrgReportPathsType","getReportType","getReportPathsType","getTagReportPathsType","ExplorerChartBase","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","date","xVal","getDate","month","yVal","parseFloat","_y","getChartDatums","computedReportItemType","computedReportItemValueType","chartDatums","datums","Map","Array","from","padChartDatums","getGroupBy","daily","groupByOrg","getSkeleton","Skeleton","skeleton","padDate","chartDatum","ExplorerChartConnect","ExplorerChart","withRouter","DateRangeBase","isDateRangeOpen","getDropDownItems","DropdownItem","component","onClick","handleClick","getCurrentLabel","onItemClicked","dropdownItems","Dropdown","toggle","DropdownToggle","DateRange","toolbarContainer","orgReportType","ExplorerFilterBase","orgReport","getDefaultDateRange","currentDateRange","handleDateRangeClick","fetchOrg","orgQueryString","orgReportPathsType","tagQueryString","orgReportFetchStatus","tagReportFetchStatus","ExplorerFilterConnect","ExplorerFilter","costLabel","costLabelDate","global_Color_200","costType","paddingLeft","perspectiveContainer","ExplorerHeaderBase","getPerspective","currentPerspective","aws","isAwsAvailable","azure","isAzureAvailable","gcp","isGcpAvailable","ibm","isIbmAvailable","ocp","isOcpAvailable","handlePerspectiveSelected","onPerspectiveClicked","awsProviders","awsProvidersFetchStatus","userAccess","azureProviders","azureProvidersFetchStatus","gcpProviders","gcpProvidersFetchStatus","ibmProviders","ibmProvidersFetchStatus","ibmUserAccess","ocpProviders","ocpProvidersFetchStatus","noProviders","getResourcePathsType","showOrgs","userAccessQueryString","userAccessError","userAccessFetchStatus","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","ibmUserAccessQueryString","ibmUserAccessError","ibmUserAccessFetchStatus","ExplorerHeader","overflowX","ExplorerTableBase","cellTransforms","nowrap","currentDate","mapId","isSortable","rowItem","get","set","mapIdDate","selectItem","sort","a","b","unshift","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","ExplorerToolbarConnect","ExplorerToolbar","Explorer","showAggregateType","showTimeScope","slice","handlePerspectiveClick","newPerspective","getPerspectiveDefault","hasAccess","userAccessType","isArray","d","type","access","hasProviders","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","gcpsProvidersFetchStatus","hasIbmAccess","hasOcpAccess"],"sourceRoot":""}