{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/components/state/loadingState/loadingState.tsx","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardBase.tsx","webpack://koku-ui/./src/pages/views/overview/components/chartComparison.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidgetBase.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/overview.styles.ts","webpack://koku-ui/./src/pages/views/overview/overview.tsx","webpack://koku-ui/./src/pages/views/overview/index.ts","webpack://koku-ui/./src/utils/formatValue.ts","webpack://koku-ui/./src/utils/userAccess.ts"],"names":["getUserAccessQuery","query","stringify","encode","indices","LoadingState","t","title","subTitle","EmptyState","variant","EmptyStateVariant","className","Spinner","size","Title","headingLevel","EmptyStateBody","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","constructor","super","arguments","this","defaultState","isPerspectiveOpen","state","Object","assign","getDropDownItems","options","props","map","option","DropdownItem","component","key","value","onClick","handleClick","label","getCurrentLabel","currentItem","getDropDown","isDisabled","dropdownItems","length","style","Dropdown","onSelect","handleSelect","toggle","DropdownToggle","onToggle","handleToggle","isOpen","onItemClicked","setState","render","Perspective","withTranslation","DashboardBase","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","isChartComparisonOpen","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","tabs","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showInfrastructureLabel","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","currentInfrastructureData","previousInfrastructureData","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","forecastInfrastructureData","computedForecastInfrastructureItem","ReportSummaryComponent","currentInfrastructureCostData","forecastConeData","forecastInfrastructureConeData","formatDatumValue","formatValue","formatDatumOptions","formatOptions","previousInfrastructureCostData","showForecast","undefined","currentData","previousData","showUsageLegendLabel","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","push","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","Link","to","getDetailsLinkTitle","groupBy","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","id","toString","Tabs","isFilled","activeKey","handleTabClick","today","month","endDate","format","startDate","startOfMonth","getVerticalLayout","Boolean","event","tabIndex","updateTab","componentDidMount","fetchForecasts","fetchReports","mapStateToProps","widget","awsDashboard","queries","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsDashboardWidget","connect","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","alignSelf","flexGrow","textAlign","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","perspective","global_spacer_lg","ocpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureIbmOptions","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOcpCloudAvailable","getCurrentTab","aws","azure","gcp","ibm","ocp","ocpCloud","getDefaultInfrastructurePerspective","getDefaultOcpPerspective","ocpProviders","ocpProvidersFetchStatus","userAccess","getPerspective","currentInfrastructurePerspective","currentOcpPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","awsProvidersFetchStatus","azureProvidersFetchStatus","gcpProvidersFetchStatus","ibmProvidersFetchStatus","ibmUserAccess","componentDidUpdate","prevProps","userAccessFetchStatus","isLoading","noAwsProviders","noAzureProviders","noGcpProviders","noIbmProviders","noOcpProviders","noProviders","TitleSizes","Popover","enableFlip","bodyContent","Button","ButtonVariant","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","userAccessQueryString","userAccessError","ibmUserAccessQueryString","ibmUserAccessError","ibmUserAccessFetchStatus","unitLookupKey","unit","lookup","toLowerCase","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","currency","formatCurrencyAbbreviation","abbreviationFormats","symbol","find","f","parts","match","hasAccess","userAccessType","result","Array","isArray","d","access","hasProviders","providers","providersFetchStatus","count","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","gcpsProvidersFetchStatus","hasIbmAccess","hasOcpAccess"],"mappings":"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","file":"ab134dc997a4b760a12b.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nconst LoadingStateBase = ({ t }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n        React.createElement(Spinner, { size: \"lg\" }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, title),\n        React.createElement(EmptyStateBody, null, subTitle)));\n};\nconst LoadingState = withTranslation()(LoadingStateBase);\nexport { LoadingState };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.getDropDown = () => {\n            const { isDisabled, options, t } = this.props;\n            const { isPerspectiveOpen } = this.state;\n            const dropdownItems = this.getDropDownItems();\n            if (options.length === 1) {\n                return React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, t(options[0].label));\n            }\n            return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems }));\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            this.getDropDown()));\n    }\n}\nconst Perspective = withTranslation()(PerspectiveBase);\nexport { Perspective };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isChartComparisonOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isChartComparisonOpen: !this.state.isChartComparisonOpen,\n            });\n        };\n        this.handleToggle = isChartComparisonOpen => {\n            this.setState({\n                isChartComparisonOpen,\n            });\n        };\n    }\n    render() {\n        // const { t } = this.props;\n        const { isChartComparisonOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isChartComparisonOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst ChartComparison = withTranslation()(ChartComparisonBase);\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformForecast, transformForecastCone, transformReport, } from 'components/charts/common/chartDatumUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport { format, getMonth, startOfMonth } from 'date-fns';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        this.getChartComparison = () => {\n            const { t, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getUnits();\n            const cumulativeTitle = t(trend.titleKey, { units: t(`units.${units}`) });\n            const dailyTitle = t(trend.dailyTitleKey, { units: t(`units.${units}`) });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* cumulative */ },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, type, 'date', 'infrastructure', computedReportItemValue);\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const forecastInfrastructureData = this.getForecastData(currentReport, trend.computedForecastInfrastructureItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, forecastInfrastructureConeData: forecastInfrastructureData.forecastConeData, forecastInfrastructureData: forecastInfrastructureData.forecastData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getUnits();\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: units })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === 0 /* rolling */) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units: 'USD',\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units: 'USD',\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units: 'USD',\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            // Cost data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: units }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            const units = this.getUnits();\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey, units), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: details.units, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: details.units ? details.units : this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = format(today, 'Do');\n            const startDate = format(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            let units;\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                units = hasUsage ? unitLookupKey(currentReport.meta.total.usage.units) : '';\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                units = hasCost ? unitLookupKey(currentReport.meta.total[computedReportItem][computedReportItemValue].units) : '';\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsDashboard;\n","import AwsDashboard from './awsDashboard';\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsOcpDashboard;\n","import AwsOcpDashboard from './awsOcpDashboard';\nexport default AwsOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureDashboard;\n","import AzureDashboard from './azureDashboard';\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureOcpDashboard;\n","import AzureOcpDashboard from './azureOcpDashboard';\nexport default AzureOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default GcpDashboard;\n","import GcpDashboard from './gcpDashboard';\nexport default GcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default GcpOcpDashboard;\n","import GcpOcpDashboard from './gcpOcpDashboard';\nexport default GcpOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default IbmDashboard;\n","import IbmDashboard from './ibmDashboard';\nexport default IbmDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpCloudDashboard;\n","import OcpCloudDashboard from './ocpCloudDashboard';\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = withTranslation()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpDashboard;\n","import OcpDashboard from './ocpDashboard';\nexport default OcpDashboard;\n","import global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    perspective: {\n        display: 'flex',\n        marginTop: global_spacer_lg.value,\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport AwsDashboard from 'pages/views/overview/awsDashboard';\nimport AwsOcpDashboard from 'pages/views/overview/awsOcpDashboard';\nimport AzureDashboard from 'pages/views/overview/azureDashboard';\nimport AzureOcpDashboard from 'pages/views/overview/azureOcpDashboard';\nimport GcpDashboard from 'pages/views/overview/gcpDashboard';\nimport GcpOcpDashboard from 'pages/views/overview/gcpOcpDashboard';\nimport IbmDashboard from 'pages/views/overview/ibmDashboard';\nimport OcpCloudDashboard from 'pages/views/overview/ocpCloudDashboard';\nimport OcpDashboard from 'pages/views/overview/ocpDashboard';\nimport { hasCloudCurrentMonthData, hasCloudPreviousMonthData, hasCurrentMonthData, hasPreviousMonthData, } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [{ label: 'overview.perspective.ocp_all', value: 'all' }];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: 'overview.perspective.aws', value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: 'overview.perspective.aws_ocp', value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: 'overview.perspective.azure', value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: 'overview.perspective.azure_ocp', value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: 'overview.perspective.gcp', value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\n//\n// Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n//\n// const infrastructureGcpOcpOptions = [{ label: 'overview.perspective.gcp_ocp', value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: 'overview.perspective.ibm', value: 'ibm' }];\n// Infrastructure Ocp cloud options\n//\n// Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\n//\n// const infrastructureOcpCloudOptions = [{ label: 'overview.perspective.ocp_cloud', value: 'ocp_cloud' }];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            const ocpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = ocp && !(aws || azure || gcp || ibm || ocpCloud);\n            const showInfrastructureOnly = !ocp && (aws || azure || gcp || ibm || ocpCloud);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\n            //\n            // if (this.isOcpAvailable()) {\n            //   return InfrastructurePerspective.ocpCloud;\n            // }\n            if (this.isAwsAvailable()) {\n                return \"aws\" /* aws */;\n            }\n            if (this.isAzureAvailable()) {\n                return \"azure\" /* azure */;\n            }\n            if (this.isGcpAvailable()) {\n                return \"gcp\" /* gcp */;\n            }\n            if (this.isIbmAvailable()) {\n                return \"ibm\" /* ibm */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            if (isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus)) {\n                return \"all\" /* all */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            if (!(aws || azure || gcp || ibm || ocp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\n                //\n                // if (ocp) {\n                //   options.push(...infrastructureOcpCloudOptions);\n                // }\n                if (aws) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (aws && ocp) {\n                    options.push(...infrastructureAwsOcpOptions);\n                }\n                if (gcp) {\n                    options.push(...infrastructureGcpOptions);\n                }\n                // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n                //\n                // if (gcp && ocp) {\n                //   options.push(...infrastructureGcpOcpOptions);\n                // }\n                if (ibm) {\n                    options.push(...infrastructureIbmOptions);\n                }\n                if (azure) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (azure && ocp) {\n                    options.push(...infrastructureAzureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"ocp_cloud\" /* ocpCloud */) {\n                    const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_ocp\" /* awsOcp */) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* gcp */) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp_ocp\" /* gcpOcp */) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ibm\" /* ibm */) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_ocp\" /* azureOcp */) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === \"all\" /* all */) {\n                    return hasData ? React.createElement(OcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return t('overview.infrastructure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, awsProvidersFetchStatus, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, azureProvidersFetchStatus, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, gcpProvidersFetchStatus, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, ibmProvidersFetchStatus, ibmUserAccess } = this.props;\n            return isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus);\n        };\n        this.isOcpCloudAvailable = () => {\n            return this.isAwsAvailable() && this.isOcpAvailable();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, userAccess } = this.props;\n        // Note: User access and providers are fetched via the Permissions and InactiveSources components used by all routes\n        if (prevProps.userAccess !== userAccess ||\n            prevProps.awsProviders !== awsProviders ||\n            prevProps.azureProviders !== azureProviders ||\n            prevProps.gcpProviders !== gcpProviders ||\n            prevProps.ibmProviders !== ibmProviders ||\n            prevProps.ocpProviders !== ocpProviders) {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ibmProvidersFetchStatus, ocpProvidersFetchStatus, userAccessFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */;\n        // Test for no providers\n        const noAwsProviders = !this.isAwsAvailable() && awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && azureProvidersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && gcpProvidersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && ibmProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const title = t('cost_management_overview');\n        if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light headerOverride}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        t('cost_management_overview'),\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.gcp')),\n                                    React.createElement(\"p\", null, t('overview.gcp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ibm')),\n                                    React.createElement(\"p\", null, t('overview.ibm_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null)))))),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.perspective },\n                    this.getPerspective(),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst Overview = withTranslation()(connect(mapStateToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n","import i18next from 'i18next';\nexport const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'gibibyte month':\n        case 'core-hours':\n        case 'hour':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'gibibyte month':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hour':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrencyAbbreviation = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Derived from https://stackoverflow.com/questions/37799955/how-can-i-format-big-numbers-with-tolocalestring\n    const abbreviationFormats = [\n        { val: 1e15, symbol: 'currency_abbreviations.quadrillion' },\n        { val: 1e12, symbol: 'currency_abbreviations.trillion' },\n        { val: 1e9, symbol: 'currency_abbreviations.billion' },\n        { val: 1e6, symbol: 'currency_abbreviations.million' },\n        { val: 1e3, symbol: 'currency_abbreviations.thousand' },\n    ];\n    // Find the proper format to use\n    let format;\n    if (abbreviationFormats != null) {\n        format = abbreviationFormats.find(f => fValue >= f.val);\n    }\n    // Apply format and insert symbol next to the numeric portion of the formatted string\n    if (format != null) {\n        const { val, symbol } = format;\n        const formatted = (fValue / val).toLocaleString('en', {\n            style: 'currency',\n            currency: unit || 'USD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: fractionDigits,\n        });\n        const parts = formatted.match(/([\\D]*)([\\d.,]+)([\\D]*)/);\n        return `${parts[1]}${parts[2]}${i18next.t(symbol)}${parts[3]}`;\n    }\n    // If no format was found, format value without abbreviation\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers, providersFetchStatus) => {\n    let result = false;\n    if (providersFetchStatus === 2 /* complete */) {\n        // providers API returns empty data array for no sources\n        result = providers !== undefined && providers.meta !== undefined && providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders, awsProvidersFetchStatus) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders, awsProvidersFetchStatus);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders, azureProvidersFetchStatus) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders, azureProvidersFetchStatus);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders, gcpsProvidersFetchStatus) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders, gcpsProvidersFetchStatus);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders, ibmProvidersFetchStatus) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders, ibmProvidersFetchStatus);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders, ocpProvidersFetchStatus) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders, ocpProvidersFetchStatus);\n};\n"],"sourceRoot":""}