{"version":3,"file":"1668097be3e2edf0c6d1.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/components/accountSettings/accountSettings.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/awsBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/index.ts","webpack://koku-ui/./src/pages/views/details/awsBreakdown/awsBreakdownWrapper.tsx","webpack://koku-ui/./src/utils/computedReport/getComputedAwsReportItems.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/awsDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/awsDetails.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/index.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/awsDetailsWrapper.tsx"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { accountSettingsActions, accountSettingsSelectors } from 'store/accountSettings';\nimport { createMapStateToProps } from 'store/common';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nclass AccountSettingsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateAccountSettings = () => {\n            const { accountSettingsFetchStatus, fetchAccountSettings } = this.props;\n            if (accountSettingsFetchStatus !== 1 /* inProgress */) {\n                fetchAccountSettings();\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateAccountSettings();\n    }\n    componentDidUpdate(prevProps) {\n        const { accountSettings } = this.props;\n        if (prevProps.accountSettings !== accountSettings) {\n            const costType = accountSettings ? accountSettings.data.cost_type : \"unblended_cost\" /* unblended */;\n            const currency = accountSettings ? accountSettings.data.currency : 'USD';\n            // Force update to render children\n            this.setState({\n                costType,\n                currency,\n            });\n        }\n    }\n    render() {\n        const { accountSettingsFetchStatus, children } = this.props;\n        return accountSettingsFetchStatus === 2 /* complete */ ? children : null;\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const accountSettings = accountSettingsSelectors.selectAccountSettings(state);\n    const accountSettingsError = accountSettingsSelectors.selectAccountSettingsError(state);\n    const accountSettingsFetchStatus = accountSettingsSelectors.selectAccountSettingsFetchStatus(state);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    return {\n        accountSettings,\n        accountSettingsError,\n        accountSettingsFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchAccountSettings: accountSettingsActions.fetchAccountSettings,\n};\nconst CostTypeConnect = connect(mapStateToProps, mapDispatchToProps)(AccountSettingsBase);\nconst AccountSettings = injectIntl(CostTypeConnect);\nexport { AccountSettings };\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { awsCostOverviewSelectors } from 'store/breakdown/costOverview/awsCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsCostOverviewSelectors.selectWidgets(state),\n        widgets: awsCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { awsHistoricalDataSelectors } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsHistoricalDataSelectors.selectWidgets(state),\n        widgets: awsHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey, logicalAndPrefix, orgUnitIdKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport { filterProviders } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getCostType } from 'utils/localStorage';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.awsDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"aws\" /* aws */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n        cost_type: query.cost_type || getCostType(),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    const cost_type = getCostType();\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { costType: cost_type, groupBy: groupBy, query: query, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.AWSDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, { costType: cost_type }),\n        providers: filterProviders(providers, \"aws\" /* aws */),\n        providersError,\n        providersFetchStatus,\n        providerType: \"aws\" /* aws */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        showCostType: true,\n        tagReportPathsType: \"aws\" /* aws */,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AwsBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AwsBreakdown;\n","import AwsBreakdownWrapper from './awsBreakdownWrapper';\nexport default AwsBreakdownWrapper;\n","import { AccountSettings } from 'components/accountSettings';\nimport React from 'react';\nimport AwsBreakdown from './awsBreakdown';\nconst AwsBreakdownWrapper = props => {\n    return (React.createElement(AccountSettings, null,\n        React.createElement(AwsBreakdown, Object.assign({}, props))));\n};\nexport default AwsBreakdownWrapper;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    awsDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { Currency } from 'components/currency';\nimport messages from 'locales/messages';\nimport { CostType } from 'pages/views/components/costType';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { filterProviders } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst orgReportPathsType = \"aws\" /* aws */;\nconst tagReportPathsType = \"aws\" /* aws */;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleCostTypeSelected = (value) => {\n            const { onCostTypeSelected } = this.props;\n            if (onCostTypeSelected) {\n                onCostTypeSelected(value);\n            }\n        };\n    }\n    render() {\n        const { groupBy, onGroupBySelected, providers, providersError, report, intl } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.AWSDetailsTitle)),\n                isBetaFeature() && React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, orgReportPathsType: orgReportPathsType, showOrgs: true, showTags: true, tagReportPathsType: tagReportPathsType }),\n                    React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, { onSelect: this.handleCostTypeSelected }))),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"aws\" /* aws */),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './awsDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport messages from 'locales/messages';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { getOrgBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"aws\" /* aws */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n            });\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        title: groupByOrg\n                            ? intl.formatMessage(messages.Names, { count: 2 })\n                            : intl.formatMessage(messages.TagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.Cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById === 'account' ? 'account_alias' : groupById, title: intl.formatMessage(messages.DetailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.Cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                let name = (React.createElement(Link, { to: getOrgBreakdownPath({\n                        basePath: paths.awsDetailsBreakdown,\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        groupByOrg,\n                        id: item.id,\n                        orgUnitId: getGroupByOrgValue(query),\n                        query,\n                        title: item.label,\n                        type: item.type,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index, disabled = false) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: disabled, item: item, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.Percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.AWSDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/awsQuery';\nimport { orgUnitIdKey, tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst orgReportPathsType = \"aws\" /* aws */;\nconst orgReportType = \"org\" /* org */;\nconst tagReportPathsType = \"aws\" /* aws */;\nconst tagReportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, orgReport, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (orgReport && orgReport.data && orgReport.data.length) {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportFetchStatus, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (orgReportFetchStatus !== 1 /* inProgress */) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgReport, orgReportFetchStatus, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (orgReportFetchStatus !== 1 /* inProgress */) {\n                    fetchOrg(orgReportPathsType, orgReportType, queryString);\n                }\n                if (tagReportFetchStatus !== 1 /* inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportFetchStatus !== 1 /* inProgress */) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, orgReport, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, pagination: pagination, query: query, resourcePathsType: \"aws\" /* aws */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        orgReport,\n        orgReportFetchStatus,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { filterProviders, hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getCostType } from 'utils/localStorage';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"aws\" /* aws */;\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupBy = groupByTagKey || groupById;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupBy === orgUnitIdKey ? 'org_entities' : groupBy,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Need param to restore cost type upon page refresh\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(this.getRouteForQuery(newQuery, false)); // Don't reset pagination\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                    cost_type: query ? query.cost_type : getCostType(),\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.AWSDetailsTitle);\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"aws\" /* aws */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.awsDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onCostTypeSelected: this.handleCostTypeSelected, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        cost_type: queryFromRoute.cost_type || getCostType(),\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"aws\" /* aws */),\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n","import AwsDetailsWrapper from './awsDetailsWrapper';\nexport default AwsDetailsWrapper;\n","import { AccountSettings } from 'components/accountSettings';\nimport React from 'react';\nimport AwsDetails from './awsDetails';\nconst AwsDetailsWrapper = props => {\n    return (React.createElement(AccountSettings, null,\n        React.createElement(AwsDetails, Object.assign({}, props))));\n};\nexport default AwsDetailsWrapper;\n"],"names":["getUserAccessQuery","query","stringify","encode","indices","AccountSettingsBase","constructor","super","arguments","this","defaultState","state","Object","assign","updateAccountSettings","accountSettingsFetchStatus","fetchAccountSettings","props","componentDidMount","componentDidUpdate","prevProps","accountSettings","costType","data","cost_type","currency","setState","render","children","mapStateToProps","accountSettingsError","userAccessQueryString","userAccess","userAccessError","userAccessFetchStatus","mapDispatchToProps","CostTypeConnect","connect","AccountSettings","injectIntl","selectWidgets","awsCostOverview","widgets","CostOverview","awsHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","location","search","groupByOrgValue","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","undefined","account","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","showCostType","tagReportPathsType","title","fetchReport","getIdKeyForGroupBy","instance_type","org_unit_id","region","service","styles","awsDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","display","dateTitle","textAlign","header","headerContent","justifyContent","headerContentLeft","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","handleCostTypeSelected","onCostTypeSelected","onGroupBySelected","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","isDisabled","onSelected","options","orgReportPathsType","showOrgs","showTags","onSelect","Boolean","format","units","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByOrg","groupByTagKey","computedItems","idKey","orderBy","length","transforms","sortable","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","id","orgUnitId","type","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","sortBy","disabled","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","keys","order_by","c","column","percentValue","toFixed","handleOnSelect","event","isSelected","rowId","items","row","handleOnSort","onSort","bind","currentReport","JSON","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","DetailsTable","orgReportType","tagReportType","DetailsToolbarBase","getCategoryOptions","orgReport","tagReport","fetchOrg","fetchTag","orgReportFetchStatus","tagReportFetchStatus","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","DetailsToolbarConnect","DetailsToolbar","limit","offset","AwsDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","isOpen","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","history","parse","replace","getRouteForQuery","action","filterType","filterValue","filteredQuery","handleGroupBySelected","groupByKey","indexOf","slice","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","resetState","prevState","noReport","noLocation","reset","pathname","queryFromRoute","ui"],"sourceRoot":""}