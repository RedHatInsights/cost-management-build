{"version":3,"sources":["webpack:///./src/pages/overview/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartLabelTooltip/chartLabelTooltip.tsx","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpOnCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummary.styles.ts","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummary.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryItem.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryItems.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnCloudReportSummary/ocpOnCloudReportSummaryUsage.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./node_modules/date-fns/get_month/index.js","webpack:///./src/pages/awsDashboard/awsDashboardWidget.styles.ts","webpack:///./src/pages/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/azureDashboard/azureDashboardWidget.styles.ts","webpack:///./src/pages/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/pages/azureDashboard/azureDashboard.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/ocpOnCloudDashboard/ocpOnCloudDashboardWidget.styles.ts","webpack:///./src/pages/ocpOnCloudDashboard/ocpOnCloudDashboardWidget.tsx","webpack:///./src/pages/ocpOnCloudDashboard/ocpOnCloudDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/overview.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_overview__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpOnCloudReport","utils_getComputedOcpOnCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getDateRangeString","i18next__WEBPACK_IMPORTED_MODULE_5__","t","count","endDate","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getMonthRangeString","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","getTooltipLabel","formatOptions","toString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","__rest","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","ChartLabelTooltip","_a","content","props","react_default","createElement","Tooltip","enableFlip","ChartLabel","assign","LAYOUT_PROPS","padding","theme_koku","area","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpOnCloudReportItems","getUnsortedComputedOcpOnCloudReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","className","minus_icon","display","justifyContent","height","marginTop","LoadingState","es","icon","binoculars_icon","title","subTitle","EmptyState","EmptyStateIcon","Title","size","EmptyStateBody","ErrorState","error","error_circle_o_icon","response","status","ban_icon","viewSources","mapStateToProps","common","state","NoProvidersState","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","Link","to","dollar_sign_icon","chartStyles","colorScale","esm","labels","fontFamily","minWidth","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","width","initDatum","currentData","previousData","legendData","chartUtils","push","symbol","setState","chartDatum","charts","show","onClick","handleCostLegendClick","newDatum","index","handleResize","current","clientWidth","getChart","ChartArea","interpolation","getLegend","eventHandlers","target","mutation","ChartLegend","events","gutter","labelComponent","chartLabelTooltip","getLegendTooltip","orientation","formatDatumValue","formatDatumOptions","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","result","trim","containerHeight","ChartVoronoiContainer","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","legendVisible","isLegendVisible","ref","Chart","containerComponent","legendComponent","undefined","legendPosition","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendColorScale","handleLegendClick","legendItemsPerRow","responsive","childName","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitleTooltip","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","AwsReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","utils_formatValue","unitsLabel","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","AzureReportSummary","azureReportSummaryAlt_styles_styles","AzureReportSummaryAlt","azureReportSummaryDetails_styles_styles","AzureReportSummaryDetails","_units","azureReportSummaryItem_styles_styles","AzureReportSummaryItemBase","AzureReportSummaryItem","azureReportSummaryItems_styles_styles","AzureReportSummaryItems","azureReportSummaryTrend_styles_styles","AzureReportSummaryTrend","OcpOnCloudReportSummary","ocpOnCloudReportSummaryAlt_styles_styles","OcpOnCloudReportSummaryAlt","ocpOnCloudReportSummaryDetails_styles_styles","OcpOnCloudReportSummaryDetails","requestFormatOptions","requestLabel","cloudReportType","getRequestLayout","ocpOnCloudReportSummaryItem_styles_styles","OcpOnCloudReportSummaryItemBase","OcpOnCloudReportSummaryItem","ocpOnCloudReportSummaryItems_styles_styles","OcpOnCloudReportSummaryItems","ocpOnCloudReportSummaryTrend_styles_styles","OcpOnCloudReportSummaryTrend","OcpOnCloudReportSummaryUsage","usageChart","OcpReportSummary","ocpReportSummaryAlt_styles_styles","OcpReportSummaryAlt","ocpReportSummaryDetails_styles_styles","OcpReportSummaryDetails","ocpReportSummaryItem_styles_styles","OcpReportSummaryItemBase","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","OcpReportSummaryItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","parse","exports","dirtyDate","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","tabItems","getIdKeyForTab","tab","widgetId","widget","awsDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","previous","tabsQuery","currentReport","awsReports","selectReport","currentReportFetchStatus","selectReportFetchStatus","previousReport","tabsReport","tabsReportFetchStatus","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","AwsDashboardWidget","activeTabKey","buildDetailsLink","currentTab","awsQuery","group_by","order_by","trend","getUnits","awsReportSummary","titleKey","getDetails","isUsageFirst","getDetailsLabel","costKey","usageKey","getDetailsLink","isDetailsLink","handleInsightsNavClick","getDetailsLinkTitle","getHorizontalLayout","getSubTitle","getSubTitleTooltip","getTabs","getTitle","get_month_default","format_default","start_of_month_default","get_year_default","getTab","Tab","eventKey","getTabTitle","getTabItem","availableTabs","topItems","activeTab","isCostReport","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","insights","chrome","appNavClick","secondaryNav","event","tabIndex","isHorizontal","awsDashboard_mapStateToProps","selectWidgets","widgets","selectCurrentWidgets","awsDashboard_awsDashboard","xl2","azureDashboardWidget_styles_chartStyles","azureDashboardWidget_styles_styles","azureDashboardWidget_getIdKeyForTab","azureDashboardWidget_mapStateToProps","azureDashboard","azureReports","azureDashboardWidget_mapDispatchToProps","AzureDashboardWidget","azureQuery","azureReportSummary","azureDashboard_mapStateToProps","azureDashboard_azureDashboard","ocpDashboardWidget_styles_chartStyles","containerUsageHeight","ocpDashboardWidget_styles_styles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpReports","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpQuery","currentInfrastructureData","previousInfrastructureData","ocpReportSummary","requestKey","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","ocpOnCloudDashboardWidget_styles_chartStyles","ocpOnCloudDashboardWidget_styles_styles","ocpOnCloudDashboardWidget_getIdKeyForTab","ocpOnCloudDashboardWidget_mapStateToProps","ocpOnCloudDashboard","ocpOnCloudReports","ocpOnCloudDashboardWidget_mapDispatchToProps","OcpOnCloudDashboardWidget","ocpOnCloudQuery","ocpOnCloudReportSummary","ocpOnCloudDashboard_mapStateToProps","ocpOnCloudDashboard_ocpOnCloudDashboard","overview_styles_styles","info","marginLeft","verticalAlign","infoIcon","infoTitle","fontWeight","headerOverride","index_esm","overview_getIdKeyForTab","overview_mapStateToProps","awsProvidersQueryString","providersQuery","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","azureProvidersQueryString","azureProviders","azureProvidersError","azureProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","Overview","showPopover","getAvailableTabs","contentRef","tabContentId","tabContentRef","getTabContent","val","TabContent","handlePopoverClick","isLoading","noAwsProviders","noAzureProviders","noOcpProviders","noProviders","showTabs","sizes","Popover","aria-label","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState"],"mappings":"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","file":"f598609e1f47af41f620.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport Overview from './overview';\nexport default hot(module)(Overview);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpOnCloudReportItems, } from 'utils/getComputedOcpOnCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpOnCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpOnCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const test = i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n    return test;\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nconst ChartLabelTooltip = (_a) => {\n    var { content } = _a, props = __rest(_a, [\"content\"]);\n    return (React.createElement(Tooltip, { content: content(props.datum), enableFlip: true },\n        React.createElement(ChartLabel, Object.assign({}, props))));\n};\nexport { ChartLabelTooltip };\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpOnCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpOnCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpOnCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BinocularsIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(EmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BanIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error && error.response && error.response.status === 401) {\n        icon = BanIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousData,\n                            name: 'previous',\n                            show: true,\n                            style: chartStyles.previousMonth,\n                        },\n                        {\n                            data: currentData,\n                            name: 'current',\n                            show: true,\n                            style: chartStyles.currentMonth,\n                        },\n                    ],\n                    legend: {\n                        colorScale: chartStyles.colorScale,\n                        data: legendData,\n                        onClick: this.handleCostLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { title } = this.props;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 20, height: 25, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            if (previousUsageData) {\n                const [start] = getMonthRangeString(previousUsageData, 'chart.usage_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousUsageData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentUsageData) {\n                const [start] = getMonthRangeString(currentUsageData, 'chart.usage_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentUsageData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousRequestData) {\n                const [start] = getMonthRangeString(previousRequestData, 'chart.requests_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousRequestData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentRequestData) {\n                const [start] = getMonthRangeString(currentRequestData, 'chart.requests_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentRequestData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousUsageData,\n                            name: 'previousUsage',\n                            show: true,\n                            style: chartStyles.previousUsageData,\n                        },\n                        {\n                            data: currentUsageData,\n                            name: 'currentUsage',\n                            show: true,\n                            style: chartStyles.currentUsageData,\n                        },\n                        {\n                            data: previousRequestData,\n                            name: 'previousRequest',\n                            show: true,\n                            style: chartStyles.previousRequestData,\n                        },\n                        {\n                            data: currentRequestData,\n                            name: 'currentRequest',\n                            show: true,\n                            style: chartStyles.currentRequestData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `usage-chart-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow, title } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), responsive: true, style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummary.styles';\nconst AzureReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AzureReportSummary = translate()(AzureReportSummaryBase);\nexport { AzureReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummaryAlt.styles';\nconst AzureReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AzureReportSummaryAlt = translate()(AzureReportSummaryAltBase);\nexport { AzureReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryDetails.styles';\nconst AzureReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (report.meta.total.usage && report.meta.total.usage.value) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Work around for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage : 0, report.meta.total.count ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    (units ||\n                        (report &&\n                            report.meta &&\n                            report.meta.total.usage &&\n                            report.meta.total.usage.value >= 0))) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AzureReportSummaryDetails = translate()(AzureReportSummaryDetailsBase);\nexport { AzureReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryItem.styles';\nconst AzureReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAzureReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AzureReportSummaryItem = translate()(AzureReportSummaryItemBase);\nexport { AzureReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureReportSummaryItems.styles';\nclass AzureReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAzureReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AzureReportSummaryItems = translate()(AzureReportSummaryItemsBase);\nexport { AzureReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './azureReportSummaryTrend.styles';\nconst AzureReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AzureReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnCloudReportSummary.styles';\nconst OcpOnCloudReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpOnCloudReportSummary = translate()(OcpOnCloudReportSummaryBase);\nexport { OcpOnCloudReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnCloudReportSummaryAlt.styles';\nconst OcpOnCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpOnCloudReportSummaryAlt = translate()(OcpOnCloudReportSummaryAltBase);\nexport { OcpOnCloudReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnCloudReportSummaryDetails.styles';\nconst OcpOnCloudReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const cloudReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (cloudReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (cloudReportType) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpOnCloudReportSummaryDetails = translate()(OcpOnCloudReportSummaryDetailsBase);\nexport { OcpOnCloudReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnCloudReportSummaryItem.styles';\nconst OcpOnCloudReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpOnCloudReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpOnCloudReportSummaryItem = translate()(OcpOnCloudReportSummaryItemBase);\nexport { OcpOnCloudReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpOnCloudReportItems, } from 'utils/getComputedOcpOnCloudReportItems';\nimport { styles } from './ocpOnCloudReportSummaryItems.styles';\nclass OcpOnCloudReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpOnCloudReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpOnCloudReportSummaryItems = translate()(OcpOnCloudReportSummaryItemsBase);\nexport { OcpOnCloudReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpOnCloudReportSummaryTrend.styles';\nconst OcpOnCloudReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpOnCloudReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpOnCloudReportSummaryTrend.styles';\nconst OcpOnCloudReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpOnCloudReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                derivedCost,\n                infrastructureCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            if (previousCostData) {\n                const [start] = getMonthRangeString(previousCostData, 'chart.cost_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousCostData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentCostData) {\n                const [start] = getMonthRangeString(currentCostData, 'chart.cost_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentCostData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousInfrastructureCostData) {\n                const [start] = getMonthRangeString(previousInfrastructureCostData, 'chart.cost_infrastructure_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousInfrastructureCostData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentInfrastructureCostData) {\n                const [start] = getMonthRangeString(currentInfrastructureCostData, 'chart.cost_infrastructure_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentInfrastructureCostData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousCostData,\n                            name: 'previousCost',\n                            show: true,\n                            style: chartStyles.previousCostData,\n                        },\n                        {\n                            data: currentCostData,\n                            name: 'currentCost',\n                            show: true,\n                            style: chartStyles.currentCostData,\n                        },\n                        {\n                            data: previousInfrastructureCostData,\n                            name: 'previousInfrastructureCost',\n                            show: true,\n                            style: chartStyles.previousInfrastructureCostData,\n                        },\n                        {\n                            data: currentInfrastructureCostData,\n                            name: 'currentInfrastructureCost',\n                            show: true,\n                            style: chartStyles.currentInfrastructureCostData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `usage-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow, title } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), responsive: false, style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: width > 400 ? containerHeight : containerHeight + 75 } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum && chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","var parse = require('../parse/index.js')\n\n/**\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the month\n *\n * @example\n * // Which month is 29 February 2012?\n * var result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\nfunction getMonth (dirtyDate) {\n  var date = parse(dirtyDate)\n  var month = date.getMonth()\n  return month\n}\n\nmodule.exports = getMonth\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { transformAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { AwsReportSummary, AwsReportSummaryAlt, AwsReportSummaryDetails, AwsReportSummaryItem, AwsReportSummaryItems, AwsReportSummaryTrend, } from 'components/reports/awsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/awsDashboard';\nimport { awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './awsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/aws?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const currentData = transformAwsReport(currentReport, trend.type);\n            const previousData = transformAwsReport(previousReport, trend.type);\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryTrend, { containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, isUsageFirst, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('aws_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('aws_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(AwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'aws', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDashboardWidgetBase));\nexport { AwsDashboardWidget, AwsDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst AwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(AwsDashboardBase));\nexport default AwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { transformAzureReport } from 'components/charts/commonChart/chartUtils';\nimport { AzureReportSummary, AzureReportSummaryAlt, AzureReportSummaryDetails, AzureReportSummaryItem, AzureReportSummaryItems, AzureReportSummaryTrend, } from 'components/reports/azureReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { azureDashboardActions, azureDashboardSelectors, } from 'store/azureDashboard';\nimport { azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './azureDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AzureDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/azure?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const currentData = transformAzureReport(currentReport, trend.type);\n            const previousData = transformAzureReport(previousReport, trend.type);\n            const units = this.getUnits();\n            return (React.createElement(AzureReportSummaryTrend, { containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }), units: units }));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, isUsageFirst, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(AzureReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, units: units, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AzureReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('azure_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('azure_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(AzureReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, reportType, tabsReport, topItems, } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(AzureReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value\n                            ? tabsReport.meta.total.usage.value\n                            : tabsReport.meta.total.usage, units: details.units ? details.units : reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, reportType } = this.props;\n            if (details.units) {\n                return details.units;\n            }\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(AzureReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'azure', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AzureDashboardWidgetBase));\nexport { AzureDashboardWidget, AzureDashboardWidgetBase, };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureDashboardSelectors } from 'store/azureDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\nconst AzureDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(AzureDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(AzureDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = translate()(connect(mapStateToProps, {})(AzureDashboardBase));\nexport default AzureDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 275,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { transformOcpReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpReportSummary, OcpReportSummaryAlt, OcpReportSummaryDetails, OcpReportSummaryItem, OcpReportSummaryItems, OcpReportSummaryTrend, OcpReportSummaryUsage, } from 'components/reports/ocpReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const reportItem = reportType === \"cost\" /* cost */ ? 'cost' : 'usage';\n            const currentUsageData = transformOcpReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const currentInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const previousInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(OcpReportSummaryTrend, { containerHeight: containerHeight, currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title })) : (React.createElement(OcpReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, isUsageFirst, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestFormatOptions: details.requestFormatOptions, requestLabel: this.getDetailsLabel(details.requestKey, units), showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('ocp_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('ocp_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                        ? reportItem.cost\n                        : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id } = this.props;\n            const tab = availableTabs[tabIndex];\n            this.props.updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, widgetId } = this.props;\n        this.props.updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDashboardWidgetBase));\nexport { OcpDashboardWidget, OcpDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst OcpDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(OcpDashboardBase));\nexport default OcpDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnCloudQuery';\nimport { transformOcpOnCloudReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpOnCloudReportSummary, OcpOnCloudReportSummaryAlt, OcpOnCloudReportSummaryDetails, OcpOnCloudReportSummaryItem, OcpOnCloudReportSummaryItems, OcpOnCloudReportSummaryTrend, OcpOnCloudReportSummaryUsage, } from 'components/reports/ocpOnCloudReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnCloudDashboardActions, ocpOnCloudDashboardSelectors, } from 'store/ocpOnCloudDashboard';\nimport { ocpOnCloudReportsSelectors } from 'store/ocpOnCloudReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './ocpOnCloudDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpOnCloudDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp-on-aws?${getQuery({\n                // Todo: replace ocp-on-aws with ocp-on-cloud\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const costReportType = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            const reportItem = costReportType ? 'infrastructureCost' : 'usage';\n            const currentUsageData = transformOcpOnCloudReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpOnCloudReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpOnCloudReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpOnCloudReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const units = this.getUnits();\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"instance_type\" /* instanceType */ ||\n                reportType === \"network\" /* network */ ||\n                reportType === \"storage\" /* storage */) ? (React.createElement(OcpOnCloudReportSummaryTrend, { containerHeight: containerHeight, currentData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) })) : (React.createElement(OcpOnCloudReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, isUsageFirst, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpOnCloudReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestFormatOptions: details.requestFormatOptions, requestLabel: this.getDetailsLabel(details.requestKey, units), showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpOnCloudReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            return t('ocp_on_cloud_dashboard.widget_subtitle', { month });\n        };\n        this.getSubTitleTooltip = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'DD');\n            const startDate = formatDate(startOfMonth(today), 'DD');\n            const year = getYear(today);\n            return t('ocp_on_cloud_dashboard.widget_subtitle_tooltip', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n                year,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpOnCloudReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpOnCloudReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.infrastructure_cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: isCostReport ? reportItem.infrastructureCost : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.infrastructure_cost\n                        ? unitLookupKey(currentReport.meta.total.infrastructure_cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpOnCloudReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), subTitleTooltip: this.getSubTitleTooltip(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp-on-aws', secondaryNav: true }); // Todo: replace ocp-on-aws with ocp-on-cloud\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpOnCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpOnCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpOnCloudReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpOnCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpOnCloudReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpOnCloudReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpOnCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpOnCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpOnCloudDashboardActions.changeWidgetTab,\n};\nconst OcpOnCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpOnCloudDashboardWidgetBase));\nexport { OcpOnCloudDashboardWidget, OcpOnCloudDashboardWidgetBase, };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnCloudDashboardSelectors } from 'store/ocpOnCloudDashboard';\nimport { OcpOnCloudDashboardWidget } from './ocpOnCloudDashboardWidget';\nconst OcpOnCloudDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpOnCloudDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(OcpOnCloudDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpOnCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpOnCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpOnCloudDashboard = translate()(connect(mapStateToProps, {})(OcpOnCloudDashboardBase));\nexport default OcpOnCloudDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n});\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { Popover, Tab, TabContent, Tabs, Title, TitleSize, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsDashboard from 'pages/awsDashboard/awsDashboard';\nimport AzureDashboard from 'pages/azureDashboard/azureDashboard';\nimport OcpDashboard from 'pages/ocpDashboard/ocpDashboard';\nimport OcpOnCloudDashboard from 'pages/ocpOnCloudDashboard/ocpOnCloudDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { awsProvidersQuery, azureProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { headerOverride, styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n        case \"ocpOnCloud\" /* ocpOnCloud */:\n            return 'ocpOnCloud';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            showPopover: false,\n        };\n        this.getAvailableTabs = () => {\n            const { awsProviders, azureProviders, ocpProviders } = this.props;\n            const availableTabs = [];\n            if (awsProviders &&\n                awsProviders.meta &&\n                awsProviders.meta.count &&\n                (ocpProviders && ocpProviders.meta && ocpProviders.meta.count)) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocpOnCloud\" /* ocpOnCloud */,\n                });\n            }\n            if (ocpProviders && ocpProviders.meta && ocpProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (awsProviders && awsProviders.meta && awsProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"aws\" /* aws */,\n                });\n            }\n            if (azureProviders && azureProviders.meta && azureProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"azure\" /* azure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: this.getTabTitle(tab) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"ocpOnCloud\" /* ocpOnCloud */) {\n                return activeTabKey === index ? React.createElement(OcpOnCloudDashboard, null) : null;\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                return activeTabKey === index ? React.createElement(OcpDashboard, null) : null;\n            }\n            else if (currentTab === \"aws\" /* aws */) {\n                return activeTabKey === index ? React.createElement(AwsDashboard, null) : null;\n            }\n            else if (currentTab === \"azure\" /* azure */) {\n                return activeTabKey === index ? React.createElement(AzureDashboard, null) : null;\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"aws\" /* aws */) {\n                return t('overview.aws');\n            }\n            else if (tab === \"azure\" /* azure */) {\n                return t('overview.azure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n            else if (tab === \"ocpOnCloud\" /* ocpOnCloud */) {\n                return t('overview.ocp_on_cloud');\n            }\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    render() {\n        const { awsProviders, awsProvidersError, awsProvidersFetchStatus, azureProviders, azureProvidersError, azureProvidersFetchStatus, ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || azureProvidersError || ocpProvidersError;\n        const isLoading = azureProvidersFetchStatus === 1 /* inProgress */ ||\n            awsProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = awsProviders !== undefined &&\n            awsProviders.meta !== undefined &&\n            awsProviders.meta.count === 0 &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = azureProviders !== undefined &&\n            azureProviders.meta !== undefined &&\n            azureProviders.meta.count === 0 &&\n            azureProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = ocpProviders !== undefined &&\n            ocpProviders.meta !== undefined &&\n            ocpProviders.meta.count === 0 &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { size: TitleSize['2xl'] },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp_on_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_on_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))))),\n                Boolean(showTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs(availableTabs)))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"aws\" /* azure */, azureProvidersQueryString);\n    const azureProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* azure */, azureProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersError,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(OverviewBase));\nexport default Overview;\n"],"sourceRoot":""}