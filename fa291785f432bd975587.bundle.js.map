{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/pages/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/pages/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/pages/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/pages/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/pages/details/azureDetails/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/pages/explorer/explorer.styles.ts","webpack://koku-ui/./src/components/charts/historicalExplorerChart/historicalExplorerChart.styles.ts","webpack://koku-ui/./src/components/charts/historicalExplorerChart/historicalExplorerChart.tsx","webpack://koku-ui/./src/pages/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/pages/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/explorer/explorerChart.tsx","webpack://koku-ui/./src/pages/explorer/dateRange.tsx","webpack://koku-ui/./src/pages/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/pages/explorer/explorerFilter.tsx","webpack://koku-ui/./src/pages/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/pages/explorer/explorerHeader.tsx","webpack://koku-ui/./src/pages/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/pages/explorer/explorerTable.tsx","webpack://koku-ui/./src/pages/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/pages/explorer/explorer.tsx","webpack://koku-ui/./src/pages/explorer/index.ts","webpack://koku-ui/./src/pages/overview/perspective.styles.ts","webpack://koku-ui/./src/pages/overview/perspective.tsx"],"names":["getUserAccessQuery","query","stringify","encode","indices","mapStateToProps","state","props","selectWidgets","azureCostOverview","widgets","CostOverview","withTranslation","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","location","search","filterBy","groupBy","newQuery","Object","assign","undefined","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","t","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","instance_type","resource_location","service_name","styles","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","cost","display","alignItems","costLabel","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costLabelDate","global_Color_200","header","justifyContent","global_spacer_sm","baseQuery","delta","filter","time_scope_units","time_scope_value","resolution","groupByOptions","label","value","DetailsHeaderBase","onGroupByClicked","providersError","this","showContent","meta","count","hasCost","total","style","Title","headingLevel","size","isDisabled","onItemClicked","options","showTags","Boolean","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","super","columns","rows","buildCostLink","group_by","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","toString","id","desc","push","cells","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","setState","sortBy","getEmptyState","values","filter_by","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","prevProps","currentReport","data","JSON","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","tagReport","option","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","showBulkSelect","showExport","showFilter","tagFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","hasCurrentMonthData","result","provider","current_month_data","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute","account","cluster","node","org_unit_id","project","region","service","chartContainer","paddingRight","chartContent","explorer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","grid","stroke","ticks","yAxisAlt","tickLabels","xAxis","HistoricalExplorerChart","containerRef","resizeObserver","noop","navToggle","hiddenSeries","Set","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","getTruncatedString","childName","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","datum","initResizeObserve","containerElement","current","ResizeObserver","window","handleResize","observe","unobserve","addEventListener","removeEventListener","insights","chrome","on","handleNavToggle","getAdjustedContainerHeight","adjustContainerHeight","containerHeight","adjustedContainerHeight","getChart","has","ChartBar","alignment","formatDatumValue","formatDatumOptions","CursorVoronoiContainer","createContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","left","right","top","getLegend","ChartLegend","gutter","responsive","handleLegendClick","setTimeout","clientWidth","domain","maxValue","forEach","s","max","y","getInteractiveLegendEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","x","tickValues","i","str","substr","maxChars","container","disable","labelComponent","ChartLegendTooltip","legendData","day","ref","Chart","containerComponent","getDomain","events","getEvents","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartThemeColor","ChartStack","ChartAxis","getTickValues","dependentAxis","global_spacer_2xl","chartSkeleton","costChart","legendSkeleton","titleContainer","trendChart","usageChart","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByOcpOptions","infrastructureAllCloudOptions","infrastructureAwsOptions","infrastructureAwsCloudOptions","infrastructureAzureOptions","infrastructureAzureCloudOptions","infrastructureGcpOptions","infrastructureOcpOptions","ocpOptions","getComputedReportItemType","perspective","getDateRange","dateRange","getDateRangeDefault","today","Date","end_date","format","start_date","setMonth","getMonth","startOfMonth","setDate","getDate","getPerspectiveDefault","getGroupByDefault","getGroupByOptions","getOrgReportPathsType","getReportType","getReportPathsType","getTagReportPathsType","isAwsAvailable","awsProviders","awsProvidersFetchStatus","userAccess","d","type","access","isAzureAvailable","azureProviders","azureProvidersFetchStatus","isGcpAvailable","gcpProviders","gcpsProvidersFetchStatus","isOcpAvailable","ocpProviders","ocpProvidersFetchStatus","ExplorerChartBase","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","date","xVal","month","yVal","parseFloat","units","getChartDatums","computedReportItemType","chartDatums","datums","Map","Array","from","padChartDatums","getChartTitle","getGroupBy","daily","groupByOrg","getGroupByOrg","getSkeleton","Skeleton","padDate","chartDatum","formatValue","ExplorerChartConnect","ExplorerChart","withRouter","DateRangeBase","isDateRangeOpen","getDropDownItems","DropdownItem","component","onClick","handleClick","getCurrentLabel","currentItem","handleSelect","handleToggle","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","DateRange","toolbarContainer","orgReportType","ExplorerFilterBase","orgReport","getDefaultDateRange","currentDateRange","handleDateRangeClick","fetchOrg","orgReportPathsType","orgReportFetchStatus","tagReportFetchStatus","ExplorerFilter","paddingLeft","perspectiveContainer","ExplorerHeaderBase","getDefaultPerspective","gcpProvidersFetchStatus","getPerspective","currentPerspective","_isAwsAvailable","_isAzureAvailable","_isGcpAvailable","_isOcpAvailable","handlePerspectiveClick","noProviders","showOrgs","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ocpProvidersQueryString","userAccessQueryString","userAccessError","userAccessFetchStatus","ExplorerHeader","overflowX","ExplorerTableBase","cellTransforms","nowrap","currentDate","mapId","mapIdDate","rowItem","get","set","sort","a","b","unshift","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","ExplorerToolbarConnect","ExplorerToolbar","Explorer","slice","perspectiveSelector","perspectiveLabel","PerspectiveBase","isPerspectiveOpen","Perspective"],"mappings":"mIACO,SAASA,EAAmBC,GAC/B,OAAO,IAAAC,WAAUD,EAAO,CAAEE,QAAQ,EAAOC,SAAS,M,iOCItD,MAAMC,GAAkB,SAAsB,CAACC,EAAOC,KAC3C,CACHC,cAAeC,EAAA,iBAAyCH,GACxDI,QAASD,EAAA,wBAAgDH,OAG3DK,GAAe,IAAAC,kBAAA,EAAkB,IAAAC,SAAQR,EAAiB,GAAzB,CAA6B,M,0BCNpE,MAAM,GAAkB,SAAsB,CAACC,EAAOC,KAC3C,CACHC,cAAeM,EAAA,iBAA2CR,GAC1DI,QAASI,EAAA,wBAAkDR,OAG7DS,GAAiB,IAAAH,kBAAA,EAAkB,IAAAC,SAAQ,EAAiB,GAAzB,CAA6B,MCEhEG,EAAa,kBACbC,EAAa,OACbC,EAAkB,QAElB,GAAkB,SAAsB,CAACZ,EAAOC,KAClD,MACMN,GADiB,QAAWkB,SAASC,QAErCC,GAAW,OAAgBpB,GAC3BqB,GAAU,OAAarB,GACvBsB,EAAWC,OAAOC,OAAOD,OAAOC,OAAO,GAAIxB,GAAQ,CAAE,CAAC,WAAmByB,IACzEC,GAAc,QAASJ,GACvBK,EAAS,kBAA6BtB,EAAOY,EAAiBD,EAAYU,GAC1EE,EAAc,uBAAkCvB,EAAOY,EAAiBD,EAAYU,GACpFG,EAAoB,6BAAwCxB,EAAOY,EAAiBD,EAAYU,GAChGI,GAAuB,OAAkB,MACzCC,EAAY,qBAAmC1B,EAAO,QAAqByB,GAC3EE,EAAuB,gCAA8C3B,EAAO,QAAqByB,GACvG,MAAO,CACHG,sBAAuB,kBAAoBvB,EAAc,CAAEU,SAAUA,EAAUC,QAASA,EAASM,OAAQA,IACzGO,YAAalC,EAAM,MACnBe,aACAoB,gBAAiB7B,EAAM8B,EAAE,4BACzBhB,WACAC,UACAgB,wBAAyB,kBAAoBvB,EAAgB,CAAEM,SAAUA,EAAUC,QAASA,IAC5FU,YACAC,uBACAM,aAAc,QACdtC,QACA0B,cACAC,SACAC,cACAC,oBACAb,aACAC,kBACAsB,mBAAoB,QACpBC,MAAOpB,MAGTqB,EAAqB,CACvBC,YAAa,kBCrDjB,GDuDkB,IAAA/B,kBAAA,EAAkB,IAAAC,SAAQ,EAAiB6B,EAAzB,CAA6C,O,8OExD1E,SAASE,EAAmBtB,EAAU,IACzC,OAAIA,EAAQuB,kBACD,oBAEPvB,EAAQwB,cACD,gBAEPxB,EAAQyB,kBACD,oBAEPzB,EAAQ0B,aACD,eAEJ,O,2DCVJ,MAAMC,EAAS,CAClBC,aAAc,CACVC,UAAW,QAEfC,QAAS,CACLC,cAAeC,EAAA,SACfC,WAAYD,EAAA,UAEhBE,oBAAqB,CACjBC,WAAYH,EAAA,SACZI,YAAaJ,EAAA,UAEjBK,WAAY,CACRC,gBAAiBC,EAAA,SACjBC,QAASC,EAAA,UAEbC,eAAgB,CACZP,WAAYH,EAAA,SACZI,YAAaJ,EAAA,W,+ECdd,MAAM,EAAS,CAClBW,KAAM,CACFC,QAAS,OACTC,WAAY,UAEhBC,UAAW,GACXC,UAAW,CACPC,UAAW,EACXC,aAAc,EACdb,YAAaK,EAAA,QAEjBS,cAAe,CACXC,SAAUC,EAAA,SACVC,MAAOC,EAAA,QAEXC,cAAe,CACXJ,SAAUC,EAAA,SACVC,MAAOG,EAAA,QAEXC,OAAQ,CACJb,QAAS,OACTc,eAAgB,gBAChBlB,QAASR,EAAA,OACTM,gBAAiBC,EAAA,QAErBpB,MAAO,CACHY,cAAe4B,EAAA,SCpBjBC,EAAY,CACdC,MAAO,OACPC,OAAQ,CACJC,iBAAkB,QAClBC,kBAAmB,EACnBC,WAAY,YAGdC,EAAiB,CACnB,CAAEC,MAAO,oBAAqBC,MAAO,qBACrC,CAAED,MAAO,eAAgBC,MAAO,gBAChC,CAAED,MAAO,oBAAqBC,MAAO,sBAGzC,MAAMC,UAA0B,cAC5B,SACI,MAAM,QAAErE,EAAO,iBAAEsE,EAAgB,UAAE5D,EAAS,eAAE6D,EAAc,OAAEjE,EAAM,EAAES,GAAMyD,KAAKvF,MAC3EwF,EAAcnE,IAAWiE,GAAkB7D,GAAaA,EAAUgE,MAAQhE,EAAUgE,KAAKC,MAAQ,EACjGC,EAAUtE,GAAUA,EAAOoE,MAAQpE,EAAOoE,KAAKG,OAASvE,EAAOoE,KAAKG,MAAMlC,MAAQrC,EAAOoE,KAAKG,MAAMlC,KAAKkC,MAC/G,OAAQ,kBAAoB,SAAU,CAAEC,MAAO,UAC3C,kBAAoB,MAAO,KACvB,kBAAoB,EAAAC,MAAO,CAAEC,aAAc,KAAMF,MAAO,QAAcG,KAAM,OAASlE,EAAE,6BACvF,kBAAoB,IAAS,CAAEO,mBAAoBA,EAAoBtB,QAASA,EAASkF,YAAaT,EAAaU,cAAeb,EAAkBc,QAASlB,EAAgBmB,UAAU,EAAMnE,mBATlL,WAUfoE,QAAQb,IAAiB,kBAAoB,MAAO,CAAEK,MAAO,QACzD,kBAAoB,EAAAC,MAAO,CAAEC,aAAc,KAAMF,MAAO,YAAkBG,KAAM,QAAS,QAAeL,EAAUtE,EAAOoE,KAAKG,MAAMlC,KAAKkC,MAAMT,MAAQ,IACvJ,kBAAoB,MAAO,CAAEU,MAAO,aAChC,kBAAoB,MAAO,CAAEA,MAAO,iBAAwB/D,EAAE,6BAC9D,kBAAoB,MAAO,CAAE+D,MAAO,kBAAwB,eAIhF,MAAM/F,GAAkB,SAAsB,CAACC,EAAOC,KAClD,MAAMoB,GAAc,QAASuD,GACvBnD,GAAuB,OAAkB,MAI/C,MAAO,CACHC,UAJc,qBAAmC1B,EAAO,QAAqByB,GAK7E8D,eAJmB,0BAAwCvF,EAAO,QAAqByB,GAKvFE,qBAJyB,gCAA8C3B,EAAO,QAAqByB,GAKnGJ,kBAGFkF,GAAgB,IAAAjG,kBAAA,EAAkB,IAAAC,SAAQR,EAAiB,GAAzB,CAA6BsF,I,4HCpD9D,MAAM,EAAS,CAClBmB,WAAY,CACRlD,gBAAiBC,EAAA,SACjBK,QAAS,OACTc,eAAgB,SAChBzB,WAAYwD,EAAA,SACZC,OAAQ,OACRC,MAAO,QAEXC,UAAW,CACPC,SAAU,YAEdC,cAAe,CACXC,OAAQC,EAAA,UAEZC,gBAAiB,CACb5C,MAAO6C,EAAA,SACP/C,SAAUgD,EAAA,WCFlB,MAAMC,UAAyB,cAC3B,YAAYnH,GACRoH,MAAMpH,GACNuF,KAAKxF,MAAQ,CACTsH,QAAS,GACTC,KAAM,IAEV/B,KAAKgC,cAAgB,CAACrC,EAAOtD,KACzB,MAAM,QAAEb,EAAO,MAAErB,GAAU6F,KAAKvF,MAC1BgB,EAAWC,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAIxB,GAASkC,GAAeA,IAAgBsD,GAAS,CAAE,CAAC,MAAmBtD,IAAiB,CAAE4F,SAAU,CAC3J,CAACzG,GAAUmE,KAEnB,MAAO,GAAG,+BAA+B,QAAclE,MAE3DuE,KAAKkC,UAAY,KACb,MAAM,cAAEC,EAAa,MAAEhI,EAAK,OAAE2B,EAAM,cAAEsG,EAAa,EAAE7F,GAAMyD,KAAKvF,MAChE,IAAKN,IAAU2B,EACX,OAEJ,MAAMuG,EAAYvF,EAAmB3C,EAAM8H,UACrCK,EAAgBtC,KAAKuC,mBACrBlC,GAAQ,QAAevE,GAAUA,EAAOoE,MAAQpE,EAAOoE,KAAKG,OAASvE,EAAOoE,KAAKG,MAAMlC,MAAQrC,EAAOoE,KAAKG,MAAMlC,KAAKkC,MACtHvE,EAAOoE,KAAKG,MAAMlC,KAAKkC,MAAMT,MAC7B,GACAkC,EAAUQ,EACV,CACE,CACI3F,MAAOJ,EAAE,mCAEb,CACII,MAAOJ,EAAE,sCAEb,CACIiG,QAAS,OACT7F,MAAOJ,EAAE,kCAAmC,CAAE8D,UAC9CoC,WAAY,CAAC,EAAAC,WAEjB,CACI/F,MAAO,KAGb,CACE,CACI6F,QAASH,EACT1F,MAAOJ,EAAE,kCAAmC,CAAEf,QAAS6G,IACvDI,WAAY,CAAC,EAAAC,WAEjB,CACI/F,MAAOJ,EAAE,sCAEb,CACIiG,QAAS,OACT7F,MAAOJ,EAAE,mCACTkG,WAAY,CAAC,EAAAC,WAEjB,CACI/F,MAAO,KAGboF,EAAO,IACS,OAA+B,CACjDjG,SACA6G,MAAOL,GAAiBD,IAEdO,KAAI,CAACC,EAAMC,KACrB,MAAMnD,EAAQkD,GAAuB,OAAfA,EAAKlD,MAAiBkD,EAAKlD,MAAQ,GACnDoD,EAAiB/C,KAAKgD,sBAAsBH,EAAMC,GAClD3E,EAAO6B,KAAKiD,aAAaJ,EAAMC,GAC/BI,EAAUlD,KAAKmD,WAAWN,GAChC,IAAIO,EAAO,kBAAoB,EAAAC,KAAM,CAAEC,GAAItD,KAAKgC,cAAcrC,EAAM4D,WAAYV,EAAKW,KAAO7D,GACxFA,IAAU,MAAM0C,KAAe1C,IAAU,MAAM2C,MAC/Cc,EAAOzD,GAEX,MAAM8D,EAAOZ,EAAKW,IAAMX,EAAKW,KAAOX,EAAKlD,MAAQ,kBAAoB,MAAO,CAAEW,MAAO,mBAA0BuC,EAAKW,IAAM,KAC1HzB,EAAK2B,KAAK,CACNC,MAAO,CACH,CACIhH,MAAQ,kBAAoB,MAAO,KAC/ByG,EACAK,IAER,CAAE9G,MAAO,kBAAoB,MAAO,KAAMoG,IAC1C,CAAEpG,MAAO,kBAAoB,MAAO,KAAMwB,IAC1C,CAAExB,MAAO,kBAAoB,MAAO,KAAMuG,KAE9CU,QAAQ,EACRf,OACAgB,SAAU1B,GAAkBC,QAAmExG,IAAlDwG,EAAc0B,MAAKC,GAAOA,EAAIP,KAAOX,EAAKW,UAG/F,MAAMQ,EAAc,CAChB,CACIC,YAAY,EACZN,MAAO,CACH,CACIlJ,MAAO,CAAEyJ,QAAS,GAClBvH,MAAQ,kBAAoB,EAAAwH,SAAU,KAClC,kBAAoB,MAAO,CAAE7D,MAAO,CAAE8D,UAAW,WAC7C,kBAAoB,EAAAC,QAAS,CAAE5D,KAAM,aAK7DT,KAAKsE,SAAS,CACVxC,UACAkC,cACAjC,OACAwC,OAAQ,MAGhBvE,KAAKmD,WAAcN,IACf,MAAM,QAAErH,EAAO,MAAErB,GAAU6F,KAAKvF,MAChC,OAAO,kBAAoB,IAAS,CAAEe,QAASA,EAASqH,KAAMA,EAAM1I,MAAOA,EAAOiB,gBAjHtE,WAmHhB4E,KAAKwE,cAAgB,KACjB,MAAM,MAAErK,EAAK,GAAQ6F,KAAKvF,MAC1B,IAAK,MAAMsJ,KAAOrI,OAAO+I,OAAOtK,EAAMuK,WAClC,GAAY,MAARX,EACA,OAAO,kBAAoB,IAAkB,CAAEzE,OAAQyE,EAAKY,YAAY,IAGhF,OAAQ,kBAAoB,EAAAC,WAAY,KACpC,kBAAoB,EAAAC,eAAgB,CAAEC,KAAM,OAC5C,kBAAoB,EAAAC,eAAgB,KAAMxI,EAAE,gCAEpDyD,KAAKuC,iBAAmB,KACpB,MAAM,MAAEpI,GAAU6F,KAAKvF,MACvB,IAAI6H,EACJ,IAAK,MAAM9G,KAAWE,OAAOsJ,KAAK7K,EAAM8H,UAAW,CAC/C,MAAMgD,EAAWzJ,EAAQ0J,QAAQ,KACjC,IAAkB,IAAdD,EAAiB,CACjB3C,EAAgB9G,EAAQ2J,UAAUF,EAAW,YAC7C,OAGR,OAAO3C,GAEXtC,KAAKgD,sBAAwB,CAACH,EAAMC,KAChC,MAAM,EAAEvG,GAAMyD,KAAKvF,MACbmF,GAAQ,QAAewF,KAAKC,IAAIxC,EAAK1E,KAAKkC,MAAMT,MAAQiD,EAAKyC,cAC7DC,EAAoC,OAAvB1C,EAAK2C,cAAyBJ,KAAKC,IAAIxC,EAAK2C,eAAeC,QAAQ,GAAK,EACrFC,IAAkC,IAAfH,GAAmC,SAAfA,GACvCI,EAAmC,OAAvB9C,EAAK2C,cACvB,IAAII,EAUJ,OATIF,IACAE,EAAe,eACY,OAAvB/C,EAAK2C,eAA0B3C,EAAKyC,YAAc,IAClDM,GAAgB,aAEO,OAAvB/C,EAAK2C,eAA0B3C,EAAKyC,YAAc,IAClDM,GAAgB,cAGnBD,EAIO,kBAAoB,MAAO,CAAEE,UAAW,0BAC5C,kBAAoB,MAAO,CAAEA,UAAWD,EAAcE,IAAK,yBAAyBhD,KAChF4C,EAAiBnJ,EAAE,UAAW,CAAEqD,MAAO2F,IAAgB,kBAAoB,IAAiB,MAC5FzE,QAAQ4E,GAAyC,OAAvB7C,EAAK2C,eAA0B3C,EAAKyC,YAAc,IAAO,kBAAoB,OAAQ,CAAEO,UAAW,gBAAiBvF,MAAO,YAAkBwF,IAAK,yBAAyBhD,MACpMhC,QAAQ4E,GAAyC,OAAvB7C,EAAK2C,eAA0B3C,EAAKyC,YAAc,IAAO,kBAAoB,OAAQ,CAAEO,UAAW,kBAAmBvF,MAAO5E,OAAOC,OAAOD,OAAOC,OAAO,GAAI,aAAmB,iBAAuBmK,IAAK,yBAAyBhD,OAClQ,kBAAoB,MAAO,CAAExC,MAAO,kBAAwBwF,IAAK,yBAAyBhD,MAAW,OAAsBlD,MARxH,WAWfI,KAAK+F,UAAY,KACb,MAAM,MAAE5L,GAAU6F,KAAKvF,OACjB,QAAEqH,GAAY9B,KAAKxF,MACzB,IAAIsI,GAAS,EACTkD,EAAY,EAAAC,gBAAA,IAChB,IAAK,MAAMH,KAAOpK,OAAOsJ,KAAK7K,EAAM+L,UAAW,CAC3C,IAAIC,EAAI,EACR,IAAK,MAAMC,KAAUtE,EAAS,CAC1B,GAAIsE,EAAO5D,UAAYsD,EAAK,CACxBE,EAAoC,QAAxB7L,EAAM+L,SAASJ,GAAiB,EAAAG,gBAAA,IAAsB,EAAAA,gBAAA,KAClEnD,EAAQqD,EAAI,EACZ,MAEJA,KAGR,OAAOrD,GAAS,EAAI,CAAEA,QAAOkD,aAAc,IAE/ChG,KAAKiD,aAAe,CAACJ,EAAMC,KACvB,MAAM,OAAEhH,EAAM,EAAES,GAAMyD,KAAKvF,MACrB0D,EAAOrC,GAAUA,EAAOoE,MAAQpE,EAAOoE,KAAKG,OAASvE,EAAOoE,KAAKG,MAAMlC,MAAQrC,EAAOoE,KAAKG,MAAMlC,KAAKkC,MACtGvE,EAAOoE,KAAKG,MAAMlC,KAAKkC,MAAMT,MAC7B,EACAyG,EAAwB,IAATlI,EAAaA,EAAKsH,QAAQ,IAAO5C,EAAK1E,KAAKkC,MAAMT,MAAQzB,EAAQ,KAAKsH,QAAQ,GACnG,OAAQ,kBAAoB,aAAgB,MACxC,QAAe5C,EAAK1E,KAAKkC,MAAMT,OAC/B,kBAAoB,MAAO,CAAEU,MAAO,kBAAwBwF,IAAK,cAAchD,KAAWvG,EAAE,kBAAmB,CAC3GqD,MAAOyG,OAGnBrG,KAAKsG,eAAiB,CAACC,EAAOC,EAAYC,KACtC,MAAM,WAAEC,GAAe1G,KAAKvF,MAC5B,IAAIsH,EACA4E,EAAQ,IACG,IAAXF,EACA1E,EAAO/B,KAAKxF,MAAMuH,KAAKa,KAAIgE,IACvBA,EAAI/C,SAAW2C,EACRI,MAIX7E,EAAO,IAAI/B,KAAKxF,MAAMuH,MACtBA,EAAK0E,GAAO5C,SAAW2C,EACvBG,EAAQ,CAAC5E,EAAK0E,GAAO5D,OAEzB7C,KAAKsE,SAAS,CAAEvC,SAAQ,KAChB2E,GACAA,EAAWC,EAAOH,OAI9BxG,KAAK6G,aAAe,CAACN,EAAOzD,EAAOkD,KAC/B,MAAM,OAAEc,GAAW9G,KAAKvF,OAClB,QAAEqH,GAAY9B,KAAKxF,MACrBsM,GAGAA,EAFgBhF,EAAQgB,EAAQ,GAAGN,QACXwD,IAAc,EAAAC,gBAAA,MAI9CjG,KAAKsG,eAAiBtG,KAAKsG,eAAeS,KAAK/G,MAC/CA,KAAK6G,aAAe7G,KAAK6G,aAAaE,KAAK/G,MAE/C,oBACIA,KAAKkC,YAET,mBAAmB8E,GACf,MAAM,MAAE7M,EAAK,OAAE2B,EAAM,cAAEsG,GAAkBpC,KAAKvF,MACxCwM,EAAgBnL,GAAUA,EAAOoL,KAAOC,KAAK/M,UAAU0B,EAAOoL,MAAQ,GACtEE,EAAiBJ,EAAUlL,QAAUkL,EAAUlL,OAAOoL,KAAOC,KAAK/M,UAAU4M,EAAUlL,OAAOoL,MAAQ,IACvG,QAASF,EAAU7M,UAAW,QAASA,IACvCiN,IAAmBH,GACnBD,EAAU5E,gBAAkBA,GAC5BpC,KAAKkC,YAGb,SACI,MAAM,UAAEmF,GAAcrH,KAAKvF,OACrB,QAAEqH,EAAO,YAAEkC,EAAW,KAAEjC,GAAS/B,KAAKxF,MAC5C,OAAQ,kBAAoB,aAAgB,KACxC,kBAAoB,EAAA8M,MAAO,CAAE,aAAc,gBAAiBC,cAAc,EAAO5D,MAAO7B,EAAS+D,UAAW,gBAAiB9D,KAAMsF,EAAYrD,EAAcjC,EAAMwC,OAAQvE,KAAK+F,YAAayB,SAAUH,OAAYzL,EAAYoE,KAAKsG,eAAgBQ,OAAQ9G,KAAK6G,aAAcY,eAAgB,YAC3R,kBAAoB,EAAAC,YAAa,MACjC,kBAAoB,EAAAC,UAAW,OACnC7G,QAAwB,IAAhBiB,EAAK6F,SAAiB,kBAAoB,MAAO,CAAEtH,MAAO,cAAqBN,KAAKwE,mBAGxG,MAAMqD,GAAe,IAAA/M,kBAAA,CAAkB8G,G,sCCtQvC,MAAMkG,GAAgB,MAChB,GAAqB,QACpB,MAAMC,WAA2B,cACpC,cACIlG,SAASmG,WACThI,KAAKiI,aAAe,GACpBjI,KAAKxF,MAAQkB,OAAOC,OAAO,GAAIqE,KAAKiI,cACpCjI,KAAKkI,mBAAqB,KACtB,MAAM,UAAEC,EAAS,GAAQnI,KAAKvF,MACxBmG,EAAU,CACZ,CACIwC,KAAM7G,EAAE,sCACRuJ,IAAK,qBAET,CAAE1C,KAAM7G,EAAE,iCAAkCuJ,IAAK,gBACjD,CACI1C,KAAM7G,EAAE,sCACRuJ,IAAK,qBAET,CAAE1C,KAAM7G,EAAE,wBAAyBuJ,IAAK,OAE5C,OAAOqC,GAAaA,EAAUjB,MAAQiB,EAAUjB,KAAKU,OAC/ChH,EACAA,EAAQtB,QAAO8I,GAAUA,EAAOtC,MAAQ,QAGtD,oBACI,MAAM,SAAEuC,EAAQ,YAAExM,GAAgBmE,KAAKvF,MACvC4N,EAAS,GAAoBP,GAAejM,GAC5CmE,KAAKsE,SAAS,CACVgE,gBAAiBtI,KAAKkI,uBAG9B,mBAAmBlB,GACf,MAAM,SAAEqB,EAAQ,MAAElO,EAAK,YAAE0B,EAAW,UAAEsM,GAAcnI,KAAKvF,MACrDN,KAAU,QAAQA,EAAO6M,EAAU7M,QACnCkO,EAAS,GAAoBP,GAAejM,IAE3C,QAAQsM,EAAWnB,EAAUmB,YAC9BnI,KAAKsE,SAAS,CACVgE,gBAAiBtI,KAAKkI,uBAIlC,SACI,MAAM,QAAE1M,EAAO,cAAE2G,EAAa,iBAAEoG,EAAgB,aAAEC,EAAY,WAAEC,EAAU,eAAEC,EAAc,gBAAEC,EAAe,cAAEC,EAAa,gBAAEC,EAAe,WAAEhL,EAAU,MAAE1D,EAAK,cAAEiI,EAAa,UAAE+F,GAAenI,KAAKvF,OAC7L,gBAAE6N,GAAoBtI,KAAKxF,MACjC,OAAQ,kBAAoB,IAAa,CAAE8N,gBAAiBA,EAAiB9M,QAASA,EAAS2G,cAAeA,EAAeoG,iBAAkBA,EAAkBC,aAAcA,EAAcC,WAAYA,EAAYC,eAAgBA,EAAgBC,gBAAiBA,EAAiBC,cAAeA,EAAeC,gBAAiBA,EAAiBhL,WAAYA,EAAY1D,MAAOA,EAAOiI,cAAeA,EAAe0G,gBAAgB,EAAMC,YAAY,EAAMC,YAAY,EAAMb,UAAWA,KAIxe,MAAM,IAAkB,SAAsB,CAAC3N,EAAOC,KAElD,MAAMoB,GAAc,QAAS,CACzByD,OAAQ,CACJG,WAAY,UACZF,iBAAkB,QAClBC,kBAAmB,KAGrB2I,EAAY,gBAAuB3N,EAAO,GAAoBsN,GAAejM,GAEnF,MAAO,CACHA,cACAoN,eAHmB,2BAAkCzO,EAAO,GAAoBsN,GAAejM,GAI/FsM,gBAGFvL,GAAqB,CACvByL,SAAU,UAERa,IAAwB,IAAAnO,SAAQ,GAAiB6B,GAAzB,CAA6CmL,IACrEoB,IAAiB,IAAArO,kBAAA,CAAkBoO,IC3DnC,GAAY,CACd7J,MAAO,OACPC,OAAQ,CACJ8J,MAAO,GACPC,OAAQ,EACR5J,WAAY,UACZF,iBAAkB,QAClBC,kBAAmB,GAEvBkF,UAAW,GACXzC,SAAU,CACNlF,kBAAmB,KAEvBmJ,SAAU,CACN/H,KAAM,SAGRhD,GAAa,OACb,GAAkB,QACxB,MAAMmO,WAAqB,cACvB,YAAYC,EAAYC,GACpB3H,MAAM0H,EAAYC,GAClBxJ,KAAKiI,aAAe,CAChBnG,QAAS,GACTK,eAAe,EACfsH,mBAAmB,EACnB1H,KAAM,GACNK,cAAe,IAEnBpC,KAAKxF,MAAQkB,OAAOC,OAAO,GAAIqE,KAAKiI,cACpCjI,KAAK0J,iBAAmB,KACpB,MAAM,MAAEvP,EAAK,OAAE2B,GAAWkE,KAAKvF,MACzB4H,EAAYvF,EAAmB3C,EAAM8H,UACrCK,GAAgB,QAAiBnI,GACvC,OAAO,OAA+B,CAClC2B,SACA6G,MAAOL,GAAiBD,KAGhCrC,KAAK2J,eAAkBC,IACnB,MAAM,cAAEzH,EAAa,kBAAEsH,EAAiB,cAAErH,GAAkBpC,KAAKxF,OAC3D,MAAEL,EAAK,OAAE2B,GAAWkE,KAAKvF,MACzB4H,EAAYvF,EAAmB3C,EAAM8H,UACrCK,GAAgB,QAAiBnI,GACjCsO,EAAa3M,GAAUA,EAAOoE,KAAOpE,EAAOoE,KAAKC,MAAQ,EAC/D,OAAQ,kBAAoB,IAAa,CAAE0J,YAAa1H,GAAiBC,EAAcwF,SAAWa,IAAemB,EAAchC,OAAS,EAAGpM,QAAS8G,EAAgB,GAAG,MAAYA,IAAkBD,EAAWuB,OAAQ6F,EAAmB9C,MAAOvE,EAAe0H,QAAS9J,KAAK+J,uBAAwB5P,MAAOA,EAAOiB,gBAAiB,MAE1U4E,KAAKgK,cAAgB,CAACC,GAAW,KAC7B,MAAM,OAAEnO,GAAWkE,KAAKvF,MAClB0F,EAAQrE,GAAUA,EAAOoE,KAAOpE,EAAOoE,KAAKC,MAAQ,EACpDiJ,EAAQtN,GAAUA,EAAOoE,MAAQpE,EAAOoE,KAAKZ,QAAUxD,EAAOoE,KAAKZ,OAAO8J,MAC1EtN,EAAOoE,KAAKZ,OAAO8J,MACnB,GAAU9J,OAAO8J,MAIjBc,GAHSpO,GAAUA,EAAOoE,MAAQpE,EAAOoE,KAAKZ,QAAUxD,EAAOoE,KAAKZ,OAAO+J,OAC3EvN,EAAOoE,KAAKZ,OAAO+J,OACnB,GAAU/J,OAAO+J,QACDD,EAAQ,EAC9B,OAAQ,kBAAoB,EAAAe,WAAY,CAAEC,WAAYH,EAAUI,UAAWlK,EAAOmK,gBAAiBtK,KAAKuK,oBAAqBC,UAAWxK,KAAKyK,cAAeP,KAAMA,EAAMQ,QAAStB,EAAOuB,QAASV,EAAW,EAAAW,kBAAA,OAA2B,EAAAA,kBAAA,IAAuBC,SAAU,8CAE5Q7K,KAAK8K,SAAW,KACZ,MAAM,MAAE3Q,EAAK,OAAE2B,EAAM,kBAAEE,GAAsBgE,KAAKvF,OAC5C,cAAE0H,EAAa,cAAEC,GAAkBpC,KAAKxF,MACxC6H,EAAYvF,EAAmB3C,EAAM8H,UACrCK,GAAgB,QAAiBnI,GACvC,OAAQ,kBAAoB0N,EAAc,CAAErM,QAAS8G,EAAgB,GAAG,MAAYA,IAAkBD,EAAWF,cAAeA,EAAekF,UAAiC,IAAtBrL,EAA0C0K,WAAY1G,KAAK+K,eAAgBjE,OAAQ9G,KAAKgL,WAAY7Q,MAAOA,EAAO2B,OAAQA,EAAQsG,cAAeA,KAE/SpC,KAAKiL,WAAcrB,IACf,MAAM,MAAEzP,EAAK,OAAE2B,GAAWkE,KAAKvF,OACzB,cAAE0H,EAAa,cAAEC,GAAkBpC,KAAKxF,MACxC6H,EAAYvF,EAAmB3C,EAAM8H,UACrCK,GAAgB,QAAiBnI,GACjCsO,EAAa3M,GAAUA,EAAOoE,KAAOpE,EAAOoE,KAAKC,MAAQ,EAC/D,OAAQ,kBAAoBgJ,GAAgB,CAAE3N,QAAS8G,EAAgB,GAAG,MAAYA,IAAkBD,EAAWF,cAAeA,EAAeoG,iBAA2C,IAAzBqB,EAAchC,SAAkBzF,GAA0C,IAAzBC,EAAcwF,OAAeY,aAAcoB,EAAchC,OAAQa,WAAYA,EAAYC,eAAgB1I,KAAKkL,mBAAoBvC,gBAAiB3I,KAAKmL,sBAAuBvC,cAAe5I,KAAKoL,kBAAmBvC,gBAAiB7I,KAAKqL,oBAAqBxN,WAAYmC,KAAKgK,gBAAiB7P,MAAOA,EAAOiI,cAAeA,KAExhBpC,KAAKkL,mBAAsBI,IACvB,MAAM,cAAEnJ,GAAkBnC,KAAKxF,MAChB,SAAX8Q,EACAtL,KAAKsE,SAAS,CAAEnC,eAAe,EAAOC,cAAe,KAErC,SAAXkJ,EACLtL,KAAKsE,SAAS,CACVnC,eAAe,EACfC,cAAepC,KAAK0J,qBAGR,QAAX4B,GACLtL,KAAKsE,SAAS,CAAEnC,eAAgBA,EAAeC,cAAe,MAGtEpC,KAAK+J,uBAA0BnG,IAC3B5D,KAAKsE,SAAS,CAAEmF,kBAAmB7F,KAEvC5D,KAAKmL,sBAAwB,KACzBnL,KAAKsE,SAAS,CAAEmF,mBAAmB,KAEvCzJ,KAAKoL,kBAAoB,CAACG,EAAYC,KAClC,MAAM,QAAEC,EAAO,MAAEtR,GAAU6F,KAAKvF,MAC1BiR,GAAgB,QAAevR,EAAOoR,EAAYC,GACxDC,EAAQE,QAAQ3L,KAAK4L,iBAAiBF,GAAe,KAEzD1L,KAAKqL,oBAAsB,CAACE,EAAYC,KACpC,MAAM,QAAEC,EAAO,MAAEtR,GAAU6F,KAAKvF,MAC1BiR,GAAgB,QAAkBvR,EAAOoR,EAAYC,GAC3DC,EAAQE,QAAQ3L,KAAK4L,iBAAiBF,GAAe,KAEzD1L,KAAK6L,mBAAqBrQ,IACtB,MAAM,QAAEiQ,EAAO,MAAEtR,GAAU6F,KAAKvF,MAC1BqR,EAAatQ,EACbC,EAAWC,OAAOC,OAAOD,OAAOC,OAAO,GAAIwL,KAAK4E,MAAM5E,KAAK/M,UAAUD,KAAU,CAAEuK,eAAW9I,EAAWqG,SAAU,CAC/G,CAAC6J,GAAa,KACf5F,SAAU,CAAE/H,KAAM,UACzBsN,EAAQE,QAAQ3L,KAAK4L,iBAAiBnQ,GAAU,IAChDuE,KAAKsE,SAAS,CAAEnC,eAAe,EAAOC,cAAe,MAEzDpC,KAAKuK,oBAAsB,CAACyB,EAAQtB,KAChC,MAAM,QAAEe,EAAO,MAAEtR,GAAU6F,KAAKvF,MAC1BgB,EAAWC,OAAOC,OAAO,GAAIwL,KAAK4E,MAAM5E,KAAK/M,UAAUD,KAC7DsB,EAAS6D,OAAS5D,OAAOC,OAAOD,OAAOC,OAAO,GAAIxB,EAAMmF,QAAS,CAAE8J,MAAOsB,IAC1E,MAAMgB,EAAgB1L,KAAK4L,iBAAiBnQ,GAAU,GACtDgQ,EAAQE,QAAQD,IAEpB1L,KAAK+K,eAAiB,CAACpE,EAAOH,GAAa,KACvC,MAAM,cAAErE,EAAa,cAAEC,GAAkBpC,KAAKxF,MAC9C,IAAIyR,EAAW,IAAK9J,EAAgBnC,KAAK0J,mBAAqBtH,GAC1DuE,GAASA,EAAMiB,OAAS,IACpBpB,EACAG,EAAM/D,KAAIC,GAAQoJ,EAASvI,KAAKb,KAGhC8D,EAAM/D,KAAIC,IACNoJ,EAAWA,EAAS3M,QAAOyE,GAAOA,EAAIP,KAAOX,EAAKW,SAI9DxD,KAAKsE,SAAS,CAAEnC,eAAe,EAAOC,cAAe6J,KAEzDjM,KAAKyK,cAAgB,CAAClE,EAAO2F,KACzB,MAAM,QAAET,EAAO,MAAEtR,EAAK,OAAE2B,GAAWkE,KAAKvF,MAClC2O,EAAQtN,GAAUA,EAAOoE,MAAQpE,EAAOoE,KAAKZ,QAAUxD,EAAOoE,KAAKZ,OAAO8J,MAC1EtN,EAAOoE,KAAKZ,OAAO8J,MACnB,GAAU9J,OAAO8J,MACjBC,EAAS6C,EAAa9C,EAAQA,EAC9B3N,EAAWC,OAAOC,OAAO,GAAIwL,KAAK4E,MAAM5E,KAAK/M,UAAUD,KAC7DsB,EAAS6D,OAAS5D,OAAOC,OAAOD,OAAOC,OAAO,GAAIxB,EAAMmF,QAAS,CAAE+J,WACnE,MAAMqC,EAAgB1L,KAAK4L,iBAAiBnQ,GAC5CgQ,EAAQE,QAAQD,IAEpB1L,KAAKgL,WAAa,CAACmB,EAAUC,KACzB,MAAM,QAAEX,EAAO,MAAEtR,GAAU6F,KAAKvF,MAC1BgB,EAAWC,OAAOC,OAAO,GAAIwL,KAAK4E,MAAM5E,KAAK/M,UAAUD,KAC7DsB,EAASyK,SAAW,GACpBzK,EAASyK,SAASiG,GAAYC,EAAkB,MAAQ,OACxD,MAAMV,EAAgB1L,KAAK4L,iBAAiBnQ,GAC5CgQ,EAAQE,QAAQD,IAGpB1L,KAAKqM,oBAAsB,KACvB,MAAM,UAAEnQ,GAAc8D,KAAKvF,MAC3B,IAAI6R,GAAS,EACb,GAAIpQ,GAAaA,EAAUgL,KACvB,IAAK,MAAMqF,KAAYrQ,EAAUgL,KAC7B,GAAIqF,EAASC,mBAAoB,CAC7BF,GAAS,EACT,MAIZ,OAAOA,GAEXtM,KAAKyM,aAAe,KAChB,MAAM,MAAEtS,EAAK,SAAEkB,EAAQ,YAAEwB,EAAW,QAAE4O,EAAO,YAAE5P,GAAgBmE,KAAKvF,MAC/DY,EAASC,OAQVuB,EAAY,GAAiB1B,GAAYU,GAPzC4P,EAAQE,QAAQ3L,KAAK4L,iBAAiB,CAClClH,UAAWvK,EAAQA,EAAMuK,eAAY9I,EACrCqG,SAAU9H,EAAQA,EAAM8H,cAAWrG,EACnCsK,SAAU,CAAE/H,KAAM,YAO9B6B,KAAKkL,mBAAqBlL,KAAKkL,mBAAmBnE,KAAK/G,MACvDA,KAAK+J,uBAAyB/J,KAAK+J,uBAAuBhD,KAAK/G,MAC/DA,KAAKmL,sBAAwBnL,KAAKmL,sBAAsBpE,KAAK/G,MAC7DA,KAAKoL,kBAAoBpL,KAAKoL,kBAAkBrE,KAAK/G,MACrDA,KAAKqL,oBAAsBrL,KAAKqL,oBAAoBtE,KAAK/G,MACzDA,KAAKuK,oBAAsBvK,KAAKuK,oBAAoBxD,KAAK/G,MACzDA,KAAK+K,eAAiB/K,KAAK+K,eAAehE,KAAK/G,MAC/CA,KAAKyK,cAAgBzK,KAAKyK,cAAc1D,KAAK/G,MAC7CA,KAAKgL,WAAahL,KAAKgL,WAAWjE,KAAK/G,MAE3C,oBACIA,KAAKyM,eAET,mBAAmBzF,EAAW0F,GAC1B,MAAM,SAAErR,EAAQ,OAAES,EAAM,YAAEC,EAAW,YAAEF,GAAgBmE,KAAKvF,OACtD,cAAE2H,GAAkBpC,KAAKxF,MACzBiB,EAAWuL,EAAUnL,cAAgBA,EACrC8Q,GAAY7Q,IAAWC,EACvB6Q,GAAcvR,EAASC,OACvB2Q,EAAWS,EAAUtK,gBAAkBA,GACzC3G,GAAYkR,GAAYC,GAAcX,IACtCjM,KAAKyM,eAGb,iBAAiBtS,EAAO0S,GAAQ,GAC5B,MAAM,QAAEpB,GAAYzL,KAAKvF,MAKzB,OAHIoS,IACA1S,EAAMmF,OAAS5D,OAAOC,OAAOD,OAAOC,OAAO,GAAIxB,EAAMmF,QAAS,CAAE+J,OAAQ,GAAU/J,OAAO+J,UAEtF,GAAGoC,EAAQpQ,SAASyR,aAAY,QAAc3S,KAEzD,SACI,MAAM,UAAE+B,EAAS,qBAAEC,EAAoB,MAAEhC,EAAK,OAAE2B,EAAM,YAAEC,EAAW,kBAAEC,EAAiB,EAAEO,GAAMyD,KAAKvF,MAC7F4H,EAAYvF,EAAmB3C,EAAM8H,UACrC2H,EAAgB5J,KAAK0J,mBACrB/M,EAAQJ,EAAE,4BAEhB,GAAIR,EACA,OAAO,kBAAoB,IAAc,CAAEY,MAAOA,IAEjD,GAA6B,IAAzBR,GAAqE,IAAtBH,EACpD,OAAO,kBAAoB,IAAS,CAAEW,MAAOA,IAE5C,GAA6B,IAAzBR,GAAmE,IAAtBH,EAAwC,CAG1F,GADoBE,GAAaA,EAAUgE,MAAiC,IAAzBhE,EAAUgE,KAAKC,OAAwC,IAAzBhE,EAE7E,OAAO,kBAAoB,IAAa,CAAEM,aAAc,QAAqBE,MAAOA,IAExF,IAAKqD,KAAKqM,sBACN,OAAO,kBAAoB,IAAQ,CAAE1P,MAAOA,IAGpD,OAAQ,kBAAoB,MAAO,CAAE2D,MAAOnD,EAAOC,cAC/C,kBAAoB2D,EAAe,CAAEvF,QAAS6G,EAAWvC,iBAAkBE,KAAK6L,mBAAoB/P,OAAQA,IAC5G,kBAAoB,MAAO,CAAEwE,MAAOnD,EAAOG,SACvC0C,KAAKiL,WAAWrB,GAChB5J,KAAK2J,eAAeC,GACE,IAAtB5N,EAA4C,kBAAoB,IAAS,MAAU,kBAAoB,aAAgB,KACnH,kBAAoB,MAAO,CAAEsE,MAAOnD,EAAOe,gBAAkB8B,KAAK8K,YAClE,kBAAoB,MAAO,CAAExK,MAAOnD,EAAOO,qBACvC,kBAAoB,MAAO,CAAE4C,MAAOnD,EAAOU,YAAcmC,KAAKgK,eAAc,SAIpG,MAAM,IAAkB,SAAsB,CAACxP,EAAOC,KAClD,MAAMsS,GAAiB,QAAW1R,SAASC,QACrCnB,EAAQ,CACVkF,MAAO,OACPC,OAAQ5D,OAAOC,OAAOD,OAAOC,OAAO,GAAI,GAAU2D,QAASyN,EAAezN,QAC1EoF,UAAWqI,EAAerI,WAAa,GAAUA,UACjDzC,SAAU8K,EAAe9K,UAAY,GAAUA,SAC/CiE,SAAU6G,EAAe7G,UAAY,GAAUA,UAE7CrK,GAAc,QAAS1B,GACvB2B,EAAS,kBAA6BtB,EAAO,GAAiBW,GAAYU,GAC1EE,EAAc,uBAAkCvB,EAAO,GAAiBW,GAAYU,GACpFG,EAAoB,6BAAwCxB,EAAO,GAAiBW,GAAYU,GAChGI,GAAuB,OAAkB,MAG/C,MAAO,CACHC,UAHc,qBAAmC1B,EAAO,QAAqByB,GAI7EE,qBAHyB,gCAA8C3B,EAAO,QAAqByB,GAInG9B,QACA0B,cACAC,SACAC,cACAC,wBAGF,GAAqB,CACvBa,YAAa,kBCxSjB,ID0Se,IAAA/B,kBAAf,EAAiC,IAAAC,SAAQ,GAAiB,GAAzB,CAA6CuO,M,mQE3SvE,SAASxM,EAAmBtB,EAAU,IACzC,OAAIA,EAAQwR,QACD,UAEPxR,EAAQyR,QACD,UAEPzR,EAAQwB,cACD,gBAEPxB,EAAQ0R,KACD,OAEP1R,EAAQ2R,YACD,cAEP3R,EAAQ4R,QACD,UAEP5R,EAAQ6R,OACD,SAEP7R,EAAQyB,kBACD,oBAEPzB,EAAQ8R,QACD,UAEP9R,EAAQ0B,aACD,eAEP1B,EAAQuB,kBACD,oBAEJ,O,gDC/BJ,MAAMI,EAAS,CAClBoQ,eAAgB,CACZzP,gBAAiBC,EAAA,SACjBJ,WAAYH,EAAA,SACZI,YAAaJ,EAAA,SACbgQ,aAAchQ,EAAA,SACdD,cAAeC,EAAA,SACfC,WAAYD,EAAA,UAEhBiQ,aAAc,CACVhQ,WAAYD,EAAA,UAEhBkQ,SAAU,CACNrQ,UAAW,QAEfK,oBAAqB,CACjBC,WAAYH,EAAA,SACZI,YAAaJ,EAAA,UAEjBK,WAAY,CACRC,gBAAiBC,EAAA,SACjBC,QAASC,EAAA,UAEbC,eAAgB,CACZP,WAAYH,EAAA,SACZI,YAAaJ,EAAA,UAEjBmQ,aAAc,CACVpQ,cAAeC,EAAA,SACfC,WAAYD,EAAA,W,sKC1Bb,MAAMoQ,EAAc,CAEvBC,WAAY,CACRC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,SACAC,EAAA,UAEJC,MAAO,CACHC,UAAW,CACPrQ,QAAS,IAEbsQ,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,SAGhBE,SAAU,CACNC,WAAY,CACR/P,SAAU,IAGlBgQ,MAAO,CACHN,UAAW,CACPrQ,QAAS,IAEbsQ,KAAM,CACFC,OAAQ,QAEZC,MAAO,CACHD,OAAQ,UC/BpB,MAAMK,UAAgC,cAClC,cACI/M,SAASmG,WACThI,KAAK6O,aAAe,gBACpB7O,KAAK8O,eAAiBC,EAAA,EACtB/O,KAAKgP,UAAYD,EAAA,EACjB/O,KAAKxF,MAAQ,CACTyU,aAAc,IAAIC,IAClB/N,MAAO,GAEXnB,KAAKkC,UAAY,KACb,MAAM,WAAEiN,EAAU,WAAEC,EAAU,WAAEC,EAAU,WAAEC,EAAU,WAAEC,EAAU,WAAEC,GAAexP,KAAKvF,MAClFgV,EAAS,GACf,GAAIN,GAAcA,EAAWvH,OAAQ,CACjC,MAAMxE,EAAOpD,KAAK0P,mBAAmBP,EAAW,GAAG/L,MACnDqM,EAAO/L,KAAK,CACRiM,UAAW,aACXzI,KAAMlH,KAAK4P,mBAAmBT,EAAY,cAC1CU,WAAY,CACRzM,OACA0M,OAAQ,CACJC,KAAMnC,EAAYC,WAAW,IAEjCmC,QAAS5M,GAEb9C,MAAO,CACH4G,KAAM,CACF6I,KAAMnC,EAAYC,WAAW,OAK7C,GAAIuB,GAAcA,EAAWxH,OAAQ,CACjC,MAAMxE,EAAOpD,KAAK0P,mBAAmBN,EAAW,GAAGhM,MACnDqM,EAAO/L,KAAK,CACRiM,UAAW,aACXzI,KAAMlH,KAAK4P,mBAAmBR,EAAY,cAC1CS,WAAY,CACRzM,OACA0M,OAAQ,CACJC,KAAMnC,EAAYC,WAAW,IAEjCmC,QAAS5M,GAEb9C,MAAO,CACH4G,KAAM,CACF6I,KAAMnC,EAAYC,WAAW,OAK7C,GAAIwB,GAAcA,EAAWzH,OAAQ,CACjC,MAAMxE,EAAOpD,KAAK0P,mBAAmBL,EAAW,GAAGjM,MACnDqM,EAAO/L,KAAK,CACRiM,UAAW,aACXzI,KAAMlH,KAAK4P,mBAAmBP,EAAY,cAC1CQ,WAAY,CACRzM,OACA0M,OAAQ,CACJC,KAAMnC,EAAYC,WAAW,IAEjCmC,QAAS5M,GAEb9C,MAAO,CACH4G,KAAM,CACF6I,KAAMnC,EAAYC,WAAW,OAK7C,GAAIyB,GAAcA,EAAW1H,OAAQ,CACjC,MAAMxE,EAAOpD,KAAK0P,mBAAmBJ,EAAW,GAAGlM,MACnDqM,EAAO/L,KAAK,CACRiM,UAAW,aACXzI,KAAMlH,KAAK4P,mBAAmBN,EAAY,cAC1CO,WAAY,CACRzM,OACA0M,OAAQ,CACJC,KAAMnC,EAAYC,WAAW,IAEjCmC,QAAS5M,GAEb9C,MAAO,CACH4G,KAAM,CACF6I,KAAMnC,EAAYC,WAAW,OAK7C,GAAI0B,GAAcA,EAAW3H,OAAQ,CACjC,MAAMxE,EAAOpD,KAAK0P,mBAAmBH,EAAW,GAAGnM,MACnDqM,EAAO/L,KAAK,CACRiM,UAAW,aACXzI,KAAMlH,KAAK4P,mBAAmBL,EAAY,cAC1CM,WAAY,CACRzM,OACA0M,OAAQ,CACJC,KAAMnC,EAAYC,WAAW,IAEjCmC,QAAS5M,GAEb9C,MAAO,CACH4G,KAAM,CACF6I,KAAMnC,EAAYC,WAAW,OAK7C,GAAI2B,GAAcA,EAAW5H,OAAQ,CACjC,MAAMxE,EAAOpD,KAAK0P,mBAAmBF,EAAW,GAAGpM,MACnDqM,EAAO/L,KAAK,CACRiM,UAAW,aACXzI,KAAMlH,KAAK4P,mBAAmBJ,EAAY,cAC1CK,WAAY,CACRzM,OACA0M,OAAQ,CACJC,KAAMnC,EAAYC,WAAW,IAEjCmC,QAAS5M,GAEb9C,MAAO,CACH4G,KAAM,CACF6I,KAAMnC,EAAYC,WAAW,OAK7C,MAAMoC,EAAyBjQ,KAAKkQ,4BACpClQ,KAAKsE,SAAS,CAAE2L,yBAAwBR,YAG5CzP,KAAK4P,mBAAqB,CAAC1I,EAAMyI,KAC7BzI,EAAKtE,KAAIuN,GAAUA,EAAMR,UAAYA,IAC9BzI,GAEXlH,KAAKoQ,kBAAoB,KACrB,MAAMC,EAAmBrQ,KAAK6O,aAAayB,SACrC,eAAEC,GAAmBC,OAC3B,GAAIH,GAAoBE,EAAgB,CACpC,MAAMzB,EAAiB,IAAIyB,EAAevQ,KAAKyQ,cAC/C3B,EAAe4B,QAAQL,GACvBrQ,KAAK8O,eAAiB,IAAMA,EAAe6B,UAAUN,QAGrDrQ,KAAKyQ,eACLD,OAAOI,iBAAiB,SAAU5Q,KAAKyQ,cACvCzQ,KAAK8O,eAAiB,IAAM0B,OAAOK,oBAAoB,SAAU7Q,KAAKyQ,cACtEzQ,KAAKgP,UAAY8B,SAASC,OAAOC,GAAG,oBAAqBhR,KAAKiR,kBAGtEjR,KAAKkR,2BAA6B,KAC9B,MAAM,sBAAEC,EAAqB,OAAEjQ,EAAM,gBAAEkQ,EAAkBlQ,GAAWlB,KAAKvF,OACnE,MAAE0G,GAAUnB,KAAKxF,MACvB,IAAI6W,EAA0BD,EAY9B,OAXID,IACIhQ,EAAQ,KAAOA,EAAQ,KACvBkQ,GAA2B,GAEtBlQ,EAAQ,KAAOA,EAAQ,IAC5BkQ,GAA2B,GAEtBlQ,GAAS,MACdkQ,GAA2B,MAG5BA,GAEXrR,KAAKsR,SAAW,CAAC7B,EAAQ3M,KACrB,MAAM,aAAEmM,GAAiBjP,KAAKxF,MAC9B,OAAKyU,EAAasC,IAAIzO,GAGf,KAFK,kBAAoB,EAAA0O,SAAU,CAAEC,UAAW,QAASvK,KAAMuI,EAAOvI,KAAMpB,IAAK2J,EAAOE,UAAWvM,KAAMqM,EAAOE,UAAWrP,MAAOmP,EAAOnP,SAKpJN,KAAKkQ,0BAA4B,KAC7B,MAAM,iBAAEwB,EAAgB,mBAAEC,GAAuB3R,KAAKvF,MAEhDmX,GAAyB,IAAAC,iBAAgB,UAAW,UAC1D,OAAQ,kBAAoBD,EAAwB,CAAEE,gBAAiB,IAAKC,OAAQ,EAAG5B,YAAY,QAAgBA,EAAOuB,EAAkBC,GAAqBK,qBAAqB,EAAMC,iBAAkB,IAAKC,eAAgB,CAC3N3Q,OAAQ,GACR4Q,KAAM,EACNC,MAAO,EACPC,IAAK,MAGjBrS,KAAKsS,UAAY,KACb,MAAM,aAAErD,EAAY,OAAEQ,GAAWzP,KAAKxF,MACtC,OAAQ,kBAAoB,EAAA+X,YAAa,CAAErL,MAAM,QAAcuI,EAAQR,GAAe/N,OAAQ,GAAIsR,OAAQ,GAAIpP,KAAM,SAAUqP,YAAY,KAG9IzS,KAAK0S,kBAAqB5P,IACtB,MAAMmM,GAAe,QAAiBjP,KAAKxF,MAAMiV,OAAQzP,KAAKxF,MAAMyU,aAAcnM,GAClF9C,KAAKsE,SAAS,CAAE2K,kBAEpBjP,KAAKiR,gBAAkB,KACnB0B,WAAW3S,KAAKyQ,aAAc,MAElCzQ,KAAKyQ,aAAe,KAChB,MAAM,MAAEtP,GAAUnB,KAAKxF,OACjB,YAAEoY,EAAc,GAAM5S,KAAK6O,aAAayB,SAAW,GACrDsC,IAAgBzR,GAChBnB,KAAKsE,SAAS,CAAEnD,MAAOyR,KAInC,oBACI5S,KAAKkC,YACLlC,KAAKoQ,oBAET,mBAAmBpJ,GACXA,EAAUmI,aAAenP,KAAKvF,MAAM0U,YACpCnI,EAAUoI,aAAepP,KAAKvF,MAAM2U,YACpCpI,EAAUqI,aAAerP,KAAKvF,MAAM4U,YACpCrI,EAAUsI,aAAetP,KAAKvF,MAAM6U,YACpCtI,EAAUuI,aAAevP,KAAKvF,MAAM8U,YACpCvI,EAAUwI,aAAexP,KAAKvF,MAAM+U,YACpCxP,KAAKkC,YAGb,uBACQlC,KAAK8O,gBACL9O,KAAK8O,iBAEL9O,KAAKgP,WACLhP,KAAKgP,YAIb,UAAUS,EAAQR,GACd,IACI4D,EADAC,GAAY,EAahB,OAXIrD,GACAA,EAAOsD,SAAQ,CAACC,EAAGlQ,KACf,KAAK,QAAemM,EAAcnM,IAAUkQ,EAAE9L,MAA0B,IAAlB8L,EAAE9L,KAAKU,OAAc,CACvE,MAAMqL,GAAM,QAAYD,EAAE9L,MAC1B4L,EAAW1N,KAAK6N,IAAIH,EAAUG,OAItCH,GAAY,IACZD,EAAS,CAAEK,EAAG,CAAC,EAAG,KAEfL,EAGX,YACI,MAAM,aAAE5D,EAAY,OAAEQ,GAAWzP,KAAKxF,MAQtC,OAPe,IAAA2Y,4BAA2B,CACtCC,YAAY,QAAc3D,GAC1B4D,aAAcnM,IAAQ,QAAauI,EAAQR,EAAc/H,GACzDoM,SAAUxQ,IAAS,QAAemM,EAAcnM,GAChDyQ,WAAY,SACZC,cAAe/Y,GAASuF,KAAK0S,kBAAkBjY,EAAMqI,SAO7D,gBACI,MAAM,WAAEqM,EAAU,WAAEC,EAAU,WAAEC,EAAU,WAAEC,EAAU,WAAEC,EAAU,WAAEC,GAAexP,KAAKvF,MAGxF,IAAI0V,EADc,CAAChB,EAAYC,EAAYC,EAAYC,EAAYC,EAAYC,GAErE5M,KAAImB,MACLoM,GAASA,EAAMvI,OAAS7D,EAAI6D,UAC7BuI,EAAQpM,MAGhB,MAAMU,EAAS,GACf0L,EAAMvN,KAAImB,IACNU,EAAOf,KAAKK,EAAI0P,MAGpB,MAAMC,EAAa,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIlP,EAAOmD,OAAQ+L,IAC3BA,EAAI,GAAM,GAAKA,EAAI,EAAIlP,EAAOmD,QAC9B8L,EAAWhQ,KAAKe,EAAOkP,IAI/B,OADAD,EAAWhQ,KAAKe,EAAOA,EAAOmD,OAAS,IAChC8L,EAEX,mBAAmBE,GAEf,OAAOA,EAAIhM,OADM,GACcgM,EAAIC,OAAO,EAAGC,IAAgB,MAAQF,EAEzE,SACI,MAAM,OAAE1S,EAAM,QAAElD,EAAU,CACtBuD,OAAQ,GACR4Q,KAAM,EACNC,MAAO,EACPC,IAAK,IACFrS,KAAKvF,OACN,uBAAEwV,EAAsB,aAAEhB,EAAY,OAAEQ,EAAM,MAAEtO,GAAUnB,KAAKxF,MAE/DuZ,EAAY9D,EACZ,iBAAmBA,EAAwB,CACzC+D,UAAU,QAAgBvE,EAAQR,GAClCgF,eAAiB,kBAAoB,EAAAC,mBAAoB,CAAEC,YAAY,QAAc1E,EAAQR,GAAc,GAAOtS,MAAOwT,GAAS,MAAU,2BAA4B,CAAEiE,IAAKjE,EAAMsD,aAEvL7X,EAEN,OAAQ,kBAAoB,MAAO,CAAEiK,UAAW,gBAAiBwO,IAAKrU,KAAK6O,aAAcvO,MAAO,CAAEY,OAAQlB,KAAKkR,+BAC3G,kBAAoB,MAAO,CAAE5Q,MAAO,CAAEY,SAAQC,UAC1C,kBAAoB,EAAAmT,MAAO,CAAEC,mBAAoBR,EAAWlB,OAAQ7S,KAAKwU,UAAU/E,EAAQR,GAAewF,OAAQzU,KAAK0U,YAAaxT,OAAQA,EAAQyT,iBAAiB,EAAMC,gBAAiB5U,KAAKsS,YAAa6B,YAAY,QAAc1E,EAAQR,GAAe4F,eAAgB,cAAe7W,QAASA,EAAS8W,MAAO,IAAYC,WAAY,EAAAC,gBAAA,aAA8B7T,MAAOA,GAChXsO,GAAUA,EAAO7H,OAAS,GAAM,kBAAoB,EAAAqN,WAAY,KAAMxF,EAAO7M,KAAI,CAACoQ,EAAGlQ,IAAU9C,KAAKsR,SAAS0B,EAAGlQ,MAChH,kBAAoB,EAAAoS,UAAW,CAAE5U,MAAOsN,EAAYe,MAAO+E,WAAY1T,KAAKmV,kBAC5E,kBAAoB,EAAAD,UAAW,CAAEE,eAAe,EAAM9U,MAAOsN,EAAYQ,Y,oECzTtF,MAIM,EAAS,CAClBb,eAAgB,CACZ5P,WAAY0X,EAAA,UAEhBC,cAAe,CACXpU,OAAQ,QACRzC,aAAcR,EAAA,SACdO,UAAWyC,EAAA,UAEfsU,UAAW,CACP9W,aAAcU,EAAA,SACdX,UAAWW,EAAA,UAEfqW,eAAgB,CACZhX,UAAWP,EAAA,UAEfwX,eAAgB,CACZ9X,WAAYH,EAAA,UAEhBkY,WAAY,CACRjX,aAAcU,EAAA,SACdX,UAAWW,EAAA,UAEfwW,WAAY,CACRnX,UAAWW,EAAA,WC/BNC,EAAY,CACrBE,OAAQ,CACJ8J,MAAO,GACPC,OAAQ,EACR5J,WAAY,SAEhBiF,UAAW,GACXzC,SAAU,CACN+K,QAAS,KAEb9G,SAAU,CACN/H,KAAM,SAGDyX,EAAmB,CAC5B,CAAEjW,MAAO,4CAA6CC,MAAO,yBAC7D,CAAED,MAAO,6CAA8CC,MAAO,0BAC9D,CAAED,MAAO,uCAAwCC,MAAO,oBACxD,CAAED,MAAO,qCAAsCC,MAAO,mBAE7CiW,EAAoB,CAC7B,CAAElW,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,SAAUC,MAAO,WAEjBkW,EAAsB,CAC/B,CAAEnW,MAAO,oBAAqBC,MAAO,qBACrC,CAAED,MAAO,eAAgBC,MAAO,gBAChC,CAAED,MAAO,oBAAqBC,MAAO,sBAE5BmW,GAAoB,CAC7B,CAAEpW,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,SAAUC,MAAO,WAEjBoW,GAAoB,CAC7B,CAAErW,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,UAAWC,MAAO,YAGlBqW,GAAgC,CAAC,CAAEtW,MAAO,iCAAkCC,MAAO,cAEnFsW,GAA2B,CAAC,CAAEvW,MAAO,2BAA4BC,MAAO,QAExEuW,GAAgC,CAAC,CAAExW,MAAO,iCAAkCC,MAAO,cAEnFwW,GAA6B,CAAC,CAAEzW,MAAO,6BAA8BC,MAAO,UAE5EyW,GAAkC,CAAC,CAAE1W,MAAO,mCAAoCC,MAAO,gBAEvF0W,GAA2B,CAAC,CAAE3W,MAAO,2BAA4BC,MAAO,QAExE2W,GAA2B,CAAC,CAAE5W,MAAO,iCAAkCC,MAAO,cAE9E4W,GAAa,CACtB,CAAE7W,MAAO,2BAA4BC,MAAO,OAC5C,CAAED,MAAO,yCAA0CC,MAAO,sBAEjD6W,GAA6BC,IACtC,IAAIpK,EACJ,OAAQoK,GACJ,IAAK,oBACDpK,EAAS,gBACT,MACJ,IAAK,MACL,IAAK,YACL,IAAK,YACL,IAAK,QACL,IAAK,cACL,IAAK,MACL,IAAK,MACL,IAAK,YACL,QACIA,EAAS,OAGjB,OAAOA,GAEEqK,GAAe5J,IACxB,MAAM6J,EAAYC,GAAoB9J,GAChC+J,EAAQ,IAAIC,KACZC,GAAW,IAAAC,QAAOH,EAAO,cAC/B,IAAII,EACJ,OAAQN,GACJ,IAAK,yBACDE,EAAMK,SAASL,EAAMM,WAAa,GAClCF,GAAa,IAAAD,SAAO,IAAAI,cAAaP,GAAQ,cACzC,MACJ,IAAK,iBACDA,EAAMQ,QAAQR,EAAMS,UAAY,IAChCL,GAAa,IAAAD,QAAOH,EAAO,cAC3B,MACJ,IAAK,mBACDA,EAAMQ,QAAQR,EAAMS,UAAY,IAChCL,GAAa,IAAAD,QAAOH,EAAO,cAC3B,MACJ,IAAK,wBACL,QACII,GAAa,IAAAD,SAAO,IAAAI,cAAaP,GAAQ,cAGjD,MAAO,CACHE,WACAE,eAGKL,GAAsB9J,GACxBA,EAAe6J,WAAa,wBAE1BY,GAAwBzK,GAC1BA,EAAe2J,aAAe,MAE5Be,GAAqBf,IAC9B,IAAIpK,EACJ,OAAQoK,GACJ,IAAK,MACL,IAAK,YACL,IAAK,MACDpK,EAAS,UACT,MACJ,IAAK,QACL,IAAK,cACDA,EAAS,oBACT,MACJ,IAAK,YACL,IAAK,MACL,IAAK,oBACL,IAAK,YACDA,EAAS,UACT,MACJ,QACIA,OAAS1Q,EAGjB,OAAO0Q,GAEEoL,GAAqBhB,IAC9B,IAAIpK,EACJ,OAAQoK,GACJ,IAAK,MACL,IAAK,YACDpK,EAASuJ,EACT,MACJ,IAAK,QACL,IAAK,cACDvJ,EAASwJ,EACT,MACJ,IAAK,MACDxJ,EAASyJ,GACT,MACJ,IAAK,YACL,IAAK,MACL,IAAK,oBACL,IAAK,YACDzJ,EAAS0J,GACT,MACJ,QACI1J,OAAS1Q,EAGjB,OAAO0Q,GAEEqL,GAAyBjB,IAClC,IAAIpK,EACJ,OAAQoK,GACJ,IAAK,MACDpK,EAAS,MACT,MACJ,IAAK,YACL,IAAK,YACL,IAAK,QACL,IAAK,cACL,IAAK,MACL,IAAK,MACL,IAAK,oBACL,IAAK,YACL,QACIA,OAAS1Q,EAGjB,OAAO0Q,GAEEsL,GAAiBlB,IAC1B,IAAIpK,EACJ,OAAQoK,GACJ,IAAK,YACL,IAAK,MACL,IAAK,YACL,IAAK,QACL,IAAK,cACL,IAAK,MACL,IAAK,MACL,IAAK,oBACL,IAAK,YACL,QACIpK,EAAS,OAGjB,OAAOA,GAEEuL,GAAsBnB,IAC/B,IAAIpK,EACJ,OAAQoK,GACJ,IAAK,YACDpK,EAAS,YACT,MACJ,IAAK,MACDA,EAAS,MACT,MACJ,IAAK,YACDA,EAAS,YACT,MACJ,IAAK,QACDA,EAAS,QACT,MACJ,IAAK,cACDA,EAAS,cACT,MACJ,IAAK,MACDA,EAAS,MACT,MACJ,IAAK,MAGL,IAAK,oBACDA,EAAS,MACT,MACJ,IAAK,YACDA,EAAS,YACT,MACJ,QACIA,OAAS1Q,EAGjB,OAAO0Q,GAEEwL,GAAyBpB,IAClC,IAAIpK,EACJ,OAAQoK,GACJ,IAAK,MACL,IAAK,YACD,MAAO,MAEX,IAAK,QACL,IAAK,cACD,MAAO,QAEX,IAAK,MACD,MAAO,MAEX,IAAK,YACL,IAAK,MACL,IAAK,oBACL,IAAK,YACD,MAAO,MAEX,QACIpK,OAAS1Q,EAGjB,OAAO0Q,GAEEV,GAAmB,CAACH,EAAStR,EAAO0S,GAAQ,KAEjDA,IACA1S,EAAMmF,OAAS5D,OAAOC,OAAOD,OAAOC,OAAO,GAAIxB,EAAMmF,QAAS,CAAE+J,OAAQjK,EAAUE,OAAO+J,UAEtF,GAAGoC,EAAQpQ,SAASyR,aAAY,QAAc3S,MAE5C4d,GAAiB,CAACC,EAAcC,EAAyBC,KAClE,IAAI5L,GAAS,EACb,GAAgC,IAA5B2L,EAA8C,CAC9C,MAAM/Q,EAAOgR,EAAWhR,KAAKpD,MAAKqU,GAAgB,QAAXA,EAAEC,OAGzC9L,EAF4BpF,GAAQA,EAAKmR,aAIhBzc,IAAjBoc,QACsBpc,IAAtBoc,EAAa9X,MACb8X,EAAa9X,KAAKC,MAAQ,EAEtC,OAAOmM,GAEEgM,GAAmB,CAACC,EAAgBC,EAA2BN,KACxE,IAAI5L,GAAS,EACb,GAAkC,IAA9BkM,EAAgD,CAChD,MAAMtR,EAAOgR,EAAWhR,KAAKpD,MAAKqU,GAAgB,UAAXA,EAAEC,OAGzC9L,EAF4BpF,GAAQA,EAAKmR,aAIdzc,IAAnB2c,QACwB3c,IAAxB2c,EAAerY,MACfqY,EAAerY,KAAKC,MAAQ,EAExC,OAAOmM,GAEEmM,GAAiB,CAACC,EAAcC,EAA0BT,KACnE,IAAI5L,GAAS,EACb,GAAiC,IAA7BqM,EAA+C,CAC/C,MAAMzR,EAAOgR,EAAWhR,KAAKpD,MAAKqU,GAAgB,QAAXA,EAAEC,OAGzC9L,EAF4BpF,GAAQA,EAAKmR,aAIhBzc,IAAjB8c,QACsB9c,IAAtB8c,EAAaxY,MACbwY,EAAaxY,KAAKC,MAAQ,EAEtC,OAAOmM,GAEEsM,GAAiB,CAACC,EAAcC,EAAyBZ,KAClE,IAAI5L,GAAS,EACb,GAAgC,IAA5BwM,EAA8C,CAC9C,MAAM5R,EAAOgR,EAAWhR,KAAKpD,MAAKqU,GAAgB,QAAXA,EAAEC,OAGzC9L,EAF4BpF,GAAQA,EAAKmR,aAIhBzc,IAAjBid,QACsBjd,IAAtBid,EAAa3Y,MACb2Y,EAAa3Y,KAAKC,MAAQ,EAEtC,OAAOmM,GCtTX,MAAMyM,WAA0B,cAC5B,YAAYxP,EAAYC,GACpB3H,MAAM0H,EAAYC,GAClBxJ,KAAKiI,aAAe,GACpBjI,KAAKxF,MAAQkB,OAAOC,OAAO,GAAIqE,KAAKiI,cACpCjI,KAAKgZ,kBAAoB,CAACpZ,EAAOqZ,EAAcC,EAAa,OAAQC,EAAkB,WAClF,MAAM,EAAE5c,GAAMyD,KAAKvF,MACb2e,EAAmB,IAAIrC,KAAKkC,EAAaI,KAAO,aAChDC,EAAO/c,EAAE,aAAc,CAAE8c,MAAM,IAAA9B,SAAQ6B,GAAmBG,OAAO,IAAAnC,UAASgC,KAC1EI,GAAO,QAAQ5Z,GAAS6Z,WAAW7Z,EAAM6F,QAAQ,KAAM,QAAM7F,GAASA,EAAQ,EACpF,MAAO,CACH6T,EAAG6F,EACHpG,EAAa,OAAVtT,EAAiB,KAAO4Z,EAC3BH,KAAMJ,EAAaI,KACnBvT,IAAKmT,EAAazV,GAClBJ,KAAM6V,EAAatZ,OAASsZ,EAAazV,GACzCkW,MAAOT,EAAaC,GACdD,EAAaC,GAAYC,GACrBF,EAAaC,GAAYC,GAAiBO,MAC1CT,EAAaC,GAAYQ,WAC7B9d,IAGdoE,KAAKnD,YAAc,KACf,MAAM,YAAEA,EAAW,YAAE6Z,EAAW,YAAE7a,GAAgBmE,KAAKvF,MAGvDoC,EAFwBgb,GAAmBnB,GACxBkB,GAAclB,GACQ7a,IAE7CmE,KAAK2Z,eAAkB/P,IACnB,MAAM,uBAAEgQ,EAAyB,QAAsB5Z,KAAKvF,MACtDye,EAAaU,EAEbC,EAAc,GAYpB,OAXAjQ,EAAchH,KAAIqW,IACd,MAAMa,EAAS,GACXb,aAAwBc,KACVC,MAAMC,KAAKhB,EAAaxU,UAChC7B,KAAI+Q,IACN,MAAM5P,EAAM4P,EAAEuF,GAA2B,MAAIvF,EAAEuF,GAA2B,MAAEtZ,MAAQ+T,EAAEuF,GAAYtZ,MAClGka,EAAOpW,KAAK1D,KAAKgZ,kBAAkBjV,EAAK4P,EAAGuF,EAR/B,aAWpBW,EAAYnW,KAAKoW,MAEd9Z,KAAKka,eAAeL,IAE/B7Z,KAAKma,cAAiBzD,IAClB,IAAIpK,EACJ,OAAQoK,GACJ,IAAK,YACDpK,EAAS,2BACT,MACJ,IAAK,MACDA,EAAS,qBACT,MACJ,IAAK,YACDA,EAAS,2BACT,MACJ,IAAK,QACDA,EAAS,uBACT,MACJ,IAAK,cACDA,EAAS,6BACT,MACJ,IAAK,MACDA,EAAS,qBACT,MACJ,IAAK,MACDA,EAAS,qBACT,MACJ,IAAK,oBACDA,EAAS,mCACT,MACJ,IAAK,YACDA,EAAS,2BACT,MACJ,QACIA,OAAS1Q,EAGjB,OAAO0Q,GAEXtM,KAAK0J,iBAAmB,KACpB,MAAM,OAAE5N,GAAWkE,KAAKvF,MACxB,OAAO,OAA+B,CAClCqB,SACA6G,MAAO3C,KAAKoa,aACZC,OAAO,KAGfra,KAAKoa,WAAa,KACd,MAAM,MAAEjgB,GAAU6F,KAAKvF,MACjB4H,EAAYvF,EAAmB3C,EAAM8H,UACrCqY,EAAata,KAAKua,gBAExB,OADsBva,KAAKuC,qBACY+X,EAAa,eAAiBjY,IAEzErC,KAAKua,cAAgB,KACjB,MAAM,MAAEpgB,GAAU6F,KAAKvF,MACvB,IAAI6f,EACJ,IAAK,MAAM9e,KAAWE,OAAOsJ,KAAK7K,EAAM8H,UACpC,GAAIzG,IAAY,KAAc,CAC1B8e,EAAangB,EAAM8H,SAAS,MAC5B,MAGR,OAAOqY,GAEXta,KAAKuC,iBAAmB,KACpB,MAAM,MAAEpI,GAAU6F,KAAKvF,MACvB,IAAI6H,EACJ,IAAK,MAAM9G,KAAWE,OAAOsJ,KAAK7K,EAAM8H,UAAW,CAC/C,MAAMgD,EAAWzJ,EAAQ0J,QAAQ,KACjC,IAAkB,IAAdD,EAAiB,CACjB3C,EAAgB9G,EAAQ2J,UAAUF,EAAW,YAC7C,OAGR,OAAO3C,GAEXtC,KAAKwa,YAAc,IACP,kBAAoB,aAAgB,KACxC,kBAAoBC,WAAU,CAAEna,MAAO,gBAAsBG,KAAM,OACnE,kBAAoBga,WAAU,CAAEna,MAAO,iBAAuBG,KAAM,QAK5ET,KAAKka,eAAkBvT,IACnB,MAAM,SAAEqQ,EAAQ,WAAEE,GAAelX,KAAKvF,MAChC6R,EAAS,GAiBf,OAhBA3F,EAAM/D,KAAIkX,IACN,MAAMhU,EAAMgU,EAAO,GAAGhU,IAChBmG,EAAW,GACjB,IAAK,IAAIyO,EAAU,IAAI3D,KAAKG,EAAa,aAAcwD,GAAW,IAAI3D,KAAKC,EAAW,aAAc0D,EAAQpD,QAAQoD,EAAQnD,UAAY,GAAI,CACxI,MAAM/T,GAAK,IAAAyT,QAAOyD,EAAS,cACrBC,EAAab,EAAOhW,MAAKC,GAAOA,EAAIsV,OAAS7V,IACnD,GAAImX,EACA1O,EAASvI,KAAKiX,OAEb,CACD,MAAMtB,GAAO,IAAApC,QAAOyD,EAAS,cAC7BzO,EAASvI,KAAK1D,KAAKgZ,kBAAkB,KAAM,CAAEK,OAAM7V,GAAIsC,GAAO,OAAQ,QAG9EwG,EAAO5I,KAAKuI,MAETK,GAGf,oBACItM,KAAKnD,cAET,mBAAmBmK,GACf,MAAM,OAAElL,EAAM,YAAEC,EAAW,YAAEF,GAAgBmE,KAAKvF,OACjCuM,EAAUnL,cAAgBA,IACzBC,IAAWC,IAEzBiE,KAAKnD,cAGb,SACI,MAAM,YAAE6Z,EAAW,kBAAE1a,EAAiB,EAAEO,GAAMyD,KAAKvF,MAC7Cqf,EAAS9Z,KAAK2Z,eAAe3Z,KAAK0J,oBAExC,OAAQ,kBAAoB,aAAgB,KACxC,kBAAoB,MAAO,CAAEpJ,MAAO,kBAChC,kBAAoB,EAAAC,MAAO,CAAEC,aAAc,KAAMC,KAAM,MAAQlE,EAAEyD,KAAKma,cAAczD,MACxF,kBAAoB,MAAO,CAAEpW,MAAO,kBAChC,kBAAoB,MAAO,CAAEA,MAAO,aAA0C,IAAtBtE,EAA4CgE,KAAKwa,cAAkB,kBAAoB5L,EAAyB,CAAEuC,uBAAuB,EAAMC,gBFpL7L,IEoLgPM,iBAAkBkJ,EAAA,GAAajJ,mBAAoB,GAAIzQ,OFrLhT,IEqLiViO,WAAY2K,EAAOlS,OAAS,EAAIkS,EAAO,GAAK,GAAI1K,WAAY0K,EAAOlS,OAAS,EAAIkS,EAAO,GAAK,GAAIzK,WAAYyK,EAAOlS,OAAS,EAAIkS,EAAO,GAAK,GAAIxK,WAAYwK,EAAOlS,OAAS,EAAIkS,EAAO,GAAK,GAAIvK,WAAYuK,EAAOlS,OAAS,EAAIkS,EAAO,GAAK,GAAItK,WAAYsK,EAAOlS,OAAS,EAAIkS,EAAO,GAAK,SAI9nB,MAAMvf,IAAkB,SAAsB,CAACC,EAAOC,KAClD,MAAMsS,GAAiB,QAAW1R,SAASC,QACrCob,EAAcc,GAAsBzK,GACpC6J,EAAYC,GAAoB9J,IAChC,SAAEiK,EAAQ,WAAEE,GAAeP,GAAa5J,GACxC5S,EAAQ,CACVmF,OAAQ5D,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAIyD,EAAUE,QAASyN,EAAezN,QAAS,CAAE8J,MAAO,EAAGC,YAAQzN,IACrH8I,UAAWqI,EAAerI,WAAatF,EAAUsF,UACjDzC,SAAU8K,EAAe9K,UAAY,CAAE,CAACwV,GAAkBf,IAAe,MAAStX,EAAU6C,SAC5FyU,cACAE,YACAI,WACAE,cAEErb,GAAc,QAASH,OAAOC,OAAOD,OAAOC,OAAO,GAAIxB,GAAQ,CAAEuc,iBAAa9a,EAAWgb,eAAWhb,KACpGR,EAAkByc,GAAmBnB,GACrCvb,EAAayc,GAAclB,GAIjC,MAAO,CACHM,WACAN,cACAvc,QACA0B,cACAC,OARW,kBAA6BtB,EAAOY,EAAiBD,EAAYU,GAS5EE,YARgB,uBAAkCvB,EAAOY,EAAiBD,EAAYU,GAStFG,kBARsB,6BAAwCxB,EAAOY,EAAiBD,EAAYU,GASlGqb,iBAGFta,GAAqB,CACvBC,YAAa,kBAEXge,IAAuB,IAAA9f,SAAQR,GAAiBqC,GAAzB,CAA6Cmc,IACpE+B,IAAgB,IAAAC,aAAW,IAAAjgB,kBAAA,CAAkB+f,K,2EC/NnD,MAAMG,WAAsB,cACxB,cACInZ,SAASmG,WACThI,KAAKiI,aAAe,CAChBgT,iBAAiB,GAErBjb,KAAKxF,MAAQkB,OAAOC,OAAO,GAAIqE,KAAKiI,cACpCjI,KAAKkb,iBAAmB,KACpB,MAAM,QAAEta,EAAO,GAAQZ,KAAKvF,MAC5B,OAAOmG,EAAQgC,KAAIwF,GAAW,kBAAoB,EAAA+S,aAAc,CAAEC,UAAW,SAAUtV,IAAKsC,EAAOxI,MAAOyb,QAAS,IAAMrb,KAAKsb,YAAYlT,EAAOxI,QAAUrD,EAAE6L,EAAOzI,WAExKK,KAAKub,gBAAkB,KACnB,MAAM,YAAEC,EAAW,QAAE5a,EAAO,EAAErE,GAAMyD,KAAKvF,MACzC,IAAIkF,EAAQ,GACZ,IAAK,MAAMyI,KAAUxH,EACjB,GAAI4a,IAAgBpT,EAAOxI,MAAO,CAC9BD,EAAQpD,EAAE6L,EAAOzI,OACjB,MAGR,OAAOA,GAEXK,KAAKsb,YAAc1b,IACf,MAAM,cAAEe,GAAkBX,KAAKvF,MAC3BkG,GACAA,EAAcf,IAGtBI,KAAKyb,aAAe,KAChBzb,KAAKsE,SAAS,CACV2W,iBAAkBjb,KAAKxF,MAAMygB,mBAGrCjb,KAAK0b,aAAeT,IAChBjb,KAAKsE,SAAS,CACV2W,qBAIZ,SACI,MAAM,WAAEva,GAAeV,KAAKvF,OACtB,gBAAEwgB,GAAoBjb,KAAKxF,MAC3BmhB,EAAgB3b,KAAKkb,mBAC3B,OAAQ,kBAAoB,EAAAU,SAAU,CAAEpU,SAAUxH,KAAKyb,aAAcI,OAAQ,kBAAoB,EAAAC,eAAgB,CAAEpb,WAAYA,EAAYqb,SAAU/b,KAAK0b,cAAgB1b,KAAKub,mBAAoB3X,OAAQqX,EAAiBU,cAAeA,KAGnP,MAAMK,IAAY,IAAAlhB,kBAAA,CAAkBkgB,IC9CvB,GAAS,CAClBiB,iBAAkB,CACdne,gBAAiBC,EAAA,SACjBJ,WAAY,IAAIM,EAAA,WAChBR,WAAY0B,EAAA,WCMd+c,GAAgB,MAChBpU,GAAgB,MACf,MAAMqU,WAA2B,cACpC,cACIta,SAASmG,WACThI,KAAKiI,aAAe,GACpBjI,KAAKxF,MAAQkB,OAAOC,OAAO,GAAIqE,KAAKiI,cACpCjI,KAAKkI,mBAAqB,KACtB,MAAM,UAAEkU,EAAS,YAAE1F,EAAW,EAAEna,EAAC,UAAE4L,GAAcnI,KAAKvF,MAChDmG,EAAU,GAiBhB,OAhBuB8W,GAAkBhB,GAC1B9T,KAAIwF,IACfxH,EAAQ8C,KAAK,CACTN,KAAM7G,EAAE,oBAAoB6L,EAAOzI,SACnCmG,IAAKsC,EAAOxI,WAGhBwc,GAAaA,EAAUlV,MAAQkV,EAAUlV,KAAKU,OAAS,GACvDhH,EAAQ8C,KAAK,CACTN,KAAM7G,EAAE,gCACRuJ,IAAK,OAGTqC,GAAaA,EAAUjB,MAAQiB,EAAUjB,KAAKU,OAAS,GACvDhH,EAAQ8C,KAAK,CAAEN,KAAM7G,EAAE,wBAAyBuJ,IAAK,OAElDlF,GAEXZ,KAAKqc,oBAAsB,KACvB,MAAM,UAAEzF,GAAc5W,KAAKvF,MAC3B,OAAOmc,GAAwBhB,EAAiB,IAEpD5V,KAAK2W,aAAe,KAChB,MAAM,WAAEjW,GAAeV,KAAKvF,OACtB,iBAAE6hB,GAAqBtc,KAAKxF,MAClC,OAAQ,kBAAoBwhB,GAAW,CAAER,YAAac,EAAkB5b,WAAYA,EAAYC,cAAeX,KAAKuc,qBAAsB3b,QAASgV,KAEvJ5V,KAAKuc,qBAAwB3c,IACzB,MAAM,QAAE6L,EAAO,MAAEtR,GAAU6F,KAAKvF,MAC1BgB,EAAWC,OAAOC,OAAOD,OAAOC,OAAO,GAAIwL,KAAK4E,MAAM5E,KAAK/M,UAAUD,KAAU,CAAEyc,UAAWhX,IAClG6L,EAAQE,QAAQC,GAAiBH,EAAShQ,GAAU,IACpDuE,KAAKsE,SAAS,CAAEgY,iBAAkB1c,KAG1C,oBACI,MAAM,SAAE4c,EAAQ,SAAEnU,EAAQ,mBAAEoU,EAAkB,YAAE5gB,EAAW,mBAAEa,GAAuBsD,KAAKvF,MACrFgiB,GACAD,EAASC,EAAoBP,GAAergB,GAE5Ca,GACA2L,EAAS3L,EAAoBoL,GAAejM,GAEhDmE,KAAKsE,SAAS,CACVgE,gBAAiBtI,KAAKkI,qBACtBoU,iBAAkBtc,KAAKqc,wBAG/B,mBAAmBrV,GACf,MAAM,SAAEwV,EAAQ,SAAEnU,EAAQ,QAAE7M,EAAO,UAAE4gB,EAAS,mBAAEK,EAAkB,YAAE/F,EAAW,MAAEvc,EAAK,YAAE0B,EAAW,UAAEsM,EAAS,mBAAEzL,GAAwBsD,KAAKvF,MACzIN,KAAU,QAAQA,EAAO6M,EAAU7M,SAC/BsiB,GACAD,EAASC,EAAoBP,GAAergB,GAE5Ca,GACA2L,EAAS3L,EAAoBoL,GAAejM,KAG/C,QAAQugB,EAAWpV,EAAUoV,aAAe,QAAQjU,EAAWnB,EAAUmB,YAC1EnI,KAAKsE,SAAS,CACVgE,gBAAiBtI,KAAKkI,uBAG1BlB,EAAUxL,UAAYA,GAAWwL,EAAU0P,cAAgBA,GAC3D1W,KAAKuc,qBAAqB3G,EAAiB,GAAGhW,OAGtD,SACI,MAAM,QAAEpE,EAAO,WAAEkF,EAAU,cAAEkI,EAAa,gBAAEC,EAAe,UAAEuT,EAAS,MAAEjiB,EAAK,UAAEgO,GAAcnI,KAAKvF,OAC5F,gBAAE6N,GAAoBtI,KAAKxF,MACjC,OAAQ,kBAAoB,KAAa,CAAE8N,gBAAiBA,EAAiBsO,UAAW5W,KAAK2W,eAAgBnb,QAASA,EAASkF,WAAYA,EAAYkI,cAAeA,EAAeC,gBAAiBA,EAAiBuT,UAAWA,EAAWjiB,MAAOA,EAAOmG,MAAO,oBAAyB0I,YAAY,EAAMb,UAAWA,KAIhU,MAAM,IAAkB,SAAsB,CAAC3N,EAAOC,KAClD,MAAMsS,GAAiB,QAAW1R,SAASC,QACrCob,EAAcc,GAAsBzK,GACpC6J,EAAYC,GAAoB9J,GAEhClR,GAAc,QAAS,IAG7B,IAAIugB,EACAM,EACJ,MAAMD,EAAqB9E,GAAsBjB,GAKjD,IAAIvO,EACAwU,EALAF,IACAL,EAAY,gBAAuB5hB,EAAOiiB,EAAoBP,GAAergB,GAC7E6gB,EAAuB,2BAAkCliB,EAAOiiB,EAAoBP,GAAergB,IAIvG,MAAMa,EAAqBob,GAAsBpB,GAKjD,OAJIha,IACAyL,EAAY,gBAAuB3N,EAAOkC,EAAoBoL,GAAejM,GAC7E8gB,EAAuB,2BAAkCniB,EAAOkC,EAAoBoL,GAAejM,IAEhG,CACH+a,YACAwF,YACAM,uBACAD,qBACA/F,cACA7a,cACAsM,YACAwU,uBACAjgB,yBAGF,GAAqB,CACvB8f,SAAU,SACVnU,SAAU,UAERuU,IAAiB,IAAA7B,aAAW,IAAAjgB,kBAAA,EAAkB,IAAAC,SAAQ,GAAiB,GAAzB,CAA6CohB,M,wCC/H1F,MAAM,GAAS,CAClBhe,KAAM,CACFC,QAAS,OACTC,WAAY,UAEhBC,UAAW,GACXC,UAAW,CACPC,UAAW,EACXC,aAAc,EACdb,YAAaK,EAAA,QAEjBS,cAAe,CACXC,SAAUC,GAAA,SACVC,MAAOC,GAAA,QAEXC,cAAe,CACXJ,SAAUC,GAAA,SACVC,MAAOG,GAAA,QAEXxD,QAAS,CACLqhB,YAAarf,EAAA,QAEjByB,OAAQ,CACJb,QAAS,OACTc,eAAgB,gBAChB3B,cAAe4B,EAAA,OACf0d,YAAarf,EAAA,OACbgQ,aAAchQ,EAAA,OACdC,WAAYD,EAAA,OACZM,gBAAiBC,EAAA,QAErB+e,qBAAsB,CAClB1e,QAAS,OACTI,UAAWP,EAAA,QAEftB,MAAO,CACHY,cAAe4B,EAAA,SC1BvB,MAAM4d,WAA2B,cAC7B,cACIlb,SAASmG,WACThI,KAAKiI,aAAe,GAGpBjI,KAAKxF,MAAQkB,OAAOC,OAAO,GAAIqE,KAAKiI,cACpCjI,KAAKgd,sBAAwB,KACzB,MAAM,aAAEhF,EAAY,wBAAEC,EAAuB,eAAEM,EAAc,0BAAEC,EAAyB,aAAEE,EAAY,wBAAEuE,EAAuB,aAAEpE,EAAY,wBAAEC,EAAuB,YAAEpC,EAAW,WAAEwB,GAAgBlY,KAAKvF,MAC1M,OAAIic,IAGAkC,GAAeC,EAAcC,EAAyBZ,GAC/C,MAEPH,GAAeC,EAAcC,EAAyBC,GAC/C,MAEPI,GAAiBC,EAAgBC,EAA2BN,GACrD,QAEPO,GAAeC,EAAcuE,EAAyB/E,GAC/C,WADX,IAKJlY,KAAKkd,eAAkBxc,IACnB,MAAM,aAAEsX,EAAY,wBAAEC,EAAuB,eAAEM,EAAc,0BAAEC,EAAyB,aAAEE,EAAY,wBAAEuE,EAAuB,aAAEpE,EAAY,wBAAEC,EAAuB,WAAEZ,GAAgBlY,KAAKvF,OACvL,mBAAE0iB,GAAuBnd,KAAKxF,MAC9B4iB,EAAkBrF,GAAeC,EAAcC,EAAyBC,GACxEmF,EAAoB/E,GAAiBC,EAAgBC,EAA2BN,GAChFoF,EAAkB7E,GAAeC,EAAcuE,EAAyB/E,GACxEqF,EAAkB3E,GAAeC,EAAcC,EAAyBZ,GAC9E,KAAMkF,GAAmBC,GAAqBC,GAAmBC,GAC7D,OAAO,KAGX,MAAM3c,EAAU,GAuBhB,OAtBI2c,IACA3c,EAAQ8C,QAAQ8S,IAChB5V,EAAQ8C,QAAQuS,KAEhBmH,GACAxc,EAAQ8C,QAAQwS,IAEhBqH,GAAmBxF,IACnBnX,EAAQ8C,QAAQyS,IAEhBmH,GACA1c,EAAQ8C,QAAQ4S,IAEhB+G,GACAzc,EAAQ8C,QAAQ0S,IAEhBmH,GAAmBjF,IACnB1X,EAAQ8C,QAAQ2S,IAEhBkH,GACA3c,EAAQ8C,QAAQ6S,IAEZ,kBAAoB,KAAa,CAAEiF,YAAa2B,GAAsBvc,EAAQ,GAAGhB,MAAOc,WAAYA,EAAYC,cAAeX,KAAKwd,uBAAwB5c,QAASA,KAEjLZ,KAAKwd,uBAA0B5d,IAC3B,MAAM,QAAE6L,EAAO,MAAEtR,GAAU6F,KAAKvF,MAC1BgB,EAAWC,OAAOC,OAAOD,OAAOC,OAAO,GAAIwL,KAAK4E,MAAM5E,KAAK/M,UAAUD,KAAU,CAAEuK,eAAW9I,EAAWqG,SAAU,CAAE,CAACwV,GAAkB7X,IAAS,KAAOsG,SAAU,CAAE/H,KAAM,QAAUuY,YAAa9W,IACrM6L,EAAQE,QAAQC,GAAiBH,EAAShQ,GAAU,IACpDuE,KAAKsE,SAAS,CAAE6Y,mBAAoBvd,KAG5C,oBACII,KAAKsE,SAAS,CACV6Y,mBAAoBnd,KAAKgd,0BAGjC,SACI,MAAM,aAAEhF,EAAY,eAAEO,EAAc,aAAEG,EAAY,aAAEG,EAAY,wBAAEZ,EAAuB,0BAAEO,EAAyB,wBAAEyE,EAAuB,QAAEzhB,EAAO,wBAAEsd,EAAuB,cAAElQ,EAAa,gBAAEC,EAAe,iBAAE/I,EAAgB,YAAE4W,EAAW,MAAEvc,EAAK,EAAEoC,EAAC,WAAE2b,GAAgBlY,KAAKvF,MAEzQgjB,IAAgB1F,GAAeC,EAAcC,EAAyBC,IACxEI,GAAiBC,EAAgBC,EAA2BN,IAC5DO,GAAeC,EAAcuE,EAAyB/E,IACtDU,GAAeC,EAAcC,EAAyBZ,IACpDxY,EAAiBgY,GAAkBhB,GACnC+F,EAAqB9E,GAAsBjB,GAC3Cha,EAAqBob,GAAsBpB,GACjD,OAAQ,kBAAoB,SAAU,CAAEpW,MAAO,WAC3C,kBAAoB,MAAO,KACvB,kBAAoB,EAAAC,MAAO,CAAEC,aAAc,KAAMF,MAAO,SAAcG,KAAM,OAASlE,EAAE,wBACvF,kBAAoB,MAAO,CAAE+D,MAAO,yBAChCN,KAAKkd,eAAeO,GACpB,kBAAoB,MAAO,CAAEnd,MAAO,YAChC,kBAAoB,KAAS,CAAExD,mBAAoBA,EAAoBtB,QAASA,EAASkF,WAAY+c,EAAa9c,cAAeb,EAAkBc,QAASlB,EAAgB+c,mBAAoBA,EAAoB/F,YAAaA,EAAagH,SAAUjB,EAAoB5b,SAAUnE,EAAoBA,mBAAoBA,MACtU,kBAAoBkgB,GAAgB,CAAEphB,QAASA,EAASkF,WAAY+c,EAAa7U,cAAeA,EAAeC,gBAAiBA,EAAiB1O,MAAOA,OAIxK,MAAM,IAAkB,SAAsB,CAACK,EAAOC,KAClD,MAAMsS,GAAiB,QAAW1R,SAASC,QACrCob,EAAcc,GAAsBzK,GACpC5S,EAAQ,CACVmF,OAAQ5D,OAAOC,OAAOD,OAAOC,OAAO,GAAIyD,EAAUE,QAASyN,EAAezN,QAC1EoF,UAAWqI,EAAerI,WAAatF,EAAUsF,UACjDzC,SAAU8K,EAAe9K,UAAY,CAAE,CAACwV,GAAkBf,IAAe,MAAStX,EAAU6C,SAC5FiE,SAAU6G,EAAe7G,UAAY9G,EAAU8G,SAC/CwQ,eAEE7a,GAAc,QAASH,OAAOC,OAAOD,OAAOC,OAAO,GAAIxB,GAAQ,CAAEuc,iBAAa9a,KAC9E+hB,GAA0B,OAAkB,MAC5C3F,EAAe9b,EAAA,mBAAmC1B,EAAO,MAAiBmjB,GAC1E1F,EAA0B/b,EAAA,8BAA8C1B,EAAO,MAAiBmjB,GAChGC,GAA4B,OAAkB,MAC9CrF,EAAiBrc,EAAA,mBAAmC1B,EAAO,QAAqBojB,GAChFpF,EAA4Btc,EAAA,8BAA8C1B,EAAO,QAAqBojB,GACtGC,GAA0B,OAAkB,MAC5CnF,EAAexc,EAAA,mBAAmC1B,EAAO,MAAiBqjB,GAC1EZ,EAA0B/gB,EAAA,8BAA8C1B,EAAO,MAAiBqjB,GAChGC,GAA0B,OAAkB,MAC5CjF,EAAe3c,EAAA,mBAAmC1B,EAAO,MAAiBsjB,GAC1EhF,EAA0B5c,EAAA,8BAA8C1B,EAAO,MAAiBsjB,GAChGC,GAAwB,OAAmB,MAIjD,MAAO,CACH/F,eACAC,0BACA0F,0BACApF,iBACAC,4BACAoF,4BACAlF,eACAuE,0BACAY,0BACAhF,eACAC,0BACAgF,0BACApH,cACAvc,QACA0B,cACAqc,WAnBe,sBAAqC1d,EAAO,GAAcujB,GAoBzEC,gBAnBoB,2BAA0CxjB,EAAO,GAAcujB,GAoBnFE,sBAnB0B,iCAAgDzjB,EAAO,GAAcujB,GAoB/FA,4BAGFG,IAAiB,IAAAnD,aAAW,IAAAjgB,kBAAA,EAAkB,IAAAC,SAAQ,GAAiB,GAAzB,CAA6BgiB,M,uFC5J1E,MAAM,GAAS,CAClB/b,WAAY,CACRlD,gBAAiBC,EAAA,SACjBK,QAAS,OACTc,eAAgB,SAChBzB,WAAYwD,EAAA,SACZC,OAAQ,OACRC,MAAO,QAEXC,UAAW,CACPC,SAAU,YAEdC,cAAe,CACXC,OAAQC,GAAA,UAEZC,gBAAiB,CACb5C,MAAO6C,GAAA,SACP/C,SAAUgD,GAAA,UAEdzD,eAAgB,CACZmD,SAAU,WACV8c,UAAW,SCRnB,MAAMC,WAA0B,cAC5B,YAAY3jB,GACRoH,MAAMpH,GACNuF,KAAKxF,MAAQ,CACTsH,QAAS,GACTC,KAAM,IAEV/B,KAAKkC,UAAY,KACb,MAAM,uBAAE0X,EAAyB,OAAiB,SAAE5C,EAAQ,cAAE7U,EAAa,YAAEuU,EAAW,MAAEvc,EAAK,OAAE2B,EAAM,cAAEsG,EAAa,WAAE8U,EAAU,EAAE3a,GAAOyD,KAAKvF,MAChJ,IAAKN,IAAU2B,EACX,OAEJ,MAAMiG,EAAO,GACPD,EAAU,GACVO,EAAYvF,EAAmB3C,EAAM8H,UACrCqY,EAAata,KAAKua,gBAClBjY,EAAgBtC,KAAKuC,mBAEvBD,GAAiBgY,EACjBxY,EAAQ4B,KAAK,CACT/G,MAAoBJ,EAAb+d,EAAe,6BAAkC,+BAI5DxY,EAAQ4B,KAAK,CACTlB,QAAuB,YAAdH,GAA2C,QAAhBqU,EAAkC,gBAAkBrU,EACxF1F,MAAOJ,EAAE,6BAA8B,CAAEf,QAAS6G,IAClDI,WAAY,CAAC,GAAAC,UACb2b,eAAgB,CAAC,GAAAC,UAGzB,MAAM1U,GAAgB,OAA+B,CACjD9N,SACA6G,MAAOL,IAAgCgY,EAAa,eAAiBjY,GACrEgY,OAAO,IAGX,IAAK,IAAIkE,EAAc,IAAIxH,KAAKG,EAAa,aAAcqH,GAAe,IAAIxH,KAAKC,EAAW,aAAcuH,EAAYjH,QAAQiH,EAAYhH,UAAY,GAAI,CACxJ,MAAMiH,GAAQ,IAAAvH,QAAOsH,EAAa,cAE5BE,EAAY,IAAI1H,KAAKyH,EAAQ,aAC7BnF,GAAO,IAAA9B,SAAQkH,GACflF,GAAQ,IAAAnC,UAASqH,GACvB3c,EAAQ4B,KAAK,CACT/G,MAAOJ,EAAE,8BAA+B,CAAE8c,OAAME,UAChD8E,eAAgB,CAAC,GAAAC,UAErB1U,EAAchH,KAAI8b,IACDA,EAAQC,IAAIH,IAErBE,EAAQE,IAAIJ,EAAO,CACfnF,KAAMmF,OAKtB5U,EAAchH,KAAI8b,IACd,MAAM/a,EAAQ,GACd,IAAIF,EACA9D,EACA6D,EACJ,MAAMmD,EAAQqT,MAAMC,KAAKyE,EAAQja,UAAUoa,MAAK,CAACC,EAAGC,IAC5C,IAAIhI,KAAK+H,EAAEzF,MAAQ,IAAItC,KAAKgI,EAAE1F,MACvB,EAEF,IAAItC,KAAK+H,EAAEzF,MAAQ,IAAItC,KAAKgI,EAAE1F,OAC3B,EAGD,IAGf1S,EAAM/D,KAAIC,IACDlD,IACDA,EAAQkD,GAAQA,EAAKlD,OAAwB,OAAfkD,EAAKlD,MAAiBkD,EAAKlD,MAAQ,MAEhE8D,IACDA,EAAOZ,EAAKW,IAAMX,EAAKW,KAAOX,EAAKlD,MAAQ,kBAAoB,MAAO,CAAEW,MAAO,oBAA0BuC,EAAKW,IAAM,MAEnHA,IACDA,EAAKX,EAAKW,IAGdG,EAAMD,KAAK,CACP/G,MAAOkG,EAAK+W,IAA2B/W,EAAK+W,GAAwBvZ,OAC9D,QAAewC,EAAK+W,GAAwBvZ,MAAMT,OAClDrD,EAAE,yBAIhBoH,EAAMqb,QAAQ,CACVriB,MAAQ,kBAAoB,MAAO,KAC/BgD,EACA8D,KAER1B,EAAK2B,KAAK,CACNC,QACAd,KAAM8D,EAAM,GACZ9C,SAAU1B,GAAkBC,QAA8DxG,IAA7CwG,EAAc0B,MAAKC,GAAOA,EAAIP,KAAOA,SAG1F,MAAMQ,EAAc,CAChB,CACIC,YAAY,EACZN,MAAO,CACH,CACIlJ,MAAO,CAAEyJ,QAAS,GAClBvH,MAAQ,kBAAoB,EAAAwH,SAAU,KAClC,kBAAoB,MAAO,CAAE7D,MAAO,CAAE8D,UAAW,WAC7C,kBAAoB,EAAAC,QAAS,CAAE5D,KAAM,aAK7DT,KAAKsE,SAAS,CACVxC,UACAkC,cACAjC,OACAwC,OAAQ,MAGhBvE,KAAKwE,cAAgB,KACjB,MAAM,MAAErK,EAAK,GAAQ6F,KAAKvF,MAC1B,IAAK,MAAMsJ,KAAOrI,OAAO+I,OAAOtK,EAAMuK,WAClC,GAAY,MAARX,EACA,OAAO,kBAAoB,KAAkB,CAAEzE,OAAQyE,EAAKY,YAAY,IAGhF,OAAQ,kBAAoB,EAAAC,WAAY,KACpC,kBAAoB,EAAAC,eAAgB,CAAEC,KAAM,QAC5C,kBAAoB,EAAAC,eAAgB,KAAMxI,EAAE,2BAEpDyD,KAAKua,cAAgB,KACjB,MAAM,MAAEpgB,GAAU6F,KAAKvF,MACvB,IAAI6f,EACJ,IAAK,MAAM9e,KAAWE,OAAOsJ,KAAK7K,EAAM8H,UACpC,GAAIzG,IAAY,KAAc,CAC1B8e,EAAangB,EAAM8H,SAAS,MAC5B,MAGR,OAAOqY,GAEXta,KAAKuC,iBAAmB,KACpB,MAAM,MAAEpI,GAAU6F,KAAKvF,MACvB,IAAI6H,EACJ,IAAK,MAAM9G,KAAWE,OAAOsJ,KAAK7K,EAAM8H,UAAW,CAC/C,MAAMgD,EAAWzJ,EAAQ0J,QAAQ,KACjC,IAAkB,IAAdD,EAAiB,CACjB3C,EAAgB9G,EAAQ2J,UAAUF,EAAW,YAC7C,OAGR,OAAO3C,GAEXtC,KAAK+F,UAAY,KACb,MAAM,MAAE5L,GAAU6F,KAAKvF,OACjB,QAAEqH,GAAY9B,KAAKxF,MACzB,IAAIsI,GAAS,EACTkD,EAAY,GAAAC,gBAAA,IAChB,IAAK,MAAMH,KAAOpK,OAAOsJ,KAAK7K,EAAM+L,UAAW,CAC3C,IAAIC,EAAI,EACR,IAAK,MAAMC,KAAUtE,EAAS,CAC1B,GAAIsE,EAAO5D,UAAYsD,EAAK,CACxBE,EAAoC,QAAxB7L,EAAM+L,SAASJ,GAAiB,GAAAG,gBAAA,IAAsB,GAAAA,gBAAA,KAClEnD,EAAQqD,EAAI,EACZ,MAEJA,KAGR,OAAOrD,GAAS,EAAI,CAAEA,QAAOkD,aAAc,IAE/ChG,KAAKsG,eAAiB,CAACC,EAAOC,EAAYC,KACtC,MAAM,WAAEC,GAAe1G,KAAKvF,MAC5B,IAAIsH,EACA4E,EAAQ,IACG,IAAXF,EACA1E,EAAO/B,KAAKxF,MAAMuH,KAAKa,KAAIgE,IACvBA,EAAI/C,SAAW2C,EACRI,MAIX7E,EAAO,IAAI/B,KAAKxF,MAAMuH,MACtBA,EAAK0E,GAAO5C,SAAW2C,EACvBG,EAAQ,CAAC5E,EAAK0E,GAAO5D,OAEzB7C,KAAKsE,SAAS,CAAEvC,SAAQ,KAChB2E,GACAA,EAAWC,EAAOH,OAI9BxG,KAAK6G,aAAe,CAACN,EAAOzD,EAAOkD,KAC/B,MAAM,OAAEc,GAAW9G,KAAKvF,OAClB,QAAEqH,GAAY9B,KAAKxF,MACrBsM,GAGAA,EAFgBhF,EAAQgB,EAAQ,GAAGN,QACXwD,IAAc,GAAAC,gBAAA,MAI9CjG,KAAKsG,eAAiBtG,KAAKsG,eAAeS,KAAK/G,MAC/CA,KAAK6G,aAAe7G,KAAK6G,aAAaE,KAAK/G,MAE/C,oBACIA,KAAKkC,YAET,mBAAmB8E,GACf,MAAM,MAAE7M,EAAK,OAAE2B,EAAM,cAAEsG,GAAkBpC,KAAKvF,MACxCwM,EAAgBnL,GAAUA,EAAOoL,KAAOC,KAAK/M,UAAU0B,EAAOoL,MAAQ,GACtEE,EAAiBJ,EAAUlL,QAAUkL,EAAUlL,OAAOoL,KAAOC,KAAK/M,UAAU4M,EAAUlL,OAAOoL,MAAQ,IACvG,SAASF,EAAU7M,UAAW,SAASA,IACvCiN,IAAmBH,GACnBD,EAAU5E,gBAAkBA,GAC5BpC,KAAKkC,YAGb,SACI,MAAM,UAAEmF,GAAcrH,KAAKvF,OACrB,QAAEqH,EAAO,YAAEkC,EAAW,KAAEjC,GAAS/B,KAAKxF,MAC5C,OAAQ,kBAAoB,MAAO,CAAE8F,MAAO,mBACxC,kBAAoB,GAAAgH,MAAO,CAAE,aAAc,iBAAkBC,cAAc,EAAO5D,MAAO7B,EAAS+D,UAAW,wBAAyB9D,KAAMsF,EAAYrD,EAAcjC,EAAMwC,OAAQvE,KAAK+F,YAAayB,SAAUH,OAAYzL,EAAYoE,KAAKsG,eAAgBQ,OAAQ9G,KAAK6G,cACtQ,kBAAoB,GAAAa,YAAa,MACjC,kBAAoB,GAAAC,UAAW,OACnC7G,QAAwB,IAAhBiB,EAAK6F,SAAiB,kBAAoB,MAAO,CAAEtH,MAAO,eAAqBN,KAAKwE,mBAIxG,MAAM,IAAkB,SAAsB,CAAChK,EAAOC,KAClD,MAAMsS,GAAiB,QAAW1R,SAASC,QACrCsb,EAAYC,GAAoB9J,IAChC,SAAEiK,EAAQ,WAAEE,GAAeP,GAAa5J,GAC9C,MAAO,CACH6J,YACAI,WACAE,iBAIF+H,IAAuB,IAAAlkB,SAAQ,GADV,GACE,CAA6CqjB,IACpEc,IAAgB,IAAApkB,kBAAA,CAAkBmkB,IC/PjC,MAAME,WAA4B,cACrC,cACItd,SAASmG,WACThI,KAAKiI,aAAe,GACpBjI,KAAKxF,MAAQkB,OAAOC,OAAO,GAAIqE,KAAKiI,cAExC,SACI,MAAM,cAAE9F,EAAa,qBAAEid,EAAoB,iBAAE7W,EAAgB,aAAEC,EAAY,WAAEC,EAAU,eAAEC,EAAc,gBAAEC,EAAe,WAAE9K,EAAU,cAAEuE,GAAmBpC,KAAKvF,MAC9J,OAAQ,kBAAoB,KAAa,CAAE0H,cAAeA,EAAeid,qBAAsBA,EAAsB7W,iBAAkBA,EAAkBC,aAAcA,EAAcC,WAAYA,EAAYC,eAAgBA,EAAgBC,gBAAiBA,EAAiB9K,WAAYA,EAAYuE,cAAeA,EAAe0G,gBAAgB,EAAMC,YAAY,KAI/W,MAAM,IAAkB,SAAsB,CAACvO,EAAOC,KAC3C,MAKL4kB,IAAyB,IAAAtkB,SAAQ,GAHZ,GAGI,CAA6CokB,IACtEG,IAAkB,IAAAxkB,kBAAA,CAAkBukB,ICE1C,MAAME,WAAiB,cACnB,YAAYhW,EAAYC,GACpB3H,MAAM0H,EAAYC,GAClBxJ,KAAKiI,aAAe,CAChBnG,QAAS,GACTK,eAAe,EACfsH,mBAAmB,EACnB1H,KAAM,GACNK,cAAe,IAEnBpC,KAAKxF,MAAQkB,OAAOC,OAAO,GAAIqE,KAAKiI,cACpCjI,KAAK0J,iBAAmB,KACpB,MAAM,MAAEvP,EAAK,OAAE2B,GAAWkE,KAAKvF,MACzB4H,EAAYvF,EAAmB3C,EAAM8H,UACrCK,GAAgB,QAAiBnI,GACvC,OAAO,OAA+B,CAClC2B,SACA6G,MAAOL,GAAiBD,KAGhCrC,KAAK2J,eAAkBC,IACnB,MAAM,YAAE8M,EAAW,MAAEvc,EAAK,OAAE2B,GAAWkE,KAAKvF,OACtC,cAAE0H,EAAa,kBAAEsH,EAAiB,cAAErH,GAAkBpC,KAAKxF,MAC3D6H,EAAYvF,EAAmB3C,EAAM8H,UACrCK,GAAgB,QAAiBnI,GACjCsO,EAAa3M,GAAUA,EAAOoE,KAAOpE,EAAOoE,KAAKC,MAAQ,EAC/D,OAAQ,kBAAoB,IAAa,CAAE0J,YAAa1H,GAAiBC,EAAcwF,SAAWa,IAAemB,EAAchC,OAAS,EAAGpM,QAAS8G,EAAgB,GAAG,MAAYA,IAAkBD,EAAWuB,OAAQ6F,EAAmB9C,MAAOvE,EAAe0H,QAAS9J,KAAK+J,uBAAwB5P,MAAOA,EAAOiB,gBAAiByc,GAAmBnB,MAE7V1W,KAAKgK,cAAgB,CAACC,GAAW,KAC7B,MAAM,OAAEnO,GAAWkE,KAAKvF,MAClB0F,EAAQrE,GAAUA,EAAOoE,KAAOpE,EAAOoE,KAAKC,MAAQ,EACpDiJ,EAAQtN,GAAUA,EAAOoE,MAAQpE,EAAOoE,KAAKZ,QAAUxD,EAAOoE,KAAKZ,OAAO8J,MAC1EtN,EAAOoE,KAAKZ,OAAO8J,MACnBhK,EAAUE,OAAO8J,MAIjBc,GAHSpO,GAAUA,EAAOoE,MAAQpE,EAAOoE,KAAKZ,QAAUxD,EAAOoE,KAAKZ,OAAO+J,OAC3EvN,EAAOoE,KAAKZ,OAAO+J,OACnBjK,EAAUE,OAAO+J,QACDD,EAAQ,EAC9B,OAAQ,kBAAoB,EAAAe,WAAY,CAAEC,WAAYH,EAAUI,UAAWlK,EAAOmK,gBAAiBtK,KAAKuK,oBAAqBC,UAAWxK,KAAKyK,cAAeP,KAAMA,EAAMQ,QAAStB,EAAOuB,QAASV,EAAW,EAAAW,kBAAA,OAA2B,EAAAA,kBAAA,IAAuBC,SAAU,8CAE5Q7K,KAAK8K,SAAW,KACZ,MAAM,YAAE4L,EAAW,MAAEvc,EAAK,OAAE2B,EAAM,kBAAEE,GAAsBgE,KAAKvF,OACzD,cAAE0H,EAAa,cAAEC,GAAkBpC,KAAKxF,MACxC6H,EAAYvF,EAAmB3C,EAAM8H,UACrCK,GAAgB,QAAiBnI,GACvC,OAAQ,kBAAoB+kB,GAAe,CAAEtF,uBAAwBnD,GAA0BC,GAAclb,QAAS8G,EAAgB,GAAG,MAAYA,IAAkBD,EAAWF,cAAeA,EAAekF,UAAiC,IAAtBrL,EAA0C0K,WAAY1G,KAAK+K,eAAgBjE,OAAQ9G,KAAKgL,WAAY0L,YAAaA,EAAavc,MAAOA,EAAO2B,OAAQA,EAAQsG,cAAeA,KAE1YpC,KAAKiL,WAAcrB,IACf,MAAM,OAAE9N,GAAWkE,KAAKvF,OAClB,cAAE0H,EAAa,cAAEC,GAAkBpC,KAAKxF,MACxCiO,EAAa3M,GAAUA,EAAOoE,KAAOpE,EAAOoE,KAAKC,MAAQ,EAC/D,OAAQ,kBAAoBmf,GAAiB,CAAEnd,cAAeA,EAAeoG,iBAA2C,IAAzBqB,EAAchC,SAAkBzF,GAA0C,IAAzBC,EAAcwF,OAAeY,aAAcoB,EAAchC,OAAQa,WAAYA,EAAYC,eAAgB1I,KAAKkL,mBAAoBvC,gBAAiB3I,KAAKmL,sBAAuBtN,WAAYmC,KAAKgK,gBAAiB5H,cAAeA,KAEpXpC,KAAKkL,mBAAsBI,IACvB,MAAM,cAAEnJ,GAAkBnC,KAAKxF,MAChB,SAAX8Q,EACAtL,KAAKsE,SAAS,CAAEnC,eAAe,EAAOC,cAAe,KAErC,SAAXkJ,EACLtL,KAAKsE,SAAS,CACVnC,eAAe,EACfC,cAAepC,KAAK0J,qBAGR,QAAX4B,GACLtL,KAAKsE,SAAS,CAAEnC,eAAgBA,EAAeC,cAAe,MAGtEpC,KAAK+J,uBAA0BnG,IAC3B5D,KAAKsE,SAAS,CAAEmF,kBAAmB7F,KAEvC5D,KAAKmL,sBAAwB,KACzBnL,KAAKsE,SAAS,CAAEmF,mBAAmB,KAEvCzJ,KAAKoL,kBAAoB,CAACG,EAAYC,KAClC,MAAM,QAAEC,EAAO,MAAEtR,GAAU6F,KAAKvF,MAC1BiR,GAAgB,QAAevR,EAAOoR,EAAYC,GACxDC,EAAQE,QAAQC,GAAiBH,EAASC,GAAe,KAE7D1L,KAAKqL,oBAAsB,CAACE,EAAYC,KACpC,MAAM,QAAEC,EAAO,MAAEtR,GAAU6F,KAAKvF,MAC1BiR,GAAgB,QAAkBvR,EAAOoR,EAAYC,GAC3DC,EAAQE,QAAQC,GAAiBH,EAASC,GAAe,KAE7D1L,KAAK6L,mBAAqBrQ,IACtB,MAAM,QAAEiQ,EAAO,MAAEtR,GAAU6F,KAAKvF,MAChC,IAAIqR,EAAatQ,EACboE,EAAQ,KAGG,IADDpE,EAAQ0J,QAAQ,QAE1B4G,EAAa,eAAuB,EAAG,aACvClM,EAAQpE,EAAQgkB,MAAM,cAE1B,MAAM/jB,EAAWC,OAAOC,OAAOD,OAAOC,OAAO,GAAIwL,KAAK4E,MAAM5E,KAAK/M,UAAUD,KAAU,CAAEuK,eAAW9I,EAAWqG,SAAU,CAC/G,CAAC6J,GAAalM,GACfsG,SAAU,CAAE/H,KAAM,UACzBsN,EAAQE,QAAQC,GAAiBH,EAAShQ,GAAU,IACpDuE,KAAKsE,SAAS,CAAEnC,eAAe,EAAOC,cAAe,MAEzDpC,KAAKuK,oBAAsB,CAACyB,EAAQtB,KAChC,MAAM,QAAEe,EAAO,MAAEtR,GAAU6F,KAAKvF,MAC1BgB,EAAWC,OAAOC,OAAO,GAAIwL,KAAK4E,MAAM5E,KAAK/M,UAAUD,KAC7DsB,EAAS6D,OAAS5D,OAAOC,OAAOD,OAAOC,OAAO,GAAIxB,EAAMmF,QAAS,CAAE8J,MAAOsB,IAC1E,MAAMgB,EAAgBE,GAAiBH,EAAShQ,GAAU,GAC1DgQ,EAAQE,QAAQD,IAEpB1L,KAAK+K,eAAiB,CAACpE,EAAOH,GAAa,KACvC,MAAM,cAAErE,EAAa,cAAEC,GAAkBpC,KAAKxF,MAC9C,IAAIyR,EAAW,IAAK9J,EAAgBnC,KAAK0J,mBAAqBtH,GAC1DuE,GAASA,EAAMiB,OAAS,IACpBpB,EACAG,EAAM/D,KAAIC,GAAQoJ,EAASvI,KAAKb,KAGhC8D,EAAM/D,KAAIC,IACNoJ,EAAWA,EAAS3M,QAAOyE,GAAOA,EAAIP,KAAOX,EAAKW,SAI9DxD,KAAKsE,SAAS,CAAEnC,eAAe,EAAOC,cAAe6J,KAEzDjM,KAAKyK,cAAgB,CAAClE,EAAO2F,KACzB,MAAM,QAAET,EAAO,MAAEtR,EAAK,OAAE2B,GAAWkE,KAAKvF,MAClC2O,EAAQtN,GAAUA,EAAOoE,MAAQpE,EAAOoE,KAAKZ,QAAUxD,EAAOoE,KAAKZ,OAAO8J,MAC1EtN,EAAOoE,KAAKZ,OAAO8J,MACnBhK,EAAUE,OAAO8J,MACjBC,EAAS6C,EAAa9C,EAAQA,EAC9B3N,EAAWC,OAAOC,OAAO,GAAIwL,KAAK4E,MAAM5E,KAAK/M,UAAUD,KAC7DsB,EAAS6D,OAAS5D,OAAOC,OAAOD,OAAOC,OAAO,GAAIxB,EAAMmF,QAAS,CAAE+J,WACnE,MAAMqC,EAAgBE,GAAiBH,EAAShQ,GAChDgQ,EAAQE,QAAQD,IAEpB1L,KAAKgL,WAAa,CAACmB,EAAUC,KACzB,MAAM,QAAEX,EAAO,MAAEtR,GAAU6F,KAAKvF,MAC1BgB,EAAWC,OAAOC,OAAO,GAAIwL,KAAK4E,MAAM5E,KAAK/M,UAAUD,KAC7DsB,EAASyK,SAAW,GACpBzK,EAASyK,SAASiG,GAAYC,EAAkB,MAAQ,OACxD,MAAMV,EAAgBE,GAAiBH,EAAShQ,GAChDgQ,EAAQE,QAAQD,IAGpB1L,KAAKqM,oBAAuBnQ,IACxB,IAAIoQ,GAAS,EACb,GAAIpQ,GAAaA,EAAUgL,KACvB,IAAK,MAAMqF,KAAYrQ,EAAUgL,KAC7B,GAAIqF,EAASC,mBAAoB,CAC7BF,GAAS,EACT,MAIZ,OAAOA,GAEXtM,KAAKyM,aAAe,KAChB,MAAM,YAAEiK,EAAW,YAAE7Z,EAAW,QAAE4O,EAAO,SAAEpQ,EAAQ,MAAElB,EAAK,YAAE0B,GAAgBmE,KAAKvF,MAC5EY,EAASC,OAQVuB,EAAYgb,GAAmBnB,GAAckB,GAAclB,GAAc7a,GAPzE4P,EAAQE,QAAQC,GAAiBH,EAAS,CACtC/G,UAAWvK,EAAQA,EAAMuK,eAAY9I,EACrCqG,SAAU9H,EAAQA,EAAM8H,cAAWrG,EACnCsK,SAAU,CAAE/H,KAAM,YAO9B6B,KAAKkL,mBAAqBlL,KAAKkL,mBAAmBnE,KAAK/G,MACvDA,KAAK+J,uBAAyB/J,KAAK+J,uBAAuBhD,KAAK/G,MAC/DA,KAAKmL,sBAAwBnL,KAAKmL,sBAAsBpE,KAAK/G,MAC7DA,KAAKoL,kBAAoBpL,KAAKoL,kBAAkBrE,KAAK/G,MACrDA,KAAKqL,oBAAsBrL,KAAKqL,oBAAoBtE,KAAK/G,MACzDA,KAAKuK,oBAAsBvK,KAAKuK,oBAAoBxD,KAAK/G,MACzDA,KAAK+K,eAAiB/K,KAAK+K,eAAehE,KAAK/G,MAC/CA,KAAKyK,cAAgBzK,KAAKyK,cAAc1D,KAAK/G,MAC7CA,KAAKgL,WAAahL,KAAKgL,WAAWjE,KAAK/G,MAE3C,oBACIA,KAAKyM,eAET,mBAAmBzF,EAAW0F,GAC1B,MAAM,SAAErR,EAAQ,OAAES,EAAM,YAAEC,EAAW,YAAEF,GAAgBmE,KAAKvF,OACtD,cAAE2H,GAAkBpC,KAAKxF,MACzBiB,EAAWuL,EAAUnL,cAAgBA,EACrC8Q,GAAY7Q,IAAWC,EACvB6Q,GAAcvR,EAASC,OACvB2Q,EAAWS,EAAUtK,gBAAkBA,GACzC3G,GAAYkR,GAAYC,GAAcX,IACtCjM,KAAKyM,eAGb,SACI,MAAM,aAAEuL,EAAY,eAAEO,EAAc,aAAEG,EAAY,aAAEG,EAAY,wBAAEZ,EAAuB,0BAAEO,EAAyB,wBAAEyE,EAAuB,wBAAEnE,EAAuB,YAAEpC,EAAW,sBAAEuH,EAAqB,MAAE9jB,EAAK,OAAE2B,EAAM,YAAEC,EAAW,kBAAEC,EAAiB,EAAEO,EAAC,WAAE2b,GAAgBlY,KAAKvF,MAC7Q4M,EAAwC,IAA5B4Q,GACgB,IAA9BO,GAC4B,IAA5ByE,GAC4B,IAA5BnE,GAC0B,IAA1BmF,EACE5b,EAAYvF,EAAmB3C,EAAM8H,UACrCK,GAAgB,QAAiBnI,GACjCyP,EAAgB5J,KAAK0J,mBACrBjB,EAAa3M,GAAUA,EAAOoE,KAAOpE,EAAOoE,KAAKC,MAAQ,EACzDxD,EAAQJ,EAAE,uBAEVkhB,IAAgB1F,GAAeC,EAAcC,EAAyBC,IACxEI,GAAiBC,EAAgBC,EAA2BN,IAC5DO,GAAeC,EAAcuE,EAAyB/E,IACtDU,GAAeC,EAAcC,EAAyBZ,IAE1D,OAAInc,EACO,kBAAoB,IAAc,CAAEY,MAAOA,IAE7C0K,EACE,kBAAoB,IAAS,CAAE1K,MAAOA,IAExC8gB,EACE,kBAAoB,IAAa,CAAE9gB,MAAOA,IAE1CqD,KAAKqM,oBAAoB2L,IAChChY,KAAKqM,oBAAoBkM,IACzBvY,KAAKqM,oBAAoBqM,IACzB1Y,KAAKqM,oBAAoBwM,GAGrB,kBAAoB,MAAO,CAAEvY,MAAOnD,EAAOuQ,UAC/C,kBAAoBwQ,GAAgB,CAAE1iB,QAAS8G,EAAgB,GAAG,MAAYA,IAAkBD,EAAWvC,iBAAkBE,KAAK6L,mBAAoBjD,cAAe5I,KAAKoL,kBAAmBvC,gBAAiB7I,KAAKqL,sBACnN5C,EAAa,GAAM,kBAAoB,MAAO,CAAEnI,MAAOnD,EAAOsQ,cAC1D,kBAAoB,MAAO,CAAEnN,MAAOnD,EAAOoQ,gBACvC,kBAAoBuN,GAAe,CAAElB,uBAAwBnD,GAA0BC,OAC/F,kBAAoB,MAAO,CAAEpW,MAAOnD,EAAOwQ,cACvC3N,KAAKiL,WAAWrB,GAChB5J,KAAK2J,eAAeC,GACE,IAAtB5N,EAA4C,kBAAoB,IAAS,MAAU,kBAAoB,aAAgB,KACnH,kBAAoB,MAAO,CAAEsE,MAAOnD,EAAOe,gBAAkB8B,KAAK8K,YAClE,kBAAoB,MAAO,CAAExK,MAAOnD,EAAOO,qBACvC,kBAAoB,MAAO,CAAE4C,MAAOnD,EAAOU,YAAcmC,KAAKgK,eAAc,QAbjF,kBAAoB,IAAQ,CAAErN,MAAOA,KAiBxD,MAAM,IAAkB,SAAsB,CAACnC,EAAOC,KAClD,MAAMsS,GAAiB,QAAW1R,SAASC,QACrCob,EAAcc,GAAsBzK,GACpC6J,EAAYC,GAAoB9J,IAChC,SAAEiK,EAAQ,WAAEE,GAAeP,GAAa5J,GACxC5S,EAAQ,CACVmF,OAAQ5D,OAAOC,OAAOD,OAAOC,OAAO,GAAIyD,EAAUE,QAASyN,EAAezN,QAC1EoF,UAAWqI,EAAerI,WAAatF,EAAUsF,UACjDzC,SAAU8K,EAAe9K,UAAY,CAAE,CAACwV,GAAkBf,IAAe,MAAStX,EAAU6C,SAC5FiE,SAAU6G,EAAe7G,UAAY9G,EAAU8G,SAC/CwQ,cACAE,YACAI,WACAE,cAEErb,GAAc,QAASH,OAAOC,OAAOD,OAAOC,OAAO,GAAIxB,GAAQ,CAAEuc,iBAAa9a,EAAWgb,eAAWhb,KACpGR,EAAkByc,GAAmBnB,GACrCvb,EAAayc,GAAclB,GAC3B5a,EAAS,kBAA6BtB,EAAOY,EAAiBD,EAAYU,GAC1EE,EAAc,uBAAkCvB,EAAOY,EAAiBD,EAAYU,GACpFG,EAAoB,6BAAwCxB,EAAOY,EAAiBD,EAAYU,GAChG8hB,GAA0B,OAAkB,MAC5C3F,EAAe9b,EAAA,mBAAmC1B,EAAO,MAAiBmjB,GAC1E1F,EAA0B/b,EAAA,8BAA8C1B,EAAO,MAAiBmjB,GAChGC,GAA4B,OAAkB,MAC9CrF,EAAiBrc,EAAA,mBAAmC1B,EAAO,QAAqBojB,GAChFpF,EAA4Btc,EAAA,8BAA8C1B,EAAO,QAAqBojB,GACtGC,GAA0B,OAAkB,MAC5CnF,EAAexc,EAAA,mBAAmC1B,EAAO,MAAiBqjB,GAC1EZ,EAA0B/gB,EAAA,8BAA8C1B,EAAO,MAAiBqjB,GAChGC,GAA0B,OAAkB,MAC5CjF,EAAe3c,EAAA,mBAAmC1B,EAAO,MAAiBsjB,GAC1EhF,EAA0B5c,EAAA,8BAA8C1B,EAAO,MAAiBsjB,GAChGC,GAAwB,OAAmB,MAIjD,MAAO,CACH/F,eACAC,0BACA0F,0BACApF,iBACAC,4BACAoF,4BACAhH,YACA8B,eACAuE,0BACAY,0BACAhF,eACAC,0BACAgF,0BACApH,cACAvc,QACA0B,cACAC,SACAC,cACAC,oBACAkc,WAvBe,sBAAqC1d,EAAO,GAAcujB,GAwBzEC,gBAvBoB,2BAA0CxjB,EAAO,GAAcujB,GAwBnFE,sBAvB0B,iCAAgDzjB,EAAO,GAAcujB,GAwB/FA,4BAGF,GAAqB,CACvBlhB,YAAa,kBCxUjB,ID0Ue,IAAA/B,kBAAf,EAAiC,IAAAC,SAAQ,GAAiB,GAAzB,CAA6CwkB,M,4FE1UvE,MAAMpiB,EAAS,CAClBsiB,oBAAqB,CACjBrhB,QAAS,OACTC,WAAY,UAEhBqhB,iBAAkB,CACdjhB,aAAc,EACdb,Y,SAAa,SCJrB,MAAM+hB,UAAwB,cAC1B,cACI9d,SAASmG,WACThI,KAAKiI,aAAe,CAChB2X,mBAAmB,GAEvB5f,KAAKxF,MAAQkB,OAAOC,OAAO,GAAIqE,KAAKiI,cACpCjI,KAAKkb,iBAAmB,KACpB,MAAM,QAAEta,EAAO,GAAQZ,KAAKvF,MAC5B,OAAOmG,EAAQgC,KAAIwF,GAAW,kBAAoB,EAAA+S,aAAc,CAAEC,UAAW,SAAUtV,IAAKsC,EAAOxI,MAAOyb,QAAS,IAAMrb,KAAKsb,YAAYlT,EAAOxI,QAAUrD,EAAE6L,EAAOzI,WAExKK,KAAKub,gBAAkB,KACnB,MAAM,YAAEC,EAAW,QAAE5a,EAAO,EAAErE,GAAMyD,KAAKvF,MACzC,IAAIkF,EAAQ,GACZ,IAAK,MAAMyI,KAAUxH,EACjB,GAAI4a,IAAgBpT,EAAOxI,MAAO,CAC9BD,EAAQpD,EAAE6L,EAAOzI,OACjB,MAGR,OAAOA,GAEXK,KAAKsb,YAAc1b,IACf,MAAM,cAAEe,GAAkBX,KAAKvF,MAC3BkG,GACAA,EAAcf,IAGtBI,KAAKyb,aAAe,KAChBzb,KAAKsE,SAAS,CACVsb,mBAAoB5f,KAAKxF,MAAMolB,qBAGvC5f,KAAK0b,aAAekE,IAChB5f,KAAKsE,SAAS,CACVsb,uBAIZ,SACI,MAAM,WAAElf,EAAU,GAAQV,KAAKvF,OACzB,kBAAEmlB,GAAsB5f,KAAKxF,MAC7BmhB,EAAgB3b,KAAKkb,mBAC3B,OAAQ,kBAAoB,MAAO,CAAE5a,MAAOnD,EAAOsiB,qBAC/C,kBAAoB,QAAS,CAAEnf,MAAOnD,EAAOuiB,kBAAoBnjB,EAAE,+BACnE,kBAAoB,EAAAqf,SAAU,CAAEpU,SAAUxH,KAAKyb,aAAcI,OAAQ,kBAAoB,EAAAC,eAAgB,CAAEpb,WAAYA,EAAYqb,SAAU/b,KAAK0b,cAAgB1b,KAAKub,mBAAoB3X,OAAQgc,EAAmBjE,cAAeA,MAGjP,MAAMkE,GAAc,IAAA/kB,kBAAA,CAAkB6kB","file":"fa291785f432bd975587.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { CostOverviewBase } from 'pages/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCostOverviewSelectors } from 'store/costOverview/azureCostOverview';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureHistoricalDataSelectors } from 'store/historicalData/azureHistoricalData';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/details/components/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = queryFromRoute;\n    const filterBy = getGroupByValue(query);\n    const groupBy = getGroupById(query);\n    const newQuery = Object.assign(Object.assign({}, query), { [breakdownDescKey]: undefined });\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { filterBy: filterBy, groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.azure_details'),\n        filterBy,\n        groupBy,\n        historicalDataComponent: React.createElement(HistoricalData, { filterBy: filterBy, groupBy: groupBy }),\n        providers,\n        providersFetchStatus,\n        providerType: \"azure\" /* azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* azure */,\n        title: filterBy,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { GroupBy } from 'pages/details/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.azure_details')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit }, t('azure_details.total_cost')),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQueryRoute } from 'api/queries/azureQuery';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { breakdownDescKey, tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/details/components/actions/actions';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.buildCostLink = (label, description) => {\n            const { groupBy, query } = this.props;\n            const newQuery = Object.assign(Object.assign(Object.assign({}, query), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n                    [groupBy]: label,\n                } });\n            return `${paths.azureDetailsBreakdown}?${getQueryRoute(newQuery)}`;\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('azure_details.tag_column_title'),\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('azure_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('azure_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('azure_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = React.createElement(Link, { to: this.buildCostLink(label.toString(), item.id) }, label);\n                if (label === `no-${groupById}` || label === `no-${groupByTagKey}`) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('azure_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/details/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"azure\" /* azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { tagReport, t } = this.props;\n            const options = [\n                {\n                    name: t('filter_by.values.subscription_guid'),\n                    key: 'subscription_guid',\n                },\n                { name: t('filter_by.values.service_name'), key: 'service_name' },\n                {\n                    name: t('filter_by.values.resource_location'),\n                    key: 'resource_location',\n                },\n                { name: t('filter_by.values.tag'), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { addQueryFilter, getGroupByTagKey, removeQueryFilter } from 'pages/details/common/detailsUtils';\nimport { ExportModal } from 'pages/details/components/export/exportModal';\nimport Loading from 'pages/state/loading';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport NoData from '../../state/noData';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        // Ensure at least one source provider has data available\n        this.hasCurrentMonthData = () => {\n            const { providers } = this.props;\n            let result = false;\n            if (providers && providers.data) {\n                for (const provider of providers.data) {\n                    if (provider.current_month_data) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.azure_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* azure */, title: title });\n            }\n            if (!this.hasCurrentMonthData()) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getLegendData, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './historicalExplorerChart.styles';\nclass HistoricalExplorerChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.resizeObserver = noop;\n        this.navToggle = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            this.setState({ cursorVoronoiContainer, series });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.initResizeObserve = () => {\n            const containerElement = this.containerRef.current;\n            const { ResizeObserver } = window;\n            if (containerElement && ResizeObserver) {\n                const resizeObserver = new ResizeObserver(this.handleResize);\n                resizeObserver.observe(containerElement);\n                this.resizeObserver = () => resizeObserver.unobserve(containerElement);\n            }\n            else {\n                this.handleResize();\n                window.addEventListener('resize', this.handleResize);\n                this.resizeObserver = () => window.removeEventListener('resize', this.handleResize);\n                this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n            }\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (!hiddenSeries.has(index)) {\n                return (React.createElement(ChartBar, { alignment: \"start\", data: series.data, key: series.childName, name: series.childName, style: series.style }));\n            }\n            return null;\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.initResizeObserve();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.resizeObserver) {\n            this.resizeObserver();\n        }\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    // Returns domain only if max y values are zero\n    getDomain(series, hiddenSeries) {\n        let maxValue = -1;\n        let domain;\n        if (series) {\n            series.forEach((s, index) => {\n                if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                    const max = getMaxValue(s.data);\n                    maxValue = Math.max(maxValue, max);\n                }\n            });\n        }\n        if (maxValue <= 0) {\n            domain = { y: [0, 1] };\n        }\n        return domain;\n    }\n    // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n    getEvents() {\n        const { hiddenSeries, series } = this.state;\n        const result = getInteractiveLegendEvents({\n            chartNames: getChartNames(series),\n            isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n            isHidden: index => isSeriesHidden(hiddenSeries, index),\n            legendName: 'legend',\n            onLegendClick: props => this.handleLegendClick(props.index),\n        });\n        return result;\n    }\n    // This ensures we show every 3rd tick value, including the first and last value\n    //\n    // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n    getTickValues() {\n        const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n        // Find the datum with the greatest number of values\n        const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n        let datum;\n        allDatums.map(val => {\n            if (!datum || datum.length < val.length) {\n                datum = val;\n            }\n        });\n        const values = [];\n        datum.map(val => {\n            values.push(val.x);\n        });\n        // Prune tick values\n        const tickValues = [];\n        for (let i = 0; i < values.length; i++) {\n            if (i % 3 === 0 && i + 2 < values.length) {\n                tickValues.push(values[i]);\n            }\n        }\n        tickValues.push(values[values.length - 1]);\n        return tickValues;\n    }\n    getTruncatedString(str) {\n        const maxChars = 20;\n        return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 8,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: this.getTickValues() }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalExplorerChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format, startOfMonth } from 'date-fns';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'daily',\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: 'explorer.date_range.current_month_to_date', value: 'current_month_to_date' },\n    { label: 'explorer.date_range.previous_month_to_date', value: 'previous_month_to_date' },\n    { label: 'explorer.date_range.last_thirty_days', value: 'last_thirty_days' },\n    { label: 'explorer.date_range.last_sixy_days', value: 'last_sixy_days' },\n];\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure all cloud options\nexport const infrastructureAllCloudOptions = [{ label: 'explorer.perspective.all_cloud', value: 'all_cloud' }];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: 'explorer.perspective.aws', value: 'aws' }];\n// Infrastructure AWS cloud options\nexport const infrastructureAwsCloudOptions = [{ label: 'explorer.perspective.aws_cloud', value: 'aws_cloud' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: 'explorer.perspective.azure', value: 'azure' }];\n// Infrastructure Azure cloud options\nexport const infrastructureAzureCloudOptions = [{ label: 'explorer.perspective.azure_cloud', value: 'azure_cloud' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: 'explorer.perspective.gcp', value: 'gcp' }];\n// Infrastructure Ocp options\nexport const infrastructureOcpOptions = [{ label: 'explorer.perspective.ocp_usage', value: 'ocp_usage' }];\n// Ocp options\nexport const ocpOptions = [\n    { label: 'explorer.perspective.ocp', value: 'ocp' },\n    { label: 'explorer.perspective.ocp_supplementary', value: 'ocp_supplementary' },\n];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n            result = \"supplementary\" /* supplementary */;\n            break;\n        case \"aws\" /* aws */:\n        case \"all_cloud\" /* allCloud */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = queryFromRoute => {\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const today = new Date();\n    const end_date = format(today, 'yyyy-MM-dd');\n    let start_date;\n    switch (dateRange) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            today.setMonth(today.getMonth() - 1);\n            start_date = format(startOfMonth(today), 'yyyy-MM-dd');\n            break;\n        case \"last_sixy_days\" /* lastSixtyDays */:\n            today.setDate(today.getDate() - 60);\n            start_date = format(today, 'yyyy-MM-dd');\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            today.setDate(today.getDate() - 30);\n            start_date = format(today, 'yyyy-MM-dd');\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            start_date = format(startOfMonth(today), 'yyyy-MM-dd');\n            break;\n    }\n    return {\n        end_date,\n        start_date,\n    };\n};\nexport const getDateRangeDefault = queryFromRoute => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = queryFromRoute => {\n    return queryFromRoute.perspective || \"ocp\" /* ocp */;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"gcp\" /* gcp */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            result = 'subscription_guid';\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"all_cloud\" /* allCloud */:\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"all_cloud\" /* allCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            result = \"aws_cloud\" /* awsCloud */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            result = \"azure_cloud\" /* azureCloud */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            result = \"ocp_usage\" /* ocpUsage */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n            return \"aws\" /* aws */;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            return \"azure\" /* azure */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            return \"ocp\" /* ocp */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\nexport const isAwsAvailable = (awsProviders, awsProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (awsProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"aws\" /* aws */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                awsProviders !== undefined &&\n                awsProviders.meta !== undefined &&\n                awsProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isAzureAvailable = (azureProviders, azureProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (azureProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"azure\" /* azure */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                azureProviders !== undefined &&\n                azureProviders.meta !== undefined &&\n                azureProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isGcpAvailable = (gcpProviders, gcpsProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (gcpsProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"gcp\" /* gcp */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                gcpProviders !== undefined &&\n                gcpProviders.meta !== undefined &&\n                gcpProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isOcpAvailable = (ocpProviders, ocpProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (ocpProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"ocp\" /* ocp */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                ocpProviders !== undefined &&\n                ocpProviders.meta !== undefined &&\n                ocpProviders.meta.count > 0;\n    }\n    return result;\n};\n","import { Title } from '@patternfly/react-core';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery, orgUnitIdKey, parseQuery, tagPrefix } from 'api/queries/query';\nimport { isFloat, isInt } from 'components/charts/common/chartDatumUtils';\nimport { HistoricalExplorerChart } from 'components/charts/historicalExplorerChart';\nimport { format, getDate, getMonth } from 'date-fns';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatValue } from 'utils/formatValue';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { t } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = t('chart.date', { date: getDate(computedItemDate), month: getMonth(computedItemDate) });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return {\n                x: xVal,\n                y: value === null ? null : yVal,\n                date: computedItem.date,\n                key: computedItem.id,\n                name: computedItem.label || computedItem.id,\n                units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined,\n            };\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            const reportPathsType = getReportPathsType(perspective);\n            const reportType = getReportType(perspective);\n            fetchReport(reportPathsType, reportType, queryString);\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* cost */ } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = 'total';\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getChartTitle = (perspective) => {\n            let result;\n            switch (perspective) {\n                case \"all_cloud\" /* allCloud */:\n                    result = 'explorer.title.all_cloud';\n                    break;\n                case \"aws\" /* aws */:\n                    result = 'explorer.title.aws';\n                    break;\n                case \"aws_cloud\" /* awsCloud */:\n                    result = 'explorer.title.aws_cloud';\n                    break;\n                case \"azure\" /* azure */:\n                    result = 'explorer.title.azure';\n                    break;\n                case \"azure_cloud\" /* azureCloud */:\n                    result = 'explorer.title.azure_cloud';\n                    break;\n                case \"gcp\" /* gcp */:\n                    result = 'explorer.title.gcp';\n                    break;\n                case \"ocp\" /* ocp */:\n                    result = 'explorer.title.ocp';\n                    break;\n                case \"ocp_supplementary\" /* ocpSupplementary */:\n                    result = 'explorer.title.ocp_supplementary';\n                    break;\n                case \"ocp_usage\" /* ocpUsage */:\n                    result = 'explorer.title.ocp_usage';\n                    break;\n                default:\n                    result = undefined;\n                    break;\n            }\n            return result;\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                daily: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = this.getGroupByOrg();\n            const groupByTagKey = this.getGroupByTagKey();\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getGroupByOrg = () => {\n            const { query } = this.props;\n            let groupByOrg;\n            for (const groupBy of Object.keys(query.group_by)) {\n                if (groupBy === orgUnitIdKey) {\n                    groupByOrg = query.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupByOrg;\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, size: \"md\" }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, size: \"xs\" })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, t } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, t(this.getChartTitle(perspective)))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(queryFromRoute);\n    const query = {\n        filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = withRouter(withTranslation()(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isDateRangeOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isDateRangeOpen: !this.state.isDateRangeOpen,\n            });\n        };\n        this.handleToggle = isDateRangeOpen => {\n            this.setState({\n                isDateRangeOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled } = this.props;\n        const { isDateRangeOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isDateRangeOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst DateRange = withTranslation()(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/details/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getPerspectiveDefault, getRouteForQuery, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, t, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: t(`filter_by.values.${option.label}`),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: t('filter_by.values.org_unit_id'),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: t('filter_by.values.tag'), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRange = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentDateRange: value });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportPathsType, queryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, queryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, groupBy, orgReport, orgReportPathsType, perspective, query, queryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        if (prevProps.groupBy !== groupBy || prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, tagReport } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRange(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const queryString = getQuery({\n    // key_only: true\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    }\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    }\n    return {\n        dateRange,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilter = withRouter(withTranslation()(connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase)));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { GroupBy } from 'pages/details/components/groupBy/groupBy';\nimport { Perspective } from 'pages/overview/perspective';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getPerspectiveDefault, getRouteForQuery, getTagReportPathsType, infrastructureAllCloudOptions, infrastructureAwsCloudOptions, infrastructureAwsOptions, infrastructureAzureCloudOptions, infrastructureAzureOptions, infrastructureGcpOptions, infrastructureOcpOptions, isAwsAvailable, isAzureAvailable, isGcpAvailable, isOcpAvailable, ocpOptions, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDefaultPerspective = () => {\n            const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, perspective, userAccess, } = this.props;\n            if (perspective) {\n                return perspective;\n            }\n            if (isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess)) {\n                return \"ocp\" /* ocp */;\n            }\n            if (isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess)) {\n                return \"aws\" /* aws */;\n            }\n            if (isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess)) {\n                return \"azure\" /* azure */;\n            }\n            if (isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess)) {\n                return \"gcp\" /* gcp */;\n            }\n            return undefined;\n        };\n        this.getPerspective = (isDisabled) => {\n            const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, userAccess, } = this.props;\n            const { currentPerspective } = this.state;\n            const _isAwsAvailable = isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess);\n            const _isAzureAvailable = isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess);\n            const _isGcpAvailable = isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess);\n            const _isOcpAvailable = isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess);\n            if (!(_isAwsAvailable || _isAzureAvailable || _isGcpAvailable || _isOcpAvailable)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (_isOcpAvailable) {\n                options.push(...ocpOptions);\n                options.push(...infrastructureAllCloudOptions);\n            }\n            if (_isAwsAvailable) {\n                options.push(...infrastructureAwsOptions);\n            }\n            if (_isOcpAvailable && isAwsAvailable) {\n                options.push(...infrastructureAwsCloudOptions);\n            }\n            if (_isGcpAvailable) {\n                options.push(...infrastructureGcpOptions);\n            }\n            if (_isAzureAvailable) {\n                options.push(...infrastructureAzureOptions);\n            }\n            if (_isOcpAvailable && isAzureAvailable) {\n                options.push(...infrastructureAzureCloudOptions);\n            }\n            if (_isOcpAvailable) {\n                options.push(...infrastructureOcpOptions);\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective || options[0].value, isDisabled: isDisabled, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.handlePerspectiveClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: { cost: 'desc' }, perspective: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentPerspective: value });\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.getDefaultPerspective(),\n        });\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, groupBy, ocpProvidersFetchStatus, onFilterAdded, onFilterRemoved, onGroupByClicked, perspective, query, t, userAccess, } = this.props;\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess) &&\n            isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess) &&\n            isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess) &&\n            isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess));\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.explorer')),\n                React.createElement(\"div\", { style: styles.perspectiveContainer },\n                    this.getPerspective(noProviders),\n                    React.createElement(\"div\", { style: styles.groupBy },\n                        React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onItemClicked: onGroupByClicked, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, tagReportPathsType: tagReportPathsType }))),\n                React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, query: query }))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        perspective,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined }));\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = withRouter(withTranslation()(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { parseQuery } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { format, getDate, getMonth } from 'date-fns';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* cost */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, t, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const rows = [];\n            const columns = [];\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = this.getGroupByOrg();\n            const groupByTagKey = this.getGroupByTagKey();\n            // Add first column heading (i.e., name)\n            if (groupByTagKey || groupByOrg) {\n                columns.push({\n                    title: groupByOrg ? t('explorer.name_column_title') : t('explorer.tag_column_title'),\n                });\n            }\n            else {\n                columns.push({\n                    orderBy: groupById === 'account' && perspective !== \"gcp\" /* gcp */ ? 'account_alias' : groupById,\n                    title: t('explorer.name_column_title', { groupBy: groupById }),\n                    transforms: [sortable],\n                    cellTransforms: [nowrap],\n                });\n            }\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: true,\n            });\n            // Fill in missing data\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push({\n                    title: t('explorer.daily_column_title', { date, month }),\n                    cellTransforms: [nowrap],\n                });\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n            }\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc;\n                let label;\n                let id;\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!label) {\n                        label = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (!id) {\n                        id = item.id;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[computedReportItemType] && item[computedReportItemType].total\n                            ? formatCurrency(item[computedReportItemType].total.value)\n                            : t('explorer.no_data'),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        label,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    item: items[0],\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('explorer.empty_state'))));\n        };\n        this.getGroupByOrg = () => {\n            const { query } = this.props;\n            let groupByOrg;\n            for (const groupBy of Object.keys(query.group_by)) {\n                if (groupBy === orgUnitIdKey) {\n                    groupByOrg = query.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupByOrg;\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": \"explorer-table\", canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(queryFromRoute);\n    return {\n        dateRange,\n        end_date,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = withTranslation()(ExplorerTableConnect);\nexport { ExplorerTable };\n","import { DataToolbar } from 'pages/details/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, selectedItems, } = this.props;\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = withTranslation()(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { addQueryFilter, getGroupByTagKey, removeQueryFilter } from 'pages/details/common/detailsUtils';\nimport { ExportModal } from 'pages/details/components/export/exportModal';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { allUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, getRouteForQuery, isAwsAvailable, isAzureAvailable, isGcpAvailable, isOcpAvailable, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective) }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, perspective: perspective, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = getRouteForQuery(history, newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        // Ensure at least one source provider has data available\n        this.hasCurrentMonthData = (providers) => {\n            let result = false;\n            if (providers && providers.data) {\n                for (const provider of providers.data) {\n                    if (provider.current_month_data) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n        this.updateReport = () => {\n            const { perspective, fetchReport, history, location, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ocpProvidersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, t, userAccess, } = this.props;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = t('navigation.explorer');\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess) &&\n            isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess) &&\n            isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess) &&\n            isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess));\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(this.hasCurrentMonthData(awsProviders) &&\n            this.hasCurrentMonthData(azureProviders) &&\n            this.hasCurrentMonthData(gcpProviders) &&\n            this.hasCurrentMonthData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onGroupByClicked: this.handleGroupByClick, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { computedReportItemType: getComputedReportItemType(perspective) })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(queryFromRoute);\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        dateRange,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n","import Explorer from './explorer';\nexport default Explorer;\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled, t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = withTranslation()(PerspectiveBase);\nexport { Perspective };\n"],"sourceRoot":""}