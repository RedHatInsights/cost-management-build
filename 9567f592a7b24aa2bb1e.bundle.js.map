{"version":3,"sources":["webpack://koku-ui/./src/api/api.ts","webpack://koku-ui/./src/api/costModels.ts","webpack://koku-ui/./src/api/providers.ts","webpack://koku-ui/./src/api/queries/awsQuery.ts","webpack://koku-ui/./src/api/queries/azureQuery.ts","webpack://koku-ui/./src/api/queries/gcpQuery.ts","webpack://koku-ui/./src/api/queries/ocpCloudQuery.ts","webpack://koku-ui/./src/api/queries/ocpQuery.ts","webpack://koku-ui/./src/api/queries/query.ts","webpack://koku-ui/./src/api/reports/awsReports.ts","webpack://koku-ui/./src/api/reports/azureReports.ts","webpack://koku-ui/./src/api/reports/gcpReports.ts","webpack://koku-ui/./src/api/reports/ocpCloudReports.ts","webpack://koku-ui/./src/api/reports/ocpReports.ts","webpack://koku-ui/./src/components/i18n/i18nProvider.tsx","webpack://koku-ui/./src/components/i18n/i18init.ts","webpack://koku-ui/./src/pages/state/maintenance/maintenanceState.tsx","webpack://koku-ui/./src/pages/state/maintenance/index.ts","webpack://koku-ui/./src/pages/state/maintenance/maintenance.tsx","webpack://koku-ui/./src/app.tsx","webpack://koku-ui/./src/pages/costModels/createCostModelWizard/parseError.ts","webpack://koku-ui/./src/components/async/asyncComponent/asyncComponent.tsx","webpack://koku-ui/./src/components/async/asyncComponent/index.ts","webpack://koku-ui/./src/components/async/permissionsComponent/permissionsComponent.tsx","webpack://koku-ui/./src/routes.tsx","webpack://koku-ui/./src/store/common.ts","webpack://koku-ui/./src/store/costModels/actions.ts","webpack://koku-ui/./src/store/costModels/reducer.ts","webpack://koku-ui/./src/store/costModels/selectors.ts","webpack://koku-ui/./src/store/costOverview/awsCostOverview/awsCostOverviewCommon.ts","webpack://koku-ui/./src/store/costOverview/awsCostOverview/awsCostOverviewWidgets.ts","webpack://koku-ui/./src/store/costOverview/awsCostOverview/awsCostOverviewReducer.ts","webpack://koku-ui/./src/store/costOverview/awsCostOverview/awsCostOverviewSelectors.ts","webpack://koku-ui/./src/store/costOverview/azureCostOverview/azureCostOverviewCommon.ts","webpack://koku-ui/./src/store/costOverview/azureCostOverview/azureCostOverviewWidgets.ts","webpack://koku-ui/./src/store/costOverview/azureCostOverview/azureCostOverviewReducer.ts","webpack://koku-ui/./src/store/costOverview/azureCostOverview/azureCostOverviewSelectors.ts","webpack://koku-ui/./src/store/costOverview/gcpCostOverview/gcpCostOverviewCommon.ts","webpack://koku-ui/./src/store/costOverview/gcpCostOverview/gcpCostOverviewWidgets.ts","webpack://koku-ui/./src/store/costOverview/gcpCostOverview/gcpCostOverviewReducer.ts","webpack://koku-ui/./src/store/costOverview/gcpCostOverview/gcpCostOverviewSelectors.ts","webpack://koku-ui/./src/store/costOverview/ocpCostOverview/ocpCostOverviewCommon.ts","webpack://koku-ui/./src/store/costOverview/ocpCostOverview/ocpCostOverviewWidgets.ts","webpack://koku-ui/./src/store/costOverview/ocpCostOverview/ocpCostOverviewReducer.ts","webpack://koku-ui/./src/store/costOverview/ocpCostOverview/ocpCostOverviewSelectors.ts","webpack://koku-ui/./src/store/dashboard/awsCloudDashboard/awsCloudDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/awsCloudDashboard/awsCloudDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/awsCloudDashboard/awsCloudDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/awsCloudDashboard/awsCloudDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/awsCloudDashboard/awsCloudDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/azureCloudDashboard/azureCloudDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/azureCloudDashboard/azureCloudDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/azureCloudDashboard/azureCloudDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/azureCloudDashboard/azureCloudDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/azureCloudDashboard/azureCloudDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpUsageDashboard/ocpUsageDashboardReducer.ts","webpack://koku-ui/./src/store/djangoUtils/pagination.ts","webpack://koku-ui/./src/store/djangoUtils/query.ts","webpack://koku-ui/./src/store/exports/exportCommon.ts","webpack://koku-ui/./src/store/exports/exportSelectors.ts","webpack://koku-ui/./src/store/exports/exportActions.ts","webpack://koku-ui/./src/api/exports/exportUtils.ts","webpack://koku-ui/./src/api/exports/awsExport.ts","webpack://koku-ui/./src/api/exports/azureExport.ts","webpack://koku-ui/./src/api/exports/gcpExport.ts","webpack://koku-ui/./src/api/exports/ocpCloudExport.ts","webpack://koku-ui/./src/api/exports/ocpExport.ts","webpack://koku-ui/./src/store/exports/exportReducer.ts","webpack://koku-ui/./src/api/forecasts/awsCloudForecast.ts","webpack://koku-ui/./src/api/forecasts/awsForecast.ts","webpack://koku-ui/./src/api/forecasts/azureCloudForecast.ts","webpack://koku-ui/./src/api/forecasts/azureForecast.ts","webpack://koku-ui/./src/api/forecasts/gcpForecast.ts","webpack://koku-ui/./src/api/forecasts/ocpCloudForecast.ts","webpack://koku-ui/./src/api/forecasts/ocpForecast.ts","webpack://koku-ui/./src/store/forecasts/forecastCommon.ts","webpack://koku-ui/./src/store/forecasts/forecastSelectors.ts","webpack://koku-ui/./src/store/forecasts/forecastActions.ts","webpack://koku-ui/./src/api/forecasts/forecastUtils.ts","webpack://koku-ui/./src/store/forecasts/forecastReducer.ts","webpack://koku-ui/./src/store/historicalData/awsHistoricalData/awsHistoricalDataCommon.ts","webpack://koku-ui/./src/store/historicalData/awsHistoricalData/awsHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/historicalData/awsHistoricalData/awsHistoricalDataReducer.ts","webpack://koku-ui/./src/store/historicalData/awsHistoricalData/awsHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/historicalData/azureHistoricalData/azureHistoricalDataCommon.ts","webpack://koku-ui/./src/store/historicalData/azureHistoricalData/azureHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/historicalData/azureHistoricalData/azureHistoricalDataReducer.ts","webpack://koku-ui/./src/store/historicalData/azureHistoricalData/azureHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/historicalData/gcpHistoricalData/gcpHistoricalDataCommon.ts","webpack://koku-ui/./src/store/historicalData/gcpHistoricalData/gcpHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/historicalData/gcpHistoricalData/gcpHistoricalDataReducer.ts","webpack://koku-ui/./src/store/historicalData/gcpHistoricalData/gcpHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/historicalData/ocpHistoricalData/ocpHistoricalDataCommon.ts","webpack://koku-ui/./src/store/historicalData/ocpHistoricalData/ocpHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/historicalData/ocpHistoricalData/ocpHistoricalDataReducer.ts","webpack://koku-ui/./src/store/historicalData/ocpHistoricalData/ocpHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/priceList/reducer.ts","webpack://koku-ui/./src/store/priceList/actions.ts","webpack://koku-ui/./src/store/ui/uiActions.ts","webpack://koku-ui/./src/store/ui/uiReducer.ts","webpack://koku-ui/./src/store/rootReducer.ts","webpack://koku-ui/./src/store/store.ts","webpack://koku-ui/./src/store/metrics/actions.ts","webpack://koku-ui/./src/api/metrics.ts","webpack://koku-ui/./src/store/metrics/reducer.ts","webpack://koku-ui/./src/store/metrics/selectors.ts","webpack://koku-ui/./src/api/orgs/awsOrgs.ts","webpack://koku-ui/./src/store/orgs/orgCommon.ts","webpack://koku-ui/./src/store/orgs/orgSelectors.ts","webpack://koku-ui/./src/store/orgs/orgActions.ts","webpack://koku-ui/./src/api/orgs/orgUtils.ts","webpack://koku-ui/./src/store/orgs/orgReducer.ts","webpack://koku-ui/./src/store/providers/providersCommon.ts","webpack://koku-ui/./src/store/providers/providersActions.ts","webpack://koku-ui/./src/store/providers/providersReducer.ts","webpack://koku-ui/./src/store/providers/providersSelectors.ts","webpack://koku-ui/./src/store/rbac/actions.ts","webpack://koku-ui/./src/api/rbac.ts","webpack://koku-ui/./src/store/rbac/reducer.ts","webpack://koku-ui/./src/store/rbac/selectors.ts","webpack://koku-ui/./src/api/reports/awsCloudReports.ts","webpack://koku-ui/./src/api/reports/azureCloudReports.ts","webpack://koku-ui/./src/api/reports/ocpUsageReports.ts","webpack://koku-ui/./src/store/reports/reportCommon.ts","webpack://koku-ui/./src/store/reports/reportSelectors.ts","webpack://koku-ui/./src/store/reports/reportActions.ts","webpack://koku-ui/./src/api/reports/reportUtils.ts","webpack://koku-ui/./src/store/reports/reportReducer.ts","webpack://koku-ui/./src/store/sourceSettings/actions.ts","webpack://koku-ui/./src/store/sourceSettings/reducer.ts","webpack://koku-ui/./src/store/sourceSettings/selectors.ts","webpack://koku-ui/./src/api/tags/awsTags.ts","webpack://koku-ui/./src/api/tags/azureTags.ts","webpack://koku-ui/./src/api/tags/gcpTags.ts","webpack://koku-ui/./src/api/tags/ocpTags.ts","webpack://koku-ui/./src/store/tags/tagCommon.ts","webpack://koku-ui/./src/store/tags/tagSelectors.ts","webpack://koku-ui/./src/store/tags/tagActions.ts","webpack://koku-ui/./src/api/tags/tagUtils.ts","webpack://koku-ui/./src/store/tags/tagReducer.ts","webpack://koku-ui/./src/store/userAccess/userAccessCommon.ts","webpack://koku-ui/./src/store/userAccess/userAccessActions.ts","webpack://koku-ui/./src/api/userAccess.ts","webpack://koku-ui/./src/store/userAccess/userAccessReducer.ts","webpack://koku-ui/./src/store/userAccess/userAccessSelectors.ts","webpack://koku-ui/./src/utils/getBaseName.ts"],"names":["initApi","version","authInterceptor","reqConfig","Object","assign","headers","fetchCostModels","query","addCostModel","request","updateCostModel","uuid","deleteCostModel","fetchProviders","insights","window","queryString","chrome","auth","getUser","then","getQueryRoute","getQuery","parseQuery","groupByPrefix","tagPrefix","breakdownDescKey","breakdownTitleKey","orgUnitIdKey","orgUnitNameKey","tagKey","stringify","encode","indices","newQuery","filter_by","JSON","parse","key","keys","group_by","convertFilterByToGroupBy","addGroupByPrefix","length","Array","isArray","indexOf","q","addGroupByPrifix","index","filterByKey","substring","parseFilterByPrefix","groupByKey","parseGroupByPrefix","ignoreQueryPrefix","ReportTypePaths","runReport","reportType","path","I18nProvider","this","props","locale","I18nextProvider","i18n","children","use","initReactI18next","init","backend","loadPath","fallbackLng","ns","defaultNS","react","useSuspense","MaintenanceStateBase","t","Maintenance","description","Stack","StackItem","href","MaintenanceState","withTranslation","withRouter","Main","App","super","arguments","state","maintenanceMode","history","location","identifyApp","pathname","appAction","appNav","on","event","currRoute","routes","includes","navId","domEvent","push","prevProps","scrollTo","undefined","route","mapStateToProps","mapDispatchToProps","compose","connect","parseApiError","error","response","data","Error","errors","map","er","source","detail","join","message","asyncComponent","loader","LoadedComponent","Async","isLoading","Comp","default","setState","InactiveSources","Permissions","permissionsComponent","AysncComponent","PermissionsComponent","NotFound","AwsBreakdown","AwsDetails","AzureBreakdown","AzureDetails","Explorer","GcpBreakdown","GcpDetails","OcpDetails","OcpBreakdown","Overview","CostModelsDetails","CostModel","paths","awsDetails","awsDetailsBreakdown","azureDetails","azureDetailsBreakdown","costModels","explorer","gcpDetails","gcpDetailsBreakdown","ocpDetails","ocpDetailsBreakdown","overview","labelKey","component","exact","Routes","Switch","Route","createMapStateToProps","updateFilterToolbar","createAction","selectCostModel","resetCostModel","setCostModelDialog","fetchCostModelsRequest","success","fetchCostModelsSuccess","failure","fetchCostModelsFailure","createAsyncAction","dispatch","res","catch","err","updateCostModelsRequest","updateCostModelsSuccess","updateCostModelsFailure","dialog","name","isOpen","deleteCostModelsRequest","deleteCostModelsSuccess","deleteCostModelsFailure","redirectToCostModelFromSourceUuid","source_uuid","appNavClick","id","secondaryNav","addNotification","title","variant","dismissable","stateKey","defaultState","status","currentFilterType","currentFilterValue","isDialogOpen","deleteRate","deleteSource","addSource","addRate","updateRate","deleteMarkup","updateMarkup","createWizard","dialogData","update","current","delete","reducer","action","type","getType","payload","meta","costModelsState","cms","dialogs","stateName","costStatus","costError","costData","costQuery","every","updateProcessing","updateError","updateErr","selected","deleteProcessing","deleteError","awsCostOverviewStateKey","currrentId","getId","costWidget","reportPathsType","accountSummaryWidget","reportSummary","reportGroupBy","showWidgetOnGroupBy","regionSummaryWidget","serviceSummaryWidget","currentWidgets","widgets","awsCostOverviewReducer","selectAwsCostOverviewState","selectWidgets","selectWidget","selectCurrentWidgets","azureCostOverviewStateKey","azureCostOverviewReducer","selectAzureCostOverviewState","gcpCostOverviewStateKey","gcpCostOverviewReducer","selectGcpCostOverviewState","ocpCostOverviewStateKey","clusterWidget","cluster","cpuUsageWidget","usage","showCapacityOnGroupBy","memoryUsageWidget","projectSummaryWidget","usePlaceholder","ocpCostOverviewReducer","selectOcpCostOverviewState","awsCloudDashboardStateKey","awsCloudDashboardDefaultFilters","time_scope_units","time_scope_value","resolution","awsCloudDashboardTabFilters","limit","getQueryForWidget","filter","getQueryForWidgetTabs","widget","currentTab","service","tabsFilter","account","region","instance_type","getGroupByForTab","newFilter","selectAwsCloudDashboardState","selectWidgetQueries","previous","forecast","tabs","fetchWidgetForecasts","getState","forecastPathsType","forecastType","fetchWidgetReports","availableTabs","setWidgetTab","changeWidgetTab","tab","computeWidget","titleKey","details","costKey","formatOptions","fractionDigits","showUnits","showUsageFirst","showUsageLegendLabel","usageFormatOptions","usageKey","trend","computedReportItem","computedReportItemValue","topItems","chartType","costSummaryWidget","showHorizontal","computedForecastItem","dailyTitleKey","databaseWidget","networkWidget","storageWidget","awsCloudDashboardReducer","awsDashboardStateKey","awsDashboardDefaultFilters","awsDashboardTabFilters","selectAwsDashboardState","adjustContainerHeight","appNavId","viewAllPath","awsDashboardReducer","azureCloudDashboardStateKey","azureCloudDashboardDefaultFilters","azureCloudDashboardTabFilters","service_name","subscription_guid","resource_location","selectAzureCloudDashboardState","units","virtualMachineWidget","azureCloudDashboardReducer","azureDashboardStateKey","azureDashboardDefaultFilters","azureDashboardTabFilters","selectAzureDashboardState","azureDashboardReducer","gcpDashboardStateKey","gcpDashboardDefaultFilters","gcpDashboardTabFilters","project","selectGcpDashboardState","gcpDashboardReducer","ocpCloudDashboardStateKey","ocpCloudDashboardDefaultFilters","ocpCloudDashboardTabFilters","selectOcpCloudDashboardState","defaultFilter","ocpCloudDashboardReducer","ocpDashboardStateKey","ocpDashboardDefaultFilters","ocpDashboardTabFilters","node","selectOcpDashboardState","showTooltip","computedForecastInfrastructureItem","cpuWidget","requestFormatOptions","requestKey","memoryWidget","volumeWidget","ocpDashboardReducer","ocpSupplementaryDashboardStateKey","ocpSupplementaryDashboardDefaultFilters","ocpSupplementaryDashboardTabFilters","selectOcpSupplementaryDashboardState","showSupplementaryLabel","ocpSupplementaryDashboardReducer","ocpUsageDashboardStateKey","ocpUsageDashboardDefaultFilters","ocpUsageDashboardTabFilters","selectOcpUsageDashboardState","ocpUsageDashboardReducer","selectPagination","stateProjector","getPagination","page","perPage","count","urlParams","links","next","URLSearchParams","split","Number","get","first","selectQuery","params","reduce","acc","curr","search","exportStateKey","getExportId","selectExportState","selectExport","byId","selectExportFetchStatus","fetchStatus","selectExportError","fetchExportRequest","fetchExportSuccess","fetchExportFailure","exportReport","report","Date","now","timeRequested","isExportExpired","reportId","Accept","Map","exportReducer","set","ForecastTypePaths","forecastStateKey","getForecastId","selectForecastState","selectForecast","selectForecastFetchStatus","selectForecastError","fetchForecastRequest","fetchForecastSuccess","fetchForecastFailure","fetchForecast","isForecastExpired","forecastId","forecastReducer","awsHistoricalDataStateKey","computeUsageWidget","storageUsageWidget","awsHistoricalDataReducer","selectAwsHistoricalDataState","azureHistoricalDataStateKey","azureHistoricalDataReducer","selectAzureHistoricalDataState","gcpHistoricalDataStateKey","gcpHistoricalDataReducer","selectGcpHistoricalDataState","ocpHistoricalDataStateKey","ocpHistoricalDataReducer","selectOcpHistoricalDataState","rates","fetchPriceListRequest","fetchPriceListSuccess","fetchPriceListFailure","closeProvidersModal","openProvidersModal","toggleSidebar","isExportModalOpen","isProvidersModalOpen","isSidebarOpen","rootReducer","combineReducers","awsCloudDashboard","awsCostOverview","awsDashboard","awsHistoricalData","azureCloudDashboard","azureCostOverview","azureDashboard","azureHistoricalData","gcpCostOverview","gcpDashboard","gcpHistoricalData","metrics","ocpCostOverview","ocpDashboard","ocpCloudDashboard","ocpHistoricalData","ocpSupplementaryDashboard","ocpUsageDashboard","providerUuid","providers","rbac","userAccess","notifications","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","serialize","middlewares","notificationsMiddleware","configureStore","initialState","enhancer","applyMiddleware","store","createStore","Promise","reject","fetchMetricsRequest","fetchMetricsSuccess","fetchMetricsFailure","fetchMetrics","source_type","fetchRateMetrics","metricsState","metricsPayload","prev","label_metric","label_measurement","maxRate","costTypes","default_cost_type","OrgTypePaths","orgStateKey","getOrgId","orgPathsType","orgType","selectOrgState","selectOrg","selectOrgFetchStatus","selectOrgError","fetchOrgRequest","fetchOrgSuccess","fetchOrgFailure","fetchOrg","orgReport","isOrgExpired","orgId","orgReducer","addProviderKey","awsProvidersQuery","azureProvidersQuery","ocpProvidersQuery","gcpProvidersQuery","getReportId","fetchProvidersRequest","fetchProvidersSuccess","fetchProvidersFailure","providersReducer","selectProvidersState","selectAddProviderFetchStatus","selectAddProviderError","selectProviders","providerType","selectProvidersFetchStatus","selectProvidersError","fetchRbacRequest","fetchRbacSuccess","fetchRbacFailure","fetchRbac","async","_insights","getUserPermissions","user","permissions","isOrgAdmin","identity","is_org_admin","getRBAC","selectRbacState","isCostModelWritePermission","costModelPermissions","find","item","permission","startsWith","app","resource","operation","reportStateKey","selectReportState","selectReport","selectReportFetchStatus","selectReportError","fetchReportRequest","fetchReportSuccess","fetchReportFailure","fetchReport","isReportExpired","reportReducer","fetchSourcesRequest","fetchSourcesSuccess","fetchSourcesFailure","fetchSources","sources","sourcesState","srcs","TagTypePaths","tagStateKey","getTagId","tagPathsType","tagType","selectTagState","selectTag","selectTagFetchStatus","selectTagError","fetchTagRequest","fetchTagSuccess","fetchTagFailure","fetchTag","tagReport","isTagExpired","tagId","tagReducer","userAccessKey","allUserAccessQuery","fetchUserAccessRequest","fetchUserAccessSuccess","fetchUserAccessFailure","userAccessReducer","selectUserAccessState","selectUserAccess","selectUserAccessFetchStatus","selectUserAccessError","getBaseName","release","pathName","shift"],"mappings":"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","file":"9567f592a7b24aa2bb1e.bundle.js","sourcesContent":["import { authInterceptor as insightsAuthInterceptor } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport axios from 'axios';\nexport function initApi({ version }) {\n    axios.defaults.baseURL = `/api/cost-management/${version}/`;\n    axios.interceptors.request.use(authInterceptor);\n    axios.interceptors.request.use(insightsAuthInterceptor);\n}\nexport function authInterceptor(reqConfig) {\n    return Object.assign(Object.assign({}, reqConfig), { headers: Object.assign({}, reqConfig.headers) });\n}\n","import axios from 'axios';\nexport function fetchCostModels(query = '') {\n    return axios.get(`cost-models/${query && '?'}${query}`);\n}\nexport function fetchCostModel(uuid) {\n    return axios.get(`cost-models/${uuid}/`);\n}\nexport function addCostModel(request) {\n    return axios.post('cost-models/', request);\n}\nexport function updateCostModel(uuid, request) {\n    return axios.put(`cost-models/${uuid}/`, request);\n}\nexport function deleteCostModel(uuid) {\n    return axios.delete(`cost-models/${uuid}/`);\n}\n","import axios from 'axios';\nexport function fetchProviders(query) {\n    const insights = window.insights;\n    const queryString = query ? `?${query}` : '';\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`sources/${queryString}`);\n        });\n    }\n    else {\n        return axios.get(`sources/${queryString}`);\n    }\n}\n","import * as utils from './query';\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import { parse, stringify } from 'qs';\nexport const groupByPrefix = 'or:'; // logical OR ('or:') or AND ('and:') prefix for group_by\nexport const tagPrefix = 'tag:'; // Tag prefix for group_by\nexport const breakdownDescKey = 'breakdown_desc'; // Used to display a description in the breakdown header\nexport const breakdownGroupByKey = 'breakdown_group_by'; // Used to display a breadcrumb in the breakdown header\nexport const breakdownTitleKey = 'breakdown_title'; // Used to display a title in the breakdown header\nexport const orgUnitIdKey = 'org_unit_id'; // Org unit ID for group_by\nexport const orgUnitNameKey = 'org_unit_name'; // Org unit name for group_by\nexport const tagKey = 'tag'; // Tag key prefix for group_by\n// Adds group_by prefix -- https://github.com/project-koku/koku-ui/issues/704\nexport function addGroupByPrifix(query) {\n    if (!(query && query.group_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {} });\n    for (const key of Object.keys(query.group_by)) {\n        newQuery.group_by[`${groupByPrefix}${key}`] = query.group_by[key];\n    }\n    return newQuery;\n}\n// Converts filter_by props to group_by\nexport function convertFilterByToGroupBy(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: {} });\n    for (const key of Object.keys(query.filter_by)) {\n        if (!newQuery.group_by) {\n            newQuery.group_by = {};\n        }\n        newQuery.group_by[key] = query.filter_by[key];\n    }\n    return newQuery;\n}\n// Returns query without group_by prefix\nexport function getQueryRoute(query) {\n    return stringify(query, { encode: false, indices: false });\n}\n// Returns query and adds group_by prefix\nexport function getQuery(query) {\n    const newQuery = convertFilterByToGroupBy(query);\n    let addGroupByPrefix = false;\n    // Workaround for https://github.com/project-koku/koku/issues/1596\n    if (newQuery && newQuery.group_by) {\n        const keys = Object.keys(newQuery.group_by);\n        if (keys && keys.length > 1) {\n            addGroupByPrefix = true;\n        }\n        else {\n            // Find a tag (#1596) or group_by with multiple keys\n            for (const key of keys) {\n                if ((Array.isArray(newQuery.group_by[key]) && newQuery.group_by[key].length > 1) ||\n                    key.indexOf(tagPrefix) !== -1) {\n                    addGroupByPrefix = true;\n                }\n            }\n        }\n    }\n    // Skip adding group_by prefix for a single group_by\n    const q = addGroupByPrefix ? addGroupByPrifix(newQuery) : newQuery;\n    return stringify(q, { encode: false, indices: false });\n}\n// Returns query without filter_by prefix\nexport function parseFilterByPrefix(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: {} });\n    for (const key of Object.keys(query.filter_by)) {\n        const index = key.indexOf(groupByPrefix);\n        const filterByKey = index !== -1 ? key.substring(index + groupByPrefix.length) : key;\n        newQuery.filter_by[filterByKey] = query.filter_by[key];\n    }\n    return newQuery;\n}\n// Returns query without group_by prefix -- https://github.com/project-koku/koku-ui/issues/704\nexport function parseGroupByPrefix(query) {\n    if (!(query && query.group_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {} });\n    for (const key of Object.keys(query.group_by)) {\n        const index = key.indexOf(groupByPrefix);\n        const groupByKey = index !== -1 ? key.substring(index + groupByPrefix.length) : key;\n        newQuery.group_by[groupByKey] = query.group_by[key];\n    }\n    return newQuery;\n}\nexport function parseQuery(query) {\n    const newQuery = parse(query, { ignoreQueryPrefix: true });\n    return parseFilterByPrefix(parseGroupByPrefix(newQuery));\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/aws/costs/',\n    [\"database\" /* database */]: 'reports/aws/costs/',\n    [\"network\" /* network */]: 'reports/aws/costs/',\n    [\"storage\" /* storage */]: 'reports/aws/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/aws/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/azure/costs/',\n    [\"database\" /* database */]: 'reports/azure/costs/',\n    [\"network\" /* network */]: 'reports/azure/costs/',\n    [\"storage\" /* storage */]: 'reports/azure/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/azure/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/gcp/costs/',\n    [\"database\" /* database */]: 'reports/gcp/costs/',\n    [\"network\" /* network */]: 'reports/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/all/instance-types/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/all/storage/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import { i18nInit } from 'components/i18n';\nimport React from 'react';\nimport { I18nextProvider } from 'react-i18next';\nclass I18nProvider extends React.Component {\n    render() {\n        i18nInit.changeLanguage(this.props.locale);\n        return (React.createElement(I18nextProvider, { i18n: i18nInit },\n            React.createElement(React.Fragment, null, this.props.children)));\n    }\n}\nexport { I18nProvider };\n","import i18next from 'i18next';\nimport XHR from 'i18next-xhr-backend';\nimport { initReactI18next } from 'react-i18next';\nconst appPublicPath = process.env.APP_PUBLIC_PATH || '/insights/platform/cost-management';\n// For props see https://react.i18next.com/legacy-v9/i18next-instance\ni18next\n    .use(XHR)\n    .use(initReactI18next)\n    .init({\n    backend: {\n        loadPath: `${appPublicPath}/locales/{{lng}}.json`,\n    },\n    fallbackLng: 'en',\n    ns: ['default'],\n    defaultNS: 'default',\n    react: {\n        useSuspense: false,\n    },\n});\n// Must re-export -- see https://github.com/i18next/react-i18next/issues/898\nexport { i18next as i18nInit };\n","import { Stack, StackItem } from '@patternfly/react-core';\nimport { Maintenance } from '@redhat-cloud-services/frontend-components/components/Maintenance';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass MaintenanceStateBase extends React.Component {\n    render() {\n        const { t } = this.props;\n        return (React.createElement(Maintenance, { description: React.createElement(Stack, null,\n                React.createElement(StackItem, null, t('maintenance.empty_state_desc')),\n                React.createElement(StackItem, null,\n                    t('maintenance.empty_state_info'),\n                    \" \",\n                    React.createElement(\"a\", { href: \"https://status.redhat.com\" }, \"status.redhat.com\"),\n                    \".\"),\n                React.createElement(StackItem, null, t('maintenance.empty_state_thanks'))) }));\n    }\n}\nconst MaintenanceState = withTranslation()(MaintenanceStateBase);\nexport { MaintenanceState };\n","import Maintenance from './maintenance';\nexport default Maintenance;\n","import { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { MaintenanceState } from './maintenanceState';\nconst Maintenance = () => {\n    return (React.createElement(Main, null,\n        React.createElement(MaintenanceState, null)));\n};\nexport default withRouter(Maintenance);\n","import { I18nProvider } from 'components/i18n';\nimport Maintenance from 'pages/state/maintenance';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { createMapStateToProps } from 'store/common';\nimport { Routes, routes } from './routes';\nexport class App extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Todo: Will Insights provide a flag to enable maintenance mode?\n        // https://docs.google.com/document/d/1VLs7vFczWUzyIpH6EUsTEpJugDsjeuh4a_azs6IJbC0/edit#\n        this.state = { locale: 'en', maintenanceMode: false };\n    }\n    componentDidMount() {\n        const { history, location } = this.props;\n        insights.chrome.init();\n        insights.chrome.identifyApp('cost-management');\n        if (location && location.pathname) {\n            insights.chrome.appAction(location.pathname);\n        }\n        this.appNav = insights.chrome.on('APP_NAVIGATION', event => {\n            const currRoute = routes.find(({ path }) => path.includes(event.navId));\n            if (event.domEvent && currRoute) {\n                history.push(currRoute.path);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { location } = this.props;\n        if (location && location.pathname !== prevProps.location.pathname) {\n            window.scrollTo(0, 0);\n            insights.chrome.appAction(location.pathname);\n        }\n    }\n    componentWillUnmount() {\n        this.appNav();\n        insights.chrome.appAction(undefined);\n    }\n    render() {\n        const { maintenanceMode } = this.state;\n        const route = maintenanceMode ? React.createElement(Maintenance, null) : React.createElement(Routes, null);\n        return React.createElement(I18nProvider, { locale: this.state.locale }, route);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = { history };\nexport default compose(withRouter, connect(mapStateToProps, mapDispatchToProps))(App);\n","export const parseApiError = error => {\n    if (error.response && error.response.data) {\n        if (error.response.data.Error) {\n            return error.response.data.Error;\n        }\n        if (error.response.data.errors) {\n            return error.response.data.errors.map(er => `${er.source}: ${er.detail}`).join(', ');\n        }\n    }\n    else if (error.message) {\n        return error.message;\n    }\n    return 'unknown';\n};\n","import React from 'react';\nexport function asyncComponent(loader) {\n    let LoadedComponent = null;\n    class Async extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                isLoading: !LoadedComponent,\n            };\n        }\n        componentDidMount() {\n            if (!this.state.isLoading) {\n                return;\n            }\n            loader().then(Comp => {\n                LoadedComponent = Comp.default ? Comp.default : Comp;\n                this.setState({ isLoading: false });\n            });\n        }\n        render() {\n            const { isLoading } = this.state;\n            return isLoading ? null : React.createElement(LoadedComponent, Object.assign({}, this.props));\n        }\n    }\n    return Async;\n}\n","import { asyncComponent } from './asyncComponent';\nexport default asyncComponent;\n","import asyncComponent from 'components/async/asyncComponent';\nimport React from 'react';\nconst InactiveSources = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/sources/inactiveSources'));\nconst Permissions = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'components/async/permissionsComponent'));\n// Permissions component wrapper for AsyncComponent\nexport function permissionsComponent(AysncComponent) {\n    class PermissionsComponent extends React.Component {\n        render() {\n            return (React.createElement(Permissions, null,\n                React.createElement(InactiveSources, Object.assign({}, this.props)),\n                React.createElement(AysncComponent, Object.assign({}, this.props))));\n        }\n    }\n    return PermissionsComponent;\n}\n","import { asyncComponent } from 'components/async/asyncComponent/asyncComponent';\nimport { permissionsComponent } from 'components/async/permissionsComponent/permissionsComponent';\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nconst NotFound = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ './pages/state/notFound'));\nconst AwsBreakdown = asyncComponent(() => import(/* webpackChunkName: \"aws\" */ './pages/details/awsBreakdown'));\nconst AwsDetails = asyncComponent(() => import(/* webpackChunkName: \"aws\" */ './pages/details/awsDetails'));\nconst AzureBreakdown = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ './pages/details/azureBreakdown'));\nconst AzureDetails = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ './pages/details/azureDetails'));\nconst Explorer = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ './pages/explorer'));\nconst GcpBreakdown = asyncComponent(() => import(/* webpackChunkName: \"gcp\" */ './pages/details/gcpBreakdown'));\nconst GcpDetails = asyncComponent(() => import(/* webpackChunkName: \"gcp\" */ './pages/details/gcpDetails'));\nconst OcpDetails = asyncComponent(() => import(/* webpackChunkName: \"ocp\" */ './pages/details/ocpDetails'));\nconst OcpBreakdown = asyncComponent(() => import(/* webpackChunkName: \"ocp\" */ './pages/details/ocpBreakdown'));\nconst Overview = asyncComponent(() => import(/* webpackChunkName: \"overview\" */ './pages/overview'));\nconst CostModelsDetails = asyncComponent(() => import(/* webpackChunkName: \"costModels\" */ './pages/costModels/costModelsDetails'));\n// import(/* webpackChunkName: \"costModels\" */ './pages/costModels/costModelList')\nconst CostModel = asyncComponent(() => import(/* webpackChunkName: \"costModel\" */ './pages/costModels/costModel'));\n// For syncing with permissions\nconst paths = {\n    awsDetails: '/infrastructure/aws',\n    awsDetailsBreakdown: '/infrastructure/aws/breakdown',\n    azureDetails: '/infrastructure/azure',\n    azureDetailsBreakdown: '/infrastructure/azure/breakdown',\n    costModels: '/cost-models',\n    explorer: '/explorer',\n    gcpDetails: '/infrastructure/gcp',\n    gcpDetailsBreakdown: '/infrastructure/gcp/breakdown',\n    ocpDetails: '/ocp',\n    ocpDetailsBreakdown: '/ocp/breakdown',\n    overview: '/',\n};\nconst routes = [\n    {\n        path: paths.overview,\n        labelKey: 'navigation.overview',\n        component: permissionsComponent(Overview),\n        exact: true,\n    },\n    {\n        path: paths.costModels,\n        labelKey: 'navigation.cost_models',\n        component: permissionsComponent(CostModelsDetails),\n        exact: true,\n    },\n    {\n        path: `${paths.costModels}/:uuid`,\n        labelKey: 'navigation.cost_models',\n        component: permissionsComponent(CostModel),\n        exact: true,\n    },\n    {\n        path: paths.awsDetails,\n        labelKey: 'navigation.aws_details',\n        component: permissionsComponent(AwsDetails),\n        exact: true,\n    },\n    {\n        path: paths.awsDetailsBreakdown,\n        labelKey: 'navigation.aws_details_breakdown',\n        component: permissionsComponent(AwsBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.azureDetails,\n        labelKey: 'navigation.azure_details',\n        component: permissionsComponent(AzureDetails),\n        exact: true,\n    },\n    {\n        path: paths.azureDetailsBreakdown,\n        labelKey: 'navigation.azure_details_breakdown',\n        component: permissionsComponent(AzureBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.explorer,\n        labelKey: 'navigation.explorer',\n        component: permissionsComponent(Explorer),\n        exact: true,\n    },\n    {\n        path: paths.gcpDetails,\n        labelKey: 'navigation.gcp_details',\n        component: permissionsComponent(GcpDetails),\n        exact: true,\n    },\n    {\n        path: paths.gcpDetailsBreakdown,\n        labelKey: 'navigation.gcp_details_breakdown',\n        component: permissionsComponent(GcpBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.ocpDetails,\n        labelKey: 'navigation.ocp_details',\n        component: permissionsComponent(OcpDetails),\n        exact: true,\n    },\n    {\n        path: paths.ocpDetailsBreakdown,\n        labelKey: 'navigation.ocp_details_breakdown',\n        component: permissionsComponent(OcpBreakdown),\n        exact: true,\n    },\n];\nconst Routes = () => (React.createElement(Switch, null,\n    routes.map(route => (React.createElement(Route, Object.assign({ key: route.path }, route)))),\n    React.createElement(Route, { component: NotFound })));\nexport { paths, Routes, routes };\n","export const expirationMS = 30 * 60 * 1000; // 30 minutes\nexport function createMapStateToProps(mapStateToProps) {\n    return mapStateToProps;\n}\nexport function createMapDispatchToProps(mapDispatchToProps) {\n    return mapDispatchToProps;\n}\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { deleteCostModel as apiDeleteCostModel, fetchCostModels as apiGetCostModels, updateCostModel as apiUpdateCostModel, } from 'api/costModels';\nimport i18next from 'i18next';\nimport { createAction, createAsyncAction } from 'typesafe-actions';\nexport const updateFilterToolbar = createAction('fetch/costModels/filter')();\nexport const selectCostModel = createAction('select/costModels')();\nexport const resetCostModel = createAction('reset/costModels')();\nexport const setCostModelDialog = createAction('display/costModels/dialog')();\nexport const { request: fetchCostModelsRequest, success: fetchCostModelsSuccess, failure: fetchCostModelsFailure, } = createAsyncAction('fetch/costModels/request', 'fetch/costModels/success', 'fetch/costModels/failure')();\nexport const fetchCostModels = (query = '') => {\n    return (dispatch) => {\n        dispatch(fetchCostModelsRequest());\n        return apiGetCostModels(query)\n            .then(res => {\n            dispatch(fetchCostModelsSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchCostModelsFailure(err));\n        });\n    };\n};\nexport const { request: updateCostModelsRequest, success: updateCostModelsSuccess, failure: updateCostModelsFailure, } = createAsyncAction('update/costModels/request', 'update/costModels/success', 'update/costModels/failure')();\nexport const updateCostModel = (uuid, request, dialog = null) => {\n    return (dispatch) => {\n        dispatch(updateCostModelsRequest());\n        return apiUpdateCostModel(uuid, request)\n            .then(res => {\n            dispatch(updateCostModelsSuccess(res));\n            if (dialog !== null) {\n                fetchCostModels(`uuid=${uuid}`)(dispatch);\n                dispatch(setCostModelDialog({ name: dialog, isOpen: false }));\n            }\n        })\n            .catch(err => {\n            dispatch(updateCostModelsFailure(err));\n        });\n    };\n};\nexport const { request: deleteCostModelsRequest, success: deleteCostModelsSuccess, failure: deleteCostModelsFailure, } = createAsyncAction('delete/costModels/request', 'delete/costModels/success', 'delete/costModels/failure')();\nexport const deleteCostModel = (uuid, dialog = '', history = null) => {\n    return (dispatch) => {\n        dispatch(deleteCostModelsRequest());\n        return apiDeleteCostModel(uuid)\n            .then(() => {\n            dispatch(deleteCostModelsSuccess());\n            dispatch(resetCostModel());\n            fetchCostModels()(dispatch);\n            if (dialog !== null) {\n                if (dialog === 'deleteCostModel' && history) {\n                    history.push('/cost-models');\n                }\n                dispatch(setCostModelDialog({ name: dialog, isOpen: false }));\n            }\n        })\n            .catch(err => {\n            dispatch(deleteCostModelsFailure(err));\n        });\n    };\n};\nexport const redirectToCostModelFromSourceUuid = (source_uuid, history) => {\n    return (dispatch) => {\n        return apiGetCostModels(`source_uuid=${source_uuid}`)\n            .then(res => {\n            const uuid = res.data.data[0].uuid;\n            insights.chrome.appNavClick({ id: 'cost-models', secondaryNav: null });\n            history.push(`/cost-models/${uuid}`);\n        })\n            .catch(() => {\n            dispatch(addNotification({\n                title: i18next.t('cost_models_router.error_title'),\n                description: i18next.t('cost_models_router.server_error'),\n                variant: 'danger',\n                dismissable: true,\n            }));\n        });\n    };\n};\n","import { getType } from 'typesafe-actions';\nimport { deleteCostModelsFailure, deleteCostModelsRequest, deleteCostModelsSuccess, fetchCostModelsFailure, fetchCostModelsRequest, fetchCostModelsSuccess, resetCostModel, selectCostModel, setCostModelDialog, updateCostModelsFailure, updateCostModelsRequest, updateCostModelsSuccess, updateFilterToolbar, } from './actions';\nexport const stateKey = 'costModels';\nexport const defaultState = {\n    costModels: null,\n    error: null,\n    status: 0 /* none */,\n    currentFilterType: 'name',\n    currentFilterValue: '',\n    isDialogOpen: {\n        deleteRate: false,\n        deleteSource: false,\n        addSource: false,\n        addRate: false,\n        updateRate: false,\n        deleteCostModel: false,\n        updateCostModel: false,\n        deleteMarkup: false,\n        updateMarkup: false,\n        createWizard: false,\n    },\n    dialogData: null,\n    update: {\n        error: null,\n        status: 0 /* none */,\n        current: null,\n    },\n    delete: {\n        error: null,\n        status: 0 /* none */,\n    },\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(resetCostModel):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { current: null }) });\n        case getType(selectCostModel):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { current: action.payload }) });\n        case getType(updateCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { status: 1 /* inProgress */ }) });\n        case getType(updateCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { update: {\n                    error: null,\n                    status: 2 /* complete */,\n                    current: action.payload.data,\n                } });\n        case getType(updateCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { status: 2 /* complete */, error: action.payload }) });\n        case getType(fetchCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { currentFilterValue: '', status: 2 /* complete */, error: null, costModels: action.payload.data });\n        case getType(fetchCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        case getType(deleteCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { delete: Object.assign(Object.assign({}, state.delete), { status: 1 /* inProgress */ }) });\n        case getType(deleteCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { delete: {\n                    error: null,\n                    status: 2 /* complete */,\n                } });\n        case getType(deleteCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { delete: {\n                    status: 2 /* complete */,\n                    error: action.payload,\n                } });\n        case getType(updateFilterToolbar):\n            return Object.assign(Object.assign({}, state), action.payload);\n        case getType(setCostModelDialog):\n            return Object.assign(Object.assign({}, state), { isDialogOpen: Object.assign(Object.assign({}, state.isDialogOpen), { [action.payload.name]: action.payload.isOpen }), dialogData: action.payload.meta });\n        default:\n            return state;\n    }\n};\n","import { parseApiError } from 'pages/costModels/createCostModelWizard/parseError';\nimport { selectPagination } from 'store/djangoUtils/pagination';\nimport { selectQuery } from 'store/djangoUtils/query';\nimport { stateKey } from './reducer';\nexport const costModelsState = (state) => state[stateKey];\nexport const costModels = (state) => {\n    const cms = costModelsState(state).costModels;\n    if (cms) {\n        return cms.data;\n    }\n    return [];\n};\nexport const isDialogOpen = (state) => {\n    const dialogs = costModelsState(state).isDialogOpen;\n    return (type) => {\n        switch (type) {\n            case 'markup': {\n                const { deleteMarkup, updateMarkup } = dialogs;\n                return { deleteMarkup, updateMarkup };\n            }\n            case 'costmodel': {\n                const { deleteCostModel, updateCostModel, createWizard } = dialogs;\n                return { deleteCostModel, updateCostModel, createWizard };\n            }\n            case 'sources': {\n                const { deleteSource, addSource } = dialogs;\n                return { deleteSource, addSource };\n            }\n            case 'rate': {\n                const { addRate, updateRate, deleteRate } = dialogs;\n                return { addRate, updateRate, deleteRate };\n            }\n            default:\n                return costModelsState(state).isDialogOpen;\n        }\n    };\n};\nexport const status = (state) => costModelsState(state).status;\nexport const error = (state) => costModelsState(state).error;\nexport const stateName = (state) => {\n    const costStatus = status(state);\n    const costError = error(state);\n    const costData = costModels(state);\n    const costQuery = query(state);\n    if (costStatus !== 2 /* complete */) {\n        return 'loading';\n    }\n    if (costError !== null) {\n        return 'failure';\n    }\n    if (costData.length > 0) {\n        return 'success';\n    }\n    const hasNoFilters = Object.keys(costQuery).every(key => {\n        switch (key) {\n            case 'limit':\n                return costQuery[key] === '10';\n            case 'offset':\n                return costQuery[key] === '0';\n            default:\n                return costQuery[key] === null;\n        }\n    });\n    if (hasNoFilters) {\n        return 'empty';\n    }\n    return 'no-match';\n};\nexport const currentFilterValue = (state) => costModelsState(state).currentFilterValue;\nexport const currentFilterType = (state) => costModelsState(state).currentFilterType;\nexport const query = selectQuery((state) => costModelsState(state).costModels, [\n    'ordering',\n    'name',\n    'source_type',\n    'description',\n    'offset',\n    'limit',\n]);\nexport const pagination = selectPagination((state) => costModelsState(state).costModels);\nexport const dialogData = (state) => costModelsState(state).dialogData;\nexport const updateProcessing = (state) => costModelsState(state).update.status === 1 /* inProgress */;\nexport const updateError = (state) => {\n    const updateErr = costModelsState(state).update.error;\n    if (updateErr === null) {\n        return '';\n    }\n    return parseApiError(updateErr);\n};\nexport const selected = (state) => {\n    return costModelsState(state).update.current;\n};\nexport const deleteProcessing = (state) => costModelsState(state).delete.status === 1 /* inProgress */;\nexport const deleteError = (state) => {\n    const err = costModelsState(state).delete.error;\n    if (err === null) {\n        return '';\n    }\n    return parseApiError(err);\n};\n","export const awsCostOverviewStateKey = 'awsCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['region', 'service', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'service', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['region', 'account', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, regionSummaryWidget, serviceSummaryWidget } from './awsCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, accountSummaryWidget.id, serviceSummaryWidget.id, regionSummaryWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function awsCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { awsCostOverviewStateKey } from './awsCostOverviewCommon';\nexport const selectAwsCostOverviewState = (state) => state[awsCostOverviewStateKey];\nexport const selectWidgets = (state) => selectAwsCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsCostOverviewState(state).currentWidgets;\n","export const azureCostOverviewStateKey = 'azureCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'subscription_guid',\n        showWidgetOnGroupBy: ['resource_location', 'service_name', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'resource_location',\n        showWidgetOnGroupBy: ['subscription_guid', 'service_name', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service_name',\n        showWidgetOnGroupBy: ['resource_location', 'subscription_guid', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, regionSummaryWidget, serviceSummaryWidget, } from './azureCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, accountSummaryWidget.id, serviceSummaryWidget.id, regionSummaryWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function azureCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { azureCostOverviewStateKey } from './azureCostOverviewCommon';\nexport const selectAzureCostOverviewState = (state) => state[azureCostOverviewStateKey];\nexport const selectWidgets = (state) => selectAzureCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureCostOverviewState(state).currentWidgets;\n","export const gcpCostOverviewStateKey = 'gcpCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['region', 'account', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, regionSummaryWidget, serviceSummaryWidget } from './gcpCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, accountSummaryWidget.id, serviceSummaryWidget.id, regionSummaryWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function gcpCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { gcpCostOverviewStateKey } from './gcpCostOverviewCommon';\nexport const selectGcpCostOverviewState = (state) => state[gcpCostOverviewStateKey];\nexport const selectWidgets = (state) => selectGcpCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpCostOverviewState(state).currentWidgets;\n","export const ocpCostOverviewStateKey = 'ocpCostOverview';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const clusterWidget = {\n    id: getId(),\n    cluster: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['project'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cluster\" /* cluster */,\n};\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const cpuUsageWidget = {\n    id: getId(),\n    usage: {\n        showCapacityOnGroupBy: ['cluster'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    type: \"cpuUsage\" /* cpuUsage */,\n};\nexport const memoryUsageWidget = {\n    id: getId(),\n    usage: {\n        showCapacityOnGroupBy: ['cluster'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    type: \"memoryUsage\" /* memoryUsage */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['cluster'],\n        usePlaceholder: true,\n    },\n    reportType: \"cost\" /* cost */,\n    reportPathsType: \"ocp\" /* ocp */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { clusterWidget, costWidget, cpuUsageWidget, memoryUsageWidget, projectSummaryWidget, } from './ocpCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, clusterWidget.id, projectSummaryWidget.id, cpuUsageWidget.id, memoryUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [clusterWidget.id]: clusterWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [cpuUsageWidget.id]: cpuUsageWidget,\n        [memoryUsageWidget.id]: memoryUsageWidget,\n    },\n};\nexport function ocpCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { ocpCostOverviewStateKey } from './ocpCostOverviewCommon';\nexport const selectOcpCostOverviewState = (state) => state[ocpCostOverviewStateKey];\nexport const selectWidgets = (state) => selectOcpCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpCostOverviewState(state).currentWidgets;\n","import { getQuery } from 'api/queries/awsQuery';\nexport const awsCloudDashboardStateKey = 'awsCloudDashboard';\nexport const awsCloudDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const awsCloudDashboardTabFilters = Object.assign(Object.assign({}, awsCloudDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = awsCloudDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = awsCloudDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { awsCloudDashboardDefaultFilters, awsCloudDashboardStateKey, awsCloudDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './awsCloudDashboardCommon';\nexport const selectAwsCloudDashboardState = (state) => state[awsCloudDashboardStateKey];\nexport const selectWidgets = (state) => selectAwsCloudDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsCloudDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, awsCloudDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, awsCloudDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './awsCloudDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('awsCloudDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'aws_cloud_dashboard.compute_title',\n    reportPathsType: \"aws_cloud\" /* awsCloud */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'aws_cloud_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'aws_cloud_dashboard.usage_label',\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    tabsFilter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'aws_cloud_dashboard.compute_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsCloudDashboardTab.instanceType,\n    //   AwsCloudDashboardTab.accounts,\n    //   AwsCloudDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'aws_cloud_dashboard.cost_title',\n    forecastPathsType: \"aws_cloud\" /* awsCloud */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"aws_cloud\" /* awsCloud */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'aws_cloud_dashboard.cumulative_cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'aws_cloud_dashboard.daily_cost_trend_title',\n        titleKey: 'aws_cloud_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'aws_cloud_dashboard.database_title',\n    reportPathsType: \"aws_cloud\" /* awsCloud */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'aws_cloud_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    tabsFilter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'aws_cloud_dashboard.database_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsCloudDashboardTab.services,\n    //   AwsCloudDashboardTab.accounts,\n    //   AwsCloudDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'aws_cloud_dashboard.network_title',\n    reportPathsType: \"aws_cloud\" /* awsCloud */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'aws_cloud_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    tabsFilter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'aws_cloud_dashboard.network_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsCloudDashboardTab.services,\n    //   AwsCloudDashboardTab.accounts,\n    //   AwsCloudDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'aws_cloud_dashboard.storage_title',\n    reportPathsType: \"aws_cloud\" /* awsCloud */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'aws_cloud_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'aws_cloud_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'aws_cloud_dashboard.storage_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsCloudDashboardTab.services,\n    //   AwsCloudDashboardTab.accounts,\n    //   AwsCloudDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"accounts\" /* accounts */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './awsCloudDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './awsCloudDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function awsCloudDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/awsQuery';\nexport const awsDashboardStateKey = 'awsDashboard';\nexport const awsDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const awsDashboardTabFilters = Object.assign(Object.assign({}, awsDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = awsDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = awsDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { awsDashboardDefaultFilters, awsDashboardStateKey, awsDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './awsDashboardCommon';\nexport const selectAwsDashboardState = (state) => state[awsDashboardStateKey];\nexport const selectWidgets = (state) => selectAwsDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, awsDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, awsDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './awsDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('awsDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'aws_dashboard.compute_title',\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'aws_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'aws_dashboard.usage_label',\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    tabsFilter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'aws_dashboard.compute_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.instanceType,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'aws_dashboard.cost_title',\n    forecastPathsType: \"aws\" /* aws */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        appNavId: 'aws',\n        costKey: 'aws_dashboard.cumulative_cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        viewAllPath: paths.awsDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'aws_dashboard.daily_cost_trend_title',\n        titleKey: 'aws_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'aws_dashboard.database_title',\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'aws_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    tabsFilter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'aws_dashboard.database_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'aws_dashboard.network_title',\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'aws_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    tabsFilter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'aws_dashboard.network_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'aws_dashboard.storage_title',\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'aws_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'aws_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'aws_dashboard.storage_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"accounts\" /* accounts */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './awsDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './awsDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function awsDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/azureQuery';\nexport const azureCloudDashboardStateKey = 'azureCloudDashboard';\nexport const azureCloudDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const azureCloudDashboardTabFilters = Object.assign(Object.assign({}, azureCloudDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"service_names\" /* service_names */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service_name: widget.tabsFilter && widget.tabsFilter.service_name ? widget.tabsFilter.service_name : '*',\n            };\n        case \"subscription_guids\" /* subscription_guids */:\n            return { subscription_guid: '*' };\n        case \"resource_locations\" /* resource_locations */:\n            return { resource_location: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = azureCloudDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = azureCloudDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"service_names\" /* service_names */ &&\n        widget.tabsFilter &&\n        widget.tabsFilter.service_name) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { azureCloudDashboardDefaultFilters, azureCloudDashboardStateKey, azureCloudDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './azureCloudDashboardCommon';\nexport const selectAzureCloudDashboardState = (state) => state[azureCloudDashboardStateKey];\nexport const selectWidgets = (state) => selectAzureCloudDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureCloudDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, azureCloudDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, azureCloudDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './azureCloudDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('azureCloudDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'azure_cloud_dashboard.cost_title',\n    forecastPathsType: \"azure_cloud\" /* azureCloud */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"azure_cloud\" /* azureCloud */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'azure_cloud_dashboard.cumulative_cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'azure_cloud_dashboard.daily_cost_trend_title',\n        titleKey: 'azure_cloud_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\n        \"service_names\" /* service_names */,\n        \"subscription_guids\" /* subscription_guids */,\n        \"resource_locations\" /* resource_locations */,\n    ],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'azure_cloud_dashboard.database_title',\n    reportPathsType: \"azure_cloud\" /* azureCloud */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'azure_cloud_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    tabsFilter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'azure_cloud_dashboard.database_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureCloudDashboardTab.service_names,\n    //   AzureCloudDashboardTab.subscription_guids,\n    //   AzureCloudDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'azure_cloud_dashboard.network_title',\n    reportPathsType: \"azure_cloud\" /* azureCloud */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'azure_cloud_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'azure_cloud_dashboard.network_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureCloudDashboardTab.service_names,\n    //   AzureCloudDashboardTab.subscription_guids,\n    //   AzureCloudDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'azure_cloud_dashboard.storage_title',\n    reportPathsType: \"azure_cloud\" /* azureCloud */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'azure_cloud_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        units: 'gb-mo',\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'azure_cloud_dashboard.usage_label',\n    },\n    filter: {\n        service_name: 'Storage',\n    },\n    tabsFilter: {\n        service_name: 'Storage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'azure_cloud_dashboard.storage_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureCloudDashboardTab.service_names,\n    //   AzureCloudDashboardTab.subscription_guids,\n    //   AzureCloudDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"subscription_guids\" /* subscription_guids */,\n};\nexport const virtualMachineWidget = {\n    id: getId(),\n    titleKey: 'azure_cloud_dashboard.compute_title',\n    reportPathsType: \"azure_cloud\" /* azureCloud */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'azure_cloud_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        units: 'vm-hours',\n        usageKey: 'azure_cloud_dashboard.usage_label',\n    },\n    filter: {\n        service_name: 'Virtual Machines',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Machines',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'azure_cloud_dashboard.compute_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureCloudDashboardTab.instanceType,\n    //   AzureCloudDashboardTab.subscription_guids,\n    //   AzureCloudDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './azureCloudDashboardActions';\nimport { costSummaryWidget, databaseWidget, networkWidget, storageWidget, virtualMachineWidget, } from './azureCloudDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costSummaryWidget.id,\n        virtualMachineWidget.id,\n        storageWidget.id,\n        networkWidget.id,\n        databaseWidget.id,\n    ],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [virtualMachineWidget.id]: virtualMachineWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function azureCloudDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/azureQuery';\nexport const azureDashboardStateKey = 'azureDashboard';\nexport const azureDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const azureDashboardTabFilters = Object.assign(Object.assign({}, azureDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"service_names\" /* service_names */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service_name: widget.tabsFilter && widget.tabsFilter.service_name ? widget.tabsFilter.service_name : '*',\n            };\n        case \"subscription_guids\" /* subscription_guids */:\n            return { subscription_guid: '*' };\n        case \"resource_locations\" /* resource_locations */:\n            return { resource_location: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = azureDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = azureDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"service_names\" /* service_names */ && widget.tabsFilter && widget.tabsFilter.service_name) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { azureDashboardDefaultFilters, azureDashboardStateKey, azureDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './azureDashboardCommon';\nexport const selectAzureDashboardState = (state) => state[azureDashboardStateKey];\nexport const selectWidgets = (state) => selectAzureDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, azureDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, azureDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './azureDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('azureDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'azure_dashboard.cost_title',\n    forecastPathsType: \"azure\" /* azure */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        appNavId: 'aws',\n        costKey: 'azure_dashboard.cumulative_cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        viewAllPath: paths.azureDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'azure_dashboard.daily_cost_trend_title',\n        titleKey: 'azure_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\n        \"service_names\" /* service_names */,\n        \"subscription_guids\" /* subscription_guids */,\n        \"resource_locations\" /* resource_locations */,\n    ],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'azure_dashboard.database_title',\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'azure_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    tabsFilter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'azure_dashboard.database_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'azure_dashboard.network_title',\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'azure_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'azure_dashboard.network_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'azure_dashboard.storage_title',\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'azure_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        units: 'gb-mo',\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'azure_dashboard.usage_label',\n    },\n    filter: {\n        service_name: 'Storage',\n    },\n    tabsFilter: {\n        service_name: 'Storage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'azure_dashboard.storage_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"subscription_guids\" /* subscription_guids */,\n};\nexport const virtualMachineWidget = {\n    id: getId(),\n    titleKey: 'azure_dashboard.compute_title',\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'azure_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        units: 'vm-hours',\n        usageKey: 'azure_dashboard.usage_label',\n    },\n    filter: {\n        service_name: 'Virtual Machines',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Machines',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'azure_dashboard.compute_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.instanceType,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './azureDashboardActions';\nimport { costSummaryWidget, databaseWidget, networkWidget, storageWidget, virtualMachineWidget, } from './azureDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costSummaryWidget.id,\n        virtualMachineWidget.id,\n        storageWidget.id,\n        networkWidget.id,\n        databaseWidget.id,\n    ],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [virtualMachineWidget.id]: virtualMachineWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function azureDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/gcpQuery';\nexport const gcpDashboardStateKey = 'gcpDashboard';\nexport const gcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const gcpDashboardTabFilters = Object.assign(Object.assign({}, gcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = gcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = gcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { gcpDashboardDefaultFilters, gcpDashboardStateKey, gcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './gcpDashboardCommon';\nexport const selectGcpDashboardState = (state) => state[gcpDashboardStateKey];\nexport const selectWidgets = (state) => selectGcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, gcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, gcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './gcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('gcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'gcp_dashboard.compute_title',\n    forecastPathsType: \"gcp\" /* gcp */,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'gcp_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'gcp_dashboard.usage_label',\n    },\n    filter: {\n        service: 'Compute Engine',\n    },\n    tabsFilter: {\n        service: 'Compute Engine',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'gcp_dashboard.compute_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.instanceType,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'gcp_dashboard.cost_title',\n    forecastPathsType: \"gcp\" /* gcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        appNavId: 'gcp',\n        costKey: 'gcp_dashboard.cumulative_cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        viewAllPath: paths.gcpDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'gcp_dashboard.daily_cost_trend_title',\n        titleKey: 'gcp_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"projects\" /* projects */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'gcp_dashboard.database_title',\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'gcp_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    tabsFilter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'gcp_dashboard.database_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'gcp_dashboard.network_title',\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'gcp_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    tabsFilter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'gcp_dashboard.network_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'gcp_dashboard.storage_title',\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'gcp_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'gcp_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'gcp_dashboard.storage_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './gcpDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './gcpDashboardWidgets';\nexport const defaultState = {\n    // currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [storageWidget.id]: storageWidget,\n        [networkWidget.id]: networkWidget,\n        [databaseWidget.id]: databaseWidget,\n    },\n};\nexport function gcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpCloudQuery';\nexport const ocpCloudDashboardStateKey = 'ocpCloudDashboard';\nexport const ocpCloudDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpCloudDashboardTabFilters = Object.assign(Object.assign({}, ocpCloudDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpCloudDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpCloudDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpCloudDashboardDefaultFilters, ocpCloudDashboardStateKey, ocpCloudDashboardTabFilters, } from './ocpCloudDashboardCommon';\nexport const selectOcpCloudDashboardState = (state) => state[ocpCloudDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpCloudDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpCloudDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpCloudDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpCloudDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpCloudDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpCloudDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_cloud_dashboard.cost_title',\n    forecastPathsType: \"ocp_cloud\" /* ocpCloud */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'ocp_cloud_dashboard.cumulative_cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'ocp_cloud_dashboard.daily_cost_trend_title',\n        titleKey: 'ocp_cloud_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\n// Cloud widgets\nexport const computeWidget = {\n    id: getId(),\n    titleKey: 'ocp_cloud_dashboard.compute_title',\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: 'ocp_cloud_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'ocp_cloud_dashboard.usage_label',\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp_cloud_dashboard.compute_trend_title',\n        type: 1 /* daily */,\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: 'ocp_cloud_dashboard.database_title',\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: 'ocp_cloud_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB' +\n            'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'ocp_cloud_dashboard.database_trend_title',\n        type: 0 /* rolling */,\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: 'ocp_cloud_dashboard.network_title',\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: 'ocp_cloud_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway' +\n            'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        titleKey: 'ocp_cloud_dashboard.network_trend_title',\n        type: 0 /* rolling */,\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: 'ocp_cloud_dashboard.storage_title',\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: 'ocp_cloud_dashboard.cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'ocp_cloud_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp_cloud_dashboard.storage_trend_title',\n        type: 1 /* daily */,\n    },\n    chartType: \"trend\" /* trend */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpCloudDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './ocpCloudDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function ocpCloudDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpQuery';\nexport const ocpDashboardStateKey = 'ocpDashboard';\nexport const ocpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpDashboardTabFilters = Object.assign(Object.assign({}, ocpDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(tab) {\n    switch (tab) {\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"clusters\" /* clusters */:\n            return { cluster: '*' };\n        case \"nodes\" /* nodes */:\n            return { node: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpDashboardDefaultFilters) {\n    const query = {\n        filter,\n        group_by: getGroupByForTab(widget.currentTab),\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpDashboardDefaultFilters, ocpDashboardStateKey, ocpDashboardTabFilters, } from './ocpDashboardCommon';\nexport const selectOcpDashboardState = (state) => state[ocpDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_dashboard.cost_title',\n    forecastPathsType: \"ocp\" /* ocp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        appNavId: 'ocp',\n        costKey: 'ocp_dashboard.cumulative_cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n        showTooltip: true,\n        viewAllPath: paths.ocpDetails,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedForecastInfrastructureItem: \"infrastructure\" /* infrastructure */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'ocp_dashboard.daily_cost_trend_title',\n        titleKey: 'ocp_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"projects\" /* projects */, \"clusters\" /* clusters */],\n    chartType: \"dailyCost\" /* dailyCost */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const cpuWidget = {\n    id: getId(),\n    titleKey: 'ocp_dashboard.cpu_title',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'ocp_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp_dashboard.cpu_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const memoryWidget = {\n    id: getId(),\n    titleKey: 'ocp_dashboard.memory_title',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'ocp_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp_dashboard.memory_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const volumeWidget = {\n    id: getId(),\n    titleKey: 'ocp_dashboard.volume_title',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"volume\" /* volume */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'ocp_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp_dashboard.volume_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpDashboardActions';\nimport { costSummaryWidget, cpuWidget, memoryWidget, volumeWidget } from './ocpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, cpuWidget.id, memoryWidget.id, volumeWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [cpuWidget.id]: cpuWidget,\n        [memoryWidget.id]: memoryWidget,\n        [volumeWidget.id]: volumeWidget,\n    },\n};\nexport function ocpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpQuery';\nexport const ocpSupplementaryDashboardStateKey = 'ocpSupplementaryDashboard';\nexport const ocpSupplementaryDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpSupplementaryDashboardTabFilters = Object.assign(Object.assign({}, ocpSupplementaryDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(tab) {\n    switch (tab) {\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"clusters\" /* clusters */:\n            return { cluster: '*' };\n        case \"nodes\" /* nodes */:\n            return { node: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpSupplementaryDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpSupplementaryDashboardDefaultFilters) {\n    const query = {\n        filter,\n        group_by: getGroupByForTab(widget.currentTab),\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpSupplementaryDashboardDefaultFilters, ocpSupplementaryDashboardStateKey, ocpSupplementaryDashboardTabFilters, } from './ocpSupplementaryDashboardCommon';\nexport const selectOcpSupplementaryDashboardState = (state) => state[ocpSupplementaryDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpSupplementaryDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpSupplementaryDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpSupplementaryDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpSupplementaryDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpSupplementaryDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpSupplementaryDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_supplementary_dashboard.cost_title',\n    forecastPathsType: \"ocp\" /* ocp */,\n    forecastType: \"supplementary\" /* supplementary */,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'ocp_supplementary_dashboard.cumulative_cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    trend: {\n        computedForecastItem: \"supplementary\" /* supplementary */,\n        computedReportItem: \"supplementary\" /* supplementary */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {},\n        dailyTitleKey: 'ocp_supplementary_dashboard.daily_cost_trend_title',\n        showSupplementaryLabel: true,\n        titleKey: 'ocp_supplementary_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"projects\" /* projects */, \"clusters\" /* clusters */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const cpuWidget = {\n    id: getId(),\n    titleKey: 'ocp_supplementary_dashboard.cpu_title',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_supplementary_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'ocp_supplementary_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"none\" /* none */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp_supplementary_dashboard.cpu_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   OcpSupplementaryDashboardTab.projects,\n    //   OcpSupplementaryDashboardTab.clusters,\n    // ],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const memoryWidget = {\n    id: getId(),\n    titleKey: 'ocp_supplementary_dashboard.memory_title',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_supplementary_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'ocp_supplementary_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp_supplementary_dashboard.memory_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   OcpSupplementaryDashboardTab.projects,\n    //   OcpSupplementaryDashboardTab.clusters,\n    // ],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const volumeWidget = {\n    id: getId(),\n    titleKey: 'ocp_supplementary_dashboard.volume_title',\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"volume\" /* volume */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_supplementary_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'ocp_supplementary_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"none\" /* none */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp_supplementary_dashboard.volume_trend_title',\n        type: 1 /* daily */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    // availableTabs: [\n    //   OcpSupplementaryDashboardTab.projects,\n    //   OcpSupplementaryDashboardTab.clusters,\n    // ],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpSupplementaryDashboardActions';\nimport { costSummaryWidget, cpuWidget, memoryWidget, volumeWidget } from './ocpSupplementaryDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, cpuWidget.id, memoryWidget.id, volumeWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [cpuWidget.id]: cpuWidget,\n        [memoryWidget.id]: memoryWidget,\n        [volumeWidget.id]: volumeWidget,\n    },\n};\nexport function ocpSupplementaryDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpCloudQuery';\nexport const ocpUsageDashboardStateKey = 'ocpUsageDashboard';\nexport const ocpUsageDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpUsageDashboardTabFilters = Object.assign(Object.assign({}, ocpUsageDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(tab) {\n    switch (tab) {\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"clusters\" /* clusters */:\n            return { cluster: '*' };\n        case \"nodes\" /* nodes */:\n            return { node: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpUsageDashboardDefaultFilters) {\n    const query = {\n        filter,\n    };\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpUsageDashboardDefaultFilters) {\n    const query = {\n        filter,\n        group_by: getGroupByForTab(widget.currentTab),\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpUsageDashboardDefaultFilters, ocpUsageDashboardStateKey, ocpUsageDashboardTabFilters, } from './ocpUsageDashboardCommon';\nexport const selectOcpUsageDashboardState = (state) => state[ocpUsageDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpUsageDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpUsageDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpUsageDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpUsageDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpUsageDashboardSelectors';\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpUsageDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: 'ocp_usage_dashboard.cost_title',\n    reportPathsType: \"ocp_usage\" /* ocpUsage */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: 'ocp_usage_dashboard.cumulative_cost_label',\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedReportItem: \"infrastructure\" /* infrastructure */,\n        computedReportItemValue: \"usage\" /* usage */,\n        formatOptions: {},\n        titleKey: 'ocp_usage_dashboard.cost_trend_title',\n        type: 0 /* rolling */,\n    },\n    topItems: {\n        formatOptions: {},\n    },\n    availableTabs: [\"projects\" /* projects */, \"clusters\" /* clusters */],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const cpuWidget = {\n    id: getId(),\n    titleKey: 'ocp_usage_dashboard.cpu_title',\n    reportPathsType: \"ocp_usage\" /* ocpUsage */,\n    reportType: \"cpu\" /* cpu */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_usage_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'ocp_usage_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp_usage_dashboard.cpu_trend_title',\n        type: 1 /* daily */,\n    },\n    chartType: \"usage\" /* usage */,\n};\nexport const memoryWidget = {\n    id: getId(),\n    titleKey: 'ocp_usage_dashboard.memory_title',\n    reportPathsType: \"ocp_usage\" /* ocpUsage */,\n    reportType: \"memory\" /* memory */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_usage_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'ocp_usage_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp_usage_dashboard.memory_trend_title',\n        type: 1 /* daily */,\n    },\n    chartType: \"usage\" /* usage */,\n};\nexport const volumeWidget = {\n    id: getId(),\n    titleKey: 'ocp_usage_dashboard.volume_title',\n    reportPathsType: \"ocp_usage\" /* ocpUsage */,\n    reportType: \"volume\" /* volume */,\n    details: {\n        formatOptions: {\n            fractionDigits: 0,\n        },\n        requestFormatOptions: {\n            fractionDigits: 0,\n        },\n        requestKey: 'ocp_usage_dashboard.requests_label',\n        showUnits: true,\n        showUsageFirst: true,\n        usageFormatOptions: {\n            fractionDigits: 0,\n        },\n        usageKey: 'ocp_usage_dashboard.usage_label',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        formatOptions: {\n            fractionDigits: 2,\n        },\n        titleKey: 'ocp_usage_dashboard.volume_trend_title',\n        type: 1 /* daily */,\n    },\n    chartType: \"usage\" /* usage */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpUsageDashboardActions';\nimport { costSummaryWidget, cpuWidget, memoryWidget, volumeWidget } from './ocpUsageDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, cpuWidget.id, memoryWidget.id, volumeWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [cpuWidget.id]: cpuWidget,\n        [memoryWidget.id]: memoryWidget,\n        [volumeWidget.id]: volumeWidget,\n    },\n};\nexport function ocpUsageDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","export const selectPagination = (stateProjector) => {\n    return (state) => {\n        return getPagination(stateProjector(state));\n    };\n};\nexport const getPagination = (payload) => {\n    if (payload === null) {\n        return {\n            page: 1,\n            perPage: 1,\n            count: 0,\n        };\n    }\n    let urlParams = null;\n    if (payload.links.next !== null) {\n        urlParams = new URLSearchParams(payload.links.next.split('?')[1]);\n        const limit = Number(urlParams.get('limit'));\n        const offset = Number(urlParams.get('offset')) - limit;\n        return {\n            page: offset / limit + 1,\n            perPage: limit,\n            count: payload.meta.count,\n        };\n    }\n    if (payload.links.previous !== null) {\n        urlParams = new URLSearchParams(payload.links.previous.split('?')[1]);\n        const limit = Number(urlParams.get('limit'));\n        const offset = Number(urlParams.get('offset')) + limit;\n        return {\n            page: offset / limit + 1,\n            perPage: limit,\n            count: payload.meta.count,\n        };\n    }\n    urlParams = new URLSearchParams(payload.links.first.split('?')[1]);\n    return {\n        page: 1,\n        perPage: Number(urlParams.get('limit')),\n        count: payload.meta.count,\n    };\n};\n","export const selectQuery = (stateProjector, keys) => {\n    return (state) => {\n        const params = getQuery(stateProjector(state));\n        return keys.reduce((acc, curr) => {\n            return Object.assign(Object.assign({}, acc), { [curr]: params.get(curr) });\n        }, {});\n    };\n};\nconst getQuery = (payload) => {\n    if (payload === null) {\n        return new URLSearchParams();\n    }\n    const [, search] = payload.links.first.split('?');\n    return new URLSearchParams(search);\n};\n","export const exportStateKey = 'export';\nexport function getExportId(reportPathsType, reportType, query) {\n    return `${reportPathsType}-${reportType}--${query}`;\n}\n","import { exportStateKey, getExportId } from './exportCommon';\nexport const selectExportState = (state) => state[exportStateKey];\nexport const selectExport = (state, reportPathsType, reportType, query) => selectExportState(state).byId.get(getExportId(reportPathsType, reportType, query));\nexport const selectExportFetchStatus = (state, reportPathsType, reportType, query) => selectExportState(state).fetchStatus.get(getExportId(reportPathsType, reportType, query));\nexport const selectExportError = (state, reportPathsType, reportType, query) => selectExportState(state).errors.get(getExportId(reportPathsType, reportType, query));\n","import { runExport } from 'api/exports/exportUtils';\nimport { getExportId } from 'store/exports/exportCommon';\nimport { selectExport, selectExportFetchStatus } from 'store/exports/exportSelectors';\nimport { createAction } from 'typesafe-actions';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchExportRequest = createAction('report/request')();\nexport const fetchExportSuccess = createAction('report/success')();\nexport const fetchExportFailure = createAction('report/failure')();\nexport function exportReport(reportPathsType, reportType, query) {\n    return (dispatch, getState) => {\n        if (!isExportExpired(getState(), reportPathsType, reportType, query)) {\n            return;\n        }\n        const meta = {\n            reportId: getExportId(reportPathsType, reportType, query),\n        };\n        dispatch(fetchExportRequest(meta));\n        runExport(reportPathsType, reportType, query)\n            .then(res => {\n            dispatch(fetchExportSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchExportFailure(err, meta));\n        });\n    };\n}\nfunction isExportExpired(state, reportPathsType, reportType, query) {\n    const report = selectExport(state, reportPathsType, reportType, query);\n    const fetchStatus = selectExportFetchStatus(state, reportPathsType, reportType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!report) {\n        return true;\n    }\n    const now = Date.now();\n    return now > report.timeRequested + expirationMS;\n}\n","import { runExport as runAwsExport } from './awsExport';\nimport { runExport as runAzureExport } from './azureExport';\nimport { runExport as runGcpExport } from './gcpExport';\nimport { runExport as runOcpCloudExport } from './ocpCloudExport';\nimport { runExport as runOcpExport } from './ocpExport';\nexport function runExport(reportPathsType, reportType, query) {\n    let report;\n    switch (reportPathsType) {\n        case \"aws\" /* aws */:\n            report = runAwsExport(reportType, query);\n            break;\n        case \"azure\" /* azure */:\n            report = runAzureExport(reportType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            report = runGcpExport(reportType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            report = runOcpCloudExport(reportType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            report = runOcpExport(reportType, query);\n            break;\n    }\n    return report;\n}\n","import { ReportTypePaths } from 'api/reports/awsReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/azureReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/gcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ocpCloudReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ocpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchExportFailure, fetchExportRequest, fetchExportSuccess } from './exportActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function exportReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchExportRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchExportSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, {\n                    data: action.payload,\n                    timeRequested: Date.now(),\n                }), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchExportFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/aws/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/aws/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/azure/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/azure/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/gcp/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/all/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/costs/',\n    [\"infrastructure\" /* infrastructure */]: 'forecasts/openshift/costs/',\n    [\"supplementary\" /* supplementary */]: 'forecasts/openshift/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","export const forecastStateKey = 'forecast';\nexport function getForecastId(forecastPathsType, forecastType, query) {\n    return `${forecastPathsType}--${forecastType}--${query}`;\n}\n","import { forecastStateKey, getForecastId } from './forecastCommon';\nexport const selectForecastState = (state) => state[forecastStateKey];\nexport const selectForecast = (state, forecastPathsType, forecastType, query) => selectForecastState(state).byId.get(getForecastId(forecastPathsType, forecastType, query));\nexport const selectForecastFetchStatus = (state, forecastPathsType, forecastType, query) => selectForecastState(state).fetchStatus.get(getForecastId(forecastPathsType, forecastType, query));\nexport const selectForecastError = (state, forecastPathsType, forecastType, query) => selectForecastState(state).errors.get(getForecastId(forecastPathsType, forecastType, query));\n","import { runForecast } from 'api/forecasts/forecastUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getForecastId } from './forecastCommon';\nimport { selectForecast, selectForecastFetchStatus } from './forecastSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchForecastRequest = createAction('forecast/request')();\nexport const fetchForecastSuccess = createAction('forecast/success')();\nexport const fetchForecastFailure = createAction('forecast/failure')();\nexport function fetchForecast(forecastPathsType, forecastType, query) {\n    return (dispatch, getState) => {\n        if (!isForecastExpired(getState(), forecastPathsType, forecastType, query)) {\n            return;\n        }\n        const meta = {\n            forecastId: getForecastId(forecastPathsType, forecastType, query),\n        };\n        dispatch(fetchForecastRequest(meta));\n        runForecast(forecastPathsType, forecastType, query)\n            .then(res => {\n            dispatch(fetchForecastSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchForecastFailure(err, meta));\n        });\n    };\n}\nfunction isForecastExpired(state, forecastPathsType, forecastType, query) {\n    const forecast = selectForecast(state, forecastPathsType, forecastType, query);\n    const fetchStatus = selectForecastFetchStatus(state, forecastPathsType, forecastType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!forecast) {\n        return true;\n    }\n    const now = Date.now();\n    return now > forecast.timeRequested + expirationMS;\n}\n","import { runForecast as runAwsCloudForecast } from './awsCloudForecast';\nimport { runForecast as runAwsForecast } from './awsForecast';\nimport { runForecast as runAzureCloudForecast } from './azureCloudForecast';\nimport { runForecast as runAzureForecast } from './azureForecast';\nimport { runForecast as runGcpForecast } from './gcpForecast';\nimport { runForecast as runOcpCloudForecast } from './ocpCloudForecast';\nimport { runForecast as runOcpForecast } from './ocpForecast';\nexport function runForecast(forecastPathsType, forecastType, query) {\n    let forecast;\n    switch (forecastPathsType) {\n        case \"aws\" /* aws */:\n            forecast = runAwsForecast(forecastType, query);\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            forecast = runAwsCloudForecast(forecastType, query);\n            break;\n        case \"azure\" /* azure */:\n            forecast = runAzureForecast(forecastType, query);\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            forecast = runAzureCloudForecast(forecastType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            forecast = runGcpForecast(forecastType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            forecast = runOcpForecast(forecastType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            forecast = runOcpCloudForecast(forecastType, query);\n            break;\n    }\n    return forecast;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchForecastFailure, fetchForecastRequest, fetchForecastSuccess } from './forecastActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function forecastReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchForecastRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.forecastId, 1 /* inProgress */) });\n        case getType(fetchForecastSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.forecastId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.forecastId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.forecastId, null) });\n        case getType(fetchForecastFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.forecastId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.forecastId, action.payload) });\n        default:\n            return state;\n    }\n}\n","export const awsHistoricalDataStateKey = 'awsHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"usage\" /* usage */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"storage\" /* storage */,\n    type: \"usage\" /* usage */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './awsHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function awsHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { awsHistoricalDataStateKey } from './awsHistoricalDataCommon';\nexport const selectAwsHistoricalDataState = (state) => state[awsHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectAwsHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsHistoricalDataState(state).currentWidgets;\n","export const azureHistoricalDataStateKey = 'azureHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"usage\" /* usage */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"storage\" /* storage */,\n    type: \"usage\" /* usage */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './azureHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function azureHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { azureHistoricalDataStateKey } from './azureHistoricalDataCommon';\nexport const selectAzureHistoricalDataState = (state) => state[azureHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectAzureHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureHistoricalDataState(state).currentWidgets;\n","export const gcpHistoricalDataStateKey = 'gcpHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"trend\" /* trend */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"storage\" /* storage */,\n    type: \"trend\" /* trend */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './gcpHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function gcpHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { gcpHistoricalDataStateKey } from './gcpHistoricalDataCommon';\nexport const selectGcpHistoricalDataState = (state) => state[gcpHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectGcpHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpHistoricalDataState(state).currentWidgets;\n","export const ocpHistoricalDataStateKey = 'ocpHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const cpuUsageWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    type: \"usage\" /* usage */,\n};\nexport const memoryUsageWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    type: \"usage\" /* usage */,\n};\n","import { costWidget, cpuUsageWidget, memoryUsageWidget } from './ocpHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, cpuUsageWidget.id, memoryUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [cpuUsageWidget.id]: cpuUsageWidget,\n        [memoryUsageWidget.id]: memoryUsageWidget,\n    },\n};\nexport function ocpHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { ocpHistoricalDataStateKey } from './ocpHistoricalDataCommon';\nexport const selectOcpHistoricalDataState = (state) => state[ocpHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectOcpHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpHistoricalDataState(state).currentWidgets;\n","import { getType } from 'typesafe-actions';\nimport { fetchPriceListFailure, fetchPriceListRequest, fetchPriceListSuccess } from './actions';\nexport const stateKey = 'priceList';\nexport const defaultState = {\n    rates: new Map(),\n    error: new Map(),\n    status: new Map(),\n};\nexport function reducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchPriceListRequest):\n            return Object.assign(Object.assign({}, state), { status: new Map(state.status).set(action.payload.providerUuid, 1 /* inProgress */) });\n        case getType(fetchPriceListSuccess):\n            return Object.assign(Object.assign({}, state), { status: new Map(state.status).set(action.meta.providerUuid, 2 /* complete */), rates: new Map(state.rates).set(action.meta.providerUuid, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), error: new Map(state.error).set(action.meta.providerUuid, null) });\n        case getType(fetchPriceListFailure):\n            return Object.assign(Object.assign({}, state), { error: new Map(state.error).set(action.meta.providerUuid, action.payload), status: new Map(state.status).set(action.meta.providerUuid, 2 /* complete */) });\n        default:\n            return state;\n    }\n}\n","import { fetchRate } from 'api/rates';\nimport { expirationMS } from 'store/common';\nimport { createAction } from 'typesafe-actions';\nimport { cachedRates, status } from './selectors';\nexport const fetchPriceListRequest = createAction('priceList/request')();\nexport const fetchPriceListSuccess = createAction('priceList/success')();\nexport const fetchPriceListFailure = createAction('priceList/failure')();\nfunction isExpired(state, meta) {\n    const cachedData = cachedRates(state, meta.providerUuid);\n    const reqStatus = status(state, meta.providerUuid);\n    if (reqStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!cachedData) {\n        return true;\n    }\n    const now = Date.now();\n    return now > cachedData.timeRequested + expirationMS;\n}\nexport function fetchPriceList(providerUuid) {\n    const meta = { providerUuid };\n    return (dispatch, getState) => {\n        if (!isExpired(getState(), meta)) {\n            return;\n        }\n        dispatch(fetchPriceListRequest(meta));\n        return fetchRate(providerUuid)\n            .then(res => {\n            dispatch(fetchPriceListSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchPriceListFailure(err, meta));\n        });\n    };\n}\n","import { createAction } from 'typesafe-actions';\nexport const closeProvidersModal = createAction('ui/close_providers_modal')();\nexport const openProvidersModal = createAction('ui/open_providers_modal')();\nexport const toggleSidebar = createAction('ui/toggle_sidebar')();\n","import { getType } from 'typesafe-actions';\nimport { closeProvidersModal, openProvidersModal, toggleSidebar } from './uiActions';\nexport const defaultState = {\n    isExportModalOpen: false,\n    isProvidersModalOpen: false,\n    isSidebarOpen: false,\n};\nexport const stateKey = 'ui';\nexport function uiReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(closeProvidersModal):\n            return Object.assign(Object.assign({}, state), { isProvidersModalOpen: false });\n        case getType(openProvidersModal):\n            return Object.assign(Object.assign({}, state), { isProvidersModalOpen: true });\n        case getType(toggleSidebar):\n            return Object.assign(Object.assign({}, state), { isSidebarOpen: !state.isSidebarOpen });\n        default:\n            return state;\n    }\n}\n","import { notifications } from '@redhat-cloud-services/frontend-components-notifications';\nimport { combineReducers } from 'redux';\nimport { costModelsReducer, costModelsStateKey } from 'store/costModels';\nimport { awsCostOverviewReducer, awsCostOverviewStateKey } from 'store/costOverview/awsCostOverview';\nimport { azureCostOverviewReducer, azureCostOverviewStateKey } from 'store/costOverview/azureCostOverview';\nimport { gcpCostOverviewReducer, gcpCostOverviewStateKey } from 'store/costOverview/gcpCostOverview';\nimport { ocpCostOverviewReducer, ocpCostOverviewStateKey } from 'store/costOverview/ocpCostOverview';\nimport { awsCloudDashboardReducer, awsCloudDashboardStateKey } from 'store/dashboard/awsCloudDashboard';\nimport { awsDashboardReducer, awsDashboardStateKey } from 'store/dashboard/awsDashboard';\nimport { azureCloudDashboardReducer, azureCloudDashboardStateKey } from 'store/dashboard/azureCloudDashboard';\nimport { azureDashboardReducer, azureDashboardStateKey } from 'store/dashboard/azureDashboard';\nimport { gcpDashboardReducer, gcpDashboardStateKey } from 'store/dashboard/gcpDashboard';\nimport { ocpCloudDashboardReducer, ocpCloudDashboardStateKey } from 'store/dashboard/ocpCloudDashboard';\nimport { ocpDashboardReducer, ocpDashboardStateKey } from 'store/dashboard/ocpDashboard';\nimport { ocpSupplementaryDashboardReducer, ocpSupplementaryDashboardStateKey, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { ocpUsageDashboardReducer, ocpUsageDashboardStateKey } from 'store/dashboard/ocpUsageDashboard';\nimport { exportReducer, exportStateKey } from 'store/exports';\nimport { forecastReducer, forecastStateKey } from 'store/forecasts';\nimport { awsHistoricalDataReducer, awsHistoricalDataStateKey } from 'store/historicalData/awsHistoricalData';\nimport { azureHistoricalDataReducer, azureHistoricalDataStateKey } from 'store/historicalData/azureHistoricalData';\nimport { gcpHistoricalDataReducer, gcpHistoricalDataStateKey } from 'store/historicalData/gcpHistoricalData';\nimport { ocpHistoricalDataReducer, ocpHistoricalDataStateKey } from 'store/historicalData/ocpHistoricalData';\nimport { orgReducer, orgStateKey } from 'store/orgs';\nimport { priceListReducer, priceListStateKey } from 'store/priceList';\nimport { reportReducer, reportStateKey } from 'store/reports';\nimport { sourcesReducer, sourcesStateKey } from 'store/sourceSettings';\nimport { tagReducer, tagStateKey } from 'store/tags';\nimport { metricsReducer, metricsStateKey } from './metrics';\nimport { providersReducer, providersStateKey } from './providers';\nimport { rbacReducer, rbacStateKey } from './rbac';\nimport { uiReducer, uiStateKey } from './ui';\nimport { userAccessReducer, userAccessStateKey } from './userAccess';\nexport const rootReducer = combineReducers({\n    [awsCloudDashboardStateKey]: awsCloudDashboardReducer,\n    [awsCostOverviewStateKey]: awsCostOverviewReducer,\n    [awsDashboardStateKey]: awsDashboardReducer,\n    [awsHistoricalDataStateKey]: awsHistoricalDataReducer,\n    [azureCloudDashboardStateKey]: azureCloudDashboardReducer,\n    [azureCostOverviewStateKey]: azureCostOverviewReducer,\n    [azureDashboardStateKey]: azureDashboardReducer,\n    [azureHistoricalDataStateKey]: azureHistoricalDataReducer,\n    [costModelsStateKey]: costModelsReducer,\n    [exportStateKey]: exportReducer,\n    [gcpCostOverviewStateKey]: gcpCostOverviewReducer,\n    [gcpDashboardStateKey]: gcpDashboardReducer,\n    [gcpHistoricalDataStateKey]: gcpHistoricalDataReducer,\n    [metricsStateKey]: metricsReducer,\n    [ocpCostOverviewStateKey]: ocpCostOverviewReducer,\n    [ocpDashboardStateKey]: ocpDashboardReducer,\n    [ocpCloudDashboardStateKey]: ocpCloudDashboardReducer,\n    [ocpCloudDashboardStateKey]: ocpCloudDashboardReducer,\n    [ocpHistoricalDataStateKey]: ocpHistoricalDataReducer,\n    [ocpSupplementaryDashboardStateKey]: ocpSupplementaryDashboardReducer,\n    [ocpUsageDashboardStateKey]: ocpUsageDashboardReducer,\n    [orgStateKey]: orgReducer,\n    [priceListStateKey]: priceListReducer,\n    [providersStateKey]: providersReducer,\n    [rbacStateKey]: rbacReducer,\n    [reportStateKey]: reportReducer,\n    [forecastStateKey]: forecastReducer,\n    [sourcesStateKey]: sourcesReducer,\n    [tagStateKey]: tagReducer,\n    [uiStateKey]: uiReducer,\n    [userAccessStateKey]: userAccessReducer,\n    notifications,\n});\n","import { notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications';\nimport axios from 'axios';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './rootReducer';\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ serialize: true })\n    : compose;\nexport const middlewares = [thunk, notificationsMiddleware()];\nexport function configureStore(initialState) {\n    const enhancer = composeEnhancers(applyMiddleware(...middlewares));\n    const store = createStore(rootReducer, initialState, enhancer);\n    axios.interceptors.response.use(null, error => {\n        return Promise.reject(error);\n    });\n    return store;\n}\n","import { fetchRateMetrics } from 'api/metrics';\nimport { createAsyncAction } from 'typesafe-actions';\nexport const { request: fetchMetricsRequest, success: fetchMetricsSuccess, failure: fetchMetricsFailure, } = createAsyncAction('fetch/metrics/request', 'fetch/metrics/success', 'fetch/metrics/failure')();\nexport const fetchMetrics = (source_type = '') => {\n    return (dispatch) => {\n        dispatch(fetchMetricsRequest());\n        return fetchRateMetrics(source_type)\n            .then(res => {\n            dispatch(fetchMetricsSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchMetricsFailure(err));\n        });\n    };\n};\n","import axios from 'axios';\nexport function fetchRateMetrics(source_type = '') {\n    const query = source_type ? `?source_type=${source_type}` : '';\n    return axios.get(`metrics/${query}`);\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchMetricsFailure, fetchMetricsRequest, fetchMetricsSuccess } from './actions';\nexport const stateKey = 'metrics';\nexport const defaultState = {\n    error: null,\n    status: 0 /* none */,\n    metrics: null,\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(fetchMetricsSuccess):\n            return {\n                error: null,\n                status: 2 /* complete */,\n                metrics: action.payload.data,\n            };\n        case getType(fetchMetricsFailure):\n            return {\n                status: 2 /* complete */,\n                error: action.payload,\n                metrics: null,\n            };\n        case getType(fetchMetricsRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        default:\n            return state;\n    }\n};\n","import { parseApiError } from 'pages/costModels/createCostModelWizard/parseError';\nimport { stateKey } from './reducer';\nexport const metricsState = (state) => state[stateKey];\nexport const status = (state) => metricsState(state).status;\nexport const error = (state) => {\n    const err = metricsState(state).error;\n    if (err === null) {\n        return '';\n    }\n    return parseApiError(err);\n};\nexport const metrics = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return {};\n    }\n    return metricsPayload.data.reduce((acc, curr) => {\n        const prev = acc[curr.label_metric] ? Object.assign({}, acc[curr.label_metric]) : {};\n        return Object.assign(Object.assign({}, acc), { [curr.label_metric]: Object.assign(Object.assign({}, prev), { [curr.label_measurement]: curr }) });\n    }, {});\n};\nexport const maxRate = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return 0;\n    }\n    return metricsPayload.data.length;\n};\nexport const costTypes = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return [];\n    }\n    return metricsPayload.data.reduce((acc, curr) => {\n        if (acc.includes(curr.default_cost_type)) {\n            return acc;\n        }\n        return [curr.default_cost_type, ...acc];\n    }, []);\n};\n","import axios from 'axios';\nexport const OrgTypePaths = {\n    [\"org\" /* org */]: 'organizations/aws/',\n};\nexport function runOrg(orgType, query) {\n    const path = OrgTypePaths[orgType];\n    return axios.get(`${path}?${query}`);\n}\n","export const orgStateKey = 'org';\nexport function getOrgId(orgPathsType, orgType, query) {\n    return `${orgPathsType}--${orgType}--${query}`;\n}\n","import { getOrgId, orgStateKey } from './orgCommon';\nexport const selectOrgState = (state) => state[orgStateKey];\nexport const selectOrg = (state, orgPathsType, orgType, query) => selectOrgState(state).byId.get(getOrgId(orgPathsType, orgType, query));\nexport const selectOrgFetchStatus = (state, orgPathsType, orgType, query) => selectOrgState(state).fetchStatus.get(getOrgId(orgPathsType, orgType, query));\nexport const selectOrgError = (state, orgPathsType, orgType, query) => selectOrgState(state).errors.get(getOrgId(orgPathsType, orgType, query));\n","import { runOrg } from 'api/orgs/orgUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getOrgId } from './orgCommon';\nimport { selectOrg, selectOrgFetchStatus } from './orgSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchOrgRequest = createAction('org/request')();\nexport const fetchOrgSuccess = createAction('org/success')();\nexport const fetchOrgFailure = createAction('org/failure')();\nexport function fetchOrg(orgPathsType, orgType, query) {\n    return (dispatch, getState) => {\n        if (!isOrgExpired(getState(), orgPathsType, orgType, query)) {\n            return;\n        }\n        const meta = {\n            orgId: getOrgId(orgPathsType, orgType, query),\n        };\n        dispatch(fetchOrgRequest(meta));\n        runOrg(orgPathsType, orgType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchOrgSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchOrgFailure(err, meta));\n        });\n    };\n}\nfunction isOrgExpired(state, orgPathsType, orgType, query) {\n    const orgReport = selectOrg(state, orgPathsType, orgType, query);\n    const fetchStatus = selectOrgFetchStatus(state, orgPathsType, orgType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!orgReport) {\n        return true;\n    }\n    const now = Date.now();\n    return now > orgReport.timeRequested + expirationMS;\n}\n","import { runOrg as runAwsOrg } from './awsOrgs';\nexport function runOrg(orgPathsType, orgType, query) {\n    let orgReport;\n    switch (orgPathsType) {\n        case \"aws\" /* aws */:\n            orgReport = runAwsOrg(orgType, query);\n            break;\n    }\n    return orgReport;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchOrgFailure, fetchOrgRequest, fetchOrgSuccess } from './orgActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function orgReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchOrgRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.orgId, 1 /* inProgress */) });\n        case getType(fetchOrgSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.orgId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.orgId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.orgId, null) });\n        case getType(fetchOrgFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.orgId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.orgId, action.payload) });\n        default:\n            return state;\n    }\n}\n","export const stateKey = 'providers';\nexport const addProviderKey = 'add-provider';\nexport const awsProvidersQuery = {\n    type: 'AWS',\n};\nexport const azureProvidersQuery = {\n    type: 'AZURE',\n};\nexport const ocpProvidersQuery = {\n    type: 'OCP',\n};\nexport const gcpProvidersQuery = {\n    type: 'GCP',\n};\nexport function getReportId(type, query) {\n    return `${type}--${query}`;\n}\n","import { fetchProviders as apiGetProviders } from 'api/providers';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './providersCommon';\nexport const fetchProvidersRequest = createAction('providers/fetch/request')();\nexport const fetchProvidersSuccess = createAction('providers/fetch/success')();\nexport const fetchProvidersFailure = createAction('providers/fetch/failure')();\nexport function fetchProviders(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchProvidersRequest(meta));\n        return apiGetProviders(query)\n            .then(res => {\n            dispatch(fetchProvidersSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchProvidersFailure(err, meta));\n        });\n    };\n}\nexport const clearProviderFailure = createAction('providers/clear/failure');\n","import { getType } from 'typesafe-actions';\nimport { fetchProvidersFailure, fetchProvidersRequest, fetchProvidersSuccess } from './providersActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function providersReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchProvidersRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchProvidersSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchProvidersFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { addProviderKey, getReportId, stateKey } from './providersCommon';\nexport const selectProvidersState = (state) => state[stateKey];\n// Add provider\nexport const selectAddProviderFetchStatus = (state) => selectProvidersState(state).fetchStatus.get(addProviderKey);\nexport const selectAddProviderError = (state) => selectProvidersState(state).errors.get(addProviderKey);\n// Fetch providers\nexport const selectProviders = (state, providerType, query) => selectProvidersState(state).byId.get(getReportId(providerType, query));\nexport const selectProvidersFetchStatus = (state, providerType, query) => selectProvidersState(state).fetchStatus.get(getReportId(providerType, query));\nexport const selectProvidersError = (state, providerType, query) => selectProvidersState(state).errors.get(getReportId(providerType, query));\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { getRBAC } from 'api/rbac';\nimport i18next from 'i18next';\nimport { createAsyncAction } from 'typesafe-actions';\nexport const { request: fetchRbacRequest, success: fetchRbacSuccess, failure: fetchRbacFailure } = createAsyncAction('fetch/RBAC/request', 'fetch/RBAC/success', 'fetch/RBAC/failure')();\nexport const fetchRbac = () => {\n    return (dispatch) => {\n        dispatch(fetchRbacRequest());\n        return getRBAC()\n            .then(res => {\n            dispatch(fetchRbacSuccess(res));\n        })\n            .catch(err => {\n            dispatch(addNotification({\n                title: i18next.t('rbac.error_title'),\n                description: i18next.t('rbac.error_description'),\n                variant: 'danger',\n                dismissable: true,\n            }));\n            dispatch(fetchRbacFailure(err));\n        });\n    };\n};\n","export async function getRBAC() {\n    const _insights = window.insights;\n    if (_insights &&\n        _insights.chrome &&\n        _insights.chrome.auth &&\n        _insights.chrome.auth.getUser &&\n        _insights.chrome.getUserPermissions) {\n        const user = await _insights.chrome.auth.getUser();\n        const permissions = await _insights.chrome.getUserPermissions();\n        return {\n            isOrgAdmin: user.identity.user.is_org_admin,\n            permissions,\n        };\n    }\n    return { isOrgAdmin: false, permissions: null };\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchRbacFailure, fetchRbacRequest, fetchRbacSuccess } from './actions';\nexport const stateKey = 'RBAC';\nexport const defaultState = {\n    isOrgAdmin: false,\n    permissions: null,\n    status: 0 /* none */,\n    error: null,\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(fetchRbacRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchRbacSuccess):\n            return Object.assign(Object.assign({}, action.payload), { status: 2 /* complete */, error: null });\n        case getType(fetchRbacFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        default:\n            return state;\n    }\n};\n","import { stateKey } from './reducer';\nexport const selectRbacState = (state) => state[stateKey];\nexport const isCostModelWritePermission = (state) => {\n    const { isOrgAdmin, permissions } = selectRbacState(state);\n    if (isOrgAdmin === true) {\n        return true;\n    }\n    if (!permissions) {\n        return false;\n    }\n    const costModelPermissions = permissions.find(item => item.permission.startsWith('cost-management'));\n    if (!costModelPermissions) {\n        return false;\n    }\n    const [app, resource, operation] = costModelPermissions.permission.split(':');\n    if (app === 'cost-management' && resource === '*' && operation === '*') {\n        return true;\n    }\n    if ((resource === 'rate' || resource === 'cost_model') && operation === 'write') {\n        return true;\n    }\n    return false;\n};\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/aws/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/aws/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/azure/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/azure/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","export const reportStateKey = 'report';\nexport function getReportId(reportPathsType, reportType, query) {\n    return `${reportPathsType}--${reportType}--${query}`;\n}\n","import { getReportId, reportStateKey } from './reportCommon';\nexport const selectReportState = (state) => state[reportStateKey];\nexport const selectReport = (state, reportPathsType, reportType, query) => selectReportState(state).byId.get(getReportId(reportPathsType, reportType, query));\nexport const selectReportFetchStatus = (state, reportPathsType, reportType, query) => selectReportState(state).fetchStatus.get(getReportId(reportPathsType, reportType, query));\nexport const selectReportError = (state, reportPathsType, reportType, query) => selectReportState(state).errors.get(getReportId(reportPathsType, reportType, query));\n","import { runReport } from 'api/reports/reportUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './reportCommon';\nimport { selectReport, selectReportFetchStatus } from './reportSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchReportRequest = createAction('report/request')();\nexport const fetchReportSuccess = createAction('report/success')();\nexport const fetchReportFailure = createAction('report/failure')();\nexport function fetchReport(reportPathsType, reportType, query) {\n    return (dispatch, getState) => {\n        if (!isReportExpired(getState(), reportPathsType, reportType, query)) {\n            return;\n        }\n        const meta = {\n            reportId: getReportId(reportPathsType, reportType, query),\n        };\n        dispatch(fetchReportRequest(meta));\n        runReport(reportPathsType, reportType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchReportSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchReportFailure(err, meta));\n        });\n    };\n}\nfunction isReportExpired(state, reportPathsType, reportType, query) {\n    const report = selectReport(state, reportPathsType, reportType, query);\n    const fetchStatus = selectReportFetchStatus(state, reportPathsType, reportType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!report) {\n        return true;\n    }\n    const now = Date.now();\n    return now > report.timeRequested + expirationMS;\n}\n","import { runReport as runAwsCloudReport } from './awsCloudReports';\nimport { runReport as runAwsReport } from './awsReports';\nimport { runReport as runAzureCloudReport } from './azureCloudReports';\nimport { runReport as runAzureReport } from './azureReports';\nimport { runReport as runGcpReport } from './gcpReports';\nimport { runReport as runOcpCloudReport } from './ocpCloudReports';\nimport { runReport as runOcpReport } from './ocpReports';\nimport { runReport as runOcpUsageReport } from './ocpUsageReports';\nexport function runReport(reportPathsType, reportType, query) {\n    let report;\n    switch (reportPathsType) {\n        case \"aws\" /* aws */:\n            report = runAwsReport(reportType, query);\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            report = runAwsCloudReport(reportType, query);\n            break;\n        case \"azure\" /* azure */:\n            report = runAzureReport(reportType, query);\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            report = runAzureCloudReport(reportType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            report = runGcpReport(reportType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            report = runOcpReport(reportType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            report = runOcpCloudReport(reportType, query);\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            report = runOcpUsageReport(reportType, query);\n            break;\n    }\n    return report;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchReportFailure, fetchReportRequest, fetchReportSuccess } from './reportActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function reportReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchReportRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchReportSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchReportFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { fetchProviders as apiGetSources } from 'api/providers';\nimport { createAction, createAsyncAction } from 'typesafe-actions';\nexport const updateFilterToolbar = createAction('fetch/source/filter')();\nexport const { request: fetchSourcesRequest, success: fetchSourcesSuccess, failure: fetchSourcesFailure, } = createAsyncAction('fetch/source/request', 'fetch/source/success', 'fetch/source/failure')();\nexport const fetchSources = (query = '') => {\n    return (dispatch) => {\n        dispatch(fetchSourcesRequest());\n        return apiGetSources(query)\n            .then(res => {\n            dispatch(fetchSourcesSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchSourcesFailure(err));\n        });\n    };\n};\n","import { getType } from 'typesafe-actions';\nimport { fetchSourcesFailure, fetchSourcesRequest, fetchSourcesSuccess, updateFilterToolbar } from './actions';\nexport const stateKey = 'sources';\nexport const defaultState = {\n    sources: null,\n    error: null,\n    status: 0 /* none */,\n    currentFilterType: 'name',\n    currentFilterValue: '',\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(fetchSourcesRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchSourcesSuccess):\n            return Object.assign(Object.assign({}, state), { currentFilterValue: '', status: 2 /* complete */, error: null, sources: action.payload.data });\n        case getType(fetchSourcesFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        case getType(updateFilterToolbar):\n            return Object.assign(Object.assign({}, state), action.payload);\n        default:\n            return state;\n    }\n};\n","import { selectPagination } from 'store/djangoUtils/pagination';\nimport { selectQuery } from 'store/djangoUtils/query';\nimport { stateKey } from './reducer';\nexport const sourcesState = (state) => state[stateKey];\nexport const sources = (state) => {\n    const srcs = sourcesState(state).sources;\n    if (srcs) {\n        return srcs.data;\n    }\n    return [];\n};\nexport const status = (state) => sourcesState(state).status;\nexport const error = (state) => sourcesState(state).error;\nexport const currentFilterValue = (state) => sourcesState(state).currentFilterValue;\nexport const currentFilterType = (state) => sourcesState(state).currentFilterType;\nexport const query = selectQuery((state) => sourcesState(state).sources, [\n    'name',\n    'type',\n    'offset',\n    'limit',\n]);\nexport const pagination = selectPagination((state) => sourcesState(state).sources);\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/aws/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/azure/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/gcp/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","export const tagStateKey = 'tag';\nexport function getTagId(tagPathsType, tagType, query) {\n    return `${tagPathsType}--${tagType}--${query}`;\n}\n","import { getTagId, tagStateKey } from './tagCommon';\nexport const selectTagState = (state) => state[tagStateKey];\nexport const selectTag = (state, tagPathsType, tagType, query) => selectTagState(state).byId.get(getTagId(tagPathsType, tagType, query));\nexport const selectTagFetchStatus = (state, tagPathsType, tagType, query) => selectTagState(state).fetchStatus.get(getTagId(tagPathsType, tagType, query));\nexport const selectTagError = (state, tagPathsType, tagType, query) => selectTagState(state).errors.get(getTagId(tagPathsType, tagType, query));\n","import { runTag } from 'api/tags/tagUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getTagId } from './tagCommon';\nimport { selectTag, selectTagFetchStatus } from './tagSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchTagRequest = createAction('tag/request')();\nexport const fetchTagSuccess = createAction('tag/success')();\nexport const fetchTagFailure = createAction('tag/failure')();\nexport function fetchTag(tagPathsType, tagType, query) {\n    return (dispatch, getState) => {\n        if (!isTagExpired(getState(), tagPathsType, tagType, query)) {\n            return;\n        }\n        const meta = {\n            tagId: getTagId(tagPathsType, tagType, query),\n        };\n        dispatch(fetchTagRequest(meta));\n        runTag(tagPathsType, tagType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchTagSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchTagFailure(err, meta));\n        });\n    };\n}\nfunction isTagExpired(state, tagPathsType, tagType, query) {\n    const tagReport = selectTag(state, tagPathsType, tagType, query);\n    const fetchStatus = selectTagFetchStatus(state, tagPathsType, tagType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!tagReport) {\n        return true;\n    }\n    const now = Date.now();\n    return now > tagReport.timeRequested + expirationMS;\n}\n","import { runTag as runAwsTag } from './awsTags';\nimport { runTag as runAzureTag } from './azureTags';\nimport { runTag as runGcpTag } from './gcpTags';\nimport { runTag as runOcpTag } from './ocpTags';\nexport function runTag(tagPathsType, tagType, query) {\n    let tagReport;\n    switch (tagPathsType) {\n        case \"aws\" /* aws */:\n            tagReport = runAwsTag(tagType, query);\n            break;\n        case \"azure\" /* azure */:\n            tagReport = runAzureTag(tagType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            tagReport = runGcpTag(tagType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            tagReport = runOcpTag(tagType, query);\n            break;\n    }\n    return tagReport;\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchTagFailure, fetchTagRequest, fetchTagSuccess } from './tagActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function tagReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchTagRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.tagId, 1 /* inProgress */) });\n        case getType(fetchTagSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.tagId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.tagId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.tagId, null) });\n        case getType(fetchTagFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.tagId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.tagId, action.payload) });\n        default:\n            return state;\n    }\n}\n","export const stateKey = 'userAccess';\nexport const userAccessKey = 'user-access';\nexport const allUserAccessQuery = {\n    type: '',\n};\nexport const awsUserAccessQuery = {\n    type: 'AWS',\n};\nexport const azureUserAccessQuery = {\n    type: 'AZURE',\n};\nexport const costModelUserAccessQuery = {\n    type: 'cost_model',\n};\nexport const ocpUserAccessQuery = {\n    type: 'OCP',\n};\nexport const gcpUserAccessQuery = {\n    type: 'GCP',\n};\nexport function getReportId(type, query) {\n    return `${type}--${query}`;\n}\n","import { fetchUserAccess as apiGetUserAccess } from 'api/userAccess';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './userAccessCommon';\nexport const fetchUserAccessRequest = createAction('userAccess/fetch/request')();\nexport const fetchUserAccessSuccess = createAction('userAccess/fetch/success')();\nexport const fetchUserAccessFailure = createAction('userAccess/fetch/failure')();\nexport function fetchUserAccess(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchUserAccessRequest(meta));\n        return apiGetUserAccess(query)\n            .then(res => {\n            dispatch(fetchUserAccessSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchUserAccessFailure(err, meta));\n        });\n    };\n}\nexport const clearuserAccessFailure = createAction('userAccess/clear/failure');\n","import axios from 'axios';\n// If the user-access API is called without a query parameter, all types are returned in the response\nexport function fetchUserAccess(query) {\n    const insights = window.insights;\n    const queryString = query ? `?${query}` : '';\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`user-access/${queryString}`);\n        });\n    }\n    else {\n        return axios.get(`user-access/${queryString}`);\n    }\n}\n","import { getType } from 'typesafe-actions';\nimport { fetchUserAccessFailure, fetchUserAccessRequest, fetchUserAccessSuccess } from './userAccessActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function userAccessReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchUserAccessRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchUserAccessSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchUserAccessFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { getReportId, stateKey, userAccessKey } from './userAccessCommon';\nexport const selectUserAccessState = (state) => state[stateKey];\n// Add provider\nexport const selectAddProviderFetchStatus = (state) => selectUserAccessState(state).fetchStatus.get(userAccessKey);\nexport const selectAddProviderError = (state) => selectUserAccessState(state).errors.get(userAccessKey);\n// Fetch userAccess\nexport const selectUserAccess = (state, providerType, query) => selectUserAccessState(state).byId.get(getReportId(providerType, query));\nexport const selectUserAccessFetchStatus = (state, providerType, query) => selectUserAccessState(state).fetchStatus.get(getReportId(providerType, query));\nexport const selectUserAccessError = (state, providerType, query) => selectUserAccessState(state).errors.get(getReportId(providerType, query));\n","export const getBaseName = pathname => {\n    let release = '/';\n    const pathName = pathname.split('/');\n    pathName.shift();\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n    // return `${release}${pathName[0]}/${pathName[1] || ''}`;\n    return `${release}${pathName[0]}`;\n};\n"],"sourceRoot":""}